
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a80  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004c30  08004c30  00005c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cf4  08004cf4  00006060  2**0
                  CONTENTS
  4 .ARM          00000000  08004cf4  08004cf4  00006060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cf4  08004cf4  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cf4  08004cf4  00005cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cf8  08004cf8  00005cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004cfc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b54  20000060  08004d5c  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bb4  08004d5c  00006bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153ff  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f11  00000000  00000000  0001b48f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  0001e3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed5  00000000  00000000  0001f6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e03  00000000  00000000  000205bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145ea  00000000  00000000  000233c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001050cb  00000000  00000000  000379aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ca75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005370  00000000  00000000  0013cab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00141e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004c18 	.word	0x08004c18

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08004c18 	.word	0x08004c18

080001f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f4:	f000 f9d1 	bl	800059a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f8:	f000 f824 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fc:	f000 f868 	bl	80002d0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000200:	f001 fe72 	bl	8001ee8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartDefaultTask, NULL, &HeartBeat_attributes);
 8000204:	4a09      	ldr	r2, [pc, #36]	@ (800022c <main+0x3c>)
 8000206:	2100      	movs	r1, #0
 8000208:	4809      	ldr	r0, [pc, #36]	@ (8000230 <main+0x40>)
 800020a:	f001 feb7 	bl	8001f7c <osThreadNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a08      	ldr	r2, [pc, #32]	@ (8000234 <main+0x44>)
 8000212:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 8000214:	4a08      	ldr	r2, [pc, #32]	@ (8000238 <main+0x48>)
 8000216:	2100      	movs	r1, #0
 8000218:	4808      	ldr	r0, [pc, #32]	@ (800023c <main+0x4c>)
 800021a:	f001 feaf 	bl	8001f7c <osThreadNew>
 800021e:	4603      	mov	r3, r0
 8000220:	4a07      	ldr	r2, [pc, #28]	@ (8000240 <main+0x50>)
 8000222:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000224:	f001 fe84 	bl	8001f30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000228:	bf00      	nop
 800022a:	e7fd      	b.n	8000228 <main+0x38>
 800022c:	08004c64 	.word	0x08004c64
 8000230:	08000335 	.word	0x08000335
 8000234:	2000007c 	.word	0x2000007c
 8000238:	08004c88 	.word	0x08004c88
 800023c:	08000355 	.word	0x08000355
 8000240:	20000080 	.word	0x20000080

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b096      	sub	sp, #88	@ 0x58
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0314 	add.w	r3, r7, #20
 800024e:	2244      	movs	r2, #68	@ 0x44
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f004 fbf8 	bl	8004a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	463b      	mov	r3, r7
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000266:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800026a:	f000 fc83 	bl	8000b74 <HAL_PWREx_ControlVoltageScaling>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000274:	f000 f888 	bl	8000388 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000278:	2310      	movs	r3, #16
 800027a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800027c:	2301      	movs	r3, #1
 800027e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000284:	2360      	movs	r3, #96	@ 0x60
 8000286:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000288:	2300      	movs	r3, #0
 800028a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028c:	f107 0314 	add.w	r3, r7, #20
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fcc5 	bl	8000c20 <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800029c:	f000 f874 	bl	8000388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a0:	230f      	movs	r3, #15
 80002a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002a4:	2300      	movs	r3, #0
 80002a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b4:	463b      	mov	r3, r7
 80002b6:	2100      	movs	r1, #0
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 f8cb 	bl	8001454 <HAL_RCC_ClockConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002c4:	f000 f860 	bl	8000388 <Error_Handler>
  }
}
 80002c8:	bf00      	nop
 80002ca:	3758      	adds	r7, #88	@ 0x58
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]
 80002e0:	60da      	str	r2, [r3, #12]
 80002e2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e4:	4b12      	ldr	r3, [pc, #72]	@ (8000330 <MX_GPIO_Init+0x60>)
 80002e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002e8:	4a11      	ldr	r2, [pc, #68]	@ (8000330 <MX_GPIO_Init+0x60>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000330 <MX_GPIO_Init+0x60>)
 80002f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f4:	f003 0301 	and.w	r3, r3, #1
 80002f8:	603b      	str	r3, [r7, #0]
 80002fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OK_LED_GPIO_Port, OK_LED_Pin, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000302:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000306:	f000 fbf5 	bl	8000af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OK_LED_Pin */
  GPIO_InitStruct.Pin = OK_LED_Pin;
 800030a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800030e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000310:	2301      	movs	r3, #1
 8000312:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000318:	2300      	movs	r3, #0
 800031a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(OK_LED_GPIO_Port, &GPIO_InitStruct);
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	4619      	mov	r1, r3
 8000320:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000324:	f000 fa54 	bl	80007d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000328:	bf00      	nop
 800032a:	3718      	adds	r7, #24
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40021000 	.word	0x40021000

08000334 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 800033c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000344:	f000 fbee 	bl	8000b24 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000348:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800034c:	f001 fea8 	bl	80020a0 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000350:	bf00      	nop
 8000352:	e7f3      	b.n	800033c <StartDefaultTask+0x8>

08000354 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800035c:	2001      	movs	r0, #1
 800035e:	f001 fe9f 	bl	80020a0 <osDelay>
 8000362:	e7fb      	b.n	800035c <StartTask02+0x8>

08000364 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a04      	ldr	r2, [pc, #16]	@ (8000384 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d101      	bne.n	800037a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000376:	f000 f929 	bl	80005cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800037a:	bf00      	nop
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40000400 	.word	0x40000400

08000388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800038c:	b672      	cpsid	i
}
 800038e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000390:	bf00      	nop
 8000392:	e7fd      	b.n	8000390 <Error_Handler+0x8>

08000394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800039a:	4b11      	ldr	r3, [pc, #68]	@ (80003e0 <HAL_MspInit+0x4c>)
 800039c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800039e:	4a10      	ldr	r2, [pc, #64]	@ (80003e0 <HAL_MspInit+0x4c>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80003a6:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <HAL_MspInit+0x4c>)
 80003a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b2:	4b0b      	ldr	r3, [pc, #44]	@ (80003e0 <HAL_MspInit+0x4c>)
 80003b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003b6:	4a0a      	ldr	r2, [pc, #40]	@ (80003e0 <HAL_MspInit+0x4c>)
 80003b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80003be:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <HAL_MspInit+0x4c>)
 80003c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003c6:	603b      	str	r3, [r7, #0]
 80003c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	210f      	movs	r1, #15
 80003ce:	f06f 0001 	mvn.w	r0, #1
 80003d2:	f000 f9d3 	bl	800077c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000

080003e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b08e      	sub	sp, #56	@ 0x38
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80003ec:	2300      	movs	r3, #0
 80003ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80003f2:	4b34      	ldr	r3, [pc, #208]	@ (80004c4 <HAL_InitTick+0xe0>)
 80003f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003f6:	4a33      	ldr	r2, [pc, #204]	@ (80004c4 <HAL_InitTick+0xe0>)
 80003f8:	f043 0302 	orr.w	r3, r3, #2
 80003fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80003fe:	4b31      	ldr	r3, [pc, #196]	@ (80004c4 <HAL_InitTick+0xe0>)
 8000400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000402:	f003 0302 	and.w	r3, r3, #2
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800040a:	f107 0210 	add.w	r2, r7, #16
 800040e:	f107 0314 	add.w	r3, r7, #20
 8000412:	4611      	mov	r1, r2
 8000414:	4618      	mov	r0, r3
 8000416:	f001 f9cb 	bl	80017b0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800041a:	6a3b      	ldr	r3, [r7, #32]
 800041c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800041e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000420:	2b00      	cmp	r3, #0
 8000422:	d103      	bne.n	800042c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000424:	f001 f9ae 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 8000428:	6378      	str	r0, [r7, #52]	@ 0x34
 800042a:	e004      	b.n	8000436 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800042c:	f001 f9aa 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 8000430:	4603      	mov	r3, r0
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000438:	4a23      	ldr	r2, [pc, #140]	@ (80004c8 <HAL_InitTick+0xe4>)
 800043a:	fba2 2303 	umull	r2, r3, r2, r3
 800043e:	0c9b      	lsrs	r3, r3, #18
 8000440:	3b01      	subs	r3, #1
 8000442:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000444:	4b21      	ldr	r3, [pc, #132]	@ (80004cc <HAL_InitTick+0xe8>)
 8000446:	4a22      	ldr	r2, [pc, #136]	@ (80004d0 <HAL_InitTick+0xec>)
 8000448:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800044a:	4b20      	ldr	r3, [pc, #128]	@ (80004cc <HAL_InitTick+0xe8>)
 800044c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000450:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000452:	4a1e      	ldr	r2, [pc, #120]	@ (80004cc <HAL_InitTick+0xe8>)
 8000454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000456:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000458:	4b1c      	ldr	r3, [pc, #112]	@ (80004cc <HAL_InitTick+0xe8>)
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045e:	4b1b      	ldr	r3, [pc, #108]	@ (80004cc <HAL_InitTick+0xe8>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000464:	4b19      	ldr	r3, [pc, #100]	@ (80004cc <HAL_InitTick+0xe8>)
 8000466:	2200      	movs	r2, #0
 8000468:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800046a:	4818      	ldr	r0, [pc, #96]	@ (80004cc <HAL_InitTick+0xe8>)
 800046c:	f001 fa32 	bl	80018d4 <HAL_TIM_Base_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000476:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800047a:	2b00      	cmp	r3, #0
 800047c:	d11b      	bne.n	80004b6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800047e:	4813      	ldr	r0, [pc, #76]	@ (80004cc <HAL_InitTick+0xe8>)
 8000480:	f001 fa8a 	bl	8001998 <HAL_TIM_Base_Start_IT>
 8000484:	4603      	mov	r3, r0
 8000486:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800048a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800048e:	2b00      	cmp	r3, #0
 8000490:	d111      	bne.n	80004b6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000492:	201d      	movs	r0, #29
 8000494:	f000 f98e 	bl	80007b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2b0f      	cmp	r3, #15
 800049c:	d808      	bhi.n	80004b0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800049e:	2200      	movs	r2, #0
 80004a0:	6879      	ldr	r1, [r7, #4]
 80004a2:	201d      	movs	r0, #29
 80004a4:	f000 f96a 	bl	800077c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004a8:	4a0a      	ldr	r2, [pc, #40]	@ (80004d4 <HAL_InitTick+0xf0>)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	6013      	str	r3, [r2, #0]
 80004ae:	e002      	b.n	80004b6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80004b0:	2301      	movs	r3, #1
 80004b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80004b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3738      	adds	r7, #56	@ 0x38
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000
 80004c8:	431bde83 	.word	0x431bde83
 80004cc:	20000084 	.word	0x20000084
 80004d0:	40000400 	.word	0x40000400
 80004d4:	20000004 	.word	0x20000004

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <NMI_Handler+0x4>

080004e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <HardFault_Handler+0x4>

080004e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <MemManage_Handler+0x4>

080004f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <BusFault_Handler+0x4>

080004f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <UsageFault_Handler+0x4>

08000500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000514:	4802      	ldr	r0, [pc, #8]	@ (8000520 <TIM3_IRQHandler+0x10>)
 8000516:	f001 faaf 	bl	8001a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000084 	.word	0x20000084

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <SystemInit+0x20>)
 800052a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800052e:	4a05      	ldr	r2, [pc, #20]	@ (8000544 <SystemInit+0x20>)
 8000530:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000534:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000548:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000580 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800054c:	f7ff ffea 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000550:	480c      	ldr	r0, [pc, #48]	@ (8000584 <LoopForever+0x6>)
  ldr r1, =_edata
 8000552:	490d      	ldr	r1, [pc, #52]	@ (8000588 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000554:	4a0d      	ldr	r2, [pc, #52]	@ (800058c <LoopForever+0xe>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000558:	e002      	b.n	8000560 <LoopCopyDataInit>

0800055a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800055c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055e:	3304      	adds	r3, #4

08000560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000564:	d3f9      	bcc.n	800055a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000566:	4a0a      	ldr	r2, [pc, #40]	@ (8000590 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000568:	4c0a      	ldr	r4, [pc, #40]	@ (8000594 <LoopForever+0x16>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800056c:	e001      	b.n	8000572 <LoopFillZerobss>

0800056e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000570:	3204      	adds	r2, #4

08000572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000574:	d3fb      	bcc.n	800056e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000576:	f004 fac5 	bl	8004b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800057a:	f7ff fe39 	bl	80001f0 <main>

0800057e <LoopForever>:

LoopForever:
    b LoopForever
 800057e:	e7fe      	b.n	800057e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000580:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000588:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800058c:	08004cfc 	.word	0x08004cfc
  ldr r2, =_sbss
 8000590:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000594:	20001bb4 	.word	0x20001bb4

08000598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000598:	e7fe      	b.n	8000598 <ADC1_2_IRQHandler>

0800059a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005a0:	2300      	movs	r3, #0
 80005a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a4:	2003      	movs	r0, #3
 80005a6:	f000 f8de 	bl	8000766 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005aa:	200f      	movs	r0, #15
 80005ac:	f7ff ff1a 	bl	80003e4 <HAL_InitTick>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d002      	beq.n	80005bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	e001      	b.n	80005c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005bc:	f7ff feea 	bl	8000394 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005c0:	79fb      	ldrb	r3, [r7, #7]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <HAL_IncTick+0x20>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <HAL_IncTick+0x24>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a04      	ldr	r2, [pc, #16]	@ (80005f0 <HAL_IncTick+0x24>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000008 	.word	0x20000008
 80005f0:	200000d0 	.word	0x200000d0

080005f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return uwTick;
 80005f8:	4b03      	ldr	r3, [pc, #12]	@ (8000608 <HAL_GetTick+0x14>)
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200000d0 	.word	0x200000d0

0800060c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000628:	4013      	ands	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000634:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800063c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063e:	4a04      	ldr	r2, [pc, #16]	@ (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	60d3      	str	r3, [r2, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000658:	4b04      	ldr	r3, [pc, #16]	@ (800066c <__NVIC_GetPriorityGrouping+0x18>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	f003 0307 	and.w	r3, r3, #7
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	2b00      	cmp	r3, #0
 8000680:	db0b      	blt.n	800069a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 021f 	and.w	r2, r3, #31
 8000688:	4907      	ldr	r1, [pc, #28]	@ (80006a8 <__NVIC_EnableIRQ+0x38>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	2001      	movs	r0, #1
 8000692:	fa00 f202 	lsl.w	r2, r0, r2
 8000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000e100 	.word	0xe000e100

080006ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db0a      	blt.n	80006d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	490c      	ldr	r1, [pc, #48]	@ (80006f8 <__NVIC_SetPriority+0x4c>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	0112      	lsls	r2, r2, #4
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	440b      	add	r3, r1
 80006d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d4:	e00a      	b.n	80006ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4908      	ldr	r1, [pc, #32]	@ (80006fc <__NVIC_SetPriority+0x50>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	3b04      	subs	r3, #4
 80006e4:	0112      	lsls	r2, r2, #4
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	440b      	add	r3, r1
 80006ea:	761a      	strb	r2, [r3, #24]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000700:	b480      	push	{r7}
 8000702:	b089      	sub	sp, #36	@ 0x24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	f1c3 0307 	rsb	r3, r3, #7
 800071a:	2b04      	cmp	r3, #4
 800071c:	bf28      	it	cs
 800071e:	2304      	movcs	r3, #4
 8000720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3304      	adds	r3, #4
 8000726:	2b06      	cmp	r3, #6
 8000728:	d902      	bls.n	8000730 <NVIC_EncodePriority+0x30>
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3b03      	subs	r3, #3
 800072e:	e000      	b.n	8000732 <NVIC_EncodePriority+0x32>
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	f04f 32ff 	mov.w	r2, #4294967295
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	43da      	mvns	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	401a      	ands	r2, r3
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000748:	f04f 31ff 	mov.w	r1, #4294967295
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	43d9      	mvns	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	4313      	orrs	r3, r2
         );
}
 800075a:	4618      	mov	r0, r3
 800075c:	3724      	adds	r7, #36	@ 0x24
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff4c 	bl	800060c <__NVIC_SetPriorityGrouping>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800078e:	f7ff ff61 	bl	8000654 <__NVIC_GetPriorityGrouping>
 8000792:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	68b9      	ldr	r1, [r7, #8]
 8000798:	6978      	ldr	r0, [r7, #20]
 800079a:	f7ff ffb1 	bl	8000700 <NVIC_EncodePriority>
 800079e:	4602      	mov	r2, r0
 80007a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a4:	4611      	mov	r1, r2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ff80 	bl	80006ac <__NVIC_SetPriority>
}
 80007ac:	bf00      	nop
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff54 	bl	8000670 <__NVIC_EnableIRQ>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b087      	sub	sp, #28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007de:	e166      	b.n	8000aae <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	2101      	movs	r1, #1
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	fa01 f303 	lsl.w	r3, r1, r3
 80007ec:	4013      	ands	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f000 8158 	beq.w	8000aa8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f003 0303 	and.w	r3, r3, #3
 8000800:	2b01      	cmp	r3, #1
 8000802:	d005      	beq.n	8000810 <HAL_GPIO_Init+0x40>
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f003 0303 	and.w	r3, r3, #3
 800080c:	2b02      	cmp	r3, #2
 800080e:	d130      	bne.n	8000872 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	2203      	movs	r2, #3
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	43db      	mvns	r3, r3
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	4013      	ands	r3, r2
 8000826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	68da      	ldr	r2, [r3, #12]
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	4313      	orrs	r3, r2
 8000838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000846:	2201      	movs	r2, #1
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	43db      	mvns	r3, r3
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	4013      	ands	r3, r2
 8000854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	091b      	lsrs	r3, r3, #4
 800085c:	f003 0201 	and.w	r2, r3, #1
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	4313      	orrs	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	f003 0303 	and.w	r3, r3, #3
 800087a:	2b03      	cmp	r3, #3
 800087c:	d017      	beq.n	80008ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	2203      	movs	r2, #3
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4013      	ands	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	689a      	ldr	r2, [r3, #8]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	f003 0303 	and.w	r3, r3, #3
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d123      	bne.n	8000902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	08da      	lsrs	r2, r3, #3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3208      	adds	r2, #8
 80008c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	220f      	movs	r2, #15
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43db      	mvns	r3, r3
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	4013      	ands	r3, r2
 80008dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	691a      	ldr	r2, [r3, #16]
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	f003 0307 	and.w	r3, r3, #7
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	08da      	lsrs	r2, r3, #3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3208      	adds	r2, #8
 80008fc:	6939      	ldr	r1, [r7, #16]
 80008fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	2203      	movs	r2, #3
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4013      	ands	r3, r2
 8000918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	f003 0203 	and.w	r2, r3, #3
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4313      	orrs	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800093e:	2b00      	cmp	r3, #0
 8000940:	f000 80b2 	beq.w	8000aa8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000944:	4b61      	ldr	r3, [pc, #388]	@ (8000acc <HAL_GPIO_Init+0x2fc>)
 8000946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000948:	4a60      	ldr	r2, [pc, #384]	@ (8000acc <HAL_GPIO_Init+0x2fc>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000950:	4b5e      	ldr	r3, [pc, #376]	@ (8000acc <HAL_GPIO_Init+0x2fc>)
 8000952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800095c:	4a5c      	ldr	r2, [pc, #368]	@ (8000ad0 <HAL_GPIO_Init+0x300>)
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	089b      	lsrs	r3, r3, #2
 8000962:	3302      	adds	r3, #2
 8000964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	f003 0303 	and.w	r3, r3, #3
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	220f      	movs	r2, #15
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000986:	d02b      	beq.n	80009e0 <HAL_GPIO_Init+0x210>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a52      	ldr	r2, [pc, #328]	@ (8000ad4 <HAL_GPIO_Init+0x304>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d025      	beq.n	80009dc <HAL_GPIO_Init+0x20c>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a51      	ldr	r2, [pc, #324]	@ (8000ad8 <HAL_GPIO_Init+0x308>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d01f      	beq.n	80009d8 <HAL_GPIO_Init+0x208>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a50      	ldr	r2, [pc, #320]	@ (8000adc <HAL_GPIO_Init+0x30c>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d019      	beq.n	80009d4 <HAL_GPIO_Init+0x204>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a4f      	ldr	r2, [pc, #316]	@ (8000ae0 <HAL_GPIO_Init+0x310>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d013      	beq.n	80009d0 <HAL_GPIO_Init+0x200>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a4e      	ldr	r2, [pc, #312]	@ (8000ae4 <HAL_GPIO_Init+0x314>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d00d      	beq.n	80009cc <HAL_GPIO_Init+0x1fc>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a4d      	ldr	r2, [pc, #308]	@ (8000ae8 <HAL_GPIO_Init+0x318>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d007      	beq.n	80009c8 <HAL_GPIO_Init+0x1f8>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a4c      	ldr	r2, [pc, #304]	@ (8000aec <HAL_GPIO_Init+0x31c>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d101      	bne.n	80009c4 <HAL_GPIO_Init+0x1f4>
 80009c0:	2307      	movs	r3, #7
 80009c2:	e00e      	b.n	80009e2 <HAL_GPIO_Init+0x212>
 80009c4:	2308      	movs	r3, #8
 80009c6:	e00c      	b.n	80009e2 <HAL_GPIO_Init+0x212>
 80009c8:	2306      	movs	r3, #6
 80009ca:	e00a      	b.n	80009e2 <HAL_GPIO_Init+0x212>
 80009cc:	2305      	movs	r3, #5
 80009ce:	e008      	b.n	80009e2 <HAL_GPIO_Init+0x212>
 80009d0:	2304      	movs	r3, #4
 80009d2:	e006      	b.n	80009e2 <HAL_GPIO_Init+0x212>
 80009d4:	2303      	movs	r3, #3
 80009d6:	e004      	b.n	80009e2 <HAL_GPIO_Init+0x212>
 80009d8:	2302      	movs	r3, #2
 80009da:	e002      	b.n	80009e2 <HAL_GPIO_Init+0x212>
 80009dc:	2301      	movs	r3, #1
 80009de:	e000      	b.n	80009e2 <HAL_GPIO_Init+0x212>
 80009e0:	2300      	movs	r3, #0
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	f002 0203 	and.w	r2, r2, #3
 80009e8:	0092      	lsls	r2, r2, #2
 80009ea:	4093      	lsls	r3, r2
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009f2:	4937      	ldr	r1, [pc, #220]	@ (8000ad0 <HAL_GPIO_Init+0x300>)
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	089b      	lsrs	r3, r3, #2
 80009f8:	3302      	adds	r3, #2
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a00:	4b3b      	ldr	r3, [pc, #236]	@ (8000af0 <HAL_GPIO_Init+0x320>)
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d003      	beq.n	8000a24 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a24:	4a32      	ldr	r2, [pc, #200]	@ (8000af0 <HAL_GPIO_Init+0x320>)
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a2a:	4b31      	ldr	r3, [pc, #196]	@ (8000af0 <HAL_GPIO_Init+0x320>)
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	43db      	mvns	r3, r3
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a4e:	4a28      	ldr	r2, [pc, #160]	@ (8000af0 <HAL_GPIO_Init+0x320>)
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a54:	4b26      	ldr	r3, [pc, #152]	@ (8000af0 <HAL_GPIO_Init+0x320>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4013      	ands	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d003      	beq.n	8000a78 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a78:	4a1d      	ldr	r2, [pc, #116]	@ (8000af0 <HAL_GPIO_Init+0x320>)
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <HAL_GPIO_Init+0x320>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	43db      	mvns	r3, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d003      	beq.n	8000aa2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000aa2:	4a13      	ldr	r2, [pc, #76]	@ (8000af0 <HAL_GPIO_Init+0x320>)
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	f47f ae91 	bne.w	80007e0 <HAL_GPIO_Init+0x10>
  }
}
 8000abe:	bf00      	nop
 8000ac0:	bf00      	nop
 8000ac2:	371c      	adds	r7, #28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40010000 	.word	0x40010000
 8000ad4:	48000400 	.word	0x48000400
 8000ad8:	48000800 	.word	0x48000800
 8000adc:	48000c00 	.word	0x48000c00
 8000ae0:	48001000 	.word	0x48001000
 8000ae4:	48001400 	.word	0x48001400
 8000ae8:	48001800 	.word	0x48001800
 8000aec:	48001c00 	.word	0x48001c00
 8000af0:	40010400 	.word	0x40010400

08000af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	807b      	strh	r3, [r7, #2]
 8000b00:	4613      	mov	r3, r2
 8000b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b04:	787b      	ldrb	r3, [r7, #1]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d003      	beq.n	8000b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b0a:	887a      	ldrh	r2, [r7, #2]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b10:	e002      	b.n	8000b18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b12:	887a      	ldrh	r2, [r7, #2]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b36:	887a      	ldrh	r2, [r7, #2]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	041a      	lsls	r2, r3, #16
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	43d9      	mvns	r1, r3
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	400b      	ands	r3, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	619a      	str	r2, [r3, #24]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b5c:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40007000 	.word	0x40007000

08000b74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b82:	d130      	bne.n	8000be6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b84:	4b23      	ldr	r3, [pc, #140]	@ (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b90:	d038      	beq.n	8000c04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b92:	4b20      	ldr	r3, [pc, #128]	@ (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ba0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2232      	movs	r2, #50	@ 0x32
 8000ba8:	fb02 f303 	mul.w	r3, r2, r3
 8000bac:	4a1b      	ldr	r2, [pc, #108]	@ (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bae:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb2:	0c9b      	lsrs	r3, r3, #18
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bb8:	e002      	b.n	8000bc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bc0:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bcc:	d102      	bne.n	8000bd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1f2      	bne.n	8000bba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000be0:	d110      	bne.n	8000c04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e00f      	b.n	8000c06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000be6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bf2:	d007      	beq.n	8000c04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bf4:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000bfc:	4a05      	ldr	r2, [pc, #20]	@ (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40007000 	.word	0x40007000
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	431bde83 	.word	0x431bde83

08000c20 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f000 bc08 	b.w	8001444 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c34:	4b96      	ldr	r3, [pc, #600]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	f003 030c 	and.w	r3, r3, #12
 8000c3c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c3e:	4b94      	ldr	r3, [pc, #592]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f000 80e4 	beq.w	8000e1e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d007      	beq.n	8000c6c <HAL_RCC_OscConfig+0x4c>
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	2b0c      	cmp	r3, #12
 8000c60:	f040 808b 	bne.w	8000d7a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	f040 8087 	bne.w	8000d7a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c6c:	4b88      	ldr	r3, [pc, #544]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d005      	beq.n	8000c84 <HAL_RCC_OscConfig+0x64>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e3df      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a1a      	ldr	r2, [r3, #32]
 8000c88:	4b81      	ldr	r3, [pc, #516]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0308 	and.w	r3, r3, #8
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d004      	beq.n	8000c9e <HAL_RCC_OscConfig+0x7e>
 8000c94:	4b7e      	ldr	r3, [pc, #504]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000c9c:	e005      	b.n	8000caa <HAL_RCC_OscConfig+0x8a>
 8000c9e:	4b7c      	ldr	r3, [pc, #496]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ca4:	091b      	lsrs	r3, r3, #4
 8000ca6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d223      	bcs.n	8000cf6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a1b      	ldr	r3, [r3, #32]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fdae 	bl	8001814 <RCC_SetFlashLatencyFromMSIRange>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e3c0      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cc2:	4b73      	ldr	r3, [pc, #460]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a72      	ldr	r2, [pc, #456]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	4b70      	ldr	r3, [pc, #448]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a1b      	ldr	r3, [r3, #32]
 8000cda:	496d      	ldr	r1, [pc, #436]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ce0:	4b6b      	ldr	r3, [pc, #428]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	021b      	lsls	r3, r3, #8
 8000cee:	4968      	ldr	r1, [pc, #416]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	604b      	str	r3, [r1, #4]
 8000cf4:	e025      	b.n	8000d42 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cf6:	4b66      	ldr	r3, [pc, #408]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a65      	ldr	r2, [pc, #404]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	4b63      	ldr	r3, [pc, #396]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a1b      	ldr	r3, [r3, #32]
 8000d0e:	4960      	ldr	r1, [pc, #384]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d10:	4313      	orrs	r3, r2
 8000d12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d14:	4b5e      	ldr	r3, [pc, #376]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	495b      	ldr	r1, [pc, #364]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d24:	4313      	orrs	r3, r2
 8000d26:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d109      	bne.n	8000d42 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a1b      	ldr	r3, [r3, #32]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fd6e 	bl	8001814 <RCC_SetFlashLatencyFromMSIRange>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e380      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d42:	f000 fc87 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 8000d46:	4602      	mov	r2, r0
 8000d48:	4b51      	ldr	r3, [pc, #324]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	091b      	lsrs	r3, r3, #4
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	4950      	ldr	r1, [pc, #320]	@ (8000e94 <HAL_RCC_OscConfig+0x274>)
 8000d54:	5ccb      	ldrb	r3, [r1, r3]
 8000d56:	f003 031f 	and.w	r3, r3, #31
 8000d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5e:	4a4e      	ldr	r2, [pc, #312]	@ (8000e98 <HAL_RCC_OscConfig+0x278>)
 8000d60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d62:	4b4e      	ldr	r3, [pc, #312]	@ (8000e9c <HAL_RCC_OscConfig+0x27c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fb3c 	bl	80003e4 <HAL_InitTick>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d052      	beq.n	8000e1c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	e364      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d032      	beq.n	8000de8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d82:	4b43      	ldr	r3, [pc, #268]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a42      	ldr	r2, [pc, #264]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fc31 	bl	80005f4 <HAL_GetTick>
 8000d92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d94:	e008      	b.n	8000da8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d96:	f7ff fc2d 	bl	80005f4 <HAL_GetTick>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d901      	bls.n	8000da8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e34d      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000da8:	4b39      	ldr	r3, [pc, #228]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f0      	beq.n	8000d96 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000db4:	4b36      	ldr	r3, [pc, #216]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a35      	ldr	r2, [pc, #212]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4b33      	ldr	r3, [pc, #204]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	4930      	ldr	r1, [pc, #192]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	492b      	ldr	r1, [pc, #172]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	604b      	str	r3, [r1, #4]
 8000de6:	e01a      	b.n	8000e1e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000de8:	4b29      	ldr	r3, [pc, #164]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a28      	ldr	r2, [pc, #160]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000dee:	f023 0301 	bic.w	r3, r3, #1
 8000df2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000df4:	f7ff fbfe 	bl	80005f4 <HAL_GetTick>
 8000df8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dfc:	f7ff fbfa 	bl	80005f4 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e31a      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e0e:	4b20      	ldr	r3, [pc, #128]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1f0      	bne.n	8000dfc <HAL_RCC_OscConfig+0x1dc>
 8000e1a:	e000      	b.n	8000e1e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d073      	beq.n	8000f12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d005      	beq.n	8000e3c <HAL_RCC_OscConfig+0x21c>
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	2b0c      	cmp	r3, #12
 8000e34:	d10e      	bne.n	8000e54 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d10b      	bne.n	8000e54 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3c:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d063      	beq.n	8000f10 <HAL_RCC_OscConfig+0x2f0>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d15f      	bne.n	8000f10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e2f7      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e5c:	d106      	bne.n	8000e6c <HAL_RCC_OscConfig+0x24c>
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a0b      	ldr	r2, [pc, #44]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	e025      	b.n	8000eb8 <HAL_RCC_OscConfig+0x298>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e74:	d114      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x280>
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a05      	ldr	r2, [pc, #20]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a02      	ldr	r2, [pc, #8]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e013      	b.n	8000eb8 <HAL_RCC_OscConfig+0x298>
 8000e90:	40021000 	.word	0x40021000
 8000e94:	08004cac 	.word	0x08004cac
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000004 	.word	0x20000004
 8000ea0:	4ba0      	ldr	r3, [pc, #640]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a9f      	ldr	r2, [pc, #636]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4b9d      	ldr	r3, [pc, #628]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a9c      	ldr	r2, [pc, #624]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d013      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fb98 	bl	80005f4 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fb94 	bl	80005f4 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	@ 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e2b4      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eda:	4b92      	ldr	r3, [pc, #584]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f0      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x2a8>
 8000ee6:	e014      	b.n	8000f12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fb84 	bl	80005f4 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef0:	f7ff fb80 	bl	80005f4 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b64      	cmp	r3, #100	@ 0x64
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e2a0      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f02:	4b88      	ldr	r3, [pc, #544]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f0      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x2d0>
 8000f0e:	e000      	b.n	8000f12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d060      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d005      	beq.n	8000f30 <HAL_RCC_OscConfig+0x310>
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	2b0c      	cmp	r3, #12
 8000f28:	d119      	bne.n	8000f5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d116      	bne.n	8000f5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f30:	4b7c      	ldr	r3, [pc, #496]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d005      	beq.n	8000f48 <HAL_RCC_OscConfig+0x328>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e27d      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f48:	4b76      	ldr	r3, [pc, #472]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	061b      	lsls	r3, r3, #24
 8000f56:	4973      	ldr	r1, [pc, #460]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f5c:	e040      	b.n	8000fe0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d023      	beq.n	8000fae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f66:	4b6f      	ldr	r3, [pc, #444]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a6e      	ldr	r2, [pc, #440]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f72:	f7ff fb3f 	bl	80005f4 <HAL_GetTick>
 8000f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f78:	e008      	b.n	8000f8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f7a:	f7ff fb3b 	bl	80005f4 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e25b      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f8c:	4b65      	ldr	r3, [pc, #404]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0f0      	beq.n	8000f7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f98:	4b62      	ldr	r3, [pc, #392]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	061b      	lsls	r3, r3, #24
 8000fa6:	495f      	ldr	r1, [pc, #380]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
 8000fac:	e018      	b.n	8000fe0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fae:	4b5d      	ldr	r3, [pc, #372]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a5c      	ldr	r2, [pc, #368]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fba:	f7ff fb1b 	bl	80005f4 <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc2:	f7ff fb17 	bl	80005f4 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e237      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fd4:	4b53      	ldr	r3, [pc, #332]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f0      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d03c      	beq.n	8001066 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d01c      	beq.n	800102e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ffa:	4a4a      	ldr	r2, [pc, #296]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001004:	f7ff faf6 	bl	80005f4 <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800100c:	f7ff faf2 	bl	80005f4 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e212      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800101e:	4b41      	ldr	r3, [pc, #260]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8001020:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0ef      	beq.n	800100c <HAL_RCC_OscConfig+0x3ec>
 800102c:	e01b      	b.n	8001066 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800102e:	4b3d      	ldr	r3, [pc, #244]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8001030:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001034:	4a3b      	ldr	r2, [pc, #236]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8001036:	f023 0301 	bic.w	r3, r3, #1
 800103a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800103e:	f7ff fad9 	bl	80005f4 <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001046:	f7ff fad5 	bl	80005f4 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e1f5      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001058:	4b32      	ldr	r3, [pc, #200]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 800105a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1ef      	bne.n	8001046 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 80a6 	beq.w	80011c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001078:	4b2a      	ldr	r3, [pc, #168]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10d      	bne.n	80010a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001084:	4b27      	ldr	r3, [pc, #156]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001088:	4a26      	ldr	r2, [pc, #152]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800108e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001090:	4b24      	ldr	r3, [pc, #144]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8001092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800109c:	2301      	movs	r3, #1
 800109e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010a0:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <HAL_RCC_OscConfig+0x508>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d118      	bne.n	80010de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <HAL_RCC_OscConfig+0x508>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001128 <HAL_RCC_OscConfig+0x508>)
 80010b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010b8:	f7ff fa9c 	bl	80005f4 <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c0:	f7ff fa98 	bl	80005f4 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e1b8      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d2:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <HAL_RCC_OscConfig+0x508>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0f0      	beq.n	80010c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d108      	bne.n	80010f8 <HAL_RCC_OscConfig+0x4d8>
 80010e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 80010e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010f6:	e029      	b.n	800114c <HAL_RCC_OscConfig+0x52c>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	d115      	bne.n	800112c <HAL_RCC_OscConfig+0x50c>
 8001100:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8001102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001106:	4a07      	ldr	r2, [pc, #28]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8001112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001116:	4a03      	ldr	r2, [pc, #12]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001120:	e014      	b.n	800114c <HAL_RCC_OscConfig+0x52c>
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000
 8001128:	40007000 	.word	0x40007000
 800112c:	4b9d      	ldr	r3, [pc, #628]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 800112e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001132:	4a9c      	ldr	r2, [pc, #624]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 8001134:	f023 0301 	bic.w	r3, r3, #1
 8001138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800113c:	4b99      	ldr	r3, [pc, #612]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 800113e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001142:	4a98      	ldr	r2, [pc, #608]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 8001144:	f023 0304 	bic.w	r3, r3, #4
 8001148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d016      	beq.n	8001182 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001154:	f7ff fa4e 	bl	80005f4 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800115a:	e00a      	b.n	8001172 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800115c:	f7ff fa4a 	bl	80005f4 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800116a:	4293      	cmp	r3, r2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e168      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001172:	4b8c      	ldr	r3, [pc, #560]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 8001174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0ed      	beq.n	800115c <HAL_RCC_OscConfig+0x53c>
 8001180:	e015      	b.n	80011ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001182:	f7ff fa37 	bl	80005f4 <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001188:	e00a      	b.n	80011a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118a:	f7ff fa33 	bl	80005f4 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001198:	4293      	cmp	r3, r2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e151      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011a0:	4b80      	ldr	r3, [pc, #512]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 80011a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1ed      	bne.n	800118a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d105      	bne.n	80011c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b4:	4b7b      	ldr	r3, [pc, #492]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 80011b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b8:	4a7a      	ldr	r2, [pc, #488]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 80011ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0320 	and.w	r3, r3, #32
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d03c      	beq.n	8001246 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d01c      	beq.n	800120e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011d4:	4b73      	ldr	r3, [pc, #460]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 80011d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011da:	4a72      	ldr	r2, [pc, #456]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e4:	f7ff fa06 	bl	80005f4 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011ec:	f7ff fa02 	bl	80005f4 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e122      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011fe:	4b69      	ldr	r3, [pc, #420]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 8001200:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0ef      	beq.n	80011ec <HAL_RCC_OscConfig+0x5cc>
 800120c:	e01b      	b.n	8001246 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800120e:	4b65      	ldr	r3, [pc, #404]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 8001210:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001214:	4a63      	ldr	r2, [pc, #396]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 8001216:	f023 0301 	bic.w	r3, r3, #1
 800121a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121e:	f7ff f9e9 	bl	80005f4 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001226:	f7ff f9e5 	bl	80005f4 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e105      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001238:	4b5a      	ldr	r3, [pc, #360]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 800123a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1ef      	bne.n	8001226 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 80f9 	beq.w	8001442 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001254:	2b02      	cmp	r3, #2
 8001256:	f040 80cf 	bne.w	80013f8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800125a:	4b52      	ldr	r3, [pc, #328]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f003 0203 	and.w	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800126a:	429a      	cmp	r2, r3
 800126c:	d12c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001278:	3b01      	subs	r3, #1
 800127a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800127c:	429a      	cmp	r2, r3
 800127e:	d123      	bne.n	80012c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800128a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800128c:	429a      	cmp	r2, r3
 800128e:	d11b      	bne.n	80012c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800129a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800129c:	429a      	cmp	r2, r3
 800129e:	d113      	bne.n	80012c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012aa:	085b      	lsrs	r3, r3, #1
 80012ac:	3b01      	subs	r3, #1
 80012ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d109      	bne.n	80012c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	085b      	lsrs	r3, r3, #1
 80012c0:	3b01      	subs	r3, #1
 80012c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d071      	beq.n	80013ac <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	2b0c      	cmp	r3, #12
 80012cc:	d068      	beq.n	80013a0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012ce:	4b35      	ldr	r3, [pc, #212]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d105      	bne.n	80012e6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80012da:	4b32      	ldr	r3, [pc, #200]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e0ac      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012ea:	4b2e      	ldr	r3, [pc, #184]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a2d      	ldr	r2, [pc, #180]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 80012f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012f6:	f7ff f97d 	bl	80005f4 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fe:	f7ff f979 	bl	80005f4 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e099      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001310:	4b24      	ldr	r3, [pc, #144]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f0      	bne.n	80012fe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800131c:	4b21      	ldr	r3, [pc, #132]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <HAL_RCC_OscConfig+0x788>)
 8001322:	4013      	ands	r3, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800132c:	3a01      	subs	r2, #1
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	4311      	orrs	r1, r2
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001336:	0212      	lsls	r2, r2, #8
 8001338:	4311      	orrs	r1, r2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800133e:	0852      	lsrs	r2, r2, #1
 8001340:	3a01      	subs	r2, #1
 8001342:	0552      	lsls	r2, r2, #21
 8001344:	4311      	orrs	r1, r2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800134a:	0852      	lsrs	r2, r2, #1
 800134c:	3a01      	subs	r2, #1
 800134e:	0652      	lsls	r2, r2, #25
 8001350:	4311      	orrs	r1, r2
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001356:	06d2      	lsls	r2, r2, #27
 8001358:	430a      	orrs	r2, r1
 800135a:	4912      	ldr	r1, [pc, #72]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 800135c:	4313      	orrs	r3, r2
 800135e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001360:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0f      	ldr	r2, [pc, #60]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 8001366:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800136a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800136c:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	4a0c      	ldr	r2, [pc, #48]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 8001372:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001376:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001378:	f7ff f93c 	bl	80005f4 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001380:	f7ff f938 	bl	80005f4 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e058      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001392:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800139e:	e050      	b.n	8001442 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e04f      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
 80013a4:	40021000 	.word	0x40021000
 80013a8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ac:	4b27      	ldr	r3, [pc, #156]	@ (800144c <HAL_RCC_OscConfig+0x82c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d144      	bne.n	8001442 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013b8:	4b24      	ldr	r3, [pc, #144]	@ (800144c <HAL_RCC_OscConfig+0x82c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a23      	ldr	r2, [pc, #140]	@ (800144c <HAL_RCC_OscConfig+0x82c>)
 80013be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013c4:	4b21      	ldr	r3, [pc, #132]	@ (800144c <HAL_RCC_OscConfig+0x82c>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	4a20      	ldr	r2, [pc, #128]	@ (800144c <HAL_RCC_OscConfig+0x82c>)
 80013ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013d0:	f7ff f910 	bl	80005f4 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d8:	f7ff f90c 	bl	80005f4 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e02c      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ea:	4b18      	ldr	r3, [pc, #96]	@ (800144c <HAL_RCC_OscConfig+0x82c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x7b8>
 80013f6:	e024      	b.n	8001442 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2b0c      	cmp	r3, #12
 80013fc:	d01f      	beq.n	800143e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fe:	4b13      	ldr	r3, [pc, #76]	@ (800144c <HAL_RCC_OscConfig+0x82c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a12      	ldr	r2, [pc, #72]	@ (800144c <HAL_RCC_OscConfig+0x82c>)
 8001404:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140a:	f7ff f8f3 	bl	80005f4 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001412:	f7ff f8ef 	bl	80005f4 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e00f      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001424:	4b09      	ldr	r3, [pc, #36]	@ (800144c <HAL_RCC_OscConfig+0x82c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_RCC_OscConfig+0x82c>)
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	4905      	ldr	r1, [pc, #20]	@ (800144c <HAL_RCC_OscConfig+0x82c>)
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <HAL_RCC_OscConfig+0x830>)
 8001438:	4013      	ands	r3, r2
 800143a:	60cb      	str	r3, [r1, #12]
 800143c:	e001      	b.n	8001442 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	feeefffc 	.word	0xfeeefffc

08001454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0e7      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001468:	4b75      	ldr	r3, [pc, #468]	@ (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d910      	bls.n	8001498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001476:	4b72      	ldr	r3, [pc, #456]	@ (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 0207 	bic.w	r2, r3, #7
 800147e:	4970      	ldr	r1, [pc, #448]	@ (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001486:	4b6e      	ldr	r3, [pc, #440]	@ (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	429a      	cmp	r2, r3
 8001492:	d001      	beq.n	8001498 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0cf      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d010      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	4b66      	ldr	r3, [pc, #408]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d908      	bls.n	80014c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b4:	4b63      	ldr	r3, [pc, #396]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4960      	ldr	r1, [pc, #384]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d04c      	beq.n	800156c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014da:	4b5a      	ldr	r3, [pc, #360]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d121      	bne.n	800152a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0a6      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f2:	4b54      	ldr	r3, [pc, #336]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d115      	bne.n	800152a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e09a      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d107      	bne.n	800151a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800150a:	4b4e      	ldr	r3, [pc, #312]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d109      	bne.n	800152a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e08e      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800151a:	4b4a      	ldr	r3, [pc, #296]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e086      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800152a:	4b46      	ldr	r3, [pc, #280]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f023 0203 	bic.w	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4943      	ldr	r1, [pc, #268]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 8001538:	4313      	orrs	r3, r2
 800153a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800153c:	f7ff f85a 	bl	80005f4 <HAL_GetTick>
 8001540:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	e00a      	b.n	800155a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001544:	f7ff f856 	bl	80005f4 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001552:	4293      	cmp	r3, r2
 8001554:	d901      	bls.n	800155a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e06e      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155a:	4b3a      	ldr	r3, [pc, #232]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 020c 	and.w	r2, r3, #12
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	429a      	cmp	r2, r3
 800156a:	d1eb      	bne.n	8001544 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d010      	beq.n	800159a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	4b31      	ldr	r3, [pc, #196]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001584:	429a      	cmp	r2, r3
 8001586:	d208      	bcs.n	800159a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001588:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	492b      	ldr	r1, [pc, #172]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 8001596:	4313      	orrs	r3, r2
 8001598:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800159a:	4b29      	ldr	r3, [pc, #164]	@ (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d210      	bcs.n	80015ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a8:	4b25      	ldr	r3, [pc, #148]	@ (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f023 0207 	bic.w	r2, r3, #7
 80015b0:	4923      	ldr	r1, [pc, #140]	@ (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b8:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <HAL_RCC_ClockConfig+0x1ec>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d001      	beq.n	80015ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e036      	b.n	8001638 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d008      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	4918      	ldr	r1, [pc, #96]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d009      	beq.n	8001608 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015f4:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4910      	ldr	r1, [pc, #64]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 8001604:	4313      	orrs	r3, r2
 8001606:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001608:	f000 f824 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 800160c:	4602      	mov	r2, r0
 800160e:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	490b      	ldr	r1, [pc, #44]	@ (8001648 <HAL_RCC_ClockConfig+0x1f4>)
 800161a:	5ccb      	ldrb	r3, [r1, r3]
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
 8001624:	4a09      	ldr	r2, [pc, #36]	@ (800164c <HAL_RCC_ClockConfig+0x1f8>)
 8001626:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001628:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <HAL_RCC_ClockConfig+0x1fc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe fed9 	bl	80003e4 <HAL_InitTick>
 8001632:	4603      	mov	r3, r0
 8001634:	72fb      	strb	r3, [r7, #11]

  return status;
 8001636:	7afb      	ldrb	r3, [r7, #11]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40022000 	.word	0x40022000
 8001644:	40021000 	.word	0x40021000
 8001648:	08004cac 	.word	0x08004cac
 800164c:	20000000 	.word	0x20000000
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	@ 0x24
 8001658:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001662:	4b3e      	ldr	r3, [pc, #248]	@ (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800166c:	4b3b      	ldr	r3, [pc, #236]	@ (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0x34>
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b0c      	cmp	r3, #12
 8001680:	d121      	bne.n	80016c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d11e      	bne.n	80016c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001688:	4b34      	ldr	r3, [pc, #208]	@ (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d107      	bne.n	80016a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001694:	4b31      	ldr	r3, [pc, #196]	@ (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 8001696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800169a:	0a1b      	lsrs	r3, r3, #8
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	61fb      	str	r3, [r7, #28]
 80016a2:	e005      	b.n	80016b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016a4:	4b2d      	ldr	r3, [pc, #180]	@ (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	091b      	lsrs	r3, r3, #4
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10d      	bne.n	80016dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c4:	e00a      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d102      	bne.n	80016d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016cc:	4b25      	ldr	r3, [pc, #148]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x110>)
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	e004      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016d8:	4b23      	ldr	r3, [pc, #140]	@ (8001768 <HAL_RCC_GetSysClockFreq+0x114>)
 80016da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	d134      	bne.n	800174c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016e2:	4b1e      	ldr	r3, [pc, #120]	@ (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d003      	beq.n	80016fa <HAL_RCC_GetSysClockFreq+0xa6>
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d003      	beq.n	8001700 <HAL_RCC_GetSysClockFreq+0xac>
 80016f8:	e005      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x110>)
 80016fc:	617b      	str	r3, [r7, #20]
      break;
 80016fe:	e005      	b.n	800170c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001700:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <HAL_RCC_GetSysClockFreq+0x114>)
 8001702:	617b      	str	r3, [r7, #20]
      break;
 8001704:	e002      	b.n	800170c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	617b      	str	r3, [r7, #20]
      break;
 800170a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800170c:	4b13      	ldr	r3, [pc, #76]	@ (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	3301      	adds	r3, #1
 8001718:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	fb03 f202 	mul.w	r2, r3, r2
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001730:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_RCC_GetSysClockFreq+0x108>)
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	0e5b      	lsrs	r3, r3, #25
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	3301      	adds	r3, #1
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800174c:	69bb      	ldr	r3, [r7, #24]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	@ 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000
 8001760:	08004cc4 	.word	0x08004cc4
 8001764:	00f42400 	.word	0x00f42400
 8001768:	007a1200 	.word	0x007a1200

0800176c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001770:	4b03      	ldr	r3, [pc, #12]	@ (8001780 <HAL_RCC_GetHCLKFreq+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000000 	.word	0x20000000

08001784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001788:	f7ff fff0 	bl	800176c <HAL_RCC_GetHCLKFreq>
 800178c:	4602      	mov	r2, r0
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	4904      	ldr	r1, [pc, #16]	@ (80017ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800179a:	5ccb      	ldrb	r3, [r1, r3]
 800179c:	f003 031f 	and.w	r3, r3, #31
 80017a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000
 80017ac:	08004cbc 	.word	0x08004cbc

080017b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	220f      	movs	r2, #15
 80017be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80017c0:	4b12      	ldr	r3, [pc, #72]	@ (800180c <HAL_RCC_GetClockConfig+0x5c>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 0203 	and.w	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80017cc:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <HAL_RCC_GetClockConfig+0x5c>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <HAL_RCC_GetClockConfig+0x5c>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80017e4:	4b09      	ldr	r3, [pc, #36]	@ (800180c <HAL_RCC_GetClockConfig+0x5c>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	08db      	lsrs	r3, r3, #3
 80017ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80017f2:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <HAL_RCC_GetClockConfig+0x60>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0207 	and.w	r2, r3, #7
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	601a      	str	r2, [r3, #0]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000
 8001810:	40022000 	.word	0x40022000

08001814 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800181c:	2300      	movs	r3, #0
 800181e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001820:	4b2a      	ldr	r3, [pc, #168]	@ (80018cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800182c:	f7ff f994 	bl	8000b58 <HAL_PWREx_GetVoltageRange>
 8001830:	6178      	str	r0, [r7, #20]
 8001832:	e014      	b.n	800185e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001834:	4b25      	ldr	r3, [pc, #148]	@ (80018cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001838:	4a24      	ldr	r2, [pc, #144]	@ (80018cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800183a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800183e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001840:	4b22      	ldr	r3, [pc, #136]	@ (80018cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800184c:	f7ff f984 	bl	8000b58 <HAL_PWREx_GetVoltageRange>
 8001850:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001852:	4b1e      	ldr	r3, [pc, #120]	@ (80018cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001856:	4a1d      	ldr	r2, [pc, #116]	@ (80018cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001858:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800185c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001864:	d10b      	bne.n	800187e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b80      	cmp	r3, #128	@ 0x80
 800186a:	d919      	bls.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001870:	d902      	bls.n	8001878 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001872:	2302      	movs	r3, #2
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	e013      	b.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001878:	2301      	movs	r3, #1
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	e010      	b.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b80      	cmp	r3, #128	@ 0x80
 8001882:	d902      	bls.n	800188a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001884:	2303      	movs	r3, #3
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	e00a      	b.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b80      	cmp	r3, #128	@ 0x80
 800188e:	d102      	bne.n	8001896 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001890:	2302      	movs	r3, #2
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	e004      	b.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b70      	cmp	r3, #112	@ 0x70
 800189a:	d101      	bne.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800189c:	2301      	movs	r3, #1
 800189e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018a0:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 0207 	bic.w	r2, r3, #7
 80018a8:	4909      	ldr	r1, [pc, #36]	@ (80018d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018b0:	4b07      	ldr	r3, [pc, #28]	@ (80018d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d001      	beq.n	80018c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40022000 	.word	0x40022000

080018d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e049      	b.n	800197a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d106      	bne.n	8001900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f841 	bl	8001982 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3304      	adds	r3, #4
 8001910:	4619      	mov	r1, r3
 8001912:	4610      	mov	r0, r2
 8001914:	f000 f9e0 	bl	8001cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d001      	beq.n	80019b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e04f      	b.n	8001a50 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2202      	movs	r2, #2
 80019b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0201 	orr.w	r2, r2, #1
 80019c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a23      	ldr	r2, [pc, #140]	@ (8001a5c <HAL_TIM_Base_Start_IT+0xc4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d01d      	beq.n	8001a0e <HAL_TIM_Base_Start_IT+0x76>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019da:	d018      	beq.n	8001a0e <HAL_TIM_Base_Start_IT+0x76>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001a60 <HAL_TIM_Base_Start_IT+0xc8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d013      	beq.n	8001a0e <HAL_TIM_Base_Start_IT+0x76>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001a64 <HAL_TIM_Base_Start_IT+0xcc>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d00e      	beq.n	8001a0e <HAL_TIM_Base_Start_IT+0x76>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a68 <HAL_TIM_Base_Start_IT+0xd0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d009      	beq.n	8001a0e <HAL_TIM_Base_Start_IT+0x76>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a1b      	ldr	r2, [pc, #108]	@ (8001a6c <HAL_TIM_Base_Start_IT+0xd4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d004      	beq.n	8001a0e <HAL_TIM_Base_Start_IT+0x76>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a19      	ldr	r2, [pc, #100]	@ (8001a70 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d115      	bne.n	8001a3a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	4b17      	ldr	r3, [pc, #92]	@ (8001a74 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2b06      	cmp	r3, #6
 8001a1e:	d015      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0xb4>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a26:	d011      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a38:	e008      	b.n	8001a4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 0201 	orr.w	r2, r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e000      	b.n	8001a4e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	40012c00 	.word	0x40012c00
 8001a60:	40000400 	.word	0x40000400
 8001a64:	40000800 	.word	0x40000800
 8001a68:	40000c00 	.word	0x40000c00
 8001a6c:	40013400 	.word	0x40013400
 8001a70:	40014000 	.word	0x40014000
 8001a74:	00010007 	.word	0x00010007

08001a78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d020      	beq.n	8001adc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d01b      	beq.n	8001adc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f06f 0202 	mvn.w	r2, #2
 8001aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f8e9 	bl	8001c9a <HAL_TIM_IC_CaptureCallback>
 8001ac8:	e005      	b.n	8001ad6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f8db 	bl	8001c86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f8ec 	bl	8001cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d020      	beq.n	8001b28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d01b      	beq.n	8001b28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f06f 0204 	mvn.w	r2, #4
 8001af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2202      	movs	r2, #2
 8001afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f8c3 	bl	8001c9a <HAL_TIM_IC_CaptureCallback>
 8001b14:	e005      	b.n	8001b22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f8b5 	bl	8001c86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f8c6 	bl	8001cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d020      	beq.n	8001b74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01b      	beq.n	8001b74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0208 	mvn.w	r2, #8
 8001b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2204      	movs	r2, #4
 8001b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f89d 	bl	8001c9a <HAL_TIM_IC_CaptureCallback>
 8001b60:	e005      	b.n	8001b6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f88f 	bl	8001c86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f8a0 	bl	8001cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d020      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01b      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0210 	mvn.w	r2, #16
 8001b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2208      	movs	r2, #8
 8001b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f877 	bl	8001c9a <HAL_TIM_IC_CaptureCallback>
 8001bac:	e005      	b.n	8001bba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f869 	bl	8001c86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f87a 	bl	8001cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00c      	beq.n	8001be4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0201 	mvn.w	r2, #1
 8001bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe fbc0 	bl	8000364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d104      	bne.n	8001bf8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00c      	beq.n	8001c12 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f913 	bl	8001e38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00c      	beq.n	8001c36 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f90b 	bl	8001e4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00c      	beq.n	8001c5a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f834 	bl	8001cc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f003 0320 	and.w	r3, r3, #32
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00c      	beq.n	8001c7e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0320 	and.w	r3, r3, #32
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f06f 0220 	mvn.w	r2, #32
 8001c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f8d3 	bl	8001e24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a46      	ldr	r2, [pc, #280]	@ (8001e04 <TIM_Base_SetConfig+0x12c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d013      	beq.n	8001d18 <TIM_Base_SetConfig+0x40>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cf6:	d00f      	beq.n	8001d18 <TIM_Base_SetConfig+0x40>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a43      	ldr	r2, [pc, #268]	@ (8001e08 <TIM_Base_SetConfig+0x130>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d00b      	beq.n	8001d18 <TIM_Base_SetConfig+0x40>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a42      	ldr	r2, [pc, #264]	@ (8001e0c <TIM_Base_SetConfig+0x134>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d007      	beq.n	8001d18 <TIM_Base_SetConfig+0x40>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a41      	ldr	r2, [pc, #260]	@ (8001e10 <TIM_Base_SetConfig+0x138>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d003      	beq.n	8001d18 <TIM_Base_SetConfig+0x40>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a40      	ldr	r2, [pc, #256]	@ (8001e14 <TIM_Base_SetConfig+0x13c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d108      	bne.n	8001d2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a35      	ldr	r2, [pc, #212]	@ (8001e04 <TIM_Base_SetConfig+0x12c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d01f      	beq.n	8001d72 <TIM_Base_SetConfig+0x9a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d38:	d01b      	beq.n	8001d72 <TIM_Base_SetConfig+0x9a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a32      	ldr	r2, [pc, #200]	@ (8001e08 <TIM_Base_SetConfig+0x130>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d017      	beq.n	8001d72 <TIM_Base_SetConfig+0x9a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a31      	ldr	r2, [pc, #196]	@ (8001e0c <TIM_Base_SetConfig+0x134>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <TIM_Base_SetConfig+0x9a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a30      	ldr	r2, [pc, #192]	@ (8001e10 <TIM_Base_SetConfig+0x138>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00f      	beq.n	8001d72 <TIM_Base_SetConfig+0x9a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a2f      	ldr	r2, [pc, #188]	@ (8001e14 <TIM_Base_SetConfig+0x13c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00b      	beq.n	8001d72 <TIM_Base_SetConfig+0x9a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8001e18 <TIM_Base_SetConfig+0x140>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <TIM_Base_SetConfig+0x9a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a2d      	ldr	r2, [pc, #180]	@ (8001e1c <TIM_Base_SetConfig+0x144>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d003      	beq.n	8001d72 <TIM_Base_SetConfig+0x9a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e20 <TIM_Base_SetConfig+0x148>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d108      	bne.n	8001d84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a16      	ldr	r2, [pc, #88]	@ (8001e04 <TIM_Base_SetConfig+0x12c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d00f      	beq.n	8001dd0 <TIM_Base_SetConfig+0xf8>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a18      	ldr	r2, [pc, #96]	@ (8001e14 <TIM_Base_SetConfig+0x13c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d00b      	beq.n	8001dd0 <TIM_Base_SetConfig+0xf8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a17      	ldr	r2, [pc, #92]	@ (8001e18 <TIM_Base_SetConfig+0x140>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d007      	beq.n	8001dd0 <TIM_Base_SetConfig+0xf8>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a16      	ldr	r2, [pc, #88]	@ (8001e1c <TIM_Base_SetConfig+0x144>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d003      	beq.n	8001dd0 <TIM_Base_SetConfig+0xf8>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a15      	ldr	r2, [pc, #84]	@ (8001e20 <TIM_Base_SetConfig+0x148>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d103      	bne.n	8001dd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d105      	bne.n	8001df6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f023 0201 	bic.w	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	611a      	str	r2, [r3, #16]
  }
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40012c00 	.word	0x40012c00
 8001e08:	40000400 	.word	0x40000400
 8001e0c:	40000800 	.word	0x40000800
 8001e10:	40000c00 	.word	0x40000c00
 8001e14:	40013400 	.word	0x40013400
 8001e18:	40014000 	.word	0x40014000
 8001e1c:	40014400 	.word	0x40014400
 8001e20:	40014800 	.word	0x40014800

08001e24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <__NVIC_SetPriority>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	db0a      	blt.n	8001e8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	490c      	ldr	r1, [pc, #48]	@ (8001eac <__NVIC_SetPriority+0x4c>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	0112      	lsls	r2, r2, #4
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	440b      	add	r3, r1
 8001e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e88:	e00a      	b.n	8001ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	4908      	ldr	r1, [pc, #32]	@ (8001eb0 <__NVIC_SetPriority+0x50>)
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	3b04      	subs	r3, #4
 8001e98:	0112      	lsls	r2, r2, #4
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	761a      	strb	r2, [r3, #24]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000e100 	.word	0xe000e100
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001eb8:	4b05      	ldr	r3, [pc, #20]	@ (8001ed0 <SysTick_Handler+0x1c>)
 8001eba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001ebc:	f001 fd46 	bl	800394c <xTaskGetSchedulerState>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d001      	beq.n	8001eca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001ec6:	f002 fb3f 	bl	8004548 <xPortSysTickHandler>
  }
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	e000e010 	.word	0xe000e010

08001ed4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001ed8:	2100      	movs	r1, #0
 8001eda:	f06f 0004 	mvn.w	r0, #4
 8001ede:	f7ff ffbf 	bl	8001e60 <__NVIC_SetPriority>
#endif
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001eee:	f3ef 8305 	mrs	r3, IPSR
 8001ef2:	603b      	str	r3, [r7, #0]
  return(result);
 8001ef4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001efa:	f06f 0305 	mvn.w	r3, #5
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	e00c      	b.n	8001f1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001f02:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <osKernelInitialize+0x44>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d105      	bne.n	8001f16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001f0a:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <osKernelInitialize+0x44>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	e002      	b.n	8001f1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f1c:	687b      	ldr	r3, [r7, #4]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	200000d4 	.word	0x200000d4

08001f30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f36:	f3ef 8305 	mrs	r3, IPSR
 8001f3a:	603b      	str	r3, [r7, #0]
  return(result);
 8001f3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <osKernelStart+0x1a>
    stat = osErrorISR;
 8001f42:	f06f 0305 	mvn.w	r3, #5
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	e010      	b.n	8001f6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <osKernelStart+0x48>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d109      	bne.n	8001f66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001f52:	f7ff ffbf 	bl	8001ed4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001f56:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <osKernelStart+0x48>)
 8001f58:	2202      	movs	r2, #2
 8001f5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001f5c:	f001 f892 	bl	8003084 <vTaskStartScheduler>
      stat = osOK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	e002      	b.n	8001f6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f6c:	687b      	ldr	r3, [r7, #4]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200000d4 	.word	0x200000d4

08001f7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08e      	sub	sp, #56	@ 0x38
 8001f80:	af04      	add	r7, sp, #16
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f8c:	f3ef 8305 	mrs	r3, IPSR
 8001f90:	617b      	str	r3, [r7, #20]
  return(result);
 8001f92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d17e      	bne.n	8002096 <osThreadNew+0x11a>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d07b      	beq.n	8002096 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001f9e:	2380      	movs	r3, #128	@ 0x80
 8001fa0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001fa2:	2318      	movs	r3, #24
 8001fa4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d045      	beq.n	8002042 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <osThreadNew+0x48>
        name = attr->name;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <osThreadNew+0x6e>
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	2b38      	cmp	r3, #56	@ 0x38
 8001fdc:	d805      	bhi.n	8001fea <osThreadNew+0x6e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <osThreadNew+0x72>
        return (NULL);
 8001fea:	2300      	movs	r3, #0
 8001fec:	e054      	b.n	8002098 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00e      	beq.n	8002024 <osThreadNew+0xa8>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2ba7      	cmp	r3, #167	@ 0xa7
 800200c:	d90a      	bls.n	8002024 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d006      	beq.n	8002024 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <osThreadNew+0xa8>
        mem = 1;
 800201e:	2301      	movs	r3, #1
 8002020:	61bb      	str	r3, [r7, #24]
 8002022:	e010      	b.n	8002046 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10c      	bne.n	8002046 <osThreadNew+0xca>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d108      	bne.n	8002046 <osThreadNew+0xca>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d104      	bne.n	8002046 <osThreadNew+0xca>
          mem = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	e001      	b.n	8002046 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d110      	bne.n	800206e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002054:	9202      	str	r2, [sp, #8]
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	6a3a      	ldr	r2, [r7, #32]
 8002060:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fe1a 	bl	8002c9c <xTaskCreateStatic>
 8002068:	4603      	mov	r3, r0
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	e013      	b.n	8002096 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d110      	bne.n	8002096 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002074:	6a3b      	ldr	r3, [r7, #32]
 8002076:	b29a      	uxth	r2, r3
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 fe68 	bl	8002d5c <xTaskCreate>
 800208c:	4603      	mov	r3, r0
 800208e:	2b01      	cmp	r3, #1
 8002090:	d001      	beq.n	8002096 <osThreadNew+0x11a>
            hTask = NULL;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002096:	693b      	ldr	r3, [r7, #16]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3728      	adds	r7, #40	@ 0x28
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020a8:	f3ef 8305 	mrs	r3, IPSR
 80020ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80020ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <osDelay+0x1c>
    stat = osErrorISR;
 80020b4:	f06f 0305 	mvn.w	r3, #5
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	e007      	b.n	80020cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 ffa6 	bl	8003018 <vTaskDelay>
    }
  }

  return (stat);
 80020cc:	68fb      	ldr	r3, [r7, #12]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4a07      	ldr	r2, [pc, #28]	@ (8002104 <vApplicationGetIdleTaskMemory+0x2c>)
 80020e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	4a06      	ldr	r2, [pc, #24]	@ (8002108 <vApplicationGetIdleTaskMemory+0x30>)
 80020ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2280      	movs	r2, #128	@ 0x80
 80020f4:	601a      	str	r2, [r3, #0]
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	200000d8 	.word	0x200000d8
 8002108:	20000180 	.word	0x20000180

0800210c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4a07      	ldr	r2, [pc, #28]	@ (8002138 <vApplicationGetTimerTaskMemory+0x2c>)
 800211c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	4a06      	ldr	r2, [pc, #24]	@ (800213c <vApplicationGetTimerTaskMemory+0x30>)
 8002122:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800212a:	601a      	str	r2, [r3, #0]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	20000380 	.word	0x20000380
 800213c:	20000428 	.word	0x20000428

08002140 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f103 0208 	add.w	r2, r3, #8
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f04f 32ff 	mov.w	r2, #4294967295
 8002158:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f103 0208 	add.w	r2, r3, #8
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f103 0208 	add.w	r2, r3, #8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800219a:	b480      	push	{r7}
 800219c:	b085      	sub	sp, #20
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	601a      	str	r2, [r3, #0]
}
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021e2:	b480      	push	{r7}
 80021e4:	b085      	sub	sp, #20
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f8:	d103      	bne.n	8002202 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	e00c      	b.n	800221c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3308      	adds	r3, #8
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	e002      	b.n	8002210 <vListInsert+0x2e>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	429a      	cmp	r2, r3
 800221a:	d2f6      	bcs.n	800220a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	601a      	str	r2, [r3, #0]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6892      	ldr	r2, [r2, #8]
 800226a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6852      	ldr	r2, [r2, #4]
 8002274:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d103      	bne.n	8002288 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	1e5a      	subs	r2, r3, #1
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10b      	bne.n	80022d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022c0:	f383 8811 	msr	BASEPRI, r3
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	f3bf 8f4f 	dsb	sy
 80022cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022ce:	bf00      	nop
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80022d4:	f002 f8a8 	bl	8004428 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e0:	68f9      	ldr	r1, [r7, #12]
 80022e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	441a      	add	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002304:	3b01      	subs	r3, #1
 8002306:	68f9      	ldr	r1, [r7, #12]
 8002308:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	441a      	add	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	22ff      	movs	r2, #255	@ 0xff
 8002318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	22ff      	movs	r2, #255	@ 0xff
 8002320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d114      	bne.n	8002354 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01a      	beq.n	8002368 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	3310      	adds	r3, #16
 8002336:	4618      	mov	r0, r3
 8002338:	f001 f942 	bl	80035c0 <xTaskRemoveFromEventList>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d012      	beq.n	8002368 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002342:	4b0d      	ldr	r3, [pc, #52]	@ (8002378 <xQueueGenericReset+0xd0>)
 8002344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	f3bf 8f4f 	dsb	sy
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	e009      	b.n	8002368 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3310      	adds	r3, #16
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fef1 	bl	8002140 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	3324      	adds	r3, #36	@ 0x24
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff feec 	bl	8002140 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002368:	f002 f890 	bl	800448c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800236c:	2301      	movs	r3, #1
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	e000ed04 	.word	0xe000ed04

0800237c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08e      	sub	sp, #56	@ 0x38
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10b      	bne.n	80023a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002394:	f383 8811 	msr	BASEPRI, r3
 8002398:	f3bf 8f6f 	isb	sy
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80023a2:	bf00      	nop
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10b      	bne.n	80023c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80023ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023b2:	f383 8811 	msr	BASEPRI, r3
 80023b6:	f3bf 8f6f 	isb	sy
 80023ba:	f3bf 8f4f 	dsb	sy
 80023be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	e7fd      	b.n	80023c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <xQueueGenericCreateStatic+0x56>
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <xQueueGenericCreateStatic+0x5a>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <xQueueGenericCreateStatic+0x5c>
 80023d6:	2300      	movs	r3, #0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10b      	bne.n	80023f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80023dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023e0:	f383 8811 	msr	BASEPRI, r3
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	623b      	str	r3, [r7, #32]
}
 80023ee:	bf00      	nop
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <xQueueGenericCreateStatic+0x84>
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <xQueueGenericCreateStatic+0x88>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <xQueueGenericCreateStatic+0x8a>
 8002404:	2300      	movs	r3, #0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10b      	bne.n	8002422 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800240a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800240e:	f383 8811 	msr	BASEPRI, r3
 8002412:	f3bf 8f6f 	isb	sy
 8002416:	f3bf 8f4f 	dsb	sy
 800241a:	61fb      	str	r3, [r7, #28]
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	e7fd      	b.n	800241e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002422:	2350      	movs	r3, #80	@ 0x50
 8002424:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b50      	cmp	r3, #80	@ 0x50
 800242a:	d00b      	beq.n	8002444 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800242c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	61bb      	str	r3, [r7, #24]
}
 800243e:	bf00      	nop
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002444:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800244a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00d      	beq.n	800246c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002458:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800245c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	4613      	mov	r3, r2
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f805 	bl	8002476 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800246c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800246e:	4618      	mov	r0, r3
 8002470:	3730      	adds	r7, #48	@ 0x30
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d103      	bne.n	8002492 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	e002      	b.n	8002498 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024a4:	2101      	movs	r1, #1
 80024a6:	69b8      	ldr	r0, [r7, #24]
 80024a8:	f7ff fefe 	bl	80022a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	78fa      	ldrb	r2, [r7, #3]
 80024b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08e      	sub	sp, #56	@ 0x38
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024ca:	2300      	movs	r3, #0
 80024cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80024d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10b      	bne.n	80024f0 <xQueueGenericSend+0x34>
	__asm volatile
 80024d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80024ea:	bf00      	nop
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d103      	bne.n	80024fe <xQueueGenericSend+0x42>
 80024f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <xQueueGenericSend+0x46>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <xQueueGenericSend+0x48>
 8002502:	2300      	movs	r3, #0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10b      	bne.n	8002520 <xQueueGenericSend+0x64>
	__asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800251a:	bf00      	nop
 800251c:	bf00      	nop
 800251e:	e7fd      	b.n	800251c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d103      	bne.n	800252e <xQueueGenericSend+0x72>
 8002526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <xQueueGenericSend+0x76>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <xQueueGenericSend+0x78>
 8002532:	2300      	movs	r3, #0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10b      	bne.n	8002550 <xQueueGenericSend+0x94>
	__asm volatile
 8002538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	623b      	str	r3, [r7, #32]
}
 800254a:	bf00      	nop
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002550:	f001 f9fc 	bl	800394c <xTaskGetSchedulerState>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d102      	bne.n	8002560 <xQueueGenericSend+0xa4>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <xQueueGenericSend+0xa8>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <xQueueGenericSend+0xaa>
 8002564:	2300      	movs	r3, #0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10b      	bne.n	8002582 <xQueueGenericSend+0xc6>
	__asm volatile
 800256a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800256e:	f383 8811 	msr	BASEPRI, r3
 8002572:	f3bf 8f6f 	isb	sy
 8002576:	f3bf 8f4f 	dsb	sy
 800257a:	61fb      	str	r3, [r7, #28]
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	e7fd      	b.n	800257e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002582:	f001 ff51 	bl	8004428 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002588:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800258a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800258e:	429a      	cmp	r2, r3
 8002590:	d302      	bcc.n	8002598 <xQueueGenericSend+0xdc>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d129      	bne.n	80025ec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800259e:	f000 fa0f 	bl	80029c0 <prvCopyDataToQueue>
 80025a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d010      	beq.n	80025ce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ae:	3324      	adds	r3, #36	@ 0x24
 80025b0:	4618      	mov	r0, r3
 80025b2:	f001 f805 	bl	80035c0 <xTaskRemoveFromEventList>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80025bc:	4b3f      	ldr	r3, [pc, #252]	@ (80026bc <xQueueGenericSend+0x200>)
 80025be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	f3bf 8f4f 	dsb	sy
 80025c8:	f3bf 8f6f 	isb	sy
 80025cc:	e00a      	b.n	80025e4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80025ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80025d4:	4b39      	ldr	r3, [pc, #228]	@ (80026bc <xQueueGenericSend+0x200>)
 80025d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025e4:	f001 ff52 	bl	800448c <vPortExitCritical>
				return pdPASS;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e063      	b.n	80026b4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d103      	bne.n	80025fa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025f2:	f001 ff4b 	bl	800448c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e05c      	b.n	80026b4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d106      	bne.n	800260e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	4618      	mov	r0, r3
 8002606:	f001 f83f 	bl	8003688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800260a:	2301      	movs	r3, #1
 800260c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800260e:	f001 ff3d 	bl	800448c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002612:	f000 fda7 	bl	8003164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002616:	f001 ff07 	bl	8004428 <vPortEnterCritical>
 800261a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002620:	b25b      	sxtb	r3, r3
 8002622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002626:	d103      	bne.n	8002630 <xQueueGenericSend+0x174>
 8002628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002632:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002636:	b25b      	sxtb	r3, r3
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d103      	bne.n	8002646 <xQueueGenericSend+0x18a>
 800263e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002646:	f001 ff21 	bl	800448c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800264a:	1d3a      	adds	r2, r7, #4
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	4611      	mov	r1, r2
 8002652:	4618      	mov	r0, r3
 8002654:	f001 f82e 	bl	80036b4 <xTaskCheckForTimeOut>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d124      	bne.n	80026a8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800265e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002660:	f000 faa6 	bl	8002bb0 <prvIsQueueFull>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d018      	beq.n	800269c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800266a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266c:	3310      	adds	r3, #16
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f000 ff52 	bl	800351c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002678:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800267a:	f000 fa31 	bl	8002ae0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800267e:	f000 fd7f 	bl	8003180 <xTaskResumeAll>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	f47f af7c 	bne.w	8002582 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800268a:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <xQueueGenericSend+0x200>)
 800268c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	f3bf 8f6f 	isb	sy
 800269a:	e772      	b.n	8002582 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800269c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800269e:	f000 fa1f 	bl	8002ae0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026a2:	f000 fd6d 	bl	8003180 <xTaskResumeAll>
 80026a6:	e76c      	b.n	8002582 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026aa:	f000 fa19 	bl	8002ae0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026ae:	f000 fd67 	bl	8003180 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3738      	adds	r7, #56	@ 0x38
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	e000ed04 	.word	0xe000ed04

080026c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b090      	sub	sp, #64	@ 0x40
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80026d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10b      	bne.n	80026f0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80026d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026dc:	f383 8811 	msr	BASEPRI, r3
 80026e0:	f3bf 8f6f 	isb	sy
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80026ea:	bf00      	nop
 80026ec:	bf00      	nop
 80026ee:	e7fd      	b.n	80026ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <xQueueGenericSendFromISR+0x3e>
 80026f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <xQueueGenericSendFromISR+0x42>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <xQueueGenericSendFromISR+0x44>
 8002702:	2300      	movs	r3, #0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10b      	bne.n	8002720 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800270c:	f383 8811 	msr	BASEPRI, r3
 8002710:	f3bf 8f6f 	isb	sy
 8002714:	f3bf 8f4f 	dsb	sy
 8002718:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800271a:	bf00      	nop
 800271c:	bf00      	nop
 800271e:	e7fd      	b.n	800271c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d103      	bne.n	800272e <xQueueGenericSendFromISR+0x6e>
 8002726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <xQueueGenericSendFromISR+0x72>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <xQueueGenericSendFromISR+0x74>
 8002732:	2300      	movs	r3, #0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10b      	bne.n	8002750 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800273c:	f383 8811 	msr	BASEPRI, r3
 8002740:	f3bf 8f6f 	isb	sy
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	623b      	str	r3, [r7, #32]
}
 800274a:	bf00      	nop
 800274c:	bf00      	nop
 800274e:	e7fd      	b.n	800274c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002750:	f001 ff4a 	bl	80045e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002754:	f3ef 8211 	mrs	r2, BASEPRI
 8002758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800275c:	f383 8811 	msr	BASEPRI, r3
 8002760:	f3bf 8f6f 	isb	sy
 8002764:	f3bf 8f4f 	dsb	sy
 8002768:	61fa      	str	r2, [r7, #28]
 800276a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800276c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800276e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002772:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002778:	429a      	cmp	r2, r3
 800277a:	d302      	bcc.n	8002782 <xQueueGenericSendFromISR+0xc2>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d12f      	bne.n	80027e2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002784:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002788:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800278c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002790:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002798:	f000 f912 	bl	80029c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800279c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d112      	bne.n	80027cc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d016      	beq.n	80027dc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b0:	3324      	adds	r3, #36	@ 0x24
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 ff04 	bl	80035c0 <xTaskRemoveFromEventList>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00e      	beq.n	80027dc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00b      	beq.n	80027dc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	e007      	b.n	80027dc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80027d0:	3301      	adds	r3, #1
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	b25a      	sxtb	r2, r3
 80027d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80027dc:	2301      	movs	r3, #1
 80027de:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80027e0:	e001      	b.n	80027e6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027e8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80027f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80027f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3740      	adds	r7, #64	@ 0x40
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08c      	sub	sp, #48	@ 0x30
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002808:	2300      	movs	r3, #0
 800280a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10b      	bne.n	800282e <xQueueReceive+0x32>
	__asm volatile
 8002816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800281a:	f383 8811 	msr	BASEPRI, r3
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	623b      	str	r3, [r7, #32]
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	e7fd      	b.n	800282a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d103      	bne.n	800283c <xQueueReceive+0x40>
 8002834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <xQueueReceive+0x44>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <xQueueReceive+0x46>
 8002840:	2300      	movs	r3, #0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10b      	bne.n	800285e <xQueueReceive+0x62>
	__asm volatile
 8002846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800284a:	f383 8811 	msr	BASEPRI, r3
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f3bf 8f4f 	dsb	sy
 8002856:	61fb      	str	r3, [r7, #28]
}
 8002858:	bf00      	nop
 800285a:	bf00      	nop
 800285c:	e7fd      	b.n	800285a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800285e:	f001 f875 	bl	800394c <xTaskGetSchedulerState>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <xQueueReceive+0x72>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <xQueueReceive+0x76>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <xQueueReceive+0x78>
 8002872:	2300      	movs	r3, #0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10b      	bne.n	8002890 <xQueueReceive+0x94>
	__asm volatile
 8002878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	61bb      	str	r3, [r7, #24]
}
 800288a:	bf00      	nop
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002890:	f001 fdca 	bl	8004428 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01f      	beq.n	80028e0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028a4:	f000 f8f6 	bl	8002a94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	1e5a      	subs	r2, r3, #1
 80028ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00f      	beq.n	80028d8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ba:	3310      	adds	r3, #16
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fe7f 	bl	80035c0 <xTaskRemoveFromEventList>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d007      	beq.n	80028d8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80028c8:	4b3c      	ldr	r3, [pc, #240]	@ (80029bc <xQueueReceive+0x1c0>)
 80028ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80028d8:	f001 fdd8 	bl	800448c <vPortExitCritical>
				return pdPASS;
 80028dc:	2301      	movs	r3, #1
 80028de:	e069      	b.n	80029b4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d103      	bne.n	80028ee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028e6:	f001 fdd1 	bl	800448c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e062      	b.n	80029b4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d106      	bne.n	8002902 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028f4:	f107 0310 	add.w	r3, r7, #16
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 fec5 	bl	8003688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028fe:	2301      	movs	r3, #1
 8002900:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002902:	f001 fdc3 	bl	800448c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002906:	f000 fc2d 	bl	8003164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800290a:	f001 fd8d 	bl	8004428 <vPortEnterCritical>
 800290e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002910:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002914:	b25b      	sxtb	r3, r3
 8002916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291a:	d103      	bne.n	8002924 <xQueueReceive+0x128>
 800291c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002926:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800292a:	b25b      	sxtb	r3, r3
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d103      	bne.n	800293a <xQueueReceive+0x13e>
 8002932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800293a:	f001 fda7 	bl	800448c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800293e:	1d3a      	adds	r2, r7, #4
 8002940:	f107 0310 	add.w	r3, r7, #16
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f000 feb4 	bl	80036b4 <xTaskCheckForTimeOut>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d123      	bne.n	800299a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002952:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002954:	f000 f916 	bl	8002b84 <prvIsQueueEmpty>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d017      	beq.n	800298e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800295e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002960:	3324      	adds	r3, #36	@ 0x24
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fdd8 	bl	800351c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800296c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800296e:	f000 f8b7 	bl	8002ae0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002972:	f000 fc05 	bl	8003180 <xTaskResumeAll>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d189      	bne.n	8002890 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800297c:	4b0f      	ldr	r3, [pc, #60]	@ (80029bc <xQueueReceive+0x1c0>)
 800297e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	f3bf 8f4f 	dsb	sy
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	e780      	b.n	8002890 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800298e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002990:	f000 f8a6 	bl	8002ae0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002994:	f000 fbf4 	bl	8003180 <xTaskResumeAll>
 8002998:	e77a      	b.n	8002890 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800299a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800299c:	f000 f8a0 	bl	8002ae0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029a0:	f000 fbee 	bl	8003180 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029a6:	f000 f8ed 	bl	8002b84 <prvIsQueueEmpty>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f43f af6f 	beq.w	8002890 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80029b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3730      	adds	r7, #48	@ 0x30
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	e000ed04 	.word	0xe000ed04

080029c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10d      	bne.n	80029fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d14d      	bne.n	8002a82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 ffcc 	bl	8003988 <xTaskPriorityDisinherit>
 80029f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	e043      	b.n	8002a82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d119      	bne.n	8002a34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6858      	ldr	r0, [r3, #4]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	461a      	mov	r2, r3
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	f002 f8a0 	bl	8004b50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	441a      	add	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d32b      	bcc.n	8002a82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	e026      	b.n	8002a82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	68d8      	ldr	r0, [r3, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68b9      	ldr	r1, [r7, #8]
 8002a40:	f002 f886 	bl	8004b50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	425b      	negs	r3, r3
 8002a4e:	441a      	add	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d207      	bcs.n	8002a70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	425b      	negs	r3, r3
 8002a6a:	441a      	add	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d105      	bne.n	8002a82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002a8a:	697b      	ldr	r3, [r7, #20]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d018      	beq.n	8002ad8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	441a      	add	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d303      	bcc.n	8002ac8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68d9      	ldr	r1, [r3, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	6838      	ldr	r0, [r7, #0]
 8002ad4:	f002 f83c 	bl	8004b50 <memcpy>
	}
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ae8:	f001 fc9e 	bl	8004428 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002af2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002af4:	e011      	b.n	8002b1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d012      	beq.n	8002b24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3324      	adds	r3, #36	@ 0x24
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fd5c 	bl	80035c0 <xTaskRemoveFromEventList>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b0e:	f000 fe35 	bl	800377c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	dce9      	bgt.n	8002af6 <prvUnlockQueue+0x16>
 8002b22:	e000      	b.n	8002b26 <prvUnlockQueue+0x46>
					break;
 8002b24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	22ff      	movs	r2, #255	@ 0xff
 8002b2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002b2e:	f001 fcad 	bl	800448c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b32:	f001 fc79 	bl	8004428 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b3e:	e011      	b.n	8002b64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d012      	beq.n	8002b6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3310      	adds	r3, #16
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fd37 	bl	80035c0 <xTaskRemoveFromEventList>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b58:	f000 fe10 	bl	800377c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b5c:	7bbb      	ldrb	r3, [r7, #14]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	dce9      	bgt.n	8002b40 <prvUnlockQueue+0x60>
 8002b6c:	e000      	b.n	8002b70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	22ff      	movs	r2, #255	@ 0xff
 8002b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002b78:	f001 fc88 	bl	800448c <vPortExitCritical>
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b8c:	f001 fc4c 	bl	8004428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d102      	bne.n	8002b9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	e001      	b.n	8002ba2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ba2:	f001 fc73 	bl	800448c <vPortExitCritical>

	return xReturn;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bb8:	f001 fc36 	bl	8004428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d102      	bne.n	8002bce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e001      	b.n	8002bd2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bd2:	f001 fc5b 	bl	800448c <vPortExitCritical>

	return xReturn;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	e014      	b.n	8002c1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002bf0:	4a0f      	ldr	r2, [pc, #60]	@ (8002c30 <vQueueAddToRegistry+0x50>)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10b      	bne.n	8002c14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002bfc:	490c      	ldr	r1, [pc, #48]	@ (8002c30 <vQueueAddToRegistry+0x50>)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002c06:	4a0a      	ldr	r2, [pc, #40]	@ (8002c30 <vQueueAddToRegistry+0x50>)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c12:	e006      	b.n	8002c22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3301      	adds	r3, #1
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b07      	cmp	r3, #7
 8002c1e:	d9e7      	bls.n	8002bf0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000828 	.word	0x20000828

08002c34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002c44:	f001 fbf0 	bl	8004428 <vPortEnterCritical>
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c4e:	b25b      	sxtb	r3, r3
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d103      	bne.n	8002c5e <vQueueWaitForMessageRestricted+0x2a>
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c64:	b25b      	sxtb	r3, r3
 8002c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6a:	d103      	bne.n	8002c74 <vQueueWaitForMessageRestricted+0x40>
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c74:	f001 fc0a 	bl	800448c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d106      	bne.n	8002c8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	3324      	adds	r3, #36	@ 0x24
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 fc6d 	bl	8003568 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c8e:	6978      	ldr	r0, [r7, #20]
 8002c90:	f7ff ff26 	bl	8002ae0 <prvUnlockQueue>
	}
 8002c94:	bf00      	nop
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08e      	sub	sp, #56	@ 0x38
 8002ca0:	af04      	add	r7, sp, #16
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10b      	bne.n	8002cc8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cb4:	f383 8811 	msr	BASEPRI, r3
 8002cb8:	f3bf 8f6f 	isb	sy
 8002cbc:	f3bf 8f4f 	dsb	sy
 8002cc0:	623b      	str	r3, [r7, #32]
}
 8002cc2:	bf00      	nop
 8002cc4:	bf00      	nop
 8002cc6:	e7fd      	b.n	8002cc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10b      	bne.n	8002ce6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd2:	f383 8811 	msr	BASEPRI, r3
 8002cd6:	f3bf 8f6f 	isb	sy
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	61fb      	str	r3, [r7, #28]
}
 8002ce0:	bf00      	nop
 8002ce2:	bf00      	nop
 8002ce4:	e7fd      	b.n	8002ce2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ce6:	23a8      	movs	r3, #168	@ 0xa8
 8002ce8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	2ba8      	cmp	r3, #168	@ 0xa8
 8002cee:	d00b      	beq.n	8002d08 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	61bb      	str	r3, [r7, #24]
}
 8002d02:	bf00      	nop
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d08:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d01e      	beq.n	8002d4e <xTaskCreateStatic+0xb2>
 8002d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01b      	beq.n	8002d4e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d18:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d1e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d28:	2300      	movs	r3, #0
 8002d2a:	9303      	str	r3, [sp, #12]
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2e:	9302      	str	r3, [sp, #8]
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f851 	bl	8002de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d48:	f000 f8f6 	bl	8002f38 <prvAddNewTaskToReadyList>
 8002d4c:	e001      	b.n	8002d52 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d52:	697b      	ldr	r3, [r7, #20]
	}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3728      	adds	r7, #40	@ 0x28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08c      	sub	sp, #48	@ 0x30
 8002d60:	af04      	add	r7, sp, #16
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 fc7b 	bl	800466c <pvPortMalloc>
 8002d76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00e      	beq.n	8002d9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d7e:	20a8      	movs	r0, #168	@ 0xa8
 8002d80:	f001 fc74 	bl	800466c <pvPortMalloc>
 8002d84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d92:	e005      	b.n	8002da0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d94:	6978      	ldr	r0, [r7, #20]
 8002d96:	f001 fd37 	bl	8004808 <vPortFree>
 8002d9a:	e001      	b.n	8002da0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d017      	beq.n	8002dd6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002dae:	88fa      	ldrh	r2, [r7, #6]
 8002db0:	2300      	movs	r3, #0
 8002db2:	9303      	str	r3, [sp, #12]
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	9302      	str	r3, [sp, #8]
 8002db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dba:	9301      	str	r3, [sp, #4]
 8002dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f80f 	bl	8002de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dca:	69f8      	ldr	r0, [r7, #28]
 8002dcc:	f000 f8b4 	bl	8002f38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	61bb      	str	r3, [r7, #24]
 8002dd4:	e002      	b.n	8002ddc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ddc:	69bb      	ldr	r3, [r7, #24]
	}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3720      	adds	r7, #32
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	461a      	mov	r2, r3
 8002e00:	21a5      	movs	r1, #165	@ 0xa5
 8002e02:	f001 fe21 	bl	8004a48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e10:	3b01      	subs	r3, #1
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	f023 0307 	bic.w	r3, r3, #7
 8002e1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	617b      	str	r3, [r7, #20]
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	e7fd      	b.n	8002e3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01f      	beq.n	8002e88 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	e012      	b.n	8002e74 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	4413      	add	r3, r2
 8002e54:	7819      	ldrb	r1, [r3, #0]
 8002e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3334      	adds	r3, #52	@ 0x34
 8002e5e:	460a      	mov	r2, r1
 8002e60:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	4413      	add	r3, r2
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d006      	beq.n	8002e7c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3301      	adds	r3, #1
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b0f      	cmp	r3, #15
 8002e78:	d9e9      	bls.n	8002e4e <prvInitialiseNewTask+0x66>
 8002e7a:	e000      	b.n	8002e7e <prvInitialiseNewTask+0x96>
			{
				break;
 8002e7c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e86:	e003      	b.n	8002e90 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e92:	2b37      	cmp	r3, #55	@ 0x37
 8002e94:	d901      	bls.n	8002e9a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e96:	2337      	movs	r3, #55	@ 0x37
 8002e98:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ea4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eae:	3304      	adds	r3, #4
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff f965 	bl	8002180 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb8:	3318      	adds	r3, #24
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff f960 	bl	8002180 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ec4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ece:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ed4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee8:	3354      	adds	r3, #84	@ 0x54
 8002eea:	224c      	movs	r2, #76	@ 0x4c
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f001 fdaa 	bl	8004a48 <memset>
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef6:	4a0d      	ldr	r2, [pc, #52]	@ (8002f2c <prvInitialiseNewTask+0x144>)
 8002ef8:	659a      	str	r2, [r3, #88]	@ 0x58
 8002efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002efc:	4a0c      	ldr	r2, [pc, #48]	@ (8002f30 <prvInitialiseNewTask+0x148>)
 8002efe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f02:	4a0c      	ldr	r2, [pc, #48]	@ (8002f34 <prvInitialiseNewTask+0x14c>)
 8002f04:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	68f9      	ldr	r1, [r7, #12]
 8002f0a:	69b8      	ldr	r0, [r7, #24]
 8002f0c:	f001 f95a 	bl	80041c4 <pxPortInitialiseStack>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f22:	bf00      	nop
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20001a74 	.word	0x20001a74
 8002f30:	20001adc 	.word	0x20001adc
 8002f34:	20001b44 	.word	0x20001b44

08002f38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f40:	f001 fa72 	bl	8004428 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f44:	4b2d      	ldr	r3, [pc, #180]	@ (8002ffc <prvAddNewTaskToReadyList+0xc4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	4a2c      	ldr	r2, [pc, #176]	@ (8002ffc <prvAddNewTaskToReadyList+0xc4>)
 8002f4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8003000 <prvAddNewTaskToReadyList+0xc8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f56:	4a2a      	ldr	r2, [pc, #168]	@ (8003000 <prvAddNewTaskToReadyList+0xc8>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f5c:	4b27      	ldr	r3, [pc, #156]	@ (8002ffc <prvAddNewTaskToReadyList+0xc4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d110      	bne.n	8002f86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f64:	f000 fc2e 	bl	80037c4 <prvInitialiseTaskLists>
 8002f68:	e00d      	b.n	8002f86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f6a:	4b26      	ldr	r3, [pc, #152]	@ (8003004 <prvAddNewTaskToReadyList+0xcc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f72:	4b23      	ldr	r3, [pc, #140]	@ (8003000 <prvAddNewTaskToReadyList+0xc8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d802      	bhi.n	8002f86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f80:	4a1f      	ldr	r2, [pc, #124]	@ (8003000 <prvAddNewTaskToReadyList+0xc8>)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f86:	4b20      	ldr	r3, [pc, #128]	@ (8003008 <prvAddNewTaskToReadyList+0xd0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003008 <prvAddNewTaskToReadyList+0xd0>)
 8002f8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f90:	4b1d      	ldr	r3, [pc, #116]	@ (8003008 <prvAddNewTaskToReadyList+0xd0>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800300c <prvAddNewTaskToReadyList+0xd4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d903      	bls.n	8002fac <prvAddNewTaskToReadyList+0x74>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa8:	4a18      	ldr	r2, [pc, #96]	@ (800300c <prvAddNewTaskToReadyList+0xd4>)
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4a15      	ldr	r2, [pc, #84]	@ (8003010 <prvAddNewTaskToReadyList+0xd8>)
 8002fba:	441a      	add	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f7ff f8e9 	bl	800219a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002fc8:	f001 fa60 	bl	800448c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8003004 <prvAddNewTaskToReadyList+0xcc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00e      	beq.n	8002ff2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003000 <prvAddNewTaskToReadyList+0xc8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d207      	bcs.n	8002ff2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8003014 <prvAddNewTaskToReadyList+0xdc>)
 8002fe4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000d3c 	.word	0x20000d3c
 8003000:	20000868 	.word	0x20000868
 8003004:	20000d48 	.word	0x20000d48
 8003008:	20000d58 	.word	0x20000d58
 800300c:	20000d44 	.word	0x20000d44
 8003010:	2000086c 	.word	0x2000086c
 8003014:	e000ed04 	.word	0xe000ed04

08003018 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d018      	beq.n	800305c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800302a:	4b14      	ldr	r3, [pc, #80]	@ (800307c <vTaskDelay+0x64>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <vTaskDelay+0x32>
	__asm volatile
 8003032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	60bb      	str	r3, [r7, #8]
}
 8003044:	bf00      	nop
 8003046:	bf00      	nop
 8003048:	e7fd      	b.n	8003046 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800304a:	f000 f88b 	bl	8003164 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800304e:	2100      	movs	r1, #0
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fd09 	bl	8003a68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003056:	f000 f893 	bl	8003180 <xTaskResumeAll>
 800305a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d107      	bne.n	8003072 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003062:	4b07      	ldr	r3, [pc, #28]	@ (8003080 <vTaskDelay+0x68>)
 8003064:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000d64 	.word	0x20000d64
 8003080:	e000ed04 	.word	0xe000ed04

08003084 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	@ 0x28
 8003088:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800308e:	2300      	movs	r3, #0
 8003090:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003092:	463a      	mov	r2, r7
 8003094:	1d39      	adds	r1, r7, #4
 8003096:	f107 0308 	add.w	r3, r7, #8
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff f81c 	bl	80020d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030a0:	6839      	ldr	r1, [r7, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	9202      	str	r2, [sp, #8]
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	2300      	movs	r3, #0
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	2300      	movs	r3, #0
 80030b0:	460a      	mov	r2, r1
 80030b2:	4924      	ldr	r1, [pc, #144]	@ (8003144 <vTaskStartScheduler+0xc0>)
 80030b4:	4824      	ldr	r0, [pc, #144]	@ (8003148 <vTaskStartScheduler+0xc4>)
 80030b6:	f7ff fdf1 	bl	8002c9c <xTaskCreateStatic>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4a23      	ldr	r2, [pc, #140]	@ (800314c <vTaskStartScheduler+0xc8>)
 80030be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030c0:	4b22      	ldr	r3, [pc, #136]	@ (800314c <vTaskStartScheduler+0xc8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030c8:	2301      	movs	r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	e001      	b.n	80030d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d102      	bne.n	80030de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80030d8:	f000 fd1a 	bl	8003b10 <xTimerCreateTimerTask>
 80030dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d11b      	bne.n	800311c <vTaskStartScheduler+0x98>
	__asm volatile
 80030e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	613b      	str	r3, [r7, #16]
}
 80030f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80030f8:	4b15      	ldr	r3, [pc, #84]	@ (8003150 <vTaskStartScheduler+0xcc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3354      	adds	r3, #84	@ 0x54
 80030fe:	4a15      	ldr	r2, [pc, #84]	@ (8003154 <vTaskStartScheduler+0xd0>)
 8003100:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003102:	4b15      	ldr	r3, [pc, #84]	@ (8003158 <vTaskStartScheduler+0xd4>)
 8003104:	f04f 32ff 	mov.w	r2, #4294967295
 8003108:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800310a:	4b14      	ldr	r3, [pc, #80]	@ (800315c <vTaskStartScheduler+0xd8>)
 800310c:	2201      	movs	r2, #1
 800310e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003110:	4b13      	ldr	r3, [pc, #76]	@ (8003160 <vTaskStartScheduler+0xdc>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003116:	f001 f8e3 	bl	80042e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800311a:	e00f      	b.n	800313c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d10b      	bne.n	800313c <vTaskStartScheduler+0xb8>
	__asm volatile
 8003124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	60fb      	str	r3, [r7, #12]
}
 8003136:	bf00      	nop
 8003138:	bf00      	nop
 800313a:	e7fd      	b.n	8003138 <vTaskStartScheduler+0xb4>
}
 800313c:	bf00      	nop
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	08004c4c 	.word	0x08004c4c
 8003148:	08003795 	.word	0x08003795
 800314c:	20000d60 	.word	0x20000d60
 8003150:	20000868 	.word	0x20000868
 8003154:	20000010 	.word	0x20000010
 8003158:	20000d5c 	.word	0x20000d5c
 800315c:	20000d48 	.word	0x20000d48
 8003160:	20000d40 	.word	0x20000d40

08003164 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003168:	4b04      	ldr	r3, [pc, #16]	@ (800317c <vTaskSuspendAll+0x18>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3301      	adds	r3, #1
 800316e:	4a03      	ldr	r2, [pc, #12]	@ (800317c <vTaskSuspendAll+0x18>)
 8003170:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003172:	bf00      	nop
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	20000d64 	.word	0x20000d64

08003180 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800318e:	4b42      	ldr	r3, [pc, #264]	@ (8003298 <xTaskResumeAll+0x118>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10b      	bne.n	80031ae <xTaskResumeAll+0x2e>
	__asm volatile
 8003196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800319a:	f383 8811 	msr	BASEPRI, r3
 800319e:	f3bf 8f6f 	isb	sy
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	603b      	str	r3, [r7, #0]
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	e7fd      	b.n	80031aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031ae:	f001 f93b 	bl	8004428 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031b2:	4b39      	ldr	r3, [pc, #228]	@ (8003298 <xTaskResumeAll+0x118>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	4a37      	ldr	r2, [pc, #220]	@ (8003298 <xTaskResumeAll+0x118>)
 80031ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031bc:	4b36      	ldr	r3, [pc, #216]	@ (8003298 <xTaskResumeAll+0x118>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d162      	bne.n	800328a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031c4:	4b35      	ldr	r3, [pc, #212]	@ (800329c <xTaskResumeAll+0x11c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d05e      	beq.n	800328a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031cc:	e02f      	b.n	800322e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031ce:	4b34      	ldr	r3, [pc, #208]	@ (80032a0 <xTaskResumeAll+0x120>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	3318      	adds	r3, #24
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff f83a 	bl	8002254 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff f835 	bl	8002254 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ee:	4b2d      	ldr	r3, [pc, #180]	@ (80032a4 <xTaskResumeAll+0x124>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d903      	bls.n	80031fe <xTaskResumeAll+0x7e>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fa:	4a2a      	ldr	r2, [pc, #168]	@ (80032a4 <xTaskResumeAll+0x124>)
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4a27      	ldr	r2, [pc, #156]	@ (80032a8 <xTaskResumeAll+0x128>)
 800320c:	441a      	add	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3304      	adds	r3, #4
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	f7fe ffc0 	bl	800219a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800321e:	4b23      	ldr	r3, [pc, #140]	@ (80032ac <xTaskResumeAll+0x12c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003224:	429a      	cmp	r2, r3
 8003226:	d302      	bcc.n	800322e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003228:	4b21      	ldr	r3, [pc, #132]	@ (80032b0 <xTaskResumeAll+0x130>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800322e:	4b1c      	ldr	r3, [pc, #112]	@ (80032a0 <xTaskResumeAll+0x120>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1cb      	bne.n	80031ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800323c:	f000 fb66 	bl	800390c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003240:	4b1c      	ldr	r3, [pc, #112]	@ (80032b4 <xTaskResumeAll+0x134>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d010      	beq.n	800326e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800324c:	f000 f846 	bl	80032dc <xTaskIncrementTick>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003256:	4b16      	ldr	r3, [pc, #88]	@ (80032b0 <xTaskResumeAll+0x130>)
 8003258:	2201      	movs	r2, #1
 800325a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3b01      	subs	r3, #1
 8003260:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f1      	bne.n	800324c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003268:	4b12      	ldr	r3, [pc, #72]	@ (80032b4 <xTaskResumeAll+0x134>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800326e:	4b10      	ldr	r3, [pc, #64]	@ (80032b0 <xTaskResumeAll+0x130>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003276:	2301      	movs	r3, #1
 8003278:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800327a:	4b0f      	ldr	r3, [pc, #60]	@ (80032b8 <xTaskResumeAll+0x138>)
 800327c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800328a:	f001 f8ff 	bl	800448c <vPortExitCritical>

	return xAlreadyYielded;
 800328e:	68bb      	ldr	r3, [r7, #8]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20000d64 	.word	0x20000d64
 800329c:	20000d3c 	.word	0x20000d3c
 80032a0:	20000cfc 	.word	0x20000cfc
 80032a4:	20000d44 	.word	0x20000d44
 80032a8:	2000086c 	.word	0x2000086c
 80032ac:	20000868 	.word	0x20000868
 80032b0:	20000d50 	.word	0x20000d50
 80032b4:	20000d4c 	.word	0x20000d4c
 80032b8:	e000ed04 	.word	0xe000ed04

080032bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80032c2:	4b05      	ldr	r3, [pc, #20]	@ (80032d8 <xTaskGetTickCount+0x1c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80032c8:	687b      	ldr	r3, [r7, #4]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000d40 	.word	0x20000d40

080032dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032e6:	4b4f      	ldr	r3, [pc, #316]	@ (8003424 <xTaskIncrementTick+0x148>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f040 8090 	bne.w	8003410 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003428 <xTaskIncrementTick+0x14c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3301      	adds	r3, #1
 80032f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003428 <xTaskIncrementTick+0x14c>)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d121      	bne.n	8003348 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003304:	4b49      	ldr	r3, [pc, #292]	@ (800342c <xTaskIncrementTick+0x150>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00b      	beq.n	8003326 <xTaskIncrementTick+0x4a>
	__asm volatile
 800330e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	603b      	str	r3, [r7, #0]
}
 8003320:	bf00      	nop
 8003322:	bf00      	nop
 8003324:	e7fd      	b.n	8003322 <xTaskIncrementTick+0x46>
 8003326:	4b41      	ldr	r3, [pc, #260]	@ (800342c <xTaskIncrementTick+0x150>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	4b40      	ldr	r3, [pc, #256]	@ (8003430 <xTaskIncrementTick+0x154>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a3e      	ldr	r2, [pc, #248]	@ (800342c <xTaskIncrementTick+0x150>)
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4a3e      	ldr	r2, [pc, #248]	@ (8003430 <xTaskIncrementTick+0x154>)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	4b3e      	ldr	r3, [pc, #248]	@ (8003434 <xTaskIncrementTick+0x158>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3301      	adds	r3, #1
 8003340:	4a3c      	ldr	r2, [pc, #240]	@ (8003434 <xTaskIncrementTick+0x158>)
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	f000 fae2 	bl	800390c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003348:	4b3b      	ldr	r3, [pc, #236]	@ (8003438 <xTaskIncrementTick+0x15c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	429a      	cmp	r2, r3
 8003350:	d349      	bcc.n	80033e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003352:	4b36      	ldr	r3, [pc, #216]	@ (800342c <xTaskIncrementTick+0x150>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d104      	bne.n	8003366 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800335c:	4b36      	ldr	r3, [pc, #216]	@ (8003438 <xTaskIncrementTick+0x15c>)
 800335e:	f04f 32ff 	mov.w	r2, #4294967295
 8003362:	601a      	str	r2, [r3, #0]
					break;
 8003364:	e03f      	b.n	80033e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003366:	4b31      	ldr	r3, [pc, #196]	@ (800342c <xTaskIncrementTick+0x150>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	429a      	cmp	r2, r3
 800337c:	d203      	bcs.n	8003386 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800337e:	4a2e      	ldr	r2, [pc, #184]	@ (8003438 <xTaskIncrementTick+0x15c>)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003384:	e02f      	b.n	80033e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	3304      	adds	r3, #4
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe ff62 	bl	8002254 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	d004      	beq.n	80033a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	3318      	adds	r3, #24
 800339c:	4618      	mov	r0, r3
 800339e:	f7fe ff59 	bl	8002254 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a6:	4b25      	ldr	r3, [pc, #148]	@ (800343c <xTaskIncrementTick+0x160>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d903      	bls.n	80033b6 <xTaskIncrementTick+0xda>
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b2:	4a22      	ldr	r2, [pc, #136]	@ (800343c <xTaskIncrementTick+0x160>)
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003440 <xTaskIncrementTick+0x164>)
 80033c4:	441a      	add	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	3304      	adds	r3, #4
 80033ca:	4619      	mov	r1, r3
 80033cc:	4610      	mov	r0, r2
 80033ce:	f7fe fee4 	bl	800219a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003444 <xTaskIncrementTick+0x168>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033dc:	429a      	cmp	r2, r3
 80033de:	d3b8      	bcc.n	8003352 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80033e0:	2301      	movs	r3, #1
 80033e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033e4:	e7b5      	b.n	8003352 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033e6:	4b17      	ldr	r3, [pc, #92]	@ (8003444 <xTaskIncrementTick+0x168>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ec:	4914      	ldr	r1, [pc, #80]	@ (8003440 <xTaskIncrementTick+0x164>)
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d901      	bls.n	8003402 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80033fe:	2301      	movs	r3, #1
 8003400:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003402:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <xTaskIncrementTick+0x16c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d007      	beq.n	800341a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800340a:	2301      	movs	r3, #1
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	e004      	b.n	800341a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003410:	4b0e      	ldr	r3, [pc, #56]	@ (800344c <xTaskIncrementTick+0x170>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3301      	adds	r3, #1
 8003416:	4a0d      	ldr	r2, [pc, #52]	@ (800344c <xTaskIncrementTick+0x170>)
 8003418:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800341a:	697b      	ldr	r3, [r7, #20]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000d64 	.word	0x20000d64
 8003428:	20000d40 	.word	0x20000d40
 800342c:	20000cf4 	.word	0x20000cf4
 8003430:	20000cf8 	.word	0x20000cf8
 8003434:	20000d54 	.word	0x20000d54
 8003438:	20000d5c 	.word	0x20000d5c
 800343c:	20000d44 	.word	0x20000d44
 8003440:	2000086c 	.word	0x2000086c
 8003444:	20000868 	.word	0x20000868
 8003448:	20000d50 	.word	0x20000d50
 800344c:	20000d4c 	.word	0x20000d4c

08003450 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003456:	4b2b      	ldr	r3, [pc, #172]	@ (8003504 <vTaskSwitchContext+0xb4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800345e:	4b2a      	ldr	r3, [pc, #168]	@ (8003508 <vTaskSwitchContext+0xb8>)
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003464:	e047      	b.n	80034f6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003466:	4b28      	ldr	r3, [pc, #160]	@ (8003508 <vTaskSwitchContext+0xb8>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800346c:	4b27      	ldr	r3, [pc, #156]	@ (800350c <vTaskSwitchContext+0xbc>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e011      	b.n	8003498 <vTaskSwitchContext+0x48>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10b      	bne.n	8003492 <vTaskSwitchContext+0x42>
	__asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	607b      	str	r3, [r7, #4]
}
 800348c:	bf00      	nop
 800348e:	bf00      	nop
 8003490:	e7fd      	b.n	800348e <vTaskSwitchContext+0x3e>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3b01      	subs	r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	491d      	ldr	r1, [pc, #116]	@ (8003510 <vTaskSwitchContext+0xc0>)
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0e3      	beq.n	8003474 <vTaskSwitchContext+0x24>
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4a16      	ldr	r2, [pc, #88]	@ (8003510 <vTaskSwitchContext+0xc0>)
 80034b8:	4413      	add	r3, r2
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	3308      	adds	r3, #8
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d104      	bne.n	80034dc <vTaskSwitchContext+0x8c>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003514 <vTaskSwitchContext+0xc4>)
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	4a09      	ldr	r2, [pc, #36]	@ (800350c <vTaskSwitchContext+0xbc>)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80034ec:	4b09      	ldr	r3, [pc, #36]	@ (8003514 <vTaskSwitchContext+0xc4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3354      	adds	r3, #84	@ 0x54
 80034f2:	4a09      	ldr	r2, [pc, #36]	@ (8003518 <vTaskSwitchContext+0xc8>)
 80034f4:	6013      	str	r3, [r2, #0]
}
 80034f6:	bf00      	nop
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000d64 	.word	0x20000d64
 8003508:	20000d50 	.word	0x20000d50
 800350c:	20000d44 	.word	0x20000d44
 8003510:	2000086c 	.word	0x2000086c
 8003514:	20000868 	.word	0x20000868
 8003518:	20000010 	.word	0x20000010

0800351c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800352c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	60fb      	str	r3, [r7, #12]
}
 800353e:	bf00      	nop
 8003540:	bf00      	nop
 8003542:	e7fd      	b.n	8003540 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003544:	4b07      	ldr	r3, [pc, #28]	@ (8003564 <vTaskPlaceOnEventList+0x48>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3318      	adds	r3, #24
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7fe fe48 	bl	80021e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003552:	2101      	movs	r1, #1
 8003554:	6838      	ldr	r0, [r7, #0]
 8003556:	f000 fa87 	bl	8003a68 <prvAddCurrentTaskToDelayedList>
}
 800355a:	bf00      	nop
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000868 	.word	0x20000868

08003568 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10b      	bne.n	8003592 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	617b      	str	r3, [r7, #20]
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	e7fd      	b.n	800358e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003592:	4b0a      	ldr	r3, [pc, #40]	@ (80035bc <vTaskPlaceOnEventListRestricted+0x54>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3318      	adds	r3, #24
 8003598:	4619      	mov	r1, r3
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f7fe fdfd 	bl	800219a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295
 80035aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	68b8      	ldr	r0, [r7, #8]
 80035b0:	f000 fa5a 	bl	8003a68 <prvAddCurrentTaskToDelayedList>
	}
 80035b4:	bf00      	nop
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000868 	.word	0x20000868

080035c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10b      	bne.n	80035ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80035d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	60fb      	str	r3, [r7, #12]
}
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop
 80035ec:	e7fd      	b.n	80035ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	3318      	adds	r3, #24
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fe fe2e 	bl	8002254 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003670 <xTaskRemoveFromEventList+0xb0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d11d      	bne.n	800363c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	3304      	adds	r3, #4
 8003604:	4618      	mov	r0, r3
 8003606:	f7fe fe25 	bl	8002254 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800360e:	4b19      	ldr	r3, [pc, #100]	@ (8003674 <xTaskRemoveFromEventList+0xb4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d903      	bls.n	800361e <xTaskRemoveFromEventList+0x5e>
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361a:	4a16      	ldr	r2, [pc, #88]	@ (8003674 <xTaskRemoveFromEventList+0xb4>)
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4a13      	ldr	r2, [pc, #76]	@ (8003678 <xTaskRemoveFromEventList+0xb8>)
 800362c:	441a      	add	r2, r3
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	3304      	adds	r3, #4
 8003632:	4619      	mov	r1, r3
 8003634:	4610      	mov	r0, r2
 8003636:	f7fe fdb0 	bl	800219a <vListInsertEnd>
 800363a:	e005      	b.n	8003648 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	3318      	adds	r3, #24
 8003640:	4619      	mov	r1, r3
 8003642:	480e      	ldr	r0, [pc, #56]	@ (800367c <xTaskRemoveFromEventList+0xbc>)
 8003644:	f7fe fda9 	bl	800219a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800364c:	4b0c      	ldr	r3, [pc, #48]	@ (8003680 <xTaskRemoveFromEventList+0xc0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003652:	429a      	cmp	r2, r3
 8003654:	d905      	bls.n	8003662 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003656:	2301      	movs	r3, #1
 8003658:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800365a:	4b0a      	ldr	r3, [pc, #40]	@ (8003684 <xTaskRemoveFromEventList+0xc4>)
 800365c:	2201      	movs	r2, #1
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e001      	b.n	8003666 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003666:	697b      	ldr	r3, [r7, #20]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20000d64 	.word	0x20000d64
 8003674:	20000d44 	.word	0x20000d44
 8003678:	2000086c 	.word	0x2000086c
 800367c:	20000cfc 	.word	0x20000cfc
 8003680:	20000868 	.word	0x20000868
 8003684:	20000d50 	.word	0x20000d50

08003688 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003690:	4b06      	ldr	r3, [pc, #24]	@ (80036ac <vTaskInternalSetTimeOutState+0x24>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003698:	4b05      	ldr	r3, [pc, #20]	@ (80036b0 <vTaskInternalSetTimeOutState+0x28>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	605a      	str	r2, [r3, #4]
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	20000d54 	.word	0x20000d54
 80036b0:	20000d40 	.word	0x20000d40

080036b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10b      	bne.n	80036dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	613b      	str	r3, [r7, #16]
}
 80036d6:	bf00      	nop
 80036d8:	bf00      	nop
 80036da:	e7fd      	b.n	80036d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10b      	bne.n	80036fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	60fb      	str	r3, [r7, #12]
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	e7fd      	b.n	80036f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80036fa:	f000 fe95 	bl	8004428 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80036fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003774 <xTaskCheckForTimeOut+0xc0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003716:	d102      	bne.n	800371e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003718:	2300      	movs	r3, #0
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	e023      	b.n	8003766 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	4b15      	ldr	r3, [pc, #84]	@ (8003778 <xTaskCheckForTimeOut+0xc4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d007      	beq.n	800373a <xTaskCheckForTimeOut+0x86>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	429a      	cmp	r2, r3
 8003732:	d302      	bcc.n	800373a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003734:	2301      	movs	r3, #1
 8003736:	61fb      	str	r3, [r7, #28]
 8003738:	e015      	b.n	8003766 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	429a      	cmp	r2, r3
 8003742:	d20b      	bcs.n	800375c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	1ad2      	subs	r2, r2, r3
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff ff99 	bl	8003688 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	e004      	b.n	8003766 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003762:	2301      	movs	r3, #1
 8003764:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003766:	f000 fe91 	bl	800448c <vPortExitCritical>

	return xReturn;
 800376a:	69fb      	ldr	r3, [r7, #28]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3720      	adds	r7, #32
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20000d40 	.word	0x20000d40
 8003778:	20000d54 	.word	0x20000d54

0800377c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003780:	4b03      	ldr	r3, [pc, #12]	@ (8003790 <vTaskMissedYield+0x14>)
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]
}
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	20000d50 	.word	0x20000d50

08003794 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800379c:	f000 f852 	bl	8003844 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037a0:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <prvIdleTask+0x28>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d9f9      	bls.n	800379c <prvIdleTask+0x8>
			{
				taskYIELD();
 80037a8:	4b05      	ldr	r3, [pc, #20]	@ (80037c0 <prvIdleTask+0x2c>)
 80037aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80037b8:	e7f0      	b.n	800379c <prvIdleTask+0x8>
 80037ba:	bf00      	nop
 80037bc:	2000086c 	.word	0x2000086c
 80037c0:	e000ed04 	.word	0xe000ed04

080037c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	e00c      	b.n	80037ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4a12      	ldr	r2, [pc, #72]	@ (8003824 <prvInitialiseTaskLists+0x60>)
 80037dc:	4413      	add	r3, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fcae 	bl	8002140 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3301      	adds	r3, #1
 80037e8:	607b      	str	r3, [r7, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b37      	cmp	r3, #55	@ 0x37
 80037ee:	d9ef      	bls.n	80037d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80037f0:	480d      	ldr	r0, [pc, #52]	@ (8003828 <prvInitialiseTaskLists+0x64>)
 80037f2:	f7fe fca5 	bl	8002140 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80037f6:	480d      	ldr	r0, [pc, #52]	@ (800382c <prvInitialiseTaskLists+0x68>)
 80037f8:	f7fe fca2 	bl	8002140 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037fc:	480c      	ldr	r0, [pc, #48]	@ (8003830 <prvInitialiseTaskLists+0x6c>)
 80037fe:	f7fe fc9f 	bl	8002140 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003802:	480c      	ldr	r0, [pc, #48]	@ (8003834 <prvInitialiseTaskLists+0x70>)
 8003804:	f7fe fc9c 	bl	8002140 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003808:	480b      	ldr	r0, [pc, #44]	@ (8003838 <prvInitialiseTaskLists+0x74>)
 800380a:	f7fe fc99 	bl	8002140 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800380e:	4b0b      	ldr	r3, [pc, #44]	@ (800383c <prvInitialiseTaskLists+0x78>)
 8003810:	4a05      	ldr	r2, [pc, #20]	@ (8003828 <prvInitialiseTaskLists+0x64>)
 8003812:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003814:	4b0a      	ldr	r3, [pc, #40]	@ (8003840 <prvInitialiseTaskLists+0x7c>)
 8003816:	4a05      	ldr	r2, [pc, #20]	@ (800382c <prvInitialiseTaskLists+0x68>)
 8003818:	601a      	str	r2, [r3, #0]
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	2000086c 	.word	0x2000086c
 8003828:	20000ccc 	.word	0x20000ccc
 800382c:	20000ce0 	.word	0x20000ce0
 8003830:	20000cfc 	.word	0x20000cfc
 8003834:	20000d10 	.word	0x20000d10
 8003838:	20000d28 	.word	0x20000d28
 800383c:	20000cf4 	.word	0x20000cf4
 8003840:	20000cf8 	.word	0x20000cf8

08003844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800384a:	e019      	b.n	8003880 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800384c:	f000 fdec 	bl	8004428 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003850:	4b10      	ldr	r3, [pc, #64]	@ (8003894 <prvCheckTasksWaitingTermination+0x50>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	4618      	mov	r0, r3
 800385e:	f7fe fcf9 	bl	8002254 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003862:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <prvCheckTasksWaitingTermination+0x54>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3b01      	subs	r3, #1
 8003868:	4a0b      	ldr	r2, [pc, #44]	@ (8003898 <prvCheckTasksWaitingTermination+0x54>)
 800386a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800386c:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <prvCheckTasksWaitingTermination+0x58>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3b01      	subs	r3, #1
 8003872:	4a0a      	ldr	r2, [pc, #40]	@ (800389c <prvCheckTasksWaitingTermination+0x58>)
 8003874:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003876:	f000 fe09 	bl	800448c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f810 	bl	80038a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <prvCheckTasksWaitingTermination+0x58>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e1      	bne.n	800384c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000d10 	.word	0x20000d10
 8003898:	20000d3c 	.word	0x20000d3c
 800389c:	20000d24 	.word	0x20000d24

080038a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3354      	adds	r3, #84	@ 0x54
 80038ac:	4618      	mov	r0, r3
 80038ae:	f001 f8d3 	bl	8004a58 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d108      	bne.n	80038ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 ffa1 	bl	8004808 <vPortFree>
				vPortFree( pxTCB );
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 ff9e 	bl	8004808 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038cc:	e019      	b.n	8003902 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d103      	bne.n	80038e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 ff95 	bl	8004808 <vPortFree>
	}
 80038de:	e010      	b.n	8003902 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d00b      	beq.n	8003902 <prvDeleteTCB+0x62>
	__asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	60fb      	str	r3, [r7, #12]
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	e7fd      	b.n	80038fe <prvDeleteTCB+0x5e>
	}
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003912:	4b0c      	ldr	r3, [pc, #48]	@ (8003944 <prvResetNextTaskUnblockTime+0x38>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d104      	bne.n	8003926 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800391c:	4b0a      	ldr	r3, [pc, #40]	@ (8003948 <prvResetNextTaskUnblockTime+0x3c>)
 800391e:	f04f 32ff 	mov.w	r2, #4294967295
 8003922:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003924:	e008      	b.n	8003938 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003926:	4b07      	ldr	r3, [pc, #28]	@ (8003944 <prvResetNextTaskUnblockTime+0x38>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4a04      	ldr	r2, [pc, #16]	@ (8003948 <prvResetNextTaskUnblockTime+0x3c>)
 8003936:	6013      	str	r3, [r2, #0]
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	20000cf4 	.word	0x20000cf4
 8003948:	20000d5c 	.word	0x20000d5c

0800394c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003952:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <xTaskGetSchedulerState+0x34>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d102      	bne.n	8003960 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800395a:	2301      	movs	r3, #1
 800395c:	607b      	str	r3, [r7, #4]
 800395e:	e008      	b.n	8003972 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003960:	4b08      	ldr	r3, [pc, #32]	@ (8003984 <xTaskGetSchedulerState+0x38>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d102      	bne.n	800396e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003968:	2302      	movs	r3, #2
 800396a:	607b      	str	r3, [r7, #4]
 800396c:	e001      	b.n	8003972 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800396e:	2300      	movs	r3, #0
 8003970:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003972:	687b      	ldr	r3, [r7, #4]
	}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	20000d48 	.word	0x20000d48
 8003984:	20000d64 	.word	0x20000d64

08003988 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d058      	beq.n	8003a50 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800399e:	4b2f      	ldr	r3, [pc, #188]	@ (8003a5c <xTaskPriorityDisinherit+0xd4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d00b      	beq.n	80039c0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	60fb      	str	r3, [r7, #12]
}
 80039ba:	bf00      	nop
 80039bc:	bf00      	nop
 80039be:	e7fd      	b.n	80039bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10b      	bne.n	80039e0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	60bb      	str	r3, [r7, #8]
}
 80039da:	bf00      	nop
 80039dc:	bf00      	nop
 80039de:	e7fd      	b.n	80039dc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e4:	1e5a      	subs	r2, r3, #1
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d02c      	beq.n	8003a50 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d128      	bne.n	8003a50 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	3304      	adds	r3, #4
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe fc26 	bl	8002254 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a20:	4b0f      	ldr	r3, [pc, #60]	@ (8003a60 <xTaskPriorityDisinherit+0xd8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d903      	bls.n	8003a30 <xTaskPriorityDisinherit+0xa8>
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8003a60 <xTaskPriorityDisinherit+0xd8>)
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4a09      	ldr	r2, [pc, #36]	@ (8003a64 <xTaskPriorityDisinherit+0xdc>)
 8003a3e:	441a      	add	r2, r3
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	3304      	adds	r3, #4
 8003a44:	4619      	mov	r1, r3
 8003a46:	4610      	mov	r0, r2
 8003a48:	f7fe fba7 	bl	800219a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a50:	697b      	ldr	r3, [r7, #20]
	}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000868 	.word	0x20000868
 8003a60:	20000d44 	.word	0x20000d44
 8003a64:	2000086c 	.word	0x2000086c

08003a68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a72:	4b21      	ldr	r3, [pc, #132]	@ (8003af8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a78:	4b20      	ldr	r3, [pc, #128]	@ (8003afc <prvAddCurrentTaskToDelayedList+0x94>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe fbe8 	bl	8002254 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d10a      	bne.n	8003aa2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d007      	beq.n	8003aa2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a92:	4b1a      	ldr	r3, [pc, #104]	@ (8003afc <prvAddCurrentTaskToDelayedList+0x94>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4819      	ldr	r0, [pc, #100]	@ (8003b00 <prvAddCurrentTaskToDelayedList+0x98>)
 8003a9c:	f7fe fb7d 	bl	800219a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003aa0:	e026      	b.n	8003af0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003aaa:	4b14      	ldr	r3, [pc, #80]	@ (8003afc <prvAddCurrentTaskToDelayedList+0x94>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d209      	bcs.n	8003ace <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aba:	4b12      	ldr	r3, [pc, #72]	@ (8003b04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b0f      	ldr	r3, [pc, #60]	@ (8003afc <prvAddCurrentTaskToDelayedList+0x94>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f7fe fb8b 	bl	80021e2 <vListInsert>
}
 8003acc:	e010      	b.n	8003af0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ace:	4b0e      	ldr	r3, [pc, #56]	@ (8003b08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8003afc <prvAddCurrentTaskToDelayedList+0x94>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4610      	mov	r0, r2
 8003adc:	f7fe fb81 	bl	80021e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8003b0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d202      	bcs.n	8003af0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003aea:	4a08      	ldr	r2, [pc, #32]	@ (8003b0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	6013      	str	r3, [r2, #0]
}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20000d40 	.word	0x20000d40
 8003afc:	20000868 	.word	0x20000868
 8003b00:	20000d28 	.word	0x20000d28
 8003b04:	20000cf8 	.word	0x20000cf8
 8003b08:	20000cf4 	.word	0x20000cf4
 8003b0c:	20000d5c 	.word	0x20000d5c

08003b10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	@ 0x28
 8003b14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b1a:	f000 fb13 	bl	8004144 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b94 <xTimerCreateTimerTask+0x84>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d021      	beq.n	8003b6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b2e:	1d3a      	adds	r2, r7, #4
 8003b30:	f107 0108 	add.w	r1, r7, #8
 8003b34:	f107 030c 	add.w	r3, r7, #12
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fe fae7 	bl	800210c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	9202      	str	r2, [sp, #8]
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	2302      	movs	r3, #2
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	460a      	mov	r2, r1
 8003b50:	4911      	ldr	r1, [pc, #68]	@ (8003b98 <xTimerCreateTimerTask+0x88>)
 8003b52:	4812      	ldr	r0, [pc, #72]	@ (8003b9c <xTimerCreateTimerTask+0x8c>)
 8003b54:	f7ff f8a2 	bl	8002c9c <xTaskCreateStatic>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	4a11      	ldr	r2, [pc, #68]	@ (8003ba0 <xTimerCreateTimerTask+0x90>)
 8003b5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ba0 <xTimerCreateTimerTask+0x90>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003b66:	2301      	movs	r3, #1
 8003b68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10b      	bne.n	8003b88 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	613b      	str	r3, [r7, #16]
}
 8003b82:	bf00      	nop
 8003b84:	bf00      	nop
 8003b86:	e7fd      	b.n	8003b84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003b88:	697b      	ldr	r3, [r7, #20]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000d98 	.word	0x20000d98
 8003b98:	08004c54 	.word	0x08004c54
 8003b9c:	08003cdd 	.word	0x08003cdd
 8003ba0:	20000d9c 	.word	0x20000d9c

08003ba4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	@ 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10b      	bne.n	8003bd4 <xTimerGenericCommand+0x30>
	__asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	623b      	str	r3, [r7, #32]
}
 8003bce:	bf00      	nop
 8003bd0:	bf00      	nop
 8003bd2:	e7fd      	b.n	8003bd0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003bd4:	4b19      	ldr	r3, [pc, #100]	@ (8003c3c <xTimerGenericCommand+0x98>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d02a      	beq.n	8003c32 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b05      	cmp	r3, #5
 8003bec:	dc18      	bgt.n	8003c20 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003bee:	f7ff fead 	bl	800394c <xTaskGetSchedulerState>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d109      	bne.n	8003c0c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003bf8:	4b10      	ldr	r3, [pc, #64]	@ (8003c3c <xTimerGenericCommand+0x98>)
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	f107 0110 	add.w	r1, r7, #16
 8003c00:	2300      	movs	r3, #0
 8003c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c04:	f7fe fc5a 	bl	80024bc <xQueueGenericSend>
 8003c08:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c0a:	e012      	b.n	8003c32 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c3c <xTimerGenericCommand+0x98>)
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	f107 0110 	add.w	r1, r7, #16
 8003c14:	2300      	movs	r3, #0
 8003c16:	2200      	movs	r2, #0
 8003c18:	f7fe fc50 	bl	80024bc <xQueueGenericSend>
 8003c1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c1e:	e008      	b.n	8003c32 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c20:	4b06      	ldr	r3, [pc, #24]	@ (8003c3c <xTimerGenericCommand+0x98>)
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	f107 0110 	add.w	r1, r7, #16
 8003c28:	2300      	movs	r3, #0
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	f7fe fd48 	bl	80026c0 <xQueueGenericSendFromISR>
 8003c30:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3728      	adds	r7, #40	@ 0x28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000d98 	.word	0x20000d98

08003c40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c4a:	4b23      	ldr	r3, [pc, #140]	@ (8003cd8 <prvProcessExpiredTimer+0x98>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	3304      	adds	r3, #4
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fe fafb 	bl	8002254 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d023      	beq.n	8003cb4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	699a      	ldr	r2, [r3, #24]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	18d1      	adds	r1, r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	6978      	ldr	r0, [r7, #20]
 8003c7a:	f000 f8d5 	bl	8003e28 <prvInsertTimerInActiveList>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d020      	beq.n	8003cc6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c84:	2300      	movs	r3, #0
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	6978      	ldr	r0, [r7, #20]
 8003c90:	f7ff ff88 	bl	8003ba4 <xTimerGenericCommand>
 8003c94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d114      	bne.n	8003cc6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	60fb      	str	r3, [r7, #12]
}
 8003cae:	bf00      	nop
 8003cb0:	bf00      	nop
 8003cb2:	e7fd      	b.n	8003cb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cba:	f023 0301 	bic.w	r3, r3, #1
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	6978      	ldr	r0, [r7, #20]
 8003ccc:	4798      	blx	r3
}
 8003cce:	bf00      	nop
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000d90 	.word	0x20000d90

08003cdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ce4:	f107 0308 	add.w	r3, r7, #8
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 f859 	bl	8003da0 <prvGetNextExpireTime>
 8003cee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 f805 	bl	8003d04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003cfa:	f000 f8d7 	bl	8003eac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cfe:	bf00      	nop
 8003d00:	e7f0      	b.n	8003ce4 <prvTimerTask+0x8>
	...

08003d04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003d0e:	f7ff fa29 	bl	8003164 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d12:	f107 0308 	add.w	r3, r7, #8
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 f866 	bl	8003de8 <prvSampleTimeNow>
 8003d1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d130      	bne.n	8003d86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <prvProcessTimerOrBlockTask+0x3c>
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d806      	bhi.n	8003d40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003d32:	f7ff fa25 	bl	8003180 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d36:	68f9      	ldr	r1, [r7, #12]
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff ff81 	bl	8003c40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003d3e:	e024      	b.n	8003d8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d008      	beq.n	8003d58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d46:	4b13      	ldr	r3, [pc, #76]	@ (8003d94 <prvProcessTimerOrBlockTask+0x90>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <prvProcessTimerOrBlockTask+0x50>
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <prvProcessTimerOrBlockTask+0x52>
 8003d54:	2300      	movs	r3, #0
 8003d56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d58:	4b0f      	ldr	r3, [pc, #60]	@ (8003d98 <prvProcessTimerOrBlockTask+0x94>)
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	4619      	mov	r1, r3
 8003d66:	f7fe ff65 	bl	8002c34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003d6a:	f7ff fa09 	bl	8003180 <xTaskResumeAll>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003d74:	4b09      	ldr	r3, [pc, #36]	@ (8003d9c <prvProcessTimerOrBlockTask+0x98>)
 8003d76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	f3bf 8f6f 	isb	sy
}
 8003d84:	e001      	b.n	8003d8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003d86:	f7ff f9fb 	bl	8003180 <xTaskResumeAll>
}
 8003d8a:	bf00      	nop
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000d94 	.word	0x20000d94
 8003d98:	20000d98 	.word	0x20000d98
 8003d9c:	e000ed04 	.word	0xe000ed04

08003da0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003da8:	4b0e      	ldr	r3, [pc, #56]	@ (8003de4 <prvGetNextExpireTime+0x44>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <prvGetNextExpireTime+0x16>
 8003db2:	2201      	movs	r2, #1
 8003db4:	e000      	b.n	8003db8 <prvGetNextExpireTime+0x18>
 8003db6:	2200      	movs	r2, #0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d105      	bne.n	8003dd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dc4:	4b07      	ldr	r3, [pc, #28]	@ (8003de4 <prvGetNextExpireTime+0x44>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	e001      	b.n	8003dd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20000d90 	.word	0x20000d90

08003de8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003df0:	f7ff fa64 	bl	80032bc <xTaskGetTickCount>
 8003df4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003df6:	4b0b      	ldr	r3, [pc, #44]	@ (8003e24 <prvSampleTimeNow+0x3c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d205      	bcs.n	8003e0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003e00:	f000 f93a 	bl	8004078 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	e002      	b.n	8003e12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003e12:	4a04      	ldr	r2, [pc, #16]	@ (8003e24 <prvSampleTimeNow+0x3c>)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003e18:	68fb      	ldr	r3, [r7, #12]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000da0 	.word	0x20000da0

08003e28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d812      	bhi.n	8003e74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	1ad2      	subs	r2, r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d302      	bcc.n	8003e62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	e01b      	b.n	8003e9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e62:	4b10      	ldr	r3, [pc, #64]	@ (8003ea4 <prvInsertTimerInActiveList+0x7c>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	f7fe f9b8 	bl	80021e2 <vListInsert>
 8003e72:	e012      	b.n	8003e9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d206      	bcs.n	8003e8a <prvInsertTimerInActiveList+0x62>
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d302      	bcc.n	8003e8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003e84:	2301      	movs	r3, #1
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	e007      	b.n	8003e9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e8a:	4b07      	ldr	r3, [pc, #28]	@ (8003ea8 <prvInsertTimerInActiveList+0x80>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3304      	adds	r3, #4
 8003e92:	4619      	mov	r1, r3
 8003e94:	4610      	mov	r0, r2
 8003e96:	f7fe f9a4 	bl	80021e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003e9a:	697b      	ldr	r3, [r7, #20]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20000d94 	.word	0x20000d94
 8003ea8:	20000d90 	.word	0x20000d90

08003eac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08e      	sub	sp, #56	@ 0x38
 8003eb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003eb2:	e0ce      	b.n	8004052 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	da19      	bge.n	8003eee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003eba:	1d3b      	adds	r3, r7, #4
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10b      	bne.n	8003ede <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	61fb      	str	r3, [r7, #28]
}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	e7fd      	b.n	8003eda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ee4:	6850      	ldr	r0, [r2, #4]
 8003ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ee8:	6892      	ldr	r2, [r2, #8]
 8003eea:	4611      	mov	r1, r2
 8003eec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f2c0 80ae 	blt.w	8004052 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d004      	beq.n	8003f0c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f04:	3304      	adds	r3, #4
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fe f9a4 	bl	8002254 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f0c:	463b      	mov	r3, r7
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff ff6a 	bl	8003de8 <prvSampleTimeNow>
 8003f14:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b09      	cmp	r3, #9
 8003f1a:	f200 8097 	bhi.w	800404c <prvProcessReceivedCommands+0x1a0>
 8003f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f24 <prvProcessReceivedCommands+0x78>)
 8003f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f24:	08003f4d 	.word	0x08003f4d
 8003f28:	08003f4d 	.word	0x08003f4d
 8003f2c:	08003f4d 	.word	0x08003f4d
 8003f30:	08003fc3 	.word	0x08003fc3
 8003f34:	08003fd7 	.word	0x08003fd7
 8003f38:	08004023 	.word	0x08004023
 8003f3c:	08003f4d 	.word	0x08003f4d
 8003f40:	08003f4d 	.word	0x08003f4d
 8003f44:	08003fc3 	.word	0x08003fc3
 8003f48:	08003fd7 	.word	0x08003fd7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f52:	f043 0301 	orr.w	r3, r3, #1
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	18d1      	adds	r1, r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f6c:	f7ff ff5c 	bl	8003e28 <prvInsertTimerInActiveList>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d06c      	beq.n	8004050 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d061      	beq.n	8004050 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	441a      	add	r2, r3
 8003f94:	2300      	movs	r3, #0
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f9e:	f7ff fe01 	bl	8003ba4 <xTimerGenericCommand>
 8003fa2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d152      	bne.n	8004050 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	61bb      	str	r3, [r7, #24]
}
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	e7fd      	b.n	8003fbe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003fd4:	e03d      	b.n	8004052 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10b      	bne.n	800400e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	617b      	str	r3, [r7, #20]
}
 8004008:	bf00      	nop
 800400a:	bf00      	nop
 800400c:	e7fd      	b.n	800400a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800400e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	18d1      	adds	r1, r2, r3
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800401a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800401c:	f7ff ff04 	bl	8003e28 <prvInsertTimerInActiveList>
					break;
 8004020:	e017      	b.n	8004052 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d103      	bne.n	8004038 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004030:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004032:	f000 fbe9 	bl	8004808 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004036:	e00c      	b.n	8004052 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	b2da      	uxtb	r2, r3
 8004044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004046:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800404a:	e002      	b.n	8004052 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800404c:	bf00      	nop
 800404e:	e000      	b.n	8004052 <prvProcessReceivedCommands+0x1a6>
					break;
 8004050:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004052:	4b08      	ldr	r3, [pc, #32]	@ (8004074 <prvProcessReceivedCommands+0x1c8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	1d39      	adds	r1, r7, #4
 8004058:	2200      	movs	r2, #0
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe fbce 	bl	80027fc <xQueueReceive>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	f47f af26 	bne.w	8003eb4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004068:	bf00      	nop
 800406a:	bf00      	nop
 800406c:	3730      	adds	r7, #48	@ 0x30
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000d98 	.word	0x20000d98

08004078 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800407e:	e049      	b.n	8004114 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004080:	4b2e      	ldr	r3, [pc, #184]	@ (800413c <prvSwitchTimerLists+0xc4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800408a:	4b2c      	ldr	r3, [pc, #176]	@ (800413c <prvSwitchTimerLists+0xc4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3304      	adds	r3, #4
 8004098:	4618      	mov	r0, r3
 800409a:	f7fe f8db 	bl	8002254 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d02f      	beq.n	8004114 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4413      	add	r3, r2
 80040bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d90e      	bls.n	80040e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040d2:	4b1a      	ldr	r3, [pc, #104]	@ (800413c <prvSwitchTimerLists+0xc4>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3304      	adds	r3, #4
 80040da:	4619      	mov	r1, r3
 80040dc:	4610      	mov	r0, r2
 80040de:	f7fe f880 	bl	80021e2 <vListInsert>
 80040e2:	e017      	b.n	8004114 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040e4:	2300      	movs	r3, #0
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	2300      	movs	r3, #0
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	2100      	movs	r1, #0
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f7ff fd58 	bl	8003ba4 <xTimerGenericCommand>
 80040f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10b      	bne.n	8004114 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	603b      	str	r3, [r7, #0]
}
 800410e:	bf00      	nop
 8004110:	bf00      	nop
 8004112:	e7fd      	b.n	8004110 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004114:	4b09      	ldr	r3, [pc, #36]	@ (800413c <prvSwitchTimerLists+0xc4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1b0      	bne.n	8004080 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800411e:	4b07      	ldr	r3, [pc, #28]	@ (800413c <prvSwitchTimerLists+0xc4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004124:	4b06      	ldr	r3, [pc, #24]	@ (8004140 <prvSwitchTimerLists+0xc8>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a04      	ldr	r2, [pc, #16]	@ (800413c <prvSwitchTimerLists+0xc4>)
 800412a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800412c:	4a04      	ldr	r2, [pc, #16]	@ (8004140 <prvSwitchTimerLists+0xc8>)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	6013      	str	r3, [r2, #0]
}
 8004132:	bf00      	nop
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20000d90 	.word	0x20000d90
 8004140:	20000d94 	.word	0x20000d94

08004144 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800414a:	f000 f96d 	bl	8004428 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800414e:	4b15      	ldr	r3, [pc, #84]	@ (80041a4 <prvCheckForValidListAndQueue+0x60>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d120      	bne.n	8004198 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004156:	4814      	ldr	r0, [pc, #80]	@ (80041a8 <prvCheckForValidListAndQueue+0x64>)
 8004158:	f7fd fff2 	bl	8002140 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800415c:	4813      	ldr	r0, [pc, #76]	@ (80041ac <prvCheckForValidListAndQueue+0x68>)
 800415e:	f7fd ffef 	bl	8002140 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004162:	4b13      	ldr	r3, [pc, #76]	@ (80041b0 <prvCheckForValidListAndQueue+0x6c>)
 8004164:	4a10      	ldr	r2, [pc, #64]	@ (80041a8 <prvCheckForValidListAndQueue+0x64>)
 8004166:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004168:	4b12      	ldr	r3, [pc, #72]	@ (80041b4 <prvCheckForValidListAndQueue+0x70>)
 800416a:	4a10      	ldr	r2, [pc, #64]	@ (80041ac <prvCheckForValidListAndQueue+0x68>)
 800416c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800416e:	2300      	movs	r3, #0
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	4b11      	ldr	r3, [pc, #68]	@ (80041b8 <prvCheckForValidListAndQueue+0x74>)
 8004174:	4a11      	ldr	r2, [pc, #68]	@ (80041bc <prvCheckForValidListAndQueue+0x78>)
 8004176:	2110      	movs	r1, #16
 8004178:	200a      	movs	r0, #10
 800417a:	f7fe f8ff 	bl	800237c <xQueueGenericCreateStatic>
 800417e:	4603      	mov	r3, r0
 8004180:	4a08      	ldr	r2, [pc, #32]	@ (80041a4 <prvCheckForValidListAndQueue+0x60>)
 8004182:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004184:	4b07      	ldr	r3, [pc, #28]	@ (80041a4 <prvCheckForValidListAndQueue+0x60>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800418c:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <prvCheckForValidListAndQueue+0x60>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	490b      	ldr	r1, [pc, #44]	@ (80041c0 <prvCheckForValidListAndQueue+0x7c>)
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe fd24 	bl	8002be0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004198:	f000 f978 	bl	800448c <vPortExitCritical>
}
 800419c:	bf00      	nop
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000d98 	.word	0x20000d98
 80041a8:	20000d68 	.word	0x20000d68
 80041ac:	20000d7c 	.word	0x20000d7c
 80041b0:	20000d90 	.word	0x20000d90
 80041b4:	20000d94 	.word	0x20000d94
 80041b8:	20000e44 	.word	0x20000e44
 80041bc:	20000da4 	.word	0x20000da4
 80041c0:	08004c5c 	.word	0x08004c5c

080041c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3b04      	subs	r3, #4
 80041d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3b04      	subs	r3, #4
 80041e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f023 0201 	bic.w	r2, r3, #1
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3b04      	subs	r3, #4
 80041f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004228 <pxPortInitialiseStack+0x64>)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3b14      	subs	r3, #20
 80041fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3b04      	subs	r3, #4
 800420a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f06f 0202 	mvn.w	r2, #2
 8004212:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3b20      	subs	r3, #32
 8004218:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800421a:	68fb      	ldr	r3, [r7, #12]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	0800422d 	.word	0x0800422d

0800422c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004232:	2300      	movs	r3, #0
 8004234:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004236:	4b13      	ldr	r3, [pc, #76]	@ (8004284 <prvTaskExitError+0x58>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d00b      	beq.n	8004258 <prvTaskExitError+0x2c>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	60fb      	str	r3, [r7, #12]
}
 8004252:	bf00      	nop
 8004254:	bf00      	nop
 8004256:	e7fd      	b.n	8004254 <prvTaskExitError+0x28>
	__asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	60bb      	str	r3, [r7, #8]
}
 800426a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800426c:	bf00      	nop
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0fc      	beq.n	800426e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	2000000c 	.word	0x2000000c
	...

08004290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004290:	4b07      	ldr	r3, [pc, #28]	@ (80042b0 <pxCurrentTCBConst2>)
 8004292:	6819      	ldr	r1, [r3, #0]
 8004294:	6808      	ldr	r0, [r1, #0]
 8004296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800429a:	f380 8809 	msr	PSP, r0
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f04f 0000 	mov.w	r0, #0
 80042a6:	f380 8811 	msr	BASEPRI, r0
 80042aa:	4770      	bx	lr
 80042ac:	f3af 8000 	nop.w

080042b0 <pxCurrentTCBConst2>:
 80042b0:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop

080042b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80042b8:	4808      	ldr	r0, [pc, #32]	@ (80042dc <prvPortStartFirstTask+0x24>)
 80042ba:	6800      	ldr	r0, [r0, #0]
 80042bc:	6800      	ldr	r0, [r0, #0]
 80042be:	f380 8808 	msr	MSP, r0
 80042c2:	f04f 0000 	mov.w	r0, #0
 80042c6:	f380 8814 	msr	CONTROL, r0
 80042ca:	b662      	cpsie	i
 80042cc:	b661      	cpsie	f
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	df00      	svc	0
 80042d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80042da:	bf00      	nop
 80042dc:	e000ed08 	.word	0xe000ed08

080042e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042e6:	4b47      	ldr	r3, [pc, #284]	@ (8004404 <xPortStartScheduler+0x124>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a47      	ldr	r2, [pc, #284]	@ (8004408 <xPortStartScheduler+0x128>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d10b      	bne.n	8004308 <xPortStartScheduler+0x28>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	613b      	str	r3, [r7, #16]
}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	e7fd      	b.n	8004304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004308:	4b3e      	ldr	r3, [pc, #248]	@ (8004404 <xPortStartScheduler+0x124>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a3f      	ldr	r2, [pc, #252]	@ (800440c <xPortStartScheduler+0x12c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d10b      	bne.n	800432a <xPortStartScheduler+0x4a>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	60fb      	str	r3, [r7, #12]
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop
 8004328:	e7fd      	b.n	8004326 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800432a:	4b39      	ldr	r3, [pc, #228]	@ (8004410 <xPortStartScheduler+0x130>)
 800432c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	22ff      	movs	r2, #255	@ 0xff
 800433a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800434c:	b2da      	uxtb	r2, r3
 800434e:	4b31      	ldr	r3, [pc, #196]	@ (8004414 <xPortStartScheduler+0x134>)
 8004350:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004352:	4b31      	ldr	r3, [pc, #196]	@ (8004418 <xPortStartScheduler+0x138>)
 8004354:	2207      	movs	r2, #7
 8004356:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004358:	e009      	b.n	800436e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800435a:	4b2f      	ldr	r3, [pc, #188]	@ (8004418 <xPortStartScheduler+0x138>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3b01      	subs	r3, #1
 8004360:	4a2d      	ldr	r2, [pc, #180]	@ (8004418 <xPortStartScheduler+0x138>)
 8004362:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	b2db      	uxtb	r3, r3
 800436c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800436e:	78fb      	ldrb	r3, [r7, #3]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004376:	2b80      	cmp	r3, #128	@ 0x80
 8004378:	d0ef      	beq.n	800435a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800437a:	4b27      	ldr	r3, [pc, #156]	@ (8004418 <xPortStartScheduler+0x138>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f1c3 0307 	rsb	r3, r3, #7
 8004382:	2b04      	cmp	r3, #4
 8004384:	d00b      	beq.n	800439e <xPortStartScheduler+0xbe>
	__asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	60bb      	str	r3, [r7, #8]
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	e7fd      	b.n	800439a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800439e:	4b1e      	ldr	r3, [pc, #120]	@ (8004418 <xPortStartScheduler+0x138>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	021b      	lsls	r3, r3, #8
 80043a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004418 <xPortStartScheduler+0x138>)
 80043a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004418 <xPortStartScheduler+0x138>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043b0:	4a19      	ldr	r2, [pc, #100]	@ (8004418 <xPortStartScheduler+0x138>)
 80043b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043bc:	4b17      	ldr	r3, [pc, #92]	@ (800441c <xPortStartScheduler+0x13c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a16      	ldr	r2, [pc, #88]	@ (800441c <xPortStartScheduler+0x13c>)
 80043c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043c8:	4b14      	ldr	r3, [pc, #80]	@ (800441c <xPortStartScheduler+0x13c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a13      	ldr	r2, [pc, #76]	@ (800441c <xPortStartScheduler+0x13c>)
 80043ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80043d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043d4:	f000 f8da 	bl	800458c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043d8:	4b11      	ldr	r3, [pc, #68]	@ (8004420 <xPortStartScheduler+0x140>)
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80043de:	f000 f8f9 	bl	80045d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043e2:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <xPortStartScheduler+0x144>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a0f      	ldr	r2, [pc, #60]	@ (8004424 <xPortStartScheduler+0x144>)
 80043e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80043ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043ee:	f7ff ff63 	bl	80042b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043f2:	f7ff f82d 	bl	8003450 <vTaskSwitchContext>
	prvTaskExitError();
 80043f6:	f7ff ff19 	bl	800422c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	e000ed00 	.word	0xe000ed00
 8004408:	410fc271 	.word	0x410fc271
 800440c:	410fc270 	.word	0x410fc270
 8004410:	e000e400 	.word	0xe000e400
 8004414:	20000e94 	.word	0x20000e94
 8004418:	20000e98 	.word	0x20000e98
 800441c:	e000ed20 	.word	0xe000ed20
 8004420:	2000000c 	.word	0x2000000c
 8004424:	e000ef34 	.word	0xe000ef34

08004428 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
	__asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	607b      	str	r3, [r7, #4]
}
 8004440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004442:	4b10      	ldr	r3, [pc, #64]	@ (8004484 <vPortEnterCritical+0x5c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3301      	adds	r3, #1
 8004448:	4a0e      	ldr	r2, [pc, #56]	@ (8004484 <vPortEnterCritical+0x5c>)
 800444a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800444c:	4b0d      	ldr	r3, [pc, #52]	@ (8004484 <vPortEnterCritical+0x5c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d110      	bne.n	8004476 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004454:	4b0c      	ldr	r3, [pc, #48]	@ (8004488 <vPortEnterCritical+0x60>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <vPortEnterCritical+0x4e>
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	603b      	str	r3, [r7, #0]
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	e7fd      	b.n	8004472 <vPortEnterCritical+0x4a>
	}
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	2000000c 	.word	0x2000000c
 8004488:	e000ed04 	.word	0xe000ed04

0800448c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004492:	4b12      	ldr	r3, [pc, #72]	@ (80044dc <vPortExitCritical+0x50>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10b      	bne.n	80044b2 <vPortExitCritical+0x26>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	607b      	str	r3, [r7, #4]
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	e7fd      	b.n	80044ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80044b2:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <vPortExitCritical+0x50>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	4a08      	ldr	r2, [pc, #32]	@ (80044dc <vPortExitCritical+0x50>)
 80044ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044bc:	4b07      	ldr	r3, [pc, #28]	@ (80044dc <vPortExitCritical+0x50>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d105      	bne.n	80044d0 <vPortExitCritical+0x44>
 80044c4:	2300      	movs	r3, #0
 80044c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	f383 8811 	msr	BASEPRI, r3
}
 80044ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	2000000c 	.word	0x2000000c

080044e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044e0:	f3ef 8009 	mrs	r0, PSP
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	4b15      	ldr	r3, [pc, #84]	@ (8004540 <pxCurrentTCBConst>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	f01e 0f10 	tst.w	lr, #16
 80044f0:	bf08      	it	eq
 80044f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fa:	6010      	str	r0, [r2, #0]
 80044fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004500:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004504:	f380 8811 	msr	BASEPRI, r0
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f7fe ff9e 	bl	8003450 <vTaskSwitchContext>
 8004514:	f04f 0000 	mov.w	r0, #0
 8004518:	f380 8811 	msr	BASEPRI, r0
 800451c:	bc09      	pop	{r0, r3}
 800451e:	6819      	ldr	r1, [r3, #0]
 8004520:	6808      	ldr	r0, [r1, #0]
 8004522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004526:	f01e 0f10 	tst.w	lr, #16
 800452a:	bf08      	it	eq
 800452c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004530:	f380 8809 	msr	PSP, r0
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	f3af 8000 	nop.w

08004540 <pxCurrentTCBConst>:
 8004540:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop

08004548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	607b      	str	r3, [r7, #4]
}
 8004560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004562:	f7fe febb 	bl	80032dc <xTaskIncrementTick>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800456c:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <xPortSysTickHandler+0x40>)
 800456e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	2300      	movs	r3, #0
 8004576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f383 8811 	msr	BASEPRI, r3
}
 800457e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004590:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <vPortSetupTimerInterrupt+0x34>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004596:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <vPortSetupTimerInterrupt+0x38>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800459c:	4b0a      	ldr	r3, [pc, #40]	@ (80045c8 <vPortSetupTimerInterrupt+0x3c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a0a      	ldr	r2, [pc, #40]	@ (80045cc <vPortSetupTimerInterrupt+0x40>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	099b      	lsrs	r3, r3, #6
 80045a8:	4a09      	ldr	r2, [pc, #36]	@ (80045d0 <vPortSetupTimerInterrupt+0x44>)
 80045aa:	3b01      	subs	r3, #1
 80045ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045ae:	4b04      	ldr	r3, [pc, #16]	@ (80045c0 <vPortSetupTimerInterrupt+0x34>)
 80045b0:	2207      	movs	r2, #7
 80045b2:	601a      	str	r2, [r3, #0]
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	e000e010 	.word	0xe000e010
 80045c4:	e000e018 	.word	0xe000e018
 80045c8:	20000000 	.word	0x20000000
 80045cc:	10624dd3 	.word	0x10624dd3
 80045d0:	e000e014 	.word	0xe000e014

080045d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80045d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80045e4 <vPortEnableVFP+0x10>
 80045d8:	6801      	ldr	r1, [r0, #0]
 80045da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80045de:	6001      	str	r1, [r0, #0]
 80045e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80045e2:	bf00      	nop
 80045e4:	e000ed88 	.word	0xe000ed88

080045e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80045ee:	f3ef 8305 	mrs	r3, IPSR
 80045f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b0f      	cmp	r3, #15
 80045f8:	d915      	bls.n	8004626 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045fa:	4a18      	ldr	r2, [pc, #96]	@ (800465c <vPortValidateInterruptPriority+0x74>)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004604:	4b16      	ldr	r3, [pc, #88]	@ (8004660 <vPortValidateInterruptPriority+0x78>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	7afa      	ldrb	r2, [r7, #11]
 800460a:	429a      	cmp	r2, r3
 800460c:	d20b      	bcs.n	8004626 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	607b      	str	r3, [r7, #4]
}
 8004620:	bf00      	nop
 8004622:	bf00      	nop
 8004624:	e7fd      	b.n	8004622 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004626:	4b0f      	ldr	r3, [pc, #60]	@ (8004664 <vPortValidateInterruptPriority+0x7c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800462e:	4b0e      	ldr	r3, [pc, #56]	@ (8004668 <vPortValidateInterruptPriority+0x80>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d90b      	bls.n	800464e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	603b      	str	r3, [r7, #0]
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	e7fd      	b.n	800464a <vPortValidateInterruptPriority+0x62>
	}
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	e000e3f0 	.word	0xe000e3f0
 8004660:	20000e94 	.word	0x20000e94
 8004664:	e000ed0c 	.word	0xe000ed0c
 8004668:	20000e98 	.word	0x20000e98

0800466c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	@ 0x28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004674:	2300      	movs	r3, #0
 8004676:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004678:	f7fe fd74 	bl	8003164 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800467c:	4b5c      	ldr	r3, [pc, #368]	@ (80047f0 <pvPortMalloc+0x184>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004684:	f000 f924 	bl	80048d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004688:	4b5a      	ldr	r3, [pc, #360]	@ (80047f4 <pvPortMalloc+0x188>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4013      	ands	r3, r2
 8004690:	2b00      	cmp	r3, #0
 8004692:	f040 8095 	bne.w	80047c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01e      	beq.n	80046da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800469c:	2208      	movs	r2, #8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4413      	add	r3, r2
 80046a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d015      	beq.n	80046da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f023 0307 	bic.w	r3, r3, #7
 80046b4:	3308      	adds	r3, #8
 80046b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00b      	beq.n	80046da <pvPortMalloc+0x6e>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	617b      	str	r3, [r7, #20]
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop
 80046d8:	e7fd      	b.n	80046d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d06f      	beq.n	80047c0 <pvPortMalloc+0x154>
 80046e0:	4b45      	ldr	r3, [pc, #276]	@ (80047f8 <pvPortMalloc+0x18c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d86a      	bhi.n	80047c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046ea:	4b44      	ldr	r3, [pc, #272]	@ (80047fc <pvPortMalloc+0x190>)
 80046ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046ee:	4b43      	ldr	r3, [pc, #268]	@ (80047fc <pvPortMalloc+0x190>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046f4:	e004      	b.n	8004700 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	429a      	cmp	r2, r3
 8004708:	d903      	bls.n	8004712 <pvPortMalloc+0xa6>
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f1      	bne.n	80046f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004712:	4b37      	ldr	r3, [pc, #220]	@ (80047f0 <pvPortMalloc+0x184>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004718:	429a      	cmp	r2, r3
 800471a:	d051      	beq.n	80047c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2208      	movs	r2, #8
 8004722:	4413      	add	r3, r2
 8004724:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	1ad2      	subs	r2, r2, r3
 8004736:	2308      	movs	r3, #8
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	429a      	cmp	r2, r3
 800473c:	d920      	bls.n	8004780 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800473e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4413      	add	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00b      	beq.n	8004768 <pvPortMalloc+0xfc>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	613b      	str	r3, [r7, #16]
}
 8004762:	bf00      	nop
 8004764:	bf00      	nop
 8004766:	e7fd      	b.n	8004764 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	1ad2      	subs	r2, r2, r3
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800477a:	69b8      	ldr	r0, [r7, #24]
 800477c:	f000 f90a 	bl	8004994 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004780:	4b1d      	ldr	r3, [pc, #116]	@ (80047f8 <pvPortMalloc+0x18c>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	4a1b      	ldr	r2, [pc, #108]	@ (80047f8 <pvPortMalloc+0x18c>)
 800478c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800478e:	4b1a      	ldr	r3, [pc, #104]	@ (80047f8 <pvPortMalloc+0x18c>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	4b1b      	ldr	r3, [pc, #108]	@ (8004800 <pvPortMalloc+0x194>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d203      	bcs.n	80047a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800479a:	4b17      	ldr	r3, [pc, #92]	@ (80047f8 <pvPortMalloc+0x18c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a18      	ldr	r2, [pc, #96]	@ (8004800 <pvPortMalloc+0x194>)
 80047a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	4b13      	ldr	r3, [pc, #76]	@ (80047f4 <pvPortMalloc+0x188>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80047b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80047b6:	4b13      	ldr	r3, [pc, #76]	@ (8004804 <pvPortMalloc+0x198>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3301      	adds	r3, #1
 80047bc:	4a11      	ldr	r2, [pc, #68]	@ (8004804 <pvPortMalloc+0x198>)
 80047be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80047c0:	f7fe fcde 	bl	8003180 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00b      	beq.n	80047e6 <pvPortMalloc+0x17a>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	60fb      	str	r3, [r7, #12]
}
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	e7fd      	b.n	80047e2 <pvPortMalloc+0x176>
	return pvReturn;
 80047e6:	69fb      	ldr	r3, [r7, #28]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3728      	adds	r7, #40	@ 0x28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20001a5c 	.word	0x20001a5c
 80047f4:	20001a70 	.word	0x20001a70
 80047f8:	20001a60 	.word	0x20001a60
 80047fc:	20001a54 	.word	0x20001a54
 8004800:	20001a64 	.word	0x20001a64
 8004804:	20001a68 	.word	0x20001a68

08004808 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d04f      	beq.n	80048ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800481a:	2308      	movs	r3, #8
 800481c:	425b      	negs	r3, r3
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4413      	add	r3, r2
 8004822:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	4b25      	ldr	r3, [pc, #148]	@ (80048c4 <vPortFree+0xbc>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4013      	ands	r3, r2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10b      	bne.n	800484e <vPortFree+0x46>
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	60fb      	str	r3, [r7, #12]
}
 8004848:	bf00      	nop
 800484a:	bf00      	nop
 800484c:	e7fd      	b.n	800484a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00b      	beq.n	800486e <vPortFree+0x66>
	__asm volatile
 8004856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	60bb      	str	r3, [r7, #8]
}
 8004868:	bf00      	nop
 800486a:	bf00      	nop
 800486c:	e7fd      	b.n	800486a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	4b14      	ldr	r3, [pc, #80]	@ (80048c4 <vPortFree+0xbc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4013      	ands	r3, r2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01e      	beq.n	80048ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d11a      	bne.n	80048ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	4b0e      	ldr	r3, [pc, #56]	@ (80048c4 <vPortFree+0xbc>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	43db      	mvns	r3, r3
 800488e:	401a      	ands	r2, r3
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004894:	f7fe fc66 	bl	8003164 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	4b0a      	ldr	r3, [pc, #40]	@ (80048c8 <vPortFree+0xc0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4413      	add	r3, r2
 80048a2:	4a09      	ldr	r2, [pc, #36]	@ (80048c8 <vPortFree+0xc0>)
 80048a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048a6:	6938      	ldr	r0, [r7, #16]
 80048a8:	f000 f874 	bl	8004994 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80048ac:	4b07      	ldr	r3, [pc, #28]	@ (80048cc <vPortFree+0xc4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3301      	adds	r3, #1
 80048b2:	4a06      	ldr	r2, [pc, #24]	@ (80048cc <vPortFree+0xc4>)
 80048b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80048b6:	f7fe fc63 	bl	8003180 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80048ba:	bf00      	nop
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20001a70 	.word	0x20001a70
 80048c8:	20001a60 	.word	0x20001a60
 80048cc:	20001a6c 	.word	0x20001a6c

080048d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048d6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80048da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80048dc:	4b27      	ldr	r3, [pc, #156]	@ (800497c <prvHeapInit+0xac>)
 80048de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00c      	beq.n	8004904 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3307      	adds	r3, #7
 80048ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0307 	bic.w	r3, r3, #7
 80048f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	4a1f      	ldr	r2, [pc, #124]	@ (800497c <prvHeapInit+0xac>)
 8004900:	4413      	add	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004908:	4a1d      	ldr	r2, [pc, #116]	@ (8004980 <prvHeapInit+0xb0>)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800490e:	4b1c      	ldr	r3, [pc, #112]	@ (8004980 <prvHeapInit+0xb0>)
 8004910:	2200      	movs	r2, #0
 8004912:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	4413      	add	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800491c:	2208      	movs	r2, #8
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0307 	bic.w	r3, r3, #7
 800492a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4a15      	ldr	r2, [pc, #84]	@ (8004984 <prvHeapInit+0xb4>)
 8004930:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004932:	4b14      	ldr	r3, [pc, #80]	@ (8004984 <prvHeapInit+0xb4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2200      	movs	r2, #0
 8004938:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800493a:	4b12      	ldr	r3, [pc, #72]	@ (8004984 <prvHeapInit+0xb4>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	1ad2      	subs	r2, r2, r3
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004950:	4b0c      	ldr	r3, [pc, #48]	@ (8004984 <prvHeapInit+0xb4>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	4a0a      	ldr	r2, [pc, #40]	@ (8004988 <prvHeapInit+0xb8>)
 800495e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	4a09      	ldr	r2, [pc, #36]	@ (800498c <prvHeapInit+0xbc>)
 8004966:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004968:	4b09      	ldr	r3, [pc, #36]	@ (8004990 <prvHeapInit+0xc0>)
 800496a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800496e:	601a      	str	r2, [r3, #0]
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	20000e9c 	.word	0x20000e9c
 8004980:	20001a54 	.word	0x20001a54
 8004984:	20001a5c 	.word	0x20001a5c
 8004988:	20001a64 	.word	0x20001a64
 800498c:	20001a60 	.word	0x20001a60
 8004990:	20001a70 	.word	0x20001a70

08004994 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800499c:	4b28      	ldr	r3, [pc, #160]	@ (8004a40 <prvInsertBlockIntoFreeList+0xac>)
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	e002      	b.n	80049a8 <prvInsertBlockIntoFreeList+0x14>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d8f7      	bhi.n	80049a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	4413      	add	r3, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d108      	bne.n	80049d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	441a      	add	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	441a      	add	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d118      	bne.n	8004a1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4b15      	ldr	r3, [pc, #84]	@ (8004a44 <prvInsertBlockIntoFreeList+0xb0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d00d      	beq.n	8004a12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	441a      	add	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	e008      	b.n	8004a24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a12:	4b0c      	ldr	r3, [pc, #48]	@ (8004a44 <prvInsertBlockIntoFreeList+0xb0>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e003      	b.n	8004a24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d002      	beq.n	8004a32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20001a54 	.word	0x20001a54
 8004a44:	20001a5c 	.word	0x20001a5c

08004a48 <memset>:
 8004a48:	4402      	add	r2, r0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d100      	bne.n	8004a52 <memset+0xa>
 8004a50:	4770      	bx	lr
 8004a52:	f803 1b01 	strb.w	r1, [r3], #1
 8004a56:	e7f9      	b.n	8004a4c <memset+0x4>

08004a58 <_reclaim_reent>:
 8004a58:	4b29      	ldr	r3, [pc, #164]	@ (8004b00 <_reclaim_reent+0xa8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4283      	cmp	r3, r0
 8004a5e:	b570      	push	{r4, r5, r6, lr}
 8004a60:	4604      	mov	r4, r0
 8004a62:	d04b      	beq.n	8004afc <_reclaim_reent+0xa4>
 8004a64:	69c3      	ldr	r3, [r0, #28]
 8004a66:	b1ab      	cbz	r3, 8004a94 <_reclaim_reent+0x3c>
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	b16b      	cbz	r3, 8004a88 <_reclaim_reent+0x30>
 8004a6c:	2500      	movs	r5, #0
 8004a6e:	69e3      	ldr	r3, [r4, #28]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	5959      	ldr	r1, [r3, r5]
 8004a74:	2900      	cmp	r1, #0
 8004a76:	d13b      	bne.n	8004af0 <_reclaim_reent+0x98>
 8004a78:	3504      	adds	r5, #4
 8004a7a:	2d80      	cmp	r5, #128	@ 0x80
 8004a7c:	d1f7      	bne.n	8004a6e <_reclaim_reent+0x16>
 8004a7e:	69e3      	ldr	r3, [r4, #28]
 8004a80:	4620      	mov	r0, r4
 8004a82:	68d9      	ldr	r1, [r3, #12]
 8004a84:	f000 f872 	bl	8004b6c <_free_r>
 8004a88:	69e3      	ldr	r3, [r4, #28]
 8004a8a:	6819      	ldr	r1, [r3, #0]
 8004a8c:	b111      	cbz	r1, 8004a94 <_reclaim_reent+0x3c>
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f000 f86c 	bl	8004b6c <_free_r>
 8004a94:	6961      	ldr	r1, [r4, #20]
 8004a96:	b111      	cbz	r1, 8004a9e <_reclaim_reent+0x46>
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f000 f867 	bl	8004b6c <_free_r>
 8004a9e:	69e1      	ldr	r1, [r4, #28]
 8004aa0:	b111      	cbz	r1, 8004aa8 <_reclaim_reent+0x50>
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	f000 f862 	bl	8004b6c <_free_r>
 8004aa8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004aaa:	b111      	cbz	r1, 8004ab2 <_reclaim_reent+0x5a>
 8004aac:	4620      	mov	r0, r4
 8004aae:	f000 f85d 	bl	8004b6c <_free_r>
 8004ab2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ab4:	b111      	cbz	r1, 8004abc <_reclaim_reent+0x64>
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f000 f858 	bl	8004b6c <_free_r>
 8004abc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004abe:	b111      	cbz	r1, 8004ac6 <_reclaim_reent+0x6e>
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f000 f853 	bl	8004b6c <_free_r>
 8004ac6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004ac8:	b111      	cbz	r1, 8004ad0 <_reclaim_reent+0x78>
 8004aca:	4620      	mov	r0, r4
 8004acc:	f000 f84e 	bl	8004b6c <_free_r>
 8004ad0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004ad2:	b111      	cbz	r1, 8004ada <_reclaim_reent+0x82>
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	f000 f849 	bl	8004b6c <_free_r>
 8004ada:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004adc:	b111      	cbz	r1, 8004ae4 <_reclaim_reent+0x8c>
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f000 f844 	bl	8004b6c <_free_r>
 8004ae4:	6a23      	ldr	r3, [r4, #32]
 8004ae6:	b14b      	cbz	r3, 8004afc <_reclaim_reent+0xa4>
 8004ae8:	4620      	mov	r0, r4
 8004aea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004aee:	4718      	bx	r3
 8004af0:	680e      	ldr	r6, [r1, #0]
 8004af2:	4620      	mov	r0, r4
 8004af4:	f000 f83a 	bl	8004b6c <_free_r>
 8004af8:	4631      	mov	r1, r6
 8004afa:	e7bb      	b.n	8004a74 <_reclaim_reent+0x1c>
 8004afc:	bd70      	pop	{r4, r5, r6, pc}
 8004afe:	bf00      	nop
 8004b00:	20000010 	.word	0x20000010

08004b04 <__libc_init_array>:
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	4d0d      	ldr	r5, [pc, #52]	@ (8004b3c <__libc_init_array+0x38>)
 8004b08:	4c0d      	ldr	r4, [pc, #52]	@ (8004b40 <__libc_init_array+0x3c>)
 8004b0a:	1b64      	subs	r4, r4, r5
 8004b0c:	10a4      	asrs	r4, r4, #2
 8004b0e:	2600      	movs	r6, #0
 8004b10:	42a6      	cmp	r6, r4
 8004b12:	d109      	bne.n	8004b28 <__libc_init_array+0x24>
 8004b14:	4d0b      	ldr	r5, [pc, #44]	@ (8004b44 <__libc_init_array+0x40>)
 8004b16:	4c0c      	ldr	r4, [pc, #48]	@ (8004b48 <__libc_init_array+0x44>)
 8004b18:	f000 f87e 	bl	8004c18 <_init>
 8004b1c:	1b64      	subs	r4, r4, r5
 8004b1e:	10a4      	asrs	r4, r4, #2
 8004b20:	2600      	movs	r6, #0
 8004b22:	42a6      	cmp	r6, r4
 8004b24:	d105      	bne.n	8004b32 <__libc_init_array+0x2e>
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
 8004b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b2c:	4798      	blx	r3
 8004b2e:	3601      	adds	r6, #1
 8004b30:	e7ee      	b.n	8004b10 <__libc_init_array+0xc>
 8004b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b36:	4798      	blx	r3
 8004b38:	3601      	adds	r6, #1
 8004b3a:	e7f2      	b.n	8004b22 <__libc_init_array+0x1e>
 8004b3c:	08004cf4 	.word	0x08004cf4
 8004b40:	08004cf4 	.word	0x08004cf4
 8004b44:	08004cf4 	.word	0x08004cf4
 8004b48:	08004cf8 	.word	0x08004cf8

08004b4c <__retarget_lock_acquire_recursive>:
 8004b4c:	4770      	bx	lr

08004b4e <__retarget_lock_release_recursive>:
 8004b4e:	4770      	bx	lr

08004b50 <memcpy>:
 8004b50:	440a      	add	r2, r1
 8004b52:	4291      	cmp	r1, r2
 8004b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b58:	d100      	bne.n	8004b5c <memcpy+0xc>
 8004b5a:	4770      	bx	lr
 8004b5c:	b510      	push	{r4, lr}
 8004b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b66:	4291      	cmp	r1, r2
 8004b68:	d1f9      	bne.n	8004b5e <memcpy+0xe>
 8004b6a:	bd10      	pop	{r4, pc}

08004b6c <_free_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4605      	mov	r5, r0
 8004b70:	2900      	cmp	r1, #0
 8004b72:	d041      	beq.n	8004bf8 <_free_r+0x8c>
 8004b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b78:	1f0c      	subs	r4, r1, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bfb8      	it	lt
 8004b7e:	18e4      	addlt	r4, r4, r3
 8004b80:	f000 f83e 	bl	8004c00 <__malloc_lock>
 8004b84:	4a1d      	ldr	r2, [pc, #116]	@ (8004bfc <_free_r+0x90>)
 8004b86:	6813      	ldr	r3, [r2, #0]
 8004b88:	b933      	cbnz	r3, 8004b98 <_free_r+0x2c>
 8004b8a:	6063      	str	r3, [r4, #4]
 8004b8c:	6014      	str	r4, [r2, #0]
 8004b8e:	4628      	mov	r0, r5
 8004b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b94:	f000 b83a 	b.w	8004c0c <__malloc_unlock>
 8004b98:	42a3      	cmp	r3, r4
 8004b9a:	d908      	bls.n	8004bae <_free_r+0x42>
 8004b9c:	6820      	ldr	r0, [r4, #0]
 8004b9e:	1821      	adds	r1, r4, r0
 8004ba0:	428b      	cmp	r3, r1
 8004ba2:	bf01      	itttt	eq
 8004ba4:	6819      	ldreq	r1, [r3, #0]
 8004ba6:	685b      	ldreq	r3, [r3, #4]
 8004ba8:	1809      	addeq	r1, r1, r0
 8004baa:	6021      	streq	r1, [r4, #0]
 8004bac:	e7ed      	b.n	8004b8a <_free_r+0x1e>
 8004bae:	461a      	mov	r2, r3
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	b10b      	cbz	r3, 8004bb8 <_free_r+0x4c>
 8004bb4:	42a3      	cmp	r3, r4
 8004bb6:	d9fa      	bls.n	8004bae <_free_r+0x42>
 8004bb8:	6811      	ldr	r1, [r2, #0]
 8004bba:	1850      	adds	r0, r2, r1
 8004bbc:	42a0      	cmp	r0, r4
 8004bbe:	d10b      	bne.n	8004bd8 <_free_r+0x6c>
 8004bc0:	6820      	ldr	r0, [r4, #0]
 8004bc2:	4401      	add	r1, r0
 8004bc4:	1850      	adds	r0, r2, r1
 8004bc6:	4283      	cmp	r3, r0
 8004bc8:	6011      	str	r1, [r2, #0]
 8004bca:	d1e0      	bne.n	8004b8e <_free_r+0x22>
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	6053      	str	r3, [r2, #4]
 8004bd2:	4408      	add	r0, r1
 8004bd4:	6010      	str	r0, [r2, #0]
 8004bd6:	e7da      	b.n	8004b8e <_free_r+0x22>
 8004bd8:	d902      	bls.n	8004be0 <_free_r+0x74>
 8004bda:	230c      	movs	r3, #12
 8004bdc:	602b      	str	r3, [r5, #0]
 8004bde:	e7d6      	b.n	8004b8e <_free_r+0x22>
 8004be0:	6820      	ldr	r0, [r4, #0]
 8004be2:	1821      	adds	r1, r4, r0
 8004be4:	428b      	cmp	r3, r1
 8004be6:	bf04      	itt	eq
 8004be8:	6819      	ldreq	r1, [r3, #0]
 8004bea:	685b      	ldreq	r3, [r3, #4]
 8004bec:	6063      	str	r3, [r4, #4]
 8004bee:	bf04      	itt	eq
 8004bf0:	1809      	addeq	r1, r1, r0
 8004bf2:	6021      	streq	r1, [r4, #0]
 8004bf4:	6054      	str	r4, [r2, #4]
 8004bf6:	e7ca      	b.n	8004b8e <_free_r+0x22>
 8004bf8:	bd38      	pop	{r3, r4, r5, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20001bb0 	.word	0x20001bb0

08004c00 <__malloc_lock>:
 8004c00:	4801      	ldr	r0, [pc, #4]	@ (8004c08 <__malloc_lock+0x8>)
 8004c02:	f7ff bfa3 	b.w	8004b4c <__retarget_lock_acquire_recursive>
 8004c06:	bf00      	nop
 8004c08:	20001bac 	.word	0x20001bac

08004c0c <__malloc_unlock>:
 8004c0c:	4801      	ldr	r0, [pc, #4]	@ (8004c14 <__malloc_unlock+0x8>)
 8004c0e:	f7ff bf9e 	b.w	8004b4e <__retarget_lock_release_recursive>
 8004c12:	bf00      	nop
 8004c14:	20001bac 	.word	0x20001bac

08004c18 <_init>:
 8004c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1a:	bf00      	nop
 8004c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1e:	bc08      	pop	{r3}
 8004c20:	469e      	mov	lr, r3
 8004c22:	4770      	bx	lr

08004c24 <_fini>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	bf00      	nop
 8004c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2a:	bc08      	pop	{r3}
 8004c2c:	469e      	mov	lr, r3
 8004c2e:	4770      	bx	lr
