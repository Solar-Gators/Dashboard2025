
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f34c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000774  0800f4fc  0800f4fc  000104fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc70  0800fc70  0001108c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc70  0800fc70  00010c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc78  0800fc78  0001108c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fc78  0800fc78  00010c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800fc80  0800fc80  00010c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800fc88  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002aa4  2000008c  0800fd14  0001108c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002b30  0800fd14  00011b30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001108c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002de6c  00000000  00000000  000110bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057ad  00000000  00000000  0003ef28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002450  00000000  00000000  000446d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c5d  00000000  00000000  00046b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030a6a  00000000  00000000  00048785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b87c  00000000  00000000  000791ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012b538  00000000  00000000  000a4a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cffa3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2d4  00000000  00000000  001cffe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001da2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f4e4 	.word	0x0800f4e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	0800f4e4 	.word	0x0800f4e4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b96a 	b.w	8000db8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	460c      	mov	r4, r1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d14e      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b08:	4694      	mov	ip, r2
 8000b0a:	458c      	cmp	ip, r1
 8000b0c:	4686      	mov	lr, r0
 8000b0e:	fab2 f282 	clz	r2, r2
 8000b12:	d962      	bls.n	8000bda <__udivmoddi4+0xde>
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	4091      	lsls	r1, r2
 8000b1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b24:	4319      	orrs	r1, r3
 8000b26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2e:	fa1f f68c 	uxth.w	r6, ip
 8000b32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb04 f106 	mul.w	r1, r4, r6
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b52:	f080 8112 	bcs.w	8000d7a <__udivmoddi4+0x27e>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 810f 	bls.w	8000d7a <__udivmoddi4+0x27e>
 8000b5c:	3c02      	subs	r4, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a59      	subs	r1, r3, r1
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb00 f606 	mul.w	r6, r0, r6
 8000b76:	429e      	cmp	r6, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x94>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b82:	f080 80fc 	bcs.w	8000d7e <__udivmoddi4+0x282>
 8000b86:	429e      	cmp	r6, r3
 8000b88:	f240 80f9 	bls.w	8000d7e <__udivmoddi4+0x282>
 8000b8c:	4463      	add	r3, ip
 8000b8e:	3802      	subs	r0, #2
 8000b90:	1b9b      	subs	r3, r3, r6
 8000b92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b96:	2100      	movs	r1, #0
 8000b98:	b11d      	cbz	r5, 8000ba2 <__udivmoddi4+0xa6>
 8000b9a:	40d3      	lsrs	r3, r2
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d905      	bls.n	8000bb6 <__udivmoddi4+0xba>
 8000baa:	b10d      	cbz	r5, 8000bb0 <__udivmoddi4+0xb4>
 8000bac:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e7f5      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bb6:	fab3 f183 	clz	r1, r3
 8000bba:	2900      	cmp	r1, #0
 8000bbc:	d146      	bne.n	8000c4c <__udivmoddi4+0x150>
 8000bbe:	42a3      	cmp	r3, r4
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xcc>
 8000bc2:	4290      	cmp	r0, r2
 8000bc4:	f0c0 80f0 	bcc.w	8000da8 <__udivmoddi4+0x2ac>
 8000bc8:	1a86      	subs	r6, r0, r2
 8000bca:	eb64 0303 	sbc.w	r3, r4, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d0e6      	beq.n	8000ba2 <__udivmoddi4+0xa6>
 8000bd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bd8:	e7e3      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	f040 8090 	bne.w	8000d00 <__udivmoddi4+0x204>
 8000be0:	eba1 040c 	sub.w	r4, r1, ip
 8000be4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be8:	fa1f f78c 	uxth.w	r7, ip
 8000bec:	2101      	movs	r1, #1
 8000bee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfe:	fb07 f006 	mul.w	r0, r7, r6
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x11c>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x11a>
 8000c10:	4298      	cmp	r0, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2b4>
 8000c16:	4626      	mov	r6, r4
 8000c18:	1a1c      	subs	r4, r3, r0
 8000c1a:	fa1f f38e 	uxth.w	r3, lr
 8000c1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c22:	fb08 4410 	mls	r4, r8, r0, r4
 8000c26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2a:	fb00 f707 	mul.w	r7, r0, r7
 8000c2e:	429f      	cmp	r7, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x148>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x146>
 8000c3c:	429f      	cmp	r7, r3
 8000c3e:	f200 80b0 	bhi.w	8000da2 <__udivmoddi4+0x2a6>
 8000c42:	4620      	mov	r0, r4
 8000c44:	1bdb      	subs	r3, r3, r7
 8000c46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c4a:	e7a5      	b.n	8000b98 <__udivmoddi4+0x9c>
 8000c4c:	f1c1 0620 	rsb	r6, r1, #32
 8000c50:	408b      	lsls	r3, r1
 8000c52:	fa22 f706 	lsr.w	r7, r2, r6
 8000c56:	431f      	orrs	r7, r3
 8000c58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c60:	ea43 030c 	orr.w	r3, r3, ip
 8000c64:	40f4      	lsrs	r4, r6
 8000c66:	fa00 f801 	lsl.w	r8, r0, r1
 8000c6a:	0c38      	lsrs	r0, r7, #16
 8000c6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c70:	fbb4 fef0 	udiv	lr, r4, r0
 8000c74:	fa1f fc87 	uxth.w	ip, r7
 8000c78:	fb00 441e 	mls	r4, r0, lr, r4
 8000c7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c80:	fb0e f90c 	mul.w	r9, lr, ip
 8000c84:	45a1      	cmp	r9, r4
 8000c86:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x1a6>
 8000c8c:	193c      	adds	r4, r7, r4
 8000c8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c92:	f080 8084 	bcs.w	8000d9e <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8081 	bls.w	8000d9e <__udivmoddi4+0x2a2>
 8000c9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca0:	443c      	add	r4, r7
 8000ca2:	eba4 0409 	sub.w	r4, r4, r9
 8000ca6:	fa1f f983 	uxth.w	r9, r3
 8000caa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cae:	fb00 4413 	mls	r4, r0, r3, r4
 8000cb2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	d907      	bls.n	8000cce <__udivmoddi4+0x1d2>
 8000cbe:	193c      	adds	r4, r7, r4
 8000cc0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cc4:	d267      	bcs.n	8000d96 <__udivmoddi4+0x29a>
 8000cc6:	45a4      	cmp	ip, r4
 8000cc8:	d965      	bls.n	8000d96 <__udivmoddi4+0x29a>
 8000cca:	3b02      	subs	r3, #2
 8000ccc:	443c      	add	r4, r7
 8000cce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cd6:	eba4 040c 	sub.w	r4, r4, ip
 8000cda:	429c      	cmp	r4, r3
 8000cdc:	46ce      	mov	lr, r9
 8000cde:	469c      	mov	ip, r3
 8000ce0:	d351      	bcc.n	8000d86 <__udivmoddi4+0x28a>
 8000ce2:	d04e      	beq.n	8000d82 <__udivmoddi4+0x286>
 8000ce4:	b155      	cbz	r5, 8000cfc <__udivmoddi4+0x200>
 8000ce6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cea:	eb64 040c 	sbc.w	r4, r4, ip
 8000cee:	fa04 f606 	lsl.w	r6, r4, r6
 8000cf2:	40cb      	lsrs	r3, r1
 8000cf4:	431e      	orrs	r6, r3
 8000cf6:	40cc      	lsrs	r4, r1
 8000cf8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	e750      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f103 	lsr.w	r1, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d10:	4094      	lsls	r4, r2
 8000d12:	430c      	orrs	r4, r1
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1c:	fa1f f78c 	uxth.w	r7, ip
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3110 	mls	r1, r8, r0, r3
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f107 	mul.w	r1, r0, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x24c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d3e:	d22c      	bcs.n	8000d9a <__udivmoddi4+0x29e>
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d92a      	bls.n	8000d9a <__udivmoddi4+0x29e>
 8000d44:	3802      	subs	r0, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d50:	fb08 3311 	mls	r3, r8, r1, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb01 f307 	mul.w	r3, r1, r7
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x276>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d68:	d213      	bcs.n	8000d92 <__udivmoddi4+0x296>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d911      	bls.n	8000d92 <__udivmoddi4+0x296>
 8000d6e:	3902      	subs	r1, #2
 8000d70:	4464      	add	r4, ip
 8000d72:	1ae4      	subs	r4, r4, r3
 8000d74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d78:	e739      	b.n	8000bee <__udivmoddi4+0xf2>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	e6f0      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e706      	b.n	8000b90 <__udivmoddi4+0x94>
 8000d82:	45c8      	cmp	r8, r9
 8000d84:	d2ae      	bcs.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d8e:	3801      	subs	r0, #1
 8000d90:	e7a8      	b.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d92:	4631      	mov	r1, r6
 8000d94:	e7ed      	b.n	8000d72 <__udivmoddi4+0x276>
 8000d96:	4603      	mov	r3, r0
 8000d98:	e799      	b.n	8000cce <__udivmoddi4+0x1d2>
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	e7d4      	b.n	8000d48 <__udivmoddi4+0x24c>
 8000d9e:	46d6      	mov	lr, sl
 8000da0:	e77f      	b.n	8000ca2 <__udivmoddi4+0x1a6>
 8000da2:	4463      	add	r3, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	e74d      	b.n	8000c44 <__udivmoddi4+0x148>
 8000da8:	4606      	mov	r6, r0
 8000daa:	4623      	mov	r3, r4
 8000dac:	4608      	mov	r0, r1
 8000dae:	e70f      	b.n	8000bd0 <__udivmoddi4+0xd4>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	4463      	add	r3, ip
 8000db4:	e730      	b.n	8000c18 <__udivmoddi4+0x11c>
 8000db6:	bf00      	nop

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <_ZN14DashboardState5resetEv>:
#include "DashboardState.hpp"

void DashboardState::reset() {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    lightState = LIGHTS_NONE;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
    oldLightState = LIGHTS_NONE;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	709a      	strb	r2, [r3, #2]

    outputPortState = 0;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	70da      	strb	r2, [r3, #3]
    hornState = 0;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	711a      	strb	r2, [r3, #4]
    fanState = 0;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	715a      	strb	r2, [r3, #5]
    headlightState = 0;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	719a      	strb	r2, [r3, #6]
    pttState = 0;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	71da      	strb	r2, [r3, #7]
    displayState = 0;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	721a      	strb	r2, [r3, #8]

    bmsStatus = 0;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	741a      	strb	r2, [r3, #16]
    mcStatus = 0;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	745a      	strb	r2, [r3, #17]
    arrayStatus = 0;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	749a      	strb	r2, [r3, #18]
    direction = 0;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	74da      	strb	r2, [r3, #19]

    old_bmsStatus = 0;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	755a      	strb	r2, [r3, #21]
    old_mcStatus = 0;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	759a      	strb	r2, [r3, #22]
    old_arrayStatus = 0;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	75da      	strb	r2, [r3, #23]
    old_direction = 0;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	761a      	strb	r2, [r3, #24]

    uart_rx = 0;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	779a      	strb	r2, [r3, #30]
    old_uart_rx = 0;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	77da      	strb	r2, [r3, #31]
    updateRequested = 0;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <_ZN14DashboardState14updateFromUARTEv>:

// gets called only when something changes in the dashboard state
void DashboardState::updateFromUART() {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

    // uart data for lights (blinkers)
    if (uart_rx & BUTTON_HAZARD) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7f9b      	ldrb	r3, [r3, #30]
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <_ZN14DashboardState14updateFromUARTEv+0x1c>
        lightState = LIGHTS_HAZARD;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	701a      	strb	r2, [r3, #0]
 8000e5e:	e015      	b.n	8000e8c <_ZN14DashboardState14updateFromUARTEv+0x48>
    }
    else if (uart_rx & BUTTON_LEFT_TURN) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	7f9b      	ldrb	r3, [r3, #30]
 8000e64:	f003 0308 	and.w	r3, r3, #8
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <_ZN14DashboardState14updateFromUARTEv+0x30>
        lightState = LIGHTS_LEFT;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	e00b      	b.n	8000e8c <_ZN14DashboardState14updateFromUARTEv+0x48>
    }
    else if (uart_rx & BUTTON_RIGHT_TURN) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7f9b      	ldrb	r3, [r3, #30]
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	da03      	bge.n	8000e86 <_ZN14DashboardState14updateFromUARTEv+0x42>
        lightState = LIGHTS_RIGHT;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2202      	movs	r2, #2
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	e002      	b.n	8000e8c <_ZN14DashboardState14updateFromUARTEv+0x48>
    }
    else {
        lightState = LIGHTS_NONE;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
    }

    // if the light state has changed, reset the blink time and update the output port state
    if (oldLightState != lightState) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	789a      	ldrb	r2, [r3, #2]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d041      	beq.n	8000f1c <_ZN14DashboardState14updateFromUARTEv+0xd8>
        lastBlinkTime = HAL_GetTick(); // reset blink time if light state changes
 8000e98:	f003 fc5a 	bl	8004750 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60da      	str	r2, [r3, #12]
        oldLightState = lightState;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	781a      	ldrb	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	709a      	strb	r2, [r3, #2]
        if (lightState == LIGHTS_HAZARD) {
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d107      	bne.n	8000ec2 <_ZN14DashboardState14updateFromUARTEv+0x7e>
            outputPortState |= (OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	78db      	ldrb	r3, [r3, #3]
 8000eb6:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	70da      	strb	r2, [r3, #3]
 8000ec0:	e02c      	b.n	8000f1c <_ZN14DashboardState14updateFromUARTEv+0xd8>
        }
        else if (lightState == LIGHTS_LEFT) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d10e      	bne.n	8000ee8 <_ZN14DashboardState14updateFromUARTEv+0xa4>
            outputPortState |= OUTPUT_FL_LIGHT_CTRL;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	78db      	ldrb	r3, [r3, #3]
 8000ece:	f043 0320 	orr.w	r3, r3, #32
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	70da      	strb	r2, [r3, #3]
            outputPortState &= ~OUTPUT_FR_LIGHT_CTRL;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	78db      	ldrb	r3, [r3, #3]
 8000edc:	f023 0310 	bic.w	r3, r3, #16
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	70da      	strb	r2, [r3, #3]
 8000ee6:	e019      	b.n	8000f1c <_ZN14DashboardState14updateFromUARTEv+0xd8>
        }
        else if (lightState == LIGHTS_RIGHT) {
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d10e      	bne.n	8000f0e <_ZN14DashboardState14updateFromUARTEv+0xca>
            outputPortState |= OUTPUT_FR_LIGHT_CTRL;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	78db      	ldrb	r3, [r3, #3]
 8000ef4:	f043 0310 	orr.w	r3, r3, #16
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	70da      	strb	r2, [r3, #3]
            outputPortState &= ~OUTPUT_FL_LIGHT_CTRL;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	78db      	ldrb	r3, [r3, #3]
 8000f02:	f023 0320 	bic.w	r3, r3, #32
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	70da      	strb	r2, [r3, #3]
 8000f0c:	e006      	b.n	8000f1c <_ZN14DashboardState14updateFromUARTEv+0xd8>
        }
        else {
            outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	78db      	ldrb	r3, [r3, #3]
 8000f12:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	70da      	strb	r2, [r3, #3]
        }
    }

    // if headlight should be on  
    if (uart_rx & BUTTON_HEADLIGHTS) {
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7f9b      	ldrb	r3, [r3, #30]
 8000f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d00a      	beq.n	8000f3e <_ZN14DashboardState14updateFromUARTEv+0xfa>
        outputPortState |= (OUTPUT_R_HEAD_CTRL | OUTPUT_L_HEAD_CTRL);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	78db      	ldrb	r3, [r3, #3]
 8000f2c:	f043 030c 	orr.w	r3, r3, #12
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	70da      	strb	r2, [r3, #3]
        headlightState = 1;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	719a      	strb	r2, [r3, #6]
 8000f3c:	e009      	b.n	8000f52 <_ZN14DashboardState14updateFromUARTEv+0x10e>
    }
    else  {
        outputPortState &= ~(OUTPUT_R_HEAD_CTRL | OUTPUT_L_HEAD_CTRL);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	78db      	ldrb	r3, [r3, #3]
 8000f42:	f023 030c 	bic.w	r3, r3, #12
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	70da      	strb	r2, [r3, #3]
        headlightState = 0;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	719a      	strb	r2, [r3, #6]
    }

    // if horn should be on
    if (uart_rx & BUTTON_HORN) {
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7f9b      	ldrb	r3, [r3, #30]
 8000f56:	f003 0320 	and.w	r3, r3, #32
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00a      	beq.n	8000f74 <_ZN14DashboardState14updateFromUARTEv+0x130>
        outputPortState |= OUTPUT_HORN_CTRL;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	78db      	ldrb	r3, [r3, #3]
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	70da      	strb	r2, [r3, #3]
        hornState = 1;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	711a      	strb	r2, [r3, #4]
 8000f72:	e009      	b.n	8000f88 <_ZN14DashboardState14updateFromUARTEv+0x144>
    }
    else {
        outputPortState &= ~OUTPUT_HORN_CTRL;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	78db      	ldrb	r3, [r3, #3]
 8000f78:	f023 0302 	bic.w	r3, r3, #2
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	70da      	strb	r2, [r3, #3]
        hornState = 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	711a      	strb	r2, [r3, #4]
    }

    // if fan should be on
    if (uart_rx & BUTTON_FAN) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7f9b      	ldrb	r3, [r3, #30]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d00a      	beq.n	8000faa <_ZN14DashboardState14updateFromUARTEv+0x166>
        outputPortState |= OUTPUT_FAN_CTRL;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	78db      	ldrb	r3, [r3, #3]
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	70da      	strb	r2, [r3, #3]
        fanState = 1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	715a      	strb	r2, [r3, #5]
 8000fa8:	e009      	b.n	8000fbe <_ZN14DashboardState14updateFromUARTEv+0x17a>
    }
    else {
        outputPortState &= ~OUTPUT_FAN_CTRL;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	78db      	ldrb	r3, [r3, #3]
 8000fae:	f023 0301 	bic.w	r3, r3, #1
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	70da      	strb	r2, [r3, #3]
        fanState = 0;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	715a      	strb	r2, [r3, #5]
    }

    // if PTT should be on
    if (uart_rx & BUTTON_PTT) {
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7f9b      	ldrb	r3, [r3, #30]
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <_ZN14DashboardState14updateFromUARTEv+0x18e>
        pttState = 1;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	71da      	strb	r2, [r3, #7]
 8000fd0:	e002      	b.n	8000fd8 <_ZN14DashboardState14updateFromUARTEv+0x194>
    }
    else {
        pttState = 0;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	71da      	strb	r2, [r3, #7]
    }

    // TODO: do something with displayState cause this isn't setup to go anywhere
    if (uart_rx & BUTTON_DISPLAY) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7f9b      	ldrb	r3, [r3, #30]
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <_ZN14DashboardState14updateFromUARTEv+0x1a8>
        displayState = 1;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	721a      	strb	r2, [r3, #8]
    }
    else {
        displayState = 0;
    }

}
 8000fea:	e002      	b.n	8000ff2 <_ZN14DashboardState14updateFromUARTEv+0x1ae>
        displayState = 0;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	721a      	strb	r2, [r3, #8]
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>:

HAL_StatusTypeDef DashboardState::writeToPort(TCAL9538RSVR &U7) {
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
	uint8_t inverted = ~outputPortState;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	78db      	ldrb	r3, [r3, #3]
 8001008:	43db      	mvns	r3, r3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	73fb      	strb	r3, [r7, #15]
    return TCAL9538RSVR_SetOutput(&U7, &inverted); // write to output port
 800100e:	f107 030f 	add.w	r3, r7, #15
 8001012:	4619      	mov	r1, r3
 8001014:	6838      	ldr	r0, [r7, #0]
 8001016:	f003 fafb 	bl	8004610 <TCAL9538RSVR_SetOutput>
 800101a:	4603      	mov	r3, r0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <_ZN14DashboardState11blinkLightsEv>:

void DashboardState::blinkLights() {
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    switch (lightState) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b03      	cmp	r3, #3
 8001032:	d82b      	bhi.n	800108c <_ZN14DashboardState11blinkLightsEv+0x68>
 8001034:	a201      	add	r2, pc, #4	@ (adr r2, 800103c <_ZN14DashboardState11blinkLightsEv+0x18>)
 8001036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103a:	bf00      	nop
 800103c:	0800107d 	.word	0x0800107d
 8001040:	0800105d 	.word	0x0800105d
 8001044:	0800106d 	.word	0x0800106d
 8001048:	0800104d 	.word	0x0800104d
        case LIGHTS_HAZARD:
            outputPortState ^= (OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	78db      	ldrb	r3, [r3, #3]
 8001050:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	70da      	strb	r2, [r3, #3]
            break;
 800105a:	e017      	b.n	800108c <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_LEFT:
            outputPortState ^= OUTPUT_FL_LIGHT_CTRL;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	78db      	ldrb	r3, [r3, #3]
 8001060:	f083 0320 	eor.w	r3, r3, #32
 8001064:	b2da      	uxtb	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	70da      	strb	r2, [r3, #3]
            break;
 800106a:	e00f      	b.n	800108c <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_RIGHT:
            outputPortState ^= OUTPUT_FR_LIGHT_CTRL;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	78db      	ldrb	r3, [r3, #3]
 8001070:	f083 0310 	eor.w	r3, r3, #16
 8001074:	b2da      	uxtb	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	70da      	strb	r2, [r3, #3]
            break;
 800107a:	e007      	b.n	800108c <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_NONE:
            outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	78db      	ldrb	r3, [r3, #3]
 8001080:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001084:	b2da      	uxtb	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	70da      	strb	r2, [r3, #3]
            break;
 800108a:	bf00      	nop
    }
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <_ZN14DashboardState18getSuppBattVoltageEv>:

float DashboardState::getSuppBattVoltage() {
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    // convert to votls from mV
    uint16_t voltage = (supp_batt_voltage_msb << 8) | supp_batt_voltage_lsb;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	81fb      	strh	r3, [r7, #14]
    return (float)voltage / 1000.0f;
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	ee07 3a90 	vmov	s15, r3
 80010be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010c2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80010dc <_ZN14DashboardState18getSuppBattVoltageEv+0x44>
 80010c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010ca:	eef0 7a66 	vmov.f32	s15, s13
}
 80010ce:	eeb0 0a67 	vmov.f32	s0, s15
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	447a0000 	.word	0x447a0000

080010e0 <_ZN14DashboardState13getMotorPowerEv>:

float DashboardState::getMotorPower() {
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    // P = V * I
    uint16_t temp;

    // voltage (encoded in 0.5V)
    temp = (motor_voltage_msb << 8) | motor_voltage_lsb;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	827b      	strh	r3, [r7, #18]
    float voltage = (float)temp / 2.0f;
 8001100:	8a7b      	ldrh	r3, [r7, #18]
 8001102:	ee07 3a90 	vmov	s15, r3
 8001106:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800110a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800110e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001112:	edc7 7a03 	vstr	s15, [r7, #12]

    // current (encoded in 1A)
    temp = (motor_current_msb << 8) | motor_current_lsb;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	b21a      	sxth	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001126:	b21b      	sxth	r3, r3
 8001128:	4313      	orrs	r3, r2
 800112a:	b21b      	sxth	r3, r3
 800112c:	827b      	strh	r3, [r7, #18]
    float current = (float)temp;
 800112e:	8a7b      	ldrh	r3, [r7, #18]
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001138:	edc7 7a05 	vstr	s15, [r7, #20]

    if (!motor_current_direction) {
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001142:	2b00      	cmp	r3, #0
 8001144:	d105      	bne.n	8001152 <_ZN14DashboardState13getMotorPowerEv+0x72>
        current *= -1.0f;
 8001146:	edd7 7a05 	vldr	s15, [r7, #20]
 800114a:	eef1 7a67 	vneg.f32	s15, s15
 800114e:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    return voltage * current;
 8001152:	ed97 7a03 	vldr	s14, [r7, #12]
 8001156:	edd7 7a05 	vldr	s15, [r7, #20]
 800115a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800115e:	eeb0 0a67 	vmov.f32	s0, s15
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	0000      	movs	r0, r0
	...

08001170 <_ZN14DashboardState11getCarSpeedEv>:

float DashboardState::getCarSpeed() {
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	@ 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    uint32_t motor_rpm = (motor_rpm_msb << 8) | motor_rpm_lsb;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8001186:	4313      	orrs	r3, r2
 8001188:	627b      	str	r3, [r7, #36]	@ 0x24
    // convert to m/s from rpm
    double inches_per_sec = (motor_rpm * WHEEL_CIRCUMFERENCE_IN) / 60;
 800118a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800118c:	f7ff f9c2 	bl	8000514 <__aeabi_ui2d>
 8001190:	a31e      	add	r3, pc, #120	@ (adr r3, 800120c <_ZN14DashboardState11getCarSpeedEv+0x9c>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fa37 	bl	8000608 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <_ZN14DashboardState11getCarSpeedEv+0x98>)
 80011a8:	f7ff fb58 	bl	800085c <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double miles_per_sec = inches_per_sec / 63360; // 1 mile = 63360 inches
 80011b4:	a310      	add	r3, pc, #64	@ (adr r3, 80011f8 <_ZN14DashboardState11getCarSpeedEv+0x88>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011be:	f7ff fb4d 	bl	800085c <__aeabi_ddiv>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    float miles_per_hour = (miles_per_sec * 3600); // 1 hour = 3600 seconds
 80011ca:	a30d      	add	r3, pc, #52	@ (adr r3, 8001200 <_ZN14DashboardState11getCarSpeedEv+0x90>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011d4:	f7ff fa18 	bl	8000608 <__aeabi_dmul>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fc24 	bl	8000a2c <__aeabi_d2f>
 80011e4:	4603      	mov	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]
    return miles_per_hour;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	ee07 3a90 	vmov	s15, r3
}
 80011ee:	eeb0 0a67 	vmov.f32	s0, s15
 80011f2:	3728      	adds	r7, #40	@ 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	00000000 	.word	0x00000000
 80011fc:	40eef000 	.word	0x40eef000
 8001200:	00000000 	.word	0x00000000
 8001204:	40ac2000 	.word	0x40ac2000
 8001208:	404e0000 	.word	0x404e0000
 800120c:	147ae148 	.word	0x147ae148
 8001210:	405147ae 	.word	0x405147ae

08001214 <CPP_UserSetup>:

DashboardState dashboardState; // Dashboard state object

ILI9341 screen(320, 240);

void CPP_UserSetup(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af02      	add	r7, sp, #8
    // Make sure that timer priorities are configured correctly
    HAL_Delay(10);
 800121a:	200a      	movs	r0, #10
 800121c:	f003 faa4 	bl	8004768 <HAL_Delay>

	dashboardState.reset(); // reset dashboard state
 8001220:	483b      	ldr	r0, [pc, #236]	@ (8001310 <CPP_UserSetup+0xfc>)
 8001222:	f7ff fdcb 	bl	8000dbc <_ZN14DashboardState5resetEv>

    dma_flag = 0;
 8001226:	4b3b      	ldr	r3, [pc, #236]	@ (8001314 <CPP_UserSetup+0x100>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
    cc_enable = 0;
 800122c:	4b3a      	ldr	r3, [pc, #232]	@ (8001318 <CPP_UserSetup+0x104>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]

	// -------------------------
	// CAN INIT
	// -------------------------
	Init_CAN_Filter1(hcan1); // set up CAN filter for CAN1
 8001232:	483a      	ldr	r0, [pc, #232]	@ (800131c <CPP_UserSetup+0x108>)
 8001234:	f000 fed6 	bl	8001fe4 <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef>
	HAL_CAN_Start(&hcan1); // start CAN1
 8001238:	4838      	ldr	r0, [pc, #224]	@ (800131c <CPP_UserSetup+0x108>)
 800123a:	f005 f869 	bl	8006310 <HAL_CAN_Start>
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800123e:	2102      	movs	r1, #2
 8001240:	4836      	ldr	r0, [pc, #216]	@ (800131c <CPP_UserSetup+0x108>)
 8001242:	f005 fad0 	bl	80067e6 <HAL_CAN_ActivateNotification>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	bf14      	ite	ne
 800124c:	2301      	movne	r3, #1
 800124e:	2300      	moveq	r3, #0
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <CPP_UserSetup+0x46>
	{
		Error_Handler();
 8001256:	f001 fd6d 	bl	8002d34 <Error_Handler>

	// -------------------------
	// GPIO EXPANDERS INIT
	// -------------------------

    if (TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0xFF, 0x00) != HAL_OK) { Error_Handler(); } // inputs
 800125a:	2300      	movs	r3, #0
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	23ff      	movs	r3, #255	@ 0xff
 8001260:	2202      	movs	r2, #2
 8001262:	492f      	ldr	r1, [pc, #188]	@ (8001320 <CPP_UserSetup+0x10c>)
 8001264:	482f      	ldr	r0, [pc, #188]	@ (8001324 <CPP_UserSetup+0x110>)
 8001266:	f003 f916 	bl	8004496 <TCAL9538RSVR_INIT>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf14      	ite	ne
 8001270:	2301      	movne	r3, #1
 8001272:	2300      	moveq	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <CPP_UserSetup+0x6a>
 800127a:	f001 fd5b 	bl	8002d34 <Error_Handler>
    if (TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0xFF, 0x00) != HAL_OK) { Error_Handler(); }
 800127e:	2300      	movs	r3, #0
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	23ff      	movs	r3, #255	@ 0xff
 8001284:	2201      	movs	r2, #1
 8001286:	4926      	ldr	r1, [pc, #152]	@ (8001320 <CPP_UserSetup+0x10c>)
 8001288:	4827      	ldr	r0, [pc, #156]	@ (8001328 <CPP_UserSetup+0x114>)
 800128a:	f003 f904 	bl	8004496 <TCAL9538RSVR_INIT>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf14      	ite	ne
 8001294:	2301      	movne	r3, #1
 8001296:	2300      	moveq	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <CPP_UserSetup+0x8e>
 800129e:	f001 fd49 	bl	8002d34 <Error_Handler>
    if (TCAL9538RSVR_INIT(&U7, &hi2c4, 0x00, 0b00000000, 0b00000000) != HAL_OK) { Error_Handler(); } // output
 80012a2:	2300      	movs	r3, #0
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2300      	movs	r3, #0
 80012a8:	2200      	movs	r2, #0
 80012aa:	491d      	ldr	r1, [pc, #116]	@ (8001320 <CPP_UserSetup+0x10c>)
 80012ac:	481f      	ldr	r0, [pc, #124]	@ (800132c <CPP_UserSetup+0x118>)
 80012ae:	f003 f8f2 	bl	8004496 <TCAL9538RSVR_INIT>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bf14      	ite	ne
 80012b8:	2301      	movne	r3, #1
 80012ba:	2300      	moveq	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <CPP_UserSetup+0xb2>
 80012c2:	f001 fd37 	bl	8002d34 <Error_Handler>

    // set outputs to low to start
	if (dashboardState.writeToPort(U7) != HAL_OK) { Error_Handler(); }
 80012c6:	4919      	ldr	r1, [pc, #100]	@ (800132c <CPP_UserSetup+0x118>)
 80012c8:	4811      	ldr	r0, [pc, #68]	@ (8001310 <CPP_UserSetup+0xfc>)
 80012ca:	f7ff fe96 	bl	8000ffa <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bf14      	ite	ne
 80012d4:	2301      	movne	r3, #1
 80012d6:	2300      	moveq	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <CPP_UserSetup+0xce>
 80012de:	f001 fd29 	bl	8002d34 <Error_Handler>

	// Set up UART4 for receiving data from the steering wheel
	HAL_UART_Receive_IT(&huart4, &dashboardState.uart_rx, 1); // enable uart interrupt
 80012e2:	2201      	movs	r2, #1
 80012e4:	4912      	ldr	r1, [pc, #72]	@ (8001330 <CPP_UserSetup+0x11c>)
 80012e6:	4813      	ldr	r0, [pc, #76]	@ (8001334 <CPP_UserSetup+0x120>)
 80012e8:	f009 f95e 	bl	800a5a8 <HAL_UART_Receive_IT>

	// -------------------------
	// SCREEN INIT 
	// -------------------------
	
	HAL_Delay(100); // wait for screen to power on
 80012ec:	2064      	movs	r0, #100	@ 0x64
 80012ee:	f003 fa3b 	bl	8004768 <HAL_Delay>
    screen.Init();
 80012f2:	4811      	ldr	r0, [pc, #68]	@ (8001338 <CPP_UserSetup+0x124>)
 80012f4:	f002 f9ea 	bl	80036cc <_ZN7ILI93414InitEv>
    screen.SetRotation(3);
 80012f8:	2103      	movs	r1, #3
 80012fa:	480f      	ldr	r0, [pc, #60]	@ (8001338 <CPP_UserSetup+0x124>)
 80012fc:	f002 fd70 	bl	8003de0 <_ZN7ILI934111SetRotationEh>
    screen.ClearScreen(RGB565_WHITE);
 8001300:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001304:	480c      	ldr	r0, [pc, #48]	@ (8001338 <CPP_UserSetup+0x124>)
 8001306:	f002 fca0 	bl	8003c4a <_ZN7ILI934111ClearScreenEt>
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000000 	.word	0x20000000
 8001314:	200000d4 	.word	0x200000d4
 8001318:	200000d5 	.word	0x200000d5
 800131c:	200001fc 	.word	0x200001fc
 8001320:	2000024c 	.word	0x2000024c
 8001324:	200000a8 	.word	0x200000a8
 8001328:	200000b0 	.word	0x200000b0
 800132c:	200000b8 	.word	0x200000b8
 8001330:	2000001e 	.word	0x2000001e
 8001334:	20000398 	.word	0x20000398
 8001338:	200000d8 	.word	0x200000d8

0800133c <_Z11StartTask01Pv>:


void StartTask01(void *argument)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08e      	sub	sp, #56	@ 0x38
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = { 0 };
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]

	TxHeader.IDE = CAN_ID_EXT;
 8001350:	2304      	movs	r3, #4
 8001352:	623b      	str	r3, [r7, #32]
	TxHeader.ExtId = CAN_ID_MITSUBA_MOTOR_REQUEST;
 8001354:	4b1d      	ldr	r3, [pc, #116]	@ (80013cc <_Z11StartTask01Pv+0x90>)
 8001356:	61fb      	str	r3, [r7, #28]
	TxHeader.RTR = CAN_RTR_DATA;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.DLC = 1;
 800135c:	2301      	movs	r3, #1
 800135e:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxData[0] = 1; // bit 0 = request for frame 0
 8001360:	2301      	movs	r3, #1
 8001362:	743b      	strb	r3, [r7, #16]

  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8001364:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001368:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800136c:	f006 f992 	bl	8007694 <HAL_GPIO_TogglePin>
	// also send can message to request frame 0 from mitsuba motor

	int wait = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	637b      	str	r3, [r7, #52]	@ 0x34
	while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) && wait++ < 10000)
 8001374:	e002      	b.n	800137c <_Z11StartTask01Pv+0x40>
		osDelay(1);
 8001376:	2001      	movs	r0, #1
 8001378:	f00a fd48 	bl	800be0c <osDelay>
	while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) && wait++ < 10000)
 800137c:	4814      	ldr	r0, [pc, #80]	@ (80013d0 <_Z11StartTask01Pv+0x94>)
 800137e:	f005 f8db 	bl	8006538 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d108      	bne.n	800139a <_Z11StartTask01Pv+0x5e>
 8001388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	637a      	str	r2, [r7, #52]	@ 0x34
 800138e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001392:	4293      	cmp	r3, r2
 8001394:	dc01      	bgt.n	800139a <_Z11StartTask01Pv+0x5e>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <_Z11StartTask01Pv+0x60>
 800139a:	2300      	movs	r3, #0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1ea      	bne.n	8001376 <_Z11StartTask01Pv+0x3a>
	HAL_StatusTypeDef status;
	status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	f107 0210 	add.w	r2, r7, #16
 80013a8:	f107 0118 	add.w	r1, r7, #24
 80013ac:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <_Z11StartTask01Pv+0x94>)
 80013ae:	f004 fff3 	bl	8006398 <HAL_CAN_AddTxMessage>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	if (status == HAL_ERROR)
 80013b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <_Z11StartTask01Pv+0x88>
	{
		Error_Handler();
 80013c0:	f001 fcb8 	bl	8002d34 <Error_Handler>
	}

    osDelay(200);
 80013c4:	20c8      	movs	r0, #200	@ 0xc8
 80013c6:	f00a fd21 	bl	800be0c <osDelay>
  }
 80013ca:	e7cb      	b.n	8001364 <_Z11StartTask01Pv+0x28>
 80013cc:	08f89540 	.word	0x08f89540
 80013d0:	200001fc 	.word	0x200001fc

080013d4 <_Z11StartTask02Pv>:
  /* USER CODE END 5 */
}

void StartTask02(void *argument)
{
 80013d4:	b5b0      	push	{r4, r5, r7, lr}
 80013d6:	b094      	sub	sp, #80	@ 0x50
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

	uint16_t adc_var_avg = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

	int HAL_CAN_BUSY = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint64_t messages_sent = 0;
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	static uint8_t update_cc = 0;

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
	uint32_t TxMailbox = { 0 };
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.StdId = 0x0; // 11 bit Identifier
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8001406:	2300      	movs	r3, #0
 8001408:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxHeader.DLC = 8; // 8 bytes being transmitted
 800140a:	2308      	movs	r3, #8
 800140c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	TxData[0] = 1;
 800140e:	2301      	movs	r3, #1
 8001410:	753b      	strb	r3, [r7, #20]
	uint8_t adc_data[2];



  	  // Transmit over CAN
  	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	f107 0214 	add.w	r2, r7, #20
 800141a:	f107 011c 	add.w	r1, r7, #28
 800141e:	484e      	ldr	r0, [pc, #312]	@ (8001558 <_Z11StartTask02Pv+0x184>)
 8001420:	f004 ffba 	bl	8006398 <HAL_CAN_AddTxMessage>


  for (;;)
  {

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8001424:	220a      	movs	r2, #10
 8001426:	494d      	ldr	r1, [pc, #308]	@ (800155c <_Z11StartTask02Pv+0x188>)
 8001428:	484d      	ldr	r0, [pc, #308]	@ (8001560 <_Z11StartTask02Pv+0x18c>)
 800142a:	f003 fd4b 	bl	8004ec4 <HAL_ADC_Start_DMA>
	// Start ADC with DMA
	while (!(dma_flag));
 800142e:	bf00      	nop
 8001430:	4b4c      	ldr	r3, [pc, #304]	@ (8001564 <_Z11StartTask02Pv+0x190>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	bf0c      	ite	eq
 800143a:	2301      	moveq	r3, #1
 800143c:	2300      	movne	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f5      	bne.n	8001430 <_Z11StartTask02Pv+0x5c>

	// Stop ADC with DMA
	HAL_ADC_Stop_DMA(&hadc1);
 8001444:	4846      	ldr	r0, [pc, #280]	@ (8001560 <_Z11StartTask02Pv+0x18c>)
 8001446:	f003 fdf9 	bl	800503c <HAL_ADC_Stop_DMA>
	dma_flag = 0;
 800144a:	4b46      	ldr	r3, [pc, #280]	@ (8001564 <_Z11StartTask02Pv+0x190>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
	adc_var_avg = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	// Copy ADC buffer and compute average
	for (int i = 0; i < ADC_BUF_LEN; i++)
 8001456:	2300      	movs	r3, #0
 8001458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800145a:	e00b      	b.n	8001474 <_Z11StartTask02Pv+0xa0>
	{
		adc_var_avg += adc_buf[i];
 800145c:	4a3f      	ldr	r2, [pc, #252]	@ (800155c <_Z11StartTask02Pv+0x188>)
 800145e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001460:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001464:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001468:	4413      	add	r3, r2
 800146a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	for (int i = 0; i < ADC_BUF_LEN; i++)
 800146e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001470:	3301      	adds	r3, #1
 8001472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001476:	2b09      	cmp	r3, #9
 8001478:	ddf0      	ble.n	800145c <_Z11StartTask02Pv+0x88>
	}
	adc_var_avg /= ADC_BUF_LEN;
 800147a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800147e:	4a3a      	ldr	r2, [pc, #232]	@ (8001568 <_Z11StartTask02Pv+0x194>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	08db      	lsrs	r3, r3, #3
 8001486:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e


	adc_data[0] = adc_var_avg & 0xFF;
 800148a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800148e:	b2db      	uxtb	r3, r3
 8001490:	733b      	strb	r3, [r7, #12]
	adc_data[1] = (adc_var_avg >> 8) & 0x0F;
 8001492:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	f003 030f 	and.w	r3, r3, #15
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	737b      	strb	r3, [r7, #13]

	if (cc_enable)
 80014a4:	4b31      	ldr	r3, [pc, #196]	@ (800156c <_Z11StartTask02Pv+0x198>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00b      	beq.n	80014c4 <_Z11StartTask02Pv+0xf0>
	{
		if (update_cc)
 80014ac:	4b30      	ldr	r3, [pc, #192]	@ (8001570 <_Z11StartTask02Pv+0x19c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00e      	beq.n	80014d2 <_Z11StartTask02Pv+0xfe>
		{
			TxData[5] = adc_data[0];
 80014b4:	7b3b      	ldrb	r3, [r7, #12]
 80014b6:	767b      	strb	r3, [r7, #25]
			TxData[6] = adc_data[1];
 80014b8:	7b7b      	ldrb	r3, [r7, #13]
 80014ba:	76bb      	strb	r3, [r7, #26]
			update_cc = 0;
 80014bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001570 <_Z11StartTask02Pv+0x19c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
 80014c2:	e006      	b.n	80014d2 <_Z11StartTask02Pv+0xfe>
		}
	}
	else
	{
		TxData[5] = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	767b      	strb	r3, [r7, #25]
		TxData[6] = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	76bb      	strb	r3, [r7, #26]
		update_cc = 1;
 80014cc:	4b28      	ldr	r3, [pc, #160]	@ (8001570 <_Z11StartTask02Pv+0x19c>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
	}


	TxData[0] = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	753b      	strb	r3, [r7, #20]
	TxData[1] = adc_data[0];
 80014d6:	7b3b      	ldrb	r3, [r7, #12]
 80014d8:	757b      	strb	r3, [r7, #21]
	TxData[2] = adc_data[1];
 80014da:	7b7b      	ldrb	r3, [r7, #13]
 80014dc:	75bb      	strb	r3, [r7, #22]
    // Wait until the ADC DMA completes
	  // Send CAN messages
	  int wait = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	63bb      	str	r3, [r7, #56]	@ 0x38
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) && wait++ < 10000)
 80014e2:	e002      	b.n	80014ea <_Z11StartTask02Pv+0x116>
		osDelay(1);
 80014e4:	2001      	movs	r0, #1
 80014e6:	f00a fc91 	bl	800be0c <osDelay>
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) && wait++ < 10000)
 80014ea:	481b      	ldr	r0, [pc, #108]	@ (8001558 <_Z11StartTask02Pv+0x184>)
 80014ec:	f005 f824 	bl	8006538 <HAL_CAN_GetTxMailboxesFreeLevel>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d108      	bne.n	8001508 <_Z11StartTask02Pv+0x134>
 80014f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	63ba      	str	r2, [r7, #56]	@ 0x38
 80014fc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001500:	4293      	cmp	r3, r2
 8001502:	dc01      	bgt.n	8001508 <_Z11StartTask02Pv+0x134>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <_Z11StartTask02Pv+0x136>
 8001508:	2300      	movs	r3, #0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ea      	bne.n	80014e4 <_Z11StartTask02Pv+0x110>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	f107 0214 	add.w	r2, r7, #20
 8001516:	f107 011c 	add.w	r1, r7, #28
 800151a:	480f      	ldr	r0, [pc, #60]	@ (8001558 <_Z11StartTask02Pv+0x184>)
 800151c:	f004 ff3c 	bl	8006398 <HAL_CAN_AddTxMessage>
 8001520:	4603      	mov	r3, r0
 8001522:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  messages_sent++;
 8001526:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800152a:	1c54      	adds	r4, r2, #1
 800152c:	f143 0500 	adc.w	r5, r3, #0
 8001530:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
	  if (status == HAL_ERROR)
 8001534:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001538:	2b01      	cmp	r3, #1
 800153a:	d102      	bne.n	8001542 <_Z11StartTask02Pv+0x16e>
	  {
		  Error_Handler();
 800153c:	f001 fbfa 	bl	8002d34 <Error_Handler>
 8001540:	e006      	b.n	8001550 <_Z11StartTask02Pv+0x17c>
	  }
	  else if (status == HAL_BUSY)
 8001542:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001546:	2b02      	cmp	r3, #2
 8001548:	d102      	bne.n	8001550 <_Z11StartTask02Pv+0x17c>
	  {
		  HAL_CAN_BUSY++;
 800154a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800154c:	3301      	adds	r3, #1
 800154e:	64bb      	str	r3, [r7, #72]	@ 0x48
	  }
    osDelay(20);
 8001550:	2014      	movs	r0, #20
 8001552:	f00a fc5b 	bl	800be0c <osDelay>
  }
 8001556:	e765      	b.n	8001424 <_Z11StartTask02Pv+0x50>
 8001558:	200001fc 	.word	0x200001fc
 800155c:	200000c0 	.word	0x200000c0
 8001560:	2000014c 	.word	0x2000014c
 8001564:	200000d4 	.word	0x200000d4
 8001568:	cccccccd 	.word	0xcccccccd
 800156c:	200000d5 	.word	0x200000d5
 8001570:	20000148 	.word	0x20000148

08001574 <_Z11StartTask03Pv>:
  /* USER CODE END StartTask02 */
}

void StartTask03(void *argument)
{
 8001574:	b5b0      	push	{r4, r5, r7, lr}
 8001576:	b092      	sub	sp, #72	@ 0x48
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */

	int debounce_count = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	647b      	str	r3, [r7, #68]	@ 0x44
	int HAL_CAN_BUSY = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	643b      	str	r3, [r7, #64]	@ 0x40
	uint64_t messages_sent = 0;
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = { 0 };
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x7FF; // 11 bit Identifier !!Change!! lol still need to change
 80015a0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80015a4:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.DLC = 8; // 8 bytes being transmitted
 80015aa:	2308      	movs	r3, #8
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxData[0] = 1;
 80015ae:	2301      	movs	r3, #1
 80015b0:	743b      	strb	r3, [r7, #16]

	Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 80015b2:	f107 0310 	add.w	r3, r7, #16
 80015b6:	4a46      	ldr	r2, [pc, #280]	@ (80016d0 <_Z11StartTask03Pv+0x15c>)
 80015b8:	4946      	ldr	r1, [pc, #280]	@ (80016d4 <_Z11StartTask03Pv+0x160>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fb9e 	bl	8001cfc <_Z19Update_CAN_Message1PhS_S_>

	/* Infinite loop */
	for(;;)
	{
	  // Read TCAL Input and update flags
	  if (GPIO_Interrupt_Triggered)
 80015c0:	4b45      	ldr	r3, [pc, #276]	@ (80016d8 <_Z11StartTask03Pv+0x164>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d033      	beq.n	8001630 <_Z11StartTask03Pv+0xbc>
	  {
		  if (debounce_count++ <= 2) {continue;}
 80015c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	647a      	str	r2, [r7, #68]	@ 0x44
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	bfd4      	ite	le
 80015d2:	2301      	movle	r3, #1
 80015d4:	2300      	movgt	r3, #0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d176      	bne.n	80016ca <_Z11StartTask03Pv+0x156>
		  DASHBOARD_CRITICAL(
 80015dc:	f00c ff5c 	bl	800e498 <vPortEnterCritical>
 80015e0:	483e      	ldr	r0, [pc, #248]	@ (80016dc <_Z11StartTask03Pv+0x168>)
 80015e2:	f002 ffde 	bl	80045a2 <TCAL9538RSVR_HandleInterrupt>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	bf14      	ite	ne
 80015ec:	2301      	movne	r3, #1
 80015ee:	2300      	moveq	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <_Z11StartTask03Pv+0x86>
 80015f6:	f001 fb9d 	bl	8002d34 <Error_Handler>
 80015fa:	4839      	ldr	r0, [pc, #228]	@ (80016e0 <_Z11StartTask03Pv+0x16c>)
 80015fc:	f002 ffd1 	bl	80045a2 <TCAL9538RSVR_HandleInterrupt>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf14      	ite	ne
 8001606:	2301      	movne	r3, #1
 8001608:	2300      	moveq	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <_Z11StartTask03Pv+0xa0>
 8001610:	f001 fb90 	bl	8002d34 <Error_Handler>
 8001614:	f00c ff72 	bl	800e4fc <vPortExitCritical>
		  	if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK) { Error_Handler(); }
		  	if (TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK){ Error_Handler(); }
		  );

		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	4a2c      	ldr	r2, [pc, #176]	@ (80016d0 <_Z11StartTask03Pv+0x15c>)
 800161e:	492d      	ldr	r1, [pc, #180]	@ (80016d4 <_Z11StartTask03Pv+0x160>)
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fb6b 	bl	8001cfc <_Z19Update_CAN_Message1PhS_S_>
		  GPIO_Interrupt_Triggered = 0;
 8001626:	4b2c      	ldr	r3, [pc, #176]	@ (80016d8 <_Z11StartTask03Pv+0x164>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
		  debounce_count = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	647b      	str	r3, [r7, #68]	@ 0x44
	  }

	  if (dashboardState.update_can_message_1) {
 8001630:	4b2c      	ldr	r3, [pc, #176]	@ (80016e4 <_Z11StartTask03Pv+0x170>)
 8001632:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00a      	beq.n	8001650 <_Z11StartTask03Pv+0xdc>
		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	4a24      	ldr	r2, [pc, #144]	@ (80016d0 <_Z11StartTask03Pv+0x15c>)
 8001640:	4924      	ldr	r1, [pc, #144]	@ (80016d4 <_Z11StartTask03Pv+0x160>)
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fb5a 	bl	8001cfc <_Z19Update_CAN_Message1PhS_S_>
		  dashboardState.update_can_message_1 = 0;
 8001648:	4b26      	ldr	r3, [pc, #152]	@ (80016e4 <_Z11StartTask03Pv+0x170>)
 800164a:	2200      	movs	r2, #0
 800164c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	  }

	  // Send CAN messages
	  int wait = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	637b      	str	r3, [r7, #52]	@ 0x34
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) && wait++ < 10000)
 8001654:	e002      	b.n	800165c <_Z11StartTask03Pv+0xe8>
 		osDelay(1);
 8001656:	2001      	movs	r0, #1
 8001658:	f00a fbd8 	bl	800be0c <osDelay>
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) && wait++ < 10000)
 800165c:	4822      	ldr	r0, [pc, #136]	@ (80016e8 <_Z11StartTask03Pv+0x174>)
 800165e:	f004 ff6b 	bl	8006538 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d108      	bne.n	800167a <_Z11StartTask03Pv+0x106>
 8001668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	637a      	str	r2, [r7, #52]	@ 0x34
 800166e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001672:	4293      	cmp	r3, r2
 8001674:	dc01      	bgt.n	800167a <_Z11StartTask03Pv+0x106>
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <_Z11StartTask03Pv+0x108>
 800167a:	2300      	movs	r3, #0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1ea      	bne.n	8001656 <_Z11StartTask03Pv+0xe2>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	f107 0210 	add.w	r2, r7, #16
 8001688:	f107 0118 	add.w	r1, r7, #24
 800168c:	4816      	ldr	r0, [pc, #88]	@ (80016e8 <_Z11StartTask03Pv+0x174>)
 800168e:	f004 fe83 	bl	8006398 <HAL_CAN_AddTxMessage>
 8001692:	4603      	mov	r3, r0
 8001694:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	  messages_sent++;
 8001698:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800169c:	1c54      	adds	r4, r2, #1
 800169e:	f143 0500 	adc.w	r5, r3, #0
 80016a2:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
	  if (status == HAL_ERROR)
 80016a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d102      	bne.n	80016b4 <_Z11StartTask03Pv+0x140>
	  {
		  Error_Handler();
 80016ae:	f001 fb41 	bl	8002d34 <Error_Handler>
 80016b2:	e006      	b.n	80016c2 <_Z11StartTask03Pv+0x14e>
	  }
	  else if (status == HAL_BUSY)
 80016b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d102      	bne.n	80016c2 <_Z11StartTask03Pv+0x14e>
	  {
		  HAL_CAN_BUSY++;
 80016bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016be:	3301      	adds	r3, #1
 80016c0:	643b      	str	r3, [r7, #64]	@ 0x40
	  }
	  osDelay(50);
 80016c2:	2032      	movs	r0, #50	@ 0x32
 80016c4:	f00a fba2 	bl	800be0c <osDelay>
 80016c8:	e77a      	b.n	80015c0 <_Z11StartTask03Pv+0x4c>
		  if (debounce_count++ <= 2) {continue;}
 80016ca:	bf00      	nop
  }
 80016cc:	e778      	b.n	80015c0 <_Z11StartTask03Pv+0x4c>
 80016ce:	bf00      	nop
 80016d0:	200000b5 	.word	0x200000b5
 80016d4:	200000ad 	.word	0x200000ad
 80016d8:	200000d6 	.word	0x200000d6
 80016dc:	200000a8 	.word	0x200000a8
 80016e0:	200000b0 	.word	0x200000b0
 80016e4:	20000000 	.word	0x20000000
 80016e8:	200001fc 	.word	0x200001fc

080016ec <_Z11StartTask04Pv>:
  /* USER CODE END StartTask03 */
}


void StartTask04(void *argument)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */

  dashboardState.lastBlinkTime = HAL_GetTick(); // initialize last blink time
 80016f4:	f003 f82c 	bl	8004750 <HAL_GetTick>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4a20      	ldr	r2, [pc, #128]	@ (800177c <_Z11StartTask04Pv+0x90>)
 80016fc:	60d3      	str	r3, [r2, #12]

  /* Infinite loop */
  for(;;)
  {

    uint32_t currentTick = HAL_GetTick();
 80016fe:	f003 f827 	bl	8004750 <HAL_GetTick>
 8001702:	60f8      	str	r0, [r7, #12]

    if (currentTick - dashboardState.lastBlinkTime > BLINK_INTERVAL_MS)
 8001704:	4b1d      	ldr	r3, [pc, #116]	@ (800177c <_Z11StartTask04Pv+0x90>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001710:	d909      	bls.n	8001726 <_Z11StartTask04Pv+0x3a>
    {
      	dashboardState.lastBlinkTime = currentTick;
 8001712:	4a1a      	ldr	r2, [pc, #104]	@ (800177c <_Z11StartTask04Pv+0x90>)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	60d3      	str	r3, [r2, #12]
		// enter critical section because we do read-modify-write operations in that function
		DASHBOARD_CRITICAL(
 8001718:	f00c febe 	bl	800e498 <vPortEnterCritical>
 800171c:	4817      	ldr	r0, [pc, #92]	@ (800177c <_Z11StartTask04Pv+0x90>)
 800171e:	f7ff fc81 	bl	8001024 <_ZN14DashboardState11blinkLightsEv>
 8001722:	f00c feeb 	bl	800e4fc <vPortExitCritical>
			dashboardState.blinkLights()
	  	);
	}

	if (dashboardState.updateRequested) {
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <_Z11StartTask04Pv+0x90>)
 8001728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00e      	beq.n	800174e <_Z11StartTask04Pv+0x62>
		// enter critical section because we do read-modify-write operations in that function
		DASHBOARD_CRITICAL(
 8001730:	f00c feb2 	bl	800e498 <vPortEnterCritical>
 8001734:	4811      	ldr	r0, [pc, #68]	@ (800177c <_Z11StartTask04Pv+0x90>)
 8001736:	f7ff fb85 	bl	8000e44 <_ZN14DashboardState14updateFromUARTEv>
 800173a:	f00c fedf 	bl	800e4fc <vPortExitCritical>
			dashboardState.updateFromUART()
		);
		dashboardState.updateRequested = 0; // reset update requested flag
 800173e:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <_Z11StartTask04Pv+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2020 	strb.w	r2, [r3, #32]
		dashboardState.update_can_message_1 = 1; // set flag to update CAN message 1
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <_Z11StartTask04Pv+0x90>)
 8001748:	2201      	movs	r2, #1
 800174a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	}

	DASHBOARD_CRITICAL(
 800174e:	f00c fea3 	bl	800e498 <vPortEnterCritical>
 8001752:	490b      	ldr	r1, [pc, #44]	@ (8001780 <_Z11StartTask04Pv+0x94>)
 8001754:	4809      	ldr	r0, [pc, #36]	@ (800177c <_Z11StartTask04Pv+0x90>)
 8001756:	f7ff fc50 	bl	8000ffa <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf14      	ite	ne
 8001760:	2301      	movne	r3, #1
 8001762:	2300      	moveq	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <_Z11StartTask04Pv+0x82>
 800176a:	f001 fae3 	bl	8002d34 <Error_Handler>
 800176e:	f00c fec5 	bl	800e4fc <vPortExitCritical>
		if (dashboardState.writeToPort(U7) != HAL_OK) { Error_Handler(); } // write to output port
	);

    osDelay(50);
 8001772:	2032      	movs	r0, #50	@ 0x32
 8001774:	f00a fb4a 	bl	800be0c <osDelay>
  }
 8001778:	e7c1      	b.n	80016fe <_Z11StartTask04Pv+0x12>
 800177a:	bf00      	nop
 800177c:	20000000 	.word	0x20000000
 8001780:	200000b8 	.word	0x200000b8

08001784 <_Z11StartTask05Pv>:
  /* USER CODE END StartTask04 */
}


void StartTask05(void *argument)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b094      	sub	sp, #80	@ 0x50
 8001788:	af02      	add	r7, sp, #8
 800178a:	6078      	str	r0, [r7, #4]
    uint16_t color;
    bool lightStateChanged = false;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    bool bmsStatusChanged = false;
 8001792:	2300      	movs	r3, #0
 8001794:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    bool mcStatusChanged = false;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    bool arrayStatusChanged = false;
 800179e:	2300      	movs	r3, #0
 80017a0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    bool directionChanged = false;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    bool desiredBMSStatusChanged = false;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	bool desiredArrayStatusChanged = false;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
    bool regenBrakingChanged = false;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    bool screenResetStatusChanged = false;
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    Init_Screen(screen);
 80017c2:	48a1      	ldr	r0, [pc, #644]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 80017c4:	f000 fc36 	bl	8002034 <_Z11Init_ScreenR7ILI9341>

    for (;;)
    {
        DASHBOARD_CRITICAL(
 80017c8:	f00c fe66 	bl	800e498 <vPortEnterCritical>
 80017cc:	4b9f      	ldr	r3, [pc, #636]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80017ce:	785a      	ldrb	r2, [r3, #1]
 80017d0:	4b9e      	ldr	r3, [pc, #632]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	bf14      	ite	ne
 80017d8:	2301      	movne	r3, #1
 80017da:	2300      	moveq	r3, #0
 80017dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80017e0:	4b9a      	ldr	r3, [pc, #616]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80017e2:	7d5a      	ldrb	r2, [r3, #21]
 80017e4:	4b99      	ldr	r3, [pc, #612]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80017e6:	7c1b      	ldrb	r3, [r3, #16]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	bf14      	ite	ne
 80017ec:	2301      	movne	r3, #1
 80017ee:	2300      	moveq	r3, #0
 80017f0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80017f4:	4b95      	ldr	r3, [pc, #596]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80017f6:	7d9a      	ldrb	r2, [r3, #22]
 80017f8:	4b94      	ldr	r3, [pc, #592]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80017fa:	7c5b      	ldrb	r3, [r3, #17]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	bf14      	ite	ne
 8001800:	2301      	movne	r3, #1
 8001802:	2300      	moveq	r3, #0
 8001804:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001808:	4b90      	ldr	r3, [pc, #576]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800180a:	7dda      	ldrb	r2, [r3, #23]
 800180c:	4b8f      	ldr	r3, [pc, #572]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800180e:	7c9b      	ldrb	r3, [r3, #18]
 8001810:	429a      	cmp	r2, r3
 8001812:	bf14      	ite	ne
 8001814:	2301      	movne	r3, #1
 8001816:	2300      	moveq	r3, #0
 8001818:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800181c:	4b8b      	ldr	r3, [pc, #556]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800181e:	7e1a      	ldrb	r2, [r3, #24]
 8001820:	4b8a      	ldr	r3, [pc, #552]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001822:	7cdb      	ldrb	r3, [r3, #19]
 8001824:	429a      	cmp	r2, r3
 8001826:	bf14      	ite	ne
 8001828:	2301      	movne	r3, #1
 800182a:	2300      	moveq	r3, #0
 800182c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001830:	4b86      	ldr	r3, [pc, #536]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001832:	7a1a      	ldrb	r2, [r3, #8]
 8001834:	4b85      	ldr	r3, [pc, #532]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001836:	7a5b      	ldrb	r3, [r3, #9]
 8001838:	429a      	cmp	r2, r3
 800183a:	bf14      	ite	ne
 800183c:	2301      	movne	r3, #1
 800183e:	2300      	moveq	r3, #0
 8001840:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001844:	4b81      	ldr	r3, [pc, #516]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001846:	7eda      	ldrb	r2, [r3, #27]
 8001848:	4b80      	ldr	r3, [pc, #512]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800184a:	7e9b      	ldrb	r3, [r3, #26]
 800184c:	429a      	cmp	r2, r3
 800184e:	bf14      	ite	ne
 8001850:	2301      	movne	r3, #1
 8001852:	2300      	moveq	r3, #0
 8001854:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8001858:	4b7c      	ldr	r3, [pc, #496]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800185a:	7f5a      	ldrb	r2, [r3, #29]
 800185c:	4b7b      	ldr	r3, [pc, #492]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800185e:	7f1b      	ldrb	r3, [r3, #28]
 8001860:	429a      	cmp	r2, r3
 8001862:	bf14      	ite	ne
 8001864:	2301      	movne	r3, #1
 8001866:	2300      	moveq	r3, #0
 8001868:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800186c:	4b77      	ldr	r3, [pc, #476]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800186e:	7d1a      	ldrb	r2, [r3, #20]
 8001870:	4b76      	ldr	r3, [pc, #472]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001872:	7e5b      	ldrb	r3, [r3, #25]
 8001874:	429a      	cmp	r2, r3
 8001876:	bf14      	ite	ne
 8001878:	2301      	movne	r3, #1
 800187a:	2300      	moveq	r3, #0
 800187c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8001880:	4b72      	ldr	r3, [pc, #456]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	4b71      	ldr	r3, [pc, #452]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001886:	705a      	strb	r2, [r3, #1]
 8001888:	4b70      	ldr	r3, [pc, #448]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800188a:	7c1a      	ldrb	r2, [r3, #16]
 800188c:	4b6f      	ldr	r3, [pc, #444]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800188e:	755a      	strb	r2, [r3, #21]
 8001890:	4b6e      	ldr	r3, [pc, #440]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001892:	7c5a      	ldrb	r2, [r3, #17]
 8001894:	4b6d      	ldr	r3, [pc, #436]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001896:	759a      	strb	r2, [r3, #22]
 8001898:	4b6c      	ldr	r3, [pc, #432]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800189a:	7c9a      	ldrb	r2, [r3, #18]
 800189c:	4b6b      	ldr	r3, [pc, #428]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800189e:	75da      	strb	r2, [r3, #23]
 80018a0:	4b6a      	ldr	r3, [pc, #424]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018a2:	7cda      	ldrb	r2, [r3, #19]
 80018a4:	4b69      	ldr	r3, [pc, #420]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018a6:	761a      	strb	r2, [r3, #24]
 80018a8:	4b68      	ldr	r3, [pc, #416]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018aa:	7a1a      	ldrb	r2, [r3, #8]
 80018ac:	4b67      	ldr	r3, [pc, #412]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018ae:	725a      	strb	r2, [r3, #9]
 80018b0:	4b66      	ldr	r3, [pc, #408]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018b2:	7e9a      	ldrb	r2, [r3, #26]
 80018b4:	4b65      	ldr	r3, [pc, #404]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018b6:	76da      	strb	r2, [r3, #27]
 80018b8:	4b64      	ldr	r3, [pc, #400]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018ba:	7d1a      	ldrb	r2, [r3, #20]
 80018bc:	4b63      	ldr	r3, [pc, #396]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018be:	765a      	strb	r2, [r3, #25]
 80018c0:	4b62      	ldr	r3, [pc, #392]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018c2:	7f1a      	ldrb	r2, [r3, #28]
 80018c4:	4b61      	ldr	r3, [pc, #388]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018c6:	775a      	strb	r2, [r3, #29]
 80018c8:	f00c fe18 	bl	800e4fc <vPortExitCritical>
            dashboardState.old_desiredBMSStatus = dashboardState.desiredBMSStatus;
            dashboardState.old_regenBraking = dashboardState.regenBraking;
			dashboardState.old_desiredArrayStatus = dashboardState.desiredArrayStatus;
        );

        if (screenResetStatusChanged) {
 80018cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <_Z11StartTask05Pv+0x156>
			Init_Screen(screen);
 80018d4:	485c      	ldr	r0, [pc, #368]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 80018d6:	f000 fbad 	bl	8002034 <_Z11Init_ScreenR7ILI9341>
        }

        if (lightStateChanged || screenResetStatusChanged) {
 80018da:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d103      	bne.n	80018ea <_Z11StartTask05Pv+0x166>
 80018e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d060      	beq.n	80019ac <_Z11StartTask05Pv+0x228>
            HAL_Delay(1);
 80018ea:	2001      	movs	r0, #1
 80018ec:	f002 ff3c 	bl	8004768 <HAL_Delay>
            DASHBOARD_CRITICAL(
 80018f0:	f00c fdd2 	bl	800e498 <vPortEnterCritical>
 80018f4:	4b55      	ldr	r3, [pc, #340]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d02e      	beq.n	800195a <_Z11StartTask05Pv+0x1d6>
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	dc40      	bgt.n	8001982 <_Z11StartTask05Pv+0x1fe>
 8001900:	2b01      	cmp	r3, #1
 8001902:	d002      	beq.n	800190a <_Z11StartTask05Pv+0x186>
 8001904:	2b02      	cmp	r3, #2
 8001906:	d014      	beq.n	8001932 <_Z11StartTask05Pv+0x1ae>
 8001908:	e03b      	b.n	8001982 <_Z11StartTask05Pv+0x1fe>
 800190a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	230a      	movs	r3, #10
 8001912:	2214      	movs	r2, #20
 8001914:	2114      	movs	r1, #20
 8001916:	484c      	ldr	r0, [pc, #304]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 8001918:	f002 fd17 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 800191c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	230a      	movs	r3, #10
 8001924:	2214      	movs	r2, #20
 8001926:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800192a:	4847      	ldr	r0, [pc, #284]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 800192c:	f002 fd0d 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 8001930:	e03a      	b.n	80019a8 <_Z11StartTask05Pv+0x224>
 8001932:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	230a      	movs	r3, #10
 800193a:	2214      	movs	r2, #20
 800193c:	2114      	movs	r1, #20
 800193e:	4842      	ldr	r0, [pc, #264]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 8001940:	f002 fd03 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 8001944:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	230a      	movs	r3, #10
 800194c:	2214      	movs	r2, #20
 800194e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001952:	483d      	ldr	r0, [pc, #244]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 8001954:	f002 fcf9 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 8001958:	e026      	b.n	80019a8 <_Z11StartTask05Pv+0x224>
 800195a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	230a      	movs	r3, #10
 8001962:	2214      	movs	r2, #20
 8001964:	2114      	movs	r1, #20
 8001966:	4838      	ldr	r0, [pc, #224]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 8001968:	f002 fcef 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 800196c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	230a      	movs	r3, #10
 8001974:	2214      	movs	r2, #20
 8001976:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800197a:	4833      	ldr	r0, [pc, #204]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 800197c:	f002 fce5 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 8001980:	e012      	b.n	80019a8 <_Z11StartTask05Pv+0x224>
 8001982:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	230a      	movs	r3, #10
 800198a:	2214      	movs	r2, #20
 800198c:	2114      	movs	r1, #20
 800198e:	482e      	ldr	r0, [pc, #184]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 8001990:	f002 fcdb 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 8001994:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	230a      	movs	r3, #10
 800199c:	2214      	movs	r2, #20
 800199e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80019a2:	4829      	ldr	r0, [pc, #164]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 80019a4:	f002 fcd1 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 80019a8:	f00c fda8 	bl	800e4fc <vPortExitCritical>
                        break;
                }
            );
        }

        if (bmsStatusChanged || screenResetStatusChanged) {
 80019ac:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d103      	bne.n	80019bc <_Z11StartTask05Pv+0x238>
 80019b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d015      	beq.n	80019e8 <_Z11StartTask05Pv+0x264>
            DASHBOARD_CRITICAL(
 80019bc:	f00c fd6c 	bl	800e498 <vPortEnterCritical>
 80019c0:	4b22      	ldr	r3, [pc, #136]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80019c2:	7c1b      	ldrb	r3, [r3, #16]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <_Z11StartTask05Pv+0x24a>
 80019c8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80019cc:	e001      	b.n	80019d2 <_Z11StartTask05Pv+0x24e>
 80019ce:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80019d2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80019d4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	230a      	movs	r3, #10
 80019da:	2246      	movs	r2, #70	@ 0x46
 80019dc:	2123      	movs	r1, #35	@ 0x23
 80019de:	481a      	ldr	r0, [pc, #104]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 80019e0:	f002 fcb3 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 80019e4:	f00c fd8a 	bl	800e4fc <vPortExitCritical>
                color = dashboardState.bmsStatus ? RGB565_GREEN : RGB565_RED;
                screen.FillCircle(BMS_CIRCLE_X, INDICATOR_CIRCLE_Y, INDICATOR_RADIUS, color);
            );
        }

        if (desiredBMSStatusChanged || screenResetStatusChanged) {
 80019e8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d103      	bne.n	80019f8 <_Z11StartTask05Pv+0x274>
 80019f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d015      	beq.n	8001a24 <_Z11StartTask05Pv+0x2a0>
            DASHBOARD_CRITICAL(
 80019f8:	f00c fd4e 	bl	800e498 <vPortEnterCritical>
 80019fc:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80019fe:	7e9b      	ldrb	r3, [r3, #26]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <_Z11StartTask05Pv+0x286>
 8001a04:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001a08:	e001      	b.n	8001a0e <_Z11StartTask05Pv+0x28a>
 8001a0a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001a0e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001a10:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	230a      	movs	r3, #10
 8001a16:	225f      	movs	r2, #95	@ 0x5f
 8001a18:	2123      	movs	r1, #35	@ 0x23
 8001a1a:	480b      	ldr	r0, [pc, #44]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 8001a1c:	f002 fc95 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 8001a20:	f00c fd6c 	bl	800e4fc <vPortExitCritical>
                color = dashboardState.desiredBMSStatus ? RGB565_GREEN : RGB565_RED;
                screen.FillCircle(BMS_CIRCLE_X, INDICATOR_CIRCLE_Y + 25, INDICATOR_RADIUS, color);
            );
        }

		if (desiredArrayStatusChanged || screenResetStatusChanged) {
 8001a24:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d103      	bne.n	8001a34 <_Z11StartTask05Pv+0x2b0>
 8001a2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01a      	beq.n	8001a6a <_Z11StartTask05Pv+0x2e6>
			DASHBOARD_CRITICAL(
 8001a34:	f00c fd30 	bl	800e498 <vPortEnterCritical>
 8001a38:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001a3a:	7f1b      	ldrb	r3, [r3, #28]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d007      	beq.n	8001a50 <_Z11StartTask05Pv+0x2cc>
 8001a40:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001a44:	e006      	b.n	8001a54 <_Z11StartTask05Pv+0x2d0>
 8001a46:	bf00      	nop
 8001a48:	200000d8 	.word	0x200000d8
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001a54:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001a56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	230a      	movs	r3, #10
 8001a5c:	225f      	movs	r2, #95	@ 0x5f
 8001a5e:	217d      	movs	r1, #125	@ 0x7d
 8001a60:	489d      	ldr	r0, [pc, #628]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001a62:	f002 fc72 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 8001a66:	f00c fd49 	bl	800e4fc <vPortExitCritical>
				color = dashboardState.desiredArrayStatus ? RGB565_GREEN : RGB565_RED;
				screen.FillCircle(ARRAY_CIRCLE_X, INDICATOR_CIRCLE_Y + 25, INDICATOR_RADIUS, color);
			);
		}

        if (mcStatusChanged || screenResetStatusChanged) {
 8001a6a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d103      	bne.n	8001a7a <_Z11StartTask05Pv+0x2f6>
 8001a72:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d015      	beq.n	8001aa6 <_Z11StartTask05Pv+0x322>
            DASHBOARD_CRITICAL(
 8001a7a:	f00c fd0d 	bl	800e498 <vPortEnterCritical>
 8001a7e:	4b97      	ldr	r3, [pc, #604]	@ (8001cdc <_Z11StartTask05Pv+0x558>)
 8001a80:	7c5b      	ldrb	r3, [r3, #17]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <_Z11StartTask05Pv+0x308>
 8001a86:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001a8a:	e001      	b.n	8001a90 <_Z11StartTask05Pv+0x30c>
 8001a8c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001a90:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001a92:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	230a      	movs	r3, #10
 8001a98:	2246      	movs	r2, #70	@ 0x46
 8001a9a:	214b      	movs	r1, #75	@ 0x4b
 8001a9c:	488e      	ldr	r0, [pc, #568]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001a9e:	f002 fc54 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 8001aa2:	f00c fd2b 	bl	800e4fc <vPortExitCritical>
                color = dashboardState.mcStatus ? RGB565_GREEN : RGB565_RED;
                screen.FillCircle(MC_CIRCLE_X, INDICATOR_CIRCLE_Y, INDICATOR_RADIUS, color);
            );
        }

        if (arrayStatusChanged || screenResetStatusChanged) {
 8001aa6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d103      	bne.n	8001ab6 <_Z11StartTask05Pv+0x332>
 8001aae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d015      	beq.n	8001ae2 <_Z11StartTask05Pv+0x35e>
            DASHBOARD_CRITICAL(
 8001ab6:	f00c fcef 	bl	800e498 <vPortEnterCritical>
 8001aba:	4b88      	ldr	r3, [pc, #544]	@ (8001cdc <_Z11StartTask05Pv+0x558>)
 8001abc:	7c9b      	ldrb	r3, [r3, #18]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <_Z11StartTask05Pv+0x344>
 8001ac2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001ac6:	e001      	b.n	8001acc <_Z11StartTask05Pv+0x348>
 8001ac8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001acc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001ace:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	230a      	movs	r3, #10
 8001ad4:	2246      	movs	r2, #70	@ 0x46
 8001ad6:	217d      	movs	r1, #125	@ 0x7d
 8001ad8:	487f      	ldr	r0, [pc, #508]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001ada:	f002 fc36 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 8001ade:	f00c fd0d 	bl	800e4fc <vPortExitCritical>
                color = dashboardState.arrayStatus ? RGB565_GREEN : RGB565_RED;
                screen.FillCircle(ARRAY_CIRCLE_X, INDICATOR_CIRCLE_Y, INDICATOR_RADIUS, color);
            );
        }

        if (directionChanged || screenResetStatusChanged) {
 8001ae2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d103      	bne.n	8001af2 <_Z11StartTask05Pv+0x36e>
 8001aea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d018      	beq.n	8001b24 <_Z11StartTask05Pv+0x3a0>
            DASHBOARD_CRITICAL(
 8001af2:	f00c fcd1 	bl	800e498 <vPortEnterCritical>
 8001af6:	4b79      	ldr	r3, [pc, #484]	@ (8001cdc <_Z11StartTask05Pv+0x558>)
 8001af8:	7cdb      	ldrb	r3, [r3, #19]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d008      	beq.n	8001b10 <_Z11StartTask05Pv+0x38c>
 8001afe:	2300      	movs	r3, #0
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	4b77      	ldr	r3, [pc, #476]	@ (8001ce0 <_Z11StartTask05Pv+0x55c>)
 8001b04:	2278      	movs	r2, #120	@ 0x78
 8001b06:	2114      	movs	r1, #20
 8001b08:	4873      	ldr	r0, [pc, #460]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001b0a:	f002 fb01 	bl	8004110 <_ZN7ILI93418DrawTextEttPKct>
 8001b0e:	e007      	b.n	8001b20 <_Z11StartTask05Pv+0x39c>
 8001b10:	2300      	movs	r3, #0
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	4b73      	ldr	r3, [pc, #460]	@ (8001ce4 <_Z11StartTask05Pv+0x560>)
 8001b16:	2278      	movs	r2, #120	@ 0x78
 8001b18:	2114      	movs	r1, #20
 8001b1a:	486f      	ldr	r0, [pc, #444]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001b1c:	f002 faf8 	bl	8004110 <_ZN7ILI93418DrawTextEttPKct>
 8001b20:	f00c fcec 	bl	800e4fc <vPortExitCritical>
                    screen.DrawText(DIRECTION_TEXT_X, DIRECTION_TEXT_Y, "Reverse\0", RGB565_BLACK);
                }
            );
        }

        if (regenBrakingChanged || screenResetStatusChanged) {
 8001b24:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d103      	bne.n	8001b34 <_Z11StartTask05Pv+0x3b0>
 8001b2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d015      	beq.n	8001b60 <_Z11StartTask05Pv+0x3dc>
            DASHBOARD_CRITICAL(
 8001b34:	f00c fcb0 	bl	800e498 <vPortEnterCritical>
 8001b38:	4b68      	ldr	r3, [pc, #416]	@ (8001cdc <_Z11StartTask05Pv+0x558>)
 8001b3a:	7d1b      	ldrb	r3, [r3, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <_Z11StartTask05Pv+0x3c2>
 8001b40:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001b44:	e001      	b.n	8001b4a <_Z11StartTask05Pv+0x3c6>
 8001b46:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001b4a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001b4c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	230a      	movs	r3, #10
 8001b52:	2246      	movs	r2, #70	@ 0x46
 8001b54:	21af      	movs	r1, #175	@ 0xaf
 8001b56:	4860      	ldr	r0, [pc, #384]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001b58:	f002 fbf7 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 8001b5c:	f00c fcce 	bl	800e4fc <vPortExitCritical>
                screen.FillCircle(REGEN_BRAKING_CIRCLE_X, INDICATOR_CIRCLE_Y, INDICATOR_RADIUS, color);
            );
        }

        float supp_batt_voltage, motor_power, car_speed;
        DASHBOARD_CRITICAL(
 8001b60:	f00c fc9a 	bl	800e498 <vPortEnterCritical>
 8001b64:	485d      	ldr	r0, [pc, #372]	@ (8001cdc <_Z11StartTask05Pv+0x558>)
 8001b66:	f7ff fa97 	bl	8001098 <_ZN14DashboardState18getSuppBattVoltageEv>
 8001b6a:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
 8001b6e:	485b      	ldr	r0, [pc, #364]	@ (8001cdc <_Z11StartTask05Pv+0x558>)
 8001b70:	f7ff fab6 	bl	80010e0 <_ZN14DashboardState13getMotorPowerEv>
 8001b74:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
 8001b78:	4858      	ldr	r0, [pc, #352]	@ (8001cdc <_Z11StartTask05Pv+0x558>)
 8001b7a:	f7ff faf9 	bl	8001170 <_ZN14DashboardState11getCarSpeedEv>
 8001b7e:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8001b82:	f00c fcbb 	bl	800e4fc <vPortExitCritical>
            car_speed = dashboardState.getCarSpeed();
        );

        char buffer[16];

        DASHBOARD_CRITICAL(
 8001b86:	f00c fc87 	bl	800e498 <vPortEnterCritical>
 8001b8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	233c      	movs	r3, #60	@ 0x3c
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2396      	movs	r3, #150	@ 0x96
 8001b96:	22a0      	movs	r2, #160	@ 0xa0
 8001b98:	2164      	movs	r1, #100	@ 0x64
 8001b9a:	484f      	ldr	r0, [pc, #316]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001b9c:	f002 fb1d 	bl	80041da <_ZN7ILI93418DrawRectEttttt>
 8001ba0:	4b4e      	ldr	r3, [pc, #312]	@ (8001cdc <_Z11StartTask05Pv+0x558>)
 8001ba2:	7c5b      	ldrb	r3, [r3, #17]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d056      	beq.n	8001c56 <_Z11StartTask05Pv+0x4d2>
 8001ba8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001bac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bb0:	ee17 3a90 	vmov	r3, s15
 8001bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb8:	ee07 3a90 	vmov	s15, r3
 8001bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001ce8 <_Z11StartTask05Pv+0x564>
 8001bcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bd4:	ee17 3a90 	vmov	r3, s15
 8001bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bda:	f107 0008 	add.w	r0, r7, #8
 8001bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be4:	4a41      	ldr	r2, [pc, #260]	@ (8001cec <_Z11StartTask05Pv+0x568>)
 8001be6:	2110      	movs	r1, #16
 8001be8:	f00d f820 	bl	800ec2c <sniprintf>
 8001bec:	f107 0308 	add.w	r3, r7, #8
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	9200      	str	r2, [sp, #0]
 8001bf4:	22a0      	movs	r2, #160	@ 0xa0
 8001bf6:	2164      	movs	r1, #100	@ 0x64
 8001bf8:	4837      	ldr	r0, [pc, #220]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001bfa:	f002 fa89 	bl	8004110 <_ZN7ILI93418DrawTextEttPKct>
 8001bfe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c06:	ee17 3a90 	vmov	r3, s15
 8001c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0e:	ee07 3a90 	vmov	s15, r3
 8001c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c16:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c2a:	ee17 3a90 	vmov	r3, s15
 8001c2e:	623b      	str	r3, [r7, #32]
 8001c30:	f107 0008 	add.w	r0, r7, #8
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf0 <_Z11StartTask05Pv+0x56c>)
 8001c3c:	2110      	movs	r1, #16
 8001c3e:	f00c fff5 	bl	800ec2c <sniprintf>
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	2200      	movs	r2, #0
 8001c48:	9200      	str	r2, [sp, #0]
 8001c4a:	22b4      	movs	r2, #180	@ 0xb4
 8001c4c:	2164      	movs	r1, #100	@ 0x64
 8001c4e:	4822      	ldr	r0, [pc, #136]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001c50:	f002 fa5e 	bl	8004110 <_ZN7ILI93418DrawTextEttPKct>
 8001c54:	e00f      	b.n	8001c76 <_Z11StartTask05Pv+0x4f2>
 8001c56:	2300      	movs	r3, #0
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	4b26      	ldr	r3, [pc, #152]	@ (8001cf4 <_Z11StartTask05Pv+0x570>)
 8001c5c:	22a0      	movs	r2, #160	@ 0xa0
 8001c5e:	2164      	movs	r1, #100	@ 0x64
 8001c60:	481d      	ldr	r0, [pc, #116]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001c62:	f002 fa55 	bl	8004110 <_ZN7ILI93418DrawTextEttPKct>
 8001c66:	2300      	movs	r3, #0
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	4b22      	ldr	r3, [pc, #136]	@ (8001cf4 <_Z11StartTask05Pv+0x570>)
 8001c6c:	22b4      	movs	r2, #180	@ 0xb4
 8001c6e:	2164      	movs	r1, #100	@ 0x64
 8001c70:	4819      	ldr	r0, [pc, #100]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001c72:	f002 fa4d 	bl	8004110 <_ZN7ILI93418DrawTextEttPKct>
 8001c76:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001c7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c7e:	ee17 3a90 	vmov	r3, s15
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c96:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001ce8 <_Z11StartTask05Pv+0x564>
 8001c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ca2:	ee17 3a90 	vmov	r3, s15
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	f107 0008 	add.w	r0, r7, #8
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	4a11      	ldr	r2, [pc, #68]	@ (8001cf8 <_Z11StartTask05Pv+0x574>)
 8001cb4:	2110      	movs	r1, #16
 8001cb6:	f00c ffb9 	bl	800ec2c <sniprintf>
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	9200      	str	r2, [sp, #0]
 8001cc2:	22c8      	movs	r2, #200	@ 0xc8
 8001cc4:	2164      	movs	r1, #100	@ 0x64
 8001cc6:	4804      	ldr	r0, [pc, #16]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001cc8:	f002 fa22 	bl	8004110 <_ZN7ILI93418DrawTextEttPKct>
 8001ccc:	f00c fc16 	bl	800e4fc <vPortExitCritical>
            int voltage_frac = (int)((supp_batt_voltage - voltage_whole) * 100);
            snprintf(buffer, sizeof(buffer), "%d.%02d V", voltage_whole, voltage_frac);
            screen.DrawText(STATS_VALUES_X, VOLTAGE_SUPP_BATT_LABEL_Y, buffer, RGB565_BLACK);
        );

        osDelay(200);
 8001cd0:	20c8      	movs	r0, #200	@ 0xc8
 8001cd2:	f00a f89b 	bl	800be0c <osDelay>
    }
 8001cd6:	e577      	b.n	80017c8 <_Z11StartTask05Pv+0x44>
 8001cd8:	200000d8 	.word	0x200000d8
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	0800f4fc 	.word	0x0800f4fc
 8001ce4:	0800f508 	.word	0x0800f508
 8001ce8:	42c80000 	.word	0x42c80000
 8001cec:	0800f514 	.word	0x0800f514
 8001cf0:	0800f520 	.word	0x0800f520
 8001cf4:	0800f52c 	.word	0x0800f52c
 8001cf8:	0800f534 	.word	0x0800f534

08001cfc <_Z19Update_CAN_Message1PhS_S_>:
}



void Update_CAN_Message1(uint8_t flags[8], uint8_t* Input1, uint8_t* Input2)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]

	static uint8_t prev_input1 = 0;
	static uint8_t prev_input2 = 0;


	flags[3] = 0;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3303      	adds	r3, #3
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
	flags[4] = 0;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3304      	adds	r3, #4
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]


	// Detect rising edges for each flag
	uint8_t risingEdges_flag1 = (~prev_input1) & *Input1;
 8001d18:	4b98      	ldr	r3, [pc, #608]	@ (8001f7c <_Z19Update_CAN_Message1PhS_S_+0x280>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	b25b      	sxtb	r3, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	b25a      	sxtb	r2, r3
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b25b      	sxtb	r3, r3
 8001d28:	4013      	ands	r3, r2
 8001d2a:	b25b      	sxtb	r3, r3
 8001d2c:	75fb      	strb	r3, [r7, #23]
	uint8_t risingEdges_flag2 = (~prev_input2) & *Input2;
 8001d2e:	4b94      	ldr	r3, [pc, #592]	@ (8001f80 <_Z19Update_CAN_Message1PhS_S_+0x284>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	b25b      	sxtb	r3, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	b25a      	sxtb	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	b25b      	sxtb	r3, r3
 8001d3e:	4013      	ands	r3, r2
 8001d40:	b25b      	sxtb	r3, r3
 8001d42:	75bb      	strb	r3, [r7, #22]
	uint8_t changedEdges_flag2 = (*Input2) ^ prev_input2;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	781a      	ldrb	r2, [r3, #0]
 8001d48:	4b8d      	ldr	r3, [pc, #564]	@ (8001f80 <_Z19Update_CAN_Message1PhS_S_+0x284>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4053      	eors	r3, r2
 8001d4e:	757b      	strb	r3, [r7, #21]

	flags[1] ^= CHECK_BIT(changedEdges_flag2, 4) << 0; // Main
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	3301      	adds	r3, #1
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	b25a      	sxtb	r2, r3
 8001d58:	7d7b      	ldrb	r3, [r7, #21]
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	bf14      	ite	ne
 8001d62:	2301      	movne	r3, #1
 8001d64:	2300      	moveq	r3, #0
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	b25b      	sxtb	r3, r3
 8001d6a:	4053      	eors	r3, r2
 8001d6c:	b25a      	sxtb	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	701a      	strb	r2, [r3, #0]
	if (CHECK_BIT(*Input2, 5)) // Break
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <_Z19Update_CAN_Message1PhS_S_+0x9a>
	{
		flags[1] |= (1 << 1); // Break
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3301      	adds	r3, #1
 8001d86:	781a      	ldrb	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f042 0202 	orr.w	r2, r2, #2
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	e008      	b.n	8001da8 <_Z19Update_CAN_Message1PhS_S_+0xac>
	}
	else
	{
		flags[1] &= ~(1 << 1); // Break
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f022 0202 	bic.w	r2, r2, #2
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	701a      	strb	r2, [r3, #0]
	}

	// CHECK_BIT(risingEdges_flag2, 1) all unused buttons
	// CHECK_BIT(risingEdges_flag2, 2)
	// CHECK_BIT(risingEdges_flag2, 3)
	flags[2] ^= CHECK_BIT(risingEdges_flag2, 0) << 4; // regen breaking
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3302      	adds	r3, #2
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b25a      	sxtb	r2, r3
 8001db0:	7dbb      	ldrb	r3, [r7, #22]
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	b25b      	sxtb	r3, r3
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	4053      	eors	r3, r2
 8001dbe:	b25a      	sxtb	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	701a      	strb	r2, [r3, #0]

	flags[1] ^= CHECK_BIT(risingEdges_flag1, 4) << 2; // Array
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b25a      	sxtb	r2, r3
 8001dd0:	7dfb      	ldrb	r3, [r7, #23]
 8001dd2:	109b      	asrs	r3, r3, #2
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	b25b      	sxtb	r3, r3
 8001ddc:	4053      	eors	r3, r2
 8001dde:	b25a      	sxtb	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3301      	adds	r3, #1
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 5) << 3; // BMS Contactors
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	3301      	adds	r3, #1
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	b25a      	sxtb	r2, r3
 8001df0:	7dfb      	ldrb	r3, [r7, #23]
 8001df2:	109b      	asrs	r3, r3, #2
 8001df4:	b25b      	sxtb	r3, r3
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	b25b      	sxtb	r3, r3
 8001dfc:	4053      	eors	r3, r2
 8001dfe:	b25a      	sxtb	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	3301      	adds	r3, #1
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 6) << 4; // MC Enable
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	b25a      	sxtb	r2, r3
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	109b      	asrs	r3, r3, #2
 8001e14:	b25b      	sxtb	r3, r3
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	b25b      	sxtb	r3, r3
 8001e1c:	4053      	eors	r3, r2
 8001e1e:	b25a      	sxtb	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3301      	adds	r3, #1
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 7) << 5; // Direction
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b25a      	sxtb	r2, r3
 8001e30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e34:	109b      	asrs	r3, r3, #2
 8001e36:	b25b      	sxtb	r3, r3
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	b25b      	sxtb	r3, r3
 8001e3e:	4053      	eors	r3, r2
 8001e40:	b25a      	sxtb	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3301      	adds	r3, #1
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]


	dashboardState.desiredBMSStatus = flags[1] & (1 << 3); // Desired BMS contactors status (0 = open, 1 = closed) 
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4b4b      	ldr	r3, [pc, #300]	@ (8001f84 <_Z19Update_CAN_Message1PhS_S_+0x288>)
 8001e58:	769a      	strb	r2, [r3, #26]
	dashboardState.regenBraking = flags[2] & (1 << 4); // Regen braking (0 = off, 1 = on)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4b47      	ldr	r3, [pc, #284]	@ (8001f84 <_Z19Update_CAN_Message1PhS_S_+0x288>)
 8001e68:	751a      	strb	r2, [r3, #20]
	dashboardState.desiredArrayStatus = flags[1] & (1 << 2); // Desired array status (0 = off, 1 = on)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4b43      	ldr	r3, [pc, #268]	@ (8001f84 <_Z19Update_CAN_Message1PhS_S_+0x288>)
 8001e78:	771a      	strb	r2, [r3, #28]
	
	if (dashboardState.hornState) // Horn
 8001e7a:	4b42      	ldr	r3, [pc, #264]	@ (8001f84 <_Z19Update_CAN_Message1PhS_S_+0x288>)
 8001e7c:	791b      	ldrb	r3, [r3, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <_Z19Update_CAN_Message1PhS_S_+0x19a>
		flags[1] |= (1 << 6);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3301      	adds	r3, #1
 8001e86:	781a      	ldrb	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	701a      	strb	r2, [r3, #0]
 8001e94:	e008      	b.n	8001ea8 <_Z19Update_CAN_Message1PhS_S_+0x1ac>
	else
		flags[1] &= ~(1 << 6);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	781a      	ldrb	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]
	if (dashboardState.pttState) // PTT (Push to Talk)
 8001ea8:	4b36      	ldr	r3, [pc, #216]	@ (8001f84 <_Z19Update_CAN_Message1PhS_S_+0x288>)
 8001eaa:	79db      	ldrb	r3, [r3, #7]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d009      	beq.n	8001ec4 <_Z19Update_CAN_Message1PhS_S_+0x1c8>
		flags[1] |= (1 << 7);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	781a      	ldrb	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]
 8001ec2:	e008      	b.n	8001ed6 <_Z19Update_CAN_Message1PhS_S_+0x1da>
	else
		flags[1] &= ~(1 << 7);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	781a      	ldrb	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	701a      	strb	r2, [r3, #0]
	/*
		NOTE:
			currently sending state of turn signal, turn signal on or off
			if wanting to send actual control of turn signal light, need to send outputPortState variable instead of lightState	
	*/
	if (dashboardState.lightState == LIGHTS_HAZARD) // Blinkers
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8001f84 <_Z19Update_CAN_Message1PhS_S_+0x288>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d109      	bne.n	8001ef2 <_Z19Update_CAN_Message1PhS_S_+0x1f6>
		flags[2] |= (1 << 0);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	781a      	ldrb	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	f042 0201 	orr.w	r2, r2, #1
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	e008      	b.n	8001f04 <_Z19Update_CAN_Message1PhS_S_+0x208>
	else
		flags[2] &= ~(1 << 0);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	781a      	ldrb	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3302      	adds	r3, #2
 8001efc:	f022 0201 	bic.w	r2, r2, #1
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	701a      	strb	r2, [r3, #0]
	if (dashboardState.lightState == LIGHTS_LEFT) // Left Turn
 8001f04:	4b1f      	ldr	r3, [pc, #124]	@ (8001f84 <_Z19Update_CAN_Message1PhS_S_+0x288>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d109      	bne.n	8001f20 <_Z19Update_CAN_Message1PhS_S_+0x224>
		flags[2] |= (1 << 1);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3302      	adds	r3, #2
 8001f10:	781a      	ldrb	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	3302      	adds	r3, #2
 8001f16:	f042 0202 	orr.w	r2, r2, #2
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	e008      	b.n	8001f32 <_Z19Update_CAN_Message1PhS_S_+0x236>
	else
		flags[2] &= ~(1 << 1);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3302      	adds	r3, #2
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3302      	adds	r3, #2
 8001f2a:	f022 0202 	bic.w	r2, r2, #2
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]
	if (dashboardState.lightState == LIGHTS_RIGHT) // Right Turn
 8001f32:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <_Z19Update_CAN_Message1PhS_S_+0x288>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d109      	bne.n	8001f4e <_Z19Update_CAN_Message1PhS_S_+0x252>
		flags[2] |= (1 << 2);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	781a      	ldrb	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3302      	adds	r3, #2
 8001f44:	f042 0204 	orr.w	r2, r2, #4
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	701a      	strb	r2, [r3, #0]
 8001f4c:	e008      	b.n	8001f60 <_Z19Update_CAN_Message1PhS_S_+0x264>
	else
		flags[2] &= ~(1 << 2);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	3302      	adds	r3, #2
 8001f52:	781a      	ldrb	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	3302      	adds	r3, #2
 8001f58:	f022 0204 	bic.w	r2, r2, #4
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	701a      	strb	r2, [r3, #0]
	if (dashboardState.headlightState) // Headlights
 8001f60:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <_Z19Update_CAN_Message1PhS_S_+0x288>)
 8001f62:	799b      	ldrb	r3, [r3, #6]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00f      	beq.n	8001f88 <_Z19Update_CAN_Message1PhS_S_+0x28c>
		flags[2] |= (1 << 3);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	781a      	ldrb	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	3302      	adds	r3, #2
 8001f72:	f042 0208 	orr.w	r2, r2, #8
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	701a      	strb	r2, [r3, #0]
 8001f7a:	e00e      	b.n	8001f9a <_Z19Update_CAN_Message1PhS_S_+0x29e>
 8001f7c:	20000149 	.word	0x20000149
 8001f80:	2000014a 	.word	0x2000014a
 8001f84:	20000000 	.word	0x20000000
	else
		flags[2] &= ~(1 << 3);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	781a      	ldrb	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3302      	adds	r3, #2
 8001f92:	f022 0208 	bic.w	r2, r2, #8
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]

	cc_enable ^= CHECK_BIT(risingEdges_flag2, 1);
 8001f9a:	7dbb      	ldrb	r3, [r7, #22]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf14      	ite	ne
 8001fa4:	2301      	movne	r3, #1
 8001fa6:	2300      	moveq	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	b25a      	sxtb	r2, r3
 8001fac:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <_Z19Update_CAN_Message1PhS_S_+0x2dc>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	4053      	eors	r3, r2
 8001fb4:	b25b      	sxtb	r3, r3
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <_Z19Update_CAN_Message1PhS_S_+0x2dc>)
 8001fba:	701a      	strb	r2, [r3, #0]

	prev_input1 = *Input1;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	781a      	ldrb	r2, [r3, #0]
 8001fc0:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <_Z19Update_CAN_Message1PhS_S_+0x2e0>)
 8001fc2:	701a      	strb	r2, [r3, #0]
	prev_input2 = *Input2;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	781a      	ldrb	r2, [r3, #0]
 8001fc8:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <_Z19Update_CAN_Message1PhS_S_+0x2e4>)
 8001fca:	701a      	strb	r2, [r3, #0]

}
 8001fcc:	bf00      	nop
 8001fce:	371c      	adds	r7, #28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	200000d5 	.word	0x200000d5
 8001fdc:	20000149 	.word	0x20000149
 8001fe0:	2000014a 	.word	0x2000014a

08001fe4 <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef>:
	 *
	 * */
}

void Init_CAN_Filter1(CAN_HandleTypeDef &hcan1)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08c      	sub	sp, #48	@ 0x30
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = CAN_ID_BMS_POWER_CONSUM_INFO << 5;
  canfilterconfig.FilterMaskIdLow = (uint32_t)CAN_ID_MITSUBA_MOTOR_FRAME_0 << 5;

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
*/
  CAN_FilterTypeDef filter = {0};
 8001fec:	f107 0308 	add.w	r3, r7, #8
 8001ff0:	2228      	movs	r2, #40	@ 0x28
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f00c fe4d 	bl	800ec94 <memset>
    filter.FilterActivation = ENABLE;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
    filter.FilterBank = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800200a:	2301      	movs	r3, #1
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24

    // Accept ALL messages (for debug/testing)
    filter.FilterIdHigh = 0x0000;
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
    filter.FilterIdLow = 0x0000;
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
    filter.FilterMaskIdHigh = 0x0000;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
    filter.FilterMaskIdLow = 0x0000;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]

    HAL_CAN_ConfigFilter(&hcan1, &filter);
 800201e:	f107 0308 	add.w	r3, r7, #8
 8002022:	4619      	mov	r1, r3
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f004 f893 	bl	8006150 <HAL_CAN_ConfigFilter>
}
 800202a:	bf00      	nop
 800202c:	3730      	adds	r7, #48	@ 0x30
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <_Z11Init_ScreenR7ILI9341>:

void Init_Screen(ILI9341 &screen)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af02      	add	r7, sp, #8
 800203a:	6078      	str	r0, [r7, #4]
	screen.Init();
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f001 fb45 	bl	80036cc <_ZN7ILI93414InitEv>
	screen.SetRotation(3);
 8002042:	2103      	movs	r1, #3
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f001 fecb 	bl	8003de0 <_ZN7ILI934111SetRotationEh>
	screen.ClearScreen(RGB565_WHITE);
 800204a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f001 fdfb 	bl	8003c4a <_ZN7ILI934111ClearScreenEt>
	screen.SetTextSize(TEXT_SIZE);
 8002054:	2102      	movs	r1, #2
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f001 ff2e 	bl	8003eb8 <_ZN7ILI934111SetTextSizeEh>

	DASHBOARD_CRITICAL(
 800205c:	f00c fa1c 	bl	800e498 <vPortEnterCritical>
 8002060:	2300      	movs	r3, #0
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	4b3b      	ldr	r3, [pc, #236]	@ (8002154 <_Z11Init_ScreenR7ILI9341+0x120>)
 8002066:	220a      	movs	r2, #10
 8002068:	2146      	movs	r1, #70	@ 0x46
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f002 f850 	bl	8004110 <_ZN7ILI93418DrawTextEttPKct>
 8002070:	2300      	movs	r3, #0
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	4b38      	ldr	r3, [pc, #224]	@ (8002158 <_Z11Init_ScreenR7ILI9341+0x124>)
 8002076:	2228      	movs	r2, #40	@ 0x28
 8002078:	2114      	movs	r1, #20
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f002 f848 	bl	8004110 <_ZN7ILI93418DrawTextEttPKct>
 8002080:	2300      	movs	r3, #0
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	4b35      	ldr	r3, [pc, #212]	@ (800215c <_Z11Init_ScreenR7ILI9341+0x128>)
 8002086:	22a0      	movs	r2, #160	@ 0xa0
 8002088:	2114      	movs	r1, #20
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f002 f840 	bl	8004110 <_ZN7ILI93418DrawTextEttPKct>
 8002090:	2300      	movs	r3, #0
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	4b32      	ldr	r3, [pc, #200]	@ (8002160 <_Z11Init_ScreenR7ILI9341+0x12c>)
 8002096:	22b4      	movs	r2, #180	@ 0xb4
 8002098:	2114      	movs	r1, #20
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f002 f838 	bl	8004110 <_ZN7ILI93418DrawTextEttPKct>
 80020a0:	2300      	movs	r3, #0
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002164 <_Z11Init_ScreenR7ILI9341+0x130>)
 80020a6:	22c8      	movs	r2, #200	@ 0xc8
 80020a8:	2114      	movs	r1, #20
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f002 f830 	bl	8004110 <_ZN7ILI93418DrawTextEttPKct>
 80020b0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	230a      	movs	r3, #10
 80020b8:	2246      	movs	r2, #70	@ 0x46
 80020ba:	2123      	movs	r1, #35	@ 0x23
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f002 f944 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 80020c2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	230a      	movs	r3, #10
 80020ca:	225f      	movs	r2, #95	@ 0x5f
 80020cc:	2123      	movs	r1, #35	@ 0x23
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f002 f93b 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 80020d4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	230a      	movs	r3, #10
 80020dc:	2246      	movs	r2, #70	@ 0x46
 80020de:	214b      	movs	r1, #75	@ 0x4b
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f002 f932 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 80020e6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	230a      	movs	r3, #10
 80020ee:	2246      	movs	r2, #70	@ 0x46
 80020f0:	217d      	movs	r1, #125	@ 0x7d
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f002 f929 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 80020f8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	230a      	movs	r3, #10
 8002100:	225f      	movs	r2, #95	@ 0x5f
 8002102:	217d      	movs	r1, #125	@ 0x7d
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f002 f920 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 800210a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	230a      	movs	r3, #10
 8002112:	2246      	movs	r2, #70	@ 0x46
 8002114:	21af      	movs	r1, #175	@ 0xaf
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f002 f917 	bl	800434a <_ZN7ILI934110FillCircleEtttt>
 800211c:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <_Z11Init_ScreenR7ILI9341+0x134>)
 800211e:	7cdb      	ldrb	r3, [r3, #19]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <_Z11Init_ScreenR7ILI9341+0x102>
 8002124:	2300      	movs	r3, #0
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	4b10      	ldr	r3, [pc, #64]	@ (800216c <_Z11Init_ScreenR7ILI9341+0x138>)
 800212a:	2278      	movs	r2, #120	@ 0x78
 800212c:	2114      	movs	r1, #20
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f001 ffee 	bl	8004110 <_ZN7ILI93418DrawTextEttPKct>
 8002134:	e007      	b.n	8002146 <_Z11Init_ScreenR7ILI9341+0x112>
 8002136:	2300      	movs	r3, #0
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <_Z11Init_ScreenR7ILI9341+0x13c>)
 800213c:	2278      	movs	r2, #120	@ 0x78
 800213e:	2114      	movs	r1, #20
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f001 ffe5 	bl	8004110 <_ZN7ILI93418DrawTextEttPKct>
 8002146:	f00c f9d9 	bl	800e4fc <vPortExitCritical>
		}
		else {
			screen.DrawText(DIRECTION_TEXT_X, DIRECTION_TEXT_Y, "Reverse\0", RGB565_BLACK);
		}
	);
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	0800f540 	.word	0x0800f540
 8002158:	0800f554 	.word	0x0800f554
 800215c:	0800f568 	.word	0x0800f568
 8002160:	0800f574 	.word	0x0800f574
 8002164:	0800f580 	.word	0x0800f580
 8002168:	20000000 	.word	0x20000000
 800216c:	0800f4fc 	.word	0x0800f4fc
 8002170:	0800f508 	.word	0x0800f508

08002174 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0c      	ldr	r2, [pc, #48]	@ (80021b4 <HAL_UART_RxCpltCallback+0x40>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d10d      	bne.n	80021a2 <HAL_UART_RxCpltCallback+0x2e>
  	{
		if (dashboardState.uart_rx != dashboardState.old_uart_rx)
 8002186:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <HAL_UART_RxCpltCallback+0x44>)
 8002188:	7f9a      	ldrb	r2, [r3, #30]
 800218a:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <HAL_UART_RxCpltCallback+0x44>)
 800218c:	7fdb      	ldrb	r3, [r3, #31]
 800218e:	429a      	cmp	r2, r3
 8002190:	d007      	beq.n	80021a2 <HAL_UART_RxCpltCallback+0x2e>
		{
			dashboardState.updateRequested = 1; // set flag to update dashboard state
 8002192:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <HAL_UART_RxCpltCallback+0x44>)
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2020 	strb.w	r2, [r3, #32]
			dashboardState.old_uart_rx = dashboardState.uart_rx;
 800219a:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <HAL_UART_RxCpltCallback+0x44>)
 800219c:	7f9a      	ldrb	r2, [r3, #30]
 800219e:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <HAL_UART_RxCpltCallback+0x44>)
 80021a0:	77da      	strb	r2, [r3, #31]
		}
	}
	HAL_UART_Receive_IT(&huart4, &dashboardState.uart_rx, 1);
 80021a2:	2201      	movs	r2, #1
 80021a4:	4905      	ldr	r1, [pc, #20]	@ (80021bc <HAL_UART_RxCpltCallback+0x48>)
 80021a6:	4806      	ldr	r0, [pc, #24]	@ (80021c0 <HAL_UART_RxCpltCallback+0x4c>)
 80021a8:	f008 f9fe 	bl	800a5a8 <HAL_UART_Receive_IT>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40004c00 	.word	0x40004c00
 80021b8:	20000000 	.word	0x20000000
 80021bc:	2000001e 	.word	0x2000001e
 80021c0:	20000398 	.word	0x20000398

080021c4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	dma_flag = 1;
 80021cc:	4b04      	ldr	r3, [pc, #16]	@ (80021e0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	200000d4 	.word	0x200000d4

080021e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Triggered = 1;
 80021ee:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <HAL_GPIO_EXTI_Callback+0x1c>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	701a      	strb	r2, [r3, #0]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	200000d6 	.word	0x200000d6

08002204 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002204:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002208:	b092      	sub	sp, #72	@ 0x48
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	f107 0214 	add.w	r2, r7, #20
 8002216:	2100      	movs	r1, #0
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f004 f9c2 	bl	80065a2 <HAL_CAN_GetRxMessage>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf14      	ite	ne
 8002224:	2301      	movne	r3, #1
 8002226:	2300      	moveq	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
    {
        Error_Handler();
 800222e:	f000 fd81 	bl	8002d34 <Error_Handler>
    }

	// vcu sends mc and array status
    if (RxHeader.IDE == CAN_ID_STD && RxHeader.StdId == CAN_ID_VCU_SENSORS)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d12a      	bne.n	800228e <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d127      	bne.n	800228e <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
    {
		uint8_t statusByte = RxData[VCU_SENSORS_STATUS_BYTE_INDEX];
 800223e:	7b7b      	ldrb	r3, [r7, #13]
 8002240:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

		dashboardState.mcStatus = CHECK_BIT(
 8002244:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	bf14      	ite	ne
 8002250:	2301      	movne	r3, #1
 8002252:	2300      	moveq	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	4b67      	ldr	r3, [pc, #412]	@ (80023f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 800225a:	745a      	strb	r2, [r3, #17]
			statusByte, 
			(int)VCU_SENSORS_STATUS_BITS::VCU_MC_ENABLED_BIT_POS
		);
		dashboardState.arrayStatus = CHECK_BIT(
 800225c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	4b61      	ldr	r3, [pc, #388]	@ (80023f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8002272:	749a      	strb	r2, [r3, #18]
			statusByte, 
			(int)VCU_SENSORS_STATUS_BITS::VCU_ARRAY_ENABLED_BIT_POS
		);
		dashboardState.direction = CHECK_BIT(
 8002274:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf14      	ite	ne
 8002280:	2301      	movne	r3, #1
 8002282:	2300      	moveq	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	4b5b      	ldr	r3, [pc, #364]	@ (80023f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 800228a:	74da      	strb	r2, [r3, #19]
			statusByte,
			(int)VCU_SENSORS_STATUS_BITS::VCU_DIRECTION_BIT_POS
		);
    }
 800228c:	e0af      	b.n	80023ee <HAL_CAN_RxFifo0MsgPendingCallback+0x1ea>
	// powerboard sends voltage of supplemental battery 
	else if (RxHeader.IDE == CAN_ID_STD && RxHeader.StdId == CAN_ID_POWERBOARD)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10b      	bne.n	80022ac <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d108      	bne.n	80022ac <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
	{
		dashboardState.supp_batt_voltage_lsb = RxData[POWERBOARD_SUPPLEMENTAL_BATTERY_VOLTAGE_LSB_INDEX];
 800229a:	7bba      	ldrb	r2, [r7, #14]
 800229c:	4b56      	ldr	r3, [pc, #344]	@ (80023f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 800229e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		dashboardState.supp_batt_voltage_msb = RxData[POWERBOARD_SUPPLEMENTAL_BATTERY_VOLTAGE_MSB_INDEX];
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	4b54      	ldr	r3, [pc, #336]	@ (80023f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80022a6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80022aa:	e0a0      	b.n	80023ee <HAL_CAN_RxFifo0MsgPendingCallback+0x1ea>
	}
	// bms sends contactors closed indicator and battery voltage and current
	else if (RxHeader.IDE == CAN_ID_STD && RxHeader.StdId == CAN_ID_BMS_POWER_CONSUM_INFO)
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d112      	bne.n	80022d8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b06      	cmp	r3, #6
 80022b6:	d10f      	bne.n	80022d8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>
	{
		uint8_t statusByte = RxData[BMS_STATUS_BYTE_INDEX];
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
 80022ba:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

		dashboardState.bmsStatus = CHECK_BIT(
 80022be:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	bf14      	ite	ne
 80022ca:	2301      	movne	r3, #1
 80022cc:	2300      	moveq	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b49      	ldr	r3, [pc, #292]	@ (80023f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80022d4:	741a      	strb	r2, [r3, #16]
			statusByte,
			(int)BMS_STATUS_BITS::BMS_CONTACTORS_CLOSED_BIT_POS
		);
	}
 80022d6:	e08a      	b.n	80023ee <HAL_CAN_RxFifo0MsgPendingCallback+0x1ea>
	// mitsuba motor sends velocity and other data?
	else if (RxHeader.IDE == CAN_ID_EXT && RxHeader.ExtId == CAN_ID_MITSUBA_MOTOR_FRAME_0)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	2b04      	cmp	r3, #4
 80022dc:	f040 8087 	bne.w	80023ee <HAL_CAN_RxFifo0MsgPendingCallback+0x1ea>
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	4a46      	ldr	r2, [pc, #280]	@ (80023fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	f040 8082 	bne.w	80023ee <HAL_CAN_RxFifo0MsgPendingCallback+0x1ea>
	{
		uint64_t full_data = 0;
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		for (int i = 0; i < 8; i++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022fa:	e01d      	b.n	8002338 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
		{
			full_data = (full_data << 8) | RxData[7 - i]; // lsb first
 80022fc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	020b      	lsls	r3, r1, #8
 800230a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800230e:	0202      	lsls	r2, r0, #8
 8002310:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002312:	f1c1 0107 	rsb	r1, r1, #7
 8002316:	3148      	adds	r1, #72	@ 0x48
 8002318:	4439      	add	r1, r7
 800231a:	f811 1c3c 	ldrb.w	r1, [r1, #-60]
 800231e:	b2c9      	uxtb	r1, r1
 8002320:	2000      	movs	r0, #0
 8002322:	460c      	mov	r4, r1
 8002324:	4605      	mov	r5, r0
 8002326:	ea42 0804 	orr.w	r8, r2, r4
 800232a:	ea43 0905 	orr.w	r9, r3, r5
 800232e:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
		for (int i = 0; i < 8; i++)
 8002332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002334:	3301      	adds	r3, #1
 8002336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800233a:	2b07      	cmp	r3, #7
 800233c:	ddde      	ble.n	80022fc <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
		}

		uint16_t motor_rpm = (full_data >> MITSUBA_RPM_VELOCITY_LSB_BIT_INDEX) & ((1 << MITSUBA_RPM_VELOCITY_LEN) - 1);
 800233e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	08ca      	lsrs	r2, r1, #3
 800234c:	2300      	movs	r3, #0
 800234e:	b293      	uxth	r3, r2
 8002350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002354:	873b      	strh	r3, [r7, #56]	@ 0x38
		uint16_t motor_voltage = (full_data >> MITSUBA_VOLTAGE_LSB_BIT_INDEX) & ((1 << MITSUBA_VOLTAGE_LEN) - 1);
 8002356:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800235a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800235e:	86fb      	strh	r3, [r7, #54]	@ 0x36
		uint16_t motor_current = (full_data >> MITSUBA_CURRENT_LSB_BIT_INDEX) & ((1 << MITSUBA_CURRENT_LEN) - 1);
 8002360:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	0a82      	lsrs	r2, r0, #10
 800236e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002372:	0a8b      	lsrs	r3, r1, #10
 8002374:	b293      	uxth	r3, r2
 8002376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800237a:	86bb      	strh	r3, [r7, #52]	@ 0x34
		uint8_t motor_current_direction = (full_data >> MITSUBA_BATTERY_CURRENT_DIRECTION_BIT_INDEX) & 0x01;
 800237c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	0cc2      	lsrs	r2, r0, #19
 800238a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800238e:	0ccb      	lsrs	r3, r1, #19
 8002390:	b2d3      	uxtb	r3, r2
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		dashboardState.motor_rpm_lsb = motor_rpm & 0xFF;
 800239a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b16      	ldr	r3, [pc, #88]	@ (80023f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80023a0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		dashboardState.motor_rpm_msb = (motor_rpm >> 8) & 0xFF;
 80023a4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80023ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		dashboardState.motor_voltage_lsb = motor_voltage & 0xFF;
 80023b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b10      	ldr	r3, [pc, #64]	@ (80023f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80023b8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		dashboardState.motor_voltage_msb = (motor_voltage >> 8) & 0xFF;
 80023bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80023be:	0a1b      	lsrs	r3, r3, #8
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80023c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		dashboardState.motor_current_lsb = motor_current & 0xFF;
 80023ca:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4b0a      	ldr	r3, [pc, #40]	@ (80023f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80023d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		dashboardState.motor_current_msb = (motor_current >> 8) & 0xFF;
 80023d4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	b29b      	uxth	r3, r3
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80023de:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		dashboardState.motor_current_direction = motor_current_direction;
 80023e2:	4a05      	ldr	r2, [pc, #20]	@ (80023f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80023e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023e8:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
	}
}
 80023ec:	e7ff      	b.n	80023ee <HAL_CAN_RxFifo0MsgPendingCallback+0x1ea>
 80023ee:	bf00      	nop
 80023f0:	3748      	adds	r7, #72	@ 0x48
 80023f2:	46bd      	mov	sp, r7
 80023f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023f8:	20000000 	.word	0x20000000
 80023fc:	08850225 	.word	0x08850225

08002400 <_Z41__static_initialization_and_destruction_0ii>:
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d10a      	bne.n	8002426 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002416:	4293      	cmp	r3, r2
 8002418:	d105      	bne.n	8002426 <_Z41__static_initialization_and_destruction_0ii+0x26>
ILI9341 screen(320, 240);
 800241a:	22f0      	movs	r2, #240	@ 0xf0
 800241c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002420:	4808      	ldr	r0, [pc, #32]	@ (8002444 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002422:	f001 f899 	bl	8003558 <_ZN7ILI9341C1Ess>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d107      	bne.n	800243c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002432:	4293      	cmp	r3, r2
 8002434:	d102      	bne.n	800243c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8002436:	4803      	ldr	r0, [pc, #12]	@ (8002444 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002438:	f001 f928 	bl	800368c <_ZN7ILI9341D1Ev>
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200000d8 	.word	0x200000d8

08002448 <_GLOBAL__sub_I_U5>:
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
 800244c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002450:	2001      	movs	r0, #1
 8002452:	f7ff ffd5 	bl	8002400 <_Z41__static_initialization_and_destruction_0ii>
 8002456:	bd80      	pop	{r7, pc}

08002458 <_GLOBAL__sub_D_U5>:
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
 800245c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002460:	2000      	movs	r0, #0
 8002462:	f7ff ffcd 	bl	8002400 <_Z41__static_initialization_and_destruction_0ii>
 8002466:	bd80      	pop	{r7, pc}

08002468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800246c:	f002 f943 	bl	80046f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002470:	f000 f86c 	bl	800254c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002474:	f000 fbbe 	bl	8002bf4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002478:	f000 fb8a 	bl	8002b90 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 800247c:	f000 f8c8 	bl	8002610 <_ZL12MX_ADC1_Initv>
  MX_I2C4_Init();
 8002480:	f000 fa5e 	bl	8002940 <_ZL12MX_I2C4_Initv>
  MX_CAN1_Init();
 8002484:	f000 f9e8 	bl	8002858 <_ZL12MX_CAN1_Initv>
  MX_CAN2_Init();
 8002488:	f000 fa20 	bl	80028cc <_ZL12MX_CAN2_Initv>
  MX_UART4_Init();
 800248c:	f000 fb4c 	bl	8002b28 <_ZL13MX_UART4_Initv>
  MX_TIM8_Init();
 8002490:	f000 fae8 	bl	8002a64 <_ZL12MX_TIM8_Initv>
  MX_SPI3_Init();
 8002494:	f000 faa2 	bl	80029dc <_ZL12MX_SPI3_Initv>
  /* USER CODE BEGIN 2 */
  CPP_UserSetup();
 8002498:	f7fe febc 	bl	8001214 <CPP_UserSetup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800249c:	f009 fbda 	bl	800bc54 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_Mutex */
  CAN_MutexHandle = osSemaphoreNew(1, 1, &CAN_Mutex_attributes);
 80024a0:	4a19      	ldr	r2, [pc, #100]	@ (8002508 <main+0xa0>)
 80024a2:	2101      	movs	r1, #1
 80024a4:	2001      	movs	r0, #1
 80024a6:	f009 fccc 	bl	800be42 <osSemaphoreNew>
 80024aa:	4603      	mov	r3, r0
 80024ac:	4a17      	ldr	r2, [pc, #92]	@ (800250c <main+0xa4>)
 80024ae:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
 80024b0:	4a17      	ldr	r2, [pc, #92]	@ (8002510 <main+0xa8>)
 80024b2:	2100      	movs	r1, #0
 80024b4:	4817      	ldr	r0, [pc, #92]	@ (8002514 <main+0xac>)
 80024b6:	f009 fc17 	bl	800bce8 <osThreadNew>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4a16      	ldr	r2, [pc, #88]	@ (8002518 <main+0xb0>)
 80024be:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 80024c0:	4a16      	ldr	r2, [pc, #88]	@ (800251c <main+0xb4>)
 80024c2:	2100      	movs	r1, #0
 80024c4:	4816      	ldr	r0, [pc, #88]	@ (8002520 <main+0xb8>)
 80024c6:	f009 fc0f 	bl	800bce8 <osThreadNew>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4a15      	ldr	r2, [pc, #84]	@ (8002524 <main+0xbc>)
 80024ce:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 80024d0:	4a15      	ldr	r2, [pc, #84]	@ (8002528 <main+0xc0>)
 80024d2:	2100      	movs	r1, #0
 80024d4:	4815      	ldr	r0, [pc, #84]	@ (800252c <main+0xc4>)
 80024d6:	f009 fc07 	bl	800bce8 <osThreadNew>
 80024da:	4603      	mov	r3, r0
 80024dc:	4a14      	ldr	r2, [pc, #80]	@ (8002530 <main+0xc8>)
 80024de:	6013      	str	r3, [r2, #0]

  /* creation of Outputs_Control */
  Outputs_ControlHandle = osThreadNew(StartTask04, NULL, &Outputs_Control_attributes);
 80024e0:	4a14      	ldr	r2, [pc, #80]	@ (8002534 <main+0xcc>)
 80024e2:	2100      	movs	r1, #0
 80024e4:	4814      	ldr	r0, [pc, #80]	@ (8002538 <main+0xd0>)
 80024e6:	f009 fbff 	bl	800bce8 <osThreadNew>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4a13      	ldr	r2, [pc, #76]	@ (800253c <main+0xd4>)
 80024ee:	6013      	str	r3, [r2, #0]

  /* creation of ScreenControl */
  ScreenControlHandle = osThreadNew(StartTask05, NULL, &ScreenControl_attributes);
 80024f0:	4a13      	ldr	r2, [pc, #76]	@ (8002540 <main+0xd8>)
 80024f2:	2100      	movs	r1, #0
 80024f4:	4813      	ldr	r0, [pc, #76]	@ (8002544 <main+0xdc>)
 80024f6:	f009 fbf7 	bl	800bce8 <osThreadNew>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4a12      	ldr	r2, [pc, #72]	@ (8002548 <main+0xe0>)
 80024fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002500:	f009 fbcc 	bl	800bc9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002504:	bf00      	nop
 8002506:	e7fd      	b.n	8002504 <main+0x9c>
 8002508:	0800f6b0 	.word	0x0800f6b0
 800250c:	20000434 	.word	0x20000434
 8002510:	0800f5fc 	.word	0x0800f5fc
 8002514:	0800133d 	.word	0x0800133d
 8002518:	20000420 	.word	0x20000420
 800251c:	0800f620 	.word	0x0800f620
 8002520:	080013d5 	.word	0x080013d5
 8002524:	20000424 	.word	0x20000424
 8002528:	0800f644 	.word	0x0800f644
 800252c:	08001575 	.word	0x08001575
 8002530:	20000428 	.word	0x20000428
 8002534:	0800f668 	.word	0x0800f668
 8002538:	080016ed 	.word	0x080016ed
 800253c:	2000042c 	.word	0x2000042c
 8002540:	0800f68c 	.word	0x0800f68c
 8002544:	08001785 	.word	0x08001785
 8002548:	20000430 	.word	0x20000430

0800254c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b096      	sub	sp, #88	@ 0x58
 8002550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002552:	f107 0314 	add.w	r3, r7, #20
 8002556:	2244      	movs	r2, #68	@ 0x44
 8002558:	2100      	movs	r1, #0
 800255a:	4618      	mov	r0, r3
 800255c:	f00c fb9a 	bl	800ec94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002560:	463b      	mov	r3, r7
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
 800256c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800256e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002572:	f005 fef3 	bl	800835c <HAL_PWREx_ControlVoltageScaling>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf14      	ite	ne
 800257c:	2301      	movne	r3, #1
 800257e:	2300      	moveq	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8002586:	f000 fbd5 	bl	8002d34 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800258a:	2310      	movs	r3, #16
 800258c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800258e:	2301      	movs	r3, #1
 8002590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002596:	2360      	movs	r3, #96	@ 0x60
 8002598:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800259a:	2302      	movs	r3, #2
 800259c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800259e:	2301      	movs	r3, #1
 80025a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80025a2:	2301      	movs	r3, #1
 80025a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80025a6:	2314      	movs	r3, #20
 80025a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025aa:	2302      	movs	r3, #2
 80025ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80025ae:	2302      	movs	r3, #2
 80025b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80025b2:	2302      	movs	r3, #2
 80025b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025b6:	f107 0314 	add.w	r3, r7, #20
 80025ba:	4618      	mov	r0, r3
 80025bc:	f005 ff24 	bl	8008408 <HAL_RCC_OscConfig>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	bf14      	ite	ne
 80025c6:	2301      	movne	r3, #1
 80025c8:	2300      	moveq	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 80025d0:	f000 fbb0 	bl	8002d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025d4:	230f      	movs	r3, #15
 80025d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025d8:	2303      	movs	r3, #3
 80025da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025e8:	463b      	mov	r3, r7
 80025ea:	2102      	movs	r1, #2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f006 fb25 	bl	8008c3c <HAL_RCC_ClockConfig>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf14      	ite	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	2300      	moveq	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8002602:	f000 fb97 	bl	8002d34 <Error_Handler>
  }
}
 8002606:	bf00      	nop
 8002608:	3758      	adds	r7, #88	@ 0x58
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	@ 0x28
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002616:	f107 031c 	add.w	r3, r7, #28
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
 8002630:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002632:	4b86      	ldr	r3, [pc, #536]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 8002634:	4a86      	ldr	r2, [pc, #536]	@ (8002850 <_ZL12MX_ADC1_Initv+0x240>)
 8002636:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002638:	4b84      	ldr	r3, [pc, #528]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 800263a:	2200      	movs	r2, #0
 800263c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800263e:	4b83      	ldr	r3, [pc, #524]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002644:	4b81      	ldr	r3, [pc, #516]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 8002646:	2200      	movs	r2, #0
 8002648:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800264a:	4b80      	ldr	r3, [pc, #512]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 800264c:	2201      	movs	r2, #1
 800264e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002650:	4b7e      	ldr	r3, [pc, #504]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 8002652:	2208      	movs	r2, #8
 8002654:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002656:	4b7d      	ldr	r3, [pc, #500]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 8002658:	2200      	movs	r2, #0
 800265a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800265c:	4b7b      	ldr	r3, [pc, #492]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 800265e:	2201      	movs	r2, #1
 8002660:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 8002662:	4b7a      	ldr	r3, [pc, #488]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 8002664:	220a      	movs	r2, #10
 8002666:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002668:	4b78      	ldr	r3, [pc, #480]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002670:	4b76      	ldr	r3, [pc, #472]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 8002672:	2200      	movs	r2, #0
 8002674:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002676:	4b75      	ldr	r3, [pc, #468]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 8002678:	2200      	movs	r2, #0
 800267a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800267c:	4b73      	ldr	r3, [pc, #460]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002684:	4b71      	ldr	r3, [pc, #452]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 8002686:	2200      	movs	r2, #0
 8002688:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800268a:	4b70      	ldr	r3, [pc, #448]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002692:	486e      	ldr	r0, [pc, #440]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 8002694:	f002 fac2 	bl	8004c1c <HAL_ADC_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	bf14      	ite	ne
 800269e:	2301      	movne	r3, #1
 80026a0:	2300      	moveq	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 80026a8:	f000 fb44 	bl	8002d34 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80026b0:	f107 031c 	add.w	r3, r7, #28
 80026b4:	4619      	mov	r1, r3
 80026b6:	4865      	ldr	r0, [pc, #404]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 80026b8:	f003 fb9e 	bl	8005df8 <HAL_ADCEx_MultiModeConfigChannel>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	bf14      	ite	ne
 80026c2:	2301      	movne	r3, #1
 80026c4:	2300      	moveq	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 80026cc:	f000 fb32 	bl	8002d34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80026d0:	4b60      	ldr	r3, [pc, #384]	@ (8002854 <_ZL12MX_ADC1_Initv+0x244>)
 80026d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026d4:	2306      	movs	r3, #6
 80026d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80026dc:	237f      	movs	r3, #127	@ 0x7f
 80026de:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80026e0:	2304      	movs	r3, #4
 80026e2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	4619      	mov	r1, r3
 80026ec:	4857      	ldr	r0, [pc, #348]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 80026ee:	f002 fd1b 	bl	8005128 <HAL_ADC_ConfigChannel>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bf14      	ite	ne
 80026f8:	2301      	movne	r3, #1
 80026fa:	2300      	moveq	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 8002702:	f000 fb17 	bl	8002d34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002706:	230c      	movs	r3, #12
 8002708:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800270a:	1d3b      	adds	r3, r7, #4
 800270c:	4619      	mov	r1, r3
 800270e:	484f      	ldr	r0, [pc, #316]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 8002710:	f002 fd0a 	bl	8005128 <HAL_ADC_ConfigChannel>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	bf14      	ite	ne
 800271a:	2301      	movne	r3, #1
 800271c:	2300      	moveq	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <_ZL12MX_ADC1_Initv+0x118>
  {
    Error_Handler();
 8002724:	f000 fb06 	bl	8002d34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002728:	2312      	movs	r3, #18
 800272a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	4619      	mov	r1, r3
 8002730:	4846      	ldr	r0, [pc, #280]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 8002732:	f002 fcf9 	bl	8005128 <HAL_ADC_ConfigChannel>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf14      	ite	ne
 800273c:	2301      	movne	r3, #1
 800273e:	2300      	moveq	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <_ZL12MX_ADC1_Initv+0x13a>
  {
    Error_Handler();
 8002746:	f000 faf5 	bl	8002d34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800274a:	2318      	movs	r3, #24
 800274c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	4619      	mov	r1, r3
 8002752:	483e      	ldr	r0, [pc, #248]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 8002754:	f002 fce8 	bl	8005128 <HAL_ADC_ConfigChannel>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	bf14      	ite	ne
 800275e:	2301      	movne	r3, #1
 8002760:	2300      	moveq	r3, #0
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <_ZL12MX_ADC1_Initv+0x15c>
  {
    Error_Handler();
 8002768:	f000 fae4 	bl	8002d34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800276c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002770:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4835      	ldr	r0, [pc, #212]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 8002778:	f002 fcd6 	bl	8005128 <HAL_ADC_ConfigChannel>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	bf14      	ite	ne
 8002782:	2301      	movne	r3, #1
 8002784:	2300      	moveq	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <_ZL12MX_ADC1_Initv+0x180>
  {
    Error_Handler();
 800278c:	f000 fad2 	bl	8002d34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002790:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8002794:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	4619      	mov	r1, r3
 800279a:	482c      	ldr	r0, [pc, #176]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 800279c:	f002 fcc4 	bl	8005128 <HAL_ADC_ConfigChannel>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bf14      	ite	ne
 80027a6:	2301      	movne	r3, #1
 80027a8:	2300      	moveq	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <_ZL12MX_ADC1_Initv+0x1a4>
  {
    Error_Handler();
 80027b0:	f000 fac0 	bl	8002d34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80027b4:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80027b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	4619      	mov	r1, r3
 80027be:	4823      	ldr	r0, [pc, #140]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 80027c0:	f002 fcb2 	bl	8005128 <HAL_ADC_ConfigChannel>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	bf14      	ite	ne
 80027ca:	2301      	movne	r3, #1
 80027cc:	2300      	moveq	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <_ZL12MX_ADC1_Initv+0x1c8>
  {
    Error_Handler();
 80027d4:	f000 faae 	bl	8002d34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80027d8:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80027dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	4619      	mov	r1, r3
 80027e2:	481a      	ldr	r0, [pc, #104]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 80027e4:	f002 fca0 	bl	8005128 <HAL_ADC_ConfigChannel>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bf14      	ite	ne
 80027ee:	2301      	movne	r3, #1
 80027f0:	2300      	moveq	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <_ZL12MX_ADC1_Initv+0x1ec>
  {
    Error_Handler();
 80027f8:	f000 fa9c 	bl	8002d34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80027fc:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8002800:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	4619      	mov	r1, r3
 8002806:	4811      	ldr	r0, [pc, #68]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 8002808:	f002 fc8e 	bl	8005128 <HAL_ADC_ConfigChannel>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	bf14      	ite	ne
 8002812:	2301      	movne	r3, #1
 8002814:	2300      	moveq	r3, #0
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <_ZL12MX_ADC1_Initv+0x210>
  {
    Error_Handler();
 800281c:	f000 fa8a 	bl	8002d34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8002820:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002824:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	4619      	mov	r1, r3
 800282a:	4808      	ldr	r0, [pc, #32]	@ (800284c <_ZL12MX_ADC1_Initv+0x23c>)
 800282c:	f002 fc7c 	bl	8005128 <HAL_ADC_ConfigChannel>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	bf14      	ite	ne
 8002836:	2301      	movne	r3, #1
 8002838:	2300      	moveq	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <_ZL12MX_ADC1_Initv+0x234>
  {
    Error_Handler();
 8002840:	f000 fa78 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002844:	bf00      	nop
 8002846:	3728      	adds	r7, #40	@ 0x28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	2000014c 	.word	0x2000014c
 8002850:	50040000 	.word	0x50040000
 8002854:	04300002 	.word	0x04300002

08002858 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800285c:	4b19      	ldr	r3, [pc, #100]	@ (80028c4 <_ZL12MX_CAN1_Initv+0x6c>)
 800285e:	4a1a      	ldr	r2, [pc, #104]	@ (80028c8 <_ZL12MX_CAN1_Initv+0x70>)
 8002860:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8002862:	4b18      	ldr	r3, [pc, #96]	@ (80028c4 <_ZL12MX_CAN1_Initv+0x6c>)
 8002864:	2208      	movs	r2, #8
 8002866:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002868:	4b16      	ldr	r3, [pc, #88]	@ (80028c4 <_ZL12MX_CAN1_Initv+0x6c>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800286e:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <_ZL12MX_CAN1_Initv+0x6c>)
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8002874:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <_ZL12MX_CAN1_Initv+0x6c>)
 8002876:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800287a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800287c:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <_ZL12MX_CAN1_Initv+0x6c>)
 800287e:	2200      	movs	r2, #0
 8002880:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <_ZL12MX_CAN1_Initv+0x6c>)
 8002884:	2200      	movs	r2, #0
 8002886:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002888:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <_ZL12MX_CAN1_Initv+0x6c>)
 800288a:	2200      	movs	r2, #0
 800288c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800288e:	4b0d      	ldr	r3, [pc, #52]	@ (80028c4 <_ZL12MX_CAN1_Initv+0x6c>)
 8002890:	2200      	movs	r2, #0
 8002892:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002894:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <_ZL12MX_CAN1_Initv+0x6c>)
 8002896:	2200      	movs	r2, #0
 8002898:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800289a:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <_ZL12MX_CAN1_Initv+0x6c>)
 800289c:	2200      	movs	r2, #0
 800289e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80028a0:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <_ZL12MX_CAN1_Initv+0x6c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80028a6:	4807      	ldr	r0, [pc, #28]	@ (80028c4 <_ZL12MX_CAN1_Initv+0x6c>)
 80028a8:	f003 fb56 	bl	8005f58 <HAL_CAN_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	bf14      	ite	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	2300      	moveq	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 80028bc:	f000 fa3a 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	200001fc 	.word	0x200001fc
 80028c8:	40006400 	.word	0x40006400

080028cc <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80028d0:	4b19      	ldr	r3, [pc, #100]	@ (8002938 <_ZL12MX_CAN2_Initv+0x6c>)
 80028d2:	4a1a      	ldr	r2, [pc, #104]	@ (800293c <_ZL12MX_CAN2_Initv+0x70>)
 80028d4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 8;
 80028d6:	4b18      	ldr	r3, [pc, #96]	@ (8002938 <_ZL12MX_CAN2_Initv+0x6c>)
 80028d8:	2208      	movs	r2, #8
 80028da:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80028dc:	4b16      	ldr	r3, [pc, #88]	@ (8002938 <_ZL12MX_CAN2_Initv+0x6c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80028e2:	4b15      	ldr	r3, [pc, #84]	@ (8002938 <_ZL12MX_CAN2_Initv+0x6c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_8TQ;
 80028e8:	4b13      	ldr	r3, [pc, #76]	@ (8002938 <_ZL12MX_CAN2_Initv+0x6c>)
 80028ea:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80028ee:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80028f0:	4b11      	ldr	r3, [pc, #68]	@ (8002938 <_ZL12MX_CAN2_Initv+0x6c>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80028f6:	4b10      	ldr	r3, [pc, #64]	@ (8002938 <_ZL12MX_CAN2_Initv+0x6c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80028fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002938 <_ZL12MX_CAN2_Initv+0x6c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002902:	4b0d      	ldr	r3, [pc, #52]	@ (8002938 <_ZL12MX_CAN2_Initv+0x6c>)
 8002904:	2200      	movs	r2, #0
 8002906:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002908:	4b0b      	ldr	r3, [pc, #44]	@ (8002938 <_ZL12MX_CAN2_Initv+0x6c>)
 800290a:	2200      	movs	r2, #0
 800290c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800290e:	4b0a      	ldr	r3, [pc, #40]	@ (8002938 <_ZL12MX_CAN2_Initv+0x6c>)
 8002910:	2200      	movs	r2, #0
 8002912:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002914:	4b08      	ldr	r3, [pc, #32]	@ (8002938 <_ZL12MX_CAN2_Initv+0x6c>)
 8002916:	2200      	movs	r2, #0
 8002918:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800291a:	4807      	ldr	r0, [pc, #28]	@ (8002938 <_ZL12MX_CAN2_Initv+0x6c>)
 800291c:	f003 fb1c 	bl	8005f58 <HAL_CAN_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	bf14      	ite	ne
 8002926:	2301      	movne	r3, #1
 8002928:	2300      	moveq	r3, #0
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <_ZL12MX_CAN2_Initv+0x68>
  {
    Error_Handler();
 8002930:	f000 fa00 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000224 	.word	0x20000224
 800293c:	40006800 	.word	0x40006800

08002940 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002944:	4b22      	ldr	r3, [pc, #136]	@ (80029d0 <_ZL12MX_I2C4_Initv+0x90>)
 8002946:	4a23      	ldr	r2, [pc, #140]	@ (80029d4 <_ZL12MX_I2C4_Initv+0x94>)
 8002948:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00D09BE3;
 800294a:	4b21      	ldr	r3, [pc, #132]	@ (80029d0 <_ZL12MX_I2C4_Initv+0x90>)
 800294c:	4a22      	ldr	r2, [pc, #136]	@ (80029d8 <_ZL12MX_I2C4_Initv+0x98>)
 800294e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002950:	4b1f      	ldr	r3, [pc, #124]	@ (80029d0 <_ZL12MX_I2C4_Initv+0x90>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002956:	4b1e      	ldr	r3, [pc, #120]	@ (80029d0 <_ZL12MX_I2C4_Initv+0x90>)
 8002958:	2201      	movs	r2, #1
 800295a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800295c:	4b1c      	ldr	r3, [pc, #112]	@ (80029d0 <_ZL12MX_I2C4_Initv+0x90>)
 800295e:	2200      	movs	r2, #0
 8002960:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002962:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <_ZL12MX_I2C4_Initv+0x90>)
 8002964:	2200      	movs	r2, #0
 8002966:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002968:	4b19      	ldr	r3, [pc, #100]	@ (80029d0 <_ZL12MX_I2C4_Initv+0x90>)
 800296a:	2200      	movs	r2, #0
 800296c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800296e:	4b18      	ldr	r3, [pc, #96]	@ (80029d0 <_ZL12MX_I2C4_Initv+0x90>)
 8002970:	2200      	movs	r2, #0
 8002972:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002974:	4b16      	ldr	r3, [pc, #88]	@ (80029d0 <_ZL12MX_I2C4_Initv+0x90>)
 8002976:	2200      	movs	r2, #0
 8002978:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800297a:	4815      	ldr	r0, [pc, #84]	@ (80029d0 <_ZL12MX_I2C4_Initv+0x90>)
 800297c:	f004 febc 	bl	80076f8 <HAL_I2C_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	bf14      	ite	ne
 8002986:	2301      	movne	r3, #1
 8002988:	2300      	moveq	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8002990:	f000 f9d0 	bl	8002d34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002994:	2100      	movs	r1, #0
 8002996:	480e      	ldr	r0, [pc, #56]	@ (80029d0 <_ZL12MX_I2C4_Initv+0x90>)
 8002998:	f005 fc3a 	bl	8008210 <HAL_I2CEx_ConfigAnalogFilter>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bf14      	ite	ne
 80029a2:	2301      	movne	r3, #1
 80029a4:	2300      	moveq	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 80029ac:	f000 f9c2 	bl	8002d34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80029b0:	2100      	movs	r1, #0
 80029b2:	4807      	ldr	r0, [pc, #28]	@ (80029d0 <_ZL12MX_I2C4_Initv+0x90>)
 80029b4:	f005 fc77 	bl	80082a6 <HAL_I2CEx_ConfigDigitalFilter>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bf14      	ite	ne
 80029be:	2301      	movne	r3, #1
 80029c0:	2300      	moveq	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 80029c8:	f000 f9b4 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	2000024c 	.word	0x2000024c
 80029d4:	40008400 	.word	0x40008400
 80029d8:	00d09be3 	.word	0x00d09be3

080029dc <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80029e0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a5c <_ZL12MX_SPI3_Initv+0x80>)
 80029e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a60 <_ZL12MX_SPI3_Initv+0x84>)
 80029e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80029e6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a5c <_ZL12MX_SPI3_Initv+0x80>)
 80029e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80029ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80029ee:	4b1b      	ldr	r3, [pc, #108]	@ (8002a5c <_ZL12MX_SPI3_Initv+0x80>)
 80029f0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80029f4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80029f6:	4b19      	ldr	r3, [pc, #100]	@ (8002a5c <_ZL12MX_SPI3_Initv+0x80>)
 80029f8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80029fc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029fe:	4b17      	ldr	r3, [pc, #92]	@ (8002a5c <_ZL12MX_SPI3_Initv+0x80>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a04:	4b15      	ldr	r3, [pc, #84]	@ (8002a5c <_ZL12MX_SPI3_Initv+0x80>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002a0a:	4b14      	ldr	r3, [pc, #80]	@ (8002a5c <_ZL12MX_SPI3_Initv+0x80>)
 8002a0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a10:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a12:	4b12      	ldr	r3, [pc, #72]	@ (8002a5c <_ZL12MX_SPI3_Initv+0x80>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a18:	4b10      	ldr	r3, [pc, #64]	@ (8002a5c <_ZL12MX_SPI3_Initv+0x80>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a5c <_ZL12MX_SPI3_Initv+0x80>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a24:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <_ZL12MX_SPI3_Initv+0x80>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a5c <_ZL12MX_SPI3_Initv+0x80>)
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a30:	4b0a      	ldr	r3, [pc, #40]	@ (8002a5c <_ZL12MX_SPI3_Initv+0x80>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a36:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <_ZL12MX_SPI3_Initv+0x80>)
 8002a38:	2208      	movs	r2, #8
 8002a3a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002a3c:	4807      	ldr	r0, [pc, #28]	@ (8002a5c <_ZL12MX_SPI3_Initv+0x80>)
 8002a3e:	f007 f81d 	bl	8009a7c <HAL_SPI_Init>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf14      	ite	ne
 8002a48:	2301      	movne	r3, #1
 8002a4a:	2300      	moveq	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <_ZL12MX_SPI3_Initv+0x7a>
  {
    Error_Handler();
 8002a52:	f000 f96f 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200002a0 	.word	0x200002a0
 8002a60:	40003c00 	.word	0x40003c00

08002a64 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a6a:	f107 0310 	add.w	r3, r7, #16
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a78:	1d3b      	adds	r3, r7, #4
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002a82:	4b27      	ldr	r3, [pc, #156]	@ (8002b20 <_ZL12MX_TIM8_Initv+0xbc>)
 8002a84:	4a27      	ldr	r2, [pc, #156]	@ (8002b24 <_ZL12MX_TIM8_Initv+0xc0>)
 8002a86:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8002a88:	4b25      	ldr	r3, [pc, #148]	@ (8002b20 <_ZL12MX_TIM8_Initv+0xbc>)
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a8e:	4b24      	ldr	r3, [pc, #144]	@ (8002b20 <_ZL12MX_TIM8_Initv+0xbc>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 799;
 8002a94:	4b22      	ldr	r3, [pc, #136]	@ (8002b20 <_ZL12MX_TIM8_Initv+0xbc>)
 8002a96:	f240 321f 	movw	r2, #799	@ 0x31f
 8002a9a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a9c:	4b20      	ldr	r3, [pc, #128]	@ (8002b20 <_ZL12MX_TIM8_Initv+0xbc>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b20 <_ZL12MX_TIM8_Initv+0xbc>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b20 <_ZL12MX_TIM8_Initv+0xbc>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002aae:	481c      	ldr	r0, [pc, #112]	@ (8002b20 <_ZL12MX_TIM8_Initv+0xbc>)
 8002ab0:	f007 f887 	bl	8009bc2 <HAL_TIM_Base_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	bf14      	ite	ne
 8002aba:	2301      	movne	r3, #1
 8002abc:	2300      	moveq	r3, #0
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <_ZL12MX_TIM8_Initv+0x64>
  {
    Error_Handler();
 8002ac4:	f000 f936 	bl	8002d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002acc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002ace:	f107 0310 	add.w	r3, r7, #16
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4812      	ldr	r0, [pc, #72]	@ (8002b20 <_ZL12MX_TIM8_Initv+0xbc>)
 8002ad6:	f007 fa42 	bl	8009f5e <HAL_TIM_ConfigClockSource>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf14      	ite	ne
 8002ae0:	2301      	movne	r3, #1
 8002ae2:	2300      	moveq	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <_ZL12MX_TIM8_Initv+0x8a>
  {
    Error_Handler();
 8002aea:	f000 f923 	bl	8002d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aee:	2300      	movs	r3, #0
 8002af0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002afa:	1d3b      	adds	r3, r7, #4
 8002afc:	4619      	mov	r1, r3
 8002afe:	4808      	ldr	r0, [pc, #32]	@ (8002b20 <_ZL12MX_TIM8_Initv+0xbc>)
 8002b00:	f007 fc5e 	bl	800a3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	bf14      	ite	ne
 8002b0a:	2301      	movne	r3, #1
 8002b0c:	2300      	moveq	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <_ZL12MX_TIM8_Initv+0xb4>
  {
    Error_Handler();
 8002b14:	f000 f90e 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002b18:	bf00      	nop
 8002b1a:	3720      	adds	r7, #32
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	2000034c 	.word	0x2000034c
 8002b24:	40013400 	.word	0x40013400

08002b28 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002b2c:	4b16      	ldr	r3, [pc, #88]	@ (8002b88 <_ZL13MX_UART4_Initv+0x60>)
 8002b2e:	4a17      	ldr	r2, [pc, #92]	@ (8002b8c <_ZL13MX_UART4_Initv+0x64>)
 8002b30:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002b32:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <_ZL13MX_UART4_Initv+0x60>)
 8002b34:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002b38:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002b3a:	4b13      	ldr	r3, [pc, #76]	@ (8002b88 <_ZL13MX_UART4_Initv+0x60>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002b40:	4b11      	ldr	r3, [pc, #68]	@ (8002b88 <_ZL13MX_UART4_Initv+0x60>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002b46:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <_ZL13MX_UART4_Initv+0x60>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b88 <_ZL13MX_UART4_Initv+0x60>)
 8002b4e:	220c      	movs	r2, #12
 8002b50:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b52:	4b0d      	ldr	r3, [pc, #52]	@ (8002b88 <_ZL13MX_UART4_Initv+0x60>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b58:	4b0b      	ldr	r3, [pc, #44]	@ (8002b88 <_ZL13MX_UART4_Initv+0x60>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b88 <_ZL13MX_UART4_Initv+0x60>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b64:	4b08      	ldr	r3, [pc, #32]	@ (8002b88 <_ZL13MX_UART4_Initv+0x60>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002b6a:	4807      	ldr	r0, [pc, #28]	@ (8002b88 <_ZL13MX_UART4_Initv+0x60>)
 8002b6c:	f007 fcce 	bl	800a50c <HAL_UART_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bf14      	ite	ne
 8002b76:	2301      	movne	r3, #1
 8002b78:	2300      	moveq	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 8002b80:	f000 f8d8 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002b84:	bf00      	nop
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000398 	.word	0x20000398
 8002b8c:	40004c00 	.word	0x40004c00

08002b90 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b96:	4b16      	ldr	r3, [pc, #88]	@ (8002bf0 <_ZL11MX_DMA_Initv+0x60>)
 8002b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b9a:	4a15      	ldr	r2, [pc, #84]	@ (8002bf0 <_ZL11MX_DMA_Initv+0x60>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6493      	str	r3, [r2, #72]	@ 0x48
 8002ba2:	4b13      	ldr	r3, [pc, #76]	@ (8002bf0 <_ZL11MX_DMA_Initv+0x60>)
 8002ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bae:	4b10      	ldr	r3, [pc, #64]	@ (8002bf0 <_ZL11MX_DMA_Initv+0x60>)
 8002bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8002bf0 <_ZL11MX_DMA_Initv+0x60>)
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	6493      	str	r3, [r2, #72]	@ 0x48
 8002bba:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf0 <_ZL11MX_DMA_Initv+0x60>)
 8002bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2105      	movs	r1, #5
 8002bca:	200b      	movs	r0, #11
 8002bcc:	f004 f918 	bl	8006e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002bd0:	200b      	movs	r0, #11
 8002bd2:	f004 f931 	bl	8006e38 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2105      	movs	r1, #5
 8002bda:	2039      	movs	r0, #57	@ 0x39
 8002bdc:	f004 f910 	bl	8006e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8002be0:	2039      	movs	r0, #57	@ 0x39
 8002be2:	f004 f929 	bl	8006e38 <HAL_NVIC_EnableIRQ>

}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000

08002bf4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfa:	f107 030c 	add.w	r3, r7, #12
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	60da      	str	r2, [r3, #12]
 8002c08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d04 <_ZL12MX_GPIO_Initv+0x110>)
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0e:	4a3d      	ldr	r2, [pc, #244]	@ (8002d04 <_ZL12MX_GPIO_Initv+0x110>)
 8002c10:	f043 0304 	orr.w	r3, r3, #4
 8002c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c16:	4b3b      	ldr	r3, [pc, #236]	@ (8002d04 <_ZL12MX_GPIO_Initv+0x110>)
 8002c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c22:	4b38      	ldr	r3, [pc, #224]	@ (8002d04 <_ZL12MX_GPIO_Initv+0x110>)
 8002c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c26:	4a37      	ldr	r2, [pc, #220]	@ (8002d04 <_ZL12MX_GPIO_Initv+0x110>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c2e:	4b35      	ldr	r3, [pc, #212]	@ (8002d04 <_ZL12MX_GPIO_Initv+0x110>)
 8002c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3a:	4b32      	ldr	r3, [pc, #200]	@ (8002d04 <_ZL12MX_GPIO_Initv+0x110>)
 8002c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3e:	4a31      	ldr	r2, [pc, #196]	@ (8002d04 <_ZL12MX_GPIO_Initv+0x110>)
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c46:	4b2f      	ldr	r3, [pc, #188]	@ (8002d04 <_ZL12MX_GPIO_Initv+0x110>)
 8002c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8002c52:	2200      	movs	r2, #0
 8002c54:	f248 11ff 	movw	r1, #33279	@ 0x81ff
 8002c58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c5c:	f004 fd02 	bl	8007664 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |OK_LED_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Backlight_PWM_GPIO_Port, Backlight_PWM_Pin, GPIO_PIN_RESET);
 8002c60:	2200      	movs	r2, #0
 8002c62:	2110      	movs	r1, #16
 8002c64:	4828      	ldr	r0, [pc, #160]	@ (8002d08 <_ZL12MX_GPIO_Initv+0x114>)
 8002c66:	f004 fcfd 	bl	8007664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C_D_Pin|WR_Pin|RD_Pin|Parallel_CS_Pin
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f241 0117 	movw	r1, #4119	@ 0x1017
 8002c70:	4826      	ldr	r0, [pc, #152]	@ (8002d0c <_ZL12MX_GPIO_Initv+0x118>)
 8002c72:	f004 fcf7 	bl	8007664 <HAL_GPIO_WritePin>
                          |D_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Alert1_Pin */
  GPIO_InitStruct.Pin = Alert1_Pin;
 8002c76:	2304      	movs	r3, #4
 8002c78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c7a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002c7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c80:	2301      	movs	r3, #1
 8002c82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alert1_GPIO_Port, &GPIO_InitStruct);
 8002c84:	f107 030c 	add.w	r3, r7, #12
 8002c88:	4619      	mov	r1, r3
 8002c8a:	481f      	ldr	r0, [pc, #124]	@ (8002d08 <_ZL12MX_GPIO_Initv+0x114>)
 8002c8c:	f004 fb58 	bl	8007340 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin
                           OK_LED_Pin PA15 */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8002c90:	f248 13ff 	movw	r3, #33279	@ 0x81ff
 8002c94:	60fb      	str	r3, [r7, #12]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |OK_LED_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c96:	2301      	movs	r3, #1
 8002c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca2:	f107 030c 	add.w	r3, r7, #12
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cac:	f004 fb48 	bl	8007340 <HAL_GPIO_Init>

  /*Configure GPIO pin : Backlight_PWM_Pin */
  GPIO_InitStruct.Pin = Backlight_PWM_Pin;
 8002cb0:	2310      	movs	r3, #16
 8002cb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Backlight_PWM_GPIO_Port, &GPIO_InitStruct);
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4810      	ldr	r0, [pc, #64]	@ (8002d08 <_ZL12MX_GPIO_Initv+0x114>)
 8002cc8:	f004 fb3a 	bl	8007340 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_D_Pin WR_Pin RD_Pin Parallel_CS_Pin
                           D_C_Pin */
  GPIO_InitStruct.Pin = C_D_Pin|WR_Pin|RD_Pin|Parallel_CS_Pin
 8002ccc:	f241 0317 	movw	r3, #4119	@ 0x1017
 8002cd0:	60fb      	str	r3, [r7, #12]
                          |D_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cde:	f107 030c 	add.w	r3, r7, #12
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4809      	ldr	r0, [pc, #36]	@ (8002d0c <_ZL12MX_GPIO_Initv+0x118>)
 8002ce6:	f004 fb2b 	bl	8007340 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2105      	movs	r1, #5
 8002cee:	2008      	movs	r0, #8
 8002cf0:	f004 f886 	bl	8006e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002cf4:	2008      	movs	r0, #8
 8002cf6:	f004 f89f 	bl	8006e38 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cfa:	bf00      	nop
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000
 8002d08:	48000800 	.word	0x48000800
 8002d0c:	48000400 	.word	0x48000400

08002d10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a04      	ldr	r2, [pc, #16]	@ (8002d30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d101      	bne.n	8002d26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d22:	f001 fd01 	bl	8004728 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40000400 	.word	0x40000400

08002d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d38:	b672      	cpsid	i
}
 8002d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d3c:	bf00      	nop
 8002d3e:	e7fd      	b.n	8002d3c <Error_Handler+0x8>

08002d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d46:	4b11      	ldr	r3, [pc, #68]	@ (8002d8c <HAL_MspInit+0x4c>)
 8002d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4a:	4a10      	ldr	r2, [pc, #64]	@ (8002d8c <HAL_MspInit+0x4c>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d52:	4b0e      	ldr	r3, [pc, #56]	@ (8002d8c <HAL_MspInit+0x4c>)
 8002d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	607b      	str	r3, [r7, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d8c <HAL_MspInit+0x4c>)
 8002d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d62:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <HAL_MspInit+0x4c>)
 8002d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d68:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d6a:	4b08      	ldr	r3, [pc, #32]	@ (8002d8c <HAL_MspInit+0x4c>)
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d76:	2200      	movs	r2, #0
 8002d78:	210f      	movs	r1, #15
 8002d7a:	f06f 0001 	mvn.w	r0, #1
 8002d7e:	f004 f83f 	bl	8006e00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000

08002d90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b0ac      	sub	sp, #176	@ 0xb0
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002da8:	f107 0310 	add.w	r3, r7, #16
 8002dac:	228c      	movs	r2, #140	@ 0x8c
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f00b ff6f 	bl	800ec94 <memset>
  if(hadc->Instance==ADC1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a35      	ldr	r2, [pc, #212]	@ (8002e90 <HAL_ADC_MspInit+0x100>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d163      	bne.n	8002e88 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002dc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002dc4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002dc6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002dca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dce:	f107 0310 	add.w	r3, r7, #16
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f006 f988 	bl	80090e8 <HAL_RCCEx_PeriphCLKConfig>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002dde:	f7ff ffa9 	bl	8002d34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002de2:	4b2c      	ldr	r3, [pc, #176]	@ (8002e94 <HAL_ADC_MspInit+0x104>)
 8002de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de6:	4a2b      	ldr	r2, [pc, #172]	@ (8002e94 <HAL_ADC_MspInit+0x104>)
 8002de8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002dec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dee:	4b29      	ldr	r3, [pc, #164]	@ (8002e94 <HAL_ADC_MspInit+0x104>)
 8002df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dfa:	4b26      	ldr	r3, [pc, #152]	@ (8002e94 <HAL_ADC_MspInit+0x104>)
 8002dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfe:	4a25      	ldr	r2, [pc, #148]	@ (8002e94 <HAL_ADC_MspInit+0x104>)
 8002e00:	f043 0304 	orr.w	r3, r3, #4
 8002e04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e06:	4b23      	ldr	r3, [pc, #140]	@ (8002e94 <HAL_ADC_MspInit+0x104>)
 8002e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e28:	4619      	mov	r1, r3
 8002e2a:	481b      	ldr	r0, [pc, #108]	@ (8002e98 <HAL_ADC_MspInit+0x108>)
 8002e2c:	f004 fa88 	bl	8007340 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002e30:	4b1a      	ldr	r3, [pc, #104]	@ (8002e9c <HAL_ADC_MspInit+0x10c>)
 8002e32:	4a1b      	ldr	r2, [pc, #108]	@ (8002ea0 <HAL_ADC_MspInit+0x110>)
 8002e34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002e36:	4b19      	ldr	r3, [pc, #100]	@ (8002e9c <HAL_ADC_MspInit+0x10c>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e3c:	4b17      	ldr	r3, [pc, #92]	@ (8002e9c <HAL_ADC_MspInit+0x10c>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e42:	4b16      	ldr	r3, [pc, #88]	@ (8002e9c <HAL_ADC_MspInit+0x10c>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e48:	4b14      	ldr	r3, [pc, #80]	@ (8002e9c <HAL_ADC_MspInit+0x10c>)
 8002e4a:	2280      	movs	r2, #128	@ 0x80
 8002e4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e4e:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <HAL_ADC_MspInit+0x10c>)
 8002e50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e56:	4b11      	ldr	r3, [pc, #68]	@ (8002e9c <HAL_ADC_MspInit+0x10c>)
 8002e58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e9c <HAL_ADC_MspInit+0x10c>)
 8002e60:	2220      	movs	r2, #32
 8002e62:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002e64:	4b0d      	ldr	r3, [pc, #52]	@ (8002e9c <HAL_ADC_MspInit+0x10c>)
 8002e66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e6c:	480b      	ldr	r0, [pc, #44]	@ (8002e9c <HAL_ADC_MspInit+0x10c>)
 8002e6e:	f003 fff1 	bl	8006e54 <HAL_DMA_Init>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 8002e78:	f7ff ff5c 	bl	8002d34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a07      	ldr	r2, [pc, #28]	@ (8002e9c <HAL_ADC_MspInit+0x10c>)
 8002e80:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e82:	4a06      	ldr	r2, [pc, #24]	@ (8002e9c <HAL_ADC_MspInit+0x10c>)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002e88:	bf00      	nop
 8002e8a:	37b0      	adds	r7, #176	@ 0xb0
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	50040000 	.word	0x50040000
 8002e94:	40021000 	.word	0x40021000
 8002e98:	48000800 	.word	0x48000800
 8002e9c:	200001b4 	.word	0x200001b4
 8002ea0:	40020008 	.word	0x40020008

08002ea4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08c      	sub	sp, #48	@ 0x30
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eac:	f107 031c 	add.w	r3, r7, #28
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a52      	ldr	r2, [pc, #328]	@ (800300c <HAL_CAN_MspInit+0x168>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d14b      	bne.n	8002f5e <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002ec6:	4b52      	ldr	r3, [pc, #328]	@ (8003010 <HAL_CAN_MspInit+0x16c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	4a50      	ldr	r2, [pc, #320]	@ (8003010 <HAL_CAN_MspInit+0x16c>)
 8002ece:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8003010 <HAL_CAN_MspInit+0x16c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d10b      	bne.n	8002ef0 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002ed8:	4b4e      	ldr	r3, [pc, #312]	@ (8003014 <HAL_CAN_MspInit+0x170>)
 8002eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002edc:	4a4d      	ldr	r2, [pc, #308]	@ (8003014 <HAL_CAN_MspInit+0x170>)
 8002ede:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ee2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ee4:	4b4b      	ldr	r3, [pc, #300]	@ (8003014 <HAL_CAN_MspInit+0x170>)
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef0:	4b48      	ldr	r3, [pc, #288]	@ (8003014 <HAL_CAN_MspInit+0x170>)
 8002ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef4:	4a47      	ldr	r2, [pc, #284]	@ (8003014 <HAL_CAN_MspInit+0x170>)
 8002ef6:	f043 0302 	orr.w	r3, r3, #2
 8002efa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002efc:	4b45      	ldr	r3, [pc, #276]	@ (8003014 <HAL_CAN_MspInit+0x170>)
 8002efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f12:	2301      	movs	r3, #1
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f16:	2303      	movs	r3, #3
 8002f18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002f1a:	2309      	movs	r3, #9
 8002f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1e:	f107 031c 	add.w	r3, r7, #28
 8002f22:	4619      	mov	r1, r3
 8002f24:	483c      	ldr	r0, [pc, #240]	@ (8003018 <HAL_CAN_MspInit+0x174>)
 8002f26:	f004 fa0b 	bl	8007340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f30:	2302      	movs	r3, #2
 8002f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002f3c:	2309      	movs	r3, #9
 8002f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f40:	f107 031c 	add.w	r3, r7, #28
 8002f44:	4619      	mov	r1, r3
 8002f46:	4834      	ldr	r0, [pc, #208]	@ (8003018 <HAL_CAN_MspInit+0x174>)
 8002f48:	f004 f9fa 	bl	8007340 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2105      	movs	r1, #5
 8002f50:	2014      	movs	r0, #20
 8002f52:	f003 ff55 	bl	8006e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002f56:	2014      	movs	r0, #20
 8002f58:	f003 ff6e 	bl	8006e38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002f5c:	e051      	b.n	8003002 <HAL_CAN_MspInit+0x15e>
  else if(hcan->Instance==CAN2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a2e      	ldr	r2, [pc, #184]	@ (800301c <HAL_CAN_MspInit+0x178>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d14c      	bne.n	8003002 <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002f68:	4b2a      	ldr	r3, [pc, #168]	@ (8003014 <HAL_CAN_MspInit+0x170>)
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6c:	4a29      	ldr	r2, [pc, #164]	@ (8003014 <HAL_CAN_MspInit+0x170>)
 8002f6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f72:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f74:	4b27      	ldr	r3, [pc, #156]	@ (8003014 <HAL_CAN_MspInit+0x170>)
 8002f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002f80:	4b23      	ldr	r3, [pc, #140]	@ (8003010 <HAL_CAN_MspInit+0x16c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3301      	adds	r3, #1
 8002f86:	4a22      	ldr	r2, [pc, #136]	@ (8003010 <HAL_CAN_MspInit+0x16c>)
 8002f88:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002f8a:	4b21      	ldr	r3, [pc, #132]	@ (8003010 <HAL_CAN_MspInit+0x16c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d10b      	bne.n	8002faa <HAL_CAN_MspInit+0x106>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002f92:	4b20      	ldr	r3, [pc, #128]	@ (8003014 <HAL_CAN_MspInit+0x170>)
 8002f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f96:	4a1f      	ldr	r2, [pc, #124]	@ (8003014 <HAL_CAN_MspInit+0x170>)
 8002f98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003014 <HAL_CAN_MspInit+0x170>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002faa:	4b1a      	ldr	r3, [pc, #104]	@ (8003014 <HAL_CAN_MspInit+0x170>)
 8002fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fae:	4a19      	ldr	r2, [pc, #100]	@ (8003014 <HAL_CAN_MspInit+0x170>)
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fb6:	4b17      	ldr	r3, [pc, #92]	@ (8003014 <HAL_CAN_MspInit+0x170>)
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002fc2:	2320      	movs	r3, #32
 8002fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd6:	f107 031c 	add.w	r3, r7, #28
 8002fda:	4619      	mov	r1, r3
 8002fdc:	480e      	ldr	r0, [pc, #56]	@ (8003018 <HAL_CAN_MspInit+0x174>)
 8002fde:	f004 f9af 	bl	8007340 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fe2:	2340      	movs	r3, #64	@ 0x40
 8002fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff6:	f107 031c 	add.w	r3, r7, #28
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4806      	ldr	r0, [pc, #24]	@ (8003018 <HAL_CAN_MspInit+0x174>)
 8002ffe:	f004 f99f 	bl	8007340 <HAL_GPIO_Init>
}
 8003002:	bf00      	nop
 8003004:	3730      	adds	r7, #48	@ 0x30
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40006400 	.word	0x40006400
 8003010:	20000438 	.word	0x20000438
 8003014:	40021000 	.word	0x40021000
 8003018:	48000400 	.word	0x48000400
 800301c:	40006800 	.word	0x40006800

08003020 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b0ac      	sub	sp, #176	@ 0xb0
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003028:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003038:	f107 0310 	add.w	r3, r7, #16
 800303c:	228c      	movs	r2, #140	@ 0x8c
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f00b fe27 	bl	800ec94 <memset>
  if(hi2c->Instance==I2C4)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a22      	ldr	r2, [pc, #136]	@ (80030d4 <HAL_I2C_MspInit+0xb4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d13c      	bne.n	80030ca <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003050:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003054:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8003056:	2300      	movs	r3, #0
 8003058:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800305a:	f107 0310 	add.w	r3, r7, #16
 800305e:	4618      	mov	r0, r3
 8003060:	f006 f842 	bl	80090e8 <HAL_RCCEx_PeriphCLKConfig>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800306a:	f7ff fe63 	bl	8002d34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800306e:	4b1a      	ldr	r3, [pc, #104]	@ (80030d8 <HAL_I2C_MspInit+0xb8>)
 8003070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003072:	4a19      	ldr	r2, [pc, #100]	@ (80030d8 <HAL_I2C_MspInit+0xb8>)
 8003074:	f043 0302 	orr.w	r3, r3, #2
 8003078:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800307a:	4b17      	ldr	r3, [pc, #92]	@ (80030d8 <HAL_I2C_MspInit+0xb8>)
 800307c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003086:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800308a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800308e:	2312      	movs	r3, #18
 8003090:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003094:	2300      	movs	r3, #0
 8003096:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309a:	2303      	movs	r3, #3
 800309c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80030a0:	2303      	movs	r3, #3
 80030a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80030aa:	4619      	mov	r1, r3
 80030ac:	480b      	ldr	r0, [pc, #44]	@ (80030dc <HAL_I2C_MspInit+0xbc>)
 80030ae:	f004 f947 	bl	8007340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80030b2:	4b09      	ldr	r3, [pc, #36]	@ (80030d8 <HAL_I2C_MspInit+0xb8>)
 80030b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b6:	4a08      	ldr	r2, [pc, #32]	@ (80030d8 <HAL_I2C_MspInit+0xb8>)
 80030b8:	f043 0302 	orr.w	r3, r3, #2
 80030bc:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80030be:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <HAL_I2C_MspInit+0xb8>)
 80030c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 80030ca:	bf00      	nop
 80030cc:	37b0      	adds	r7, #176	@ 0xb0
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40008400 	.word	0x40008400
 80030d8:	40021000 	.word	0x40021000
 80030dc:	48000400 	.word	0x48000400

080030e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	@ 0x28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e8:	f107 0314 	add.w	r3, r7, #20
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a3a      	ldr	r2, [pc, #232]	@ (80031e8 <HAL_SPI_MspInit+0x108>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d16d      	bne.n	80031de <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003102:	4b3a      	ldr	r3, [pc, #232]	@ (80031ec <HAL_SPI_MspInit+0x10c>)
 8003104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003106:	4a39      	ldr	r2, [pc, #228]	@ (80031ec <HAL_SPI_MspInit+0x10c>)
 8003108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800310c:	6593      	str	r3, [r2, #88]	@ 0x58
 800310e:	4b37      	ldr	r3, [pc, #220]	@ (80031ec <HAL_SPI_MspInit+0x10c>)
 8003110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003112:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800311a:	4b34      	ldr	r3, [pc, #208]	@ (80031ec <HAL_SPI_MspInit+0x10c>)
 800311c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800311e:	4a33      	ldr	r2, [pc, #204]	@ (80031ec <HAL_SPI_MspInit+0x10c>)
 8003120:	f043 0304 	orr.w	r3, r3, #4
 8003124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003126:	4b31      	ldr	r3, [pc, #196]	@ (80031ec <HAL_SPI_MspInit+0x10c>)
 8003128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003132:	4b2e      	ldr	r3, [pc, #184]	@ (80031ec <HAL_SPI_MspInit+0x10c>)
 8003134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003136:	4a2d      	ldr	r2, [pc, #180]	@ (80031ec <HAL_SPI_MspInit+0x10c>)
 8003138:	f043 0302 	orr.w	r3, r3, #2
 800313c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800313e:	4b2b      	ldr	r3, [pc, #172]	@ (80031ec <HAL_SPI_MspInit+0x10c>)
 8003140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC12     ------> SPI3_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800314a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800314e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003150:	2302      	movs	r3, #2
 8003152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	2300      	movs	r3, #0
 8003156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003158:	2303      	movs	r3, #3
 800315a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800315c:	2306      	movs	r3, #6
 800315e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003160:	f107 0314 	add.w	r3, r7, #20
 8003164:	4619      	mov	r1, r3
 8003166:	4822      	ldr	r0, [pc, #136]	@ (80031f0 <HAL_SPI_MspInit+0x110>)
 8003168:	f004 f8ea 	bl	8007340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800316c:	2308      	movs	r3, #8
 800316e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003178:	2303      	movs	r3, #3
 800317a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800317c:	2306      	movs	r3, #6
 800317e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	4619      	mov	r1, r3
 8003186:	481b      	ldr	r0, [pc, #108]	@ (80031f4 <HAL_SPI_MspInit+0x114>)
 8003188:	f004 f8da 	bl	8007340 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA2_Channel2;
 800318c:	4b1a      	ldr	r3, [pc, #104]	@ (80031f8 <HAL_SPI_MspInit+0x118>)
 800318e:	4a1b      	ldr	r2, [pc, #108]	@ (80031fc <HAL_SPI_MspInit+0x11c>)
 8003190:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 8003192:	4b19      	ldr	r3, [pc, #100]	@ (80031f8 <HAL_SPI_MspInit+0x118>)
 8003194:	2203      	movs	r2, #3
 8003196:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003198:	4b17      	ldr	r3, [pc, #92]	@ (80031f8 <HAL_SPI_MspInit+0x118>)
 800319a:	2210      	movs	r2, #16
 800319c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800319e:	4b16      	ldr	r3, [pc, #88]	@ (80031f8 <HAL_SPI_MspInit+0x118>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031a4:	4b14      	ldr	r3, [pc, #80]	@ (80031f8 <HAL_SPI_MspInit+0x118>)
 80031a6:	2280      	movs	r2, #128	@ 0x80
 80031a8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031aa:	4b13      	ldr	r3, [pc, #76]	@ (80031f8 <HAL_SPI_MspInit+0x118>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031b0:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <HAL_SPI_MspInit+0x118>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80031b6:	4b10      	ldr	r3, [pc, #64]	@ (80031f8 <HAL_SPI_MspInit+0x118>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031bc:	4b0e      	ldr	r3, [pc, #56]	@ (80031f8 <HAL_SPI_MspInit+0x118>)
 80031be:	2200      	movs	r2, #0
 80031c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80031c2:	480d      	ldr	r0, [pc, #52]	@ (80031f8 <HAL_SPI_MspInit+0x118>)
 80031c4:	f003 fe46 	bl	8006e54 <HAL_DMA_Init>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 80031ce:	f7ff fdb1 	bl	8002d34 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a08      	ldr	r2, [pc, #32]	@ (80031f8 <HAL_SPI_MspInit+0x118>)
 80031d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80031d8:	4a07      	ldr	r2, [pc, #28]	@ (80031f8 <HAL_SPI_MspInit+0x118>)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80031de:	bf00      	nop
 80031e0:	3728      	adds	r7, #40	@ 0x28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40003c00 	.word	0x40003c00
 80031ec:	40021000 	.word	0x40021000
 80031f0:	48000800 	.word	0x48000800
 80031f4:	48000400 	.word	0x48000400
 80031f8:	20000304 	.word	0x20000304
 80031fc:	4002041c 	.word	0x4002041c

08003200 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a0d      	ldr	r2, [pc, #52]	@ (8003244 <HAL_TIM_Base_MspInit+0x44>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d113      	bne.n	800323a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003212:	4b0d      	ldr	r3, [pc, #52]	@ (8003248 <HAL_TIM_Base_MspInit+0x48>)
 8003214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003216:	4a0c      	ldr	r2, [pc, #48]	@ (8003248 <HAL_TIM_Base_MspInit+0x48>)
 8003218:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800321c:	6613      	str	r3, [r2, #96]	@ 0x60
 800321e:	4b0a      	ldr	r3, [pc, #40]	@ (8003248 <HAL_TIM_Base_MspInit+0x48>)
 8003220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003222:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 5, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	2105      	movs	r1, #5
 800322e:	202c      	movs	r0, #44	@ 0x2c
 8003230:	f003 fde6 	bl	8006e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8003234:	202c      	movs	r0, #44	@ 0x2c
 8003236:	f003 fdff 	bl	8006e38 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40013400 	.word	0x40013400
 8003248:	40021000 	.word	0x40021000

0800324c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b0ac      	sub	sp, #176	@ 0xb0
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003254:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	60da      	str	r2, [r3, #12]
 8003262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003264:	f107 0310 	add.w	r3, r7, #16
 8003268:	228c      	movs	r2, #140	@ 0x8c
 800326a:	2100      	movs	r1, #0
 800326c:	4618      	mov	r0, r3
 800326e:	f00b fd11 	bl	800ec94 <memset>
  if(huart->Instance==UART4)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a25      	ldr	r2, [pc, #148]	@ (800330c <HAL_UART_MspInit+0xc0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d143      	bne.n	8003304 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800327c:	2308      	movs	r3, #8
 800327e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003280:	2300      	movs	r3, #0
 8003282:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003284:	f107 0310 	add.w	r3, r7, #16
 8003288:	4618      	mov	r0, r3
 800328a:	f005 ff2d 	bl	80090e8 <HAL_RCCEx_PeriphCLKConfig>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003294:	f7ff fd4e 	bl	8002d34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003298:	4b1d      	ldr	r3, [pc, #116]	@ (8003310 <HAL_UART_MspInit+0xc4>)
 800329a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329c:	4a1c      	ldr	r2, [pc, #112]	@ (8003310 <HAL_UART_MspInit+0xc4>)
 800329e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80032a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003310 <HAL_UART_MspInit+0xc4>)
 80032a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b0:	4b17      	ldr	r3, [pc, #92]	@ (8003310 <HAL_UART_MspInit+0xc4>)
 80032b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b4:	4a16      	ldr	r2, [pc, #88]	@ (8003310 <HAL_UART_MspInit+0xc4>)
 80032b6:	f043 0304 	orr.w	r3, r3, #4
 80032ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032bc:	4b14      	ldr	r3, [pc, #80]	@ (8003310 <HAL_UART_MspInit+0xc4>)
 80032be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80032c8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80032cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032dc:	2303      	movs	r3, #3
 80032de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80032e2:	2308      	movs	r3, #8
 80032e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80032ec:	4619      	mov	r1, r3
 80032ee:	4809      	ldr	r0, [pc, #36]	@ (8003314 <HAL_UART_MspInit+0xc8>)
 80032f0:	f004 f826 	bl	8007340 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80032f4:	2200      	movs	r2, #0
 80032f6:	2105      	movs	r1, #5
 80032f8:	2034      	movs	r0, #52	@ 0x34
 80032fa:	f003 fd81 	bl	8006e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80032fe:	2034      	movs	r0, #52	@ 0x34
 8003300:	f003 fd9a 	bl	8006e38 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8003304:	bf00      	nop
 8003306:	37b0      	adds	r7, #176	@ 0xb0
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40004c00 	.word	0x40004c00
 8003310:	40021000 	.word	0x40021000
 8003314:	48000800 	.word	0x48000800

08003318 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08e      	sub	sp, #56	@ 0x38
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003326:	4b34      	ldr	r3, [pc, #208]	@ (80033f8 <HAL_InitTick+0xe0>)
 8003328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332a:	4a33      	ldr	r2, [pc, #204]	@ (80033f8 <HAL_InitTick+0xe0>)
 800332c:	f043 0302 	orr.w	r3, r3, #2
 8003330:	6593      	str	r3, [r2, #88]	@ 0x58
 8003332:	4b31      	ldr	r3, [pc, #196]	@ (80033f8 <HAL_InitTick+0xe0>)
 8003334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800333e:	f107 0210 	add.w	r2, r7, #16
 8003342:	f107 0314 	add.w	r3, r7, #20
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f005 fe3b 	bl	8008fc4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003354:	2b00      	cmp	r3, #0
 8003356:	d103      	bne.n	8003360 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003358:	f005 fe08 	bl	8008f6c <HAL_RCC_GetPCLK1Freq>
 800335c:	6378      	str	r0, [r7, #52]	@ 0x34
 800335e:	e004      	b.n	800336a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003360:	f005 fe04 	bl	8008f6c <HAL_RCC_GetPCLK1Freq>
 8003364:	4603      	mov	r3, r0
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800336a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336c:	4a23      	ldr	r2, [pc, #140]	@ (80033fc <HAL_InitTick+0xe4>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	0c9b      	lsrs	r3, r3, #18
 8003374:	3b01      	subs	r3, #1
 8003376:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8003378:	4b21      	ldr	r3, [pc, #132]	@ (8003400 <HAL_InitTick+0xe8>)
 800337a:	4a22      	ldr	r2, [pc, #136]	@ (8003404 <HAL_InitTick+0xec>)
 800337c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800337e:	4b20      	ldr	r3, [pc, #128]	@ (8003400 <HAL_InitTick+0xe8>)
 8003380:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003384:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8003386:	4a1e      	ldr	r2, [pc, #120]	@ (8003400 <HAL_InitTick+0xe8>)
 8003388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800338a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800338c:	4b1c      	ldr	r3, [pc, #112]	@ (8003400 <HAL_InitTick+0xe8>)
 800338e:	2200      	movs	r2, #0
 8003390:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003392:	4b1b      	ldr	r3, [pc, #108]	@ (8003400 <HAL_InitTick+0xe8>)
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003398:	4b19      	ldr	r3, [pc, #100]	@ (8003400 <HAL_InitTick+0xe8>)
 800339a:	2200      	movs	r2, #0
 800339c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800339e:	4818      	ldr	r0, [pc, #96]	@ (8003400 <HAL_InitTick+0xe8>)
 80033a0:	f006 fc0f 	bl	8009bc2 <HAL_TIM_Base_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80033aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d11b      	bne.n	80033ea <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80033b2:	4813      	ldr	r0, [pc, #76]	@ (8003400 <HAL_InitTick+0xe8>)
 80033b4:	f006 fc5c 	bl	8009c70 <HAL_TIM_Base_Start_IT>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80033be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d111      	bne.n	80033ea <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80033c6:	201d      	movs	r0, #29
 80033c8:	f003 fd36 	bl	8006e38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b0f      	cmp	r3, #15
 80033d0:	d808      	bhi.n	80033e4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80033d2:	2200      	movs	r2, #0
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	201d      	movs	r0, #29
 80033d8:	f003 fd12 	bl	8006e00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003408 <HAL_InitTick+0xf0>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e002      	b.n	80033ea <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80033ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3738      	adds	r7, #56	@ 0x38
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
 80033fc:	431bde83 	.word	0x431bde83
 8003400:	2000043c 	.word	0x2000043c
 8003404:	40000400 	.word	0x40000400
 8003408:	20000030 	.word	0x20000030

0800340c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003410:	bf00      	nop
 8003412:	e7fd      	b.n	8003410 <NMI_Handler+0x4>

08003414 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003418:	bf00      	nop
 800341a:	e7fd      	b.n	8003418 <HardFault_Handler+0x4>

0800341c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003420:	bf00      	nop
 8003422:	e7fd      	b.n	8003420 <MemManage_Handler+0x4>

08003424 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003428:	bf00      	nop
 800342a:	e7fd      	b.n	8003428 <BusFault_Handler+0x4>

0800342c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003430:	bf00      	nop
 8003432:	e7fd      	b.n	8003430 <UsageFault_Handler+0x4>

08003434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alert1_Pin);
 8003446:	2004      	movs	r0, #4
 8003448:	f004 f93e 	bl	80076c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800344c:	bf00      	nop
 800344e:	bd80      	pop	{r7, pc}

08003450 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003454:	4802      	ldr	r0, [pc, #8]	@ (8003460 <DMA1_Channel1_IRQHandler+0x10>)
 8003456:	f003 fe94 	bl	8007182 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	200001b4 	.word	0x200001b4

08003464 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003468:	4802      	ldr	r0, [pc, #8]	@ (8003474 <CAN1_RX0_IRQHandler+0x10>)
 800346a:	f003 f9e2 	bl	8006832 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800346e:	bf00      	nop
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	200001fc 	.word	0x200001fc

08003478 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800347c:	4802      	ldr	r0, [pc, #8]	@ (8003488 <TIM3_IRQHandler+0x10>)
 800347e:	f006 fc67 	bl	8009d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	2000043c 	.word	0x2000043c

0800348c <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003490:	4802      	ldr	r0, [pc, #8]	@ (800349c <TIM8_UP_IRQHandler+0x10>)
 8003492:	f006 fc5d 	bl	8009d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	2000034c 	.word	0x2000034c

080034a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80034a4:	4802      	ldr	r0, [pc, #8]	@ (80034b0 <UART4_IRQHandler+0x10>)
 80034a6:	f007 f8cb 	bl	800a640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000398 	.word	0x20000398

080034b4 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80034b8:	4802      	ldr	r0, [pc, #8]	@ (80034c4 <DMA2_Channel2_IRQHandler+0x10>)
 80034ba:	f003 fe62 	bl	8007182 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80034be:	bf00      	nop
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000304 	.word	0x20000304

080034c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034d0:	4a14      	ldr	r2, [pc, #80]	@ (8003524 <_sbrk+0x5c>)
 80034d2:	4b15      	ldr	r3, [pc, #84]	@ (8003528 <_sbrk+0x60>)
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034dc:	4b13      	ldr	r3, [pc, #76]	@ (800352c <_sbrk+0x64>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d102      	bne.n	80034ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034e4:	4b11      	ldr	r3, [pc, #68]	@ (800352c <_sbrk+0x64>)
 80034e6:	4a12      	ldr	r2, [pc, #72]	@ (8003530 <_sbrk+0x68>)
 80034e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034ea:	4b10      	ldr	r3, [pc, #64]	@ (800352c <_sbrk+0x64>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d207      	bcs.n	8003508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034f8:	f00b fc3a 	bl	800ed70 <__errno>
 80034fc:	4603      	mov	r3, r0
 80034fe:	220c      	movs	r2, #12
 8003500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003502:	f04f 33ff 	mov.w	r3, #4294967295
 8003506:	e009      	b.n	800351c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003508:	4b08      	ldr	r3, [pc, #32]	@ (800352c <_sbrk+0x64>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800350e:	4b07      	ldr	r3, [pc, #28]	@ (800352c <_sbrk+0x64>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4413      	add	r3, r2
 8003516:	4a05      	ldr	r2, [pc, #20]	@ (800352c <_sbrk+0x64>)
 8003518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800351a:	68fb      	ldr	r3, [r7, #12]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20050000 	.word	0x20050000
 8003528:	00000400 	.word	0x00000400
 800352c:	20000488 	.word	0x20000488
 8003530:	20002b30 	.word	0x20002b30

08003534 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003538:	4b06      	ldr	r3, [pc, #24]	@ (8003554 <SystemInit+0x20>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353e:	4a05      	ldr	r2, [pc, #20]	@ (8003554 <SystemInit+0x20>)
 8003540:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003544:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <_ZN7ILI9341C1Ess>:
/**
  * @brief   Constructor for ILI9341 class
  * @param   w: width of LCD
  * @param   h: height of LCD
  */
ILI9341::ILI9341(int16_t w, int16_t h):WIDTH(w),HEIGHT(h)
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	807b      	strh	r3, [r7, #2]
 8003564:	4613      	mov	r3, r2
 8003566:	803b      	strh	r3, [r7, #0]
 8003568:	4a45      	ldr	r2, [pc, #276]	@ (8003680 <_ZN7ILI9341C1Ess+0x128>)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	887a      	ldrh	r2, [r7, #2]
 8003572:	809a      	strh	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	883a      	ldrh	r2, [r7, #0]
 8003578:	80da      	strh	r2, [r3, #6]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	81da      	strh	r2, [r3, #14]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	821a      	strh	r2, [r3, #16]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800358c:	621a      	str	r2, [r3, #32]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8003594:	625a      	str	r2, [r3, #36]	@ 0x24
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800359c:	629a      	str	r2, [r3, #40]	@ 0x28
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80035a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80035ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80035b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80035bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80035c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2204      	movs	r2, #4
 80035ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003684 <_ZN7ILI9341C1Ess+0x12c>)
 80035d2:	645a      	str	r2, [r3, #68]	@ 0x44
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a29      	ldr	r2, [pc, #164]	@ (8003684 <_ZN7ILI9341C1Ess+0x12c>)
 80035e0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a25      	ldr	r2, [pc, #148]	@ (8003684 <_ZN7ILI9341C1Ess+0x12c>)
 80035ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035f6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a21      	ldr	r2, [pc, #132]	@ (8003684 <_ZN7ILI9341C1Ess+0x12c>)
 80035fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a1f      	ldr	r2, [pc, #124]	@ (8003688 <_ZN7ILI9341C1Ess+0x130>)
 800360c:	665a      	str	r2, [r3, #100]	@ 0x64
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2210      	movs	r2, #16
 8003612:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a1b      	ldr	r2, [pc, #108]	@ (8003688 <_ZN7ILI9341C1Ess+0x130>)
 800361a:	66da      	str	r2, [r3, #108]	@ 0x6c
{
  text_size_ = 1;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	819a      	strh	r2, [r3, #12]
  width_ = WIDTH;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	811a      	strh	r2, [r3, #8]
  height_ = HEIGHT;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	815a      	strh	r2, [r3, #10]
  rotation = 0;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	771a      	strb	r2, [r3, #28]
  cursor_y = cursor_x = 0;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	825a      	strh	r2, [r3, #18]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	829a      	strh	r2, [r3, #20]
  textsize_x = textsize_y = 1;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	76da      	strb	r2, [r3, #27]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	7eda      	ldrb	r2, [r3, #27]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	769a      	strb	r2, [r3, #26]
  textcolor = textbgcolor = 0xFFFF;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003660:	831a      	strh	r2, [r3, #24]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8b1a      	ldrh	r2, [r3, #24]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	82da      	strh	r2, [r3, #22]
  wrap = true;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	775a      	strb	r2, [r3, #29]
}
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4618      	mov	r0, r3
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	0800fc34 	.word	0x0800fc34
 8003684:	48000400 	.word	0x48000400
 8003688:	48000800 	.word	0x48000800

0800368c <_ZN7ILI9341D1Ev>:

ILI9341::~ILI9341()
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	4a04      	ldr	r2, [pc, #16]	@ (80036a8 <_ZN7ILI9341D1Ev+0x1c>)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	601a      	str	r2, [r3, #0]
{
  // TODO Auto-generated destructor stub
}
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4618      	mov	r0, r3
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	0800fc34 	.word	0x0800fc34

080036ac <_ZN7ILI9341D0Ev>:
ILI9341::~ILI9341()
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
}
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ffe9 	bl	800368c <_ZN7ILI9341D1Ev>
 80036ba:	2170      	movs	r1, #112	@ 0x70
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f00b f9fb 	bl	800eab8 <_ZdlPvj>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <_ZN7ILI93414InitEv>:

/**
  * @brief  Initialize the LCD.
  */
void ILI9341::Init()
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	6078      	str	r0, [r7, #4]
  // Write all control signals high
  HAL_GPIO_WritePin(Backlight_PWM_GPIO_Port_, Backlight_PWM_Pin_, GPIO_PIN_SET);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80036de:	2201      	movs	r2, #1
 80036e0:	4619      	mov	r1, r3
 80036e2:	f003 ffbf 	bl	8007664 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80036f0:	2201      	movs	r2, #1
 80036f2:	4619      	mov	r1, r3
 80036f4:	f003 ffb6 	bl	8007664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003702:	2201      	movs	r2, #1
 8003704:	4619      	mov	r1, r3
 8003706:	f003 ffad 	bl	8007664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003714:	2201      	movs	r2, #1
 8003716:	4619      	mov	r1, r3
 8003718:	f003 ffa4 	bl	8007664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_READ_GPIO_Port_, LCD_READ_Pin_, GPIO_PIN_SET);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003726:	2201      	movs	r2, #1
 8003728:	4619      	mov	r1, r3
 800372a:	f003 ff9b 	bl	8007664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003738:	2201      	movs	r2, #1
 800373a:	4619      	mov	r1, r3
 800373c:	f003 ff92 	bl	8007664 <HAL_GPIO_WritePin>

  // Hold reset pin
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_RESET);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800374a:	2200      	movs	r2, #0
 800374c:	4619      	mov	r1, r3
 800374e:	f003 ff89 	bl	8007664 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8003752:	200a      	movs	r0, #10
 8003754:	f001 f808 	bl	8004768 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003762:	2201      	movs	r2, #1
 8003764:	4619      	mov	r1, r3
 8003766:	f003 ff7d 	bl	8007664 <HAL_GPIO_WritePin>

  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003774:	2200      	movs	r2, #0
 8003776:	4619      	mov	r1, r3
 8003778:	f003 ff74 	bl	8007664 <HAL_GPIO_WritePin>

  // Soft reset the LCD
  TransmitCmd(ILI9341_SWRESET);
 800377c:	2101      	movs	r1, #1
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f8c4 	bl	800390c <_ZN7ILI934111TransmitCmdEh>
  Transmit8bitData(0x00);
 8003784:	2100      	movs	r1, #0
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8d8 	bl	800393c <_ZN7ILI934116Transmit8bitDataEh>
  HAL_Delay(50);
 800378c:	2032      	movs	r0, #50	@ 0x32
 800378e:	f000 ffeb 	bl	8004768 <HAL_Delay>


  uint8_t cmd, x, numArgs;
  const uint8_t *addr = initcmd;
 8003792:	4b27      	ldr	r3, [pc, #156]	@ (8003830 <_ZN7ILI93414InitEv+0x164>)
 8003794:	613b      	str	r3, [r7, #16]
  while((cmd = *(addr++)) > 0)
 8003796:	e027      	b.n	80037e8 <_ZN7ILI93414InitEv+0x11c>
  {
    x = *(addr++);
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	613a      	str	r2, [r7, #16]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	73bb      	strb	r3, [r7, #14]
    numArgs = x & 0x7F;
 80037a2:	7bbb      	ldrb	r3, [r7, #14]
 80037a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037a8:	75fb      	strb	r3, [r7, #23]
    TransmitCmd(cmd);
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	4619      	mov	r1, r3
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8ac 	bl	800390c <_ZN7ILI934111TransmitCmdEh>
    while(numArgs--)
 80037b4:	e007      	b.n	80037c6 <_ZN7ILI93414InitEv+0xfa>
    {
      Transmit8bitData(*(addr++));
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	613a      	str	r2, [r7, #16]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	4619      	mov	r1, r3
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f8bb 	bl	800393c <_ZN7ILI934116Transmit8bitDataEh>
    while(numArgs--)
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
 80037c8:	1e5a      	subs	r2, r3, #1
 80037ca:	75fa      	strb	r2, [r7, #23]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf14      	ite	ne
 80037d0:	2301      	movne	r3, #1
 80037d2:	2300      	moveq	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1ed      	bne.n	80037b6 <_ZN7ILI93414InitEv+0xea>
    }
    if(x & 0x80)
 80037da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	da02      	bge.n	80037e8 <_ZN7ILI93414InitEv+0x11c>
    {
      HAL_Delay(150);
 80037e2:	2096      	movs	r0, #150	@ 0x96
 80037e4:	f000 ffc0 	bl	8004768 <HAL_Delay>
  while((cmd = *(addr++)) > 0)
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	613a      	str	r2, [r7, #16]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	73fb      	strb	r3, [r7, #15]
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf14      	ite	ne
 80037f8:	2301      	movne	r3, #1
 80037fa:	2300      	moveq	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1ca      	bne.n	8003798 <_ZN7ILI93414InitEv+0xcc>
    }
  }

  SetWindow(0, 0, width_-1, height_-1);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29b      	uxth	r3, r3
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	2200      	movs	r2, #0
 8003820:	2100      	movs	r1, #0
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f8f0 	bl	8003a08 <_ZN7ILI93419SetWindowEtttt>
}
 8003828:	bf00      	nop
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	0800fc08 	.word	0x0800fc08

08003834 <_ZN7ILI93415WriteEh>:

/**
  * @brief  Write data to LCD bus.
  */
inline void ILI9341::Write(uint8_t data)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	70fb      	strb	r3, [r7, #3]
  // Put data on Bus
#if UI_USE_HAL
  HAL_GPIO_WritePin(LCD_DATA0_GPIO_Port_, LCD_DATA0_Pin_, static_cast<GPIO_PinState>(data & 0x01U) );
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	2101      	movs	r1, #1
 8003850:	f003 ff08 	bl	8007664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA1_GPIO_Port_, LCD_DATA1_Pin_, static_cast<GPIO_PinState>(data & 0x02U) );
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	b2db      	uxtb	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	2102      	movs	r1, #2
 8003864:	f003 fefe 	bl	8007664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA2_GPIO_Port_, LCD_DATA2_Pin_, static_cast<GPIO_PinState>(data & 0x04U) );
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	2104      	movs	r1, #4
 8003878:	f003 fef4 	bl	8007664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA3_GPIO_Port_, LCD_DATA3_Pin_, static_cast<GPIO_PinState>(data & 0x08U) );
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	b2db      	uxtb	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	2108      	movs	r1, #8
 800388c:	f003 feea 	bl	8007664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA4_GPIO_Port_, LCD_DATA4_Pin_, static_cast<GPIO_PinState>(data & 0x10U) );
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	b2db      	uxtb	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	2110      	movs	r1, #16
 80038a0:	f003 fee0 	bl	8007664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA5_GPIO_Port_, LCD_DATA5_Pin_, static_cast<GPIO_PinState>(data & 0x20U) );
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80038a8:	78fb      	ldrb	r3, [r7, #3]
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	2120      	movs	r1, #32
 80038b4:	f003 fed6 	bl	8007664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA6_GPIO_Port_, LCD_DATA6_Pin_, static_cast<GPIO_PinState>(data & 0x40U) );
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	461a      	mov	r2, r3
 80038c6:	2140      	movs	r1, #64	@ 0x40
 80038c8:	f003 fecc 	bl	8007664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA7_GPIO_Port_, LCD_DATA7_Pin_, static_cast<GPIO_PinState>(data & 0x80U) );
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a18      	ldr	r0, [r3, #32]
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	2180      	movs	r1, #128	@ 0x80
 80038dc:	f003 fec2 	bl	8007664 <HAL_GPIO_WritePin>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80038ea:	2200      	movs	r2, #0
 80038ec:	4619      	mov	r1, r3
 80038ee:	f003 feb9 	bl	8007664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80038fc:	2201      	movs	r2, #1
 80038fe:	4619      	mov	r1, r3
 8003900:	f003 feb0 	bl	8007664 <HAL_GPIO_WritePin>
  // Pulse Write
  LCD_WRITE_GPIO_Port_->BSRR = LCD_WRITE_Pin_; // changed from brr to bsrr... ok?
  LCD_WRITE_GPIO_Port_->BSRR = (uint32_t)LCD_WRITE_Pin_ << 16U;
#endif

}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <_ZN7ILI934111TransmitCmdEh>:
/**
  * @brief  Sends 8-bit command to LCD.
  * @param  cmd: 8-bit command to be sent.
  */
void ILI9341::TransmitCmd(uint8_t cmd)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	70fb      	strb	r3, [r7, #3]
  // D/C -> LOW
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_RESET);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003922:	2200      	movs	r2, #0
 8003924:	4619      	mov	r1, r3
 8003926:	f003 fe9d 	bl	8007664 <HAL_GPIO_WritePin>

  Write(cmd);
 800392a:	78fb      	ldrb	r3, [r7, #3]
 800392c:	4619      	mov	r1, r3
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff ff80 	bl	8003834 <_ZN7ILI93415WriteEh>

  // TODO: Can this line be removed?
  // D/C -> HIGH
  // HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <_ZN7ILI934116Transmit8bitDataEh>:
/**
  * @brief  Sends 8-bit data to LCD.
  * @param  data: 8-bit data to be sent.
  */
void ILI9341::Transmit8bitData(uint8_t data)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	70fb      	strb	r3, [r7, #3]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003952:	2201      	movs	r2, #1
 8003954:	4619      	mov	r1, r3
 8003956:	f003 fe85 	bl	8007664 <HAL_GPIO_WritePin>

  Write(data);
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	4619      	mov	r1, r3
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ff68 	bl	8003834 <_ZN7ILI93415WriteEh>
}
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <_ZN7ILI934117Transmit16bitDataEt>:
/**
  * @brief  Sends 16-bit data to LCD.
  * @param  data: 16-bit data to be sent to LCD.
  */
void ILI9341::Transmit16bitData(uint16_t data)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	807b      	strh	r3, [r7, #2]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003982:	2201      	movs	r2, #1
 8003984:	4619      	mov	r1, r3
 8003986:	f003 fe6d 	bl	8007664 <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 8));
 800398a:	887b      	ldrh	r3, [r7, #2]
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	b29b      	uxth	r3, r3
 8003990:	b2db      	uxtb	r3, r3
 8003992:	4619      	mov	r1, r3
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff ff4d 	bl	8003834 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0));
 800399a:	887b      	ldrh	r3, [r7, #2]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	4619      	mov	r1, r3
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff ff47 	bl	8003834 <_ZN7ILI93415WriteEh>

}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <_ZN7ILI934117Transmit32bitDataEm>:
/**
  * @brief  Sends 32-bit data to LCD.
  * @param  data: 32-bit data to be sent to LCD.
  */
void ILI9341::Transmit32bitData(uint32_t data)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	6039      	str	r1, [r7, #0]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039c2:	2201      	movs	r2, #1
 80039c4:	4619      	mov	r1, r3
 80039c6:	f003 fe4d 	bl	8007664 <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 24));
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	0e1b      	lsrs	r3, r3, #24
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	4619      	mov	r1, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff ff2e 	bl	8003834 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 16));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	0c1b      	lsrs	r3, r3, #16
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	4619      	mov	r1, r3
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff ff27 	bl	8003834 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 8 ));
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	0a1b      	lsrs	r3, r3, #8
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	4619      	mov	r1, r3
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff ff20 	bl	8003834 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0 ));
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	4619      	mov	r1, r3
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff ff1a 	bl	8003834 <_ZN7ILI93415WriteEh>

}
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <_ZN7ILI93419SetWindowEtttt>:
  * @param  xe: x end coordinate. xe > xs.
  * @param  ye: y end coordinate. ye > ys.
  * @retval ILI9341_SUCCESS or ILI9341_ERROR.
  */
char ILI9341::SetWindow (uint16_t xs, uint16_t ys, uint16_t xe, uint16_t ye)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	4608      	mov	r0, r1
 8003a12:	4611      	mov	r1, r2
 8003a14:	461a      	mov	r2, r3
 8003a16:	4603      	mov	r3, r0
 8003a18:	817b      	strh	r3, [r7, #10]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	813b      	strh	r3, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	80fb      	strh	r3, [r7, #6]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	4619      	mov	r1, r3
 8003a30:	f003 fe18 	bl	8007664 <HAL_GPIO_WritePin>

  // check if coordinates is out of range
  // TODO: Use >=, <= instead of >, < for width_ and height_?
  if ((xs > xe) || (xe > width_) ||
 8003a34:	897a      	ldrh	r2, [r7, #10]
 8003a36:	88fb      	ldrh	r3, [r7, #6]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d80f      	bhi.n	8003a5c <_ZN7ILI93419SetWindowEtttt+0x54>
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003a44:	4293      	cmp	r3, r2
 8003a46:	dc09      	bgt.n	8003a5c <_ZN7ILI93419SetWindowEtttt+0x54>
 8003a48:	893a      	ldrh	r2, [r7, #8]
 8003a4a:	8b3b      	ldrh	r3, [r7, #24]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d805      	bhi.n	8003a5c <_ZN7ILI93419SetWindowEtttt+0x54>
      (ys > ye) || (ye > height_))
 8003a50:	8b3b      	ldrh	r3, [r7, #24]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	dd01      	ble.n	8003a60 <_ZN7ILI93419SetWindowEtttt+0x58>
  {
    // out of range
    return ILI9341_ERROR;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e021      	b.n	8003aa4 <_ZN7ILI93419SetWindowEtttt+0x9c>
  }

  // set column
  TransmitCmd(ILI9341_CASET);
 8003a60:	212a      	movs	r1, #42	@ 0x2a
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f7ff ff52 	bl	800390c <_ZN7ILI934111TransmitCmdEh>
  // set column -> set column
  Transmit32bitData(((uint32_t) xs << 16) | xe);
 8003a68:	897b      	ldrh	r3, [r7, #10]
 8003a6a:	041a      	lsls	r2, r3, #16
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	4619      	mov	r1, r3
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f7ff ff9b 	bl	80039ae <_ZN7ILI934117Transmit32bitDataEm>
  // set page
  TransmitCmd(ILI9341_PASET);
 8003a78:	212b      	movs	r1, #43	@ 0x2b
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f7ff ff46 	bl	800390c <_ZN7ILI934111TransmitCmdEh>
  // set page -> high byte first
  Transmit32bitData(((uint32_t) ys << 16) | ye);
 8003a80:	893b      	ldrh	r3, [r7, #8]
 8003a82:	041a      	lsls	r2, r3, #16
 8003a84:	8b3b      	ldrh	r3, [r7, #24]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	4619      	mov	r1, r3
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f7ff ff8f 	bl	80039ae <_ZN7ILI934117Transmit32bitDataEm>

  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f003 fde1 	bl	8007664 <HAL_GPIO_WritePin>
  // success
  return ILI9341_SUCCESS;
 8003aa2:	2301      	movs	r3, #1
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <_ZN7ILI93419DrawPixelEttt>:
  * @param  y: y coordinate.
  * @param  color: 16-bit color.
  * @retval ILI9341_SUCCESS or ILI9341_ERROR.
  */
char ILI9341::DrawPixel (uint16_t x, uint16_t y, uint16_t color)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4603      	mov	r3, r0
 8003abc:	817b      	strh	r3, [r7, #10]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	813b      	strh	r3, [r7, #8]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	80fb      	strh	r3, [r7, #6]
  // check dimension
  if ((x > width_) || (y > height_)) {
 8003ac6:	897b      	ldrh	r3, [r7, #10]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	dc05      	bgt.n	8003ade <_ZN7ILI93419DrawPixelEttt+0x32>
 8003ad2:	893b      	ldrh	r3, [r7, #8]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8003ada:	4293      	cmp	r3, r2
 8003adc:	dd01      	ble.n	8003ae2 <_ZN7ILI93419DrawPixelEttt+0x36>
    // error
    return ILI9341_ERROR;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e00f      	b.n	8003b02 <_ZN7ILI93419DrawPixelEttt+0x56>
  }
  // set window
  SetWindow(x, y, x, y);
 8003ae2:	8978      	ldrh	r0, [r7, #10]
 8003ae4:	893a      	ldrh	r2, [r7, #8]
 8003ae6:	8979      	ldrh	r1, [r7, #10]
 8003ae8:	893b      	ldrh	r3, [r7, #8]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	4603      	mov	r3, r0
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f7ff ff8a 	bl	8003a08 <_ZN7ILI93419SetWindowEtttt>
  // draw pixel by 565 mode
  SendColor565(color, 1);
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	2201      	movs	r2, #1
 8003af8:	4619      	mov	r1, r3
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f805 	bl	8003b0a <_ZN7ILI934112SendColor565Etm>
  // success
  return ILI9341_SUCCESS;
 8003b00:	2301      	movs	r3, #1
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <_ZN7ILI934112SendColor565Etm>:

void ILI9341::SendColor565(uint16_t color, uint32_t count)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	460b      	mov	r3, r1
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	817b      	strh	r3, [r7, #10]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b22:	2200      	movs	r2, #0
 8003b24:	4619      	mov	r1, r3
 8003b26:	f003 fd9d 	bl	8007664 <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 8003b2a:	212c      	movs	r1, #44	@ 0x2c
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f7ff feed 	bl	800390c <_ZN7ILI934111TransmitCmdEh>
  // counter
  while (count--) {
 8003b32:	e004      	b.n	8003b3e <_ZN7ILI934112SendColor565Etm+0x34>
    // write color - first colors byte
    Transmit16bitData(color);
 8003b34:	897b      	ldrh	r3, [r7, #10]
 8003b36:	4619      	mov	r1, r3
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f7ff ff17 	bl	800396c <_ZN7ILI934117Transmit16bitDataEt>
  while (count--) {
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	1e5a      	subs	r2, r3, #1
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <_ZN7ILI934112SendColor565Etm+0x2a>
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	4619      	mov	r1, r3
 8003b60:	f003 fd80 	bl	8007664 <HAL_GPIO_WritePin>
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <_ZN7ILI93415FloodEtm>:

void ILI9341::Flood(uint16_t color, uint32_t count)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	460b      	mov	r3, r1
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	817b      	strh	r3, [r7, #10]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b84:	2200      	movs	r2, #0
 8003b86:	4619      	mov	r1, r3
 8003b88:	f003 fd6c 	bl	8007664 <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 8003b8c:	212c      	movs	r1, #44	@ 0x2c
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f7ff febc 	bl	800390c <_ZN7ILI934111TransmitCmdEh>
  // counter
  // Upper and lower are the same
  if( (color & 0xFF) == (color >> 8))
 8003b94:	897b      	ldrh	r3, [r7, #10]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	897a      	ldrh	r2, [r7, #10]
 8003b9a:	0a12      	lsrs	r2, r2, #8
 8003b9c:	b292      	uxth	r2, r2
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d13c      	bne.n	8003c1c <_ZN7ILI93415FloodEtm+0xb0>
  {
    count--;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	607b      	str	r3, [r7, #4]
    Transmit16bitData(color);
 8003ba8:	897b      	ldrh	r3, [r7, #10]
 8003baa:	4619      	mov	r1, r3
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f7ff fedd 	bl	800396c <_ZN7ILI934117Transmit16bitDataEt>
    while(count--)
 8003bb2:	e023      	b.n	8003bfc <_ZN7ILI93415FloodEtm+0x90>
    {
#if UI_USE_HAL
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f003 fd4f 	bl	8007664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f003 fd46 	bl	8007664 <HAL_GPIO_WritePin>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003be2:	2200      	movs	r2, #0
 8003be4:	4619      	mov	r1, r3
 8003be6:	f003 fd3d 	bl	8007664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f003 fd34 	bl	8007664 <HAL_GPIO_WritePin>
    while(count--)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	1e5a      	subs	r2, r3, #1
 8003c00:	607a      	str	r2, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	bf14      	ite	ne
 8003c06:	2301      	movne	r3, #1
 8003c08:	2300      	moveq	r3, #0
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1d1      	bne.n	8003bb4 <_ZN7ILI93415FloodEtm+0x48>
 8003c10:	e00e      	b.n	8003c30 <_ZN7ILI93415FloodEtm+0xc4>
  }
  else
  {
    while (count--)
    {
      Transmit16bitData(color);
 8003c12:	897b      	ldrh	r3, [r7, #10]
 8003c14:	4619      	mov	r1, r3
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f7ff fea8 	bl	800396c <_ZN7ILI934117Transmit16bitDataEt>
    while (count--)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	1e5a      	subs	r2, r3, #1
 8003c20:	607a      	str	r2, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	bf14      	ite	ne
 8003c26:	2301      	movne	r3, #1
 8003c28:	2300      	moveq	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f0      	bne.n	8003c12 <_ZN7ILI93415FloodEtm+0xa6>
    }
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	f003 fd11 	bl	8007664 <HAL_GPIO_WritePin>
}
 8003c42:	bf00      	nop
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <_ZN7ILI934111ClearScreenEt>:

void ILI9341::ClearScreen(uint16_t color)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af02      	add	r7, sp, #8
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	460b      	mov	r3, r1
 8003c54:	807b      	strh	r3, [r7, #2]
  // set whole window
  SetWindow(0, 0, width_, height_);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff feca 	bl	8003a08 <_ZN7ILI93419SetWindowEtttt>
  // draw individual pixels
  Flood(color, ILI9341_CACHE_MEM);
 8003c74:	887b      	ldrh	r3, [r7, #2]
 8003c76:	f44f 3296 	mov.w	r2, #76800	@ 0x12c00
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ff75 	bl	8003b6c <_ZN7ILI93415FloodEtm>
  // Update background color
  textbgcolor = color;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	887a      	ldrh	r2, [r7, #2]
 8003c86:	831a      	strh	r2, [r3, #24]
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <_ZN7ILI934113DrawFastHLineEtttt>:

void ILI9341::DrawFastHLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	4608      	mov	r0, r1
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	817b      	strh	r3, [r7, #10]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	813b      	strh	r3, [r7, #8]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80fb      	strh	r3, [r7, #6]
  int16_t x2;

  // Initial off-screen clipping
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d016      	beq.n	8003cde <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
 8003cb0:	893b      	ldrh	r3, [r7, #8]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	da10      	bge.n	8003cde <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
 8003cbc:	897b      	ldrh	r3, [r7, #10]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	da0a      	bge.n	8003cde <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
      ((x2 = (x + length - 1)) < 0))
 8003cc8:	897a      	ldrh	r2, [r7, #10]
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	4413      	add	r3, r2
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	82fb      	strh	r3, [r7, #22]
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 8003cd6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	da01      	bge.n	8003ce2 <_ZN7ILI934113DrawFastHLineEtttt+0x52>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <_ZN7ILI934113DrawFastHLineEtttt+0x54>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d123      	bne.n	8003d30 <_ZN7ILI934113DrawFastHLineEtttt+0xa0>

  if (x < 0) { // Clip left
    length += x;
    x = 0;
  }
  if (x2 >= width_) { // Clip right
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003cee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	db0c      	blt.n	8003d10 <_ZN7ILI934113DrawFastHLineEtttt+0x80>
    x2 = width_ - 1;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	82fb      	strh	r3, [r7, #22]
    length = x2 - x + 1;
 8003d04:	8afa      	ldrh	r2, [r7, #22]
 8003d06:	897b      	ldrh	r3, [r7, #10]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	80fb      	strh	r3, [r7, #6]
  }

  SetWindow(x, y, x2, y);
 8003d10:	8af8      	ldrh	r0, [r7, #22]
 8003d12:	893a      	ldrh	r2, [r7, #8]
 8003d14:	8979      	ldrh	r1, [r7, #10]
 8003d16:	893b      	ldrh	r3, [r7, #8]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f7ff fe73 	bl	8003a08 <_ZN7ILI93419SetWindowEtttt>
  Flood(color, length);
 8003d22:	88fa      	ldrh	r2, [r7, #6]
 8003d24:	8c3b      	ldrh	r3, [r7, #32]
 8003d26:	4619      	mov	r1, r3
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f7ff ff1f 	bl	8003b6c <_ZN7ILI93415FloodEtm>
 8003d2e:	e000      	b.n	8003d32 <_ZN7ILI934113DrawFastHLineEtttt+0xa2>
    return;
 8003d30:	bf00      	nop
}
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <_ZN7ILI934113DrawFastVLineEtttt>:

void ILI9341::DrawFastVLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	4608      	mov	r0, r1
 8003d42:	4611      	mov	r1, r2
 8003d44:	461a      	mov	r2, r3
 8003d46:	4603      	mov	r3, r0
 8003d48:	817b      	strh	r3, [r7, #10]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	813b      	strh	r3, [r7, #8]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	80fb      	strh	r3, [r7, #6]
  int16_t y2;

  // Initial off-screen clipping
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d016      	beq.n	8003d86 <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
 8003d58:	897b      	ldrh	r3, [r7, #10]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003d60:	4293      	cmp	r3, r2
 8003d62:	da10      	bge.n	8003d86 <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
 8003d64:	893b      	ldrh	r3, [r7, #8]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	da0a      	bge.n	8003d86 <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
      ((y2 = (y + length - 1)) < 0))
 8003d70:	893a      	ldrh	r2, [r7, #8]
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	4413      	add	r3, r2
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	82fb      	strh	r3, [r7, #22]
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 8003d7e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	da01      	bge.n	8003d8a <_ZN7ILI934113DrawFastVLineEtttt+0x52>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <_ZN7ILI934113DrawFastVLineEtttt+0x54>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d123      	bne.n	8003dd8 <_ZN7ILI934113DrawFastVLineEtttt+0xa0>
    return;
  if (y < 0) { // Clip top
    length += y;
    y = 0;
  }
  if (y2 >= height_) { // Clip bottom
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003d96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	db0c      	blt.n	8003db8 <_ZN7ILI934113DrawFastVLineEtttt+0x80>
    y2 = height_ - 1;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	82fb      	strh	r3, [r7, #22]
    length = y2 - y + 1;
 8003dac:	8afa      	ldrh	r2, [r7, #22]
 8003dae:	893b      	ldrh	r3, [r7, #8]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3301      	adds	r3, #1
 8003db6:	80fb      	strh	r3, [r7, #6]
  }

  SetWindow(x, y, x, y2);
 8003db8:	8afb      	ldrh	r3, [r7, #22]
 8003dba:	8978      	ldrh	r0, [r7, #10]
 8003dbc:	893a      	ldrh	r2, [r7, #8]
 8003dbe:	8979      	ldrh	r1, [r7, #10]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f7ff fe1f 	bl	8003a08 <_ZN7ILI93419SetWindowEtttt>
  Flood(color, length);
 8003dca:	88fa      	ldrh	r2, [r7, #6]
 8003dcc:	8c3b      	ldrh	r3, [r7, #32]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f7ff fecb 	bl	8003b6c <_ZN7ILI93415FloodEtm>
 8003dd6:	e000      	b.n	8003dda <_ZN7ILI934113DrawFastVLineEtttt+0xa2>
    return;
 8003dd8:	bf00      	nop
}
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <_ZN7ILI934111SetRotationEh>:

void ILI9341::SetRotation(uint8_t x) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	70fb      	strb	r3, [r7, #3]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003df6:	2200      	movs	r2, #0
 8003df8:	4619      	mov	r1, r3
 8003dfa:	f003 fc33 	bl	8007664 <HAL_GPIO_WritePin>
  rotation = x % 4; // can't be higher than 3
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	771a      	strb	r2, [r3, #28]
  switch (rotation) {
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	7f1b      	ldrb	r3, [r3, #28]
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d832      	bhi.n	8003e78 <_ZN7ILI934111SetRotationEh+0x98>
 8003e12:	a201      	add	r2, pc, #4	@ (adr r2, 8003e18 <_ZN7ILI934111SetRotationEh+0x38>)
 8003e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e18:	08003e29 	.word	0x08003e29
 8003e1c:	08003e3d 	.word	0x08003e3d
 8003e20:	08003e51 	.word	0x08003e51
 8003e24:	08003e65 	.word	0x08003e65
  case 0:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8003e28:	2348      	movs	r3, #72	@ 0x48
 8003e2a:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTWIDTH;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	22f0      	movs	r2, #240	@ 0xf0
 8003e30:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003e38:	815a      	strh	r2, [r3, #10]
    break;
 8003e3a:	e01d      	b.n	8003e78 <_ZN7ILI934111SetRotationEh+0x98>
  case 1:
    x = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8003e3c:	2328      	movs	r3, #40	@ 0x28
 8003e3e:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTHEIGHT;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003e46:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	22f0      	movs	r2, #240	@ 0xf0
 8003e4c:	815a      	strh	r2, [r3, #10]
    break;
 8003e4e:	e013      	b.n	8003e78 <_ZN7ILI934111SetRotationEh+0x98>
  case 2:
    x = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8003e50:	2388      	movs	r3, #136	@ 0x88
 8003e52:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTWIDTH;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	22f0      	movs	r2, #240	@ 0xf0
 8003e58:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003e60:	815a      	strh	r2, [r3, #10]
    break;
 8003e62:	e009      	b.n	8003e78 <_ZN7ILI934111SetRotationEh+0x98>
  case 3:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8003e64:	23e8      	movs	r3, #232	@ 0xe8
 8003e66:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTHEIGHT;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003e6e:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	22f0      	movs	r2, #240	@ 0xf0
 8003e74:	815a      	strh	r2, [r3, #10]
    break;
 8003e76:	bf00      	nop
  }
  TransmitCmd(ILI9341_MADCTL); // MADCTL
 8003e78:	2136      	movs	r1, #54	@ 0x36
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff fd46 	bl	800390c <_ZN7ILI934111TransmitCmdEh>
  Transmit8bitData(x);
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	4619      	mov	r1, r3
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff fd59 	bl	800393c <_ZN7ILI934116Transmit8bitDataEh>
  // For 9341, init default full-screen address window:
  SetWindow(0, 0, width_ - 1, height_ - 1); // CS_IDLE happens here
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff fdac 	bl	8003a08 <_ZN7ILI93419SetWindowEtttt>
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <_ZN7ILI934111SetTextSizeEh>:

void ILI9341::SetTextSize(uint8_t size)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	70fb      	strb	r3, [r7, #3]
  text_size_ = size;
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	b21a      	sxth	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	819a      	strh	r2, [r3, #12]
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <_ZN7ILI93418DrawCharEsshth>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint8_t size)
{
 8003ed8:	b590      	push	{r4, r7, lr}
 8003eda:	b089      	sub	sp, #36	@ 0x24
 8003edc:	af04      	add	r7, sp, #16
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	817b      	strh	r3, [r7, #10]
 8003eea:	460b      	mov	r3, r1
 8003eec:	813b      	strh	r3, [r7, #8]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	71fb      	strb	r3, [r7, #7]
  DrawChar(x, y, c, color, textbgcolor, size, size);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8b1b      	ldrh	r3, [r3, #24]
 8003ef6:	79fc      	ldrb	r4, [r7, #7]
 8003ef8:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8003efc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003f00:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003f04:	9203      	str	r2, [sp, #12]
 8003f06:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003f0a:	9202      	str	r2, [sp, #8]
 8003f0c:	9301      	str	r3, [sp, #4]
 8003f0e:	8c3b      	ldrh	r3, [r7, #32]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	4623      	mov	r3, r4
 8003f14:	4602      	mov	r2, r0
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f804 	bl	8003f24 <_ZN7ILI93418DrawCharEsshtthh>
}
 8003f1c:	bf00      	nop
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd90      	pop	{r4, r7, pc}

08003f24 <_ZN7ILI93418DrawCharEsshtthh>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint16_t bg, uint8_t size_x,
    uint8_t size_y)
{
 8003f24:	b590      	push	{r4, r7, lr}
 8003f26:	b089      	sub	sp, #36	@ 0x24
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	4611      	mov	r1, r2
 8003f30:	461a      	mov	r2, r3
 8003f32:	4603      	mov	r3, r0
 8003f34:	817b      	strh	r3, [r7, #10]
 8003f36:	460b      	mov	r3, r1
 8003f38:	813b      	strh	r3, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	71fb      	strb	r3, [r7, #7]
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8003f3e:	2300      	movs	r3, #0
 8003f40:	75fb      	strb	r3, [r7, #23]
 8003f42:	e0a8      	b.n	8004096 <_ZN7ILI93418DrawCharEsshtthh+0x172>
      uint8_t line = font[c * 5 + i];
 8003f44:	79fa      	ldrb	r2, [r7, #7]
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	441a      	add	r2, r3
 8003f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f50:	4413      	add	r3, r2
 8003f52:	4a6e      	ldr	r2, [pc, #440]	@ (800410c <_ZN7ILI93418DrawCharEsshtthh+0x1e8>)
 8003f54:	5cd3      	ldrb	r3, [r2, r3]
 8003f56:	75bb      	strb	r3, [r7, #22]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8003f58:	2300      	movs	r3, #0
 8003f5a:	757b      	strb	r3, [r7, #21]
 8003f5c:	e090      	b.n	8004080 <_ZN7ILI93418DrawCharEsshtthh+0x15c>
        if (line & 1) {
 8003f5e:	7dbb      	ldrb	r3, [r7, #22]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d03f      	beq.n	8003fe8 <_ZN7ILI93418DrawCharEsshtthh+0xc4>
          if (size_x == 1 && size_y == 1)
 8003f68:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d114      	bne.n	8003f9a <_ZN7ILI93418DrawCharEsshtthh+0x76>
 8003f70:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d110      	bne.n	8003f9a <_ZN7ILI93418DrawCharEsshtthh+0x76>
            DrawPixel(x + i, y + j, color);
 8003f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	897b      	ldrh	r3, [r7, #10]
 8003f80:	4413      	add	r3, r2
 8003f82:	b299      	uxth	r1, r3
 8003f84:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	893b      	ldrh	r3, [r7, #8]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f7ff fd8a 	bl	8003aac <_ZN7ILI93419DrawPixelEttt>
 8003f98:	e069      	b.n	800406e <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 8003f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	fb12 f303 	smulbb	r3, r2, r3
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	897b      	ldrh	r3, [r7, #10]
 8003fae:	4413      	add	r3, r2
 8003fb0:	b299      	uxth	r1, r3
 8003fb2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	fb12 f303 	smulbb	r3, r2, r3
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	893b      	ldrh	r3, [r7, #8]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	b298      	uxth	r0, r3
 8003fca:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003fce:	b29c      	uxth	r4, r3
 8003fd0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003fd8:	9201      	str	r2, [sp, #4]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	4623      	mov	r3, r4
 8003fde:	4602      	mov	r2, r0
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f939 	bl	8004258 <_ZN7ILI93418FillRectEttttt>
 8003fe6:	e042      	b.n	800406e <_ZN7ILI93418DrawCharEsshtthh+0x14a>
                          color);
        } else if (bg != color) {
 8003fe8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003fea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d03e      	beq.n	800406e <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          if (size_x == 1 && size_y == 1)
 8003ff0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d114      	bne.n	8004022 <_ZN7ILI93418DrawCharEsshtthh+0xfe>
 8003ff8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d110      	bne.n	8004022 <_ZN7ILI93418DrawCharEsshtthh+0xfe>
            DrawPixel(x + i, y + j, bg);
 8004000:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004004:	b29a      	uxth	r2, r3
 8004006:	897b      	ldrh	r3, [r7, #10]
 8004008:	4413      	add	r3, r2
 800400a:	b299      	uxth	r1, r3
 800400c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004010:	b29a      	uxth	r2, r3
 8004012:	893b      	ldrh	r3, [r7, #8]
 8004014:	4413      	add	r3, r2
 8004016:	b29a      	uxth	r2, r3
 8004018:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7ff fd46 	bl	8003aac <_ZN7ILI93419DrawPixelEttt>
 8004020:	e025      	b.n	800406e <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8004022:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004026:	b29a      	uxth	r2, r3
 8004028:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800402c:	b29b      	uxth	r3, r3
 800402e:	fb12 f303 	smulbb	r3, r2, r3
 8004032:	b29a      	uxth	r2, r3
 8004034:	897b      	ldrh	r3, [r7, #10]
 8004036:	4413      	add	r3, r2
 8004038:	b299      	uxth	r1, r3
 800403a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800403e:	b29a      	uxth	r2, r3
 8004040:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004044:	b29b      	uxth	r3, r3
 8004046:	fb12 f303 	smulbb	r3, r2, r3
 800404a:	b29a      	uxth	r2, r3
 800404c:	893b      	ldrh	r3, [r7, #8]
 800404e:	4413      	add	r3, r2
 8004050:	b298      	uxth	r0, r3
 8004052:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004056:	b29c      	uxth	r4, r3
 8004058:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800405c:	b29b      	uxth	r3, r3
 800405e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004060:	9201      	str	r2, [sp, #4]
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	4623      	mov	r3, r4
 8004066:	4602      	mov	r2, r0
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f8f5 	bl	8004258 <_ZN7ILI93418FillRectEttttt>
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 800406e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	3301      	adds	r3, #1
 8004076:	b2db      	uxtb	r3, r3
 8004078:	757b      	strb	r3, [r7, #21]
 800407a:	7dbb      	ldrb	r3, [r7, #22]
 800407c:	085b      	lsrs	r3, r3, #1
 800407e:	75bb      	strb	r3, [r7, #22]
 8004080:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004084:	2b07      	cmp	r3, #7
 8004086:	f77f af6a 	ble.w	8003f5e <_ZN7ILI93418DrawCharEsshtthh+0x3a>
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 800408a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800408e:	b2db      	uxtb	r3, r3
 8004090:	3301      	adds	r3, #1
 8004092:	b2db      	uxtb	r3, r3
 8004094:	75fb      	strb	r3, [r7, #23]
 8004096:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800409a:	2b04      	cmp	r3, #4
 800409c:	f77f af52 	ble.w	8003f44 <_ZN7ILI93418DrawCharEsshtthh+0x20>
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
 80040a0:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80040a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d02d      	beq.n	8004104 <_ZN7ILI93418DrawCharEsshtthh+0x1e0>
      if (size_x == 1 && size_y == 1)
 80040a8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d10e      	bne.n	80040ce <_ZN7ILI93418DrawCharEsshtthh+0x1aa>
 80040b0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d10a      	bne.n	80040ce <_ZN7ILI93418DrawCharEsshtthh+0x1aa>
        DrawFastVLine(x + 5, y, 8, bg);
 80040b8:	897b      	ldrh	r3, [r7, #10]
 80040ba:	3305      	adds	r3, #5
 80040bc:	b299      	uxth	r1, r3
 80040be:	893a      	ldrh	r2, [r7, #8]
 80040c0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	2308      	movs	r3, #8
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f7ff fe36 	bl	8003d38 <_ZN7ILI934113DrawFastVLineEtttt>
      else
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    }
}
 80040cc:	e01a      	b.n	8004104 <_ZN7ILI93418DrawCharEsshtthh+0x1e0>
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80040ce:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	0092      	lsls	r2, r2, #2
 80040d8:	4413      	add	r3, r2
 80040da:	b29a      	uxth	r2, r3
 80040dc:	897b      	ldrh	r3, [r7, #10]
 80040de:	4413      	add	r3, r2
 80040e0:	b299      	uxth	r1, r3
 80040e2:	8938      	ldrh	r0, [r7, #8]
 80040e4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80040e8:	b29c      	uxth	r4, r3
 80040ea:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80040f6:	9201      	str	r2, [sp, #4]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	4623      	mov	r3, r4
 80040fc:	4602      	mov	r2, r0
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f8aa 	bl	8004258 <_ZN7ILI93418FillRectEttttt>
}
 8004104:	bf00      	nop
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	bd90      	pop	{r4, r7, pc}
 800410c:	0800f708 	.word	0x0800f708

08004110 <_ZN7ILI93418DrawTextEttPKct>:

void ILI9341::DrawText(uint16_t x, uint16_t y, const char *str, uint16_t color)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	607b      	str	r3, [r7, #4]
 800411a:	460b      	mov	r3, r1
 800411c:	817b      	strh	r3, [r7, #10]
 800411e:	4613      	mov	r3, r2
 8004120:	813b      	strh	r3, [r7, #8]
  // NOTE: Characters are 6x8 (wxh)
    uint8_t TempChar;

    /* Set area back to span the entire LCD */
    SetWindow(0, 0, width_ - 1, height_ - 1);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29b      	uxth	r3, r3
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	2200      	movs	r2, #0
 8004140:	2100      	movs	r1, #0
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f7ff fc60 	bl	8003a08 <_ZN7ILI93419SetWindowEtttt>
    do
    {
        TempChar = *str++;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	75fb      	strb	r3, [r7, #23]
        DrawChar( x, y, TempChar, color, text_size_);
 8004152:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004156:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	7df8      	ldrb	r0, [r7, #23]
 8004164:	9301      	str	r3, [sp, #4]
 8004166:	8c3b      	ldrh	r3, [r7, #32]
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	4603      	mov	r3, r0
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f7ff feb3 	bl	8003ed8 <_ZN7ILI93418DrawCharEsshth>
        if( x < width_ - 1 - 8)
 8004172:	897a      	ldrh	r2, [r7, #10]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800417a:	3b09      	subs	r3, #9
 800417c:	429a      	cmp	r2, r3
 800417e:	da0c      	bge.n	800419a <_ZN7ILI93418DrawTextEttPKct+0x8a>
        {
            x += (6 * text_size_);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004186:	b29b      	uxth	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	0052      	lsls	r2, r2, #1
 800418c:	4413      	add	r3, r2
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	897b      	ldrh	r3, [r7, #10]
 8004194:	4413      	add	r3, r2
 8004196:	817b      	strh	r3, [r7, #10]
 8004198:	e016      	b.n	80041c8 <_ZN7ILI93418DrawTextEttPKct+0xb8>
        }
        else if ( y < height_ - 1 - 16)
 800419a:	893a      	ldrh	r2, [r7, #8]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80041a2:	3b11      	subs	r3, #17
 80041a4:	429a      	cmp	r2, r3
 80041a6:	da0b      	bge.n	80041c0 <_ZN7ILI93418DrawTextEttPKct+0xb0>
        {
            x = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	817b      	strh	r3, [r7, #10]
            y += (8 * text_size_);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	893b      	ldrh	r3, [r7, #8]
 80041ba:	4413      	add	r3, r2
 80041bc:	813b      	strh	r3, [r7, #8]
 80041be:	e003      	b.n	80041c8 <_ZN7ILI93418DrawTextEttPKct+0xb8>
        }
        else
        {
            x = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	817b      	strh	r3, [r7, #10]
            y = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	813b      	strh	r3, [r7, #8]
        }
    }
    while ( *str != 0 );
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1bb      	bne.n	8004148 <_ZN7ILI93418DrawTextEttPKct+0x38>
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <_ZN7ILI93418DrawRectEttttt>:

void ILI9341::DrawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b086      	sub	sp, #24
 80041de:	af02      	add	r7, sp, #8
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	4608      	mov	r0, r1
 80041e4:	4611      	mov	r1, r2
 80041e6:	461a      	mov	r2, r3
 80041e8:	4603      	mov	r3, r0
 80041ea:	817b      	strh	r3, [r7, #10]
 80041ec:	460b      	mov	r3, r1
 80041ee:	813b      	strh	r3, [r7, #8]
 80041f0:	4613      	mov	r3, r2
 80041f2:	80fb      	strh	r3, [r7, #6]
  DrawFastHLine(x, y, w, color);
 80041f4:	88f8      	ldrh	r0, [r7, #6]
 80041f6:	893a      	ldrh	r2, [r7, #8]
 80041f8:	8979      	ldrh	r1, [r7, #10]
 80041fa:	8bbb      	ldrh	r3, [r7, #28]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	4603      	mov	r3, r0
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff fd45 	bl	8003c90 <_ZN7ILI934113DrawFastHLineEtttt>
  DrawFastHLine(x, y + h - 1, w, color);
 8004206:	893a      	ldrh	r2, [r7, #8]
 8004208:	8b3b      	ldrh	r3, [r7, #24]
 800420a:	4413      	add	r3, r2
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	88f8      	ldrh	r0, [r7, #6]
 8004214:	8979      	ldrh	r1, [r7, #10]
 8004216:	8bbb      	ldrh	r3, [r7, #28]
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	4603      	mov	r3, r0
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff fd37 	bl	8003c90 <_ZN7ILI934113DrawFastHLineEtttt>
  DrawFastVLine(x, y, h, color);
 8004222:	8b38      	ldrh	r0, [r7, #24]
 8004224:	893a      	ldrh	r2, [r7, #8]
 8004226:	8979      	ldrh	r1, [r7, #10]
 8004228:	8bbb      	ldrh	r3, [r7, #28]
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	4603      	mov	r3, r0
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f7ff fd82 	bl	8003d38 <_ZN7ILI934113DrawFastVLineEtttt>
  DrawFastVLine(x + w - 1, y, h, color);
 8004234:	897a      	ldrh	r2, [r7, #10]
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	4413      	add	r3, r2
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b299      	uxth	r1, r3
 8004240:	8b38      	ldrh	r0, [r7, #24]
 8004242:	893a      	ldrh	r2, [r7, #8]
 8004244:	8bbb      	ldrh	r3, [r7, #28]
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	4603      	mov	r3, r0
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff fd74 	bl	8003d38 <_ZN7ILI934113DrawFastVLineEtttt>
}
 8004250:	bf00      	nop
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <_ZN7ILI93418FillRectEttttt>:

void ILI9341::FillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	4608      	mov	r0, r1
 8004262:	4611      	mov	r1, r2
 8004264:	461a      	mov	r2, r3
 8004266:	4603      	mov	r3, r0
 8004268:	817b      	strh	r3, [r7, #10]
 800426a:	460b      	mov	r3, r1
 800426c:	813b      	strh	r3, [r7, #8]
 800426e:	4613      	mov	r3, r2
 8004270:	80fb      	strh	r3, [r7, #6]
  int16_t x2, y2;

  // Initial off-screen clipping
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d024      	beq.n	80042c2 <_ZN7ILI93418FillRectEttttt+0x6a>
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 8004278:	8c3b      	ldrh	r3, [r7, #32]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d021      	beq.n	80042c2 <_ZN7ILI93418FillRectEttttt+0x6a>
 800427e:	897b      	ldrh	r3, [r7, #10]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8004286:	4293      	cmp	r3, r2
 8004288:	da1b      	bge.n	80042c2 <_ZN7ILI93418FillRectEttttt+0x6a>
 800428a:	893b      	ldrh	r3, [r7, #8]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8004292:	4293      	cmp	r3, r2
 8004294:	da15      	bge.n	80042c2 <_ZN7ILI93418FillRectEttttt+0x6a>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8004296:	897a      	ldrh	r2, [r7, #10]
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	4413      	add	r3, r2
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	82fb      	strh	r3, [r7, #22]
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 80042a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	db0a      	blt.n	80042c2 <_ZN7ILI93418FillRectEttttt+0x6a>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 80042ac:	893a      	ldrh	r2, [r7, #8]
 80042ae:	8c3b      	ldrh	r3, [r7, #32]
 80042b0:	4413      	add	r3, r2
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	82bb      	strh	r3, [r7, #20]
 80042ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	da01      	bge.n	80042c6 <_ZN7ILI93418FillRectEttttt+0x6e>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <_ZN7ILI93418FillRectEttttt+0x70>
 80042c6:	2300      	movs	r3, #0
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d13a      	bne.n	8004342 <_ZN7ILI93418FillRectEttttt+0xea>
  }
  if (y1 < 0) { // Clip top
    h += y1;
    y1 = 0;
  }
  if (x2 >= width_) { // Clip right
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80042d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	db0c      	blt.n	80042f4 <_ZN7ILI93418FillRectEttttt+0x9c>
    x2 = width_ - 1;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	82fb      	strh	r3, [r7, #22]
    w = x2 - x1 + 1;
 80042e8:	8afa      	ldrh	r2, [r7, #22]
 80042ea:	897b      	ldrh	r3, [r7, #10]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3301      	adds	r3, #1
 80042f2:	80fb      	strh	r3, [r7, #6]
  }
  if (y2 >= height_) { // Clip bottom
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80042fa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80042fe:	429a      	cmp	r2, r3
 8004300:	db0c      	blt.n	800431c <_ZN7ILI93418FillRectEttttt+0xc4>
    y2 = height_ - 1;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29b      	uxth	r3, r3
 800430e:	82bb      	strh	r3, [r7, #20]
    h = y2 - y1 + 1;
 8004310:	8aba      	ldrh	r2, [r7, #20]
 8004312:	893b      	ldrh	r3, [r7, #8]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	b29b      	uxth	r3, r3
 8004318:	3301      	adds	r3, #1
 800431a:	843b      	strh	r3, [r7, #32]
  }

  SetWindow(x1, y1, x2, y2);
 800431c:	8af8      	ldrh	r0, [r7, #22]
 800431e:	8abb      	ldrh	r3, [r7, #20]
 8004320:	893a      	ldrh	r2, [r7, #8]
 8004322:	8979      	ldrh	r1, [r7, #10]
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	4603      	mov	r3, r0
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f7ff fb6d 	bl	8003a08 <_ZN7ILI93419SetWindowEtttt>
  Flood(color, (uint32_t)w * (uint32_t)h);
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	8c3a      	ldrh	r2, [r7, #32]
 8004332:	fb03 f202 	mul.w	r2, r3, r2
 8004336:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004338:	4619      	mov	r1, r3
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f7ff fc16 	bl	8003b6c <_ZN7ILI93415FloodEtm>
 8004340:	e000      	b.n	8004344 <_ZN7ILI93418FillRectEttttt+0xec>
    return;
 8004342:	bf00      	nop
}
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <_ZN7ILI934110FillCircleEtttt>:
void ILI9341::FillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) {
 800434a:	b580      	push	{r7, lr}
 800434c:	b088      	sub	sp, #32
 800434e:	af02      	add	r7, sp, #8
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	4608      	mov	r0, r1
 8004354:	4611      	mov	r1, r2
 8004356:	461a      	mov	r2, r3
 8004358:	4603      	mov	r3, r0
 800435a:	817b      	strh	r3, [r7, #10]
 800435c:	460b      	mov	r3, r1
 800435e:	813b      	strh	r3, [r7, #8]
 8004360:	4613      	mov	r3, r2
 8004362:	80fb      	strh	r3, [r7, #6]
    int16_t x = 0, y = r;
 8004364:	2300      	movs	r3, #0
 8004366:	82fb      	strh	r3, [r7, #22]
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	82bb      	strh	r3, [r7, #20]
    int16_t d = 1 - r;
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	f1c3 0301 	rsb	r3, r3, #1
 8004372:	b29b      	uxth	r3, r3
 8004374:	827b      	strh	r3, [r7, #18]

    // Draw initial center line
    DrawFastHLine(x0 - r, y0, 2 * r + 1, color);
 8004376:	897a      	ldrh	r2, [r7, #10]
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	b299      	uxth	r1, r3
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	b29b      	uxth	r3, r3
 8004384:	3301      	adds	r3, #1
 8004386:	b298      	uxth	r0, r3
 8004388:	893a      	ldrh	r2, [r7, #8]
 800438a:	8c3b      	ldrh	r3, [r7, #32]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	4603      	mov	r3, r0
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f7ff fc7d 	bl	8003c90 <_ZN7ILI934113DrawFastHLineEtttt>

    while (y >= x) {
 8004396:	e073      	b.n	8004480 <_ZN7ILI934110FillCircleEtttt+0x136>
        // Draw horizontal spans
        DrawFastHLine(x0 - x, y0 + y, 2 * x + 1, color);
 8004398:	8afb      	ldrh	r3, [r7, #22]
 800439a:	897a      	ldrh	r2, [r7, #10]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	b299      	uxth	r1, r3
 80043a0:	8aba      	ldrh	r2, [r7, #20]
 80043a2:	893b      	ldrh	r3, [r7, #8]
 80043a4:	4413      	add	r3, r2
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	8afb      	ldrh	r3, [r7, #22]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3301      	adds	r3, #1
 80043b0:	b298      	uxth	r0, r3
 80043b2:	8c3b      	ldrh	r3, [r7, #32]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	4603      	mov	r3, r0
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f7ff fc69 	bl	8003c90 <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - x, y0 - y, 2 * x + 1, color);
 80043be:	8afb      	ldrh	r3, [r7, #22]
 80043c0:	897a      	ldrh	r2, [r7, #10]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	b299      	uxth	r1, r3
 80043c6:	8abb      	ldrh	r3, [r7, #20]
 80043c8:	893a      	ldrh	r2, [r7, #8]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	8afb      	ldrh	r3, [r7, #22]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3301      	adds	r3, #1
 80043d6:	b298      	uxth	r0, r3
 80043d8:	8c3b      	ldrh	r3, [r7, #32]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	4603      	mov	r3, r0
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f7ff fc56 	bl	8003c90 <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - y, y0 + x, 2 * y + 1, color);
 80043e4:	8abb      	ldrh	r3, [r7, #20]
 80043e6:	897a      	ldrh	r2, [r7, #10]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	b299      	uxth	r1, r3
 80043ec:	8afa      	ldrh	r2, [r7, #22]
 80043ee:	893b      	ldrh	r3, [r7, #8]
 80043f0:	4413      	add	r3, r2
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	8abb      	ldrh	r3, [r7, #20]
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3301      	adds	r3, #1
 80043fc:	b298      	uxth	r0, r3
 80043fe:	8c3b      	ldrh	r3, [r7, #32]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	4603      	mov	r3, r0
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7ff fc43 	bl	8003c90 <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - y, y0 - x, 2 * y + 1, color);
 800440a:	8abb      	ldrh	r3, [r7, #20]
 800440c:	897a      	ldrh	r2, [r7, #10]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	b299      	uxth	r1, r3
 8004412:	8afb      	ldrh	r3, [r7, #22]
 8004414:	893a      	ldrh	r2, [r7, #8]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	b29a      	uxth	r2, r3
 800441a:	8abb      	ldrh	r3, [r7, #20]
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	b29b      	uxth	r3, r3
 8004420:	3301      	adds	r3, #1
 8004422:	b298      	uxth	r0, r3
 8004424:	8c3b      	ldrh	r3, [r7, #32]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	4603      	mov	r3, r0
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f7ff fc30 	bl	8003c90 <_ZN7ILI934113DrawFastHLineEtttt>

        x++;
 8004430:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004434:	b29b      	uxth	r3, r3
 8004436:	3301      	adds	r3, #1
 8004438:	b29b      	uxth	r3, r3
 800443a:	82fb      	strh	r3, [r7, #22]
        if (d < 0) {
 800443c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004440:	2b00      	cmp	r3, #0
 8004442:	da09      	bge.n	8004458 <_ZN7ILI934110FillCircleEtttt+0x10e>
            d += 2 * x + 1;
 8004444:	8afb      	ldrh	r3, [r7, #22]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	8a7b      	ldrh	r3, [r7, #18]
 800444c:	4413      	add	r3, r2
 800444e:	b29b      	uxth	r3, r3
 8004450:	3301      	adds	r3, #1
 8004452:	b29b      	uxth	r3, r3
 8004454:	827b      	strh	r3, [r7, #18]
 8004456:	e013      	b.n	8004480 <_ZN7ILI934110FillCircleEtttt+0x136>
        } else {
            y--;
 8004458:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29b      	uxth	r3, r3
 8004462:	82bb      	strh	r3, [r7, #20]
            d += 2 * (x - y) + 1;
 8004464:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004468:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	b29b      	uxth	r3, r3
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	8a7b      	ldrh	r3, [r7, #18]
 8004476:	4413      	add	r3, r2
 8004478:	b29b      	uxth	r3, r3
 800447a:	3301      	adds	r3, #1
 800447c:	b29b      	uxth	r3, r3
 800447e:	827b      	strh	r3, [r7, #18]
    while (y >= x) {
 8004480:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004484:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004488:	429a      	cmp	r2, r3
 800448a:	da85      	bge.n	8004398 <_ZN7ILI934110FillCircleEtttt+0x4e>
        }
    }
}
 800448c:	bf00      	nop
 800448e:	bf00      	nop
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <TCAL9538RSVR_INIT>:
*/



uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b086      	sub	sp, #24
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	4611      	mov	r1, r2
 80044a2:	461a      	mov	r2, r3
 80044a4:	460b      	mov	r3, r1
 80044a6:	71fb      	strb	r3, [r7, #7]
 80044a8:	4613      	mov	r3, r2
 80044aa:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 80044ac:	2300      	movs	r3, #0
 80044ae:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;
	dev->input = direction_bitMask;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	79ba      	ldrb	r2, [r7, #6]
 80044b4:	719a      	strb	r2, [r3, #6]


    dev->i2cHandle = i2cHandle;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress<<1);
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	b25b      	sxtb	r3, r3
 80044d0:	f063 031f 	orn	r3, r3, #31
 80044d4:	b25b      	sxtb	r3, r3
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	711a      	strb	r2, [r3, #4]
    uint8_t hold_bitMask = direction_bitMask;
 80044dc:	79bb      	ldrb	r3, [r7, #6]
 80044de:	757b      	strb	r3, [r7, #21]

    status = TCAL9538RSVR_SetDirection(dev, &hold_bitMask);
 80044e0:	f107 0315 	add.w	r3, r7, #21
 80044e4:	4619      	mov	r1, r3
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 f83b 	bl	8004562 <TCAL9538RSVR_SetDirection>
 80044ec:	4603      	mov	r3, r0
 80044ee:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 80044f0:	7dbb      	ldrb	r3, [r7, #22]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bf14      	ite	ne
 80044f6:	2301      	movne	r3, #1
 80044f8:	2300      	moveq	r3, #0
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
 8004500:	4413      	add	r3, r2
 8004502:	75fb      	strb	r3, [r7, #23]

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 8004504:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004508:	4619      	mov	r1, r3
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f838 	bl	8004580 <TCAL9538RSVR_SetInterrupts>
 8004510:	4603      	mov	r3, r0
 8004512:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8004514:	7dbb      	ldrb	r3, [r7, #22]
 8004516:	2b00      	cmp	r3, #0
 8004518:	bf14      	ite	ne
 800451a:	2301      	movne	r3, #1
 800451c:	2300      	moveq	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	7dfb      	ldrb	r3, [r7, #23]
 8004524:	4413      	add	r3, r2
 8004526:	75fb      	strb	r3, [r7, #23]

    // if all pins are inputs, invert all pins
    if (direction_bitMask == 0xFF) {
 8004528:	79bb      	ldrb	r3, [r7, #6]
 800452a:	2bff      	cmp	r3, #255	@ 0xff
 800452c:	d114      	bne.n	8004558 <TCAL9538RSVR_INIT+0xc2>
        uint8_t full = 0xFF;
 800452e:	23ff      	movs	r3, #255	@ 0xff
 8004530:	753b      	strb	r3, [r7, #20]
        status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_INVERSION, &full);
 8004532:	f107 0314 	add.w	r3, r7, #20
 8004536:	461a      	mov	r2, r3
 8004538:	2102      	movs	r1, #2
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 f894 	bl	8004668 <TCAL9538RSVR_WriteRegister>
 8004540:	4603      	mov	r3, r0
 8004542:	75bb      	strb	r3, [r7, #22]
        errNum += (status != HAL_OK);
 8004544:	7dbb      	ldrb	r3, [r7, #22]
 8004546:	2b00      	cmp	r3, #0
 8004548:	bf14      	ite	ne
 800454a:	2301      	movne	r3, #1
 800454c:	2300      	moveq	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	7dfb      	ldrb	r3, [r7, #23]
 8004554:	4413      	add	r3, r2
 8004556:	75fb      	strb	r3, [r7, #23]
    }
    

    return (errNum);
 8004558:	7dfb      	ldrb	r3, [r7, #23]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t* bitMask)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b082      	sub	sp, #8
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, bitMask);
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	2103      	movs	r1, #3
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f879 	bl	8004668 <TCAL9538RSVR_WriteRegister>
 8004576:	4603      	mov	r3, r0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 800458c:	1cfb      	adds	r3, r7, #3
 800458e:	461a      	mov	r2, r3
 8004590:	2145      	movs	r1, #69	@ 0x45
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f868 	bl	8004668 <TCAL9538RSVR_WriteRegister>
 8004598:	4603      	mov	r3, r0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	737b      	strb	r3, [r7, #13]


    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 80045b2:	f107 030d 	add.w	r3, r7, #13
 80045b6:	461a      	mov	r2, r3
 80045b8:	2146      	movs	r1, #70	@ 0x46
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f837 	bl	800462e <TCAL9538RSVR_ReadRegister>
 80045c0:	4603      	mov	r3, r0
 80045c2:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 80045c4:	7bbb      	ldrb	r3, [r7, #14]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bf14      	ite	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	2300      	moveq	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	461a      	mov	r2, r3
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	4413      	add	r3, r2
 80045d6:	73fb      	strb	r3, [r7, #15]

    // Read updated input values
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3305      	adds	r3, #5
 80045dc:	4619      	mov	r1, r3
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f807 	bl	80045f2 <TCAL9538RSVR_ReadInput>
 80045e4:	4603      	mov	r3, r0
 80045e6:	73bb      	strb	r3, [r7, #14]


    return (errNum);
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <TCAL9538RSVR_ReadInput>:




HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	2100      	movs	r1, #0
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f814 	bl	800462e <TCAL9538RSVR_ReadRegister>
 8004606:	4603      	mov	r3, r0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <TCAL9538RSVR_SetOutput>:
HAL_StatusTypeDef TCAL9538RSVR_SetOutput(TCAL9538RSVR* dev, uint8_t *data)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	2101      	movs	r1, #1
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f822 	bl	8004668 <TCAL9538RSVR_WriteRegister>
 8004624:	4603      	mov	r3, r0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <TCAL9538RSVR_ReadRegister>:

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b088      	sub	sp, #32
 8004632:	af04      	add	r7, sp, #16
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	460b      	mov	r3, r1
 8004638:	607a      	str	r2, [r7, #4]
 800463a:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	791b      	ldrb	r3, [r3, #4]
 8004644:	4619      	mov	r1, r3
 8004646:	7afb      	ldrb	r3, [r7, #11]
 8004648:	b29a      	uxth	r2, r3
 800464a:	f04f 33ff 	mov.w	r3, #4294967295
 800464e:	9302      	str	r3, [sp, #8]
 8004650:	2301      	movs	r3, #1
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	2301      	movs	r3, #1
 800465a:	f003 f9fd 	bl	8007a58 <HAL_I2C_Mem_Read>
 800465e:	4603      	mov	r3, r0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af04      	add	r7, sp, #16
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	460b      	mov	r3, r1
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Write(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	791b      	ldrb	r3, [r3, #4]
 800467e:	4619      	mov	r1, r3
 8004680:	7afb      	ldrb	r3, [r7, #11]
 8004682:	b29a      	uxth	r2, r3
 8004684:	f04f 33ff 	mov.w	r3, #4294967295
 8004688:	9302      	str	r3, [sp, #8]
 800468a:	2301      	movs	r3, #1
 800468c:	9301      	str	r3, [sp, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	2301      	movs	r3, #1
 8004694:	f003 f8cc 	bl	8007830 <HAL_I2C_Mem_Write>
 8004698:	4603      	mov	r3, r0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80046a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80046dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80046a8:	f7fe ff44 	bl	8003534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046ac:	480c      	ldr	r0, [pc, #48]	@ (80046e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80046ae:	490d      	ldr	r1, [pc, #52]	@ (80046e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80046b0:	4a0d      	ldr	r2, [pc, #52]	@ (80046e8 <LoopForever+0xe>)
  movs r3, #0
 80046b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046b4:	e002      	b.n	80046bc <LoopCopyDataInit>

080046b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046ba:	3304      	adds	r3, #4

080046bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046c0:	d3f9      	bcc.n	80046b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046c2:	4a0a      	ldr	r2, [pc, #40]	@ (80046ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80046c4:	4c0a      	ldr	r4, [pc, #40]	@ (80046f0 <LoopForever+0x16>)
  movs r3, #0
 80046c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046c8:	e001      	b.n	80046ce <LoopFillZerobss>

080046ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046cc:	3204      	adds	r2, #4

080046ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046d0:	d3fb      	bcc.n	80046ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046d2:	f00a fb53 	bl	800ed7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80046d6:	f7fd fec7 	bl	8002468 <main>

080046da <LoopForever>:

LoopForever:
    b LoopForever
 80046da:	e7fe      	b.n	80046da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80046dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80046e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046e4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80046e8:	0800fc88 	.word	0x0800fc88
  ldr r2, =_sbss
 80046ec:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80046f0:	20002b30 	.word	0x20002b30

080046f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80046f4:	e7fe      	b.n	80046f4 <ADC1_2_IRQHandler>

080046f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004700:	2003      	movs	r0, #3
 8004702:	f002 fb72 	bl	8006dea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004706:	200f      	movs	r0, #15
 8004708:	f7fe fe06 	bl	8003318 <HAL_InitTick>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	71fb      	strb	r3, [r7, #7]
 8004716:	e001      	b.n	800471c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004718:	f7fe fb12 	bl	8002d40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800471c:	79fb      	ldrb	r3, [r7, #7]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800472c:	4b06      	ldr	r3, [pc, #24]	@ (8004748 <HAL_IncTick+0x20>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	4b06      	ldr	r3, [pc, #24]	@ (800474c <HAL_IncTick+0x24>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4413      	add	r3, r2
 8004738:	4a04      	ldr	r2, [pc, #16]	@ (800474c <HAL_IncTick+0x24>)
 800473a:	6013      	str	r3, [r2, #0]
}
 800473c:	bf00      	nop
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000034 	.word	0x20000034
 800474c:	2000048c 	.word	0x2000048c

08004750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  return uwTick;
 8004754:	4b03      	ldr	r3, [pc, #12]	@ (8004764 <HAL_GetTick+0x14>)
 8004756:	681b      	ldr	r3, [r3, #0]
}
 8004758:	4618      	mov	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	2000048c 	.word	0x2000048c

08004768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004770:	f7ff ffee 	bl	8004750 <HAL_GetTick>
 8004774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004780:	d005      	beq.n	800478e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004782:	4b0a      	ldr	r3, [pc, #40]	@ (80047ac <HAL_Delay+0x44>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800478e:	bf00      	nop
 8004790:	f7ff ffde 	bl	8004750 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	429a      	cmp	r2, r3
 800479e:	d8f7      	bhi.n	8004790 <HAL_Delay+0x28>
  {
  }
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20000034 	.word	0x20000034

080047b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	609a      	str	r2, [r3, #8]
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	609a      	str	r2, [r3, #8]
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3360      	adds	r3, #96	@ 0x60
 800482a:	461a      	mov	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	4b08      	ldr	r3, [pc, #32]	@ (800485c <LL_ADC_SetOffset+0x44>)
 800483a:	4013      	ands	r3, r2
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	4313      	orrs	r3, r2
 8004848:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004850:	bf00      	nop
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	03fff000 	.word	0x03fff000

08004860 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3360      	adds	r3, #96	@ 0x60
 800486e:	461a      	mov	r2, r3
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004880:	4618      	mov	r0, r3
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3360      	adds	r3, #96	@ 0x60
 800489c:	461a      	mov	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	431a      	orrs	r2, r3
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	615a      	str	r2, [r3, #20]
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800490e:	b480      	push	{r7}
 8004910:	b087      	sub	sp, #28
 8004912:	af00      	add	r7, sp, #0
 8004914:	60f8      	str	r0, [r7, #12]
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3330      	adds	r3, #48	@ 0x30
 800491e:	461a      	mov	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	0a1b      	lsrs	r3, r3, #8
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	4413      	add	r3, r2
 800492c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f003 031f 	and.w	r3, r3, #31
 8004938:	211f      	movs	r1, #31
 800493a:	fa01 f303 	lsl.w	r3, r1, r3
 800493e:	43db      	mvns	r3, r3
 8004940:	401a      	ands	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0e9b      	lsrs	r3, r3, #26
 8004946:	f003 011f 	and.w	r1, r3, #31
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f003 031f 	and.w	r3, r3, #31
 8004950:	fa01 f303 	lsl.w	r3, r1, r3
 8004954:	431a      	orrs	r2, r3
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004966:	b480      	push	{r7}
 8004968:	b087      	sub	sp, #28
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3314      	adds	r3, #20
 8004976:	461a      	mov	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	0e5b      	lsrs	r3, r3, #25
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	4413      	add	r3, r2
 8004984:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	0d1b      	lsrs	r3, r3, #20
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	2107      	movs	r1, #7
 8004994:	fa01 f303 	lsl.w	r3, r1, r3
 8004998:	43db      	mvns	r3, r3
 800499a:	401a      	ands	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	0d1b      	lsrs	r3, r3, #20
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	fa01 f303 	lsl.w	r3, r1, r3
 80049aa:	431a      	orrs	r2, r3
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80049b0:	bf00      	nop
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d4:	43db      	mvns	r3, r3
 80049d6:	401a      	ands	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f003 0318 	and.w	r3, r3, #24
 80049de:	4908      	ldr	r1, [pc, #32]	@ (8004a00 <LL_ADC_SetChannelSingleDiff+0x44>)
 80049e0:	40d9      	lsrs	r1, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	400b      	ands	r3, r1
 80049e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ea:	431a      	orrs	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80049f2:	bf00      	nop
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	0007ffff 	.word	0x0007ffff

08004a04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 031f 	and.w	r3, r3, #31
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004a30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6093      	str	r3, [r2, #8]
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a58:	d101      	bne.n	8004a5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004a7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a80:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004aa8:	d101      	bne.n	8004aae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004acc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ad0:	f043 0201 	orr.w	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004af4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004af8:	f043 0202 	orr.w	r2, r3, #2
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <LL_ADC_IsEnabled+0x18>
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <LL_ADC_IsEnabled+0x1a>
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d101      	bne.n	8004b4a <LL_ADC_IsDisableOngoing+0x18>
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <LL_ADC_IsDisableOngoing+0x1a>
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b6c:	f043 0204 	orr.w	r2, r3, #4
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b94:	f043 0210 	orr.w	r2, r3, #16
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d101      	bne.n	8004bc0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004bde:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004be2:	f043 0220 	orr.w	r2, r3, #32
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d101      	bne.n	8004c0e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c1c:	b590      	push	{r4, r7, lr}
 8004c1e:	b089      	sub	sp, #36	@ 0x24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e133      	b.n	8004e9e <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d109      	bne.n	8004c58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7fe f8a3 	bl	8002d90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff fef1 	bl	8004a44 <LL_ADC_IsDeepPowerDownEnabled>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d004      	beq.n	8004c72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff fed7 	bl	8004a20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff ff0c 	bl	8004a94 <LL_ADC_IsInternalRegulatorEnabled>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d115      	bne.n	8004cae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff fef0 	bl	8004a6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c8c:	4b86      	ldr	r3, [pc, #536]	@ (8004ea8 <HAL_ADC_Init+0x28c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	099b      	lsrs	r3, r3, #6
 8004c92:	4a86      	ldr	r2, [pc, #536]	@ (8004eac <HAL_ADC_Init+0x290>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	099b      	lsrs	r3, r3, #6
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004ca0:	e002      	b.n	8004ca8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f9      	bne.n	8004ca2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff feee 	bl	8004a94 <LL_ADC_IsInternalRegulatorEnabled>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10d      	bne.n	8004cda <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc2:	f043 0210 	orr.w	r2, r3, #16
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cce:	f043 0201 	orr.w	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff ff62 	bl	8004ba8 <LL_ADC_REG_IsConversionOngoing>
 8004ce4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f040 80cc 	bne.w	8004e8c <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f040 80c8 	bne.w	8004e8c <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d00:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004d04:	f043 0202 	orr.w	r2, r3, #2
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff fefb 	bl	8004b0c <LL_ADC_IsEnabled>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d115      	bne.n	8004d48 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d1c:	4864      	ldr	r0, [pc, #400]	@ (8004eb0 <HAL_ADC_Init+0x294>)
 8004d1e:	f7ff fef5 	bl	8004b0c <LL_ADC_IsEnabled>
 8004d22:	4604      	mov	r4, r0
 8004d24:	4863      	ldr	r0, [pc, #396]	@ (8004eb4 <HAL_ADC_Init+0x298>)
 8004d26:	f7ff fef1 	bl	8004b0c <LL_ADC_IsEnabled>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	431c      	orrs	r4, r3
 8004d2e:	4862      	ldr	r0, [pc, #392]	@ (8004eb8 <HAL_ADC_Init+0x29c>)
 8004d30:	f7ff feec 	bl	8004b0c <LL_ADC_IsEnabled>
 8004d34:	4603      	mov	r3, r0
 8004d36:	4323      	orrs	r3, r4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d105      	bne.n	8004d48 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	4619      	mov	r1, r3
 8004d42:	485e      	ldr	r0, [pc, #376]	@ (8004ebc <HAL_ADC_Init+0x2a0>)
 8004d44:	f7ff fd34 	bl	80047b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	7e5b      	ldrb	r3, [r3, #25]
 8004d4c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d52:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004d58:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004d5e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d66:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d106      	bne.n	8004d84 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	045b      	lsls	r3, r3, #17
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d009      	beq.n	8004da0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d90:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d98:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	4b46      	ldr	r3, [pc, #280]	@ (8004ec0 <HAL_ADC_Init+0x2a4>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	69b9      	ldr	r1, [r7, #24]
 8004db0:	430b      	orrs	r3, r1
 8004db2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff ff1c 	bl	8004bf6 <LL_ADC_INJ_IsConversionOngoing>
 8004dbe:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d140      	bne.n	8004e48 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d13d      	bne.n	8004e48 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	7e1b      	ldrb	r3, [r3, #24]
 8004dd4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004dd6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004dde:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004de0:	4313      	orrs	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dee:	f023 0306 	bic.w	r3, r3, #6
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6812      	ldr	r2, [r2, #0]
 8004df6:	69b9      	ldr	r1, [r7, #24]
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d118      	bne.n	8004e38 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004e10:	f023 0304 	bic.w	r3, r3, #4
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004e1c:	4311      	orrs	r1, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004e22:	4311      	orrs	r1, r2
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0201 	orr.w	r2, r2, #1
 8004e34:	611a      	str	r2, [r3, #16]
 8004e36:	e007      	b.n	8004e48 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691a      	ldr	r2, [r3, #16]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0201 	bic.w	r2, r2, #1
 8004e46:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d10c      	bne.n	8004e6a <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e56:	f023 010f 	bic.w	r1, r3, #15
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	1e5a      	subs	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e68:	e007      	b.n	8004e7a <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 020f 	bic.w	r2, r2, #15
 8004e78:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e7e:	f023 0303 	bic.w	r3, r3, #3
 8004e82:	f043 0201 	orr.w	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e8a:	e007      	b.n	8004e9c <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e90:	f043 0210 	orr.w	r2, r3, #16
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3724      	adds	r7, #36	@ 0x24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd90      	pop	{r4, r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	2000002c 	.word	0x2000002c
 8004eac:	053e2d63 	.word	0x053e2d63
 8004eb0:	50040000 	.word	0x50040000
 8004eb4:	50040100 	.word	0x50040100
 8004eb8:	50040200 	.word	0x50040200
 8004ebc:	50040300 	.word	0x50040300
 8004ec0:	fff0c007 	.word	0xfff0c007

08004ec4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ed0:	4853      	ldr	r0, [pc, #332]	@ (8005020 <HAL_ADC_Start_DMA+0x15c>)
 8004ed2:	f7ff fd97 	bl	8004a04 <LL_ADC_GetMultimode>
 8004ed6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff fe63 	bl	8004ba8 <LL_ADC_REG_IsConversionOngoing>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f040 8093 	bne.w	8005010 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_ADC_Start_DMA+0x34>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e08e      	b.n	8005016 <HAL_ADC_Start_DMA+0x152>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a47      	ldr	r2, [pc, #284]	@ (8005024 <HAL_ADC_Start_DMA+0x160>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d008      	beq.n	8004f1c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2b05      	cmp	r3, #5
 8004f14:	d002      	beq.n	8004f1c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	2b09      	cmp	r3, #9
 8004f1a:	d172      	bne.n	8005002 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 fdcb 	bl	8005ab8 <ADC_Enable>
 8004f22:	4603      	mov	r3, r0
 8004f24:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004f26:	7dfb      	ldrb	r3, [r7, #23]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d165      	bne.n	8004ff8 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f30:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004f34:	f023 0301 	bic.w	r3, r3, #1
 8004f38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a38      	ldr	r2, [pc, #224]	@ (8005028 <HAL_ADC_Start_DMA+0x164>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d002      	beq.n	8004f50 <HAL_ADC_Start_DMA+0x8c>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	e000      	b.n	8004f52 <HAL_ADC_Start_DMA+0x8e>
 8004f50:	4b36      	ldr	r3, [pc, #216]	@ (800502c <HAL_ADC_Start_DMA+0x168>)
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	6812      	ldr	r2, [r2, #0]
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d002      	beq.n	8004f60 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d105      	bne.n	8004f6c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f64:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d006      	beq.n	8004f86 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f7c:	f023 0206 	bic.w	r2, r3, #6
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f84:	e002      	b.n	8004f8c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f90:	4a27      	ldr	r2, [pc, #156]	@ (8005030 <HAL_ADC_Start_DMA+0x16c>)
 8004f92:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f98:	4a26      	ldr	r2, [pc, #152]	@ (8005034 <HAL_ADC_Start_DMA+0x170>)
 8004f9a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa0:	4a25      	ldr	r2, [pc, #148]	@ (8005038 <HAL_ADC_Start_DMA+0x174>)
 8004fa2:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	221c      	movs	r2, #28
 8004faa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0210 	orr.w	r2, r2, #16
 8004fc2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3340      	adds	r3, #64	@ 0x40
 8004fde:	4619      	mov	r1, r3
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f001 ffee 	bl	8006fc4 <HAL_DMA_Start_IT>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff fdb1 	bl	8004b58 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004ff6:	e00d      	b.n	8005014 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8005000:	e008      	b.n	8005014 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800500e:	e001      	b.n	8005014 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005010:	2302      	movs	r3, #2
 8005012:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005014:	7dfb      	ldrb	r3, [r7, #23]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	50040300 	.word	0x50040300
 8005024:	50040200 	.word	0x50040200
 8005028:	50040100 	.word	0x50040100
 800502c:	50040000 	.word	0x50040000
 8005030:	08005c83 	.word	0x08005c83
 8005034:	08005d5b 	.word	0x08005d5b
 8005038:	08005d77 	.word	0x08005d77

0800503c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <HAL_ADC_Stop_DMA+0x16>
 800504e:	2302      	movs	r3, #2
 8005050:	e051      	b.n	80050f6 <HAL_ADC_Stop_DMA+0xba>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800505a:	2103      	movs	r1, #3
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fc6f 	bl	8005940 <ADC_ConversionStop>
 8005062:	4603      	mov	r3, r0
 8005064:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d13f      	bne.n	80050ec <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0201 	bic.w	r2, r2, #1
 800507a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005080:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d10f      	bne.n	80050aa <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800508e:	4618      	mov	r0, r3
 8005090:	f001 fff8 	bl	8007084 <HAL_DMA_Abort>
 8005094:	4603      	mov	r3, r0
 8005096:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005098:	7bfb      	ldrb	r3, [r7, #15]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d005      	beq.n	80050aa <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0210 	bic.w	r2, r2, #16
 80050b8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d105      	bne.n	80050cc <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fd7f 	bl	8005bc4 <ADC_Disable>
 80050c6:	4603      	mov	r3, r0
 80050c8:	73fb      	strb	r3, [r7, #15]
 80050ca:	e002      	b.n	80050d2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fd79 	bl	8005bc4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d109      	bne.n	80050ec <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	f043 0201 	orr.w	r2, r3, #1
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
	...

08005128 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b0b6      	sub	sp, #216	@ 0xd8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005138:	2300      	movs	r3, #0
 800513a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <HAL_ADC_ConfigChannel+0x22>
 8005146:	2302      	movs	r3, #2
 8005148:	e3e3      	b.n	8005912 <HAL_ADC_ConfigChannel+0x7ea>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff fd26 	bl	8004ba8 <LL_ADC_REG_IsConversionOngoing>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	f040 83c4 	bne.w	80058ec <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b05      	cmp	r3, #5
 8005172:	d824      	bhi.n	80051be <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	3b02      	subs	r3, #2
 800517a:	2b03      	cmp	r3, #3
 800517c:	d81b      	bhi.n	80051b6 <HAL_ADC_ConfigChannel+0x8e>
 800517e:	a201      	add	r2, pc, #4	@ (adr r2, 8005184 <HAL_ADC_ConfigChannel+0x5c>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	08005195 	.word	0x08005195
 8005188:	0800519d 	.word	0x0800519d
 800518c:	080051a5 	.word	0x080051a5
 8005190:	080051ad 	.word	0x080051ad
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8005194:	230c      	movs	r3, #12
 8005196:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800519a:	e010      	b.n	80051be <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800519c:	2312      	movs	r3, #18
 800519e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80051a2:	e00c      	b.n	80051be <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80051a4:	2318      	movs	r3, #24
 80051a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80051aa:	e008      	b.n	80051be <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80051ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80051b4:	e003      	b.n	80051be <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80051b6:	2306      	movs	r3, #6
 80051b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80051bc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80051cc:	f7ff fb9f 	bl	800490e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff fce7 	bl	8004ba8 <LL_ADC_REG_IsConversionOngoing>
 80051da:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff fd07 	bl	8004bf6 <LL_ADC_INJ_IsConversionOngoing>
 80051e8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f040 81bf 	bne.w	8005574 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f040 81ba 	bne.w	8005574 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005208:	d10f      	bne.n	800522a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2200      	movs	r2, #0
 8005214:	4619      	mov	r1, r3
 8005216:	f7ff fba6 	bl	8004966 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff fb4d 	bl	80048c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8005228:	e00e      	b.n	8005248 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6818      	ldr	r0, [r3, #0]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	6819      	ldr	r1, [r3, #0]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	461a      	mov	r2, r3
 8005238:	f7ff fb95 	bl	8004966 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2100      	movs	r1, #0
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff fb3d 	bl	80048c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	695a      	ldr	r2, [r3, #20]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	08db      	lsrs	r3, r3, #3
 8005254:	f003 0303 	and.w	r3, r3, #3
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
 800525e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b04      	cmp	r3, #4
 8005268:	d00a      	beq.n	8005280 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6919      	ldr	r1, [r3, #16]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800527a:	f7ff facd 	bl	8004818 <LL_ADC_SetOffset>
 800527e:	e179      	b.n	8005574 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2100      	movs	r1, #0
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff faea 	bl	8004860 <LL_ADC_GetOffsetChannel>
 800528c:	4603      	mov	r3, r0
 800528e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10a      	bne.n	80052ac <HAL_ADC_ConfigChannel+0x184>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2100      	movs	r1, #0
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff fadf 	bl	8004860 <LL_ADC_GetOffsetChannel>
 80052a2:	4603      	mov	r3, r0
 80052a4:	0e9b      	lsrs	r3, r3, #26
 80052a6:	f003 021f 	and.w	r2, r3, #31
 80052aa:	e01e      	b.n	80052ea <HAL_ADC_ConfigChannel+0x1c2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2100      	movs	r1, #0
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff fad4 	bl	8004860 <LL_ADC_GetOffsetChannel>
 80052b8:	4603      	mov	r3, r0
 80052ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052c2:	fa93 f3a3 	rbit	r3, r3
 80052c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80052ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80052ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80052d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80052da:	2320      	movs	r3, #32
 80052dc:	e004      	b.n	80052e8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80052de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80052e2:	fab3 f383 	clz	r3, r3
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d105      	bne.n	8005302 <HAL_ADC_ConfigChannel+0x1da>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	0e9b      	lsrs	r3, r3, #26
 80052fc:	f003 031f 	and.w	r3, r3, #31
 8005300:	e018      	b.n	8005334 <HAL_ADC_ConfigChannel+0x20c>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800530e:	fa93 f3a3 	rbit	r3, r3
 8005312:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005316:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800531a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800531e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8005326:	2320      	movs	r3, #32
 8005328:	e004      	b.n	8005334 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800532a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800532e:	fab3 f383 	clz	r3, r3
 8005332:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005334:	429a      	cmp	r2, r3
 8005336:	d106      	bne.n	8005346 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2200      	movs	r2, #0
 800533e:	2100      	movs	r1, #0
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff faa3 	bl	800488c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2101      	movs	r1, #1
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff fa87 	bl	8004860 <LL_ADC_GetOffsetChannel>
 8005352:	4603      	mov	r3, r0
 8005354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <HAL_ADC_ConfigChannel+0x24a>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2101      	movs	r1, #1
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fa7c 	bl	8004860 <LL_ADC_GetOffsetChannel>
 8005368:	4603      	mov	r3, r0
 800536a:	0e9b      	lsrs	r3, r3, #26
 800536c:	f003 021f 	and.w	r2, r3, #31
 8005370:	e01e      	b.n	80053b0 <HAL_ADC_ConfigChannel+0x288>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2101      	movs	r1, #1
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff fa71 	bl	8004860 <LL_ADC_GetOffsetChannel>
 800537e:	4603      	mov	r3, r0
 8005380:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005384:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005388:	fa93 f3a3 	rbit	r3, r3
 800538c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005390:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005394:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8005398:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80053a0:	2320      	movs	r3, #32
 80053a2:	e004      	b.n	80053ae <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80053a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80053a8:	fab3 f383 	clz	r3, r3
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d105      	bne.n	80053c8 <HAL_ADC_ConfigChannel+0x2a0>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	0e9b      	lsrs	r3, r3, #26
 80053c2:	f003 031f 	and.w	r3, r3, #31
 80053c6:	e018      	b.n	80053fa <HAL_ADC_ConfigChannel+0x2d2>
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053d4:	fa93 f3a3 	rbit	r3, r3
 80053d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80053dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80053e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80053ec:	2320      	movs	r3, #32
 80053ee:	e004      	b.n	80053fa <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80053f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053f4:	fab3 f383 	clz	r3, r3
 80053f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d106      	bne.n	800540c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2200      	movs	r2, #0
 8005404:	2101      	movs	r1, #1
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff fa40 	bl	800488c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2102      	movs	r1, #2
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff fa24 	bl	8004860 <LL_ADC_GetOffsetChannel>
 8005418:	4603      	mov	r3, r0
 800541a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <HAL_ADC_ConfigChannel+0x310>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2102      	movs	r1, #2
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff fa19 	bl	8004860 <LL_ADC_GetOffsetChannel>
 800542e:	4603      	mov	r3, r0
 8005430:	0e9b      	lsrs	r3, r3, #26
 8005432:	f003 021f 	and.w	r2, r3, #31
 8005436:	e01e      	b.n	8005476 <HAL_ADC_ConfigChannel+0x34e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2102      	movs	r1, #2
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff fa0e 	bl	8004860 <LL_ADC_GetOffsetChannel>
 8005444:	4603      	mov	r3, r0
 8005446:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800544e:	fa93 f3a3 	rbit	r3, r3
 8005452:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005456:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800545a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800545e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8005466:	2320      	movs	r3, #32
 8005468:	e004      	b.n	8005474 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800546a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800546e:	fab3 f383 	clz	r3, r3
 8005472:	b2db      	uxtb	r3, r3
 8005474:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800547e:	2b00      	cmp	r3, #0
 8005480:	d105      	bne.n	800548e <HAL_ADC_ConfigChannel+0x366>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	0e9b      	lsrs	r3, r3, #26
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	e014      	b.n	80054b8 <HAL_ADC_ConfigChannel+0x390>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005494:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005496:	fa93 f3a3 	rbit	r3, r3
 800549a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800549c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800549e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80054a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80054aa:	2320      	movs	r3, #32
 80054ac:	e004      	b.n	80054b8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80054ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80054b2:	fab3 f383 	clz	r3, r3
 80054b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d106      	bne.n	80054ca <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2200      	movs	r2, #0
 80054c2:	2102      	movs	r1, #2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff f9e1 	bl	800488c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2103      	movs	r1, #3
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff f9c5 	bl	8004860 <LL_ADC_GetOffsetChannel>
 80054d6:	4603      	mov	r3, r0
 80054d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <HAL_ADC_ConfigChannel+0x3ce>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2103      	movs	r1, #3
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff f9ba 	bl	8004860 <LL_ADC_GetOffsetChannel>
 80054ec:	4603      	mov	r3, r0
 80054ee:	0e9b      	lsrs	r3, r3, #26
 80054f0:	f003 021f 	and.w	r2, r3, #31
 80054f4:	e017      	b.n	8005526 <HAL_ADC_ConfigChannel+0x3fe>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2103      	movs	r1, #3
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff f9af 	bl	8004860 <LL_ADC_GetOffsetChannel>
 8005502:	4603      	mov	r3, r0
 8005504:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005506:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005508:	fa93 f3a3 	rbit	r3, r3
 800550c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800550e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005510:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005512:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8005518:	2320      	movs	r3, #32
 800551a:	e003      	b.n	8005524 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800551c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800551e:	fab3 f383 	clz	r3, r3
 8005522:	b2db      	uxtb	r3, r3
 8005524:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800552e:	2b00      	cmp	r3, #0
 8005530:	d105      	bne.n	800553e <HAL_ADC_ConfigChannel+0x416>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	0e9b      	lsrs	r3, r3, #26
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	e011      	b.n	8005562 <HAL_ADC_ConfigChannel+0x43a>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005544:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005546:	fa93 f3a3 	rbit	r3, r3
 800554a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800554c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800554e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005550:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8005556:	2320      	movs	r3, #32
 8005558:	e003      	b.n	8005562 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800555a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800555c:	fab3 f383 	clz	r3, r3
 8005560:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005562:	429a      	cmp	r2, r3
 8005564:	d106      	bne.n	8005574 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2200      	movs	r2, #0
 800556c:	2103      	movs	r1, #3
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff f98c 	bl	800488c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff fac7 	bl	8004b0c <LL_ADC_IsEnabled>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	f040 813f 	bne.w	8005804 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6818      	ldr	r0, [r3, #0]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	6819      	ldr	r1, [r3, #0]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	461a      	mov	r2, r3
 8005594:	f7ff fa12 	bl	80049bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	4a8e      	ldr	r2, [pc, #568]	@ (80057d8 <HAL_ADC_ConfigChannel+0x6b0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	f040 8130 	bne.w	8005804 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10b      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x4a4>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	0e9b      	lsrs	r3, r3, #26
 80055ba:	3301      	adds	r3, #1
 80055bc:	f003 031f 	and.w	r3, r3, #31
 80055c0:	2b09      	cmp	r3, #9
 80055c2:	bf94      	ite	ls
 80055c4:	2301      	movls	r3, #1
 80055c6:	2300      	movhi	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	e019      	b.n	8005600 <HAL_ADC_ConfigChannel+0x4d8>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055d4:	fa93 f3a3 	rbit	r3, r3
 80055d8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80055da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80055de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80055e4:	2320      	movs	r3, #32
 80055e6:	e003      	b.n	80055f0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80055e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055ea:	fab3 f383 	clz	r3, r3
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	3301      	adds	r3, #1
 80055f2:	f003 031f 	and.w	r3, r3, #31
 80055f6:	2b09      	cmp	r3, #9
 80055f8:	bf94      	ite	ls
 80055fa:	2301      	movls	r3, #1
 80055fc:	2300      	movhi	r3, #0
 80055fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005600:	2b00      	cmp	r3, #0
 8005602:	d079      	beq.n	80056f8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800560c:	2b00      	cmp	r3, #0
 800560e:	d107      	bne.n	8005620 <HAL_ADC_ConfigChannel+0x4f8>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	0e9b      	lsrs	r3, r3, #26
 8005616:	3301      	adds	r3, #1
 8005618:	069b      	lsls	r3, r3, #26
 800561a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800561e:	e015      	b.n	800564c <HAL_ADC_ConfigChannel+0x524>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005626:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005628:	fa93 f3a3 	rbit	r3, r3
 800562c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800562e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005630:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005632:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8005638:	2320      	movs	r3, #32
 800563a:	e003      	b.n	8005644 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800563c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800563e:	fab3 f383 	clz	r3, r3
 8005642:	b2db      	uxtb	r3, r3
 8005644:	3301      	adds	r3, #1
 8005646:	069b      	lsls	r3, r3, #26
 8005648:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005654:	2b00      	cmp	r3, #0
 8005656:	d109      	bne.n	800566c <HAL_ADC_ConfigChannel+0x544>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	0e9b      	lsrs	r3, r3, #26
 800565e:	3301      	adds	r3, #1
 8005660:	f003 031f 	and.w	r3, r3, #31
 8005664:	2101      	movs	r1, #1
 8005666:	fa01 f303 	lsl.w	r3, r1, r3
 800566a:	e017      	b.n	800569c <HAL_ADC_ConfigChannel+0x574>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005674:	fa93 f3a3 	rbit	r3, r3
 8005678:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800567a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800567c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800567e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8005684:	2320      	movs	r3, #32
 8005686:	e003      	b.n	8005690 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8005688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800568a:	fab3 f383 	clz	r3, r3
 800568e:	b2db      	uxtb	r3, r3
 8005690:	3301      	adds	r3, #1
 8005692:	f003 031f 	and.w	r3, r3, #31
 8005696:	2101      	movs	r1, #1
 8005698:	fa01 f303 	lsl.w	r3, r1, r3
 800569c:	ea42 0103 	orr.w	r1, r2, r3
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10a      	bne.n	80056c2 <HAL_ADC_ConfigChannel+0x59a>
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	0e9b      	lsrs	r3, r3, #26
 80056b2:	3301      	adds	r3, #1
 80056b4:	f003 021f 	and.w	r2, r3, #31
 80056b8:	4613      	mov	r3, r2
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	4413      	add	r3, r2
 80056be:	051b      	lsls	r3, r3, #20
 80056c0:	e018      	b.n	80056f4 <HAL_ADC_ConfigChannel+0x5cc>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ca:	fa93 f3a3 	rbit	r3, r3
 80056ce:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80056d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80056d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80056da:	2320      	movs	r3, #32
 80056dc:	e003      	b.n	80056e6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80056de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e0:	fab3 f383 	clz	r3, r3
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	3301      	adds	r3, #1
 80056e8:	f003 021f 	and.w	r2, r3, #31
 80056ec:	4613      	mov	r3, r2
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	4413      	add	r3, r2
 80056f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056f4:	430b      	orrs	r3, r1
 80056f6:	e080      	b.n	80057fa <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005700:	2b00      	cmp	r3, #0
 8005702:	d107      	bne.n	8005714 <HAL_ADC_ConfigChannel+0x5ec>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	0e9b      	lsrs	r3, r3, #26
 800570a:	3301      	adds	r3, #1
 800570c:	069b      	lsls	r3, r3, #26
 800570e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005712:	e015      	b.n	8005740 <HAL_ADC_ConfigChannel+0x618>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800571a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571c:	fa93 f3a3 	rbit	r3, r3
 8005720:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005724:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800572c:	2320      	movs	r3, #32
 800572e:	e003      	b.n	8005738 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8005730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005732:	fab3 f383 	clz	r3, r3
 8005736:	b2db      	uxtb	r3, r3
 8005738:	3301      	adds	r3, #1
 800573a:	069b      	lsls	r3, r3, #26
 800573c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005748:	2b00      	cmp	r3, #0
 800574a:	d109      	bne.n	8005760 <HAL_ADC_ConfigChannel+0x638>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	0e9b      	lsrs	r3, r3, #26
 8005752:	3301      	adds	r3, #1
 8005754:	f003 031f 	and.w	r3, r3, #31
 8005758:	2101      	movs	r1, #1
 800575a:	fa01 f303 	lsl.w	r3, r1, r3
 800575e:	e017      	b.n	8005790 <HAL_ADC_ConfigChannel+0x668>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	fa93 f3a3 	rbit	r3, r3
 800576c:	61bb      	str	r3, [r7, #24]
  return result;
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8005778:	2320      	movs	r3, #32
 800577a:	e003      	b.n	8005784 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	fab3 f383 	clz	r3, r3
 8005782:	b2db      	uxtb	r3, r3
 8005784:	3301      	adds	r3, #1
 8005786:	f003 031f 	and.w	r3, r3, #31
 800578a:	2101      	movs	r1, #1
 800578c:	fa01 f303 	lsl.w	r3, r1, r3
 8005790:	ea42 0103 	orr.w	r1, r2, r3
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10d      	bne.n	80057bc <HAL_ADC_ConfigChannel+0x694>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	0e9b      	lsrs	r3, r3, #26
 80057a6:	3301      	adds	r3, #1
 80057a8:	f003 021f 	and.w	r2, r3, #31
 80057ac:	4613      	mov	r3, r2
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	4413      	add	r3, r2
 80057b2:	3b1e      	subs	r3, #30
 80057b4:	051b      	lsls	r3, r3, #20
 80057b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80057ba:	e01d      	b.n	80057f8 <HAL_ADC_ConfigChannel+0x6d0>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	fa93 f3a3 	rbit	r3, r3
 80057c8:	60fb      	str	r3, [r7, #12]
  return result;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d103      	bne.n	80057dc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80057d4:	2320      	movs	r3, #32
 80057d6:	e005      	b.n	80057e4 <HAL_ADC_ConfigChannel+0x6bc>
 80057d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	fab3 f383 	clz	r3, r3
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	3301      	adds	r3, #1
 80057e6:	f003 021f 	and.w	r2, r3, #31
 80057ea:	4613      	mov	r3, r2
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	4413      	add	r3, r2
 80057f0:	3b1e      	subs	r3, #30
 80057f2:	051b      	lsls	r3, r3, #20
 80057f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057f8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057fe:	4619      	mov	r1, r3
 8005800:	f7ff f8b1 	bl	8004966 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	4b44      	ldr	r3, [pc, #272]	@ (800591c <HAL_ADC_ConfigChannel+0x7f4>)
 800580a:	4013      	ands	r3, r2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d07a      	beq.n	8005906 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005810:	4843      	ldr	r0, [pc, #268]	@ (8005920 <HAL_ADC_ConfigChannel+0x7f8>)
 8005812:	f7fe fff3 	bl	80047fc <LL_ADC_GetCommonPathInternalCh>
 8005816:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a41      	ldr	r2, [pc, #260]	@ (8005924 <HAL_ADC_ConfigChannel+0x7fc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d12c      	bne.n	800587e <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005824:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005828:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d126      	bne.n	800587e <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a3c      	ldr	r2, [pc, #240]	@ (8005928 <HAL_ADC_ConfigChannel+0x800>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d004      	beq.n	8005844 <HAL_ADC_ConfigChannel+0x71c>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a3b      	ldr	r2, [pc, #236]	@ (800592c <HAL_ADC_ConfigChannel+0x804>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d15d      	bne.n	8005900 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005844:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005848:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800584c:	4619      	mov	r1, r3
 800584e:	4834      	ldr	r0, [pc, #208]	@ (8005920 <HAL_ADC_ConfigChannel+0x7f8>)
 8005850:	f7fe ffc1 	bl	80047d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005854:	4b36      	ldr	r3, [pc, #216]	@ (8005930 <HAL_ADC_ConfigChannel+0x808>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	099b      	lsrs	r3, r3, #6
 800585a:	4a36      	ldr	r2, [pc, #216]	@ (8005934 <HAL_ADC_ConfigChannel+0x80c>)
 800585c:	fba2 2303 	umull	r2, r3, r2, r3
 8005860:	099b      	lsrs	r3, r3, #6
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	4613      	mov	r3, r2
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800586e:	e002      	b.n	8005876 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	3b01      	subs	r3, #1
 8005874:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1f9      	bne.n	8005870 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800587c:	e040      	b.n	8005900 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a2d      	ldr	r2, [pc, #180]	@ (8005938 <HAL_ADC_ConfigChannel+0x810>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d118      	bne.n	80058ba <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005888:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800588c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d112      	bne.n	80058ba <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a23      	ldr	r2, [pc, #140]	@ (8005928 <HAL_ADC_ConfigChannel+0x800>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d004      	beq.n	80058a8 <HAL_ADC_ConfigChannel+0x780>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a22      	ldr	r2, [pc, #136]	@ (800592c <HAL_ADC_ConfigChannel+0x804>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d12d      	bne.n	8005904 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80058ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058b0:	4619      	mov	r1, r3
 80058b2:	481b      	ldr	r0, [pc, #108]	@ (8005920 <HAL_ADC_ConfigChannel+0x7f8>)
 80058b4:	f7fe ff8f 	bl	80047d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058b8:	e024      	b.n	8005904 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1f      	ldr	r2, [pc, #124]	@ (800593c <HAL_ADC_ConfigChannel+0x814>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d120      	bne.n	8005906 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80058c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80058c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d11a      	bne.n	8005906 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a14      	ldr	r2, [pc, #80]	@ (8005928 <HAL_ADC_ConfigChannel+0x800>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d115      	bne.n	8005906 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80058de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80058e2:	4619      	mov	r1, r3
 80058e4:	480e      	ldr	r0, [pc, #56]	@ (8005920 <HAL_ADC_ConfigChannel+0x7f8>)
 80058e6:	f7fe ff76 	bl	80047d6 <LL_ADC_SetCommonPathInternalCh>
 80058ea:	e00c      	b.n	8005906 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f0:	f043 0220 	orr.w	r2, r3, #32
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80058fe:	e002      	b.n	8005906 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005900:	bf00      	nop
 8005902:	e000      	b.n	8005906 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005904:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800590e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005912:	4618      	mov	r0, r3
 8005914:	37d8      	adds	r7, #216	@ 0xd8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	80080000 	.word	0x80080000
 8005920:	50040300 	.word	0x50040300
 8005924:	c7520000 	.word	0xc7520000
 8005928:	50040000 	.word	0x50040000
 800592c:	50040200 	.word	0x50040200
 8005930:	2000002c 	.word	0x2000002c
 8005934:	053e2d63 	.word	0x053e2d63
 8005938:	cb840000 	.word	0xcb840000
 800593c:	80000001 	.word	0x80000001

08005940 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff f926 	bl	8004ba8 <LL_ADC_REG_IsConversionOngoing>
 800595c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff f947 	bl	8004bf6 <LL_ADC_INJ_IsConversionOngoing>
 8005968:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d103      	bne.n	8005978 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 8098 	beq.w	8005aa8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d02a      	beq.n	80059dc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	7e5b      	ldrb	r3, [r3, #25]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d126      	bne.n	80059dc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	7e1b      	ldrb	r3, [r3, #24]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d122      	bne.n	80059dc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005996:	2301      	movs	r3, #1
 8005998:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800599a:	e014      	b.n	80059c6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	4a45      	ldr	r2, [pc, #276]	@ (8005ab4 <ADC_ConversionStop+0x174>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d90d      	bls.n	80059c0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a8:	f043 0210 	orr.w	r2, r3, #16
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b4:	f043 0201 	orr.w	r2, r3, #1
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e074      	b.n	8005aaa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	3301      	adds	r3, #1
 80059c4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d0:	2b40      	cmp	r3, #64	@ 0x40
 80059d2:	d1e3      	bne.n	800599c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2240      	movs	r2, #64	@ 0x40
 80059da:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d014      	beq.n	8005a0c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7ff f8de 	bl	8004ba8 <LL_ADC_REG_IsConversionOngoing>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00c      	beq.n	8005a0c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff f89b 	bl	8004b32 <LL_ADC_IsDisableOngoing>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d104      	bne.n	8005a0c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff f8ba 	bl	8004b80 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d014      	beq.n	8005a3c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff f8ed 	bl	8004bf6 <LL_ADC_INJ_IsConversionOngoing>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00c      	beq.n	8005a3c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7ff f883 	bl	8004b32 <LL_ADC_IsDisableOngoing>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d104      	bne.n	8005a3c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff f8c9 	bl	8004bce <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d005      	beq.n	8005a4e <ADC_ConversionStop+0x10e>
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d105      	bne.n	8005a54 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005a48:	230c      	movs	r3, #12
 8005a4a:	617b      	str	r3, [r7, #20]
        break;
 8005a4c:	e005      	b.n	8005a5a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005a4e:	2308      	movs	r3, #8
 8005a50:	617b      	str	r3, [r7, #20]
        break;
 8005a52:	e002      	b.n	8005a5a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005a54:	2304      	movs	r3, #4
 8005a56:	617b      	str	r3, [r7, #20]
        break;
 8005a58:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005a5a:	f7fe fe79 	bl	8004750 <HAL_GetTick>
 8005a5e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005a60:	e01b      	b.n	8005a9a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005a62:	f7fe fe75 	bl	8004750 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b05      	cmp	r3, #5
 8005a6e:	d914      	bls.n	8005a9a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00d      	beq.n	8005a9a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a82:	f043 0210 	orr.w	r2, r3, #16
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a8e:	f043 0201 	orr.w	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e007      	b.n	8005aaa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1dc      	bne.n	8005a62 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3720      	adds	r7, #32
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	a33fffff 	.word	0xa33fffff

08005ab8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7ff f81f 	bl	8004b0c <LL_ADC_IsEnabled>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d169      	bne.n	8005ba8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	4b36      	ldr	r3, [pc, #216]	@ (8005bb4 <ADC_Enable+0xfc>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00d      	beq.n	8005afe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae6:	f043 0210 	orr.w	r2, r3, #16
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005af2:	f043 0201 	orr.w	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e055      	b.n	8005baa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fe ffda 	bl	8004abc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005b08:	482b      	ldr	r0, [pc, #172]	@ (8005bb8 <ADC_Enable+0x100>)
 8005b0a:	f7fe fe77 	bl	80047fc <LL_ADC_GetCommonPathInternalCh>
 8005b0e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005b10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d013      	beq.n	8005b40 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b18:	4b28      	ldr	r3, [pc, #160]	@ (8005bbc <ADC_Enable+0x104>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	099b      	lsrs	r3, r3, #6
 8005b1e:	4a28      	ldr	r2, [pc, #160]	@ (8005bc0 <ADC_Enable+0x108>)
 8005b20:	fba2 2303 	umull	r2, r3, r2, r3
 8005b24:	099b      	lsrs	r3, r3, #6
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	4613      	mov	r3, r2
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	4413      	add	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005b32:	e002      	b.n	8005b3a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1f9      	bne.n	8005b34 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005b40:	f7fe fe06 	bl	8004750 <HAL_GetTick>
 8005b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b46:	e028      	b.n	8005b9a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fe ffdd 	bl	8004b0c <LL_ADC_IsEnabled>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d104      	bne.n	8005b62 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fe ffad 	bl	8004abc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b62:	f7fe fdf5 	bl	8004750 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d914      	bls.n	8005b9a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d00d      	beq.n	8005b9a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b82:	f043 0210 	orr.w	r2, r3, #16
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b8e:	f043 0201 	orr.w	r2, r3, #1
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e007      	b.n	8005baa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d1cf      	bne.n	8005b48 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	8000003f 	.word	0x8000003f
 8005bb8:	50040300 	.word	0x50040300
 8005bbc:	2000002c 	.word	0x2000002c
 8005bc0:	053e2d63 	.word	0x053e2d63

08005bc4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fe ffae 	bl	8004b32 <LL_ADC_IsDisableOngoing>
 8005bd6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fe ff95 	bl	8004b0c <LL_ADC_IsEnabled>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d047      	beq.n	8005c78 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d144      	bne.n	8005c78 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f003 030d 	and.w	r3, r3, #13
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d10c      	bne.n	8005c16 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fe ff6f 	bl	8004ae4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2203      	movs	r2, #3
 8005c0c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005c0e:	f7fe fd9f 	bl	8004750 <HAL_GetTick>
 8005c12:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c14:	e029      	b.n	8005c6a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c1a:	f043 0210 	orr.w	r2, r3, #16
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c26:	f043 0201 	orr.w	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e023      	b.n	8005c7a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005c32:	f7fe fd8d 	bl	8004750 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d914      	bls.n	8005c6a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00d      	beq.n	8005c6a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c52:	f043 0210 	orr.w	r2, r3, #16
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c5e:	f043 0201 	orr.w	r2, r3, #1
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e007      	b.n	8005c7a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1dc      	bne.n	8005c32 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c94:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d14b      	bne.n	8005d34 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d021      	beq.n	8005cfa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fe fe14 	bl	80048e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d032      	beq.n	8005d2c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d12b      	bne.n	8005d2c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ce4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d11f      	bne.n	8005d2c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf0:	f043 0201 	orr.w	r2, r3, #1
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	659a      	str	r2, [r3, #88]	@ 0x58
 8005cf8:	e018      	b.n	8005d2c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d111      	bne.n	8005d2c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d105      	bne.n	8005d2c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d24:	f043 0201 	orr.w	r2, r3, #1
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f7fc fa49 	bl	80021c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005d32:	e00e      	b.n	8005d52 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d38:	f003 0310 	and.w	r3, r3, #16
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f7ff f9e6 	bl	8005112 <HAL_ADC_ErrorCallback>
}
 8005d46:	e004      	b.n	8005d52 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	4798      	blx	r3
}
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f7ff f9c8 	bl	80050fe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d6e:	bf00      	nop
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d94:	f043 0204 	orr.w	r2, r3, #4
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f7ff f9b8 	bl	8005112 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005da2:	bf00      	nop
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <LL_ADC_IsEnabled>:
{
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <LL_ADC_IsEnabled+0x18>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <LL_ADC_IsEnabled+0x1a>
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <LL_ADC_REG_IsConversionOngoing>:
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d101      	bne.n	8005de8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005df8:	b590      	push	{r4, r7, lr}
 8005dfa:	b0a1      	sub	sp, #132	@ 0x84
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d101      	bne.n	8005e16 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005e12:	2302      	movs	r3, #2
 8005e14:	e093      	b.n	8005f3e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005e1e:	2300      	movs	r3, #0
 8005e20:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005e22:	2300      	movs	r3, #0
 8005e24:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a47      	ldr	r2, [pc, #284]	@ (8005f48 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d102      	bne.n	8005e36 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005e30:	4b46      	ldr	r3, [pc, #280]	@ (8005f4c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	e001      	b.n	8005e3a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005e36:	2300      	movs	r3, #0
 8005e38:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10b      	bne.n	8005e58 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e44:	f043 0220 	orr.w	r2, r3, #32
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e072      	b.n	8005f3e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7ff ffb8 	bl	8005dd0 <LL_ADC_REG_IsConversionOngoing>
 8005e60:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff ffb2 	bl	8005dd0 <LL_ADC_REG_IsConversionOngoing>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d154      	bne.n	8005f1c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005e72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d151      	bne.n	8005f1c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005e78:	4b35      	ldr	r3, [pc, #212]	@ (8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005e7a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d02c      	beq.n	8005ede <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005e84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	6859      	ldr	r1, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005e96:	035b      	lsls	r3, r3, #13
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e9e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ea0:	4829      	ldr	r0, [pc, #164]	@ (8005f48 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005ea2:	f7ff ff82 	bl	8005daa <LL_ADC_IsEnabled>
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	4828      	ldr	r0, [pc, #160]	@ (8005f4c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005eaa:	f7ff ff7e 	bl	8005daa <LL_ADC_IsEnabled>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	431c      	orrs	r4, r3
 8005eb2:	4828      	ldr	r0, [pc, #160]	@ (8005f54 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005eb4:	f7ff ff79 	bl	8005daa <LL_ADC_IsEnabled>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	4323      	orrs	r3, r4
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d137      	bne.n	8005f30 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005ec0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005ec8:	f023 030f 	bic.w	r3, r3, #15
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	6811      	ldr	r1, [r2, #0]
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	6892      	ldr	r2, [r2, #8]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005eda:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005edc:	e028      	b.n	8005f30 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005ede:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ee6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ee8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005eea:	4817      	ldr	r0, [pc, #92]	@ (8005f48 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005eec:	f7ff ff5d 	bl	8005daa <LL_ADC_IsEnabled>
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	4816      	ldr	r0, [pc, #88]	@ (8005f4c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005ef4:	f7ff ff59 	bl	8005daa <LL_ADC_IsEnabled>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	431c      	orrs	r4, r3
 8005efc:	4815      	ldr	r0, [pc, #84]	@ (8005f54 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005efe:	f7ff ff54 	bl	8005daa <LL_ADC_IsEnabled>
 8005f02:	4603      	mov	r3, r0
 8005f04:	4323      	orrs	r3, r4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d112      	bne.n	8005f30 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005f0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005f12:	f023 030f 	bic.w	r3, r3, #15
 8005f16:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005f18:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f1a:	e009      	b.n	8005f30 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f20:	f043 0220 	orr.w	r2, r3, #32
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005f2e:	e000      	b.n	8005f32 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f30:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8005f3a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3784      	adds	r7, #132	@ 0x84
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd90      	pop	{r4, r7, pc}
 8005f46:	bf00      	nop
 8005f48:	50040000 	.word	0x50040000
 8005f4c:	50040100 	.word	0x50040100
 8005f50:	50040300 	.word	0x50040300
 8005f54:	50040200 	.word	0x50040200

08005f58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e0ed      	b.n	8006146 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d102      	bne.n	8005f7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fc ff94 	bl	8002ea4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f8c:	f7fe fbe0 	bl	8004750 <HAL_GetTick>
 8005f90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005f92:	e012      	b.n	8005fba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005f94:	f7fe fbdc 	bl	8004750 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b0a      	cmp	r3, #10
 8005fa0:	d90b      	bls.n	8005fba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2205      	movs	r2, #5
 8005fb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e0c5      	b.n	8006146 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0e5      	beq.n	8005f94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0202 	bic.w	r2, r2, #2
 8005fd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fd8:	f7fe fbba 	bl	8004750 <HAL_GetTick>
 8005fdc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005fde:	e012      	b.n	8006006 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005fe0:	f7fe fbb6 	bl	8004750 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b0a      	cmp	r3, #10
 8005fec:	d90b      	bls.n	8006006 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2205      	movs	r2, #5
 8005ffe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e09f      	b.n	8006146 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e5      	bne.n	8005fe0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	7e1b      	ldrb	r3, [r3, #24]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d108      	bne.n	800602e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	e007      	b.n	800603e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800603c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	7e5b      	ldrb	r3, [r3, #25]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d108      	bne.n	8006058 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	e007      	b.n	8006068 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006066:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	7e9b      	ldrb	r3, [r3, #26]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d108      	bne.n	8006082 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0220 	orr.w	r2, r2, #32
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	e007      	b.n	8006092 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0220 	bic.w	r2, r2, #32
 8006090:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	7edb      	ldrb	r3, [r3, #27]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d108      	bne.n	80060ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0210 	bic.w	r2, r2, #16
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	e007      	b.n	80060bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0210 	orr.w	r2, r2, #16
 80060ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	7f1b      	ldrb	r3, [r3, #28]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d108      	bne.n	80060d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0208 	orr.w	r2, r2, #8
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e007      	b.n	80060e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0208 	bic.w	r2, r2, #8
 80060e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	7f5b      	ldrb	r3, [r3, #29]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d108      	bne.n	8006100 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 0204 	orr.w	r2, r2, #4
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	e007      	b.n	8006110 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0204 	bic.w	r2, r2, #4
 800610e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	431a      	orrs	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	ea42 0103 	orr.w	r1, r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	1e5a      	subs	r2, r3, #1
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006166:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006168:	7cfb      	ldrb	r3, [r7, #19]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d003      	beq.n	8006176 <HAL_CAN_ConfigFilter+0x26>
 800616e:	7cfb      	ldrb	r3, [r7, #19]
 8006170:	2b02      	cmp	r3, #2
 8006172:	f040 80be 	bne.w	80062f2 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8006176:	4b65      	ldr	r3, [pc, #404]	@ (800630c <HAL_CAN_ConfigFilter+0x1bc>)
 8006178:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006180:	f043 0201 	orr.w	r2, r3, #1
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006190:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	431a      	orrs	r2, r3
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	f003 031f 	and.w	r3, r3, #31
 80061b6:	2201      	movs	r2, #1
 80061b8:	fa02 f303 	lsl.w	r3, r2, r3
 80061bc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	43db      	mvns	r3, r3
 80061c8:	401a      	ands	r2, r3
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d123      	bne.n	8006220 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	43db      	mvns	r3, r3
 80061e2:	401a      	ands	r2, r3
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80061fa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	3248      	adds	r2, #72	@ 0x48
 8006200:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006214:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006216:	6979      	ldr	r1, [r7, #20]
 8006218:	3348      	adds	r3, #72	@ 0x48
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	440b      	add	r3, r1
 800621e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d122      	bne.n	800626e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	431a      	orrs	r2, r3
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006248:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	3248      	adds	r2, #72	@ 0x48
 800624e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006262:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006264:	6979      	ldr	r1, [r7, #20]
 8006266:	3348      	adds	r3, #72	@ 0x48
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	440b      	add	r3, r1
 800626c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d109      	bne.n	800628a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	43db      	mvns	r3, r3
 8006280:	401a      	ands	r2, r3
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8006288:	e007      	b.n	800629a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	431a      	orrs	r2, r3
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d109      	bne.n	80062b6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	43db      	mvns	r3, r3
 80062ac:	401a      	ands	r2, r3
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80062b4:	e007      	b.n	80062c6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	431a      	orrs	r2, r3
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d107      	bne.n	80062de <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	431a      	orrs	r2, r3
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80062e4:	f023 0201 	bic.w	r2, r3, #1
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	e006      	b.n	8006300 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
  }
}
 8006300:	4618      	mov	r0, r3
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	40006400 	.word	0x40006400

08006310 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b01      	cmp	r3, #1
 8006322:	d12e      	bne.n	8006382 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0201 	bic.w	r2, r2, #1
 800633a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800633c:	f7fe fa08 	bl	8004750 <HAL_GetTick>
 8006340:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006342:	e012      	b.n	800636a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006344:	f7fe fa04 	bl	8004750 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b0a      	cmp	r3, #10
 8006350:	d90b      	bls.n	800636a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006356:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2205      	movs	r2, #5
 8006362:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e012      	b.n	8006390 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e5      	bne.n	8006344 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	e006      	b.n	8006390 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006386:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
  }
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8006398:	b480      	push	{r7}
 800639a:	b089      	sub	sp, #36	@ 0x24
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063ac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80063b6:	7ffb      	ldrb	r3, [r7, #31]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d003      	beq.n	80063c4 <HAL_CAN_AddTxMessage+0x2c>
 80063bc:	7ffb      	ldrb	r3, [r7, #31]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	f040 80ad 	bne.w	800651e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d105      	bne.n	80063e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 8095 	beq.w	800650e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	0e1b      	lsrs	r3, r3, #24
 80063e8:	f003 0303 	and.w	r3, r3, #3
 80063ec:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80063ee:	2201      	movs	r2, #1
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	409a      	lsls	r2, r3
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10d      	bne.n	800641c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800640a:	68f9      	ldr	r1, [r7, #12]
 800640c:	6809      	ldr	r1, [r1, #0]
 800640e:	431a      	orrs	r2, r3
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	3318      	adds	r3, #24
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	440b      	add	r3, r1
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	e00f      	b.n	800643c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006426:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800642c:	68f9      	ldr	r1, [r7, #12]
 800642e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006430:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	3318      	adds	r3, #24
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	440b      	add	r3, r1
 800643a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6819      	ldr	r1, [r3, #0]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	691a      	ldr	r2, [r3, #16]
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	3318      	adds	r3, #24
 8006448:	011b      	lsls	r3, r3, #4
 800644a:	440b      	add	r3, r1
 800644c:	3304      	adds	r3, #4
 800644e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	7d1b      	ldrb	r3, [r3, #20]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d111      	bne.n	800647c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	3318      	adds	r3, #24
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	4413      	add	r3, r2
 8006464:	3304      	adds	r3, #4
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	6811      	ldr	r1, [r2, #0]
 800646c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	3318      	adds	r3, #24
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	440b      	add	r3, r1
 8006478:	3304      	adds	r3, #4
 800647a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3307      	adds	r3, #7
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	061a      	lsls	r2, r3, #24
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3306      	adds	r3, #6
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	041b      	lsls	r3, r3, #16
 800648c:	431a      	orrs	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3305      	adds	r3, #5
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	021b      	lsls	r3, r3, #8
 8006496:	4313      	orrs	r3, r2
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	3204      	adds	r2, #4
 800649c:	7812      	ldrb	r2, [r2, #0]
 800649e:	4610      	mov	r0, r2
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	6811      	ldr	r1, [r2, #0]
 80064a4:	ea43 0200 	orr.w	r2, r3, r0
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	011b      	lsls	r3, r3, #4
 80064ac:	440b      	add	r3, r1
 80064ae:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80064b2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	3303      	adds	r3, #3
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	061a      	lsls	r2, r3, #24
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3302      	adds	r3, #2
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	041b      	lsls	r3, r3, #16
 80064c4:	431a      	orrs	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3301      	adds	r3, #1
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	021b      	lsls	r3, r3, #8
 80064ce:	4313      	orrs	r3, r2
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	7812      	ldrb	r2, [r2, #0]
 80064d4:	4610      	mov	r0, r2
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	6811      	ldr	r1, [r2, #0]
 80064da:	ea43 0200 	orr.w	r2, r3, r0
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	011b      	lsls	r3, r3, #4
 80064e2:	440b      	add	r3, r1
 80064e4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80064e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	3318      	adds	r3, #24
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	4413      	add	r3, r2
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	6811      	ldr	r1, [r2, #0]
 80064fc:	f043 0201 	orr.w	r2, r3, #1
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	3318      	adds	r3, #24
 8006504:	011b      	lsls	r3, r3, #4
 8006506:	440b      	add	r3, r1
 8006508:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	e00e      	b.n	800652c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006512:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e006      	b.n	800652c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006522:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
  }
}
 800652c:	4618      	mov	r0, r3
 800652e:	3724      	adds	r7, #36	@ 0x24
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800654a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800654c:	7afb      	ldrb	r3, [r7, #11]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d002      	beq.n	8006558 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8006552:	7afb      	ldrb	r3, [r7, #11]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d11d      	bne.n	8006594 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3301      	adds	r3, #1
 800656a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3301      	adds	r3, #1
 800657e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3301      	adds	r3, #1
 8006592:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8006594:	68fb      	ldr	r3, [r7, #12]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80065a2:	b480      	push	{r7}
 80065a4:	b087      	sub	sp, #28
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	607a      	str	r2, [r7, #4]
 80065ae:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065b6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80065b8:	7dfb      	ldrb	r3, [r7, #23]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d003      	beq.n	80065c6 <HAL_CAN_GetRxMessage+0x24>
 80065be:	7dfb      	ldrb	r3, [r7, #23]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	f040 8103 	bne.w	80067cc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10e      	bne.n	80065ea <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d116      	bne.n	8006608 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e0f7      	b.n	80067da <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	f003 0303 	and.w	r3, r3, #3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d107      	bne.n	8006608 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e0e8      	b.n	80067da <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	331b      	adds	r3, #27
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	4413      	add	r3, r2
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0204 	and.w	r2, r3, #4
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10c      	bne.n	8006640 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	331b      	adds	r3, #27
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	4413      	add	r3, r2
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	0d5b      	lsrs	r3, r3, #21
 8006636:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	e00b      	b.n	8006658 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	331b      	adds	r3, #27
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	4413      	add	r3, r2
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	08db      	lsrs	r3, r3, #3
 8006650:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	331b      	adds	r3, #27
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	4413      	add	r3, r2
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0202 	and.w	r2, r3, #2
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	331b      	adds	r3, #27
 8006676:	011b      	lsls	r3, r3, #4
 8006678:	4413      	add	r3, r2
 800667a:	3304      	adds	r3, #4
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0308 	and.w	r3, r3, #8
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2208      	movs	r2, #8
 800668a:	611a      	str	r2, [r3, #16]
 800668c:	e00b      	b.n	80066a6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	331b      	adds	r3, #27
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	4413      	add	r3, r2
 800669a:	3304      	adds	r3, #4
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 020f 	and.w	r2, r3, #15
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	331b      	adds	r3, #27
 80066ae:	011b      	lsls	r3, r3, #4
 80066b0:	4413      	add	r3, r2
 80066b2:	3304      	adds	r3, #4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	0a1b      	lsrs	r3, r3, #8
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	331b      	adds	r3, #27
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	4413      	add	r3, r2
 80066ca:	3304      	adds	r3, #4
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	0c1b      	lsrs	r3, r3, #16
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	4413      	add	r3, r2
 80066e0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	0a1a      	lsrs	r2, r3, #8
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	3301      	adds	r3, #1
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	4413      	add	r3, r2
 8006710:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	0c1a      	lsrs	r2, r3, #16
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	3302      	adds	r3, #2
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	4413      	add	r3, r2
 800672a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	0e1a      	lsrs	r2, r3, #24
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	3303      	adds	r3, #3
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	4413      	add	r3, r2
 8006744:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	3304      	adds	r3, #4
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	011b      	lsls	r3, r3, #4
 800675a:	4413      	add	r3, r2
 800675c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	0a1a      	lsrs	r2, r3, #8
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	3305      	adds	r3, #5
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	4413      	add	r3, r2
 8006776:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	0c1a      	lsrs	r2, r3, #16
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	3306      	adds	r3, #6
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	011b      	lsls	r3, r3, #4
 800678e:	4413      	add	r3, r2
 8006790:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	0e1a      	lsrs	r2, r3, #24
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	3307      	adds	r3, #7
 800679c:	b2d2      	uxtb	r2, r2
 800679e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d108      	bne.n	80067b8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f042 0220 	orr.w	r2, r2, #32
 80067b4:	60da      	str	r2, [r3, #12]
 80067b6:	e007      	b.n	80067c8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	691a      	ldr	r2, [r3, #16]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0220 	orr.w	r2, r2, #32
 80067c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	e006      	b.n	80067da <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
  }
}
 80067da:	4618      	mov	r0, r3
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b085      	sub	sp, #20
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067f6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d002      	beq.n	8006804 <HAL_CAN_ActivateNotification+0x1e>
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	2b02      	cmp	r3, #2
 8006802:	d109      	bne.n	8006818 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6959      	ldr	r1, [r3, #20]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	430a      	orrs	r2, r1
 8006812:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	e006      	b.n	8006826 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
  }
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b08a      	sub	sp, #40	@ 0x28
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800683a:	2300      	movs	r3, #0
 800683c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d07c      	beq.n	8006972 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d023      	beq.n	80068ca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2201      	movs	r2, #1
 8006888:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f983 	bl	8006ba0 <HAL_CAN_TxMailbox0CompleteCallback>
 800689a:	e016      	b.n	80068ca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	f003 0304 	and.w	r3, r3, #4
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d004      	beq.n	80068b0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80068ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ae:	e00c      	b.n	80068ca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	f003 0308 	and.w	r3, r3, #8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d004      	beq.n	80068c4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80068ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80068c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068c2:	e002      	b.n	80068ca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f989 	bl	8006bdc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d024      	beq.n	800691e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f963 	bl	8006bb4 <HAL_CAN_TxMailbox1CompleteCallback>
 80068ee:	e016      	b.n	800691e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d004      	beq.n	8006904 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80068fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006900:	627b      	str	r3, [r7, #36]	@ 0x24
 8006902:	e00c      	b.n	800691e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800690a:	2b00      	cmp	r3, #0
 800690c:	d004      	beq.n	8006918 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800690e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006914:	627b      	str	r3, [r7, #36]	@ 0x24
 8006916:	e002      	b.n	800691e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f969 	bl	8006bf0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d024      	beq.n	8006972 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006930:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 f943 	bl	8006bc8 <HAL_CAN_TxMailbox2CompleteCallback>
 8006942:	e016      	b.n	8006972 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d004      	beq.n	8006958 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800694e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006954:	627b      	str	r3, [r7, #36]	@ 0x24
 8006956:	e00c      	b.n	8006972 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d004      	beq.n	800696c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006968:	627b      	str	r3, [r7, #36]	@ 0x24
 800696a:	e002      	b.n	8006972 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f949 	bl	8006c04 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00c      	beq.n	8006996 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f003 0310 	and.w	r3, r3, #16
 8006982:	2b00      	cmp	r3, #0
 8006984:	d007      	beq.n	8006996 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006988:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800698c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2210      	movs	r2, #16
 8006994:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	f003 0304 	and.w	r3, r3, #4
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00b      	beq.n	80069b8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d006      	beq.n	80069b8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2208      	movs	r2, #8
 80069b0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f930 	bl	8006c18 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d009      	beq.n	80069d6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f003 0303 	and.w	r3, r3, #3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7fb fc17 	bl	8002204 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00c      	beq.n	80069fa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f003 0310 	and.w	r3, r3, #16
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d007      	beq.n	80069fa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80069f0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2210      	movs	r2, #16
 80069f8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00b      	beq.n	8006a1c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f003 0308 	and.w	r3, r3, #8
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d006      	beq.n	8006a1c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2208      	movs	r2, #8
 8006a14:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f912 	bl	8006c40 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	f003 0310 	and.w	r3, r3, #16
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d009      	beq.n	8006a3a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	f003 0303 	and.w	r3, r3, #3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f8f9 	bl	8006c2c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00b      	beq.n	8006a5c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f003 0310 	and.w	r3, r3, #16
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d006      	beq.n	8006a5c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2210      	movs	r2, #16
 8006a54:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f8fc 	bl	8006c54 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00b      	beq.n	8006a7e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	f003 0308 	and.w	r3, r3, #8
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d006      	beq.n	8006a7e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2208      	movs	r2, #8
 8006a76:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f8f5 	bl	8006c68 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d07b      	beq.n	8006b80 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	f003 0304 	and.w	r3, r3, #4
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d072      	beq.n	8006b78 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d008      	beq.n	8006aae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa8:	f043 0301 	orr.w	r3, r3, #1
 8006aac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d008      	beq.n	8006aca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	f043 0302 	orr.w	r3, r3, #2
 8006ac8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d008      	beq.n	8006ae6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	f043 0304 	orr.w	r3, r3, #4
 8006ae4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d043      	beq.n	8006b78 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d03e      	beq.n	8006b78 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b00:	2b60      	cmp	r3, #96	@ 0x60
 8006b02:	d02b      	beq.n	8006b5c <HAL_CAN_IRQHandler+0x32a>
 8006b04:	2b60      	cmp	r3, #96	@ 0x60
 8006b06:	d82e      	bhi.n	8006b66 <HAL_CAN_IRQHandler+0x334>
 8006b08:	2b50      	cmp	r3, #80	@ 0x50
 8006b0a:	d022      	beq.n	8006b52 <HAL_CAN_IRQHandler+0x320>
 8006b0c:	2b50      	cmp	r3, #80	@ 0x50
 8006b0e:	d82a      	bhi.n	8006b66 <HAL_CAN_IRQHandler+0x334>
 8006b10:	2b40      	cmp	r3, #64	@ 0x40
 8006b12:	d019      	beq.n	8006b48 <HAL_CAN_IRQHandler+0x316>
 8006b14:	2b40      	cmp	r3, #64	@ 0x40
 8006b16:	d826      	bhi.n	8006b66 <HAL_CAN_IRQHandler+0x334>
 8006b18:	2b30      	cmp	r3, #48	@ 0x30
 8006b1a:	d010      	beq.n	8006b3e <HAL_CAN_IRQHandler+0x30c>
 8006b1c:	2b30      	cmp	r3, #48	@ 0x30
 8006b1e:	d822      	bhi.n	8006b66 <HAL_CAN_IRQHandler+0x334>
 8006b20:	2b10      	cmp	r3, #16
 8006b22:	d002      	beq.n	8006b2a <HAL_CAN_IRQHandler+0x2f8>
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d005      	beq.n	8006b34 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006b28:	e01d      	b.n	8006b66 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2c:	f043 0308 	orr.w	r3, r3, #8
 8006b30:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b32:	e019      	b.n	8006b68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b36:	f043 0310 	orr.w	r3, r3, #16
 8006b3a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b3c:	e014      	b.n	8006b68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b40:	f043 0320 	orr.w	r3, r3, #32
 8006b44:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b46:	e00f      	b.n	8006b68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b4e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b50:	e00a      	b.n	8006b68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b5a:	e005      	b.n	8006b68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b62:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b64:	e000      	b.n	8006b68 <HAL_CAN_IRQHandler+0x336>
            break;
 8006b66:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006b76:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2204      	movs	r2, #4
 8006b7e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d008      	beq.n	8006b98 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f872 	bl	8006c7c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006b98:	bf00      	nop
 8006b9a:	3728      	adds	r7, #40	@ 0x28
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f003 0307 	and.w	r3, r3, #7
 8006c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006cac:	4013      	ands	r3, r2
 8006cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006cb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006cc2:	4a04      	ldr	r2, [pc, #16]	@ (8006cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	60d3      	str	r3, [r2, #12]
}
 8006cc8:	bf00      	nop
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	e000ed00 	.word	0xe000ed00

08006cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cdc:	4b04      	ldr	r3, [pc, #16]	@ (8006cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	0a1b      	lsrs	r3, r3, #8
 8006ce2:	f003 0307 	and.w	r3, r3, #7
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	e000ed00 	.word	0xe000ed00

08006cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	db0b      	blt.n	8006d1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	f003 021f 	and.w	r2, r3, #31
 8006d0c:	4907      	ldr	r1, [pc, #28]	@ (8006d2c <__NVIC_EnableIRQ+0x38>)
 8006d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	2001      	movs	r0, #1
 8006d16:	fa00 f202 	lsl.w	r2, r0, r2
 8006d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006d1e:	bf00      	nop
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	e000e100 	.word	0xe000e100

08006d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	4603      	mov	r3, r0
 8006d38:	6039      	str	r1, [r7, #0]
 8006d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	db0a      	blt.n	8006d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	490c      	ldr	r1, [pc, #48]	@ (8006d7c <__NVIC_SetPriority+0x4c>)
 8006d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d4e:	0112      	lsls	r2, r2, #4
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	440b      	add	r3, r1
 8006d54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d58:	e00a      	b.n	8006d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	4908      	ldr	r1, [pc, #32]	@ (8006d80 <__NVIC_SetPriority+0x50>)
 8006d60:	79fb      	ldrb	r3, [r7, #7]
 8006d62:	f003 030f 	and.w	r3, r3, #15
 8006d66:	3b04      	subs	r3, #4
 8006d68:	0112      	lsls	r2, r2, #4
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	440b      	add	r3, r1
 8006d6e:	761a      	strb	r2, [r3, #24]
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	e000e100 	.word	0xe000e100
 8006d80:	e000ed00 	.word	0xe000ed00

08006d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b089      	sub	sp, #36	@ 0x24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	f1c3 0307 	rsb	r3, r3, #7
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	bf28      	it	cs
 8006da2:	2304      	movcs	r3, #4
 8006da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	3304      	adds	r3, #4
 8006daa:	2b06      	cmp	r3, #6
 8006dac:	d902      	bls.n	8006db4 <NVIC_EncodePriority+0x30>
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	3b03      	subs	r3, #3
 8006db2:	e000      	b.n	8006db6 <NVIC_EncodePriority+0x32>
 8006db4:	2300      	movs	r3, #0
 8006db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006db8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc2:	43da      	mvns	r2, r3
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	401a      	ands	r2, r3
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd6:	43d9      	mvns	r1, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ddc:	4313      	orrs	r3, r2
         );
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3724      	adds	r7, #36	@ 0x24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b082      	sub	sp, #8
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7ff ff4c 	bl	8006c90 <__NVIC_SetPriorityGrouping>
}
 8006df8:	bf00      	nop
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006e12:	f7ff ff61 	bl	8006cd8 <__NVIC_GetPriorityGrouping>
 8006e16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	6978      	ldr	r0, [r7, #20]
 8006e1e:	f7ff ffb1 	bl	8006d84 <NVIC_EncodePriority>
 8006e22:	4602      	mov	r2, r0
 8006e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e28:	4611      	mov	r1, r2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff ff80 	bl	8006d30 <__NVIC_SetPriority>
}
 8006e30:	bf00      	nop
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	4603      	mov	r3, r0
 8006e40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7ff ff54 	bl	8006cf4 <__NVIC_EnableIRQ>
}
 8006e4c:	bf00      	nop
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e098      	b.n	8006f98 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	4b4d      	ldr	r3, [pc, #308]	@ (8006fa4 <HAL_DMA_Init+0x150>)
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d80f      	bhi.n	8006e92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	4b4b      	ldr	r3, [pc, #300]	@ (8006fa8 <HAL_DMA_Init+0x154>)
 8006e7a:	4413      	add	r3, r2
 8006e7c:	4a4b      	ldr	r2, [pc, #300]	@ (8006fac <HAL_DMA_Init+0x158>)
 8006e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e82:	091b      	lsrs	r3, r3, #4
 8006e84:	009a      	lsls	r2, r3, #2
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a48      	ldr	r2, [pc, #288]	@ (8006fb0 <HAL_DMA_Init+0x15c>)
 8006e8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006e90:	e00e      	b.n	8006eb0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	4b46      	ldr	r3, [pc, #280]	@ (8006fb4 <HAL_DMA_Init+0x160>)
 8006e9a:	4413      	add	r3, r2
 8006e9c:	4a43      	ldr	r2, [pc, #268]	@ (8006fac <HAL_DMA_Init+0x158>)
 8006e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea2:	091b      	lsrs	r3, r3, #4
 8006ea4:	009a      	lsls	r2, r3, #2
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a42      	ldr	r2, [pc, #264]	@ (8006fb8 <HAL_DMA_Init+0x164>)
 8006eae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006eec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f0a:	d039      	beq.n	8006f80 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f10:	4a27      	ldr	r2, [pc, #156]	@ (8006fb0 <HAL_DMA_Init+0x15c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d11a      	bne.n	8006f4c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006f16:	4b29      	ldr	r3, [pc, #164]	@ (8006fbc <HAL_DMA_Init+0x168>)
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f1e:	f003 031c 	and.w	r3, r3, #28
 8006f22:	210f      	movs	r1, #15
 8006f24:	fa01 f303 	lsl.w	r3, r1, r3
 8006f28:	43db      	mvns	r3, r3
 8006f2a:	4924      	ldr	r1, [pc, #144]	@ (8006fbc <HAL_DMA_Init+0x168>)
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006f30:	4b22      	ldr	r3, [pc, #136]	@ (8006fbc <HAL_DMA_Init+0x168>)
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6859      	ldr	r1, [r3, #4]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f3c:	f003 031c 	and.w	r3, r3, #28
 8006f40:	fa01 f303 	lsl.w	r3, r1, r3
 8006f44:	491d      	ldr	r1, [pc, #116]	@ (8006fbc <HAL_DMA_Init+0x168>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	600b      	str	r3, [r1, #0]
 8006f4a:	e019      	b.n	8006f80 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8006fc0 <HAL_DMA_Init+0x16c>)
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f54:	f003 031c 	and.w	r3, r3, #28
 8006f58:	210f      	movs	r1, #15
 8006f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f5e:	43db      	mvns	r3, r3
 8006f60:	4917      	ldr	r1, [pc, #92]	@ (8006fc0 <HAL_DMA_Init+0x16c>)
 8006f62:	4013      	ands	r3, r2
 8006f64:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006f66:	4b16      	ldr	r3, [pc, #88]	@ (8006fc0 <HAL_DMA_Init+0x16c>)
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6859      	ldr	r1, [r3, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f72:	f003 031c 	and.w	r3, r3, #28
 8006f76:	fa01 f303 	lsl.w	r3, r1, r3
 8006f7a:	4911      	ldr	r1, [pc, #68]	@ (8006fc0 <HAL_DMA_Init+0x16c>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	40020407 	.word	0x40020407
 8006fa8:	bffdfff8 	.word	0xbffdfff8
 8006fac:	cccccccd 	.word	0xcccccccd
 8006fb0:	40020000 	.word	0x40020000
 8006fb4:	bffdfbf8 	.word	0xbffdfbf8
 8006fb8:	40020400 	.word	0x40020400
 8006fbc:	400200a8 	.word	0x400200a8
 8006fc0:	400204a8 	.word	0x400204a8

08006fc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
 8006fd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_DMA_Start_IT+0x20>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e04b      	b.n	800707c <HAL_DMA_Start_IT+0xb8>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d13a      	bne.n	800706e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 0201 	bic.w	r2, r2, #1
 8007014:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	68b9      	ldr	r1, [r7, #8]
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 f95f 	bl	80072e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007026:	2b00      	cmp	r3, #0
 8007028:	d008      	beq.n	800703c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 020e 	orr.w	r2, r2, #14
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	e00f      	b.n	800705c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0204 	bic.w	r2, r2, #4
 800704a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 020a 	orr.w	r2, r2, #10
 800705a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f042 0201 	orr.w	r2, r2, #1
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	e005      	b.n	800707a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007076:	2302      	movs	r3, #2
 8007078:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800707a:	7dfb      	ldrb	r3, [r7, #23]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d008      	beq.n	80070ae <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2204      	movs	r2, #4
 80070a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e022      	b.n	80070f4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 020e 	bic.w	r2, r2, #14
 80070bc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f022 0201 	bic.w	r2, r2, #1
 80070cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d2:	f003 021c 	and.w	r2, r3, #28
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070da:	2101      	movs	r1, #1
 80070dc:	fa01 f202 	lsl.w	r2, r1, r2
 80070e0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b02      	cmp	r3, #2
 8007116:	d005      	beq.n	8007124 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2204      	movs	r2, #4
 800711c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	73fb      	strb	r3, [r7, #15]
 8007122:	e029      	b.n	8007178 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 020e 	bic.w	r2, r2, #14
 8007132:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0201 	bic.w	r2, r2, #1
 8007142:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007148:	f003 021c 	and.w	r2, r3, #28
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007150:	2101      	movs	r1, #1
 8007152:	fa01 f202 	lsl.w	r2, r1, r2
 8007156:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	4798      	blx	r3
    }
  }
  return status;
 8007178:	7bfb      	ldrb	r3, [r7, #15]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800719e:	f003 031c 	and.w	r3, r3, #28
 80071a2:	2204      	movs	r2, #4
 80071a4:	409a      	lsls	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	4013      	ands	r3, r2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d026      	beq.n	80071fc <HAL_DMA_IRQHandler+0x7a>
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	f003 0304 	and.w	r3, r3, #4
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d021      	beq.n	80071fc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0320 	and.w	r3, r3, #32
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d107      	bne.n	80071d6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0204 	bic.w	r2, r2, #4
 80071d4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071da:	f003 021c 	and.w	r2, r3, #28
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e2:	2104      	movs	r1, #4
 80071e4:	fa01 f202 	lsl.w	r2, r1, r2
 80071e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d071      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80071fa:	e06c      	b.n	80072d6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007200:	f003 031c 	and.w	r3, r3, #28
 8007204:	2202      	movs	r2, #2
 8007206:	409a      	lsls	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4013      	ands	r3, r2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d02e      	beq.n	800726e <HAL_DMA_IRQHandler+0xec>
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	d029      	beq.n	800726e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10b      	bne.n	8007240 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f022 020a 	bic.w	r2, r2, #10
 8007236:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007244:	f003 021c 	and.w	r2, r3, #28
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724c:	2102      	movs	r1, #2
 800724e:	fa01 f202 	lsl.w	r2, r1, r2
 8007252:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d038      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800726c:	e033      	b.n	80072d6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007272:	f003 031c 	and.w	r3, r3, #28
 8007276:	2208      	movs	r2, #8
 8007278:	409a      	lsls	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4013      	ands	r3, r2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d02a      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x156>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f003 0308 	and.w	r3, r3, #8
 8007288:	2b00      	cmp	r3, #0
 800728a:	d025      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 020e 	bic.w	r2, r2, #14
 800729a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a0:	f003 021c 	and.w	r2, r3, #28
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a8:	2101      	movs	r1, #1
 80072aa:	fa01 f202 	lsl.w	r2, r1, r2
 80072ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d004      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80072d6:	bf00      	nop
 80072d8:	bf00      	nop
}
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072f2:	f003 021c 	and.w	r2, r3, #28
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fa:	2101      	movs	r1, #1
 80072fc:	fa01 f202 	lsl.w	r2, r1, r2
 8007300:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	2b10      	cmp	r3, #16
 8007310:	d108      	bne.n	8007324 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007322:	e007      	b.n	8007334 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	60da      	str	r2, [r3, #12]
}
 8007334:	bf00      	nop
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800734e:	e166      	b.n	800761e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	2101      	movs	r1, #1
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	fa01 f303 	lsl.w	r3, r1, r3
 800735c:	4013      	ands	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 8158 	beq.w	8007618 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f003 0303 	and.w	r3, r3, #3
 8007370:	2b01      	cmp	r3, #1
 8007372:	d005      	beq.n	8007380 <HAL_GPIO_Init+0x40>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f003 0303 	and.w	r3, r3, #3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d130      	bne.n	80073e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	2203      	movs	r2, #3
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	43db      	mvns	r3, r3
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	4013      	ands	r3, r2
 8007396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	fa02 f303 	lsl.w	r3, r2, r3
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80073b6:	2201      	movs	r2, #1
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	fa02 f303 	lsl.w	r3, r2, r3
 80073be:	43db      	mvns	r3, r3
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	4013      	ands	r3, r2
 80073c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	091b      	lsrs	r3, r3, #4
 80073cc:	f003 0201 	and.w	r2, r3, #1
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	fa02 f303 	lsl.w	r3, r2, r3
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	4313      	orrs	r3, r2
 80073da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d017      	beq.n	800741e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	2203      	movs	r2, #3
 80073fa:	fa02 f303 	lsl.w	r3, r2, r3
 80073fe:	43db      	mvns	r3, r3
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	4013      	ands	r3, r2
 8007404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	005b      	lsls	r3, r3, #1
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4313      	orrs	r3, r2
 8007416:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f003 0303 	and.w	r3, r3, #3
 8007426:	2b02      	cmp	r3, #2
 8007428:	d123      	bne.n	8007472 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	08da      	lsrs	r2, r3, #3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3208      	adds	r2, #8
 8007432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007436:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f003 0307 	and.w	r3, r3, #7
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	220f      	movs	r2, #15
 8007442:	fa02 f303 	lsl.w	r3, r2, r3
 8007446:	43db      	mvns	r3, r3
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	4013      	ands	r3, r2
 800744c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	691a      	ldr	r2, [r3, #16]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	fa02 f303 	lsl.w	r3, r2, r3
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	4313      	orrs	r3, r2
 8007462:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	08da      	lsrs	r2, r3, #3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3208      	adds	r2, #8
 800746c:	6939      	ldr	r1, [r7, #16]
 800746e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	2203      	movs	r2, #3
 800747e:	fa02 f303 	lsl.w	r3, r2, r3
 8007482:	43db      	mvns	r3, r3
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4013      	ands	r3, r2
 8007488:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f003 0203 	and.w	r2, r3, #3
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	fa02 f303 	lsl.w	r3, r2, r3
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	4313      	orrs	r3, r2
 800749e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f000 80b2 	beq.w	8007618 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074b4:	4b61      	ldr	r3, [pc, #388]	@ (800763c <HAL_GPIO_Init+0x2fc>)
 80074b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074b8:	4a60      	ldr	r2, [pc, #384]	@ (800763c <HAL_GPIO_Init+0x2fc>)
 80074ba:	f043 0301 	orr.w	r3, r3, #1
 80074be:	6613      	str	r3, [r2, #96]	@ 0x60
 80074c0:	4b5e      	ldr	r3, [pc, #376]	@ (800763c <HAL_GPIO_Init+0x2fc>)
 80074c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	60bb      	str	r3, [r7, #8]
 80074ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80074cc:	4a5c      	ldr	r2, [pc, #368]	@ (8007640 <HAL_GPIO_Init+0x300>)
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	089b      	lsrs	r3, r3, #2
 80074d2:	3302      	adds	r3, #2
 80074d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f003 0303 	and.w	r3, r3, #3
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	220f      	movs	r2, #15
 80074e4:	fa02 f303 	lsl.w	r3, r2, r3
 80074e8:	43db      	mvns	r3, r3
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	4013      	ands	r3, r2
 80074ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80074f6:	d02b      	beq.n	8007550 <HAL_GPIO_Init+0x210>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a52      	ldr	r2, [pc, #328]	@ (8007644 <HAL_GPIO_Init+0x304>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d025      	beq.n	800754c <HAL_GPIO_Init+0x20c>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a51      	ldr	r2, [pc, #324]	@ (8007648 <HAL_GPIO_Init+0x308>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d01f      	beq.n	8007548 <HAL_GPIO_Init+0x208>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a50      	ldr	r2, [pc, #320]	@ (800764c <HAL_GPIO_Init+0x30c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d019      	beq.n	8007544 <HAL_GPIO_Init+0x204>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a4f      	ldr	r2, [pc, #316]	@ (8007650 <HAL_GPIO_Init+0x310>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d013      	beq.n	8007540 <HAL_GPIO_Init+0x200>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a4e      	ldr	r2, [pc, #312]	@ (8007654 <HAL_GPIO_Init+0x314>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d00d      	beq.n	800753c <HAL_GPIO_Init+0x1fc>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a4d      	ldr	r2, [pc, #308]	@ (8007658 <HAL_GPIO_Init+0x318>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d007      	beq.n	8007538 <HAL_GPIO_Init+0x1f8>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a4c      	ldr	r2, [pc, #304]	@ (800765c <HAL_GPIO_Init+0x31c>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d101      	bne.n	8007534 <HAL_GPIO_Init+0x1f4>
 8007530:	2307      	movs	r3, #7
 8007532:	e00e      	b.n	8007552 <HAL_GPIO_Init+0x212>
 8007534:	2308      	movs	r3, #8
 8007536:	e00c      	b.n	8007552 <HAL_GPIO_Init+0x212>
 8007538:	2306      	movs	r3, #6
 800753a:	e00a      	b.n	8007552 <HAL_GPIO_Init+0x212>
 800753c:	2305      	movs	r3, #5
 800753e:	e008      	b.n	8007552 <HAL_GPIO_Init+0x212>
 8007540:	2304      	movs	r3, #4
 8007542:	e006      	b.n	8007552 <HAL_GPIO_Init+0x212>
 8007544:	2303      	movs	r3, #3
 8007546:	e004      	b.n	8007552 <HAL_GPIO_Init+0x212>
 8007548:	2302      	movs	r3, #2
 800754a:	e002      	b.n	8007552 <HAL_GPIO_Init+0x212>
 800754c:	2301      	movs	r3, #1
 800754e:	e000      	b.n	8007552 <HAL_GPIO_Init+0x212>
 8007550:	2300      	movs	r3, #0
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	f002 0203 	and.w	r2, r2, #3
 8007558:	0092      	lsls	r2, r2, #2
 800755a:	4093      	lsls	r3, r2
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	4313      	orrs	r3, r2
 8007560:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007562:	4937      	ldr	r1, [pc, #220]	@ (8007640 <HAL_GPIO_Init+0x300>)
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	089b      	lsrs	r3, r3, #2
 8007568:	3302      	adds	r3, #2
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007570:	4b3b      	ldr	r3, [pc, #236]	@ (8007660 <HAL_GPIO_Init+0x320>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	43db      	mvns	r3, r3
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	4013      	ands	r3, r2
 800757e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	4313      	orrs	r3, r2
 8007592:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007594:	4a32      	ldr	r2, [pc, #200]	@ (8007660 <HAL_GPIO_Init+0x320>)
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800759a:	4b31      	ldr	r3, [pc, #196]	@ (8007660 <HAL_GPIO_Init+0x320>)
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	43db      	mvns	r3, r3
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	4013      	ands	r3, r2
 80075a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80075be:	4a28      	ldr	r2, [pc, #160]	@ (8007660 <HAL_GPIO_Init+0x320>)
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80075c4:	4b26      	ldr	r3, [pc, #152]	@ (8007660 <HAL_GPIO_Init+0x320>)
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	43db      	mvns	r3, r3
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	4013      	ands	r3, r2
 80075d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80075e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007660 <HAL_GPIO_Init+0x320>)
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80075ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007660 <HAL_GPIO_Init+0x320>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	43db      	mvns	r3, r3
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4013      	ands	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4313      	orrs	r3, r2
 8007610:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007612:	4a13      	ldr	r2, [pc, #76]	@ (8007660 <HAL_GPIO_Init+0x320>)
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	3301      	adds	r3, #1
 800761c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	fa22 f303 	lsr.w	r3, r2, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	f47f ae91 	bne.w	8007350 <HAL_GPIO_Init+0x10>
  }
}
 800762e:	bf00      	nop
 8007630:	bf00      	nop
 8007632:	371c      	adds	r7, #28
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	40021000 	.word	0x40021000
 8007640:	40010000 	.word	0x40010000
 8007644:	48000400 	.word	0x48000400
 8007648:	48000800 	.word	0x48000800
 800764c:	48000c00 	.word	0x48000c00
 8007650:	48001000 	.word	0x48001000
 8007654:	48001400 	.word	0x48001400
 8007658:	48001800 	.word	0x48001800
 800765c:	48001c00 	.word	0x48001c00
 8007660:	40010400 	.word	0x40010400

08007664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	807b      	strh	r3, [r7, #2]
 8007670:	4613      	mov	r3, r2
 8007672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007674:	787b      	ldrb	r3, [r7, #1]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800767a:	887a      	ldrh	r2, [r7, #2]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007680:	e002      	b.n	8007688 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007682:	887a      	ldrh	r2, [r7, #2]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80076a6:	887a      	ldrh	r2, [r7, #2]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4013      	ands	r3, r2
 80076ac:	041a      	lsls	r2, r3, #16
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	43d9      	mvns	r1, r3
 80076b2:	887b      	ldrh	r3, [r7, #2]
 80076b4:	400b      	ands	r3, r1
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	619a      	str	r2, [r3, #24]
}
 80076bc:	bf00      	nop
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4603      	mov	r3, r0
 80076d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80076d2:	4b08      	ldr	r3, [pc, #32]	@ (80076f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80076d4:	695a      	ldr	r2, [r3, #20]
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	4013      	ands	r3, r2
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d006      	beq.n	80076ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80076de:	4a05      	ldr	r2, [pc, #20]	@ (80076f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80076e0:	88fb      	ldrh	r3, [r7, #6]
 80076e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80076e4:	88fb      	ldrh	r3, [r7, #6]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fa fd7c 	bl	80021e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	40010400 	.word	0x40010400

080076f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e08d      	b.n	8007826 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d106      	bne.n	8007724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fb fc7e 	bl	8003020 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2224      	movs	r2, #36	@ 0x24
 8007728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 0201 	bic.w	r2, r2, #1
 800773a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007748:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007758:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d107      	bne.n	8007772 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689a      	ldr	r2, [r3, #8]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800776e:	609a      	str	r2, [r3, #8]
 8007770:	e006      	b.n	8007780 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	689a      	ldr	r2, [r3, #8]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800777e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	2b02      	cmp	r3, #2
 8007786:	d108      	bne.n	800779a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007796:	605a      	str	r2, [r3, #4]
 8007798:	e007      	b.n	80077aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	6812      	ldr	r2, [r2, #0]
 80077b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80077b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691a      	ldr	r2, [r3, #16]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	69d9      	ldr	r1, [r3, #28]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a1a      	ldr	r2, [r3, #32]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f042 0201 	orr.w	r2, r2, #1
 8007806:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2220      	movs	r2, #32
 8007812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
	...

08007830 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b088      	sub	sp, #32
 8007834:	af02      	add	r7, sp, #8
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	4608      	mov	r0, r1
 800783a:	4611      	mov	r1, r2
 800783c:	461a      	mov	r2, r3
 800783e:	4603      	mov	r3, r0
 8007840:	817b      	strh	r3, [r7, #10]
 8007842:	460b      	mov	r3, r1
 8007844:	813b      	strh	r3, [r7, #8]
 8007846:	4613      	mov	r3, r2
 8007848:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b20      	cmp	r3, #32
 8007854:	f040 80f9 	bne.w	8007a4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <HAL_I2C_Mem_Write+0x34>
 800785e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007860:	2b00      	cmp	r3, #0
 8007862:	d105      	bne.n	8007870 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800786a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e0ed      	b.n	8007a4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007876:	2b01      	cmp	r3, #1
 8007878:	d101      	bne.n	800787e <HAL_I2C_Mem_Write+0x4e>
 800787a:	2302      	movs	r3, #2
 800787c:	e0e6      	b.n	8007a4c <HAL_I2C_Mem_Write+0x21c>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007886:	f7fc ff63 	bl	8004750 <HAL_GetTick>
 800788a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	2319      	movs	r3, #25
 8007892:	2201      	movs	r2, #1
 8007894:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 fac3 	bl	8007e24 <I2C_WaitOnFlagUntilTimeout>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e0d1      	b.n	8007a4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2221      	movs	r2, #33	@ 0x21
 80078ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2240      	movs	r2, #64	@ 0x40
 80078b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6a3a      	ldr	r2, [r7, #32]
 80078c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80078c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078d0:	88f8      	ldrh	r0, [r7, #6]
 80078d2:	893a      	ldrh	r2, [r7, #8]
 80078d4:	8979      	ldrh	r1, [r7, #10]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	9301      	str	r3, [sp, #4]
 80078da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	4603      	mov	r3, r0
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 f9d3 	bl	8007c8c <I2C_RequestMemoryWrite>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d005      	beq.n	80078f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e0a9      	b.n	8007a4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2bff      	cmp	r3, #255	@ 0xff
 8007900:	d90e      	bls.n	8007920 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	22ff      	movs	r2, #255	@ 0xff
 8007906:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800790c:	b2da      	uxtb	r2, r3
 800790e:	8979      	ldrh	r1, [r7, #10]
 8007910:	2300      	movs	r3, #0
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 fc47 	bl	80081ac <I2C_TransferConfig>
 800791e:	e00f      	b.n	8007940 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007924:	b29a      	uxth	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800792e:	b2da      	uxtb	r2, r3
 8007930:	8979      	ldrh	r1, [r7, #10]
 8007932:	2300      	movs	r3, #0
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f000 fc36 	bl	80081ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 fac6 	bl	8007ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e07b      	b.n	8007a4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007958:	781a      	ldrb	r2, [r3, #0]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800796e:	b29b      	uxth	r3, r3
 8007970:	3b01      	subs	r3, #1
 8007972:	b29a      	uxth	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800797c:	3b01      	subs	r3, #1
 800797e:	b29a      	uxth	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007988:	b29b      	uxth	r3, r3
 800798a:	2b00      	cmp	r3, #0
 800798c:	d034      	beq.n	80079f8 <HAL_I2C_Mem_Write+0x1c8>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007992:	2b00      	cmp	r3, #0
 8007994:	d130      	bne.n	80079f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799c:	2200      	movs	r2, #0
 800799e:	2180      	movs	r1, #128	@ 0x80
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f000 fa3f 	bl	8007e24 <I2C_WaitOnFlagUntilTimeout>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e04d      	b.n	8007a4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	2bff      	cmp	r3, #255	@ 0xff
 80079b8:	d90e      	bls.n	80079d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	22ff      	movs	r2, #255	@ 0xff
 80079be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	8979      	ldrh	r1, [r7, #10]
 80079c8:	2300      	movs	r3, #0
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 fbeb 	bl	80081ac <I2C_TransferConfig>
 80079d6:	e00f      	b.n	80079f8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079dc:	b29a      	uxth	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	8979      	ldrh	r1, [r7, #10]
 80079ea:	2300      	movs	r3, #0
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 fbda 	bl	80081ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d19e      	bne.n	8007940 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 faac 	bl	8007f64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e01a      	b.n	8007a4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6859      	ldr	r1, [r3, #4]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	4b0a      	ldr	r3, [pc, #40]	@ (8007a54 <HAL_I2C_Mem_Write+0x224>)
 8007a2a:	400b      	ands	r3, r1
 8007a2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	e000      	b.n	8007a4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007a4a:	2302      	movs	r3, #2
  }
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3718      	adds	r7, #24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	fe00e800 	.word	0xfe00e800

08007a58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af02      	add	r7, sp, #8
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	4608      	mov	r0, r1
 8007a62:	4611      	mov	r1, r2
 8007a64:	461a      	mov	r2, r3
 8007a66:	4603      	mov	r3, r0
 8007a68:	817b      	strh	r3, [r7, #10]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	813b      	strh	r3, [r7, #8]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b20      	cmp	r3, #32
 8007a7c:	f040 80fd 	bne.w	8007c7a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a80:	6a3b      	ldr	r3, [r7, #32]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <HAL_I2C_Mem_Read+0x34>
 8007a86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d105      	bne.n	8007a98 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a92:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e0f1      	b.n	8007c7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d101      	bne.n	8007aa6 <HAL_I2C_Mem_Read+0x4e>
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	e0ea      	b.n	8007c7c <HAL_I2C_Mem_Read+0x224>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007aae:	f7fc fe4f 	bl	8004750 <HAL_GetTick>
 8007ab2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	2319      	movs	r3, #25
 8007aba:	2201      	movs	r2, #1
 8007abc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 f9af 	bl	8007e24 <I2C_WaitOnFlagUntilTimeout>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e0d5      	b.n	8007c7c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2222      	movs	r2, #34	@ 0x22
 8007ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2240      	movs	r2, #64	@ 0x40
 8007adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6a3a      	ldr	r2, [r7, #32]
 8007aea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007af0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007af8:	88f8      	ldrh	r0, [r7, #6]
 8007afa:	893a      	ldrh	r2, [r7, #8]
 8007afc:	8979      	ldrh	r1, [r7, #10]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	9301      	str	r3, [sp, #4]
 8007b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	4603      	mov	r3, r0
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 f913 	bl	8007d34 <I2C_RequestMemoryRead>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d005      	beq.n	8007b20 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e0ad      	b.n	8007c7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	2bff      	cmp	r3, #255	@ 0xff
 8007b28:	d90e      	bls.n	8007b48 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	8979      	ldrh	r1, [r7, #10]
 8007b38:	4b52      	ldr	r3, [pc, #328]	@ (8007c84 <HAL_I2C_Mem_Read+0x22c>)
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 fb33 	bl	80081ac <I2C_TransferConfig>
 8007b46:	e00f      	b.n	8007b68 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	8979      	ldrh	r1, [r7, #10]
 8007b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8007c84 <HAL_I2C_Mem_Read+0x22c>)
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 fb22 	bl	80081ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2104      	movs	r1, #4
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 f956 	bl	8007e24 <I2C_WaitOnFlagUntilTimeout>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e07c      	b.n	8007c7c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b8c:	b2d2      	uxtb	r2, r2
 8007b8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	3b01      	subs	r3, #1
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d034      	beq.n	8007c28 <HAL_I2C_Mem_Read+0x1d0>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d130      	bne.n	8007c28 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2180      	movs	r1, #128	@ 0x80
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 f927 	bl	8007e24 <I2C_WaitOnFlagUntilTimeout>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e04d      	b.n	8007c7c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	2bff      	cmp	r3, #255	@ 0xff
 8007be8:	d90e      	bls.n	8007c08 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2201      	movs	r2, #1
 8007bee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	8979      	ldrh	r1, [r7, #10]
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 fad3 	bl	80081ac <I2C_TransferConfig>
 8007c06:	e00f      	b.n	8007c28 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	8979      	ldrh	r1, [r7, #10]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 fac2 	bl	80081ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d19a      	bne.n	8007b68 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 f994 	bl	8007f64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d001      	beq.n	8007c46 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e01a      	b.n	8007c7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6859      	ldr	r1, [r3, #4]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	4b0b      	ldr	r3, [pc, #44]	@ (8007c88 <HAL_I2C_Mem_Read+0x230>)
 8007c5a:	400b      	ands	r3, r1
 8007c5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2220      	movs	r2, #32
 8007c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	e000      	b.n	8007c7c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007c7a:	2302      	movs	r3, #2
  }
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	80002400 	.word	0x80002400
 8007c88:	fe00e800 	.word	0xfe00e800

08007c8c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af02      	add	r7, sp, #8
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	4608      	mov	r0, r1
 8007c96:	4611      	mov	r1, r2
 8007c98:	461a      	mov	r2, r3
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	817b      	strh	r3, [r7, #10]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	813b      	strh	r3, [r7, #8]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007ca6:	88fb      	ldrh	r3, [r7, #6]
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	8979      	ldrh	r1, [r7, #10]
 8007cac:	4b20      	ldr	r3, [pc, #128]	@ (8007d30 <I2C_RequestMemoryWrite+0xa4>)
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f000 fa79 	bl	80081ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cba:	69fa      	ldr	r2, [r7, #28]
 8007cbc:	69b9      	ldr	r1, [r7, #24]
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 f909 	bl	8007ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e02c      	b.n	8007d28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007cce:	88fb      	ldrh	r3, [r7, #6]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d105      	bne.n	8007ce0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007cd4:	893b      	ldrh	r3, [r7, #8]
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	629a      	str	r2, [r3, #40]	@ 0x28
 8007cde:	e015      	b.n	8007d0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007ce0:	893b      	ldrh	r3, [r7, #8]
 8007ce2:	0a1b      	lsrs	r3, r3, #8
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cee:	69fa      	ldr	r2, [r7, #28]
 8007cf0:	69b9      	ldr	r1, [r7, #24]
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 f8ef 	bl	8007ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e012      	b.n	8007d28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d02:	893b      	ldrh	r3, [r7, #8]
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	2200      	movs	r2, #0
 8007d14:	2180      	movs	r1, #128	@ 0x80
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f000 f884 	bl	8007e24 <I2C_WaitOnFlagUntilTimeout>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d001      	beq.n	8007d26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e000      	b.n	8007d28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	80002000 	.word	0x80002000

08007d34 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af02      	add	r7, sp, #8
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	4608      	mov	r0, r1
 8007d3e:	4611      	mov	r1, r2
 8007d40:	461a      	mov	r2, r3
 8007d42:	4603      	mov	r3, r0
 8007d44:	817b      	strh	r3, [r7, #10]
 8007d46:	460b      	mov	r3, r1
 8007d48:	813b      	strh	r3, [r7, #8]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007d4e:	88fb      	ldrh	r3, [r7, #6]
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	8979      	ldrh	r1, [r7, #10]
 8007d54:	4b20      	ldr	r3, [pc, #128]	@ (8007dd8 <I2C_RequestMemoryRead+0xa4>)
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	2300      	movs	r3, #0
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 fa26 	bl	80081ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d60:	69fa      	ldr	r2, [r7, #28]
 8007d62:	69b9      	ldr	r1, [r7, #24]
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f000 f8b6 	bl	8007ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e02c      	b.n	8007dce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d74:	88fb      	ldrh	r3, [r7, #6]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d105      	bne.n	8007d86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d7a:	893b      	ldrh	r3, [r7, #8]
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d84:	e015      	b.n	8007db2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007d86:	893b      	ldrh	r3, [r7, #8]
 8007d88:	0a1b      	lsrs	r3, r3, #8
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d94:	69fa      	ldr	r2, [r7, #28]
 8007d96:	69b9      	ldr	r1, [r7, #24]
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 f89c 	bl	8007ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e012      	b.n	8007dce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007da8:	893b      	ldrh	r3, [r7, #8]
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	2200      	movs	r2, #0
 8007dba:	2140      	movs	r1, #64	@ 0x40
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f000 f831 	bl	8007e24 <I2C_WaitOnFlagUntilTimeout>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e000      	b.n	8007dce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	80002000 	.word	0x80002000

08007ddc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	f003 0302 	and.w	r3, r3, #2
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d103      	bne.n	8007dfa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2200      	movs	r2, #0
 8007df8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d007      	beq.n	8007e18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	699a      	ldr	r2, [r3, #24]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f042 0201 	orr.w	r2, r2, #1
 8007e16:	619a      	str	r2, [r3, #24]
  }
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	603b      	str	r3, [r7, #0]
 8007e30:	4613      	mov	r3, r2
 8007e32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e34:	e03b      	b.n	8007eae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e36:	69ba      	ldr	r2, [r7, #24]
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 f8d6 	bl	8007fec <I2C_IsErrorOccurred>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e041      	b.n	8007ece <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e50:	d02d      	beq.n	8007eae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e52:	f7fc fc7d 	bl	8004750 <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d302      	bcc.n	8007e68 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d122      	bne.n	8007eae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699a      	ldr	r2, [r3, #24]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	4013      	ands	r3, r2
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	bf0c      	ite	eq
 8007e78:	2301      	moveq	r3, #1
 8007e7a:	2300      	movne	r3, #0
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	461a      	mov	r2, r3
 8007e80:	79fb      	ldrb	r3, [r7, #7]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d113      	bne.n	8007eae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e8a:	f043 0220 	orr.w	r2, r3, #32
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2220      	movs	r2, #32
 8007e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e00f      	b.n	8007ece <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	699a      	ldr	r2, [r3, #24]
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	bf0c      	ite	eq
 8007ebe:	2301      	moveq	r3, #1
 8007ec0:	2300      	movne	r3, #0
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	79fb      	ldrb	r3, [r7, #7]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d0b4      	beq.n	8007e36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b084      	sub	sp, #16
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ee2:	e033      	b.n	8007f4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	68b9      	ldr	r1, [r7, #8]
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 f87f 	bl	8007fec <I2C_IsErrorOccurred>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d001      	beq.n	8007ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e031      	b.n	8007f5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efe:	d025      	beq.n	8007f4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f00:	f7fc fc26 	bl	8004750 <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d302      	bcc.n	8007f16 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d11a      	bne.n	8007f4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	f003 0302 	and.w	r3, r3, #2
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d013      	beq.n	8007f4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f28:	f043 0220 	orr.w	r2, r3, #32
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2220      	movs	r2, #32
 8007f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e007      	b.n	8007f5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d1c4      	bne.n	8007ee4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f70:	e02f      	b.n	8007fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	68b9      	ldr	r1, [r7, #8]
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f000 f838 	bl	8007fec <I2C_IsErrorOccurred>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e02d      	b.n	8007fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f86:	f7fc fbe3 	bl	8004750 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d302      	bcc.n	8007f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d11a      	bne.n	8007fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b20      	cmp	r3, #32
 8007fa8:	d013      	beq.n	8007fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fae:	f043 0220 	orr.w	r2, r3, #32
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e007      	b.n	8007fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	f003 0320 	and.w	r3, r3, #32
 8007fdc:	2b20      	cmp	r3, #32
 8007fde:	d1c8      	bne.n	8007f72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
	...

08007fec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08a      	sub	sp, #40	@ 0x28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008006:	2300      	movs	r3, #0
 8008008:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	f003 0310 	and.w	r3, r3, #16
 8008014:	2b00      	cmp	r3, #0
 8008016:	d068      	beq.n	80080ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2210      	movs	r2, #16
 800801e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008020:	e049      	b.n	80080b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008028:	d045      	beq.n	80080b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800802a:	f7fc fb91 	bl	8004750 <HAL_GetTick>
 800802e:	4602      	mov	r2, r0
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	429a      	cmp	r2, r3
 8008038:	d302      	bcc.n	8008040 <I2C_IsErrorOccurred+0x54>
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d13a      	bne.n	80080b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800804a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008052:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800805e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008062:	d121      	bne.n	80080a8 <I2C_IsErrorOccurred+0xbc>
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800806a:	d01d      	beq.n	80080a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800806c:	7cfb      	ldrb	r3, [r7, #19]
 800806e:	2b20      	cmp	r3, #32
 8008070:	d01a      	beq.n	80080a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008080:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008082:	f7fc fb65 	bl	8004750 <HAL_GetTick>
 8008086:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008088:	e00e      	b.n	80080a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800808a:	f7fc fb61 	bl	8004750 <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	2b19      	cmp	r3, #25
 8008096:	d907      	bls.n	80080a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	f043 0320 	orr.w	r3, r3, #32
 800809e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80080a6:	e006      	b.n	80080b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	f003 0320 	and.w	r3, r3, #32
 80080b2:	2b20      	cmp	r3, #32
 80080b4:	d1e9      	bne.n	800808a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	f003 0320 	and.w	r3, r3, #32
 80080c0:	2b20      	cmp	r3, #32
 80080c2:	d003      	beq.n	80080cc <I2C_IsErrorOccurred+0xe0>
 80080c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d0aa      	beq.n	8008022 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80080cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d103      	bne.n	80080dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2220      	movs	r2, #32
 80080da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	f043 0304 	orr.w	r3, r3, #4
 80080e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00b      	beq.n	8008114 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	f043 0301 	orr.w	r3, r3, #1
 8008102:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800810c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00b      	beq.n	8008136 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	f043 0308 	orr.w	r3, r3, #8
 8008124:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800812e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00b      	beq.n	8008158 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	f043 0302 	orr.w	r3, r3, #2
 8008146:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008150:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800815c:	2b00      	cmp	r3, #0
 800815e:	d01c      	beq.n	800819a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f7ff fe3b 	bl	8007ddc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6859      	ldr	r1, [r3, #4]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	4b0d      	ldr	r3, [pc, #52]	@ (80081a8 <I2C_IsErrorOccurred+0x1bc>)
 8008172:	400b      	ands	r3, r1
 8008174:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	431a      	orrs	r2, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2220      	movs	r2, #32
 8008186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800819a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3728      	adds	r7, #40	@ 0x28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	fe00e800 	.word	0xfe00e800

080081ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b087      	sub	sp, #28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	607b      	str	r3, [r7, #4]
 80081b6:	460b      	mov	r3, r1
 80081b8:	817b      	strh	r3, [r7, #10]
 80081ba:	4613      	mov	r3, r2
 80081bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80081be:	897b      	ldrh	r3, [r7, #10]
 80081c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80081c4:	7a7b      	ldrb	r3, [r7, #9]
 80081c6:	041b      	lsls	r3, r3, #16
 80081c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80081cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	0d5b      	lsrs	r3, r3, #21
 80081e6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80081ea:	4b08      	ldr	r3, [pc, #32]	@ (800820c <I2C_TransferConfig+0x60>)
 80081ec:	430b      	orrs	r3, r1
 80081ee:	43db      	mvns	r3, r3
 80081f0:	ea02 0103 	and.w	r1, r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80081fe:	bf00      	nop
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	03ff63ff 	.word	0x03ff63ff

08008210 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b20      	cmp	r3, #32
 8008224:	d138      	bne.n	8008298 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800822c:	2b01      	cmp	r3, #1
 800822e:	d101      	bne.n	8008234 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008230:	2302      	movs	r3, #2
 8008232:	e032      	b.n	800829a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2224      	movs	r2, #36	@ 0x24
 8008240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 0201 	bic.w	r2, r2, #1
 8008252:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008262:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6819      	ldr	r1, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	430a      	orrs	r2, r1
 8008272:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f042 0201 	orr.w	r2, r2, #1
 8008282:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2220      	movs	r2, #32
 8008288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	e000      	b.n	800829a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008298:	2302      	movs	r3, #2
  }
}
 800829a:	4618      	mov	r0, r3
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b085      	sub	sp, #20
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b20      	cmp	r3, #32
 80082ba:	d139      	bne.n	8008330 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d101      	bne.n	80082ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80082c6:	2302      	movs	r3, #2
 80082c8:	e033      	b.n	8008332 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2224      	movs	r2, #36	@ 0x24
 80082d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f022 0201 	bic.w	r2, r2, #1
 80082e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80082f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	021b      	lsls	r3, r3, #8
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	4313      	orrs	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f042 0201 	orr.w	r2, r2, #1
 800831a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2220      	movs	r2, #32
 8008320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	e000      	b.n	8008332 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008330:	2302      	movs	r3, #2
  }
}
 8008332:	4618      	mov	r0, r3
 8008334:	3714      	adds	r7, #20
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
	...

08008340 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008340:	b480      	push	{r7}
 8008342:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008344:	4b04      	ldr	r3, [pc, #16]	@ (8008358 <HAL_PWREx_GetVoltageRange+0x18>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800834c:	4618      	mov	r0, r3
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	40007000 	.word	0x40007000

0800835c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800836a:	d130      	bne.n	80083ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800836c:	4b23      	ldr	r3, [pc, #140]	@ (80083fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008378:	d038      	beq.n	80083ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800837a:	4b20      	ldr	r3, [pc, #128]	@ (80083fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008382:	4a1e      	ldr	r2, [pc, #120]	@ (80083fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008384:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008388:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800838a:	4b1d      	ldr	r3, [pc, #116]	@ (8008400 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2232      	movs	r2, #50	@ 0x32
 8008390:	fb02 f303 	mul.w	r3, r2, r3
 8008394:	4a1b      	ldr	r2, [pc, #108]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008396:	fba2 2303 	umull	r2, r3, r2, r3
 800839a:	0c9b      	lsrs	r3, r3, #18
 800839c:	3301      	adds	r3, #1
 800839e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80083a0:	e002      	b.n	80083a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80083a8:	4b14      	ldr	r3, [pc, #80]	@ (80083fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083b4:	d102      	bne.n	80083bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1f2      	bne.n	80083a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80083bc:	4b0f      	ldr	r3, [pc, #60]	@ (80083fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083c8:	d110      	bne.n	80083ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e00f      	b.n	80083ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80083ce:	4b0b      	ldr	r3, [pc, #44]	@ (80083fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80083d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083da:	d007      	beq.n	80083ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80083dc:	4b07      	ldr	r3, [pc, #28]	@ (80083fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80083e4:	4a05      	ldr	r2, [pc, #20]	@ (80083fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80083ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	40007000 	.word	0x40007000
 8008400:	2000002c 	.word	0x2000002c
 8008404:	431bde83 	.word	0x431bde83

08008408 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b088      	sub	sp, #32
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d102      	bne.n	800841c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	f000 bc08 	b.w	8008c2c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800841c:	4b96      	ldr	r3, [pc, #600]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f003 030c 	and.w	r3, r3, #12
 8008424:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008426:	4b94      	ldr	r3, [pc, #592]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	f003 0303 	and.w	r3, r3, #3
 800842e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0310 	and.w	r3, r3, #16
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 80e4 	beq.w	8008606 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d007      	beq.n	8008454 <HAL_RCC_OscConfig+0x4c>
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	2b0c      	cmp	r3, #12
 8008448:	f040 808b 	bne.w	8008562 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2b01      	cmp	r3, #1
 8008450:	f040 8087 	bne.w	8008562 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008454:	4b88      	ldr	r3, [pc, #544]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0302 	and.w	r3, r3, #2
 800845c:	2b00      	cmp	r3, #0
 800845e:	d005      	beq.n	800846c <HAL_RCC_OscConfig+0x64>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e3df      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a1a      	ldr	r2, [r3, #32]
 8008470:	4b81      	ldr	r3, [pc, #516]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0308 	and.w	r3, r3, #8
 8008478:	2b00      	cmp	r3, #0
 800847a:	d004      	beq.n	8008486 <HAL_RCC_OscConfig+0x7e>
 800847c:	4b7e      	ldr	r3, [pc, #504]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008484:	e005      	b.n	8008492 <HAL_RCC_OscConfig+0x8a>
 8008486:	4b7c      	ldr	r3, [pc, #496]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 8008488:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800848c:	091b      	lsrs	r3, r3, #4
 800848e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008492:	4293      	cmp	r3, r2
 8008494:	d223      	bcs.n	80084de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	4618      	mov	r0, r3
 800849c:	f000 fdc4 	bl	8009028 <RCC_SetFlashLatencyFromMSIRange>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e3c0      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084aa:	4b73      	ldr	r3, [pc, #460]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a72      	ldr	r2, [pc, #456]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80084b0:	f043 0308 	orr.w	r3, r3, #8
 80084b4:	6013      	str	r3, [r2, #0]
 80084b6:	4b70      	ldr	r3, [pc, #448]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	496d      	ldr	r1, [pc, #436]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084c8:	4b6b      	ldr	r3, [pc, #428]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	69db      	ldr	r3, [r3, #28]
 80084d4:	021b      	lsls	r3, r3, #8
 80084d6:	4968      	ldr	r1, [pc, #416]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	604b      	str	r3, [r1, #4]
 80084dc:	e025      	b.n	800852a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084de:	4b66      	ldr	r3, [pc, #408]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a65      	ldr	r2, [pc, #404]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80084e4:	f043 0308 	orr.w	r3, r3, #8
 80084e8:	6013      	str	r3, [r2, #0]
 80084ea:	4b63      	ldr	r3, [pc, #396]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	4960      	ldr	r1, [pc, #384]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80084f8:	4313      	orrs	r3, r2
 80084fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084fc:	4b5e      	ldr	r3, [pc, #376]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	021b      	lsls	r3, r3, #8
 800850a:	495b      	ldr	r1, [pc, #364]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 800850c:	4313      	orrs	r3, r2
 800850e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d109      	bne.n	800852a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fd84 	bl	8009028 <RCC_SetFlashLatencyFromMSIRange>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e380      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800852a:	f000 fc87 	bl	8008e3c <HAL_RCC_GetSysClockFreq>
 800852e:	4602      	mov	r2, r0
 8008530:	4b51      	ldr	r3, [pc, #324]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	091b      	lsrs	r3, r3, #4
 8008536:	f003 030f 	and.w	r3, r3, #15
 800853a:	4950      	ldr	r1, [pc, #320]	@ (800867c <HAL_RCC_OscConfig+0x274>)
 800853c:	5ccb      	ldrb	r3, [r1, r3]
 800853e:	f003 031f 	and.w	r3, r3, #31
 8008542:	fa22 f303 	lsr.w	r3, r2, r3
 8008546:	4a4e      	ldr	r2, [pc, #312]	@ (8008680 <HAL_RCC_OscConfig+0x278>)
 8008548:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800854a:	4b4e      	ldr	r3, [pc, #312]	@ (8008684 <HAL_RCC_OscConfig+0x27c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4618      	mov	r0, r3
 8008550:	f7fa fee2 	bl	8003318 <HAL_InitTick>
 8008554:	4603      	mov	r3, r0
 8008556:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d052      	beq.n	8008604 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800855e:	7bfb      	ldrb	r3, [r7, #15]
 8008560:	e364      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d032      	beq.n	80085d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800856a:	4b43      	ldr	r3, [pc, #268]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a42      	ldr	r2, [pc, #264]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 8008570:	f043 0301 	orr.w	r3, r3, #1
 8008574:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008576:	f7fc f8eb 	bl	8004750 <HAL_GetTick>
 800857a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800857c:	e008      	b.n	8008590 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800857e:	f7fc f8e7 	bl	8004750 <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	2b02      	cmp	r3, #2
 800858a:	d901      	bls.n	8008590 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e34d      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008590:	4b39      	ldr	r3, [pc, #228]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d0f0      	beq.n	800857e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800859c:	4b36      	ldr	r3, [pc, #216]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a35      	ldr	r2, [pc, #212]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80085a2:	f043 0308 	orr.w	r3, r3, #8
 80085a6:	6013      	str	r3, [r2, #0]
 80085a8:	4b33      	ldr	r3, [pc, #204]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a1b      	ldr	r3, [r3, #32]
 80085b4:	4930      	ldr	r1, [pc, #192]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80085ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	69db      	ldr	r3, [r3, #28]
 80085c6:	021b      	lsls	r3, r3, #8
 80085c8:	492b      	ldr	r1, [pc, #172]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	604b      	str	r3, [r1, #4]
 80085ce:	e01a      	b.n	8008606 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80085d0:	4b29      	ldr	r3, [pc, #164]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a28      	ldr	r2, [pc, #160]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80085d6:	f023 0301 	bic.w	r3, r3, #1
 80085da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80085dc:	f7fc f8b8 	bl	8004750 <HAL_GetTick>
 80085e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80085e2:	e008      	b.n	80085f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80085e4:	f7fc f8b4 	bl	8004750 <HAL_GetTick>
 80085e8:	4602      	mov	r2, r0
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d901      	bls.n	80085f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e31a      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80085f6:	4b20      	ldr	r3, [pc, #128]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0302 	and.w	r3, r3, #2
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1f0      	bne.n	80085e4 <HAL_RCC_OscConfig+0x1dc>
 8008602:	e000      	b.n	8008606 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008604:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0301 	and.w	r3, r3, #1
 800860e:	2b00      	cmp	r3, #0
 8008610:	d073      	beq.n	80086fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	2b08      	cmp	r3, #8
 8008616:	d005      	beq.n	8008624 <HAL_RCC_OscConfig+0x21c>
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	2b0c      	cmp	r3, #12
 800861c:	d10e      	bne.n	800863c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2b03      	cmp	r3, #3
 8008622:	d10b      	bne.n	800863c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008624:	4b14      	ldr	r3, [pc, #80]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d063      	beq.n	80086f8 <HAL_RCC_OscConfig+0x2f0>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d15f      	bne.n	80086f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e2f7      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008644:	d106      	bne.n	8008654 <HAL_RCC_OscConfig+0x24c>
 8008646:	4b0c      	ldr	r3, [pc, #48]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a0b      	ldr	r2, [pc, #44]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 800864c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008650:	6013      	str	r3, [r2, #0]
 8008652:	e025      	b.n	80086a0 <HAL_RCC_OscConfig+0x298>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800865c:	d114      	bne.n	8008688 <HAL_RCC_OscConfig+0x280>
 800865e:	4b06      	ldr	r3, [pc, #24]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a05      	ldr	r2, [pc, #20]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 8008664:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	4b03      	ldr	r3, [pc, #12]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a02      	ldr	r2, [pc, #8]	@ (8008678 <HAL_RCC_OscConfig+0x270>)
 8008670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	e013      	b.n	80086a0 <HAL_RCC_OscConfig+0x298>
 8008678:	40021000 	.word	0x40021000
 800867c:	0800f6c0 	.word	0x0800f6c0
 8008680:	2000002c 	.word	0x2000002c
 8008684:	20000030 	.word	0x20000030
 8008688:	4ba0      	ldr	r3, [pc, #640]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a9f      	ldr	r2, [pc, #636]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 800868e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008692:	6013      	str	r3, [r2, #0]
 8008694:	4b9d      	ldr	r3, [pc, #628]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a9c      	ldr	r2, [pc, #624]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 800869a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800869e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d013      	beq.n	80086d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086a8:	f7fc f852 	bl	8004750 <HAL_GetTick>
 80086ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80086ae:	e008      	b.n	80086c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086b0:	f7fc f84e 	bl	8004750 <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	2b64      	cmp	r3, #100	@ 0x64
 80086bc:	d901      	bls.n	80086c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e2b4      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80086c2:	4b92      	ldr	r3, [pc, #584]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0f0      	beq.n	80086b0 <HAL_RCC_OscConfig+0x2a8>
 80086ce:	e014      	b.n	80086fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086d0:	f7fc f83e 	bl	8004750 <HAL_GetTick>
 80086d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80086d6:	e008      	b.n	80086ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086d8:	f7fc f83a 	bl	8004750 <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	2b64      	cmp	r3, #100	@ 0x64
 80086e4:	d901      	bls.n	80086ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e2a0      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80086ea:	4b88      	ldr	r3, [pc, #544]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1f0      	bne.n	80086d8 <HAL_RCC_OscConfig+0x2d0>
 80086f6:	e000      	b.n	80086fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 0302 	and.w	r3, r3, #2
 8008702:	2b00      	cmp	r3, #0
 8008704:	d060      	beq.n	80087c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	2b04      	cmp	r3, #4
 800870a:	d005      	beq.n	8008718 <HAL_RCC_OscConfig+0x310>
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	2b0c      	cmp	r3, #12
 8008710:	d119      	bne.n	8008746 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2b02      	cmp	r3, #2
 8008716:	d116      	bne.n	8008746 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008718:	4b7c      	ldr	r3, [pc, #496]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008720:	2b00      	cmp	r3, #0
 8008722:	d005      	beq.n	8008730 <HAL_RCC_OscConfig+0x328>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e27d      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008730:	4b76      	ldr	r3, [pc, #472]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	061b      	lsls	r3, r3, #24
 800873e:	4973      	ldr	r1, [pc, #460]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 8008740:	4313      	orrs	r3, r2
 8008742:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008744:	e040      	b.n	80087c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d023      	beq.n	8008796 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800874e:	4b6f      	ldr	r3, [pc, #444]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a6e      	ldr	r2, [pc, #440]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 8008754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800875a:	f7fb fff9 	bl	8004750 <HAL_GetTick>
 800875e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008760:	e008      	b.n	8008774 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008762:	f7fb fff5 	bl	8004750 <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	2b02      	cmp	r3, #2
 800876e:	d901      	bls.n	8008774 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e25b      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008774:	4b65      	ldr	r3, [pc, #404]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800877c:	2b00      	cmp	r3, #0
 800877e:	d0f0      	beq.n	8008762 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008780:	4b62      	ldr	r3, [pc, #392]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	061b      	lsls	r3, r3, #24
 800878e:	495f      	ldr	r1, [pc, #380]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 8008790:	4313      	orrs	r3, r2
 8008792:	604b      	str	r3, [r1, #4]
 8008794:	e018      	b.n	80087c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008796:	4b5d      	ldr	r3, [pc, #372]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a5c      	ldr	r2, [pc, #368]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 800879c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a2:	f7fb ffd5 	bl	8004750 <HAL_GetTick>
 80087a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80087a8:	e008      	b.n	80087bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087aa:	f7fb ffd1 	bl	8004750 <HAL_GetTick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d901      	bls.n	80087bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e237      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80087bc:	4b53      	ldr	r3, [pc, #332]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1f0      	bne.n	80087aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 0308 	and.w	r3, r3, #8
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d03c      	beq.n	800884e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d01c      	beq.n	8008816 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087dc:	4b4b      	ldr	r3, [pc, #300]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 80087de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087e2:	4a4a      	ldr	r2, [pc, #296]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 80087e4:	f043 0301 	orr.w	r3, r3, #1
 80087e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ec:	f7fb ffb0 	bl	8004750 <HAL_GetTick>
 80087f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087f2:	e008      	b.n	8008806 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087f4:	f7fb ffac 	bl	8004750 <HAL_GetTick>
 80087f8:	4602      	mov	r2, r0
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d901      	bls.n	8008806 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008802:	2303      	movs	r3, #3
 8008804:	e212      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008806:	4b41      	ldr	r3, [pc, #260]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 8008808:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	2b00      	cmp	r3, #0
 8008812:	d0ef      	beq.n	80087f4 <HAL_RCC_OscConfig+0x3ec>
 8008814:	e01b      	b.n	800884e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008816:	4b3d      	ldr	r3, [pc, #244]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 8008818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800881c:	4a3b      	ldr	r2, [pc, #236]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 800881e:	f023 0301 	bic.w	r3, r3, #1
 8008822:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008826:	f7fb ff93 	bl	8004750 <HAL_GetTick>
 800882a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800882c:	e008      	b.n	8008840 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800882e:	f7fb ff8f 	bl	8004750 <HAL_GetTick>
 8008832:	4602      	mov	r2, r0
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	2b02      	cmp	r3, #2
 800883a:	d901      	bls.n	8008840 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e1f5      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008840:	4b32      	ldr	r3, [pc, #200]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 8008842:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008846:	f003 0302 	and.w	r3, r3, #2
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1ef      	bne.n	800882e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0304 	and.w	r3, r3, #4
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 80a6 	beq.w	80089a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800885c:	2300      	movs	r3, #0
 800885e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008860:	4b2a      	ldr	r3, [pc, #168]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 8008862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10d      	bne.n	8008888 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800886c:	4b27      	ldr	r3, [pc, #156]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 800886e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008870:	4a26      	ldr	r2, [pc, #152]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 8008872:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008876:	6593      	str	r3, [r2, #88]	@ 0x58
 8008878:	4b24      	ldr	r3, [pc, #144]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 800887a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800887c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008880:	60bb      	str	r3, [r7, #8]
 8008882:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008884:	2301      	movs	r3, #1
 8008886:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008888:	4b21      	ldr	r3, [pc, #132]	@ (8008910 <HAL_RCC_OscConfig+0x508>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008890:	2b00      	cmp	r3, #0
 8008892:	d118      	bne.n	80088c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008894:	4b1e      	ldr	r3, [pc, #120]	@ (8008910 <HAL_RCC_OscConfig+0x508>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a1d      	ldr	r2, [pc, #116]	@ (8008910 <HAL_RCC_OscConfig+0x508>)
 800889a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800889e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088a0:	f7fb ff56 	bl	8004750 <HAL_GetTick>
 80088a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088a6:	e008      	b.n	80088ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088a8:	f7fb ff52 	bl	8004750 <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d901      	bls.n	80088ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e1b8      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088ba:	4b15      	ldr	r3, [pc, #84]	@ (8008910 <HAL_RCC_OscConfig+0x508>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d0f0      	beq.n	80088a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d108      	bne.n	80088e0 <HAL_RCC_OscConfig+0x4d8>
 80088ce:	4b0f      	ldr	r3, [pc, #60]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 80088d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088d4:	4a0d      	ldr	r2, [pc, #52]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 80088d6:	f043 0301 	orr.w	r3, r3, #1
 80088da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088de:	e029      	b.n	8008934 <HAL_RCC_OscConfig+0x52c>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	2b05      	cmp	r3, #5
 80088e6:	d115      	bne.n	8008914 <HAL_RCC_OscConfig+0x50c>
 80088e8:	4b08      	ldr	r3, [pc, #32]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 80088ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ee:	4a07      	ldr	r2, [pc, #28]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 80088f0:	f043 0304 	orr.w	r3, r3, #4
 80088f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088f8:	4b04      	ldr	r3, [pc, #16]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 80088fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088fe:	4a03      	ldr	r2, [pc, #12]	@ (800890c <HAL_RCC_OscConfig+0x504>)
 8008900:	f043 0301 	orr.w	r3, r3, #1
 8008904:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008908:	e014      	b.n	8008934 <HAL_RCC_OscConfig+0x52c>
 800890a:	bf00      	nop
 800890c:	40021000 	.word	0x40021000
 8008910:	40007000 	.word	0x40007000
 8008914:	4b9d      	ldr	r3, [pc, #628]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 8008916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800891a:	4a9c      	ldr	r2, [pc, #624]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 800891c:	f023 0301 	bic.w	r3, r3, #1
 8008920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008924:	4b99      	ldr	r3, [pc, #612]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 8008926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800892a:	4a98      	ldr	r2, [pc, #608]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 800892c:	f023 0304 	bic.w	r3, r3, #4
 8008930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d016      	beq.n	800896a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800893c:	f7fb ff08 	bl	8004750 <HAL_GetTick>
 8008940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008942:	e00a      	b.n	800895a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008944:	f7fb ff04 	bl	8004750 <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008952:	4293      	cmp	r3, r2
 8008954:	d901      	bls.n	800895a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e168      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800895a:	4b8c      	ldr	r3, [pc, #560]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 800895c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	d0ed      	beq.n	8008944 <HAL_RCC_OscConfig+0x53c>
 8008968:	e015      	b.n	8008996 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800896a:	f7fb fef1 	bl	8004750 <HAL_GetTick>
 800896e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008970:	e00a      	b.n	8008988 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008972:	f7fb feed 	bl	8004750 <HAL_GetTick>
 8008976:	4602      	mov	r2, r0
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008980:	4293      	cmp	r3, r2
 8008982:	d901      	bls.n	8008988 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e151      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008988:	4b80      	ldr	r3, [pc, #512]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 800898a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800898e:	f003 0302 	and.w	r3, r3, #2
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1ed      	bne.n	8008972 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008996:	7ffb      	ldrb	r3, [r7, #31]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d105      	bne.n	80089a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800899c:	4b7b      	ldr	r3, [pc, #492]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 800899e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089a0:	4a7a      	ldr	r2, [pc, #488]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 80089a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 0320 	and.w	r3, r3, #32
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d03c      	beq.n	8008a2e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d01c      	beq.n	80089f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80089bc:	4b73      	ldr	r3, [pc, #460]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 80089be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089c2:	4a72      	ldr	r2, [pc, #456]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 80089c4:	f043 0301 	orr.w	r3, r3, #1
 80089c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089cc:	f7fb fec0 	bl	8004750 <HAL_GetTick>
 80089d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80089d2:	e008      	b.n	80089e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089d4:	f7fb febc 	bl	8004750 <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d901      	bls.n	80089e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e122      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80089e6:	4b69      	ldr	r3, [pc, #420]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 80089e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089ec:	f003 0302 	and.w	r3, r3, #2
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d0ef      	beq.n	80089d4 <HAL_RCC_OscConfig+0x5cc>
 80089f4:	e01b      	b.n	8008a2e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80089f6:	4b65      	ldr	r3, [pc, #404]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 80089f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089fc:	4a63      	ldr	r2, [pc, #396]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 80089fe:	f023 0301 	bic.w	r3, r3, #1
 8008a02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a06:	f7fb fea3 	bl	8004750 <HAL_GetTick>
 8008a0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008a0c:	e008      	b.n	8008a20 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a0e:	f7fb fe9f 	bl	8004750 <HAL_GetTick>
 8008a12:	4602      	mov	r2, r0
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d901      	bls.n	8008a20 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	e105      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008a20:	4b5a      	ldr	r3, [pc, #360]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 8008a22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a26:	f003 0302 	and.w	r3, r3, #2
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1ef      	bne.n	8008a0e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 80f9 	beq.w	8008c2a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	f040 80cf 	bne.w	8008be0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008a42:	4b52      	ldr	r3, [pc, #328]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f003 0203 	and.w	r2, r3, #3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d12c      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a60:	3b01      	subs	r3, #1
 8008a62:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d123      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a72:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d11b      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a82:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d113      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a92:	085b      	lsrs	r3, r3, #1
 8008a94:	3b01      	subs	r3, #1
 8008a96:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d109      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa6:	085b      	lsrs	r3, r3, #1
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d071      	beq.n	8008b94 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	2b0c      	cmp	r3, #12
 8008ab4:	d068      	beq.n	8008b88 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008ab6:	4b35      	ldr	r3, [pc, #212]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d105      	bne.n	8008ace <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008ac2:	4b32      	ldr	r3, [pc, #200]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e0ac      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a2d      	ldr	r2, [pc, #180]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 8008ad8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008adc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008ade:	f7fb fe37 	bl	8004750 <HAL_GetTick>
 8008ae2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ae4:	e008      	b.n	8008af8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ae6:	f7fb fe33 	bl	8004750 <HAL_GetTick>
 8008aea:	4602      	mov	r2, r0
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	1ad3      	subs	r3, r2, r3
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d901      	bls.n	8008af8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e099      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008af8:	4b24      	ldr	r3, [pc, #144]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1f0      	bne.n	8008ae6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b04:	4b21      	ldr	r3, [pc, #132]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 8008b06:	68da      	ldr	r2, [r3, #12]
 8008b08:	4b21      	ldr	r3, [pc, #132]	@ (8008b90 <HAL_RCC_OscConfig+0x788>)
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008b14:	3a01      	subs	r2, #1
 8008b16:	0112      	lsls	r2, r2, #4
 8008b18:	4311      	orrs	r1, r2
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008b1e:	0212      	lsls	r2, r2, #8
 8008b20:	4311      	orrs	r1, r2
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008b26:	0852      	lsrs	r2, r2, #1
 8008b28:	3a01      	subs	r2, #1
 8008b2a:	0552      	lsls	r2, r2, #21
 8008b2c:	4311      	orrs	r1, r2
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008b32:	0852      	lsrs	r2, r2, #1
 8008b34:	3a01      	subs	r2, #1
 8008b36:	0652      	lsls	r2, r2, #25
 8008b38:	4311      	orrs	r1, r2
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008b3e:	06d2      	lsls	r2, r2, #27
 8008b40:	430a      	orrs	r2, r1
 8008b42:	4912      	ldr	r1, [pc, #72]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008b48:	4b10      	ldr	r3, [pc, #64]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a0f      	ldr	r2, [pc, #60]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 8008b4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008b54:	4b0d      	ldr	r3, [pc, #52]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	4a0c      	ldr	r2, [pc, #48]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 8008b5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008b60:	f7fb fdf6 	bl	8004750 <HAL_GetTick>
 8008b64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b66:	e008      	b.n	8008b7a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b68:	f7fb fdf2 	bl	8004750 <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d901      	bls.n	8008b7a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e058      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b7a:	4b04      	ldr	r3, [pc, #16]	@ (8008b8c <HAL_RCC_OscConfig+0x784>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d0f0      	beq.n	8008b68 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008b86:	e050      	b.n	8008c2a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e04f      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
 8008b8c:	40021000 	.word	0x40021000
 8008b90:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b94:	4b27      	ldr	r3, [pc, #156]	@ (8008c34 <HAL_RCC_OscConfig+0x82c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d144      	bne.n	8008c2a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008ba0:	4b24      	ldr	r3, [pc, #144]	@ (8008c34 <HAL_RCC_OscConfig+0x82c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a23      	ldr	r2, [pc, #140]	@ (8008c34 <HAL_RCC_OscConfig+0x82c>)
 8008ba6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008baa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008bac:	4b21      	ldr	r3, [pc, #132]	@ (8008c34 <HAL_RCC_OscConfig+0x82c>)
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	4a20      	ldr	r2, [pc, #128]	@ (8008c34 <HAL_RCC_OscConfig+0x82c>)
 8008bb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008bb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008bb8:	f7fb fdca 	bl	8004750 <HAL_GetTick>
 8008bbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bbe:	e008      	b.n	8008bd2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bc0:	f7fb fdc6 	bl	8004750 <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d901      	bls.n	8008bd2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e02c      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bd2:	4b18      	ldr	r3, [pc, #96]	@ (8008c34 <HAL_RCC_OscConfig+0x82c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d0f0      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x7b8>
 8008bde:	e024      	b.n	8008c2a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	2b0c      	cmp	r3, #12
 8008be4:	d01f      	beq.n	8008c26 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008be6:	4b13      	ldr	r3, [pc, #76]	@ (8008c34 <HAL_RCC_OscConfig+0x82c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a12      	ldr	r2, [pc, #72]	@ (8008c34 <HAL_RCC_OscConfig+0x82c>)
 8008bec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bf2:	f7fb fdad 	bl	8004750 <HAL_GetTick>
 8008bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bf8:	e008      	b.n	8008c0c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bfa:	f7fb fda9 	bl	8004750 <HAL_GetTick>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d901      	bls.n	8008c0c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e00f      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c0c:	4b09      	ldr	r3, [pc, #36]	@ (8008c34 <HAL_RCC_OscConfig+0x82c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1f0      	bne.n	8008bfa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008c18:	4b06      	ldr	r3, [pc, #24]	@ (8008c34 <HAL_RCC_OscConfig+0x82c>)
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	4905      	ldr	r1, [pc, #20]	@ (8008c34 <HAL_RCC_OscConfig+0x82c>)
 8008c1e:	4b06      	ldr	r3, [pc, #24]	@ (8008c38 <HAL_RCC_OscConfig+0x830>)
 8008c20:	4013      	ands	r3, r2
 8008c22:	60cb      	str	r3, [r1, #12]
 8008c24:	e001      	b.n	8008c2a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e000      	b.n	8008c2c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3720      	adds	r7, #32
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	40021000 	.word	0x40021000
 8008c38:	feeefffc 	.word	0xfeeefffc

08008c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e0e7      	b.n	8008e20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c50:	4b75      	ldr	r3, [pc, #468]	@ (8008e28 <HAL_RCC_ClockConfig+0x1ec>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0307 	and.w	r3, r3, #7
 8008c58:	683a      	ldr	r2, [r7, #0]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d910      	bls.n	8008c80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c5e:	4b72      	ldr	r3, [pc, #456]	@ (8008e28 <HAL_RCC_ClockConfig+0x1ec>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f023 0207 	bic.w	r2, r3, #7
 8008c66:	4970      	ldr	r1, [pc, #448]	@ (8008e28 <HAL_RCC_ClockConfig+0x1ec>)
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c6e:	4b6e      	ldr	r3, [pc, #440]	@ (8008e28 <HAL_RCC_ClockConfig+0x1ec>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0307 	and.w	r3, r3, #7
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d001      	beq.n	8008c80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e0cf      	b.n	8008e20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0302 	and.w	r3, r3, #2
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d010      	beq.n	8008cae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	689a      	ldr	r2, [r3, #8]
 8008c90:	4b66      	ldr	r3, [pc, #408]	@ (8008e2c <HAL_RCC_ClockConfig+0x1f0>)
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d908      	bls.n	8008cae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c9c:	4b63      	ldr	r3, [pc, #396]	@ (8008e2c <HAL_RCC_ClockConfig+0x1f0>)
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	4960      	ldr	r1, [pc, #384]	@ (8008e2c <HAL_RCC_ClockConfig+0x1f0>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d04c      	beq.n	8008d54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d107      	bne.n	8008cd2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cc2:	4b5a      	ldr	r3, [pc, #360]	@ (8008e2c <HAL_RCC_ClockConfig+0x1f0>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d121      	bne.n	8008d12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e0a6      	b.n	8008e20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d107      	bne.n	8008cea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008cda:	4b54      	ldr	r3, [pc, #336]	@ (8008e2c <HAL_RCC_ClockConfig+0x1f0>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d115      	bne.n	8008d12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e09a      	b.n	8008e20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d107      	bne.n	8008d02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008cf2:	4b4e      	ldr	r3, [pc, #312]	@ (8008e2c <HAL_RCC_ClockConfig+0x1f0>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d109      	bne.n	8008d12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e08e      	b.n	8008e20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d02:	4b4a      	ldr	r3, [pc, #296]	@ (8008e2c <HAL_RCC_ClockConfig+0x1f0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d101      	bne.n	8008d12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e086      	b.n	8008e20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d12:	4b46      	ldr	r3, [pc, #280]	@ (8008e2c <HAL_RCC_ClockConfig+0x1f0>)
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f023 0203 	bic.w	r2, r3, #3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	4943      	ldr	r1, [pc, #268]	@ (8008e2c <HAL_RCC_ClockConfig+0x1f0>)
 8008d20:	4313      	orrs	r3, r2
 8008d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d24:	f7fb fd14 	bl	8004750 <HAL_GetTick>
 8008d28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d2a:	e00a      	b.n	8008d42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d2c:	f7fb fd10 	bl	8004750 <HAL_GetTick>
 8008d30:	4602      	mov	r2, r0
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d901      	bls.n	8008d42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e06e      	b.n	8008e20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d42:	4b3a      	ldr	r3, [pc, #232]	@ (8008e2c <HAL_RCC_ClockConfig+0x1f0>)
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	f003 020c 	and.w	r2, r3, #12
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d1eb      	bne.n	8008d2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d010      	beq.n	8008d82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	4b31      	ldr	r3, [pc, #196]	@ (8008e2c <HAL_RCC_ClockConfig+0x1f0>)
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d208      	bcs.n	8008d82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d70:	4b2e      	ldr	r3, [pc, #184]	@ (8008e2c <HAL_RCC_ClockConfig+0x1f0>)
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	492b      	ldr	r1, [pc, #172]	@ (8008e2c <HAL_RCC_ClockConfig+0x1f0>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d82:	4b29      	ldr	r3, [pc, #164]	@ (8008e28 <HAL_RCC_ClockConfig+0x1ec>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0307 	and.w	r3, r3, #7
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d210      	bcs.n	8008db2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d90:	4b25      	ldr	r3, [pc, #148]	@ (8008e28 <HAL_RCC_ClockConfig+0x1ec>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f023 0207 	bic.w	r2, r3, #7
 8008d98:	4923      	ldr	r1, [pc, #140]	@ (8008e28 <HAL_RCC_ClockConfig+0x1ec>)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008da0:	4b21      	ldr	r3, [pc, #132]	@ (8008e28 <HAL_RCC_ClockConfig+0x1ec>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0307 	and.w	r3, r3, #7
 8008da8:	683a      	ldr	r2, [r7, #0]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d001      	beq.n	8008db2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e036      	b.n	8008e20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0304 	and.w	r3, r3, #4
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d008      	beq.n	8008dd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8008e2c <HAL_RCC_ClockConfig+0x1f0>)
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	4918      	ldr	r1, [pc, #96]	@ (8008e2c <HAL_RCC_ClockConfig+0x1f0>)
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0308 	and.w	r3, r3, #8
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d009      	beq.n	8008df0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ddc:	4b13      	ldr	r3, [pc, #76]	@ (8008e2c <HAL_RCC_ClockConfig+0x1f0>)
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	00db      	lsls	r3, r3, #3
 8008dea:	4910      	ldr	r1, [pc, #64]	@ (8008e2c <HAL_RCC_ClockConfig+0x1f0>)
 8008dec:	4313      	orrs	r3, r2
 8008dee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008df0:	f000 f824 	bl	8008e3c <HAL_RCC_GetSysClockFreq>
 8008df4:	4602      	mov	r2, r0
 8008df6:	4b0d      	ldr	r3, [pc, #52]	@ (8008e2c <HAL_RCC_ClockConfig+0x1f0>)
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	091b      	lsrs	r3, r3, #4
 8008dfc:	f003 030f 	and.w	r3, r3, #15
 8008e00:	490b      	ldr	r1, [pc, #44]	@ (8008e30 <HAL_RCC_ClockConfig+0x1f4>)
 8008e02:	5ccb      	ldrb	r3, [r1, r3]
 8008e04:	f003 031f 	and.w	r3, r3, #31
 8008e08:	fa22 f303 	lsr.w	r3, r2, r3
 8008e0c:	4a09      	ldr	r2, [pc, #36]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f8>)
 8008e0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008e10:	4b09      	ldr	r3, [pc, #36]	@ (8008e38 <HAL_RCC_ClockConfig+0x1fc>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fa fa7f 	bl	8003318 <HAL_InitTick>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8008e1e:	7afb      	ldrb	r3, [r7, #11]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	40022000 	.word	0x40022000
 8008e2c:	40021000 	.word	0x40021000
 8008e30:	0800f6c0 	.word	0x0800f6c0
 8008e34:	2000002c 	.word	0x2000002c
 8008e38:	20000030 	.word	0x20000030

08008e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b089      	sub	sp, #36	@ 0x24
 8008e40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008e42:	2300      	movs	r3, #0
 8008e44:	61fb      	str	r3, [r7, #28]
 8008e46:	2300      	movs	r3, #0
 8008e48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e4a:	4b3e      	ldr	r3, [pc, #248]	@ (8008f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f003 030c 	and.w	r3, r3, #12
 8008e52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008e54:	4b3b      	ldr	r3, [pc, #236]	@ (8008f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	f003 0303 	and.w	r3, r3, #3
 8008e5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d005      	beq.n	8008e70 <HAL_RCC_GetSysClockFreq+0x34>
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	2b0c      	cmp	r3, #12
 8008e68:	d121      	bne.n	8008eae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d11e      	bne.n	8008eae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008e70:	4b34      	ldr	r3, [pc, #208]	@ (8008f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0308 	and.w	r3, r3, #8
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d107      	bne.n	8008e8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008e7c:	4b31      	ldr	r3, [pc, #196]	@ (8008f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e82:	0a1b      	lsrs	r3, r3, #8
 8008e84:	f003 030f 	and.w	r3, r3, #15
 8008e88:	61fb      	str	r3, [r7, #28]
 8008e8a:	e005      	b.n	8008e98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8008f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	091b      	lsrs	r3, r3, #4
 8008e92:	f003 030f 	and.w	r3, r3, #15
 8008e96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008e98:	4a2b      	ldr	r2, [pc, #172]	@ (8008f48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ea0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10d      	bne.n	8008ec4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008eac:	e00a      	b.n	8008ec4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	2b04      	cmp	r3, #4
 8008eb2:	d102      	bne.n	8008eba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008eb4:	4b25      	ldr	r3, [pc, #148]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x110>)
 8008eb6:	61bb      	str	r3, [r7, #24]
 8008eb8:	e004      	b.n	8008ec4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	2b08      	cmp	r3, #8
 8008ebe:	d101      	bne.n	8008ec4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008ec0:	4b23      	ldr	r3, [pc, #140]	@ (8008f50 <HAL_RCC_GetSysClockFreq+0x114>)
 8008ec2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	2b0c      	cmp	r3, #12
 8008ec8:	d134      	bne.n	8008f34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008eca:	4b1e      	ldr	r3, [pc, #120]	@ (8008f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	f003 0303 	and.w	r3, r3, #3
 8008ed2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d003      	beq.n	8008ee2 <HAL_RCC_GetSysClockFreq+0xa6>
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	2b03      	cmp	r3, #3
 8008ede:	d003      	beq.n	8008ee8 <HAL_RCC_GetSysClockFreq+0xac>
 8008ee0:	e005      	b.n	8008eee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x110>)
 8008ee4:	617b      	str	r3, [r7, #20]
      break;
 8008ee6:	e005      	b.n	8008ef4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008ee8:	4b19      	ldr	r3, [pc, #100]	@ (8008f50 <HAL_RCC_GetSysClockFreq+0x114>)
 8008eea:	617b      	str	r3, [r7, #20]
      break;
 8008eec:	e002      	b.n	8008ef4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	617b      	str	r3, [r7, #20]
      break;
 8008ef2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008ef4:	4b13      	ldr	r3, [pc, #76]	@ (8008f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	091b      	lsrs	r3, r3, #4
 8008efa:	f003 0307 	and.w	r3, r3, #7
 8008efe:	3301      	adds	r3, #1
 8008f00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008f02:	4b10      	ldr	r3, [pc, #64]	@ (8008f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	0a1b      	lsrs	r3, r3, #8
 8008f08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f0c:	697a      	ldr	r2, [r7, #20]
 8008f0e:	fb03 f202 	mul.w	r2, r3, r2
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8008f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	0e5b      	lsrs	r3, r3, #25
 8008f20:	f003 0303 	and.w	r3, r3, #3
 8008f24:	3301      	adds	r3, #1
 8008f26:	005b      	lsls	r3, r3, #1
 8008f28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008f34:	69bb      	ldr	r3, [r7, #24]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3724      	adds	r7, #36	@ 0x24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	40021000 	.word	0x40021000
 8008f48:	0800f6d8 	.word	0x0800f6d8
 8008f4c:	00f42400 	.word	0x00f42400
 8008f50:	007a1200 	.word	0x007a1200

08008f54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f54:	b480      	push	{r7}
 8008f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f58:	4b03      	ldr	r3, [pc, #12]	@ (8008f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	2000002c 	.word	0x2000002c

08008f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008f70:	f7ff fff0 	bl	8008f54 <HAL_RCC_GetHCLKFreq>
 8008f74:	4602      	mov	r2, r0
 8008f76:	4b06      	ldr	r3, [pc, #24]	@ (8008f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	0a1b      	lsrs	r3, r3, #8
 8008f7c:	f003 0307 	and.w	r3, r3, #7
 8008f80:	4904      	ldr	r1, [pc, #16]	@ (8008f94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f82:	5ccb      	ldrb	r3, [r1, r3]
 8008f84:	f003 031f 	and.w	r3, r3, #31
 8008f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	40021000 	.word	0x40021000
 8008f94:	0800f6d0 	.word	0x0800f6d0

08008f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008f9c:	f7ff ffda 	bl	8008f54 <HAL_RCC_GetHCLKFreq>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	4b06      	ldr	r3, [pc, #24]	@ (8008fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	0adb      	lsrs	r3, r3, #11
 8008fa8:	f003 0307 	and.w	r3, r3, #7
 8008fac:	4904      	ldr	r1, [pc, #16]	@ (8008fc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008fae:	5ccb      	ldrb	r3, [r1, r3]
 8008fb0:	f003 031f 	and.w	r3, r3, #31
 8008fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	40021000 	.word	0x40021000
 8008fc0:	0800f6d0 	.word	0x0800f6d0

08008fc4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	220f      	movs	r2, #15
 8008fd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008fd4:	4b12      	ldr	r3, [pc, #72]	@ (8009020 <HAL_RCC_GetClockConfig+0x5c>)
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	f003 0203 	and.w	r2, r3, #3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8009020 <HAL_RCC_GetClockConfig+0x5c>)
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008fec:	4b0c      	ldr	r3, [pc, #48]	@ (8009020 <HAL_RCC_GetClockConfig+0x5c>)
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008ff8:	4b09      	ldr	r3, [pc, #36]	@ (8009020 <HAL_RCC_GetClockConfig+0x5c>)
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	08db      	lsrs	r3, r3, #3
 8008ffe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009006:	4b07      	ldr	r3, [pc, #28]	@ (8009024 <HAL_RCC_GetClockConfig+0x60>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 0207 	and.w	r2, r3, #7
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	601a      	str	r2, [r3, #0]
}
 8009012:	bf00      	nop
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	40021000 	.word	0x40021000
 8009024:	40022000 	.word	0x40022000

08009028 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009030:	2300      	movs	r3, #0
 8009032:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009034:	4b2a      	ldr	r3, [pc, #168]	@ (80090e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d003      	beq.n	8009048 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009040:	f7ff f97e 	bl	8008340 <HAL_PWREx_GetVoltageRange>
 8009044:	6178      	str	r0, [r7, #20]
 8009046:	e014      	b.n	8009072 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009048:	4b25      	ldr	r3, [pc, #148]	@ (80090e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800904a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800904c:	4a24      	ldr	r2, [pc, #144]	@ (80090e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800904e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009052:	6593      	str	r3, [r2, #88]	@ 0x58
 8009054:	4b22      	ldr	r3, [pc, #136]	@ (80090e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009060:	f7ff f96e 	bl	8008340 <HAL_PWREx_GetVoltageRange>
 8009064:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009066:	4b1e      	ldr	r3, [pc, #120]	@ (80090e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800906a:	4a1d      	ldr	r2, [pc, #116]	@ (80090e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800906c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009070:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009078:	d10b      	bne.n	8009092 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2b80      	cmp	r3, #128	@ 0x80
 800907e:	d919      	bls.n	80090b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2ba0      	cmp	r3, #160	@ 0xa0
 8009084:	d902      	bls.n	800908c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009086:	2302      	movs	r3, #2
 8009088:	613b      	str	r3, [r7, #16]
 800908a:	e013      	b.n	80090b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800908c:	2301      	movs	r3, #1
 800908e:	613b      	str	r3, [r7, #16]
 8009090:	e010      	b.n	80090b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b80      	cmp	r3, #128	@ 0x80
 8009096:	d902      	bls.n	800909e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009098:	2303      	movs	r3, #3
 800909a:	613b      	str	r3, [r7, #16]
 800909c:	e00a      	b.n	80090b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b80      	cmp	r3, #128	@ 0x80
 80090a2:	d102      	bne.n	80090aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80090a4:	2302      	movs	r3, #2
 80090a6:	613b      	str	r3, [r7, #16]
 80090a8:	e004      	b.n	80090b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b70      	cmp	r3, #112	@ 0x70
 80090ae:	d101      	bne.n	80090b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80090b0:	2301      	movs	r3, #1
 80090b2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80090b4:	4b0b      	ldr	r3, [pc, #44]	@ (80090e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f023 0207 	bic.w	r2, r3, #7
 80090bc:	4909      	ldr	r1, [pc, #36]	@ (80090e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80090c4:	4b07      	ldr	r3, [pc, #28]	@ (80090e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d001      	beq.n	80090d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e000      	b.n	80090d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3718      	adds	r7, #24
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	40021000 	.word	0x40021000
 80090e4:	40022000 	.word	0x40022000

080090e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80090f0:	2300      	movs	r3, #0
 80090f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80090f4:	2300      	movs	r3, #0
 80090f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009100:	2b00      	cmp	r3, #0
 8009102:	d041      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009108:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800910c:	d02a      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800910e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009112:	d824      	bhi.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009114:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009118:	d008      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800911a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800911e:	d81e      	bhi.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00a      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009124:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009128:	d010      	beq.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800912a:	e018      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800912c:	4b86      	ldr	r3, [pc, #536]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	4a85      	ldr	r2, [pc, #532]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009136:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009138:	e015      	b.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	3304      	adds	r3, #4
 800913e:	2100      	movs	r1, #0
 8009140:	4618      	mov	r0, r3
 8009142:	f000 facd 	bl	80096e0 <RCCEx_PLLSAI1_Config>
 8009146:	4603      	mov	r3, r0
 8009148:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800914a:	e00c      	b.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	3320      	adds	r3, #32
 8009150:	2100      	movs	r1, #0
 8009152:	4618      	mov	r0, r3
 8009154:	f000 fbb6 	bl	80098c4 <RCCEx_PLLSAI2_Config>
 8009158:	4603      	mov	r3, r0
 800915a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800915c:	e003      	b.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	74fb      	strb	r3, [r7, #19]
      break;
 8009162:	e000      	b.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009166:	7cfb      	ldrb	r3, [r7, #19]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10b      	bne.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800916c:	4b76      	ldr	r3, [pc, #472]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800916e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009172:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800917a:	4973      	ldr	r1, [pc, #460]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800917c:	4313      	orrs	r3, r2
 800917e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009182:	e001      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009184:	7cfb      	ldrb	r3, [r7, #19]
 8009186:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d041      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009198:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800919c:	d02a      	beq.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800919e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80091a2:	d824      	bhi.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80091a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091a8:	d008      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80091aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091ae:	d81e      	bhi.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00a      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80091b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091b8:	d010      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80091ba:	e018      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80091bc:	4b62      	ldr	r3, [pc, #392]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	4a61      	ldr	r2, [pc, #388]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091c8:	e015      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	3304      	adds	r3, #4
 80091ce:	2100      	movs	r1, #0
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 fa85 	bl	80096e0 <RCCEx_PLLSAI1_Config>
 80091d6:	4603      	mov	r3, r0
 80091d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091da:	e00c      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	3320      	adds	r3, #32
 80091e0:	2100      	movs	r1, #0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 fb6e 	bl	80098c4 <RCCEx_PLLSAI2_Config>
 80091e8:	4603      	mov	r3, r0
 80091ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091ec:	e003      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	74fb      	strb	r3, [r7, #19]
      break;
 80091f2:	e000      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80091f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091f6:	7cfb      	ldrb	r3, [r7, #19]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10b      	bne.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80091fc:	4b52      	ldr	r3, [pc, #328]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009202:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800920a:	494f      	ldr	r1, [pc, #316]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800920c:	4313      	orrs	r3, r2
 800920e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009212:	e001      	b.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009214:	7cfb      	ldrb	r3, [r7, #19]
 8009216:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 80a0 	beq.w	8009366 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009226:	2300      	movs	r3, #0
 8009228:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800922a:	4b47      	ldr	r3, [pc, #284]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800922c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800922e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d101      	bne.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8009236:	2301      	movs	r3, #1
 8009238:	e000      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800923a:	2300      	movs	r3, #0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00d      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009240:	4b41      	ldr	r3, [pc, #260]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009244:	4a40      	ldr	r2, [pc, #256]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800924a:	6593      	str	r3, [r2, #88]	@ 0x58
 800924c:	4b3e      	ldr	r3, [pc, #248]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800924e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009254:	60bb      	str	r3, [r7, #8]
 8009256:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009258:	2301      	movs	r3, #1
 800925a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800925c:	4b3b      	ldr	r3, [pc, #236]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a3a      	ldr	r2, [pc, #232]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009266:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009268:	f7fb fa72 	bl	8004750 <HAL_GetTick>
 800926c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800926e:	e009      	b.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009270:	f7fb fa6e 	bl	8004750 <HAL_GetTick>
 8009274:	4602      	mov	r2, r0
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	2b02      	cmp	r3, #2
 800927c:	d902      	bls.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800927e:	2303      	movs	r3, #3
 8009280:	74fb      	strb	r3, [r7, #19]
        break;
 8009282:	e005      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009284:	4b31      	ldr	r3, [pc, #196]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800928c:	2b00      	cmp	r3, #0
 800928e:	d0ef      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009290:	7cfb      	ldrb	r3, [r7, #19]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d15c      	bne.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009296:	4b2c      	ldr	r3, [pc, #176]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800929c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d01f      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d019      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80092b4:	4b24      	ldr	r3, [pc, #144]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80092c0:	4b21      	ldr	r3, [pc, #132]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092c6:	4a20      	ldr	r2, [pc, #128]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80092d0:	4b1d      	ldr	r3, [pc, #116]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092d6:	4a1c      	ldr	r2, [pc, #112]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80092e0:	4a19      	ldr	r2, [pc, #100]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d016      	beq.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092f2:	f7fb fa2d 	bl	8004750 <HAL_GetTick>
 80092f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092f8:	e00b      	b.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092fa:	f7fb fa29 	bl	8004750 <HAL_GetTick>
 80092fe:	4602      	mov	r2, r0
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009308:	4293      	cmp	r3, r2
 800930a:	d902      	bls.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	74fb      	strb	r3, [r7, #19]
            break;
 8009310:	e006      	b.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009312:	4b0d      	ldr	r3, [pc, #52]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	2b00      	cmp	r3, #0
 800931e:	d0ec      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009320:	7cfb      	ldrb	r3, [r7, #19]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10c      	bne.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009326:	4b08      	ldr	r3, [pc, #32]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800932c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009336:	4904      	ldr	r1, [pc, #16]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009338:	4313      	orrs	r3, r2
 800933a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800933e:	e009      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009340:	7cfb      	ldrb	r3, [r7, #19]
 8009342:	74bb      	strb	r3, [r7, #18]
 8009344:	e006      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009346:	bf00      	nop
 8009348:	40021000 	.word	0x40021000
 800934c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009350:	7cfb      	ldrb	r3, [r7, #19]
 8009352:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009354:	7c7b      	ldrb	r3, [r7, #17]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d105      	bne.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800935a:	4ba6      	ldr	r3, [pc, #664]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800935c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800935e:	4aa5      	ldr	r2, [pc, #660]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009360:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009364:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00a      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009372:	4ba0      	ldr	r3, [pc, #640]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009378:	f023 0203 	bic.w	r2, r3, #3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009380:	499c      	ldr	r1, [pc, #624]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009382:	4313      	orrs	r3, r2
 8009384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 0302 	and.w	r3, r3, #2
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00a      	beq.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009394:	4b97      	ldr	r3, [pc, #604]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800939a:	f023 020c 	bic.w	r2, r3, #12
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093a2:	4994      	ldr	r1, [pc, #592]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80093a4:	4313      	orrs	r3, r2
 80093a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0304 	and.w	r3, r3, #4
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00a      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80093b6:	4b8f      	ldr	r3, [pc, #572]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80093b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093c4:	498b      	ldr	r1, [pc, #556]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80093c6:	4313      	orrs	r3, r2
 80093c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 0308 	and.w	r3, r3, #8
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00a      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80093d8:	4b86      	ldr	r3, [pc, #536]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80093da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093e6:	4983      	ldr	r1, [pc, #524]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80093e8:	4313      	orrs	r3, r2
 80093ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 0310 	and.w	r3, r3, #16
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00a      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80093fa:	4b7e      	ldr	r3, [pc, #504]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80093fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009400:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009408:	497a      	ldr	r1, [pc, #488]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800940a:	4313      	orrs	r3, r2
 800940c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 0320 	and.w	r3, r3, #32
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00a      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800941c:	4b75      	ldr	r3, [pc, #468]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800941e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009422:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800942a:	4972      	ldr	r1, [pc, #456]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800942c:	4313      	orrs	r3, r2
 800942e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00a      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800943e:	4b6d      	ldr	r3, [pc, #436]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009444:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800944c:	4969      	ldr	r1, [pc, #420]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800944e:	4313      	orrs	r3, r2
 8009450:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00a      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009460:	4b64      	ldr	r3, [pc, #400]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009466:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800946e:	4961      	ldr	r1, [pc, #388]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009470:	4313      	orrs	r3, r2
 8009472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00a      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009482:	4b5c      	ldr	r3, [pc, #368]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009488:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009490:	4958      	ldr	r1, [pc, #352]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009492:	4313      	orrs	r3, r2
 8009494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00a      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80094a4:	4b53      	ldr	r3, [pc, #332]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80094a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094b2:	4950      	ldr	r1, [pc, #320]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80094b4:	4313      	orrs	r3, r2
 80094b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00a      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80094c6:	4b4b      	ldr	r3, [pc, #300]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80094c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094d4:	4947      	ldr	r1, [pc, #284]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80094d6:	4313      	orrs	r3, r2
 80094d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00a      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80094e8:	4b42      	ldr	r3, [pc, #264]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80094ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80094ee:	f023 0203 	bic.w	r2, r3, #3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094f6:	493f      	ldr	r1, [pc, #252]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009506:	2b00      	cmp	r3, #0
 8009508:	d028      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800950a:	4b3a      	ldr	r3, [pc, #232]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800950c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009510:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009518:	4936      	ldr	r1, [pc, #216]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800951a:	4313      	orrs	r3, r2
 800951c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009528:	d106      	bne.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800952a:	4b32      	ldr	r3, [pc, #200]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	4a31      	ldr	r2, [pc, #196]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009530:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009534:	60d3      	str	r3, [r2, #12]
 8009536:	e011      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800953c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009540:	d10c      	bne.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	3304      	adds	r3, #4
 8009546:	2101      	movs	r1, #1
 8009548:	4618      	mov	r0, r3
 800954a:	f000 f8c9 	bl	80096e0 <RCCEx_PLLSAI1_Config>
 800954e:	4603      	mov	r3, r0
 8009550:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009552:	7cfb      	ldrb	r3, [r7, #19]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d001      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8009558:	7cfb      	ldrb	r3, [r7, #19]
 800955a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d028      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009568:	4b22      	ldr	r3, [pc, #136]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800956a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800956e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009576:	491f      	ldr	r1, [pc, #124]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009578:	4313      	orrs	r3, r2
 800957a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009582:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009586:	d106      	bne.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009588:	4b1a      	ldr	r3, [pc, #104]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	4a19      	ldr	r2, [pc, #100]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800958e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009592:	60d3      	str	r3, [r2, #12]
 8009594:	e011      	b.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800959a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800959e:	d10c      	bne.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	3304      	adds	r3, #4
 80095a4:	2101      	movs	r1, #1
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 f89a 	bl	80096e0 <RCCEx_PLLSAI1_Config>
 80095ac:	4603      	mov	r3, r0
 80095ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80095b0:	7cfb      	ldrb	r3, [r7, #19]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d001      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80095b6:	7cfb      	ldrb	r3, [r7, #19]
 80095b8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d02a      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80095c6:	4b0b      	ldr	r3, [pc, #44]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80095c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095d4:	4907      	ldr	r1, [pc, #28]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80095d6:	4313      	orrs	r3, r2
 80095d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095e4:	d108      	bne.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095e6:	4b03      	ldr	r3, [pc, #12]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	4a02      	ldr	r2, [pc, #8]	@ (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80095ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095f0:	60d3      	str	r3, [r2, #12]
 80095f2:	e013      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x534>
 80095f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009600:	d10c      	bne.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	3304      	adds	r3, #4
 8009606:	2101      	movs	r1, #1
 8009608:	4618      	mov	r0, r3
 800960a:	f000 f869 	bl	80096e0 <RCCEx_PLLSAI1_Config>
 800960e:	4603      	mov	r3, r0
 8009610:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009612:	7cfb      	ldrb	r3, [r7, #19]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8009618:	7cfb      	ldrb	r3, [r7, #19]
 800961a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d02f      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009628:	4b2c      	ldr	r3, [pc, #176]	@ (80096dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800962a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800962e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009636:	4929      	ldr	r1, [pc, #164]	@ (80096dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009638:	4313      	orrs	r3, r2
 800963a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009642:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009646:	d10d      	bne.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	3304      	adds	r3, #4
 800964c:	2102      	movs	r1, #2
 800964e:	4618      	mov	r0, r3
 8009650:	f000 f846 	bl	80096e0 <RCCEx_PLLSAI1_Config>
 8009654:	4603      	mov	r3, r0
 8009656:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009658:	7cfb      	ldrb	r3, [r7, #19]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d014      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800965e:	7cfb      	ldrb	r3, [r7, #19]
 8009660:	74bb      	strb	r3, [r7, #18]
 8009662:	e011      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009668:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800966c:	d10c      	bne.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	3320      	adds	r3, #32
 8009672:	2102      	movs	r1, #2
 8009674:	4618      	mov	r0, r3
 8009676:	f000 f925 	bl	80098c4 <RCCEx_PLLSAI2_Config>
 800967a:	4603      	mov	r3, r0
 800967c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800967e:	7cfb      	ldrb	r3, [r7, #19]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8009684:	7cfb      	ldrb	r3, [r7, #19]
 8009686:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00b      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009694:	4b11      	ldr	r3, [pc, #68]	@ (80096dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800969a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096a4:	490d      	ldr	r1, [pc, #52]	@ (80096dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80096a6:	4313      	orrs	r3, r2
 80096a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00b      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80096b8:	4b08      	ldr	r3, [pc, #32]	@ (80096dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80096ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096c8:	4904      	ldr	r1, [pc, #16]	@ (80096dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80096ca:	4313      	orrs	r3, r2
 80096cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80096d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3718      	adds	r7, #24
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	40021000 	.word	0x40021000

080096e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80096ee:	4b74      	ldr	r3, [pc, #464]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	f003 0303 	and.w	r3, r3, #3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d018      	beq.n	800972c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80096fa:	4b71      	ldr	r3, [pc, #452]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	f003 0203 	and.w	r2, r3, #3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	429a      	cmp	r2, r3
 8009708:	d10d      	bne.n	8009726 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
       ||
 800970e:	2b00      	cmp	r3, #0
 8009710:	d009      	beq.n	8009726 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009712:	4b6b      	ldr	r3, [pc, #428]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	091b      	lsrs	r3, r3, #4
 8009718:	f003 0307 	and.w	r3, r3, #7
 800971c:	1c5a      	adds	r2, r3, #1
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	685b      	ldr	r3, [r3, #4]
       ||
 8009722:	429a      	cmp	r2, r3
 8009724:	d047      	beq.n	80097b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	73fb      	strb	r3, [r7, #15]
 800972a:	e044      	b.n	80097b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b03      	cmp	r3, #3
 8009732:	d018      	beq.n	8009766 <RCCEx_PLLSAI1_Config+0x86>
 8009734:	2b03      	cmp	r3, #3
 8009736:	d825      	bhi.n	8009784 <RCCEx_PLLSAI1_Config+0xa4>
 8009738:	2b01      	cmp	r3, #1
 800973a:	d002      	beq.n	8009742 <RCCEx_PLLSAI1_Config+0x62>
 800973c:	2b02      	cmp	r3, #2
 800973e:	d009      	beq.n	8009754 <RCCEx_PLLSAI1_Config+0x74>
 8009740:	e020      	b.n	8009784 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009742:	4b5f      	ldr	r3, [pc, #380]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0302 	and.w	r3, r3, #2
 800974a:	2b00      	cmp	r3, #0
 800974c:	d11d      	bne.n	800978a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009752:	e01a      	b.n	800978a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009754:	4b5a      	ldr	r3, [pc, #360]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800975c:	2b00      	cmp	r3, #0
 800975e:	d116      	bne.n	800978e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009764:	e013      	b.n	800978e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009766:	4b56      	ldr	r3, [pc, #344]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10f      	bne.n	8009792 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009772:	4b53      	ldr	r3, [pc, #332]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800977a:	2b00      	cmp	r3, #0
 800977c:	d109      	bne.n	8009792 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009782:	e006      	b.n	8009792 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	73fb      	strb	r3, [r7, #15]
      break;
 8009788:	e004      	b.n	8009794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800978a:	bf00      	nop
 800978c:	e002      	b.n	8009794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800978e:	bf00      	nop
 8009790:	e000      	b.n	8009794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009792:	bf00      	nop
    }

    if(status == HAL_OK)
 8009794:	7bfb      	ldrb	r3, [r7, #15]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10d      	bne.n	80097b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800979a:	4b49      	ldr	r3, [pc, #292]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6819      	ldr	r1, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	011b      	lsls	r3, r3, #4
 80097ae:	430b      	orrs	r3, r1
 80097b0:	4943      	ldr	r1, [pc, #268]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80097b2:	4313      	orrs	r3, r2
 80097b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d17c      	bne.n	80098b6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80097bc:	4b40      	ldr	r3, [pc, #256]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a3f      	ldr	r2, [pc, #252]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80097c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80097c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097c8:	f7fa ffc2 	bl	8004750 <HAL_GetTick>
 80097cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80097ce:	e009      	b.n	80097e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80097d0:	f7fa ffbe 	bl	8004750 <HAL_GetTick>
 80097d4:	4602      	mov	r2, r0
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d902      	bls.n	80097e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80097de:	2303      	movs	r3, #3
 80097e0:	73fb      	strb	r3, [r7, #15]
        break;
 80097e2:	e005      	b.n	80097f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80097e4:	4b36      	ldr	r3, [pc, #216]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1ef      	bne.n	80097d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d15f      	bne.n	80098b6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d110      	bne.n	800981e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80097fc:	4b30      	ldr	r3, [pc, #192]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8009804:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	6892      	ldr	r2, [r2, #8]
 800980c:	0211      	lsls	r1, r2, #8
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	68d2      	ldr	r2, [r2, #12]
 8009812:	06d2      	lsls	r2, r2, #27
 8009814:	430a      	orrs	r2, r1
 8009816:	492a      	ldr	r1, [pc, #168]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009818:	4313      	orrs	r3, r2
 800981a:	610b      	str	r3, [r1, #16]
 800981c:	e027      	b.n	800986e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d112      	bne.n	800984a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009824:	4b26      	ldr	r3, [pc, #152]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800982c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	6892      	ldr	r2, [r2, #8]
 8009834:	0211      	lsls	r1, r2, #8
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	6912      	ldr	r2, [r2, #16]
 800983a:	0852      	lsrs	r2, r2, #1
 800983c:	3a01      	subs	r2, #1
 800983e:	0552      	lsls	r2, r2, #21
 8009840:	430a      	orrs	r2, r1
 8009842:	491f      	ldr	r1, [pc, #124]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009844:	4313      	orrs	r3, r2
 8009846:	610b      	str	r3, [r1, #16]
 8009848:	e011      	b.n	800986e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800984a:	4b1d      	ldr	r3, [pc, #116]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8009852:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	6892      	ldr	r2, [r2, #8]
 800985a:	0211      	lsls	r1, r2, #8
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	6952      	ldr	r2, [r2, #20]
 8009860:	0852      	lsrs	r2, r2, #1
 8009862:	3a01      	subs	r2, #1
 8009864:	0652      	lsls	r2, r2, #25
 8009866:	430a      	orrs	r2, r1
 8009868:	4915      	ldr	r1, [pc, #84]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800986a:	4313      	orrs	r3, r2
 800986c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800986e:	4b14      	ldr	r3, [pc, #80]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a13      	ldr	r2, [pc, #76]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009874:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009878:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800987a:	f7fa ff69 	bl	8004750 <HAL_GetTick>
 800987e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009880:	e009      	b.n	8009896 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009882:	f7fa ff65 	bl	8004750 <HAL_GetTick>
 8009886:	4602      	mov	r2, r0
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	2b02      	cmp	r3, #2
 800988e:	d902      	bls.n	8009896 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8009890:	2303      	movs	r3, #3
 8009892:	73fb      	strb	r3, [r7, #15]
          break;
 8009894:	e005      	b.n	80098a2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009896:	4b0a      	ldr	r3, [pc, #40]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d0ef      	beq.n	8009882 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80098a2:	7bfb      	ldrb	r3, [r7, #15]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d106      	bne.n	80098b6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80098a8:	4b05      	ldr	r3, [pc, #20]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80098aa:	691a      	ldr	r2, [r3, #16]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	4903      	ldr	r1, [pc, #12]	@ (80098c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80098b2:	4313      	orrs	r3, r2
 80098b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3710      	adds	r7, #16
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	40021000 	.word	0x40021000

080098c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80098d2:	4b69      	ldr	r3, [pc, #420]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	f003 0303 	and.w	r3, r3, #3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d018      	beq.n	8009910 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80098de:	4b66      	ldr	r3, [pc, #408]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	f003 0203 	and.w	r2, r3, #3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d10d      	bne.n	800990a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
       ||
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d009      	beq.n	800990a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80098f6:	4b60      	ldr	r3, [pc, #384]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	091b      	lsrs	r3, r3, #4
 80098fc:	f003 0307 	and.w	r3, r3, #7
 8009900:	1c5a      	adds	r2, r3, #1
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	685b      	ldr	r3, [r3, #4]
       ||
 8009906:	429a      	cmp	r2, r3
 8009908:	d047      	beq.n	800999a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	73fb      	strb	r3, [r7, #15]
 800990e:	e044      	b.n	800999a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b03      	cmp	r3, #3
 8009916:	d018      	beq.n	800994a <RCCEx_PLLSAI2_Config+0x86>
 8009918:	2b03      	cmp	r3, #3
 800991a:	d825      	bhi.n	8009968 <RCCEx_PLLSAI2_Config+0xa4>
 800991c:	2b01      	cmp	r3, #1
 800991e:	d002      	beq.n	8009926 <RCCEx_PLLSAI2_Config+0x62>
 8009920:	2b02      	cmp	r3, #2
 8009922:	d009      	beq.n	8009938 <RCCEx_PLLSAI2_Config+0x74>
 8009924:	e020      	b.n	8009968 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009926:	4b54      	ldr	r3, [pc, #336]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 0302 	and.w	r3, r3, #2
 800992e:	2b00      	cmp	r3, #0
 8009930:	d11d      	bne.n	800996e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009936:	e01a      	b.n	800996e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009938:	4b4f      	ldr	r3, [pc, #316]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009940:	2b00      	cmp	r3, #0
 8009942:	d116      	bne.n	8009972 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009948:	e013      	b.n	8009972 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800994a:	4b4b      	ldr	r3, [pc, #300]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009952:	2b00      	cmp	r3, #0
 8009954:	d10f      	bne.n	8009976 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009956:	4b48      	ldr	r3, [pc, #288]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800995e:	2b00      	cmp	r3, #0
 8009960:	d109      	bne.n	8009976 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009966:	e006      	b.n	8009976 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	73fb      	strb	r3, [r7, #15]
      break;
 800996c:	e004      	b.n	8009978 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800996e:	bf00      	nop
 8009970:	e002      	b.n	8009978 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009972:	bf00      	nop
 8009974:	e000      	b.n	8009978 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009976:	bf00      	nop
    }

    if(status == HAL_OK)
 8009978:	7bfb      	ldrb	r3, [r7, #15]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10d      	bne.n	800999a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800997e:	4b3e      	ldr	r3, [pc, #248]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6819      	ldr	r1, [r3, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	3b01      	subs	r3, #1
 8009990:	011b      	lsls	r3, r3, #4
 8009992:	430b      	orrs	r3, r1
 8009994:	4938      	ldr	r1, [pc, #224]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009996:	4313      	orrs	r3, r2
 8009998:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800999a:	7bfb      	ldrb	r3, [r7, #15]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d166      	bne.n	8009a6e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80099a0:	4b35      	ldr	r3, [pc, #212]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a34      	ldr	r2, [pc, #208]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 80099a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099ac:	f7fa fed0 	bl	8004750 <HAL_GetTick>
 80099b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80099b2:	e009      	b.n	80099c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80099b4:	f7fa fecc 	bl	8004750 <HAL_GetTick>
 80099b8:	4602      	mov	r2, r0
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d902      	bls.n	80099c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	73fb      	strb	r3, [r7, #15]
        break;
 80099c6:	e005      	b.n	80099d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80099c8:	4b2b      	ldr	r3, [pc, #172]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1ef      	bne.n	80099b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d149      	bne.n	8009a6e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d110      	bne.n	8009a02 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80099e0:	4b25      	ldr	r3, [pc, #148]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 80099e2:	695b      	ldr	r3, [r3, #20]
 80099e4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80099e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	6892      	ldr	r2, [r2, #8]
 80099f0:	0211      	lsls	r1, r2, #8
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	68d2      	ldr	r2, [r2, #12]
 80099f6:	06d2      	lsls	r2, r2, #27
 80099f8:	430a      	orrs	r2, r1
 80099fa:	491f      	ldr	r1, [pc, #124]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 80099fc:	4313      	orrs	r3, r2
 80099fe:	614b      	str	r3, [r1, #20]
 8009a00:	e011      	b.n	8009a26 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009a02:	4b1d      	ldr	r3, [pc, #116]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8009a0a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	6892      	ldr	r2, [r2, #8]
 8009a12:	0211      	lsls	r1, r2, #8
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	6912      	ldr	r2, [r2, #16]
 8009a18:	0852      	lsrs	r2, r2, #1
 8009a1a:	3a01      	subs	r2, #1
 8009a1c:	0652      	lsls	r2, r2, #25
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	4915      	ldr	r1, [pc, #84]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009a22:	4313      	orrs	r3, r2
 8009a24:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009a26:	4b14      	ldr	r3, [pc, #80]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a13      	ldr	r2, [pc, #76]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a32:	f7fa fe8d 	bl	8004750 <HAL_GetTick>
 8009a36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009a38:	e009      	b.n	8009a4e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009a3a:	f7fa fe89 	bl	8004750 <HAL_GetTick>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d902      	bls.n	8009a4e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	73fb      	strb	r3, [r7, #15]
          break;
 8009a4c:	e005      	b.n	8009a5a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d0ef      	beq.n	8009a3a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d106      	bne.n	8009a6e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009a60:	4b05      	ldr	r3, [pc, #20]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009a62:	695a      	ldr	r2, [r3, #20]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	695b      	ldr	r3, [r3, #20]
 8009a68:	4903      	ldr	r1, [pc, #12]	@ (8009a78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	40021000 	.word	0x40021000

08009a7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d101      	bne.n	8009a8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e095      	b.n	8009bba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d108      	bne.n	8009aa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a9e:	d009      	beq.n	8009ab4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	61da      	str	r2, [r3, #28]
 8009aa6:	e005      	b.n	8009ab4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d106      	bne.n	8009ad4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7f9 fb06 	bl	80030e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009aea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009af4:	d902      	bls.n	8009afc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009af6:	2300      	movs	r3, #0
 8009af8:	60fb      	str	r3, [r7, #12]
 8009afa:	e002      	b.n	8009b02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009afc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009b00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009b0a:	d007      	beq.n	8009b1c <HAL_SPI_Init+0xa0>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009b14:	d002      	beq.n	8009b1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009b2c:	431a      	orrs	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	f003 0302 	and.w	r3, r3, #2
 8009b36:	431a      	orrs	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	f003 0301 	and.w	r3, r3, #1
 8009b40:	431a      	orrs	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b4a:	431a      	orrs	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	69db      	ldr	r3, [r3, #28]
 8009b50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b54:	431a      	orrs	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b5e:	ea42 0103 	orr.w	r1, r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b66:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	430a      	orrs	r2, r1
 8009b70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	0c1b      	lsrs	r3, r3, #16
 8009b78:	f003 0204 	and.w	r2, r3, #4
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b80:	f003 0310 	and.w	r3, r3, #16
 8009b84:	431a      	orrs	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b8a:	f003 0308 	and.w	r3, r3, #8
 8009b8e:	431a      	orrs	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009b98:	ea42 0103 	orr.w	r1, r2, r3
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b082      	sub	sp, #8
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d101      	bne.n	8009bd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e049      	b.n	8009c68 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d106      	bne.n	8009bee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7f9 fb09 	bl	8003200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4610      	mov	r0, r2
 8009c02:	f000 fa9d 	bl	800a140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2201      	movs	r2, #1
 8009c52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d001      	beq.n	8009c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e04f      	b.n	8009d28 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68da      	ldr	r2, [r3, #12]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f042 0201 	orr.w	r2, r2, #1
 8009c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a23      	ldr	r2, [pc, #140]	@ (8009d34 <HAL_TIM_Base_Start_IT+0xc4>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d01d      	beq.n	8009ce6 <HAL_TIM_Base_Start_IT+0x76>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cb2:	d018      	beq.n	8009ce6 <HAL_TIM_Base_Start_IT+0x76>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8009d38 <HAL_TIM_Base_Start_IT+0xc8>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d013      	beq.n	8009ce6 <HAL_TIM_Base_Start_IT+0x76>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8009d3c <HAL_TIM_Base_Start_IT+0xcc>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d00e      	beq.n	8009ce6 <HAL_TIM_Base_Start_IT+0x76>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8009d40 <HAL_TIM_Base_Start_IT+0xd0>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d009      	beq.n	8009ce6 <HAL_TIM_Base_Start_IT+0x76>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8009d44 <HAL_TIM_Base_Start_IT+0xd4>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d004      	beq.n	8009ce6 <HAL_TIM_Base_Start_IT+0x76>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a19      	ldr	r2, [pc, #100]	@ (8009d48 <HAL_TIM_Base_Start_IT+0xd8>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d115      	bne.n	8009d12 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	689a      	ldr	r2, [r3, #8]
 8009cec:	4b17      	ldr	r3, [pc, #92]	@ (8009d4c <HAL_TIM_Base_Start_IT+0xdc>)
 8009cee:	4013      	ands	r3, r2
 8009cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2b06      	cmp	r3, #6
 8009cf6:	d015      	beq.n	8009d24 <HAL_TIM_Base_Start_IT+0xb4>
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cfe:	d011      	beq.n	8009d24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f042 0201 	orr.w	r2, r2, #1
 8009d0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d10:	e008      	b.n	8009d24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f042 0201 	orr.w	r2, r2, #1
 8009d20:	601a      	str	r2, [r3, #0]
 8009d22:	e000      	b.n	8009d26 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	40012c00 	.word	0x40012c00
 8009d38:	40000400 	.word	0x40000400
 8009d3c:	40000800 	.word	0x40000800
 8009d40:	40000c00 	.word	0x40000c00
 8009d44:	40013400 	.word	0x40013400
 8009d48:	40014000 	.word	0x40014000
 8009d4c:	00010007 	.word	0x00010007

08009d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	f003 0302 	and.w	r3, r3, #2
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d020      	beq.n	8009db4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f003 0302 	and.w	r3, r3, #2
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d01b      	beq.n	8009db4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f06f 0202 	mvn.w	r2, #2
 8009d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	699b      	ldr	r3, [r3, #24]
 8009d92:	f003 0303 	and.w	r3, r3, #3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f9b2 	bl	800a104 <HAL_TIM_IC_CaptureCallback>
 8009da0:	e005      	b.n	8009dae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f9a4 	bl	800a0f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f9b5 	bl	800a118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	f003 0304 	and.w	r3, r3, #4
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d020      	beq.n	8009e00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f003 0304 	and.w	r3, r3, #4
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d01b      	beq.n	8009e00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f06f 0204 	mvn.w	r2, #4
 8009dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2202      	movs	r2, #2
 8009dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d003      	beq.n	8009dee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f98c 	bl	800a104 <HAL_TIM_IC_CaptureCallback>
 8009dec:	e005      	b.n	8009dfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f97e 	bl	800a0f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f98f 	bl	800a118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	f003 0308 	and.w	r3, r3, #8
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d020      	beq.n	8009e4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f003 0308 	and.w	r3, r3, #8
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d01b      	beq.n	8009e4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f06f 0208 	mvn.w	r2, #8
 8009e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2204      	movs	r2, #4
 8009e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	69db      	ldr	r3, [r3, #28]
 8009e2a:	f003 0303 	and.w	r3, r3, #3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d003      	beq.n	8009e3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 f966 	bl	800a104 <HAL_TIM_IC_CaptureCallback>
 8009e38:	e005      	b.n	8009e46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f958 	bl	800a0f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f969 	bl	800a118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	f003 0310 	and.w	r3, r3, #16
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d020      	beq.n	8009e98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f003 0310 	and.w	r3, r3, #16
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d01b      	beq.n	8009e98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f06f 0210 	mvn.w	r2, #16
 8009e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2208      	movs	r2, #8
 8009e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	69db      	ldr	r3, [r3, #28]
 8009e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f940 	bl	800a104 <HAL_TIM_IC_CaptureCallback>
 8009e84:	e005      	b.n	8009e92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f932 	bl	800a0f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 f943 	bl	800a118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	f003 0301 	and.w	r3, r3, #1
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00c      	beq.n	8009ebc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f003 0301 	and.w	r3, r3, #1
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d007      	beq.n	8009ebc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f06f 0201 	mvn.w	r2, #1
 8009eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f7f8 ff2a 	bl	8002d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d104      	bne.n	8009ed0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00c      	beq.n	8009eea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d007      	beq.n	8009eea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fafd 	bl	800a4e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00c      	beq.n	8009f0e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d007      	beq.n	8009f0e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 faf5 	bl	800a4f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00c      	beq.n	8009f32 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d007      	beq.n	8009f32 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f8fd 	bl	800a12c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	f003 0320 	and.w	r3, r3, #32
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00c      	beq.n	8009f56 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f003 0320 	and.w	r3, r3, #32
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d007      	beq.n	8009f56 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f06f 0220 	mvn.w	r2, #32
 8009f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 fabd 	bl	800a4d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f56:	bf00      	nop
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b084      	sub	sp, #16
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d101      	bne.n	8009f7a <HAL_TIM_ConfigClockSource+0x1c>
 8009f76:	2302      	movs	r3, #2
 8009f78:	e0b6      	b.n	800a0e8 <HAL_TIM_ConfigClockSource+0x18a>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2202      	movs	r2, #2
 8009f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f98:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009f9c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009fa4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fb6:	d03e      	beq.n	800a036 <HAL_TIM_ConfigClockSource+0xd8>
 8009fb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fbc:	f200 8087 	bhi.w	800a0ce <HAL_TIM_ConfigClockSource+0x170>
 8009fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fc4:	f000 8086 	beq.w	800a0d4 <HAL_TIM_ConfigClockSource+0x176>
 8009fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fcc:	d87f      	bhi.n	800a0ce <HAL_TIM_ConfigClockSource+0x170>
 8009fce:	2b70      	cmp	r3, #112	@ 0x70
 8009fd0:	d01a      	beq.n	800a008 <HAL_TIM_ConfigClockSource+0xaa>
 8009fd2:	2b70      	cmp	r3, #112	@ 0x70
 8009fd4:	d87b      	bhi.n	800a0ce <HAL_TIM_ConfigClockSource+0x170>
 8009fd6:	2b60      	cmp	r3, #96	@ 0x60
 8009fd8:	d050      	beq.n	800a07c <HAL_TIM_ConfigClockSource+0x11e>
 8009fda:	2b60      	cmp	r3, #96	@ 0x60
 8009fdc:	d877      	bhi.n	800a0ce <HAL_TIM_ConfigClockSource+0x170>
 8009fde:	2b50      	cmp	r3, #80	@ 0x50
 8009fe0:	d03c      	beq.n	800a05c <HAL_TIM_ConfigClockSource+0xfe>
 8009fe2:	2b50      	cmp	r3, #80	@ 0x50
 8009fe4:	d873      	bhi.n	800a0ce <HAL_TIM_ConfigClockSource+0x170>
 8009fe6:	2b40      	cmp	r3, #64	@ 0x40
 8009fe8:	d058      	beq.n	800a09c <HAL_TIM_ConfigClockSource+0x13e>
 8009fea:	2b40      	cmp	r3, #64	@ 0x40
 8009fec:	d86f      	bhi.n	800a0ce <HAL_TIM_ConfigClockSource+0x170>
 8009fee:	2b30      	cmp	r3, #48	@ 0x30
 8009ff0:	d064      	beq.n	800a0bc <HAL_TIM_ConfigClockSource+0x15e>
 8009ff2:	2b30      	cmp	r3, #48	@ 0x30
 8009ff4:	d86b      	bhi.n	800a0ce <HAL_TIM_ConfigClockSource+0x170>
 8009ff6:	2b20      	cmp	r3, #32
 8009ff8:	d060      	beq.n	800a0bc <HAL_TIM_ConfigClockSource+0x15e>
 8009ffa:	2b20      	cmp	r3, #32
 8009ffc:	d867      	bhi.n	800a0ce <HAL_TIM_ConfigClockSource+0x170>
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d05c      	beq.n	800a0bc <HAL_TIM_ConfigClockSource+0x15e>
 800a002:	2b10      	cmp	r3, #16
 800a004:	d05a      	beq.n	800a0bc <HAL_TIM_ConfigClockSource+0x15e>
 800a006:	e062      	b.n	800a0ce <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a018:	f000 f9b2 	bl	800a380 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a02a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	609a      	str	r2, [r3, #8]
      break;
 800a034:	e04f      	b.n	800a0d6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a046:	f000 f99b 	bl	800a380 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	689a      	ldr	r2, [r3, #8]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a058:	609a      	str	r2, [r3, #8]
      break;
 800a05a:	e03c      	b.n	800a0d6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a068:	461a      	mov	r2, r3
 800a06a:	f000 f90f 	bl	800a28c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2150      	movs	r1, #80	@ 0x50
 800a074:	4618      	mov	r0, r3
 800a076:	f000 f968 	bl	800a34a <TIM_ITRx_SetConfig>
      break;
 800a07a:	e02c      	b.n	800a0d6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a088:	461a      	mov	r2, r3
 800a08a:	f000 f92e 	bl	800a2ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2160      	movs	r1, #96	@ 0x60
 800a094:	4618      	mov	r0, r3
 800a096:	f000 f958 	bl	800a34a <TIM_ITRx_SetConfig>
      break;
 800a09a:	e01c      	b.n	800a0d6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	f000 f8ef 	bl	800a28c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2140      	movs	r1, #64	@ 0x40
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f000 f948 	bl	800a34a <TIM_ITRx_SetConfig>
      break;
 800a0ba:	e00c      	b.n	800a0d6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	4610      	mov	r0, r2
 800a0c8:	f000 f93f 	bl	800a34a <TIM_ITRx_SetConfig>
      break;
 800a0cc:	e003      	b.n	800a0d6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a0d2:	e000      	b.n	800a0d6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a0d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3710      	adds	r7, #16
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a46      	ldr	r2, [pc, #280]	@ (800a26c <TIM_Base_SetConfig+0x12c>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d013      	beq.n	800a180 <TIM_Base_SetConfig+0x40>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a15e:	d00f      	beq.n	800a180 <TIM_Base_SetConfig+0x40>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a43      	ldr	r2, [pc, #268]	@ (800a270 <TIM_Base_SetConfig+0x130>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d00b      	beq.n	800a180 <TIM_Base_SetConfig+0x40>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a42      	ldr	r2, [pc, #264]	@ (800a274 <TIM_Base_SetConfig+0x134>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d007      	beq.n	800a180 <TIM_Base_SetConfig+0x40>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a41      	ldr	r2, [pc, #260]	@ (800a278 <TIM_Base_SetConfig+0x138>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d003      	beq.n	800a180 <TIM_Base_SetConfig+0x40>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a40      	ldr	r2, [pc, #256]	@ (800a27c <TIM_Base_SetConfig+0x13c>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d108      	bne.n	800a192 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	4313      	orrs	r3, r2
 800a190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a35      	ldr	r2, [pc, #212]	@ (800a26c <TIM_Base_SetConfig+0x12c>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d01f      	beq.n	800a1da <TIM_Base_SetConfig+0x9a>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1a0:	d01b      	beq.n	800a1da <TIM_Base_SetConfig+0x9a>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a32      	ldr	r2, [pc, #200]	@ (800a270 <TIM_Base_SetConfig+0x130>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d017      	beq.n	800a1da <TIM_Base_SetConfig+0x9a>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a31      	ldr	r2, [pc, #196]	@ (800a274 <TIM_Base_SetConfig+0x134>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d013      	beq.n	800a1da <TIM_Base_SetConfig+0x9a>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a30      	ldr	r2, [pc, #192]	@ (800a278 <TIM_Base_SetConfig+0x138>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d00f      	beq.n	800a1da <TIM_Base_SetConfig+0x9a>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a2f      	ldr	r2, [pc, #188]	@ (800a27c <TIM_Base_SetConfig+0x13c>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d00b      	beq.n	800a1da <TIM_Base_SetConfig+0x9a>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a2e      	ldr	r2, [pc, #184]	@ (800a280 <TIM_Base_SetConfig+0x140>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d007      	beq.n	800a1da <TIM_Base_SetConfig+0x9a>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a2d      	ldr	r2, [pc, #180]	@ (800a284 <TIM_Base_SetConfig+0x144>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d003      	beq.n	800a1da <TIM_Base_SetConfig+0x9a>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a2c      	ldr	r2, [pc, #176]	@ (800a288 <TIM_Base_SetConfig+0x148>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d108      	bne.n	800a1ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	689a      	ldr	r2, [r3, #8]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a16      	ldr	r2, [pc, #88]	@ (800a26c <TIM_Base_SetConfig+0x12c>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d00f      	beq.n	800a238 <TIM_Base_SetConfig+0xf8>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a18      	ldr	r2, [pc, #96]	@ (800a27c <TIM_Base_SetConfig+0x13c>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d00b      	beq.n	800a238 <TIM_Base_SetConfig+0xf8>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a17      	ldr	r2, [pc, #92]	@ (800a280 <TIM_Base_SetConfig+0x140>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d007      	beq.n	800a238 <TIM_Base_SetConfig+0xf8>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a16      	ldr	r2, [pc, #88]	@ (800a284 <TIM_Base_SetConfig+0x144>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d003      	beq.n	800a238 <TIM_Base_SetConfig+0xf8>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a15      	ldr	r2, [pc, #84]	@ (800a288 <TIM_Base_SetConfig+0x148>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d103      	bne.n	800a240 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	691a      	ldr	r2, [r3, #16]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	f003 0301 	and.w	r3, r3, #1
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d105      	bne.n	800a25e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	f023 0201 	bic.w	r2, r3, #1
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	611a      	str	r2, [r3, #16]
  }
}
 800a25e:	bf00      	nop
 800a260:	3714      	adds	r7, #20
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	40012c00 	.word	0x40012c00
 800a270:	40000400 	.word	0x40000400
 800a274:	40000800 	.word	0x40000800
 800a278:	40000c00 	.word	0x40000c00
 800a27c:	40013400 	.word	0x40013400
 800a280:	40014000 	.word	0x40014000
 800a284:	40014400 	.word	0x40014400
 800a288:	40014800 	.word	0x40014800

0800a28c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b087      	sub	sp, #28
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6a1b      	ldr	r3, [r3, #32]
 800a29c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	f023 0201 	bic.w	r2, r3, #1
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a2b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	011b      	lsls	r3, r3, #4
 800a2bc:	693a      	ldr	r2, [r7, #16]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	f023 030a 	bic.w	r3, r3, #10
 800a2c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	621a      	str	r2, [r3, #32]
}
 800a2de:	bf00      	nop
 800a2e0:	371c      	adds	r7, #28
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2ea:	b480      	push	{r7}
 800a2ec:	b087      	sub	sp, #28
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	60f8      	str	r0, [r7, #12]
 800a2f2:	60b9      	str	r1, [r7, #8]
 800a2f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6a1b      	ldr	r3, [r3, #32]
 800a2fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6a1b      	ldr	r3, [r3, #32]
 800a300:	f023 0210 	bic.w	r2, r3, #16
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a314:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	031b      	lsls	r3, r3, #12
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a326:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	011b      	lsls	r3, r3, #4
 800a32c:	697a      	ldr	r2, [r7, #20]
 800a32e:	4313      	orrs	r3, r2
 800a330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	693a      	ldr	r2, [r7, #16]
 800a336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	621a      	str	r2, [r3, #32]
}
 800a33e:	bf00      	nop
 800a340:	371c      	adds	r7, #28
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr

0800a34a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a34a:	b480      	push	{r7}
 800a34c:	b085      	sub	sp, #20
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a360:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	4313      	orrs	r3, r2
 800a368:	f043 0307 	orr.w	r3, r3, #7
 800a36c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	609a      	str	r2, [r3, #8]
}
 800a374:	bf00      	nop
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a380:	b480      	push	{r7}
 800a382:	b087      	sub	sp, #28
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
 800a38c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a39a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	021a      	lsls	r2, r3, #8
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	431a      	orrs	r2, r3
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	697a      	ldr	r2, [r7, #20]
 800a3b2:	609a      	str	r2, [r3, #8]
}
 800a3b4:	bf00      	nop
 800a3b6:	371c      	adds	r7, #28
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d101      	bne.n	800a3d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	e068      	b.n	800a4aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2202      	movs	r2, #2
 800a3e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a2e      	ldr	r2, [pc, #184]	@ (800a4b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d004      	beq.n	800a40c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a2d      	ldr	r2, [pc, #180]	@ (800a4bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d108      	bne.n	800a41e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a412:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a424:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a1e      	ldr	r2, [pc, #120]	@ (800a4b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d01d      	beq.n	800a47e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a44a:	d018      	beq.n	800a47e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a1b      	ldr	r2, [pc, #108]	@ (800a4c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d013      	beq.n	800a47e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a1a      	ldr	r2, [pc, #104]	@ (800a4c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d00e      	beq.n	800a47e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a18      	ldr	r2, [pc, #96]	@ (800a4c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d009      	beq.n	800a47e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a13      	ldr	r2, [pc, #76]	@ (800a4bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d004      	beq.n	800a47e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a14      	ldr	r2, [pc, #80]	@ (800a4cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d10c      	bne.n	800a498 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68ba      	ldr	r2, [r7, #8]
 800a496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3714      	adds	r7, #20
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	40012c00 	.word	0x40012c00
 800a4bc:	40013400 	.word	0x40013400
 800a4c0:	40000400 	.word	0x40000400
 800a4c4:	40000800 	.word	0x40000800
 800a4c8:	40000c00 	.word	0x40000c00
 800a4cc:	40014000 	.word	0x40014000

0800a4d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4d8:	bf00      	nop
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a500:	bf00      	nop
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d101      	bne.n	800a51e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e040      	b.n	800a5a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a522:	2b00      	cmp	r3, #0
 800a524:	d106      	bne.n	800a534 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7f8 fe8c 	bl	800324c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2224      	movs	r2, #36	@ 0x24
 800a538:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f022 0201 	bic.w	r2, r2, #1
 800a548:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d002      	beq.n	800a558 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fe52 	bl	800b1fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fb97 	bl	800ac8c <UART_SetConfig>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b01      	cmp	r3, #1
 800a562:	d101      	bne.n	800a568 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a564:	2301      	movs	r3, #1
 800a566:	e01b      	b.n	800a5a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	685a      	ldr	r2, [r3, #4]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a576:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	689a      	ldr	r2, [r3, #8]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a586:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f042 0201 	orr.w	r2, r2, #1
 800a596:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 fed1 	bl	800b340 <UART_CheckIdleState>
 800a59e:	4603      	mov	r3, r0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08a      	sub	sp, #40	@ 0x28
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5bc:	2b20      	cmp	r3, #32
 800a5be:	d137      	bne.n	800a630 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d002      	beq.n	800a5cc <HAL_UART_Receive_IT+0x24>
 800a5c6:	88fb      	ldrh	r3, [r7, #6]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d101      	bne.n	800a5d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e030      	b.n	800a632 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a18      	ldr	r2, [pc, #96]	@ (800a63c <HAL_UART_Receive_IT+0x94>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d01f      	beq.n	800a620 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d018      	beq.n	800a620 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	e853 3f00 	ldrex	r3, [r3]
 800a5fa:	613b      	str	r3, [r7, #16]
   return(result);
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a602:	627b      	str	r3, [r7, #36]	@ 0x24
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	461a      	mov	r2, r3
 800a60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60c:	623b      	str	r3, [r7, #32]
 800a60e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a610:	69f9      	ldr	r1, [r7, #28]
 800a612:	6a3a      	ldr	r2, [r7, #32]
 800a614:	e841 2300 	strex	r3, r2, [r1]
 800a618:	61bb      	str	r3, [r7, #24]
   return(result);
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1e6      	bne.n	800a5ee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a620:	88fb      	ldrh	r3, [r7, #6]
 800a622:	461a      	mov	r2, r3
 800a624:	68b9      	ldr	r1, [r7, #8]
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f000 ffa0 	bl	800b56c <UART_Start_Receive_IT>
 800a62c:	4603      	mov	r3, r0
 800a62e:	e000      	b.n	800a632 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a630:	2302      	movs	r3, #2
  }
}
 800a632:	4618      	mov	r0, r3
 800a634:	3728      	adds	r7, #40	@ 0x28
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	40008000 	.word	0x40008000

0800a640 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b0ba      	sub	sp, #232	@ 0xe8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a666:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a66a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a66e:	4013      	ands	r3, r2
 800a670:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a674:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d115      	bne.n	800a6a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a67c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a680:	f003 0320 	and.w	r3, r3, #32
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00f      	beq.n	800a6a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a68c:	f003 0320 	and.w	r3, r3, #32
 800a690:	2b00      	cmp	r3, #0
 800a692:	d009      	beq.n	800a6a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f000 82ca 	beq.w	800ac32 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	4798      	blx	r3
      }
      return;
 800a6a6:	e2c4      	b.n	800ac32 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800a6a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f000 8117 	beq.w	800a8e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a6b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d106      	bne.n	800a6cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a6be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a6c2:	4b85      	ldr	r3, [pc, #532]	@ (800a8d8 <HAL_UART_IRQHandler+0x298>)
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f000 810a 	beq.w	800a8e0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a6cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6d0:	f003 0301 	and.w	r3, r3, #1
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d011      	beq.n	800a6fc <HAL_UART_IRQHandler+0xbc>
 800a6d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00b      	beq.n	800a6fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6f2:	f043 0201 	orr.w	r2, r3, #1
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a700:	f003 0302 	and.w	r3, r3, #2
 800a704:	2b00      	cmp	r3, #0
 800a706:	d011      	beq.n	800a72c <HAL_UART_IRQHandler+0xec>
 800a708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a70c:	f003 0301 	and.w	r3, r3, #1
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00b      	beq.n	800a72c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2202      	movs	r2, #2
 800a71a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a722:	f043 0204 	orr.w	r2, r3, #4
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a72c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a730:	f003 0304 	and.w	r3, r3, #4
 800a734:	2b00      	cmp	r3, #0
 800a736:	d011      	beq.n	800a75c <HAL_UART_IRQHandler+0x11c>
 800a738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a73c:	f003 0301 	and.w	r3, r3, #1
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00b      	beq.n	800a75c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2204      	movs	r2, #4
 800a74a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a752:	f043 0202 	orr.w	r2, r3, #2
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a760:	f003 0308 	and.w	r3, r3, #8
 800a764:	2b00      	cmp	r3, #0
 800a766:	d017      	beq.n	800a798 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a76c:	f003 0320 	and.w	r3, r3, #32
 800a770:	2b00      	cmp	r3, #0
 800a772:	d105      	bne.n	800a780 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a778:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00b      	beq.n	800a798 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2208      	movs	r2, #8
 800a786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a78e:	f043 0208 	orr.w	r2, r3, #8
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a79c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d012      	beq.n	800a7ca <HAL_UART_IRQHandler+0x18a>
 800a7a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00c      	beq.n	800a7ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a7b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7c0:	f043 0220 	orr.w	r2, r3, #32
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f000 8230 	beq.w	800ac36 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a7d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7da:	f003 0320 	and.w	r3, r3, #32
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00d      	beq.n	800a7fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a7e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7e6:	f003 0320 	and.w	r3, r3, #32
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d007      	beq.n	800a7fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d003      	beq.n	800a7fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a804:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a812:	2b40      	cmp	r3, #64	@ 0x40
 800a814:	d005      	beq.n	800a822 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a81a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d04f      	beq.n	800a8c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 ff68 	bl	800b6f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a832:	2b40      	cmp	r3, #64	@ 0x40
 800a834:	d141      	bne.n	800a8ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3308      	adds	r3, #8
 800a83c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a840:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a844:	e853 3f00 	ldrex	r3, [r3]
 800a848:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a84c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a854:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	3308      	adds	r3, #8
 800a85e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a862:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a866:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a86e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a872:	e841 2300 	strex	r3, r2, [r1]
 800a876:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a87a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1d9      	bne.n	800a836 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a886:	2b00      	cmp	r3, #0
 800a888:	d013      	beq.n	800a8b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a88e:	4a13      	ldr	r2, [pc, #76]	@ (800a8dc <HAL_UART_IRQHandler+0x29c>)
 800a890:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a896:	4618      	mov	r0, r3
 800a898:	f7fc fc32 	bl	8007100 <HAL_DMA_Abort_IT>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d017      	beq.n	800a8d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8b0:	e00f      	b.n	800a8d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 f9d4 	bl	800ac60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8b8:	e00b      	b.n	800a8d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f9d0 	bl	800ac60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8c0:	e007      	b.n	800a8d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 f9cc 	bl	800ac60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800a8d0:	e1b1      	b.n	800ac36 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8d2:	bf00      	nop
    return;
 800a8d4:	e1af      	b.n	800ac36 <HAL_UART_IRQHandler+0x5f6>
 800a8d6:	bf00      	nop
 800a8d8:	04000120 	.word	0x04000120
 800a8dc:	0800b7c1 	.word	0x0800b7c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	f040 816a 	bne.w	800abbe <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a8ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8ee:	f003 0310 	and.w	r3, r3, #16
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f000 8163 	beq.w	800abbe <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a8f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8fc:	f003 0310 	and.w	r3, r3, #16
 800a900:	2b00      	cmp	r3, #0
 800a902:	f000 815c 	beq.w	800abbe <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2210      	movs	r2, #16
 800a90c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a918:	2b40      	cmp	r3, #64	@ 0x40
 800a91a:	f040 80d4 	bne.w	800aac6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a92a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a92e:	2b00      	cmp	r3, #0
 800a930:	f000 80ad 	beq.w	800aa8e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a93a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a93e:	429a      	cmp	r2, r3
 800a940:	f080 80a5 	bcs.w	800aa8e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a94a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f003 0320 	and.w	r3, r3, #32
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	f040 8086 	bne.w	800aa6c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a968:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a96c:	e853 3f00 	ldrex	r3, [r3]
 800a970:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a974:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a97c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	461a      	mov	r2, r3
 800a986:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a98a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a98e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a992:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a996:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a99a:	e841 2300 	strex	r3, r2, [r1]
 800a99e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a9a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d1da      	bne.n	800a960 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	3308      	adds	r3, #8
 800a9b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a9b4:	e853 3f00 	ldrex	r3, [r3]
 800a9b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a9ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9bc:	f023 0301 	bic.w	r3, r3, #1
 800a9c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	3308      	adds	r3, #8
 800a9ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a9ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a9d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a9d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a9da:	e841 2300 	strex	r3, r2, [r1]
 800a9de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a9e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1e1      	bne.n	800a9aa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	3308      	adds	r3, #8
 800a9ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a9f0:	e853 3f00 	ldrex	r3, [r3]
 800a9f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a9f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	3308      	adds	r3, #8
 800aa06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800aa0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aa0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aa10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aa12:	e841 2300 	strex	r3, r2, [r1]
 800aa16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aa18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1e3      	bne.n	800a9e6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2220      	movs	r2, #32
 800aa22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa34:	e853 3f00 	ldrex	r3, [r3]
 800aa38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa3c:	f023 0310 	bic.w	r3, r3, #16
 800aa40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	461a      	mov	r2, r3
 800aa4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa56:	e841 2300 	strex	r3, r2, [r1]
 800aa5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1e4      	bne.n	800aa2c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fc fb0c 	bl	8007084 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2202      	movs	r2, #2
 800aa70:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f8f4 	bl	800ac74 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800aa8c:	e0d5      	b.n	800ac3a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aa94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	f040 80ce 	bne.w	800ac3a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f003 0320 	and.w	r3, r3, #32
 800aaaa:	2b20      	cmp	r3, #32
 800aaac:	f040 80c5 	bne.w	800ac3a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2202      	movs	r2, #2
 800aab4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aabc:	4619      	mov	r1, r3
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 f8d8 	bl	800ac74 <HAL_UARTEx_RxEventCallback>
      return;
 800aac4:	e0b9      	b.n	800ac3a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	1ad3      	subs	r3, r2, r3
 800aad6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f000 80ab 	beq.w	800ac3e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800aae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f000 80a6 	beq.w	800ac3e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafa:	e853 3f00 	ldrex	r3, [r3]
 800aafe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab14:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab1c:	e841 2300 	strex	r3, r2, [r1]
 800ab20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1e4      	bne.n	800aaf2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	3308      	adds	r3, #8
 800ab2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab32:	e853 3f00 	ldrex	r3, [r3]
 800ab36:	623b      	str	r3, [r7, #32]
   return(result);
 800ab38:	6a3b      	ldr	r3, [r7, #32]
 800ab3a:	f023 0301 	bic.w	r3, r3, #1
 800ab3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	3308      	adds	r3, #8
 800ab48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ab4c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab54:	e841 2300 	strex	r3, r2, [r1]
 800ab58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1e3      	bne.n	800ab28 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2220      	movs	r2, #32
 800ab64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2200      	movs	r2, #0
 800ab72:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	e853 3f00 	ldrex	r3, [r3]
 800ab80:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f023 0310 	bic.w	r3, r3, #16
 800ab88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	461a      	mov	r2, r3
 800ab92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ab96:	61fb      	str	r3, [r7, #28]
 800ab98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9a:	69b9      	ldr	r1, [r7, #24]
 800ab9c:	69fa      	ldr	r2, [r7, #28]
 800ab9e:	e841 2300 	strex	r3, r2, [r1]
 800aba2:	617b      	str	r3, [r7, #20]
   return(result);
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1e4      	bne.n	800ab74 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2202      	movs	r2, #2
 800abae:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800abb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800abb4:	4619      	mov	r1, r3
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 f85c 	bl	800ac74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800abbc:	e03f      	b.n	800ac3e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800abbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00e      	beq.n	800abe8 <HAL_UART_IRQHandler+0x5a8>
 800abca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d008      	beq.n	800abe8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800abde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f000 ffe9 	bl	800bbb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800abe6:	e02d      	b.n	800ac44 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800abe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00e      	beq.n	800ac12 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800abf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d008      	beq.n	800ac12 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d01c      	beq.n	800ac42 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	4798      	blx	r3
    }
    return;
 800ac10:	e017      	b.n	800ac42 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ac12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d012      	beq.n	800ac44 <HAL_UART_IRQHandler+0x604>
 800ac1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00c      	beq.n	800ac44 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fdde 	bl	800b7ec <UART_EndTransmit_IT>
    return;
 800ac30:	e008      	b.n	800ac44 <HAL_UART_IRQHandler+0x604>
      return;
 800ac32:	bf00      	nop
 800ac34:	e006      	b.n	800ac44 <HAL_UART_IRQHandler+0x604>
    return;
 800ac36:	bf00      	nop
 800ac38:	e004      	b.n	800ac44 <HAL_UART_IRQHandler+0x604>
      return;
 800ac3a:	bf00      	nop
 800ac3c:	e002      	b.n	800ac44 <HAL_UART_IRQHandler+0x604>
      return;
 800ac3e:	bf00      	nop
 800ac40:	e000      	b.n	800ac44 <HAL_UART_IRQHandler+0x604>
    return;
 800ac42:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800ac44:	37e8      	adds	r7, #232	@ 0xe8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop

0800ac4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ac54:	bf00      	nop
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ac68:	bf00      	nop
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ac80:	bf00      	nop
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac90:	b08a      	sub	sp, #40	@ 0x28
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac96:	2300      	movs	r3, #0
 800ac98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	689a      	ldr	r2, [r3, #8]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	431a      	orrs	r2, r3
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	431a      	orrs	r2, r3
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	69db      	ldr	r3, [r3, #28]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	4ba4      	ldr	r3, [pc, #656]	@ (800af4c <UART_SetConfig+0x2c0>)
 800acbc:	4013      	ands	r3, r2
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	6812      	ldr	r2, [r2, #0]
 800acc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800acc4:	430b      	orrs	r3, r1
 800acc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	68da      	ldr	r2, [r3, #12]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	430a      	orrs	r2, r1
 800acdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a99      	ldr	r2, [pc, #612]	@ (800af50 <UART_SetConfig+0x2c4>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d004      	beq.n	800acf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acf4:	4313      	orrs	r3, r2
 800acf6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad08:	430a      	orrs	r2, r1
 800ad0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a90      	ldr	r2, [pc, #576]	@ (800af54 <UART_SetConfig+0x2c8>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d126      	bne.n	800ad64 <UART_SetConfig+0xd8>
 800ad16:	4b90      	ldr	r3, [pc, #576]	@ (800af58 <UART_SetConfig+0x2cc>)
 800ad18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad1c:	f003 0303 	and.w	r3, r3, #3
 800ad20:	2b03      	cmp	r3, #3
 800ad22:	d81b      	bhi.n	800ad5c <UART_SetConfig+0xd0>
 800ad24:	a201      	add	r2, pc, #4	@ (adr r2, 800ad2c <UART_SetConfig+0xa0>)
 800ad26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2a:	bf00      	nop
 800ad2c:	0800ad3d 	.word	0x0800ad3d
 800ad30:	0800ad4d 	.word	0x0800ad4d
 800ad34:	0800ad45 	.word	0x0800ad45
 800ad38:	0800ad55 	.word	0x0800ad55
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad42:	e116      	b.n	800af72 <UART_SetConfig+0x2e6>
 800ad44:	2302      	movs	r3, #2
 800ad46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad4a:	e112      	b.n	800af72 <UART_SetConfig+0x2e6>
 800ad4c:	2304      	movs	r3, #4
 800ad4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad52:	e10e      	b.n	800af72 <UART_SetConfig+0x2e6>
 800ad54:	2308      	movs	r3, #8
 800ad56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad5a:	e10a      	b.n	800af72 <UART_SetConfig+0x2e6>
 800ad5c:	2310      	movs	r3, #16
 800ad5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad62:	e106      	b.n	800af72 <UART_SetConfig+0x2e6>
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a7c      	ldr	r2, [pc, #496]	@ (800af5c <UART_SetConfig+0x2d0>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d138      	bne.n	800ade0 <UART_SetConfig+0x154>
 800ad6e:	4b7a      	ldr	r3, [pc, #488]	@ (800af58 <UART_SetConfig+0x2cc>)
 800ad70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad74:	f003 030c 	and.w	r3, r3, #12
 800ad78:	2b0c      	cmp	r3, #12
 800ad7a:	d82d      	bhi.n	800add8 <UART_SetConfig+0x14c>
 800ad7c:	a201      	add	r2, pc, #4	@ (adr r2, 800ad84 <UART_SetConfig+0xf8>)
 800ad7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad82:	bf00      	nop
 800ad84:	0800adb9 	.word	0x0800adb9
 800ad88:	0800add9 	.word	0x0800add9
 800ad8c:	0800add9 	.word	0x0800add9
 800ad90:	0800add9 	.word	0x0800add9
 800ad94:	0800adc9 	.word	0x0800adc9
 800ad98:	0800add9 	.word	0x0800add9
 800ad9c:	0800add9 	.word	0x0800add9
 800ada0:	0800add9 	.word	0x0800add9
 800ada4:	0800adc1 	.word	0x0800adc1
 800ada8:	0800add9 	.word	0x0800add9
 800adac:	0800add9 	.word	0x0800add9
 800adb0:	0800add9 	.word	0x0800add9
 800adb4:	0800add1 	.word	0x0800add1
 800adb8:	2300      	movs	r3, #0
 800adba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800adbe:	e0d8      	b.n	800af72 <UART_SetConfig+0x2e6>
 800adc0:	2302      	movs	r3, #2
 800adc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800adc6:	e0d4      	b.n	800af72 <UART_SetConfig+0x2e6>
 800adc8:	2304      	movs	r3, #4
 800adca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800adce:	e0d0      	b.n	800af72 <UART_SetConfig+0x2e6>
 800add0:	2308      	movs	r3, #8
 800add2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800add6:	e0cc      	b.n	800af72 <UART_SetConfig+0x2e6>
 800add8:	2310      	movs	r3, #16
 800adda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800adde:	e0c8      	b.n	800af72 <UART_SetConfig+0x2e6>
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a5e      	ldr	r2, [pc, #376]	@ (800af60 <UART_SetConfig+0x2d4>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d125      	bne.n	800ae36 <UART_SetConfig+0x1aa>
 800adea:	4b5b      	ldr	r3, [pc, #364]	@ (800af58 <UART_SetConfig+0x2cc>)
 800adec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adf0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800adf4:	2b30      	cmp	r3, #48	@ 0x30
 800adf6:	d016      	beq.n	800ae26 <UART_SetConfig+0x19a>
 800adf8:	2b30      	cmp	r3, #48	@ 0x30
 800adfa:	d818      	bhi.n	800ae2e <UART_SetConfig+0x1a2>
 800adfc:	2b20      	cmp	r3, #32
 800adfe:	d00a      	beq.n	800ae16 <UART_SetConfig+0x18a>
 800ae00:	2b20      	cmp	r3, #32
 800ae02:	d814      	bhi.n	800ae2e <UART_SetConfig+0x1a2>
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d002      	beq.n	800ae0e <UART_SetConfig+0x182>
 800ae08:	2b10      	cmp	r3, #16
 800ae0a:	d008      	beq.n	800ae1e <UART_SetConfig+0x192>
 800ae0c:	e00f      	b.n	800ae2e <UART_SetConfig+0x1a2>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae14:	e0ad      	b.n	800af72 <UART_SetConfig+0x2e6>
 800ae16:	2302      	movs	r3, #2
 800ae18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae1c:	e0a9      	b.n	800af72 <UART_SetConfig+0x2e6>
 800ae1e:	2304      	movs	r3, #4
 800ae20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae24:	e0a5      	b.n	800af72 <UART_SetConfig+0x2e6>
 800ae26:	2308      	movs	r3, #8
 800ae28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae2c:	e0a1      	b.n	800af72 <UART_SetConfig+0x2e6>
 800ae2e:	2310      	movs	r3, #16
 800ae30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae34:	e09d      	b.n	800af72 <UART_SetConfig+0x2e6>
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a4a      	ldr	r2, [pc, #296]	@ (800af64 <UART_SetConfig+0x2d8>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d125      	bne.n	800ae8c <UART_SetConfig+0x200>
 800ae40:	4b45      	ldr	r3, [pc, #276]	@ (800af58 <UART_SetConfig+0x2cc>)
 800ae42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ae4a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ae4c:	d016      	beq.n	800ae7c <UART_SetConfig+0x1f0>
 800ae4e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ae50:	d818      	bhi.n	800ae84 <UART_SetConfig+0x1f8>
 800ae52:	2b80      	cmp	r3, #128	@ 0x80
 800ae54:	d00a      	beq.n	800ae6c <UART_SetConfig+0x1e0>
 800ae56:	2b80      	cmp	r3, #128	@ 0x80
 800ae58:	d814      	bhi.n	800ae84 <UART_SetConfig+0x1f8>
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d002      	beq.n	800ae64 <UART_SetConfig+0x1d8>
 800ae5e:	2b40      	cmp	r3, #64	@ 0x40
 800ae60:	d008      	beq.n	800ae74 <UART_SetConfig+0x1e8>
 800ae62:	e00f      	b.n	800ae84 <UART_SetConfig+0x1f8>
 800ae64:	2300      	movs	r3, #0
 800ae66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae6a:	e082      	b.n	800af72 <UART_SetConfig+0x2e6>
 800ae6c:	2302      	movs	r3, #2
 800ae6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae72:	e07e      	b.n	800af72 <UART_SetConfig+0x2e6>
 800ae74:	2304      	movs	r3, #4
 800ae76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae7a:	e07a      	b.n	800af72 <UART_SetConfig+0x2e6>
 800ae7c:	2308      	movs	r3, #8
 800ae7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae82:	e076      	b.n	800af72 <UART_SetConfig+0x2e6>
 800ae84:	2310      	movs	r3, #16
 800ae86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae8a:	e072      	b.n	800af72 <UART_SetConfig+0x2e6>
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a35      	ldr	r2, [pc, #212]	@ (800af68 <UART_SetConfig+0x2dc>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d12a      	bne.n	800aeec <UART_SetConfig+0x260>
 800ae96:	4b30      	ldr	r3, [pc, #192]	@ (800af58 <UART_SetConfig+0x2cc>)
 800ae98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aea0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aea4:	d01a      	beq.n	800aedc <UART_SetConfig+0x250>
 800aea6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aeaa:	d81b      	bhi.n	800aee4 <UART_SetConfig+0x258>
 800aeac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aeb0:	d00c      	beq.n	800aecc <UART_SetConfig+0x240>
 800aeb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aeb6:	d815      	bhi.n	800aee4 <UART_SetConfig+0x258>
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d003      	beq.n	800aec4 <UART_SetConfig+0x238>
 800aebc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aec0:	d008      	beq.n	800aed4 <UART_SetConfig+0x248>
 800aec2:	e00f      	b.n	800aee4 <UART_SetConfig+0x258>
 800aec4:	2300      	movs	r3, #0
 800aec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aeca:	e052      	b.n	800af72 <UART_SetConfig+0x2e6>
 800aecc:	2302      	movs	r3, #2
 800aece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aed2:	e04e      	b.n	800af72 <UART_SetConfig+0x2e6>
 800aed4:	2304      	movs	r3, #4
 800aed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aeda:	e04a      	b.n	800af72 <UART_SetConfig+0x2e6>
 800aedc:	2308      	movs	r3, #8
 800aede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aee2:	e046      	b.n	800af72 <UART_SetConfig+0x2e6>
 800aee4:	2310      	movs	r3, #16
 800aee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aeea:	e042      	b.n	800af72 <UART_SetConfig+0x2e6>
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a17      	ldr	r2, [pc, #92]	@ (800af50 <UART_SetConfig+0x2c4>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d13a      	bne.n	800af6c <UART_SetConfig+0x2e0>
 800aef6:	4b18      	ldr	r3, [pc, #96]	@ (800af58 <UART_SetConfig+0x2cc>)
 800aef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aefc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800af00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af04:	d01a      	beq.n	800af3c <UART_SetConfig+0x2b0>
 800af06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af0a:	d81b      	bhi.n	800af44 <UART_SetConfig+0x2b8>
 800af0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af10:	d00c      	beq.n	800af2c <UART_SetConfig+0x2a0>
 800af12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af16:	d815      	bhi.n	800af44 <UART_SetConfig+0x2b8>
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d003      	beq.n	800af24 <UART_SetConfig+0x298>
 800af1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af20:	d008      	beq.n	800af34 <UART_SetConfig+0x2a8>
 800af22:	e00f      	b.n	800af44 <UART_SetConfig+0x2b8>
 800af24:	2300      	movs	r3, #0
 800af26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af2a:	e022      	b.n	800af72 <UART_SetConfig+0x2e6>
 800af2c:	2302      	movs	r3, #2
 800af2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af32:	e01e      	b.n	800af72 <UART_SetConfig+0x2e6>
 800af34:	2304      	movs	r3, #4
 800af36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af3a:	e01a      	b.n	800af72 <UART_SetConfig+0x2e6>
 800af3c:	2308      	movs	r3, #8
 800af3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af42:	e016      	b.n	800af72 <UART_SetConfig+0x2e6>
 800af44:	2310      	movs	r3, #16
 800af46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af4a:	e012      	b.n	800af72 <UART_SetConfig+0x2e6>
 800af4c:	efff69f3 	.word	0xefff69f3
 800af50:	40008000 	.word	0x40008000
 800af54:	40013800 	.word	0x40013800
 800af58:	40021000 	.word	0x40021000
 800af5c:	40004400 	.word	0x40004400
 800af60:	40004800 	.word	0x40004800
 800af64:	40004c00 	.word	0x40004c00
 800af68:	40005000 	.word	0x40005000
 800af6c:	2310      	movs	r3, #16
 800af6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a9f      	ldr	r2, [pc, #636]	@ (800b1f4 <UART_SetConfig+0x568>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d17a      	bne.n	800b072 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800af7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800af80:	2b08      	cmp	r3, #8
 800af82:	d824      	bhi.n	800afce <UART_SetConfig+0x342>
 800af84:	a201      	add	r2, pc, #4	@ (adr r2, 800af8c <UART_SetConfig+0x300>)
 800af86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af8a:	bf00      	nop
 800af8c:	0800afb1 	.word	0x0800afb1
 800af90:	0800afcf 	.word	0x0800afcf
 800af94:	0800afb9 	.word	0x0800afb9
 800af98:	0800afcf 	.word	0x0800afcf
 800af9c:	0800afbf 	.word	0x0800afbf
 800afa0:	0800afcf 	.word	0x0800afcf
 800afa4:	0800afcf 	.word	0x0800afcf
 800afa8:	0800afcf 	.word	0x0800afcf
 800afac:	0800afc7 	.word	0x0800afc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afb0:	f7fd ffdc 	bl	8008f6c <HAL_RCC_GetPCLK1Freq>
 800afb4:	61f8      	str	r0, [r7, #28]
        break;
 800afb6:	e010      	b.n	800afda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800afb8:	4b8f      	ldr	r3, [pc, #572]	@ (800b1f8 <UART_SetConfig+0x56c>)
 800afba:	61fb      	str	r3, [r7, #28]
        break;
 800afbc:	e00d      	b.n	800afda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afbe:	f7fd ff3d 	bl	8008e3c <HAL_RCC_GetSysClockFreq>
 800afc2:	61f8      	str	r0, [r7, #28]
        break;
 800afc4:	e009      	b.n	800afda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afca:	61fb      	str	r3, [r7, #28]
        break;
 800afcc:	e005      	b.n	800afda <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800afce:	2300      	movs	r3, #0
 800afd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800afd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f000 80fb 	beq.w	800b1d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	685a      	ldr	r2, [r3, #4]
 800afe6:	4613      	mov	r3, r2
 800afe8:	005b      	lsls	r3, r3, #1
 800afea:	4413      	add	r3, r2
 800afec:	69fa      	ldr	r2, [r7, #28]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d305      	bcc.n	800affe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aff8:	69fa      	ldr	r2, [r7, #28]
 800affa:	429a      	cmp	r2, r3
 800affc:	d903      	bls.n	800b006 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800b004:	e0e8      	b.n	800b1d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b006:	69fb      	ldr	r3, [r7, #28]
 800b008:	2200      	movs	r2, #0
 800b00a:	461c      	mov	r4, r3
 800b00c:	4615      	mov	r5, r2
 800b00e:	f04f 0200 	mov.w	r2, #0
 800b012:	f04f 0300 	mov.w	r3, #0
 800b016:	022b      	lsls	r3, r5, #8
 800b018:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b01c:	0222      	lsls	r2, r4, #8
 800b01e:	68f9      	ldr	r1, [r7, #12]
 800b020:	6849      	ldr	r1, [r1, #4]
 800b022:	0849      	lsrs	r1, r1, #1
 800b024:	2000      	movs	r0, #0
 800b026:	4688      	mov	r8, r1
 800b028:	4681      	mov	r9, r0
 800b02a:	eb12 0a08 	adds.w	sl, r2, r8
 800b02e:	eb43 0b09 	adc.w	fp, r3, r9
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	603b      	str	r3, [r7, #0]
 800b03a:	607a      	str	r2, [r7, #4]
 800b03c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b040:	4650      	mov	r0, sl
 800b042:	4659      	mov	r1, fp
 800b044:	f7f5 fd42 	bl	8000acc <__aeabi_uldivmod>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	4613      	mov	r3, r2
 800b04e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b056:	d308      	bcc.n	800b06a <UART_SetConfig+0x3de>
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b05e:	d204      	bcs.n	800b06a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	69ba      	ldr	r2, [r7, #24]
 800b066:	60da      	str	r2, [r3, #12]
 800b068:	e0b6      	b.n	800b1d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800b070:	e0b2      	b.n	800b1d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	69db      	ldr	r3, [r3, #28]
 800b076:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b07a:	d15e      	bne.n	800b13a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800b07c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b080:	2b08      	cmp	r3, #8
 800b082:	d828      	bhi.n	800b0d6 <UART_SetConfig+0x44a>
 800b084:	a201      	add	r2, pc, #4	@ (adr r2, 800b08c <UART_SetConfig+0x400>)
 800b086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b08a:	bf00      	nop
 800b08c:	0800b0b1 	.word	0x0800b0b1
 800b090:	0800b0b9 	.word	0x0800b0b9
 800b094:	0800b0c1 	.word	0x0800b0c1
 800b098:	0800b0d7 	.word	0x0800b0d7
 800b09c:	0800b0c7 	.word	0x0800b0c7
 800b0a0:	0800b0d7 	.word	0x0800b0d7
 800b0a4:	0800b0d7 	.word	0x0800b0d7
 800b0a8:	0800b0d7 	.word	0x0800b0d7
 800b0ac:	0800b0cf 	.word	0x0800b0cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0b0:	f7fd ff5c 	bl	8008f6c <HAL_RCC_GetPCLK1Freq>
 800b0b4:	61f8      	str	r0, [r7, #28]
        break;
 800b0b6:	e014      	b.n	800b0e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0b8:	f7fd ff6e 	bl	8008f98 <HAL_RCC_GetPCLK2Freq>
 800b0bc:	61f8      	str	r0, [r7, #28]
        break;
 800b0be:	e010      	b.n	800b0e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b0c0:	4b4d      	ldr	r3, [pc, #308]	@ (800b1f8 <UART_SetConfig+0x56c>)
 800b0c2:	61fb      	str	r3, [r7, #28]
        break;
 800b0c4:	e00d      	b.n	800b0e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0c6:	f7fd feb9 	bl	8008e3c <HAL_RCC_GetSysClockFreq>
 800b0ca:	61f8      	str	r0, [r7, #28]
        break;
 800b0cc:	e009      	b.n	800b0e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0d2:	61fb      	str	r3, [r7, #28]
        break;
 800b0d4:	e005      	b.n	800b0e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800b0e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d077      	beq.n	800b1d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	005a      	lsls	r2, r3, #1
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	085b      	lsrs	r3, r3, #1
 800b0f2:	441a      	add	r2, r3
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	2b0f      	cmp	r3, #15
 800b102:	d916      	bls.n	800b132 <UART_SetConfig+0x4a6>
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b10a:	d212      	bcs.n	800b132 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	b29b      	uxth	r3, r3
 800b110:	f023 030f 	bic.w	r3, r3, #15
 800b114:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	085b      	lsrs	r3, r3, #1
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	f003 0307 	and.w	r3, r3, #7
 800b120:	b29a      	uxth	r2, r3
 800b122:	8afb      	ldrh	r3, [r7, #22]
 800b124:	4313      	orrs	r3, r2
 800b126:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	8afa      	ldrh	r2, [r7, #22]
 800b12e:	60da      	str	r2, [r3, #12]
 800b130:	e052      	b.n	800b1d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800b138:	e04e      	b.n	800b1d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b13a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b13e:	2b08      	cmp	r3, #8
 800b140:	d827      	bhi.n	800b192 <UART_SetConfig+0x506>
 800b142:	a201      	add	r2, pc, #4	@ (adr r2, 800b148 <UART_SetConfig+0x4bc>)
 800b144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b148:	0800b16d 	.word	0x0800b16d
 800b14c:	0800b175 	.word	0x0800b175
 800b150:	0800b17d 	.word	0x0800b17d
 800b154:	0800b193 	.word	0x0800b193
 800b158:	0800b183 	.word	0x0800b183
 800b15c:	0800b193 	.word	0x0800b193
 800b160:	0800b193 	.word	0x0800b193
 800b164:	0800b193 	.word	0x0800b193
 800b168:	0800b18b 	.word	0x0800b18b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b16c:	f7fd fefe 	bl	8008f6c <HAL_RCC_GetPCLK1Freq>
 800b170:	61f8      	str	r0, [r7, #28]
        break;
 800b172:	e014      	b.n	800b19e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b174:	f7fd ff10 	bl	8008f98 <HAL_RCC_GetPCLK2Freq>
 800b178:	61f8      	str	r0, [r7, #28]
        break;
 800b17a:	e010      	b.n	800b19e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b17c:	4b1e      	ldr	r3, [pc, #120]	@ (800b1f8 <UART_SetConfig+0x56c>)
 800b17e:	61fb      	str	r3, [r7, #28]
        break;
 800b180:	e00d      	b.n	800b19e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b182:	f7fd fe5b 	bl	8008e3c <HAL_RCC_GetSysClockFreq>
 800b186:	61f8      	str	r0, [r7, #28]
        break;
 800b188:	e009      	b.n	800b19e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b18a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b18e:	61fb      	str	r3, [r7, #28]
        break;
 800b190:	e005      	b.n	800b19e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800b192:	2300      	movs	r3, #0
 800b194:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800b19c:	bf00      	nop
    }

    if (pclk != 0U)
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d019      	beq.n	800b1d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	085a      	lsrs	r2, r3, #1
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	441a      	add	r2, r3
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	2b0f      	cmp	r3, #15
 800b1bc:	d909      	bls.n	800b1d2 <UART_SetConfig+0x546>
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1c4:	d205      	bcs.n	800b1d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	60da      	str	r2, [r3, #12]
 800b1d0:	e002      	b.n	800b1d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b1e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3728      	adds	r7, #40	@ 0x28
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1f2:	bf00      	nop
 800b1f4:	40008000 	.word	0x40008000
 800b1f8:	00f42400 	.word	0x00f42400

0800b1fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b208:	f003 0308 	and.w	r3, r3, #8
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d00a      	beq.n	800b226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	430a      	orrs	r2, r1
 800b224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b22a:	f003 0301 	and.w	r3, r3, #1
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00a      	beq.n	800b248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	430a      	orrs	r2, r1
 800b246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b24c:	f003 0302 	and.w	r3, r3, #2
 800b250:	2b00      	cmp	r3, #0
 800b252:	d00a      	beq.n	800b26a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	430a      	orrs	r2, r1
 800b268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b26e:	f003 0304 	and.w	r3, r3, #4
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00a      	beq.n	800b28c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	430a      	orrs	r2, r1
 800b28a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b290:	f003 0310 	and.w	r3, r3, #16
 800b294:	2b00      	cmp	r3, #0
 800b296:	d00a      	beq.n	800b2ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	430a      	orrs	r2, r1
 800b2ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2b2:	f003 0320 	and.w	r3, r3, #32
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00a      	beq.n	800b2d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	430a      	orrs	r2, r1
 800b2ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d01a      	beq.n	800b312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	430a      	orrs	r2, r1
 800b2f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2fa:	d10a      	bne.n	800b312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	430a      	orrs	r2, r1
 800b310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00a      	beq.n	800b334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	430a      	orrs	r2, r1
 800b332:	605a      	str	r2, [r3, #4]
  }
}
 800b334:	bf00      	nop
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b098      	sub	sp, #96	@ 0x60
 800b344:	af02      	add	r7, sp, #8
 800b346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b350:	f7f9 f9fe 	bl	8004750 <HAL_GetTick>
 800b354:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f003 0308 	and.w	r3, r3, #8
 800b360:	2b08      	cmp	r3, #8
 800b362:	d12e      	bne.n	800b3c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b364:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b36c:	2200      	movs	r2, #0
 800b36e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 f88c 	bl	800b490 <UART_WaitOnFlagUntilTimeout>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d021      	beq.n	800b3c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b386:	e853 3f00 	ldrex	r3, [r3]
 800b38a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b38c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b38e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b392:	653b      	str	r3, [r7, #80]	@ 0x50
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	461a      	mov	r2, r3
 800b39a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b39c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b39e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b3a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b3a4:	e841 2300 	strex	r3, r2, [r1]
 800b3a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b3aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1e6      	bne.n	800b37e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2220      	movs	r2, #32
 800b3b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	e062      	b.n	800b488 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f003 0304 	and.w	r3, r3, #4
 800b3cc:	2b04      	cmp	r3, #4
 800b3ce:	d149      	bne.n	800b464 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b3d4:	9300      	str	r3, [sp, #0]
 800b3d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 f856 	bl	800b490 <UART_WaitOnFlagUntilTimeout>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d03c      	beq.n	800b464 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f2:	e853 3f00 	ldrex	r3, [r3]
 800b3f6:	623b      	str	r3, [r7, #32]
   return(result);
 800b3f8:	6a3b      	ldr	r3, [r7, #32]
 800b3fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	461a      	mov	r2, r3
 800b406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b408:	633b      	str	r3, [r7, #48]	@ 0x30
 800b40a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b40c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b40e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b410:	e841 2300 	strex	r3, r2, [r1]
 800b414:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1e6      	bne.n	800b3ea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	3308      	adds	r3, #8
 800b422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	e853 3f00 	ldrex	r3, [r3]
 800b42a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f023 0301 	bic.w	r3, r3, #1
 800b432:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	3308      	adds	r3, #8
 800b43a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b43c:	61fa      	str	r2, [r7, #28]
 800b43e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b440:	69b9      	ldr	r1, [r7, #24]
 800b442:	69fa      	ldr	r2, [r7, #28]
 800b444:	e841 2300 	strex	r3, r2, [r1]
 800b448:	617b      	str	r3, [r7, #20]
   return(result);
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d1e5      	bne.n	800b41c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2220      	movs	r2, #32
 800b454:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b460:	2303      	movs	r3, #3
 800b462:	e011      	b.n	800b488 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2220      	movs	r2, #32
 800b468:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2220      	movs	r2, #32
 800b46e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3758      	adds	r7, #88	@ 0x58
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	603b      	str	r3, [r7, #0]
 800b49c:	4613      	mov	r3, r2
 800b49e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4a0:	e04f      	b.n	800b542 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4a8:	d04b      	beq.n	800b542 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4aa:	f7f9 f951 	bl	8004750 <HAL_GetTick>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	69ba      	ldr	r2, [r7, #24]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d302      	bcc.n	800b4c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d101      	bne.n	800b4c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	e04e      	b.n	800b562 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f003 0304 	and.w	r3, r3, #4
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d037      	beq.n	800b542 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	2b80      	cmp	r3, #128	@ 0x80
 800b4d6:	d034      	beq.n	800b542 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	2b40      	cmp	r3, #64	@ 0x40
 800b4dc:	d031      	beq.n	800b542 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	69db      	ldr	r3, [r3, #28]
 800b4e4:	f003 0308 	and.w	r3, r3, #8
 800b4e8:	2b08      	cmp	r3, #8
 800b4ea:	d110      	bne.n	800b50e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2208      	movs	r2, #8
 800b4f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4f4:	68f8      	ldr	r0, [r7, #12]
 800b4f6:	f000 f8ff 	bl	800b6f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2208      	movs	r2, #8
 800b4fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2200      	movs	r2, #0
 800b506:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b50a:	2301      	movs	r3, #1
 800b50c:	e029      	b.n	800b562 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	69db      	ldr	r3, [r3, #28]
 800b514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b51c:	d111      	bne.n	800b542 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f000 f8e5 	bl	800b6f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2220      	movs	r2, #32
 800b532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2200      	movs	r2, #0
 800b53a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b53e:	2303      	movs	r3, #3
 800b540:	e00f      	b.n	800b562 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	69da      	ldr	r2, [r3, #28]
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	4013      	ands	r3, r2
 800b54c:	68ba      	ldr	r2, [r7, #8]
 800b54e:	429a      	cmp	r2, r3
 800b550:	bf0c      	ite	eq
 800b552:	2301      	moveq	r3, #1
 800b554:	2300      	movne	r3, #0
 800b556:	b2db      	uxtb	r3, r3
 800b558:	461a      	mov	r2, r3
 800b55a:	79fb      	ldrb	r3, [r7, #7]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d0a0      	beq.n	800b4a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
	...

0800b56c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b097      	sub	sp, #92	@ 0x5c
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	4613      	mov	r3, r2
 800b578:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	68ba      	ldr	r2, [r7, #8]
 800b57e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	88fa      	ldrh	r2, [r7, #6]
 800b584:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	88fa      	ldrh	r2, [r7, #6]
 800b58c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2200      	movs	r2, #0
 800b594:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b59e:	d10e      	bne.n	800b5be <UART_Start_Receive_IT+0x52>
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d105      	bne.n	800b5b4 <UART_Start_Receive_IT+0x48>
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b5ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b5b2:	e02d      	b.n	800b610 <UART_Start_Receive_IT+0xa4>
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	22ff      	movs	r2, #255	@ 0xff
 800b5b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b5bc:	e028      	b.n	800b610 <UART_Start_Receive_IT+0xa4>
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d10d      	bne.n	800b5e2 <UART_Start_Receive_IT+0x76>
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d104      	bne.n	800b5d8 <UART_Start_Receive_IT+0x6c>
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	22ff      	movs	r2, #255	@ 0xff
 800b5d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b5d6:	e01b      	b.n	800b610 <UART_Start_Receive_IT+0xa4>
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	227f      	movs	r2, #127	@ 0x7f
 800b5dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b5e0:	e016      	b.n	800b610 <UART_Start_Receive_IT+0xa4>
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5ea:	d10d      	bne.n	800b608 <UART_Start_Receive_IT+0x9c>
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	691b      	ldr	r3, [r3, #16]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d104      	bne.n	800b5fe <UART_Start_Receive_IT+0x92>
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	227f      	movs	r2, #127	@ 0x7f
 800b5f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b5fc:	e008      	b.n	800b610 <UART_Start_Receive_IT+0xa4>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	223f      	movs	r2, #63	@ 0x3f
 800b602:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b606:	e003      	b.n	800b610 <UART_Start_Receive_IT+0xa4>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2200      	movs	r2, #0
 800b614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2222      	movs	r2, #34	@ 0x22
 800b61c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	3308      	adds	r3, #8
 800b626:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b62a:	e853 3f00 	ldrex	r3, [r3]
 800b62e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b632:	f043 0301 	orr.w	r3, r3, #1
 800b636:	657b      	str	r3, [r7, #84]	@ 0x54
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	3308      	adds	r3, #8
 800b63e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b640:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b642:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b644:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b646:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b648:	e841 2300 	strex	r3, r2, [r1]
 800b64c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b64e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b650:	2b00      	cmp	r3, #0
 800b652:	d1e5      	bne.n	800b620 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b65c:	d107      	bne.n	800b66e <UART_Start_Receive_IT+0x102>
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	691b      	ldr	r3, [r3, #16]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d103      	bne.n	800b66e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	4a21      	ldr	r2, [pc, #132]	@ (800b6f0 <UART_Start_Receive_IT+0x184>)
 800b66a:	669a      	str	r2, [r3, #104]	@ 0x68
 800b66c:	e002      	b.n	800b674 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	4a20      	ldr	r2, [pc, #128]	@ (800b6f4 <UART_Start_Receive_IT+0x188>)
 800b672:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d019      	beq.n	800b6b0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b684:	e853 3f00 	ldrex	r3, [r3]
 800b688:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b690:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	461a      	mov	r2, r3
 800b698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b69a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b69c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b6a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b6a2:	e841 2300 	strex	r3, r2, [r1]
 800b6a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1e6      	bne.n	800b67c <UART_Start_Receive_IT+0x110>
 800b6ae:	e018      	b.n	800b6e2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	e853 3f00 	ldrex	r3, [r3]
 800b6bc:	613b      	str	r3, [r7, #16]
   return(result);
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	f043 0320 	orr.w	r3, r3, #32
 800b6c4:	653b      	str	r3, [r7, #80]	@ 0x50
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6ce:	623b      	str	r3, [r7, #32]
 800b6d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d2:	69f9      	ldr	r1, [r7, #28]
 800b6d4:	6a3a      	ldr	r2, [r7, #32]
 800b6d6:	e841 2300 	strex	r3, r2, [r1]
 800b6da:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1e6      	bne.n	800b6b0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	375c      	adds	r7, #92	@ 0x5c
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr
 800b6f0:	0800b9fd 	.word	0x0800b9fd
 800b6f4:	0800b841 	.word	0x0800b841

0800b6f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b095      	sub	sp, #84	@ 0x54
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b708:	e853 3f00 	ldrex	r3, [r3]
 800b70c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b710:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b714:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	461a      	mov	r2, r3
 800b71c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b71e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b720:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b722:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b724:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b726:	e841 2300 	strex	r3, r2, [r1]
 800b72a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d1e6      	bne.n	800b700 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	3308      	adds	r3, #8
 800b738:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73a:	6a3b      	ldr	r3, [r7, #32]
 800b73c:	e853 3f00 	ldrex	r3, [r3]
 800b740:	61fb      	str	r3, [r7, #28]
   return(result);
 800b742:	69fb      	ldr	r3, [r7, #28]
 800b744:	f023 0301 	bic.w	r3, r3, #1
 800b748:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3308      	adds	r3, #8
 800b750:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b752:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b754:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b756:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b758:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b75a:	e841 2300 	strex	r3, r2, [r1]
 800b75e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1e5      	bne.n	800b732 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d118      	bne.n	800b7a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	e853 3f00 	ldrex	r3, [r3]
 800b77a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	f023 0310 	bic.w	r3, r3, #16
 800b782:	647b      	str	r3, [r7, #68]	@ 0x44
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	461a      	mov	r2, r3
 800b78a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b78c:	61bb      	str	r3, [r7, #24]
 800b78e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b790:	6979      	ldr	r1, [r7, #20]
 800b792:	69ba      	ldr	r2, [r7, #24]
 800b794:	e841 2300 	strex	r3, r2, [r1]
 800b798:	613b      	str	r3, [r7, #16]
   return(result);
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d1e6      	bne.n	800b76e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2220      	movs	r2, #32
 800b7a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b7b4:	bf00      	nop
 800b7b6:	3754      	adds	r7, #84	@ 0x54
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f7ff fa3e 	bl	800ac60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7e4:	bf00      	nop
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b088      	sub	sp, #32
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	e853 3f00 	ldrex	r3, [r3]
 800b800:	60bb      	str	r3, [r7, #8]
   return(result);
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b808:	61fb      	str	r3, [r7, #28]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	461a      	mov	r2, r3
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	61bb      	str	r3, [r7, #24]
 800b814:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b816:	6979      	ldr	r1, [r7, #20]
 800b818:	69ba      	ldr	r2, [r7, #24]
 800b81a:	e841 2300 	strex	r3, r2, [r1]
 800b81e:	613b      	str	r3, [r7, #16]
   return(result);
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1e6      	bne.n	800b7f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2220      	movs	r2, #32
 800b82a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f7ff fa0a 	bl	800ac4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b838:	bf00      	nop
 800b83a:	3720      	adds	r7, #32
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b09c      	sub	sp, #112	@ 0x70
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b84e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b858:	2b22      	cmp	r3, #34	@ 0x22
 800b85a:	f040 80be 	bne.w	800b9da <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b864:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b868:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b86c:	b2d9      	uxtb	r1, r3
 800b86e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b872:	b2da      	uxtb	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b878:	400a      	ands	r2, r1
 800b87a:	b2d2      	uxtb	r2, r2
 800b87c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b882:	1c5a      	adds	r2, r3, #1
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b88e:	b29b      	uxth	r3, r3
 800b890:	3b01      	subs	r3, #1
 800b892:	b29a      	uxth	r2, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	f040 80a3 	bne.w	800b9ee <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8b0:	e853 3f00 	ldrex	r3, [r3]
 800b8b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b8b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b8c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b8cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b8ce:	e841 2300 	strex	r3, r2, [r1]
 800b8d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b8d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1e6      	bne.n	800b8a8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	3308      	adds	r3, #8
 800b8e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e4:	e853 3f00 	ldrex	r3, [r3]
 800b8e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b8ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ec:	f023 0301 	bic.w	r3, r3, #1
 800b8f0:	667b      	str	r3, [r7, #100]	@ 0x64
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	3308      	adds	r3, #8
 800b8f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b8fa:	647a      	str	r2, [r7, #68]	@ 0x44
 800b8fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b900:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b902:	e841 2300 	strex	r3, r2, [r1]
 800b906:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d1e5      	bne.n	800b8da <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2220      	movs	r2, #32
 800b912:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a34      	ldr	r2, [pc, #208]	@ (800b9f8 <UART_RxISR_8BIT+0x1b8>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d01f      	beq.n	800b96c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b936:	2b00      	cmp	r3, #0
 800b938:	d018      	beq.n	800b96c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b942:	e853 3f00 	ldrex	r3, [r3]
 800b946:	623b      	str	r3, [r7, #32]
   return(result);
 800b948:	6a3b      	ldr	r3, [r7, #32]
 800b94a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b94e:	663b      	str	r3, [r7, #96]	@ 0x60
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	461a      	mov	r2, r3
 800b956:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b958:	633b      	str	r3, [r7, #48]	@ 0x30
 800b95a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b95e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b960:	e841 2300 	strex	r3, r2, [r1]
 800b964:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1e6      	bne.n	800b93a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b970:	2b01      	cmp	r3, #1
 800b972:	d12e      	bne.n	800b9d2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	e853 3f00 	ldrex	r3, [r3]
 800b986:	60fb      	str	r3, [r7, #12]
   return(result);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f023 0310 	bic.w	r3, r3, #16
 800b98e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	461a      	mov	r2, r3
 800b996:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b998:	61fb      	str	r3, [r7, #28]
 800b99a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b99c:	69b9      	ldr	r1, [r7, #24]
 800b99e:	69fa      	ldr	r2, [r7, #28]
 800b9a0:	e841 2300 	strex	r3, r2, [r1]
 800b9a4:	617b      	str	r3, [r7, #20]
   return(result);
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1e6      	bne.n	800b97a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	69db      	ldr	r3, [r3, #28]
 800b9b2:	f003 0310 	and.w	r3, r3, #16
 800b9b6:	2b10      	cmp	r3, #16
 800b9b8:	d103      	bne.n	800b9c2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	2210      	movs	r2, #16
 800b9c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f7ff f952 	bl	800ac74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b9d0:	e00d      	b.n	800b9ee <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f7f6 fbce 	bl	8002174 <HAL_UART_RxCpltCallback>
}
 800b9d8:	e009      	b.n	800b9ee <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	8b1b      	ldrh	r3, [r3, #24]
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f042 0208 	orr.w	r2, r2, #8
 800b9ea:	b292      	uxth	r2, r2
 800b9ec:	831a      	strh	r2, [r3, #24]
}
 800b9ee:	bf00      	nop
 800b9f0:	3770      	adds	r7, #112	@ 0x70
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	40008000 	.word	0x40008000

0800b9fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b09c      	sub	sp, #112	@ 0x70
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ba0a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba14:	2b22      	cmp	r3, #34	@ 0x22
 800ba16:	f040 80be 	bne.w	800bb96 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ba20:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba28:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ba2a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ba2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ba32:	4013      	ands	r3, r2
 800ba34:	b29a      	uxth	r2, r3
 800ba36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba38:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba3e:	1c9a      	adds	r2, r3, #2
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	3b01      	subs	r3, #1
 800ba4e:	b29a      	uxth	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	f040 80a3 	bne.w	800bbaa <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba6c:	e853 3f00 	ldrex	r3, [r3]
 800ba70:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ba72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba78:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba82:	657b      	str	r3, [r7, #84]	@ 0x54
 800ba84:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba8a:	e841 2300 	strex	r3, r2, [r1]
 800ba8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ba90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1e6      	bne.n	800ba64 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	3308      	adds	r3, #8
 800ba9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baa0:	e853 3f00 	ldrex	r3, [r3]
 800baa4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800baa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baa8:	f023 0301 	bic.w	r3, r3, #1
 800baac:	663b      	str	r3, [r7, #96]	@ 0x60
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	3308      	adds	r3, #8
 800bab4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bab6:	643a      	str	r2, [r7, #64]	@ 0x40
 800bab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800babc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800babe:	e841 2300 	strex	r3, r2, [r1]
 800bac2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1e5      	bne.n	800ba96 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2220      	movs	r2, #32
 800bace:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a34      	ldr	r2, [pc, #208]	@ (800bbb4 <UART_RxISR_16BIT+0x1b8>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d01f      	beq.n	800bb28 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d018      	beq.n	800bb28 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bafc:	6a3b      	ldr	r3, [r7, #32]
 800bafe:	e853 3f00 	ldrex	r3, [r3]
 800bb02:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb04:	69fb      	ldr	r3, [r7, #28]
 800bb06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bb0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	461a      	mov	r2, r3
 800bb12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb16:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb1c:	e841 2300 	strex	r3, r2, [r1]
 800bb20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d1e6      	bne.n	800baf6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d12e      	bne.n	800bb8e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	e853 3f00 	ldrex	r3, [r3]
 800bb42:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	f023 0310 	bic.w	r3, r3, #16
 800bb4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	461a      	mov	r2, r3
 800bb52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb54:	61bb      	str	r3, [r7, #24]
 800bb56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb58:	6979      	ldr	r1, [r7, #20]
 800bb5a:	69ba      	ldr	r2, [r7, #24]
 800bb5c:	e841 2300 	strex	r3, r2, [r1]
 800bb60:	613b      	str	r3, [r7, #16]
   return(result);
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1e6      	bne.n	800bb36 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	69db      	ldr	r3, [r3, #28]
 800bb6e:	f003 0310 	and.w	r3, r3, #16
 800bb72:	2b10      	cmp	r3, #16
 800bb74:	d103      	bne.n	800bb7e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2210      	movs	r2, #16
 800bb7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bb84:	4619      	mov	r1, r3
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f7ff f874 	bl	800ac74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bb8c:	e00d      	b.n	800bbaa <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f7f6 faf0 	bl	8002174 <HAL_UART_RxCpltCallback>
}
 800bb94:	e009      	b.n	800bbaa <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	8b1b      	ldrh	r3, [r3, #24]
 800bb9c:	b29a      	uxth	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f042 0208 	orr.w	r2, r2, #8
 800bba6:	b292      	uxth	r2, r2
 800bba8:	831a      	strh	r2, [r3, #24]
}
 800bbaa:	bf00      	nop
 800bbac:	3770      	adds	r7, #112	@ 0x70
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	40008000 	.word	0x40008000

0800bbb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <__NVIC_SetPriority>:
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	6039      	str	r1, [r7, #0]
 800bbd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bbd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	db0a      	blt.n	800bbf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	b2da      	uxtb	r2, r3
 800bbe4:	490c      	ldr	r1, [pc, #48]	@ (800bc18 <__NVIC_SetPriority+0x4c>)
 800bbe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbea:	0112      	lsls	r2, r2, #4
 800bbec:	b2d2      	uxtb	r2, r2
 800bbee:	440b      	add	r3, r1
 800bbf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bbf4:	e00a      	b.n	800bc0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	b2da      	uxtb	r2, r3
 800bbfa:	4908      	ldr	r1, [pc, #32]	@ (800bc1c <__NVIC_SetPriority+0x50>)
 800bbfc:	79fb      	ldrb	r3, [r7, #7]
 800bbfe:	f003 030f 	and.w	r3, r3, #15
 800bc02:	3b04      	subs	r3, #4
 800bc04:	0112      	lsls	r2, r2, #4
 800bc06:	b2d2      	uxtb	r2, r2
 800bc08:	440b      	add	r3, r1
 800bc0a:	761a      	strb	r2, [r3, #24]
}
 800bc0c:	bf00      	nop
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	e000e100 	.word	0xe000e100
 800bc1c:	e000ed00 	.word	0xe000ed00

0800bc20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bc20:	b580      	push	{r7, lr}
 800bc22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bc24:	4b05      	ldr	r3, [pc, #20]	@ (800bc3c <SysTick_Handler+0x1c>)
 800bc26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bc28:	f001 fec6 	bl	800d9b8 <xTaskGetSchedulerState>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d001      	beq.n	800bc36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bc32:	f002 fcc1 	bl	800e5b8 <xPortSysTickHandler>
  }
}
 800bc36:	bf00      	nop
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	e000e010 	.word	0xe000e010

0800bc40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bc40:	b580      	push	{r7, lr}
 800bc42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bc44:	2100      	movs	r1, #0
 800bc46:	f06f 0004 	mvn.w	r0, #4
 800bc4a:	f7ff ffbf 	bl	800bbcc <__NVIC_SetPriority>
#endif
}
 800bc4e:	bf00      	nop
 800bc50:	bd80      	pop	{r7, pc}
	...

0800bc54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc5a:	f3ef 8305 	mrs	r3, IPSR
 800bc5e:	603b      	str	r3, [r7, #0]
  return(result);
 800bc60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d003      	beq.n	800bc6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bc66:	f06f 0305 	mvn.w	r3, #5
 800bc6a:	607b      	str	r3, [r7, #4]
 800bc6c:	e00c      	b.n	800bc88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bc6e:	4b0a      	ldr	r3, [pc, #40]	@ (800bc98 <osKernelInitialize+0x44>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d105      	bne.n	800bc82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bc76:	4b08      	ldr	r3, [pc, #32]	@ (800bc98 <osKernelInitialize+0x44>)
 800bc78:	2201      	movs	r2, #1
 800bc7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	607b      	str	r3, [r7, #4]
 800bc80:	e002      	b.n	800bc88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bc82:	f04f 33ff 	mov.w	r3, #4294967295
 800bc86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc88:	687b      	ldr	r3, [r7, #4]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	370c      	adds	r7, #12
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop
 800bc98:	20000490 	.word	0x20000490

0800bc9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bca2:	f3ef 8305 	mrs	r3, IPSR
 800bca6:	603b      	str	r3, [r7, #0]
  return(result);
 800bca8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d003      	beq.n	800bcb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800bcae:	f06f 0305 	mvn.w	r3, #5
 800bcb2:	607b      	str	r3, [r7, #4]
 800bcb4:	e010      	b.n	800bcd8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bcb6:	4b0b      	ldr	r3, [pc, #44]	@ (800bce4 <osKernelStart+0x48>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d109      	bne.n	800bcd2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bcbe:	f7ff ffbf 	bl	800bc40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bcc2:	4b08      	ldr	r3, [pc, #32]	@ (800bce4 <osKernelStart+0x48>)
 800bcc4:	2202      	movs	r2, #2
 800bcc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bcc8:	f001 fa12 	bl	800d0f0 <vTaskStartScheduler>
      stat = osOK;
 800bccc:	2300      	movs	r3, #0
 800bcce:	607b      	str	r3, [r7, #4]
 800bcd0:	e002      	b.n	800bcd8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bcd2:	f04f 33ff 	mov.w	r3, #4294967295
 800bcd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bcd8:	687b      	ldr	r3, [r7, #4]
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	20000490 	.word	0x20000490

0800bce8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b08e      	sub	sp, #56	@ 0x38
 800bcec:	af04      	add	r7, sp, #16
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcf8:	f3ef 8305 	mrs	r3, IPSR
 800bcfc:	617b      	str	r3, [r7, #20]
  return(result);
 800bcfe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d17e      	bne.n	800be02 <osThreadNew+0x11a>
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d07b      	beq.n	800be02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bd0a:	2380      	movs	r3, #128	@ 0x80
 800bd0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bd0e:	2318      	movs	r3, #24
 800bd10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bd12:	2300      	movs	r3, #0
 800bd14:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bd16:	f04f 33ff 	mov.w	r3, #4294967295
 800bd1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d045      	beq.n	800bdae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d002      	beq.n	800bd30 <osThreadNew+0x48>
        name = attr->name;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	699b      	ldr	r3, [r3, #24]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d002      	beq.n	800bd3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	699b      	ldr	r3, [r3, #24]
 800bd3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d008      	beq.n	800bd56 <osThreadNew+0x6e>
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	2b38      	cmp	r3, #56	@ 0x38
 800bd48:	d805      	bhi.n	800bd56 <osThreadNew+0x6e>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	f003 0301 	and.w	r3, r3, #1
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d001      	beq.n	800bd5a <osThreadNew+0x72>
        return (NULL);
 800bd56:	2300      	movs	r3, #0
 800bd58:	e054      	b.n	800be04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	695b      	ldr	r3, [r3, #20]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d003      	beq.n	800bd6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	695b      	ldr	r3, [r3, #20]
 800bd66:	089b      	lsrs	r3, r3, #2
 800bd68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00e      	beq.n	800bd90 <osThreadNew+0xa8>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	2ba7      	cmp	r3, #167	@ 0xa7
 800bd78:	d90a      	bls.n	800bd90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d006      	beq.n	800bd90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	695b      	ldr	r3, [r3, #20]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d002      	beq.n	800bd90 <osThreadNew+0xa8>
        mem = 1;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	61bb      	str	r3, [r7, #24]
 800bd8e:	e010      	b.n	800bdb2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10c      	bne.n	800bdb2 <osThreadNew+0xca>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d108      	bne.n	800bdb2 <osThreadNew+0xca>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	691b      	ldr	r3, [r3, #16]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d104      	bne.n	800bdb2 <osThreadNew+0xca>
          mem = 0;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	61bb      	str	r3, [r7, #24]
 800bdac:	e001      	b.n	800bdb2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d110      	bne.n	800bdda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bdc0:	9202      	str	r2, [sp, #8]
 800bdc2:	9301      	str	r3, [sp, #4]
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	9300      	str	r3, [sp, #0]
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	6a3a      	ldr	r2, [r7, #32]
 800bdcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f000 ff9a 	bl	800cd08 <xTaskCreateStatic>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	613b      	str	r3, [r7, #16]
 800bdd8:	e013      	b.n	800be02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d110      	bne.n	800be02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bde0:	6a3b      	ldr	r3, [r7, #32]
 800bde2:	b29a      	uxth	r2, r3
 800bde4:	f107 0310 	add.w	r3, r7, #16
 800bde8:	9301      	str	r3, [sp, #4]
 800bdea:	69fb      	ldr	r3, [r7, #28]
 800bdec:	9300      	str	r3, [sp, #0]
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	f000 ffe8 	bl	800cdc8 <xTaskCreate>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d001      	beq.n	800be02 <osThreadNew+0x11a>
            hTask = NULL;
 800bdfe:	2300      	movs	r3, #0
 800be00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800be02:	693b      	ldr	r3, [r7, #16]
}
 800be04:	4618      	mov	r0, r3
 800be06:	3728      	adds	r7, #40	@ 0x28
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be14:	f3ef 8305 	mrs	r3, IPSR
 800be18:	60bb      	str	r3, [r7, #8]
  return(result);
 800be1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d003      	beq.n	800be28 <osDelay+0x1c>
    stat = osErrorISR;
 800be20:	f06f 0305 	mvn.w	r3, #5
 800be24:	60fb      	str	r3, [r7, #12]
 800be26:	e007      	b.n	800be38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800be28:	2300      	movs	r3, #0
 800be2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d002      	beq.n	800be38 <osDelay+0x2c>
      vTaskDelay(ticks);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f001 f926 	bl	800d084 <vTaskDelay>
    }
  }

  return (stat);
 800be38:	68fb      	ldr	r3, [r7, #12]
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800be42:	b580      	push	{r7, lr}
 800be44:	b08a      	sub	sp, #40	@ 0x28
 800be46:	af02      	add	r7, sp, #8
 800be48:	60f8      	str	r0, [r7, #12]
 800be4a:	60b9      	str	r1, [r7, #8]
 800be4c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800be4e:	2300      	movs	r3, #0
 800be50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be52:	f3ef 8305 	mrs	r3, IPSR
 800be56:	613b      	str	r3, [r7, #16]
  return(result);
 800be58:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d175      	bne.n	800bf4a <osSemaphoreNew+0x108>
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d072      	beq.n	800bf4a <osSemaphoreNew+0x108>
 800be64:	68ba      	ldr	r2, [r7, #8]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d86e      	bhi.n	800bf4a <osSemaphoreNew+0x108>
    mem = -1;
 800be6c:	f04f 33ff 	mov.w	r3, #4294967295
 800be70:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d015      	beq.n	800bea4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d006      	beq.n	800be8e <osSemaphoreNew+0x4c>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	2b4f      	cmp	r3, #79	@ 0x4f
 800be86:	d902      	bls.n	800be8e <osSemaphoreNew+0x4c>
        mem = 1;
 800be88:	2301      	movs	r3, #1
 800be8a:	61bb      	str	r3, [r7, #24]
 800be8c:	e00c      	b.n	800bea8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d108      	bne.n	800bea8 <osSemaphoreNew+0x66>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d104      	bne.n	800bea8 <osSemaphoreNew+0x66>
          mem = 0;
 800be9e:	2300      	movs	r3, #0
 800bea0:	61bb      	str	r3, [r7, #24]
 800bea2:	e001      	b.n	800bea8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800bea4:	2300      	movs	r3, #0
 800bea6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beae:	d04c      	beq.n	800bf4a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d128      	bne.n	800bf08 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d10a      	bne.n	800bed2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	2203      	movs	r2, #3
 800bec2:	9200      	str	r2, [sp, #0]
 800bec4:	2200      	movs	r2, #0
 800bec6:	2100      	movs	r1, #0
 800bec8:	2001      	movs	r0, #1
 800beca:	f000 f995 	bl	800c1f8 <xQueueGenericCreateStatic>
 800bece:	61f8      	str	r0, [r7, #28]
 800bed0:	e005      	b.n	800bede <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800bed2:	2203      	movs	r2, #3
 800bed4:	2100      	movs	r1, #0
 800bed6:	2001      	movs	r0, #1
 800bed8:	f000 fa0b 	bl	800c2f2 <xQueueGenericCreate>
 800bedc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bede:	69fb      	ldr	r3, [r7, #28]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d022      	beq.n	800bf2a <osSemaphoreNew+0xe8>
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d01f      	beq.n	800bf2a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800beea:	2300      	movs	r3, #0
 800beec:	2200      	movs	r2, #0
 800beee:	2100      	movs	r1, #0
 800bef0:	69f8      	ldr	r0, [r7, #28]
 800bef2:	f000 facb 	bl	800c48c <xQueueGenericSend>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d016      	beq.n	800bf2a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800befc:	69f8      	ldr	r0, [r7, #28]
 800befe:	f000 fd47 	bl	800c990 <vQueueDelete>
            hSemaphore = NULL;
 800bf02:	2300      	movs	r3, #0
 800bf04:	61fb      	str	r3, [r7, #28]
 800bf06:	e010      	b.n	800bf2a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d108      	bne.n	800bf20 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	461a      	mov	r2, r3
 800bf14:	68b9      	ldr	r1, [r7, #8]
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	f000 fa49 	bl	800c3ae <xQueueCreateCountingSemaphoreStatic>
 800bf1c:	61f8      	str	r0, [r7, #28]
 800bf1e:	e004      	b.n	800bf2a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bf20:	68b9      	ldr	r1, [r7, #8]
 800bf22:	68f8      	ldr	r0, [r7, #12]
 800bf24:	f000 fa7c 	bl	800c420 <xQueueCreateCountingSemaphore>
 800bf28:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d00c      	beq.n	800bf4a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d003      	beq.n	800bf3e <osSemaphoreNew+0xfc>
          name = attr->name;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	617b      	str	r3, [r7, #20]
 800bf3c:	e001      	b.n	800bf42 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800bf42:	6979      	ldr	r1, [r7, #20]
 800bf44:	69f8      	ldr	r0, [r7, #28]
 800bf46:	f000 fe57 	bl	800cbf8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800bf4a:	69fb      	ldr	r3, [r7, #28]
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3720      	adds	r7, #32
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bf54:	b480      	push	{r7}
 800bf56:	b085      	sub	sp, #20
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	4a07      	ldr	r2, [pc, #28]	@ (800bf80 <vApplicationGetIdleTaskMemory+0x2c>)
 800bf64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	4a06      	ldr	r2, [pc, #24]	@ (800bf84 <vApplicationGetIdleTaskMemory+0x30>)
 800bf6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2280      	movs	r2, #128	@ 0x80
 800bf70:	601a      	str	r2, [r3, #0]
}
 800bf72:	bf00      	nop
 800bf74:	3714      	adds	r7, #20
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	20000494 	.word	0x20000494
 800bf84:	2000053c 	.word	0x2000053c

0800bf88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	60f8      	str	r0, [r7, #12]
 800bf90:	60b9      	str	r1, [r7, #8]
 800bf92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	4a07      	ldr	r2, [pc, #28]	@ (800bfb4 <vApplicationGetTimerTaskMemory+0x2c>)
 800bf98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	4a06      	ldr	r2, [pc, #24]	@ (800bfb8 <vApplicationGetTimerTaskMemory+0x30>)
 800bf9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bfa6:	601a      	str	r2, [r3, #0]
}
 800bfa8:	bf00      	nop
 800bfaa:	3714      	adds	r7, #20
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr
 800bfb4:	2000073c 	.word	0x2000073c
 800bfb8:	200007e4 	.word	0x200007e4

0800bfbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f103 0208 	add.w	r2, r3, #8
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f04f 32ff 	mov.w	r2, #4294967295
 800bfd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f103 0208 	add.w	r2, r3, #8
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f103 0208 	add.w	r2, r3, #8
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bff0:	bf00      	nop
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c00a:	bf00      	nop
 800c00c:	370c      	adds	r7, #12
 800c00e:	46bd      	mov	sp, r7
 800c010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c014:	4770      	bx	lr

0800c016 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c016:	b480      	push	{r7}
 800c018:	b085      	sub	sp, #20
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
 800c01e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	689a      	ldr	r2, [r3, #8]
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	683a      	ldr	r2, [r7, #0]
 800c03a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	683a      	ldr	r2, [r7, #0]
 800c040:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	1c5a      	adds	r2, r3, #1
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	601a      	str	r2, [r3, #0]
}
 800c052:	bf00      	nop
 800c054:	3714      	adds	r7, #20
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr

0800c05e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c05e:	b480      	push	{r7}
 800c060:	b085      	sub	sp, #20
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c074:	d103      	bne.n	800c07e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	691b      	ldr	r3, [r3, #16]
 800c07a:	60fb      	str	r3, [r7, #12]
 800c07c:	e00c      	b.n	800c098 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	3308      	adds	r3, #8
 800c082:	60fb      	str	r3, [r7, #12]
 800c084:	e002      	b.n	800c08c <vListInsert+0x2e>
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	60fb      	str	r3, [r7, #12]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68ba      	ldr	r2, [r7, #8]
 800c094:	429a      	cmp	r2, r3
 800c096:	d2f6      	bcs.n	800c086 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	685a      	ldr	r2, [r3, #4]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	68fa      	ldr	r2, [r7, #12]
 800c0ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	683a      	ldr	r2, [r7, #0]
 800c0b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	1c5a      	adds	r2, r3, #1
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	601a      	str	r2, [r3, #0]
}
 800c0c4:	bf00      	nop
 800c0c6:	3714      	adds	r7, #20
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b085      	sub	sp, #20
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	691b      	ldr	r3, [r3, #16]
 800c0dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	6892      	ldr	r2, [r2, #8]
 800c0e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	689b      	ldr	r3, [r3, #8]
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	6852      	ldr	r2, [r2, #4]
 800c0f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d103      	bne.n	800c104 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	689a      	ldr	r2, [r3, #8]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	1e5a      	subs	r2, r3, #1
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3714      	adds	r7, #20
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10b      	bne.n	800c150 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c13c:	f383 8811 	msr	BASEPRI, r3
 800c140:	f3bf 8f6f 	isb	sy
 800c144:	f3bf 8f4f 	dsb	sy
 800c148:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c14a:	bf00      	nop
 800c14c:	bf00      	nop
 800c14e:	e7fd      	b.n	800c14c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c150:	f002 f9a2 	bl	800e498 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681a      	ldr	r2, [r3, #0]
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c15c:	68f9      	ldr	r1, [r7, #12]
 800c15e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c160:	fb01 f303 	mul.w	r3, r1, r3
 800c164:	441a      	add	r2, r3
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2200      	movs	r2, #0
 800c16e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c180:	3b01      	subs	r3, #1
 800c182:	68f9      	ldr	r1, [r7, #12]
 800c184:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c186:	fb01 f303 	mul.w	r3, r1, r3
 800c18a:	441a      	add	r2, r3
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	22ff      	movs	r2, #255	@ 0xff
 800c194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	22ff      	movs	r2, #255	@ 0xff
 800c19c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d114      	bne.n	800c1d0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	691b      	ldr	r3, [r3, #16]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d01a      	beq.n	800c1e4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	3310      	adds	r3, #16
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f001 fa3a 	bl	800d62c <xTaskRemoveFromEventList>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d012      	beq.n	800c1e4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c1be:	4b0d      	ldr	r3, [pc, #52]	@ (800c1f4 <xQueueGenericReset+0xd0>)
 800c1c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1c4:	601a      	str	r2, [r3, #0]
 800c1c6:	f3bf 8f4f 	dsb	sy
 800c1ca:	f3bf 8f6f 	isb	sy
 800c1ce:	e009      	b.n	800c1e4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	3310      	adds	r3, #16
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7ff fef1 	bl	800bfbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	3324      	adds	r3, #36	@ 0x24
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7ff feec 	bl	800bfbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c1e4:	f002 f98a 	bl	800e4fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c1e8:	2301      	movs	r3, #1
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	e000ed04 	.word	0xe000ed04

0800c1f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b08e      	sub	sp, #56	@ 0x38
 800c1fc:	af02      	add	r7, sp, #8
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
 800c204:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10b      	bne.n	800c224 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c210:	f383 8811 	msr	BASEPRI, r3
 800c214:	f3bf 8f6f 	isb	sy
 800c218:	f3bf 8f4f 	dsb	sy
 800c21c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c21e:	bf00      	nop
 800c220:	bf00      	nop
 800c222:	e7fd      	b.n	800c220 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d10b      	bne.n	800c242 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c22a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c22e:	f383 8811 	msr	BASEPRI, r3
 800c232:	f3bf 8f6f 	isb	sy
 800c236:	f3bf 8f4f 	dsb	sy
 800c23a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c23c:	bf00      	nop
 800c23e:	bf00      	nop
 800c240:	e7fd      	b.n	800c23e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d002      	beq.n	800c24e <xQueueGenericCreateStatic+0x56>
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d001      	beq.n	800c252 <xQueueGenericCreateStatic+0x5a>
 800c24e:	2301      	movs	r3, #1
 800c250:	e000      	b.n	800c254 <xQueueGenericCreateStatic+0x5c>
 800c252:	2300      	movs	r3, #0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10b      	bne.n	800c270 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c25c:	f383 8811 	msr	BASEPRI, r3
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	f3bf 8f4f 	dsb	sy
 800c268:	623b      	str	r3, [r7, #32]
}
 800c26a:	bf00      	nop
 800c26c:	bf00      	nop
 800c26e:	e7fd      	b.n	800c26c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d102      	bne.n	800c27c <xQueueGenericCreateStatic+0x84>
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d101      	bne.n	800c280 <xQueueGenericCreateStatic+0x88>
 800c27c:	2301      	movs	r3, #1
 800c27e:	e000      	b.n	800c282 <xQueueGenericCreateStatic+0x8a>
 800c280:	2300      	movs	r3, #0
 800c282:	2b00      	cmp	r3, #0
 800c284:	d10b      	bne.n	800c29e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c28a:	f383 8811 	msr	BASEPRI, r3
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f3bf 8f4f 	dsb	sy
 800c296:	61fb      	str	r3, [r7, #28]
}
 800c298:	bf00      	nop
 800c29a:	bf00      	nop
 800c29c:	e7fd      	b.n	800c29a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c29e:	2350      	movs	r3, #80	@ 0x50
 800c2a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	2b50      	cmp	r3, #80	@ 0x50
 800c2a6:	d00b      	beq.n	800c2c0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c2a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ac:	f383 8811 	msr	BASEPRI, r3
 800c2b0:	f3bf 8f6f 	isb	sy
 800c2b4:	f3bf 8f4f 	dsb	sy
 800c2b8:	61bb      	str	r3, [r7, #24]
}
 800c2ba:	bf00      	nop
 800c2bc:	bf00      	nop
 800c2be:	e7fd      	b.n	800c2bc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c2c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00d      	beq.n	800c2e8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c2d4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2da:	9300      	str	r3, [sp, #0]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	68b9      	ldr	r1, [r7, #8]
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f000 f840 	bl	800c368 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3730      	adds	r7, #48	@ 0x30
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b08a      	sub	sp, #40	@ 0x28
 800c2f6:	af02      	add	r7, sp, #8
 800c2f8:	60f8      	str	r0, [r7, #12]
 800c2fa:	60b9      	str	r1, [r7, #8]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d10b      	bne.n	800c31e <xQueueGenericCreate+0x2c>
	__asm volatile
 800c306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c30a:	f383 8811 	msr	BASEPRI, r3
 800c30e:	f3bf 8f6f 	isb	sy
 800c312:	f3bf 8f4f 	dsb	sy
 800c316:	613b      	str	r3, [r7, #16]
}
 800c318:	bf00      	nop
 800c31a:	bf00      	nop
 800c31c:	e7fd      	b.n	800c31a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	fb02 f303 	mul.w	r3, r2, r3
 800c326:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	3350      	adds	r3, #80	@ 0x50
 800c32c:	4618      	mov	r0, r3
 800c32e:	f002 f9d5 	bl	800e6dc <pvPortMalloc>
 800c332:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d011      	beq.n	800c35e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	3350      	adds	r3, #80	@ 0x50
 800c342:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c344:	69bb      	ldr	r3, [r7, #24]
 800c346:	2200      	movs	r2, #0
 800c348:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c34c:	79fa      	ldrb	r2, [r7, #7]
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	9300      	str	r3, [sp, #0]
 800c352:	4613      	mov	r3, r2
 800c354:	697a      	ldr	r2, [r7, #20]
 800c356:	68b9      	ldr	r1, [r7, #8]
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f000 f805 	bl	800c368 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c35e:	69bb      	ldr	r3, [r7, #24]
	}
 800c360:	4618      	mov	r0, r3
 800c362:	3720      	adds	r7, #32
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	607a      	str	r2, [r7, #4]
 800c374:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d103      	bne.n	800c384 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	69ba      	ldr	r2, [r7, #24]
 800c380:	601a      	str	r2, [r3, #0]
 800c382:	e002      	b.n	800c38a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	687a      	ldr	r2, [r7, #4]
 800c388:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	68ba      	ldr	r2, [r7, #8]
 800c394:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c396:	2101      	movs	r1, #1
 800c398:	69b8      	ldr	r0, [r7, #24]
 800c39a:	f7ff fec3 	bl	800c124 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	78fa      	ldrb	r2, [r7, #3]
 800c3a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c3a6:	bf00      	nop
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b08a      	sub	sp, #40	@ 0x28
 800c3b2:	af02      	add	r7, sp, #8
 800c3b4:	60f8      	str	r0, [r7, #12]
 800c3b6:	60b9      	str	r1, [r7, #8]
 800c3b8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d10b      	bne.n	800c3d8 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800c3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c4:	f383 8811 	msr	BASEPRI, r3
 800c3c8:	f3bf 8f6f 	isb	sy
 800c3cc:	f3bf 8f4f 	dsb	sy
 800c3d0:	61bb      	str	r3, [r7, #24]
}
 800c3d2:	bf00      	nop
 800c3d4:	bf00      	nop
 800c3d6:	e7fd      	b.n	800c3d4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c3d8:	68ba      	ldr	r2, [r7, #8]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d90b      	bls.n	800c3f8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800c3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	617b      	str	r3, [r7, #20]
}
 800c3f2:	bf00      	nop
 800c3f4:	bf00      	nop
 800c3f6:	e7fd      	b.n	800c3f4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	9300      	str	r3, [sp, #0]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	2100      	movs	r1, #0
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f7ff fef8 	bl	800c1f8 <xQueueGenericCreateStatic>
 800c408:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d002      	beq.n	800c416 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	68ba      	ldr	r2, [r7, #8]
 800c414:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c416:	69fb      	ldr	r3, [r7, #28]
	}
 800c418:	4618      	mov	r0, r3
 800c41a:	3720      	adds	r7, #32
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d10b      	bne.n	800c448 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800c430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c434:	f383 8811 	msr	BASEPRI, r3
 800c438:	f3bf 8f6f 	isb	sy
 800c43c:	f3bf 8f4f 	dsb	sy
 800c440:	613b      	str	r3, [r7, #16]
}
 800c442:	bf00      	nop
 800c444:	bf00      	nop
 800c446:	e7fd      	b.n	800c444 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c448:	683a      	ldr	r2, [r7, #0]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d90b      	bls.n	800c468 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800c450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c454:	f383 8811 	msr	BASEPRI, r3
 800c458:	f3bf 8f6f 	isb	sy
 800c45c:	f3bf 8f4f 	dsb	sy
 800c460:	60fb      	str	r3, [r7, #12]
}
 800c462:	bf00      	nop
 800c464:	bf00      	nop
 800c466:	e7fd      	b.n	800c464 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c468:	2202      	movs	r2, #2
 800c46a:	2100      	movs	r1, #0
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f7ff ff40 	bl	800c2f2 <xQueueGenericCreate>
 800c472:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d002      	beq.n	800c480 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	683a      	ldr	r2, [r7, #0]
 800c47e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c480:	697b      	ldr	r3, [r7, #20]
	}
 800c482:	4618      	mov	r0, r3
 800c484:	3718      	adds	r7, #24
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
	...

0800c48c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b08e      	sub	sp, #56	@ 0x38
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
 800c498:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c49a:	2300      	movs	r3, #0
 800c49c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d10b      	bne.n	800c4c0 <xQueueGenericSend+0x34>
	__asm volatile
 800c4a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ac:	f383 8811 	msr	BASEPRI, r3
 800c4b0:	f3bf 8f6f 	isb	sy
 800c4b4:	f3bf 8f4f 	dsb	sy
 800c4b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c4ba:	bf00      	nop
 800c4bc:	bf00      	nop
 800c4be:	e7fd      	b.n	800c4bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d103      	bne.n	800c4ce <xQueueGenericSend+0x42>
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d101      	bne.n	800c4d2 <xQueueGenericSend+0x46>
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e000      	b.n	800c4d4 <xQueueGenericSend+0x48>
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d10b      	bne.n	800c4f0 <xQueueGenericSend+0x64>
	__asm volatile
 800c4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4dc:	f383 8811 	msr	BASEPRI, r3
 800c4e0:	f3bf 8f6f 	isb	sy
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c4ea:	bf00      	nop
 800c4ec:	bf00      	nop
 800c4ee:	e7fd      	b.n	800c4ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	d103      	bne.n	800c4fe <xQueueGenericSend+0x72>
 800c4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d101      	bne.n	800c502 <xQueueGenericSend+0x76>
 800c4fe:	2301      	movs	r3, #1
 800c500:	e000      	b.n	800c504 <xQueueGenericSend+0x78>
 800c502:	2300      	movs	r3, #0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d10b      	bne.n	800c520 <xQueueGenericSend+0x94>
	__asm volatile
 800c508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c50c:	f383 8811 	msr	BASEPRI, r3
 800c510:	f3bf 8f6f 	isb	sy
 800c514:	f3bf 8f4f 	dsb	sy
 800c518:	623b      	str	r3, [r7, #32]
}
 800c51a:	bf00      	nop
 800c51c:	bf00      	nop
 800c51e:	e7fd      	b.n	800c51c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c520:	f001 fa4a 	bl	800d9b8 <xTaskGetSchedulerState>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d102      	bne.n	800c530 <xQueueGenericSend+0xa4>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d101      	bne.n	800c534 <xQueueGenericSend+0xa8>
 800c530:	2301      	movs	r3, #1
 800c532:	e000      	b.n	800c536 <xQueueGenericSend+0xaa>
 800c534:	2300      	movs	r3, #0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d10b      	bne.n	800c552 <xQueueGenericSend+0xc6>
	__asm volatile
 800c53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	61fb      	str	r3, [r7, #28]
}
 800c54c:	bf00      	nop
 800c54e:	bf00      	nop
 800c550:	e7fd      	b.n	800c54e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c552:	f001 ffa1 	bl	800e498 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c558:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c55c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c55e:	429a      	cmp	r2, r3
 800c560:	d302      	bcc.n	800c568 <xQueueGenericSend+0xdc>
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	2b02      	cmp	r3, #2
 800c566:	d129      	bne.n	800c5bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c568:	683a      	ldr	r2, [r7, #0]
 800c56a:	68b9      	ldr	r1, [r7, #8]
 800c56c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c56e:	f000 fa33 	bl	800c9d8 <prvCopyDataToQueue>
 800c572:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d010      	beq.n	800c59e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c57e:	3324      	adds	r3, #36	@ 0x24
 800c580:	4618      	mov	r0, r3
 800c582:	f001 f853 	bl	800d62c <xTaskRemoveFromEventList>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d013      	beq.n	800c5b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c58c:	4b3f      	ldr	r3, [pc, #252]	@ (800c68c <xQueueGenericSend+0x200>)
 800c58e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c592:	601a      	str	r2, [r3, #0]
 800c594:	f3bf 8f4f 	dsb	sy
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	e00a      	b.n	800c5b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c59e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d007      	beq.n	800c5b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c5a4:	4b39      	ldr	r3, [pc, #228]	@ (800c68c <xQueueGenericSend+0x200>)
 800c5a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5aa:	601a      	str	r2, [r3, #0]
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c5b4:	f001 ffa2 	bl	800e4fc <vPortExitCritical>
				return pdPASS;
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	e063      	b.n	800c684 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d103      	bne.n	800c5ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c5c2:	f001 ff9b 	bl	800e4fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	e05c      	b.n	800c684 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d106      	bne.n	800c5de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5d0:	f107 0314 	add.w	r3, r7, #20
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f001 f88d 	bl	800d6f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c5de:	f001 ff8d 	bl	800e4fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c5e2:	f000 fdf5 	bl	800d1d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c5e6:	f001 ff57 	bl	800e498 <vPortEnterCritical>
 800c5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c5f0:	b25b      	sxtb	r3, r3
 800c5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f6:	d103      	bne.n	800c600 <xQueueGenericSend+0x174>
 800c5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c602:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c606:	b25b      	sxtb	r3, r3
 800c608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c60c:	d103      	bne.n	800c616 <xQueueGenericSend+0x18a>
 800c60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c610:	2200      	movs	r2, #0
 800c612:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c616:	f001 ff71 	bl	800e4fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c61a:	1d3a      	adds	r2, r7, #4
 800c61c:	f107 0314 	add.w	r3, r7, #20
 800c620:	4611      	mov	r1, r2
 800c622:	4618      	mov	r0, r3
 800c624:	f001 f87c 	bl	800d720 <xTaskCheckForTimeOut>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d124      	bne.n	800c678 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c62e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c630:	f000 faca 	bl	800cbc8 <prvIsQueueFull>
 800c634:	4603      	mov	r3, r0
 800c636:	2b00      	cmp	r3, #0
 800c638:	d018      	beq.n	800c66c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c63c:	3310      	adds	r3, #16
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	4611      	mov	r1, r2
 800c642:	4618      	mov	r0, r3
 800c644:	f000 ffa0 	bl	800d588 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c648:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c64a:	f000 fa55 	bl	800caf8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c64e:	f000 fdcd 	bl	800d1ec <xTaskResumeAll>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	f47f af7c 	bne.w	800c552 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c65a:	4b0c      	ldr	r3, [pc, #48]	@ (800c68c <xQueueGenericSend+0x200>)
 800c65c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c660:	601a      	str	r2, [r3, #0]
 800c662:	f3bf 8f4f 	dsb	sy
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	e772      	b.n	800c552 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c66c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c66e:	f000 fa43 	bl	800caf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c672:	f000 fdbb 	bl	800d1ec <xTaskResumeAll>
 800c676:	e76c      	b.n	800c552 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c678:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c67a:	f000 fa3d 	bl	800caf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c67e:	f000 fdb5 	bl	800d1ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c682:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c684:	4618      	mov	r0, r3
 800c686:	3738      	adds	r7, #56	@ 0x38
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	e000ed04 	.word	0xe000ed04

0800c690 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b090      	sub	sp, #64	@ 0x40
 800c694:	af00      	add	r7, sp, #0
 800c696:	60f8      	str	r0, [r7, #12]
 800c698:	60b9      	str	r1, [r7, #8]
 800c69a:	607a      	str	r2, [r7, #4]
 800c69c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10b      	bne.n	800c6c0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c6a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ac:	f383 8811 	msr	BASEPRI, r3
 800c6b0:	f3bf 8f6f 	isb	sy
 800c6b4:	f3bf 8f4f 	dsb	sy
 800c6b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c6ba:	bf00      	nop
 800c6bc:	bf00      	nop
 800c6be:	e7fd      	b.n	800c6bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d103      	bne.n	800c6ce <xQueueGenericSendFromISR+0x3e>
 800c6c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d101      	bne.n	800c6d2 <xQueueGenericSendFromISR+0x42>
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e000      	b.n	800c6d4 <xQueueGenericSendFromISR+0x44>
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10b      	bne.n	800c6f0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c6d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6dc:	f383 8811 	msr	BASEPRI, r3
 800c6e0:	f3bf 8f6f 	isb	sy
 800c6e4:	f3bf 8f4f 	dsb	sy
 800c6e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c6ea:	bf00      	nop
 800c6ec:	bf00      	nop
 800c6ee:	e7fd      	b.n	800c6ec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	2b02      	cmp	r3, #2
 800c6f4:	d103      	bne.n	800c6fe <xQueueGenericSendFromISR+0x6e>
 800c6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d101      	bne.n	800c702 <xQueueGenericSendFromISR+0x72>
 800c6fe:	2301      	movs	r3, #1
 800c700:	e000      	b.n	800c704 <xQueueGenericSendFromISR+0x74>
 800c702:	2300      	movs	r3, #0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d10b      	bne.n	800c720 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c70c:	f383 8811 	msr	BASEPRI, r3
 800c710:	f3bf 8f6f 	isb	sy
 800c714:	f3bf 8f4f 	dsb	sy
 800c718:	623b      	str	r3, [r7, #32]
}
 800c71a:	bf00      	nop
 800c71c:	bf00      	nop
 800c71e:	e7fd      	b.n	800c71c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c720:	f001 ff9a 	bl	800e658 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c724:	f3ef 8211 	mrs	r2, BASEPRI
 800c728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c72c:	f383 8811 	msr	BASEPRI, r3
 800c730:	f3bf 8f6f 	isb	sy
 800c734:	f3bf 8f4f 	dsb	sy
 800c738:	61fa      	str	r2, [r7, #28]
 800c73a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c73c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c73e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c742:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c748:	429a      	cmp	r2, r3
 800c74a:	d302      	bcc.n	800c752 <xQueueGenericSendFromISR+0xc2>
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	2b02      	cmp	r3, #2
 800c750:	d12f      	bne.n	800c7b2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c754:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c758:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c760:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c762:	683a      	ldr	r2, [r7, #0]
 800c764:	68b9      	ldr	r1, [r7, #8]
 800c766:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c768:	f000 f936 	bl	800c9d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c76c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c774:	d112      	bne.n	800c79c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d016      	beq.n	800c7ac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c780:	3324      	adds	r3, #36	@ 0x24
 800c782:	4618      	mov	r0, r3
 800c784:	f000 ff52 	bl	800d62c <xTaskRemoveFromEventList>
 800c788:	4603      	mov	r3, r0
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00e      	beq.n	800c7ac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d00b      	beq.n	800c7ac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2201      	movs	r2, #1
 800c798:	601a      	str	r2, [r3, #0]
 800c79a:	e007      	b.n	800c7ac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c79c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	b25a      	sxtb	r2, r3
 800c7a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c7b0:	e001      	b.n	800c7b6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7b8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c7c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c7c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3740      	adds	r7, #64	@ 0x40
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b08c      	sub	sp, #48	@ 0x30
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d10b      	bne.n	800c7fe <xQueueReceive+0x32>
	__asm volatile
 800c7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ea:	f383 8811 	msr	BASEPRI, r3
 800c7ee:	f3bf 8f6f 	isb	sy
 800c7f2:	f3bf 8f4f 	dsb	sy
 800c7f6:	623b      	str	r3, [r7, #32]
}
 800c7f8:	bf00      	nop
 800c7fa:	bf00      	nop
 800c7fc:	e7fd      	b.n	800c7fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d103      	bne.n	800c80c <xQueueReceive+0x40>
 800c804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d101      	bne.n	800c810 <xQueueReceive+0x44>
 800c80c:	2301      	movs	r3, #1
 800c80e:	e000      	b.n	800c812 <xQueueReceive+0x46>
 800c810:	2300      	movs	r3, #0
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10b      	bne.n	800c82e <xQueueReceive+0x62>
	__asm volatile
 800c816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c81a:	f383 8811 	msr	BASEPRI, r3
 800c81e:	f3bf 8f6f 	isb	sy
 800c822:	f3bf 8f4f 	dsb	sy
 800c826:	61fb      	str	r3, [r7, #28]
}
 800c828:	bf00      	nop
 800c82a:	bf00      	nop
 800c82c:	e7fd      	b.n	800c82a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c82e:	f001 f8c3 	bl	800d9b8 <xTaskGetSchedulerState>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d102      	bne.n	800c83e <xQueueReceive+0x72>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d101      	bne.n	800c842 <xQueueReceive+0x76>
 800c83e:	2301      	movs	r3, #1
 800c840:	e000      	b.n	800c844 <xQueueReceive+0x78>
 800c842:	2300      	movs	r3, #0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d10b      	bne.n	800c860 <xQueueReceive+0x94>
	__asm volatile
 800c848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c84c:	f383 8811 	msr	BASEPRI, r3
 800c850:	f3bf 8f6f 	isb	sy
 800c854:	f3bf 8f4f 	dsb	sy
 800c858:	61bb      	str	r3, [r7, #24]
}
 800c85a:	bf00      	nop
 800c85c:	bf00      	nop
 800c85e:	e7fd      	b.n	800c85c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c860:	f001 fe1a 	bl	800e498 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c868:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d01f      	beq.n	800c8b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c870:	68b9      	ldr	r1, [r7, #8]
 800c872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c874:	f000 f91a 	bl	800caac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c87a:	1e5a      	subs	r2, r3, #1
 800c87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c87e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c882:	691b      	ldr	r3, [r3, #16]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d00f      	beq.n	800c8a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c88a:	3310      	adds	r3, #16
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 fecd 	bl	800d62c <xTaskRemoveFromEventList>
 800c892:	4603      	mov	r3, r0
 800c894:	2b00      	cmp	r3, #0
 800c896:	d007      	beq.n	800c8a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c898:	4b3c      	ldr	r3, [pc, #240]	@ (800c98c <xQueueReceive+0x1c0>)
 800c89a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c89e:	601a      	str	r2, [r3, #0]
 800c8a0:	f3bf 8f4f 	dsb	sy
 800c8a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c8a8:	f001 fe28 	bl	800e4fc <vPortExitCritical>
				return pdPASS;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	e069      	b.n	800c984 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d103      	bne.n	800c8be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c8b6:	f001 fe21 	bl	800e4fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	e062      	b.n	800c984 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d106      	bne.n	800c8d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c8c4:	f107 0310 	add.w	r3, r7, #16
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f000 ff13 	bl	800d6f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8d2:	f001 fe13 	bl	800e4fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8d6:	f000 fc7b 	bl	800d1d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8da:	f001 fddd 	bl	800e498 <vPortEnterCritical>
 800c8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c8e4:	b25b      	sxtb	r3, r3
 800c8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ea:	d103      	bne.n	800c8f4 <xQueueReceive+0x128>
 800c8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c8fa:	b25b      	sxtb	r3, r3
 800c8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c900:	d103      	bne.n	800c90a <xQueueReceive+0x13e>
 800c902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c904:	2200      	movs	r2, #0
 800c906:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c90a:	f001 fdf7 	bl	800e4fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c90e:	1d3a      	adds	r2, r7, #4
 800c910:	f107 0310 	add.w	r3, r7, #16
 800c914:	4611      	mov	r1, r2
 800c916:	4618      	mov	r0, r3
 800c918:	f000 ff02 	bl	800d720 <xTaskCheckForTimeOut>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d123      	bne.n	800c96a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c922:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c924:	f000 f93a 	bl	800cb9c <prvIsQueueEmpty>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d017      	beq.n	800c95e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c92e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c930:	3324      	adds	r3, #36	@ 0x24
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	4611      	mov	r1, r2
 800c936:	4618      	mov	r0, r3
 800c938:	f000 fe26 	bl	800d588 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c93c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c93e:	f000 f8db 	bl	800caf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c942:	f000 fc53 	bl	800d1ec <xTaskResumeAll>
 800c946:	4603      	mov	r3, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d189      	bne.n	800c860 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c94c:	4b0f      	ldr	r3, [pc, #60]	@ (800c98c <xQueueReceive+0x1c0>)
 800c94e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c952:	601a      	str	r2, [r3, #0]
 800c954:	f3bf 8f4f 	dsb	sy
 800c958:	f3bf 8f6f 	isb	sy
 800c95c:	e780      	b.n	800c860 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c95e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c960:	f000 f8ca 	bl	800caf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c964:	f000 fc42 	bl	800d1ec <xTaskResumeAll>
 800c968:	e77a      	b.n	800c860 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c96a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c96c:	f000 f8c4 	bl	800caf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c970:	f000 fc3c 	bl	800d1ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c974:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c976:	f000 f911 	bl	800cb9c <prvIsQueueEmpty>
 800c97a:	4603      	mov	r3, r0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	f43f af6f 	beq.w	800c860 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c982:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c984:	4618      	mov	r0, r3
 800c986:	3730      	adds	r7, #48	@ 0x30
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	e000ed04 	.word	0xe000ed04

0800c990 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d10b      	bne.n	800c9ba <vQueueDelete+0x2a>
	__asm volatile
 800c9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a6:	f383 8811 	msr	BASEPRI, r3
 800c9aa:	f3bf 8f6f 	isb	sy
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	60bb      	str	r3, [r7, #8]
}
 800c9b4:	bf00      	nop
 800c9b6:	bf00      	nop
 800c9b8:	e7fd      	b.n	800c9b6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c9ba:	68f8      	ldr	r0, [r7, #12]
 800c9bc:	f000 f946 	bl	800cc4c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d102      	bne.n	800c9d0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	f001 ff54 	bl	800e878 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c9d0:	bf00      	nop
 800c9d2:	3710      	adds	r7, #16
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b086      	sub	sp, #24
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d10d      	bne.n	800ca12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d14d      	bne.n	800ca9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	689b      	ldr	r3, [r3, #8]
 800ca02:	4618      	mov	r0, r3
 800ca04:	f000 fff6 	bl	800d9f4 <xTaskPriorityDisinherit>
 800ca08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	609a      	str	r2, [r3, #8]
 800ca10:	e043      	b.n	800ca9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d119      	bne.n	800ca4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	6858      	ldr	r0, [r3, #4]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca20:	461a      	mov	r2, r3
 800ca22:	68b9      	ldr	r1, [r7, #8]
 800ca24:	f002 f9d0 	bl	800edc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	685a      	ldr	r2, [r3, #4]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca30:	441a      	add	r2, r3
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	685a      	ldr	r2, [r3, #4]
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d32b      	bcc.n	800ca9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	605a      	str	r2, [r3, #4]
 800ca4a:	e026      	b.n	800ca9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	68d8      	ldr	r0, [r3, #12]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca54:	461a      	mov	r2, r3
 800ca56:	68b9      	ldr	r1, [r7, #8]
 800ca58:	f002 f9b6 	bl	800edc8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	68da      	ldr	r2, [r3, #12]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca64:	425b      	negs	r3, r3
 800ca66:	441a      	add	r2, r3
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	68da      	ldr	r2, [r3, #12]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d207      	bcs.n	800ca88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	689a      	ldr	r2, [r3, #8]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca80:	425b      	negs	r3, r3
 800ca82:	441a      	add	r2, r3
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2b02      	cmp	r3, #2
 800ca8c:	d105      	bne.n	800ca9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d002      	beq.n	800ca9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	3b01      	subs	r3, #1
 800ca98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	1c5a      	adds	r2, r3, #1
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800caa2:	697b      	ldr	r3, [r7, #20]
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3718      	adds	r7, #24
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d018      	beq.n	800caf0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	68da      	ldr	r2, [r3, #12]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cac6:	441a      	add	r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	68da      	ldr	r2, [r3, #12]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d303      	bcc.n	800cae0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	68d9      	ldr	r1, [r3, #12]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cae8:	461a      	mov	r2, r3
 800caea:	6838      	ldr	r0, [r7, #0]
 800caec:	f002 f96c 	bl	800edc8 <memcpy>
	}
}
 800caf0:	bf00      	nop
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cb00:	f001 fcca 	bl	800e498 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb0c:	e011      	b.n	800cb32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d012      	beq.n	800cb3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	3324      	adds	r3, #36	@ 0x24
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f000 fd86 	bl	800d62c <xTaskRemoveFromEventList>
 800cb20:	4603      	mov	r3, r0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d001      	beq.n	800cb2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cb26:	f000 fe5f 	bl	800d7e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cb2a:	7bfb      	ldrb	r3, [r7, #15]
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	dce9      	bgt.n	800cb0e <prvUnlockQueue+0x16>
 800cb3a:	e000      	b.n	800cb3e <prvUnlockQueue+0x46>
					break;
 800cb3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	22ff      	movs	r2, #255	@ 0xff
 800cb42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cb46:	f001 fcd9 	bl	800e4fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb4a:	f001 fca5 	bl	800e498 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb56:	e011      	b.n	800cb7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	691b      	ldr	r3, [r3, #16]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d012      	beq.n	800cb86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	3310      	adds	r3, #16
 800cb64:	4618      	mov	r0, r3
 800cb66:	f000 fd61 	bl	800d62c <xTaskRemoveFromEventList>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d001      	beq.n	800cb74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cb70:	f000 fe3a 	bl	800d7e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cb74:	7bbb      	ldrb	r3, [r7, #14]
 800cb76:	3b01      	subs	r3, #1
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	dce9      	bgt.n	800cb58 <prvUnlockQueue+0x60>
 800cb84:	e000      	b.n	800cb88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cb86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	22ff      	movs	r2, #255	@ 0xff
 800cb8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cb90:	f001 fcb4 	bl	800e4fc <vPortExitCritical>
}
 800cb94:	bf00      	nop
 800cb96:	3710      	adds	r7, #16
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cba4:	f001 fc78 	bl	800e498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d102      	bne.n	800cbb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	60fb      	str	r3, [r7, #12]
 800cbb4:	e001      	b.n	800cbba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbba:	f001 fc9f 	bl	800e4fc <vPortExitCritical>

	return xReturn;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3710      	adds	r7, #16
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cbd0:	f001 fc62 	bl	800e498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d102      	bne.n	800cbe6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	60fb      	str	r3, [r7, #12]
 800cbe4:	e001      	b.n	800cbea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbea:	f001 fc87 	bl	800e4fc <vPortExitCritical>

	return xReturn;
 800cbee:	68fb      	ldr	r3, [r7, #12]
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3710      	adds	r7, #16
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc02:	2300      	movs	r3, #0
 800cc04:	60fb      	str	r3, [r7, #12]
 800cc06:	e014      	b.n	800cc32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cc08:	4a0f      	ldr	r2, [pc, #60]	@ (800cc48 <vQueueAddToRegistry+0x50>)
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d10b      	bne.n	800cc2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cc14:	490c      	ldr	r1, [pc, #48]	@ (800cc48 <vQueueAddToRegistry+0x50>)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	683a      	ldr	r2, [r7, #0]
 800cc1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cc1e:	4a0a      	ldr	r2, [pc, #40]	@ (800cc48 <vQueueAddToRegistry+0x50>)
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	00db      	lsls	r3, r3, #3
 800cc24:	4413      	add	r3, r2
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cc2a:	e006      	b.n	800cc3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	60fb      	str	r3, [r7, #12]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2b07      	cmp	r3, #7
 800cc36:	d9e7      	bls.n	800cc08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cc38:	bf00      	nop
 800cc3a:	bf00      	nop
 800cc3c:	3714      	adds	r7, #20
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc44:	4770      	bx	lr
 800cc46:	bf00      	nop
 800cc48:	20000be4 	.word	0x20000be4

0800cc4c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b085      	sub	sp, #20
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc54:	2300      	movs	r3, #0
 800cc56:	60fb      	str	r3, [r7, #12]
 800cc58:	e016      	b.n	800cc88 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cc5a:	4a10      	ldr	r2, [pc, #64]	@ (800cc9c <vQueueUnregisterQueue+0x50>)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	00db      	lsls	r3, r3, #3
 800cc60:	4413      	add	r3, r2
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d10b      	bne.n	800cc82 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cc6a:	4a0c      	ldr	r2, [pc, #48]	@ (800cc9c <vQueueUnregisterQueue+0x50>)
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2100      	movs	r1, #0
 800cc70:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cc74:	4a09      	ldr	r2, [pc, #36]	@ (800cc9c <vQueueUnregisterQueue+0x50>)
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	00db      	lsls	r3, r3, #3
 800cc7a:	4413      	add	r3, r2
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	605a      	str	r2, [r3, #4]
				break;
 800cc80:	e006      	b.n	800cc90 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	3301      	adds	r3, #1
 800cc86:	60fb      	str	r3, [r7, #12]
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2b07      	cmp	r3, #7
 800cc8c:	d9e5      	bls.n	800cc5a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cc8e:	bf00      	nop
 800cc90:	bf00      	nop
 800cc92:	3714      	adds	r7, #20
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr
 800cc9c:	20000be4 	.word	0x20000be4

0800cca0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ccb0:	f001 fbf2 	bl	800e498 <vPortEnterCritical>
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ccba:	b25b      	sxtb	r3, r3
 800ccbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccc0:	d103      	bne.n	800ccca <vQueueWaitForMessageRestricted+0x2a>
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ccd0:	b25b      	sxtb	r3, r3
 800ccd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccd6:	d103      	bne.n	800cce0 <vQueueWaitForMessageRestricted+0x40>
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cce0:	f001 fc0c 	bl	800e4fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d106      	bne.n	800ccfa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	3324      	adds	r3, #36	@ 0x24
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	68b9      	ldr	r1, [r7, #8]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f000 fc6d 	bl	800d5d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ccfa:	6978      	ldr	r0, [r7, #20]
 800ccfc:	f7ff fefc 	bl	800caf8 <prvUnlockQueue>
	}
 800cd00:	bf00      	nop
 800cd02:	3718      	adds	r7, #24
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b08e      	sub	sp, #56	@ 0x38
 800cd0c:	af04      	add	r7, sp, #16
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	607a      	str	r2, [r7, #4]
 800cd14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cd16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d10b      	bne.n	800cd34 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cd1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd20:	f383 8811 	msr	BASEPRI, r3
 800cd24:	f3bf 8f6f 	isb	sy
 800cd28:	f3bf 8f4f 	dsb	sy
 800cd2c:	623b      	str	r3, [r7, #32]
}
 800cd2e:	bf00      	nop
 800cd30:	bf00      	nop
 800cd32:	e7fd      	b.n	800cd30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cd34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d10b      	bne.n	800cd52 <xTaskCreateStatic+0x4a>
	__asm volatile
 800cd3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd3e:	f383 8811 	msr	BASEPRI, r3
 800cd42:	f3bf 8f6f 	isb	sy
 800cd46:	f3bf 8f4f 	dsb	sy
 800cd4a:	61fb      	str	r3, [r7, #28]
}
 800cd4c:	bf00      	nop
 800cd4e:	bf00      	nop
 800cd50:	e7fd      	b.n	800cd4e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cd52:	23a8      	movs	r3, #168	@ 0xa8
 800cd54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	2ba8      	cmp	r3, #168	@ 0xa8
 800cd5a:	d00b      	beq.n	800cd74 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cd5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd60:	f383 8811 	msr	BASEPRI, r3
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	61bb      	str	r3, [r7, #24]
}
 800cd6e:	bf00      	nop
 800cd70:	bf00      	nop
 800cd72:	e7fd      	b.n	800cd70 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cd74:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cd76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d01e      	beq.n	800cdba <xTaskCreateStatic+0xb2>
 800cd7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d01b      	beq.n	800cdba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd84:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cd86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd8a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd8e:	2202      	movs	r2, #2
 800cd90:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd94:	2300      	movs	r3, #0
 800cd96:	9303      	str	r3, [sp, #12]
 800cd98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd9a:	9302      	str	r3, [sp, #8]
 800cd9c:	f107 0314 	add.w	r3, r7, #20
 800cda0:	9301      	str	r3, [sp, #4]
 800cda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda4:	9300      	str	r3, [sp, #0]
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	68b9      	ldr	r1, [r7, #8]
 800cdac:	68f8      	ldr	r0, [r7, #12]
 800cdae:	f000 f851 	bl	800ce54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cdb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cdb4:	f000 f8f6 	bl	800cfa4 <prvAddNewTaskToReadyList>
 800cdb8:	e001      	b.n	800cdbe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cdbe:	697b      	ldr	r3, [r7, #20]
	}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3728      	adds	r7, #40	@ 0x28
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b08c      	sub	sp, #48	@ 0x30
 800cdcc:	af04      	add	r7, sp, #16
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	603b      	str	r3, [r7, #0]
 800cdd4:	4613      	mov	r3, r2
 800cdd6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cdd8:	88fb      	ldrh	r3, [r7, #6]
 800cdda:	009b      	lsls	r3, r3, #2
 800cddc:	4618      	mov	r0, r3
 800cdde:	f001 fc7d 	bl	800e6dc <pvPortMalloc>
 800cde2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00e      	beq.n	800ce08 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cdea:	20a8      	movs	r0, #168	@ 0xa8
 800cdec:	f001 fc76 	bl	800e6dc <pvPortMalloc>
 800cdf0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d003      	beq.n	800ce00 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	697a      	ldr	r2, [r7, #20]
 800cdfc:	631a      	str	r2, [r3, #48]	@ 0x30
 800cdfe:	e005      	b.n	800ce0c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ce00:	6978      	ldr	r0, [r7, #20]
 800ce02:	f001 fd39 	bl	800e878 <vPortFree>
 800ce06:	e001      	b.n	800ce0c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d017      	beq.n	800ce42 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ce12:	69fb      	ldr	r3, [r7, #28]
 800ce14:	2200      	movs	r2, #0
 800ce16:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ce1a:	88fa      	ldrh	r2, [r7, #6]
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	9303      	str	r3, [sp, #12]
 800ce20:	69fb      	ldr	r3, [r7, #28]
 800ce22:	9302      	str	r3, [sp, #8]
 800ce24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce26:	9301      	str	r3, [sp, #4]
 800ce28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2a:	9300      	str	r3, [sp, #0]
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	68b9      	ldr	r1, [r7, #8]
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f000 f80f 	bl	800ce54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce36:	69f8      	ldr	r0, [r7, #28]
 800ce38:	f000 f8b4 	bl	800cfa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	61bb      	str	r3, [r7, #24]
 800ce40:	e002      	b.n	800ce48 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ce42:	f04f 33ff 	mov.w	r3, #4294967295
 800ce46:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ce48:	69bb      	ldr	r3, [r7, #24]
	}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3720      	adds	r7, #32
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
	...

0800ce54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b088      	sub	sp, #32
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	607a      	str	r2, [r7, #4]
 800ce60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ce62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce64:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	21a5      	movs	r1, #165	@ 0xa5
 800ce6e:	f001 ff11 	bl	800ec94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ce72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce7c:	3b01      	subs	r3, #1
 800ce7e:	009b      	lsls	r3, r3, #2
 800ce80:	4413      	add	r3, r2
 800ce82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	f023 0307 	bic.w	r3, r3, #7
 800ce8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ce8c:	69bb      	ldr	r3, [r7, #24]
 800ce8e:	f003 0307 	and.w	r3, r3, #7
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d00b      	beq.n	800ceae <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ce96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce9a:	f383 8811 	msr	BASEPRI, r3
 800ce9e:	f3bf 8f6f 	isb	sy
 800cea2:	f3bf 8f4f 	dsb	sy
 800cea6:	617b      	str	r3, [r7, #20]
}
 800cea8:	bf00      	nop
 800ceaa:	bf00      	nop
 800ceac:	e7fd      	b.n	800ceaa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d01f      	beq.n	800cef4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	61fb      	str	r3, [r7, #28]
 800ceb8:	e012      	b.n	800cee0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ceba:	68ba      	ldr	r2, [r7, #8]
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	4413      	add	r3, r2
 800cec0:	7819      	ldrb	r1, [r3, #0]
 800cec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	4413      	add	r3, r2
 800cec8:	3334      	adds	r3, #52	@ 0x34
 800ceca:	460a      	mov	r2, r1
 800cecc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cece:	68ba      	ldr	r2, [r7, #8]
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	4413      	add	r3, r2
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d006      	beq.n	800cee8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	3301      	adds	r3, #1
 800cede:	61fb      	str	r3, [r7, #28]
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	2b0f      	cmp	r3, #15
 800cee4:	d9e9      	bls.n	800ceba <prvInitialiseNewTask+0x66>
 800cee6:	e000      	b.n	800ceea <prvInitialiseNewTask+0x96>
			{
				break;
 800cee8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ceea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceec:	2200      	movs	r2, #0
 800ceee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cef2:	e003      	b.n	800cefc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef6:	2200      	movs	r2, #0
 800cef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cefc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cefe:	2b37      	cmp	r3, #55	@ 0x37
 800cf00:	d901      	bls.n	800cf06 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cf02:	2337      	movs	r3, #55	@ 0x37
 800cf04:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cf06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf0a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cf0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf10:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cf12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf14:	2200      	movs	r2, #0
 800cf16:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cf18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf1a:	3304      	adds	r3, #4
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7ff f86d 	bl	800bffc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cf22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf24:	3318      	adds	r3, #24
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7ff f868 	bl	800bffc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cf2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cf38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cf3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf40:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cf42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf44:	2200      	movs	r2, #0
 800cf46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cf52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf54:	3354      	adds	r3, #84	@ 0x54
 800cf56:	224c      	movs	r2, #76	@ 0x4c
 800cf58:	2100      	movs	r1, #0
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f001 fe9a 	bl	800ec94 <memset>
 800cf60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf62:	4a0d      	ldr	r2, [pc, #52]	@ (800cf98 <prvInitialiseNewTask+0x144>)
 800cf64:	659a      	str	r2, [r3, #88]	@ 0x58
 800cf66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf68:	4a0c      	ldr	r2, [pc, #48]	@ (800cf9c <prvInitialiseNewTask+0x148>)
 800cf6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800cf6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf6e:	4a0c      	ldr	r2, [pc, #48]	@ (800cfa0 <prvInitialiseNewTask+0x14c>)
 800cf70:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf72:	683a      	ldr	r2, [r7, #0]
 800cf74:	68f9      	ldr	r1, [r7, #12]
 800cf76:	69b8      	ldr	r0, [r7, #24]
 800cf78:	f001 f95a 	bl	800e230 <pxPortInitialiseStack>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cf82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d002      	beq.n	800cf8e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf8e:	bf00      	nop
 800cf90:	3720      	adds	r7, #32
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	200029f0 	.word	0x200029f0
 800cf9c:	20002a58 	.word	0x20002a58
 800cfa0:	20002ac0 	.word	0x20002ac0

0800cfa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cfac:	f001 fa74 	bl	800e498 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cfb0:	4b2d      	ldr	r3, [pc, #180]	@ (800d068 <prvAddNewTaskToReadyList+0xc4>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	4a2c      	ldr	r2, [pc, #176]	@ (800d068 <prvAddNewTaskToReadyList+0xc4>)
 800cfb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cfba:	4b2c      	ldr	r3, [pc, #176]	@ (800d06c <prvAddNewTaskToReadyList+0xc8>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d109      	bne.n	800cfd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cfc2:	4a2a      	ldr	r2, [pc, #168]	@ (800d06c <prvAddNewTaskToReadyList+0xc8>)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cfc8:	4b27      	ldr	r3, [pc, #156]	@ (800d068 <prvAddNewTaskToReadyList+0xc4>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d110      	bne.n	800cff2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cfd0:	f000 fc2e 	bl	800d830 <prvInitialiseTaskLists>
 800cfd4:	e00d      	b.n	800cff2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cfd6:	4b26      	ldr	r3, [pc, #152]	@ (800d070 <prvAddNewTaskToReadyList+0xcc>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d109      	bne.n	800cff2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cfde:	4b23      	ldr	r3, [pc, #140]	@ (800d06c <prvAddNewTaskToReadyList+0xc8>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d802      	bhi.n	800cff2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cfec:	4a1f      	ldr	r2, [pc, #124]	@ (800d06c <prvAddNewTaskToReadyList+0xc8>)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cff2:	4b20      	ldr	r3, [pc, #128]	@ (800d074 <prvAddNewTaskToReadyList+0xd0>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	3301      	adds	r3, #1
 800cff8:	4a1e      	ldr	r2, [pc, #120]	@ (800d074 <prvAddNewTaskToReadyList+0xd0>)
 800cffa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cffc:	4b1d      	ldr	r3, [pc, #116]	@ (800d074 <prvAddNewTaskToReadyList+0xd0>)
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d008:	4b1b      	ldr	r3, [pc, #108]	@ (800d078 <prvAddNewTaskToReadyList+0xd4>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d903      	bls.n	800d018 <prvAddNewTaskToReadyList+0x74>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d014:	4a18      	ldr	r2, [pc, #96]	@ (800d078 <prvAddNewTaskToReadyList+0xd4>)
 800d016:	6013      	str	r3, [r2, #0]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d01c:	4613      	mov	r3, r2
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	4413      	add	r3, r2
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	4a15      	ldr	r2, [pc, #84]	@ (800d07c <prvAddNewTaskToReadyList+0xd8>)
 800d026:	441a      	add	r2, r3
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	3304      	adds	r3, #4
 800d02c:	4619      	mov	r1, r3
 800d02e:	4610      	mov	r0, r2
 800d030:	f7fe fff1 	bl	800c016 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d034:	f001 fa62 	bl	800e4fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d038:	4b0d      	ldr	r3, [pc, #52]	@ (800d070 <prvAddNewTaskToReadyList+0xcc>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d00e      	beq.n	800d05e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d040:	4b0a      	ldr	r3, [pc, #40]	@ (800d06c <prvAddNewTaskToReadyList+0xc8>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d207      	bcs.n	800d05e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d04e:	4b0c      	ldr	r3, [pc, #48]	@ (800d080 <prvAddNewTaskToReadyList+0xdc>)
 800d050:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d054:	601a      	str	r2, [r3, #0]
 800d056:	f3bf 8f4f 	dsb	sy
 800d05a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d05e:	bf00      	nop
 800d060:	3708      	adds	r7, #8
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop
 800d068:	200010f8 	.word	0x200010f8
 800d06c:	20000c24 	.word	0x20000c24
 800d070:	20001104 	.word	0x20001104
 800d074:	20001114 	.word	0x20001114
 800d078:	20001100 	.word	0x20001100
 800d07c:	20000c28 	.word	0x20000c28
 800d080:	e000ed04 	.word	0xe000ed04

0800d084 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d08c:	2300      	movs	r3, #0
 800d08e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d018      	beq.n	800d0c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d096:	4b14      	ldr	r3, [pc, #80]	@ (800d0e8 <vTaskDelay+0x64>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00b      	beq.n	800d0b6 <vTaskDelay+0x32>
	__asm volatile
 800d09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0a2:	f383 8811 	msr	BASEPRI, r3
 800d0a6:	f3bf 8f6f 	isb	sy
 800d0aa:	f3bf 8f4f 	dsb	sy
 800d0ae:	60bb      	str	r3, [r7, #8]
}
 800d0b0:	bf00      	nop
 800d0b2:	bf00      	nop
 800d0b4:	e7fd      	b.n	800d0b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d0b6:	f000 f88b 	bl	800d1d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d0ba:	2100      	movs	r1, #0
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 fd09 	bl	800dad4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d0c2:	f000 f893 	bl	800d1ec <xTaskResumeAll>
 800d0c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d107      	bne.n	800d0de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d0ce:	4b07      	ldr	r3, [pc, #28]	@ (800d0ec <vTaskDelay+0x68>)
 800d0d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0d4:	601a      	str	r2, [r3, #0]
 800d0d6:	f3bf 8f4f 	dsb	sy
 800d0da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0de:	bf00      	nop
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	20001120 	.word	0x20001120
 800d0ec:	e000ed04 	.word	0xe000ed04

0800d0f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b08a      	sub	sp, #40	@ 0x28
 800d0f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d0fe:	463a      	mov	r2, r7
 800d100:	1d39      	adds	r1, r7, #4
 800d102:	f107 0308 	add.w	r3, r7, #8
 800d106:	4618      	mov	r0, r3
 800d108:	f7fe ff24 	bl	800bf54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d10c:	6839      	ldr	r1, [r7, #0]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	68ba      	ldr	r2, [r7, #8]
 800d112:	9202      	str	r2, [sp, #8]
 800d114:	9301      	str	r3, [sp, #4]
 800d116:	2300      	movs	r3, #0
 800d118:	9300      	str	r3, [sp, #0]
 800d11a:	2300      	movs	r3, #0
 800d11c:	460a      	mov	r2, r1
 800d11e:	4924      	ldr	r1, [pc, #144]	@ (800d1b0 <vTaskStartScheduler+0xc0>)
 800d120:	4824      	ldr	r0, [pc, #144]	@ (800d1b4 <vTaskStartScheduler+0xc4>)
 800d122:	f7ff fdf1 	bl	800cd08 <xTaskCreateStatic>
 800d126:	4603      	mov	r3, r0
 800d128:	4a23      	ldr	r2, [pc, #140]	@ (800d1b8 <vTaskStartScheduler+0xc8>)
 800d12a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d12c:	4b22      	ldr	r3, [pc, #136]	@ (800d1b8 <vTaskStartScheduler+0xc8>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d002      	beq.n	800d13a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d134:	2301      	movs	r3, #1
 800d136:	617b      	str	r3, [r7, #20]
 800d138:	e001      	b.n	800d13e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d13a:	2300      	movs	r3, #0
 800d13c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	2b01      	cmp	r3, #1
 800d142:	d102      	bne.n	800d14a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d144:	f000 fd1a 	bl	800db7c <xTimerCreateTimerTask>
 800d148:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d11b      	bne.n	800d188 <vTaskStartScheduler+0x98>
	__asm volatile
 800d150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d154:	f383 8811 	msr	BASEPRI, r3
 800d158:	f3bf 8f6f 	isb	sy
 800d15c:	f3bf 8f4f 	dsb	sy
 800d160:	613b      	str	r3, [r7, #16]
}
 800d162:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d164:	4b15      	ldr	r3, [pc, #84]	@ (800d1bc <vTaskStartScheduler+0xcc>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	3354      	adds	r3, #84	@ 0x54
 800d16a:	4a15      	ldr	r2, [pc, #84]	@ (800d1c0 <vTaskStartScheduler+0xd0>)
 800d16c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d16e:	4b15      	ldr	r3, [pc, #84]	@ (800d1c4 <vTaskStartScheduler+0xd4>)
 800d170:	f04f 32ff 	mov.w	r2, #4294967295
 800d174:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d176:	4b14      	ldr	r3, [pc, #80]	@ (800d1c8 <vTaskStartScheduler+0xd8>)
 800d178:	2201      	movs	r2, #1
 800d17a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d17c:	4b13      	ldr	r3, [pc, #76]	@ (800d1cc <vTaskStartScheduler+0xdc>)
 800d17e:	2200      	movs	r2, #0
 800d180:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d182:	f001 f8e5 	bl	800e350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d186:	e00f      	b.n	800d1a8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d18e:	d10b      	bne.n	800d1a8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d194:	f383 8811 	msr	BASEPRI, r3
 800d198:	f3bf 8f6f 	isb	sy
 800d19c:	f3bf 8f4f 	dsb	sy
 800d1a0:	60fb      	str	r3, [r7, #12]
}
 800d1a2:	bf00      	nop
 800d1a4:	bf00      	nop
 800d1a6:	e7fd      	b.n	800d1a4 <vTaskStartScheduler+0xb4>
}
 800d1a8:	bf00      	nop
 800d1aa:	3718      	adds	r7, #24
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}
 800d1b0:	0800f5e4 	.word	0x0800f5e4
 800d1b4:	0800d801 	.word	0x0800d801
 800d1b8:	2000111c 	.word	0x2000111c
 800d1bc:	20000c24 	.word	0x20000c24
 800d1c0:	2000003c 	.word	0x2000003c
 800d1c4:	20001118 	.word	0x20001118
 800d1c8:	20001104 	.word	0x20001104
 800d1cc:	200010fc 	.word	0x200010fc

0800d1d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d1d4:	4b04      	ldr	r3, [pc, #16]	@ (800d1e8 <vTaskSuspendAll+0x18>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	4a03      	ldr	r2, [pc, #12]	@ (800d1e8 <vTaskSuspendAll+0x18>)
 800d1dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d1de:	bf00      	nop
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr
 800d1e8:	20001120 	.word	0x20001120

0800d1ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d1fa:	4b42      	ldr	r3, [pc, #264]	@ (800d304 <xTaskResumeAll+0x118>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d10b      	bne.n	800d21a <xTaskResumeAll+0x2e>
	__asm volatile
 800d202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d206:	f383 8811 	msr	BASEPRI, r3
 800d20a:	f3bf 8f6f 	isb	sy
 800d20e:	f3bf 8f4f 	dsb	sy
 800d212:	603b      	str	r3, [r7, #0]
}
 800d214:	bf00      	nop
 800d216:	bf00      	nop
 800d218:	e7fd      	b.n	800d216 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d21a:	f001 f93d 	bl	800e498 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d21e:	4b39      	ldr	r3, [pc, #228]	@ (800d304 <xTaskResumeAll+0x118>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	3b01      	subs	r3, #1
 800d224:	4a37      	ldr	r2, [pc, #220]	@ (800d304 <xTaskResumeAll+0x118>)
 800d226:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d228:	4b36      	ldr	r3, [pc, #216]	@ (800d304 <xTaskResumeAll+0x118>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d162      	bne.n	800d2f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d230:	4b35      	ldr	r3, [pc, #212]	@ (800d308 <xTaskResumeAll+0x11c>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d05e      	beq.n	800d2f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d238:	e02f      	b.n	800d29a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d23a:	4b34      	ldr	r3, [pc, #208]	@ (800d30c <xTaskResumeAll+0x120>)
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	68db      	ldr	r3, [r3, #12]
 800d240:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	3318      	adds	r3, #24
 800d246:	4618      	mov	r0, r3
 800d248:	f7fe ff42 	bl	800c0d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	3304      	adds	r3, #4
 800d250:	4618      	mov	r0, r3
 800d252:	f7fe ff3d 	bl	800c0d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d25a:	4b2d      	ldr	r3, [pc, #180]	@ (800d310 <xTaskResumeAll+0x124>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d903      	bls.n	800d26a <xTaskResumeAll+0x7e>
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d266:	4a2a      	ldr	r2, [pc, #168]	@ (800d310 <xTaskResumeAll+0x124>)
 800d268:	6013      	str	r3, [r2, #0]
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d26e:	4613      	mov	r3, r2
 800d270:	009b      	lsls	r3, r3, #2
 800d272:	4413      	add	r3, r2
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4a27      	ldr	r2, [pc, #156]	@ (800d314 <xTaskResumeAll+0x128>)
 800d278:	441a      	add	r2, r3
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	3304      	adds	r3, #4
 800d27e:	4619      	mov	r1, r3
 800d280:	4610      	mov	r0, r2
 800d282:	f7fe fec8 	bl	800c016 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d28a:	4b23      	ldr	r3, [pc, #140]	@ (800d318 <xTaskResumeAll+0x12c>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d290:	429a      	cmp	r2, r3
 800d292:	d302      	bcc.n	800d29a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d294:	4b21      	ldr	r3, [pc, #132]	@ (800d31c <xTaskResumeAll+0x130>)
 800d296:	2201      	movs	r2, #1
 800d298:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d29a:	4b1c      	ldr	r3, [pc, #112]	@ (800d30c <xTaskResumeAll+0x120>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d1cb      	bne.n	800d23a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d001      	beq.n	800d2ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d2a8:	f000 fb66 	bl	800d978 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d2ac:	4b1c      	ldr	r3, [pc, #112]	@ (800d320 <xTaskResumeAll+0x134>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d010      	beq.n	800d2da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d2b8:	f000 f846 	bl	800d348 <xTaskIncrementTick>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d002      	beq.n	800d2c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d2c2:	4b16      	ldr	r3, [pc, #88]	@ (800d31c <xTaskResumeAll+0x130>)
 800d2c4:	2201      	movs	r2, #1
 800d2c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d1f1      	bne.n	800d2b8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d2d4:	4b12      	ldr	r3, [pc, #72]	@ (800d320 <xTaskResumeAll+0x134>)
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d2da:	4b10      	ldr	r3, [pc, #64]	@ (800d31c <xTaskResumeAll+0x130>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d009      	beq.n	800d2f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d2e6:	4b0f      	ldr	r3, [pc, #60]	@ (800d324 <xTaskResumeAll+0x138>)
 800d2e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2ec:	601a      	str	r2, [r3, #0]
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d2f6:	f001 f901 	bl	800e4fc <vPortExitCritical>

	return xAlreadyYielded;
 800d2fa:	68bb      	ldr	r3, [r7, #8]
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3710      	adds	r7, #16
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	20001120 	.word	0x20001120
 800d308:	200010f8 	.word	0x200010f8
 800d30c:	200010b8 	.word	0x200010b8
 800d310:	20001100 	.word	0x20001100
 800d314:	20000c28 	.word	0x20000c28
 800d318:	20000c24 	.word	0x20000c24
 800d31c:	2000110c 	.word	0x2000110c
 800d320:	20001108 	.word	0x20001108
 800d324:	e000ed04 	.word	0xe000ed04

0800d328 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d32e:	4b05      	ldr	r3, [pc, #20]	@ (800d344 <xTaskGetTickCount+0x1c>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d334:	687b      	ldr	r3, [r7, #4]
}
 800d336:	4618      	mov	r0, r3
 800d338:	370c      	adds	r7, #12
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop
 800d344:	200010fc 	.word	0x200010fc

0800d348 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b086      	sub	sp, #24
 800d34c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d34e:	2300      	movs	r3, #0
 800d350:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d352:	4b4f      	ldr	r3, [pc, #316]	@ (800d490 <xTaskIncrementTick+0x148>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	f040 8090 	bne.w	800d47c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d35c:	4b4d      	ldr	r3, [pc, #308]	@ (800d494 <xTaskIncrementTick+0x14c>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	3301      	adds	r3, #1
 800d362:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d364:	4a4b      	ldr	r2, [pc, #300]	@ (800d494 <xTaskIncrementTick+0x14c>)
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d121      	bne.n	800d3b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d370:	4b49      	ldr	r3, [pc, #292]	@ (800d498 <xTaskIncrementTick+0x150>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00b      	beq.n	800d392 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d37e:	f383 8811 	msr	BASEPRI, r3
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	f3bf 8f4f 	dsb	sy
 800d38a:	603b      	str	r3, [r7, #0]
}
 800d38c:	bf00      	nop
 800d38e:	bf00      	nop
 800d390:	e7fd      	b.n	800d38e <xTaskIncrementTick+0x46>
 800d392:	4b41      	ldr	r3, [pc, #260]	@ (800d498 <xTaskIncrementTick+0x150>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	60fb      	str	r3, [r7, #12]
 800d398:	4b40      	ldr	r3, [pc, #256]	@ (800d49c <xTaskIncrementTick+0x154>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4a3e      	ldr	r2, [pc, #248]	@ (800d498 <xTaskIncrementTick+0x150>)
 800d39e:	6013      	str	r3, [r2, #0]
 800d3a0:	4a3e      	ldr	r2, [pc, #248]	@ (800d49c <xTaskIncrementTick+0x154>)
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	6013      	str	r3, [r2, #0]
 800d3a6:	4b3e      	ldr	r3, [pc, #248]	@ (800d4a0 <xTaskIncrementTick+0x158>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	4a3c      	ldr	r2, [pc, #240]	@ (800d4a0 <xTaskIncrementTick+0x158>)
 800d3ae:	6013      	str	r3, [r2, #0]
 800d3b0:	f000 fae2 	bl	800d978 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d3b4:	4b3b      	ldr	r3, [pc, #236]	@ (800d4a4 <xTaskIncrementTick+0x15c>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	693a      	ldr	r2, [r7, #16]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d349      	bcc.n	800d452 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d3be:	4b36      	ldr	r3, [pc, #216]	@ (800d498 <xTaskIncrementTick+0x150>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d104      	bne.n	800d3d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3c8:	4b36      	ldr	r3, [pc, #216]	@ (800d4a4 <xTaskIncrementTick+0x15c>)
 800d3ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ce:	601a      	str	r2, [r3, #0]
					break;
 800d3d0:	e03f      	b.n	800d452 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3d2:	4b31      	ldr	r3, [pc, #196]	@ (800d498 <xTaskIncrementTick+0x150>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	68db      	ldr	r3, [r3, #12]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d3e2:	693a      	ldr	r2, [r7, #16]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d203      	bcs.n	800d3f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d3ea:	4a2e      	ldr	r2, [pc, #184]	@ (800d4a4 <xTaskIncrementTick+0x15c>)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d3f0:	e02f      	b.n	800d452 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	3304      	adds	r3, #4
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7fe fe6a 	bl	800c0d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d400:	2b00      	cmp	r3, #0
 800d402:	d004      	beq.n	800d40e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	3318      	adds	r3, #24
 800d408:	4618      	mov	r0, r3
 800d40a:	f7fe fe61 	bl	800c0d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d412:	4b25      	ldr	r3, [pc, #148]	@ (800d4a8 <xTaskIncrementTick+0x160>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	429a      	cmp	r2, r3
 800d418:	d903      	bls.n	800d422 <xTaskIncrementTick+0xda>
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d41e:	4a22      	ldr	r2, [pc, #136]	@ (800d4a8 <xTaskIncrementTick+0x160>)
 800d420:	6013      	str	r3, [r2, #0]
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d426:	4613      	mov	r3, r2
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	4413      	add	r3, r2
 800d42c:	009b      	lsls	r3, r3, #2
 800d42e:	4a1f      	ldr	r2, [pc, #124]	@ (800d4ac <xTaskIncrementTick+0x164>)
 800d430:	441a      	add	r2, r3
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	3304      	adds	r3, #4
 800d436:	4619      	mov	r1, r3
 800d438:	4610      	mov	r0, r2
 800d43a:	f7fe fdec 	bl	800c016 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d442:	4b1b      	ldr	r3, [pc, #108]	@ (800d4b0 <xTaskIncrementTick+0x168>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d448:	429a      	cmp	r2, r3
 800d44a:	d3b8      	bcc.n	800d3be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d44c:	2301      	movs	r3, #1
 800d44e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d450:	e7b5      	b.n	800d3be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d452:	4b17      	ldr	r3, [pc, #92]	@ (800d4b0 <xTaskIncrementTick+0x168>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d458:	4914      	ldr	r1, [pc, #80]	@ (800d4ac <xTaskIncrementTick+0x164>)
 800d45a:	4613      	mov	r3, r2
 800d45c:	009b      	lsls	r3, r3, #2
 800d45e:	4413      	add	r3, r2
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	440b      	add	r3, r1
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2b01      	cmp	r3, #1
 800d468:	d901      	bls.n	800d46e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d46a:	2301      	movs	r3, #1
 800d46c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d46e:	4b11      	ldr	r3, [pc, #68]	@ (800d4b4 <xTaskIncrementTick+0x16c>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d007      	beq.n	800d486 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d476:	2301      	movs	r3, #1
 800d478:	617b      	str	r3, [r7, #20]
 800d47a:	e004      	b.n	800d486 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d47c:	4b0e      	ldr	r3, [pc, #56]	@ (800d4b8 <xTaskIncrementTick+0x170>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	3301      	adds	r3, #1
 800d482:	4a0d      	ldr	r2, [pc, #52]	@ (800d4b8 <xTaskIncrementTick+0x170>)
 800d484:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d486:	697b      	ldr	r3, [r7, #20]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3718      	adds	r7, #24
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	20001120 	.word	0x20001120
 800d494:	200010fc 	.word	0x200010fc
 800d498:	200010b0 	.word	0x200010b0
 800d49c:	200010b4 	.word	0x200010b4
 800d4a0:	20001110 	.word	0x20001110
 800d4a4:	20001118 	.word	0x20001118
 800d4a8:	20001100 	.word	0x20001100
 800d4ac:	20000c28 	.word	0x20000c28
 800d4b0:	20000c24 	.word	0x20000c24
 800d4b4:	2000110c 	.word	0x2000110c
 800d4b8:	20001108 	.word	0x20001108

0800d4bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b085      	sub	sp, #20
 800d4c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d4c2:	4b2b      	ldr	r3, [pc, #172]	@ (800d570 <vTaskSwitchContext+0xb4>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d003      	beq.n	800d4d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d4ca:	4b2a      	ldr	r3, [pc, #168]	@ (800d574 <vTaskSwitchContext+0xb8>)
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d4d0:	e047      	b.n	800d562 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d4d2:	4b28      	ldr	r3, [pc, #160]	@ (800d574 <vTaskSwitchContext+0xb8>)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4d8:	4b27      	ldr	r3, [pc, #156]	@ (800d578 <vTaskSwitchContext+0xbc>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	60fb      	str	r3, [r7, #12]
 800d4de:	e011      	b.n	800d504 <vTaskSwitchContext+0x48>
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d10b      	bne.n	800d4fe <vTaskSwitchContext+0x42>
	__asm volatile
 800d4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ea:	f383 8811 	msr	BASEPRI, r3
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	f3bf 8f4f 	dsb	sy
 800d4f6:	607b      	str	r3, [r7, #4]
}
 800d4f8:	bf00      	nop
 800d4fa:	bf00      	nop
 800d4fc:	e7fd      	b.n	800d4fa <vTaskSwitchContext+0x3e>
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	3b01      	subs	r3, #1
 800d502:	60fb      	str	r3, [r7, #12]
 800d504:	491d      	ldr	r1, [pc, #116]	@ (800d57c <vTaskSwitchContext+0xc0>)
 800d506:	68fa      	ldr	r2, [r7, #12]
 800d508:	4613      	mov	r3, r2
 800d50a:	009b      	lsls	r3, r3, #2
 800d50c:	4413      	add	r3, r2
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	440b      	add	r3, r1
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d0e3      	beq.n	800d4e0 <vTaskSwitchContext+0x24>
 800d518:	68fa      	ldr	r2, [r7, #12]
 800d51a:	4613      	mov	r3, r2
 800d51c:	009b      	lsls	r3, r3, #2
 800d51e:	4413      	add	r3, r2
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	4a16      	ldr	r2, [pc, #88]	@ (800d57c <vTaskSwitchContext+0xc0>)
 800d524:	4413      	add	r3, r2
 800d526:	60bb      	str	r3, [r7, #8]
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	685a      	ldr	r2, [r3, #4]
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	605a      	str	r2, [r3, #4]
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	685a      	ldr	r2, [r3, #4]
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	3308      	adds	r3, #8
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d104      	bne.n	800d548 <vTaskSwitchContext+0x8c>
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	685a      	ldr	r2, [r3, #4]
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	605a      	str	r2, [r3, #4]
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	4a0c      	ldr	r2, [pc, #48]	@ (800d580 <vTaskSwitchContext+0xc4>)
 800d550:	6013      	str	r3, [r2, #0]
 800d552:	4a09      	ldr	r2, [pc, #36]	@ (800d578 <vTaskSwitchContext+0xbc>)
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d558:	4b09      	ldr	r3, [pc, #36]	@ (800d580 <vTaskSwitchContext+0xc4>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	3354      	adds	r3, #84	@ 0x54
 800d55e:	4a09      	ldr	r2, [pc, #36]	@ (800d584 <vTaskSwitchContext+0xc8>)
 800d560:	6013      	str	r3, [r2, #0]
}
 800d562:	bf00      	nop
 800d564:	3714      	adds	r7, #20
 800d566:	46bd      	mov	sp, r7
 800d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop
 800d570:	20001120 	.word	0x20001120
 800d574:	2000110c 	.word	0x2000110c
 800d578:	20001100 	.word	0x20001100
 800d57c:	20000c28 	.word	0x20000c28
 800d580:	20000c24 	.word	0x20000c24
 800d584:	2000003c 	.word	0x2000003c

0800d588 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b084      	sub	sp, #16
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d10b      	bne.n	800d5b0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d59c:	f383 8811 	msr	BASEPRI, r3
 800d5a0:	f3bf 8f6f 	isb	sy
 800d5a4:	f3bf 8f4f 	dsb	sy
 800d5a8:	60fb      	str	r3, [r7, #12]
}
 800d5aa:	bf00      	nop
 800d5ac:	bf00      	nop
 800d5ae:	e7fd      	b.n	800d5ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5b0:	4b07      	ldr	r3, [pc, #28]	@ (800d5d0 <vTaskPlaceOnEventList+0x48>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	3318      	adds	r3, #24
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f7fe fd50 	bl	800c05e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d5be:	2101      	movs	r1, #1
 800d5c0:	6838      	ldr	r0, [r7, #0]
 800d5c2:	f000 fa87 	bl	800dad4 <prvAddCurrentTaskToDelayedList>
}
 800d5c6:	bf00      	nop
 800d5c8:	3710      	adds	r7, #16
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	20000c24 	.word	0x20000c24

0800d5d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b086      	sub	sp, #24
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d10b      	bne.n	800d5fe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ea:	f383 8811 	msr	BASEPRI, r3
 800d5ee:	f3bf 8f6f 	isb	sy
 800d5f2:	f3bf 8f4f 	dsb	sy
 800d5f6:	617b      	str	r3, [r7, #20]
}
 800d5f8:	bf00      	nop
 800d5fa:	bf00      	nop
 800d5fc:	e7fd      	b.n	800d5fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5fe:	4b0a      	ldr	r3, [pc, #40]	@ (800d628 <vTaskPlaceOnEventListRestricted+0x54>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	3318      	adds	r3, #24
 800d604:	4619      	mov	r1, r3
 800d606:	68f8      	ldr	r0, [r7, #12]
 800d608:	f7fe fd05 	bl	800c016 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d002      	beq.n	800d618 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d612:	f04f 33ff 	mov.w	r3, #4294967295
 800d616:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d618:	6879      	ldr	r1, [r7, #4]
 800d61a:	68b8      	ldr	r0, [r7, #8]
 800d61c:	f000 fa5a 	bl	800dad4 <prvAddCurrentTaskToDelayedList>
	}
 800d620:	bf00      	nop
 800d622:	3718      	adds	r7, #24
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}
 800d628:	20000c24 	.word	0x20000c24

0800d62c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b086      	sub	sp, #24
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	68db      	ldr	r3, [r3, #12]
 800d63a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d10b      	bne.n	800d65a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d646:	f383 8811 	msr	BASEPRI, r3
 800d64a:	f3bf 8f6f 	isb	sy
 800d64e:	f3bf 8f4f 	dsb	sy
 800d652:	60fb      	str	r3, [r7, #12]
}
 800d654:	bf00      	nop
 800d656:	bf00      	nop
 800d658:	e7fd      	b.n	800d656 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	3318      	adds	r3, #24
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fe fd36 	bl	800c0d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d664:	4b1d      	ldr	r3, [pc, #116]	@ (800d6dc <xTaskRemoveFromEventList+0xb0>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d11d      	bne.n	800d6a8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	3304      	adds	r3, #4
 800d670:	4618      	mov	r0, r3
 800d672:	f7fe fd2d 	bl	800c0d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d67a:	4b19      	ldr	r3, [pc, #100]	@ (800d6e0 <xTaskRemoveFromEventList+0xb4>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	429a      	cmp	r2, r3
 800d680:	d903      	bls.n	800d68a <xTaskRemoveFromEventList+0x5e>
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d686:	4a16      	ldr	r2, [pc, #88]	@ (800d6e0 <xTaskRemoveFromEventList+0xb4>)
 800d688:	6013      	str	r3, [r2, #0]
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d68e:	4613      	mov	r3, r2
 800d690:	009b      	lsls	r3, r3, #2
 800d692:	4413      	add	r3, r2
 800d694:	009b      	lsls	r3, r3, #2
 800d696:	4a13      	ldr	r2, [pc, #76]	@ (800d6e4 <xTaskRemoveFromEventList+0xb8>)
 800d698:	441a      	add	r2, r3
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	3304      	adds	r3, #4
 800d69e:	4619      	mov	r1, r3
 800d6a0:	4610      	mov	r0, r2
 800d6a2:	f7fe fcb8 	bl	800c016 <vListInsertEnd>
 800d6a6:	e005      	b.n	800d6b4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	3318      	adds	r3, #24
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	480e      	ldr	r0, [pc, #56]	@ (800d6e8 <xTaskRemoveFromEventList+0xbc>)
 800d6b0:	f7fe fcb1 	bl	800c016 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6b8:	4b0c      	ldr	r3, [pc, #48]	@ (800d6ec <xTaskRemoveFromEventList+0xc0>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d905      	bls.n	800d6ce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d6c6:	4b0a      	ldr	r3, [pc, #40]	@ (800d6f0 <xTaskRemoveFromEventList+0xc4>)
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	601a      	str	r2, [r3, #0]
 800d6cc:	e001      	b.n	800d6d2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d6d2:	697b      	ldr	r3, [r7, #20]
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3718      	adds	r7, #24
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	20001120 	.word	0x20001120
 800d6e0:	20001100 	.word	0x20001100
 800d6e4:	20000c28 	.word	0x20000c28
 800d6e8:	200010b8 	.word	0x200010b8
 800d6ec:	20000c24 	.word	0x20000c24
 800d6f0:	2000110c 	.word	0x2000110c

0800d6f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d6fc:	4b06      	ldr	r3, [pc, #24]	@ (800d718 <vTaskInternalSetTimeOutState+0x24>)
 800d6fe:	681a      	ldr	r2, [r3, #0]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d704:	4b05      	ldr	r3, [pc, #20]	@ (800d71c <vTaskInternalSetTimeOutState+0x28>)
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	605a      	str	r2, [r3, #4]
}
 800d70c:	bf00      	nop
 800d70e:	370c      	adds	r7, #12
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr
 800d718:	20001110 	.word	0x20001110
 800d71c:	200010fc 	.word	0x200010fc

0800d720 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b088      	sub	sp, #32
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d10b      	bne.n	800d748 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d734:	f383 8811 	msr	BASEPRI, r3
 800d738:	f3bf 8f6f 	isb	sy
 800d73c:	f3bf 8f4f 	dsb	sy
 800d740:	613b      	str	r3, [r7, #16]
}
 800d742:	bf00      	nop
 800d744:	bf00      	nop
 800d746:	e7fd      	b.n	800d744 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d10b      	bne.n	800d766 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d752:	f383 8811 	msr	BASEPRI, r3
 800d756:	f3bf 8f6f 	isb	sy
 800d75a:	f3bf 8f4f 	dsb	sy
 800d75e:	60fb      	str	r3, [r7, #12]
}
 800d760:	bf00      	nop
 800d762:	bf00      	nop
 800d764:	e7fd      	b.n	800d762 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d766:	f000 fe97 	bl	800e498 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d76a:	4b1d      	ldr	r3, [pc, #116]	@ (800d7e0 <xTaskCheckForTimeOut+0xc0>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	69ba      	ldr	r2, [r7, #24]
 800d776:	1ad3      	subs	r3, r2, r3
 800d778:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d782:	d102      	bne.n	800d78a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d784:	2300      	movs	r3, #0
 800d786:	61fb      	str	r3, [r7, #28]
 800d788:	e023      	b.n	800d7d2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681a      	ldr	r2, [r3, #0]
 800d78e:	4b15      	ldr	r3, [pc, #84]	@ (800d7e4 <xTaskCheckForTimeOut+0xc4>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	429a      	cmp	r2, r3
 800d794:	d007      	beq.n	800d7a6 <xTaskCheckForTimeOut+0x86>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	69ba      	ldr	r2, [r7, #24]
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d302      	bcc.n	800d7a6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	61fb      	str	r3, [r7, #28]
 800d7a4:	e015      	b.n	800d7d2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	697a      	ldr	r2, [r7, #20]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d20b      	bcs.n	800d7c8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	1ad2      	subs	r2, r2, r3
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f7ff ff99 	bl	800d6f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	61fb      	str	r3, [r7, #28]
 800d7c6:	e004      	b.n	800d7d2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d7d2:	f000 fe93 	bl	800e4fc <vPortExitCritical>

	return xReturn;
 800d7d6:	69fb      	ldr	r3, [r7, #28]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3720      	adds	r7, #32
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	200010fc 	.word	0x200010fc
 800d7e4:	20001110 	.word	0x20001110

0800d7e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d7ec:	4b03      	ldr	r3, [pc, #12]	@ (800d7fc <vTaskMissedYield+0x14>)
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	601a      	str	r2, [r3, #0]
}
 800d7f2:	bf00      	nop
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr
 800d7fc:	2000110c 	.word	0x2000110c

0800d800 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d808:	f000 f852 	bl	800d8b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d80c:	4b06      	ldr	r3, [pc, #24]	@ (800d828 <prvIdleTask+0x28>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2b01      	cmp	r3, #1
 800d812:	d9f9      	bls.n	800d808 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d814:	4b05      	ldr	r3, [pc, #20]	@ (800d82c <prvIdleTask+0x2c>)
 800d816:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d81a:	601a      	str	r2, [r3, #0]
 800d81c:	f3bf 8f4f 	dsb	sy
 800d820:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d824:	e7f0      	b.n	800d808 <prvIdleTask+0x8>
 800d826:	bf00      	nop
 800d828:	20000c28 	.word	0x20000c28
 800d82c:	e000ed04 	.word	0xe000ed04

0800d830 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d836:	2300      	movs	r3, #0
 800d838:	607b      	str	r3, [r7, #4]
 800d83a:	e00c      	b.n	800d856 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	4613      	mov	r3, r2
 800d840:	009b      	lsls	r3, r3, #2
 800d842:	4413      	add	r3, r2
 800d844:	009b      	lsls	r3, r3, #2
 800d846:	4a12      	ldr	r2, [pc, #72]	@ (800d890 <prvInitialiseTaskLists+0x60>)
 800d848:	4413      	add	r3, r2
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7fe fbb6 	bl	800bfbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	3301      	adds	r3, #1
 800d854:	607b      	str	r3, [r7, #4]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2b37      	cmp	r3, #55	@ 0x37
 800d85a:	d9ef      	bls.n	800d83c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d85c:	480d      	ldr	r0, [pc, #52]	@ (800d894 <prvInitialiseTaskLists+0x64>)
 800d85e:	f7fe fbad 	bl	800bfbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d862:	480d      	ldr	r0, [pc, #52]	@ (800d898 <prvInitialiseTaskLists+0x68>)
 800d864:	f7fe fbaa 	bl	800bfbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d868:	480c      	ldr	r0, [pc, #48]	@ (800d89c <prvInitialiseTaskLists+0x6c>)
 800d86a:	f7fe fba7 	bl	800bfbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d86e:	480c      	ldr	r0, [pc, #48]	@ (800d8a0 <prvInitialiseTaskLists+0x70>)
 800d870:	f7fe fba4 	bl	800bfbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d874:	480b      	ldr	r0, [pc, #44]	@ (800d8a4 <prvInitialiseTaskLists+0x74>)
 800d876:	f7fe fba1 	bl	800bfbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d87a:	4b0b      	ldr	r3, [pc, #44]	@ (800d8a8 <prvInitialiseTaskLists+0x78>)
 800d87c:	4a05      	ldr	r2, [pc, #20]	@ (800d894 <prvInitialiseTaskLists+0x64>)
 800d87e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d880:	4b0a      	ldr	r3, [pc, #40]	@ (800d8ac <prvInitialiseTaskLists+0x7c>)
 800d882:	4a05      	ldr	r2, [pc, #20]	@ (800d898 <prvInitialiseTaskLists+0x68>)
 800d884:	601a      	str	r2, [r3, #0]
}
 800d886:	bf00      	nop
 800d888:	3708      	adds	r7, #8
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	20000c28 	.word	0x20000c28
 800d894:	20001088 	.word	0x20001088
 800d898:	2000109c 	.word	0x2000109c
 800d89c:	200010b8 	.word	0x200010b8
 800d8a0:	200010cc 	.word	0x200010cc
 800d8a4:	200010e4 	.word	0x200010e4
 800d8a8:	200010b0 	.word	0x200010b0
 800d8ac:	200010b4 	.word	0x200010b4

0800d8b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8b6:	e019      	b.n	800d8ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d8b8:	f000 fdee 	bl	800e498 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8bc:	4b10      	ldr	r3, [pc, #64]	@ (800d900 <prvCheckTasksWaitingTermination+0x50>)
 800d8be:	68db      	ldr	r3, [r3, #12]
 800d8c0:	68db      	ldr	r3, [r3, #12]
 800d8c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	3304      	adds	r3, #4
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7fe fc01 	bl	800c0d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d8ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d904 <prvCheckTasksWaitingTermination+0x54>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	3b01      	subs	r3, #1
 800d8d4:	4a0b      	ldr	r2, [pc, #44]	@ (800d904 <prvCheckTasksWaitingTermination+0x54>)
 800d8d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d8d8:	4b0b      	ldr	r3, [pc, #44]	@ (800d908 <prvCheckTasksWaitingTermination+0x58>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	4a0a      	ldr	r2, [pc, #40]	@ (800d908 <prvCheckTasksWaitingTermination+0x58>)
 800d8e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d8e2:	f000 fe0b 	bl	800e4fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 f810 	bl	800d90c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8ec:	4b06      	ldr	r3, [pc, #24]	@ (800d908 <prvCheckTasksWaitingTermination+0x58>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1e1      	bne.n	800d8b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d8f4:	bf00      	nop
 800d8f6:	bf00      	nop
 800d8f8:	3708      	adds	r7, #8
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	200010cc 	.word	0x200010cc
 800d904:	200010f8 	.word	0x200010f8
 800d908:	200010e0 	.word	0x200010e0

0800d90c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	3354      	adds	r3, #84	@ 0x54
 800d918:	4618      	mov	r0, r3
 800d91a:	f001 f9c3 	bl	800eca4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d924:	2b00      	cmp	r3, #0
 800d926:	d108      	bne.n	800d93a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d92c:	4618      	mov	r0, r3
 800d92e:	f000 ffa3 	bl	800e878 <vPortFree>
				vPortFree( pxTCB );
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 ffa0 	bl	800e878 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d938:	e019      	b.n	800d96e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d940:	2b01      	cmp	r3, #1
 800d942:	d103      	bne.n	800d94c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f000 ff97 	bl	800e878 <vPortFree>
	}
 800d94a:	e010      	b.n	800d96e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d952:	2b02      	cmp	r3, #2
 800d954:	d00b      	beq.n	800d96e <prvDeleteTCB+0x62>
	__asm volatile
 800d956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d95a:	f383 8811 	msr	BASEPRI, r3
 800d95e:	f3bf 8f6f 	isb	sy
 800d962:	f3bf 8f4f 	dsb	sy
 800d966:	60fb      	str	r3, [r7, #12]
}
 800d968:	bf00      	nop
 800d96a:	bf00      	nop
 800d96c:	e7fd      	b.n	800d96a <prvDeleteTCB+0x5e>
	}
 800d96e:	bf00      	nop
 800d970:	3710      	adds	r7, #16
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
	...

0800d978 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d978:	b480      	push	{r7}
 800d97a:	b083      	sub	sp, #12
 800d97c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d97e:	4b0c      	ldr	r3, [pc, #48]	@ (800d9b0 <prvResetNextTaskUnblockTime+0x38>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d104      	bne.n	800d992 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d988:	4b0a      	ldr	r3, [pc, #40]	@ (800d9b4 <prvResetNextTaskUnblockTime+0x3c>)
 800d98a:	f04f 32ff 	mov.w	r2, #4294967295
 800d98e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d990:	e008      	b.n	800d9a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d992:	4b07      	ldr	r3, [pc, #28]	@ (800d9b0 <prvResetNextTaskUnblockTime+0x38>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	68db      	ldr	r3, [r3, #12]
 800d99a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	4a04      	ldr	r2, [pc, #16]	@ (800d9b4 <prvResetNextTaskUnblockTime+0x3c>)
 800d9a2:	6013      	str	r3, [r2, #0]
}
 800d9a4:	bf00      	nop
 800d9a6:	370c      	adds	r7, #12
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr
 800d9b0:	200010b0 	.word	0x200010b0
 800d9b4:	20001118 	.word	0x20001118

0800d9b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b083      	sub	sp, #12
 800d9bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d9be:	4b0b      	ldr	r3, [pc, #44]	@ (800d9ec <xTaskGetSchedulerState+0x34>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d102      	bne.n	800d9cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	607b      	str	r3, [r7, #4]
 800d9ca:	e008      	b.n	800d9de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9cc:	4b08      	ldr	r3, [pc, #32]	@ (800d9f0 <xTaskGetSchedulerState+0x38>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d102      	bne.n	800d9da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d9d4:	2302      	movs	r3, #2
 800d9d6:	607b      	str	r3, [r7, #4]
 800d9d8:	e001      	b.n	800d9de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d9de:	687b      	ldr	r3, [r7, #4]
	}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	370c      	adds	r7, #12
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr
 800d9ec:	20001104 	.word	0x20001104
 800d9f0:	20001120 	.word	0x20001120

0800d9f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b086      	sub	sp, #24
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800da00:	2300      	movs	r3, #0
 800da02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d058      	beq.n	800dabc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800da0a:	4b2f      	ldr	r3, [pc, #188]	@ (800dac8 <xTaskPriorityDisinherit+0xd4>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	693a      	ldr	r2, [r7, #16]
 800da10:	429a      	cmp	r2, r3
 800da12:	d00b      	beq.n	800da2c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800da14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da18:	f383 8811 	msr	BASEPRI, r3
 800da1c:	f3bf 8f6f 	isb	sy
 800da20:	f3bf 8f4f 	dsb	sy
 800da24:	60fb      	str	r3, [r7, #12]
}
 800da26:	bf00      	nop
 800da28:	bf00      	nop
 800da2a:	e7fd      	b.n	800da28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da30:	2b00      	cmp	r3, #0
 800da32:	d10b      	bne.n	800da4c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800da34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da38:	f383 8811 	msr	BASEPRI, r3
 800da3c:	f3bf 8f6f 	isb	sy
 800da40:	f3bf 8f4f 	dsb	sy
 800da44:	60bb      	str	r3, [r7, #8]
}
 800da46:	bf00      	nop
 800da48:	bf00      	nop
 800da4a:	e7fd      	b.n	800da48 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da50:	1e5a      	subs	r2, r3, #1
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da5e:	429a      	cmp	r2, r3
 800da60:	d02c      	beq.n	800dabc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da66:	2b00      	cmp	r3, #0
 800da68:	d128      	bne.n	800dabc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	3304      	adds	r3, #4
 800da6e:	4618      	mov	r0, r3
 800da70:	f7fe fb2e 	bl	800c0d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da8c:	4b0f      	ldr	r3, [pc, #60]	@ (800dacc <xTaskPriorityDisinherit+0xd8>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	429a      	cmp	r2, r3
 800da92:	d903      	bls.n	800da9c <xTaskPriorityDisinherit+0xa8>
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da98:	4a0c      	ldr	r2, [pc, #48]	@ (800dacc <xTaskPriorityDisinherit+0xd8>)
 800da9a:	6013      	str	r3, [r2, #0]
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daa0:	4613      	mov	r3, r2
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	4413      	add	r3, r2
 800daa6:	009b      	lsls	r3, r3, #2
 800daa8:	4a09      	ldr	r2, [pc, #36]	@ (800dad0 <xTaskPriorityDisinherit+0xdc>)
 800daaa:	441a      	add	r2, r3
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	3304      	adds	r3, #4
 800dab0:	4619      	mov	r1, r3
 800dab2:	4610      	mov	r0, r2
 800dab4:	f7fe faaf 	bl	800c016 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dab8:	2301      	movs	r3, #1
 800daba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dabc:	697b      	ldr	r3, [r7, #20]
	}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3718      	adds	r7, #24
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	20000c24 	.word	0x20000c24
 800dacc:	20001100 	.word	0x20001100
 800dad0:	20000c28 	.word	0x20000c28

0800dad4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dade:	4b21      	ldr	r3, [pc, #132]	@ (800db64 <prvAddCurrentTaskToDelayedList+0x90>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dae4:	4b20      	ldr	r3, [pc, #128]	@ (800db68 <prvAddCurrentTaskToDelayedList+0x94>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	3304      	adds	r3, #4
 800daea:	4618      	mov	r0, r3
 800daec:	f7fe faf0 	bl	800c0d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daf6:	d10a      	bne.n	800db0e <prvAddCurrentTaskToDelayedList+0x3a>
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d007      	beq.n	800db0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dafe:	4b1a      	ldr	r3, [pc, #104]	@ (800db68 <prvAddCurrentTaskToDelayedList+0x94>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	3304      	adds	r3, #4
 800db04:	4619      	mov	r1, r3
 800db06:	4819      	ldr	r0, [pc, #100]	@ (800db6c <prvAddCurrentTaskToDelayedList+0x98>)
 800db08:	f7fe fa85 	bl	800c016 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800db0c:	e026      	b.n	800db5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800db0e:	68fa      	ldr	r2, [r7, #12]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	4413      	add	r3, r2
 800db14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db16:	4b14      	ldr	r3, [pc, #80]	@ (800db68 <prvAddCurrentTaskToDelayedList+0x94>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	68ba      	ldr	r2, [r7, #8]
 800db1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db1e:	68ba      	ldr	r2, [r7, #8]
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	429a      	cmp	r2, r3
 800db24:	d209      	bcs.n	800db3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db26:	4b12      	ldr	r3, [pc, #72]	@ (800db70 <prvAddCurrentTaskToDelayedList+0x9c>)
 800db28:	681a      	ldr	r2, [r3, #0]
 800db2a:	4b0f      	ldr	r3, [pc, #60]	@ (800db68 <prvAddCurrentTaskToDelayedList+0x94>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	3304      	adds	r3, #4
 800db30:	4619      	mov	r1, r3
 800db32:	4610      	mov	r0, r2
 800db34:	f7fe fa93 	bl	800c05e <vListInsert>
}
 800db38:	e010      	b.n	800db5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db3a:	4b0e      	ldr	r3, [pc, #56]	@ (800db74 <prvAddCurrentTaskToDelayedList+0xa0>)
 800db3c:	681a      	ldr	r2, [r3, #0]
 800db3e:	4b0a      	ldr	r3, [pc, #40]	@ (800db68 <prvAddCurrentTaskToDelayedList+0x94>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	3304      	adds	r3, #4
 800db44:	4619      	mov	r1, r3
 800db46:	4610      	mov	r0, r2
 800db48:	f7fe fa89 	bl	800c05e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db4c:	4b0a      	ldr	r3, [pc, #40]	@ (800db78 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	68ba      	ldr	r2, [r7, #8]
 800db52:	429a      	cmp	r2, r3
 800db54:	d202      	bcs.n	800db5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800db56:	4a08      	ldr	r2, [pc, #32]	@ (800db78 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	6013      	str	r3, [r2, #0]
}
 800db5c:	bf00      	nop
 800db5e:	3710      	adds	r7, #16
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	200010fc 	.word	0x200010fc
 800db68:	20000c24 	.word	0x20000c24
 800db6c:	200010e4 	.word	0x200010e4
 800db70:	200010b4 	.word	0x200010b4
 800db74:	200010b0 	.word	0x200010b0
 800db78:	20001118 	.word	0x20001118

0800db7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b08a      	sub	sp, #40	@ 0x28
 800db80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800db82:	2300      	movs	r3, #0
 800db84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800db86:	f000 fb13 	bl	800e1b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800db8a:	4b1d      	ldr	r3, [pc, #116]	@ (800dc00 <xTimerCreateTimerTask+0x84>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d021      	beq.n	800dbd6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800db92:	2300      	movs	r3, #0
 800db94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800db96:	2300      	movs	r3, #0
 800db98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800db9a:	1d3a      	adds	r2, r7, #4
 800db9c:	f107 0108 	add.w	r1, r7, #8
 800dba0:	f107 030c 	add.w	r3, r7, #12
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7fe f9ef 	bl	800bf88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dbaa:	6879      	ldr	r1, [r7, #4]
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	68fa      	ldr	r2, [r7, #12]
 800dbb0:	9202      	str	r2, [sp, #8]
 800dbb2:	9301      	str	r3, [sp, #4]
 800dbb4:	2302      	movs	r3, #2
 800dbb6:	9300      	str	r3, [sp, #0]
 800dbb8:	2300      	movs	r3, #0
 800dbba:	460a      	mov	r2, r1
 800dbbc:	4911      	ldr	r1, [pc, #68]	@ (800dc04 <xTimerCreateTimerTask+0x88>)
 800dbbe:	4812      	ldr	r0, [pc, #72]	@ (800dc08 <xTimerCreateTimerTask+0x8c>)
 800dbc0:	f7ff f8a2 	bl	800cd08 <xTaskCreateStatic>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	4a11      	ldr	r2, [pc, #68]	@ (800dc0c <xTimerCreateTimerTask+0x90>)
 800dbc8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dbca:	4b10      	ldr	r3, [pc, #64]	@ (800dc0c <xTimerCreateTimerTask+0x90>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d001      	beq.n	800dbd6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d10b      	bne.n	800dbf4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800dbdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbe0:	f383 8811 	msr	BASEPRI, r3
 800dbe4:	f3bf 8f6f 	isb	sy
 800dbe8:	f3bf 8f4f 	dsb	sy
 800dbec:	613b      	str	r3, [r7, #16]
}
 800dbee:	bf00      	nop
 800dbf0:	bf00      	nop
 800dbf2:	e7fd      	b.n	800dbf0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dbf4:	697b      	ldr	r3, [r7, #20]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3718      	adds	r7, #24
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	20001154 	.word	0x20001154
 800dc04:	0800f5ec 	.word	0x0800f5ec
 800dc08:	0800dd49 	.word	0x0800dd49
 800dc0c:	20001158 	.word	0x20001158

0800dc10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b08a      	sub	sp, #40	@ 0x28
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	607a      	str	r2, [r7, #4]
 800dc1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d10b      	bne.n	800dc40 <xTimerGenericCommand+0x30>
	__asm volatile
 800dc28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc2c:	f383 8811 	msr	BASEPRI, r3
 800dc30:	f3bf 8f6f 	isb	sy
 800dc34:	f3bf 8f4f 	dsb	sy
 800dc38:	623b      	str	r3, [r7, #32]
}
 800dc3a:	bf00      	nop
 800dc3c:	bf00      	nop
 800dc3e:	e7fd      	b.n	800dc3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dc40:	4b19      	ldr	r3, [pc, #100]	@ (800dca8 <xTimerGenericCommand+0x98>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d02a      	beq.n	800dc9e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	2b05      	cmp	r3, #5
 800dc58:	dc18      	bgt.n	800dc8c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dc5a:	f7ff fead 	bl	800d9b8 <xTaskGetSchedulerState>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b02      	cmp	r3, #2
 800dc62:	d109      	bne.n	800dc78 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dc64:	4b10      	ldr	r3, [pc, #64]	@ (800dca8 <xTimerGenericCommand+0x98>)
 800dc66:	6818      	ldr	r0, [r3, #0]
 800dc68:	f107 0110 	add.w	r1, r7, #16
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc70:	f7fe fc0c 	bl	800c48c <xQueueGenericSend>
 800dc74:	6278      	str	r0, [r7, #36]	@ 0x24
 800dc76:	e012      	b.n	800dc9e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dc78:	4b0b      	ldr	r3, [pc, #44]	@ (800dca8 <xTimerGenericCommand+0x98>)
 800dc7a:	6818      	ldr	r0, [r3, #0]
 800dc7c:	f107 0110 	add.w	r1, r7, #16
 800dc80:	2300      	movs	r3, #0
 800dc82:	2200      	movs	r2, #0
 800dc84:	f7fe fc02 	bl	800c48c <xQueueGenericSend>
 800dc88:	6278      	str	r0, [r7, #36]	@ 0x24
 800dc8a:	e008      	b.n	800dc9e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dc8c:	4b06      	ldr	r3, [pc, #24]	@ (800dca8 <xTimerGenericCommand+0x98>)
 800dc8e:	6818      	ldr	r0, [r3, #0]
 800dc90:	f107 0110 	add.w	r1, r7, #16
 800dc94:	2300      	movs	r3, #0
 800dc96:	683a      	ldr	r2, [r7, #0]
 800dc98:	f7fe fcfa 	bl	800c690 <xQueueGenericSendFromISR>
 800dc9c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3728      	adds	r7, #40	@ 0x28
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	20001154 	.word	0x20001154

0800dcac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b088      	sub	sp, #32
 800dcb0:	af02      	add	r7, sp, #8
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcb6:	4b23      	ldr	r3, [pc, #140]	@ (800dd44 <prvProcessExpiredTimer+0x98>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	68db      	ldr	r3, [r3, #12]
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	3304      	adds	r3, #4
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7fe fa03 	bl	800c0d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dcd0:	f003 0304 	and.w	r3, r3, #4
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d023      	beq.n	800dd20 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	699a      	ldr	r2, [r3, #24]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	18d1      	adds	r1, r2, r3
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	683a      	ldr	r2, [r7, #0]
 800dce4:	6978      	ldr	r0, [r7, #20]
 800dce6:	f000 f8d5 	bl	800de94 <prvInsertTimerInActiveList>
 800dcea:	4603      	mov	r3, r0
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d020      	beq.n	800dd32 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	9300      	str	r3, [sp, #0]
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	6978      	ldr	r0, [r7, #20]
 800dcfc:	f7ff ff88 	bl	800dc10 <xTimerGenericCommand>
 800dd00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d114      	bne.n	800dd32 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dd08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd0c:	f383 8811 	msr	BASEPRI, r3
 800dd10:	f3bf 8f6f 	isb	sy
 800dd14:	f3bf 8f4f 	dsb	sy
 800dd18:	60fb      	str	r3, [r7, #12]
}
 800dd1a:	bf00      	nop
 800dd1c:	bf00      	nop
 800dd1e:	e7fd      	b.n	800dd1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd26:	f023 0301 	bic.w	r3, r3, #1
 800dd2a:	b2da      	uxtb	r2, r3
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	6a1b      	ldr	r3, [r3, #32]
 800dd36:	6978      	ldr	r0, [r7, #20]
 800dd38:	4798      	blx	r3
}
 800dd3a:	bf00      	nop
 800dd3c:	3718      	adds	r7, #24
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	2000114c 	.word	0x2000114c

0800dd48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd50:	f107 0308 	add.w	r3, r7, #8
 800dd54:	4618      	mov	r0, r3
 800dd56:	f000 f859 	bl	800de0c <prvGetNextExpireTime>
 800dd5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	4619      	mov	r1, r3
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	f000 f805 	bl	800dd70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dd66:	f000 f8d7 	bl	800df18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd6a:	bf00      	nop
 800dd6c:	e7f0      	b.n	800dd50 <prvTimerTask+0x8>
	...

0800dd70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dd7a:	f7ff fa29 	bl	800d1d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd7e:	f107 0308 	add.w	r3, r7, #8
 800dd82:	4618      	mov	r0, r3
 800dd84:	f000 f866 	bl	800de54 <prvSampleTimeNow>
 800dd88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d130      	bne.n	800ddf2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d10a      	bne.n	800ddac <prvProcessTimerOrBlockTask+0x3c>
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d806      	bhi.n	800ddac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dd9e:	f7ff fa25 	bl	800d1ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dda2:	68f9      	ldr	r1, [r7, #12]
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f7ff ff81 	bl	800dcac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ddaa:	e024      	b.n	800ddf6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d008      	beq.n	800ddc4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ddb2:	4b13      	ldr	r3, [pc, #76]	@ (800de00 <prvProcessTimerOrBlockTask+0x90>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d101      	bne.n	800ddc0 <prvProcessTimerOrBlockTask+0x50>
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	e000      	b.n	800ddc2 <prvProcessTimerOrBlockTask+0x52>
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ddc4:	4b0f      	ldr	r3, [pc, #60]	@ (800de04 <prvProcessTimerOrBlockTask+0x94>)
 800ddc6:	6818      	ldr	r0, [r3, #0]
 800ddc8:	687a      	ldr	r2, [r7, #4]
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	1ad3      	subs	r3, r2, r3
 800ddce:	683a      	ldr	r2, [r7, #0]
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	f7fe ff65 	bl	800cca0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ddd6:	f7ff fa09 	bl	800d1ec <xTaskResumeAll>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d10a      	bne.n	800ddf6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dde0:	4b09      	ldr	r3, [pc, #36]	@ (800de08 <prvProcessTimerOrBlockTask+0x98>)
 800dde2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dde6:	601a      	str	r2, [r3, #0]
 800dde8:	f3bf 8f4f 	dsb	sy
 800ddec:	f3bf 8f6f 	isb	sy
}
 800ddf0:	e001      	b.n	800ddf6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ddf2:	f7ff f9fb 	bl	800d1ec <xTaskResumeAll>
}
 800ddf6:	bf00      	nop
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	20001150 	.word	0x20001150
 800de04:	20001154 	.word	0x20001154
 800de08:	e000ed04 	.word	0xe000ed04

0800de0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800de14:	4b0e      	ldr	r3, [pc, #56]	@ (800de50 <prvGetNextExpireTime+0x44>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d101      	bne.n	800de22 <prvGetNextExpireTime+0x16>
 800de1e:	2201      	movs	r2, #1
 800de20:	e000      	b.n	800de24 <prvGetNextExpireTime+0x18>
 800de22:	2200      	movs	r2, #0
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d105      	bne.n	800de3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de30:	4b07      	ldr	r3, [pc, #28]	@ (800de50 <prvGetNextExpireTime+0x44>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	60fb      	str	r3, [r7, #12]
 800de3a:	e001      	b.n	800de40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800de3c:	2300      	movs	r3, #0
 800de3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800de40:	68fb      	ldr	r3, [r7, #12]
}
 800de42:	4618      	mov	r0, r3
 800de44:	3714      	adds	r7, #20
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr
 800de4e:	bf00      	nop
 800de50:	2000114c 	.word	0x2000114c

0800de54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b084      	sub	sp, #16
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800de5c:	f7ff fa64 	bl	800d328 <xTaskGetTickCount>
 800de60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800de62:	4b0b      	ldr	r3, [pc, #44]	@ (800de90 <prvSampleTimeNow+0x3c>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	68fa      	ldr	r2, [r7, #12]
 800de68:	429a      	cmp	r2, r3
 800de6a:	d205      	bcs.n	800de78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800de6c:	f000 f93a 	bl	800e0e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2201      	movs	r2, #1
 800de74:	601a      	str	r2, [r3, #0]
 800de76:	e002      	b.n	800de7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2200      	movs	r2, #0
 800de7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800de7e:	4a04      	ldr	r2, [pc, #16]	@ (800de90 <prvSampleTimeNow+0x3c>)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800de84:	68fb      	ldr	r3, [r7, #12]
}
 800de86:	4618      	mov	r0, r3
 800de88:	3710      	adds	r7, #16
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	2000115c 	.word	0x2000115c

0800de94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b086      	sub	sp, #24
 800de98:	af00      	add	r7, sp, #0
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	60b9      	str	r1, [r7, #8]
 800de9e:	607a      	str	r2, [r7, #4]
 800dea0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dea2:	2300      	movs	r3, #0
 800dea4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	68ba      	ldr	r2, [r7, #8]
 800deaa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	68fa      	ldr	r2, [r7, #12]
 800deb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800deb2:	68ba      	ldr	r2, [r7, #8]
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d812      	bhi.n	800dee0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800deba:	687a      	ldr	r2, [r7, #4]
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	1ad2      	subs	r2, r2, r3
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	699b      	ldr	r3, [r3, #24]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d302      	bcc.n	800dece <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dec8:	2301      	movs	r3, #1
 800deca:	617b      	str	r3, [r7, #20]
 800decc:	e01b      	b.n	800df06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dece:	4b10      	ldr	r3, [pc, #64]	@ (800df10 <prvInsertTimerInActiveList+0x7c>)
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	3304      	adds	r3, #4
 800ded6:	4619      	mov	r1, r3
 800ded8:	4610      	mov	r0, r2
 800deda:	f7fe f8c0 	bl	800c05e <vListInsert>
 800dede:	e012      	b.n	800df06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dee0:	687a      	ldr	r2, [r7, #4]
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d206      	bcs.n	800def6 <prvInsertTimerInActiveList+0x62>
 800dee8:	68ba      	ldr	r2, [r7, #8]
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	429a      	cmp	r2, r3
 800deee:	d302      	bcc.n	800def6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800def0:	2301      	movs	r3, #1
 800def2:	617b      	str	r3, [r7, #20]
 800def4:	e007      	b.n	800df06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800def6:	4b07      	ldr	r3, [pc, #28]	@ (800df14 <prvInsertTimerInActiveList+0x80>)
 800def8:	681a      	ldr	r2, [r3, #0]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	3304      	adds	r3, #4
 800defe:	4619      	mov	r1, r3
 800df00:	4610      	mov	r0, r2
 800df02:	f7fe f8ac 	bl	800c05e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800df06:	697b      	ldr	r3, [r7, #20]
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3718      	adds	r7, #24
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}
 800df10:	20001150 	.word	0x20001150
 800df14:	2000114c 	.word	0x2000114c

0800df18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b08e      	sub	sp, #56	@ 0x38
 800df1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df1e:	e0ce      	b.n	800e0be <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2b00      	cmp	r3, #0
 800df24:	da19      	bge.n	800df5a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800df26:	1d3b      	adds	r3, r7, #4
 800df28:	3304      	adds	r3, #4
 800df2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800df2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d10b      	bne.n	800df4a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800df32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df36:	f383 8811 	msr	BASEPRI, r3
 800df3a:	f3bf 8f6f 	isb	sy
 800df3e:	f3bf 8f4f 	dsb	sy
 800df42:	61fb      	str	r3, [r7, #28]
}
 800df44:	bf00      	nop
 800df46:	bf00      	nop
 800df48:	e7fd      	b.n	800df46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800df4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df50:	6850      	ldr	r0, [r2, #4]
 800df52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df54:	6892      	ldr	r2, [r2, #8]
 800df56:	4611      	mov	r1, r2
 800df58:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	f2c0 80ae 	blt.w	800e0be <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800df66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df68:	695b      	ldr	r3, [r3, #20]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d004      	beq.n	800df78 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df70:	3304      	adds	r3, #4
 800df72:	4618      	mov	r0, r3
 800df74:	f7fe f8ac 	bl	800c0d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df78:	463b      	mov	r3, r7
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7ff ff6a 	bl	800de54 <prvSampleTimeNow>
 800df80:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2b09      	cmp	r3, #9
 800df86:	f200 8097 	bhi.w	800e0b8 <prvProcessReceivedCommands+0x1a0>
 800df8a:	a201      	add	r2, pc, #4	@ (adr r2, 800df90 <prvProcessReceivedCommands+0x78>)
 800df8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df90:	0800dfb9 	.word	0x0800dfb9
 800df94:	0800dfb9 	.word	0x0800dfb9
 800df98:	0800dfb9 	.word	0x0800dfb9
 800df9c:	0800e02f 	.word	0x0800e02f
 800dfa0:	0800e043 	.word	0x0800e043
 800dfa4:	0800e08f 	.word	0x0800e08f
 800dfa8:	0800dfb9 	.word	0x0800dfb9
 800dfac:	0800dfb9 	.word	0x0800dfb9
 800dfb0:	0800e02f 	.word	0x0800e02f
 800dfb4:	0800e043 	.word	0x0800e043
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dfb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfbe:	f043 0301 	orr.w	r3, r3, #1
 800dfc2:	b2da      	uxtb	r2, r3
 800dfc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dfca:	68ba      	ldr	r2, [r7, #8]
 800dfcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfce:	699b      	ldr	r3, [r3, #24]
 800dfd0:	18d1      	adds	r1, r2, r3
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dfd8:	f7ff ff5c 	bl	800de94 <prvInsertTimerInActiveList>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d06c      	beq.n	800e0bc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfe4:	6a1b      	ldr	r3, [r3, #32]
 800dfe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dfe8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dff0:	f003 0304 	and.w	r3, r3, #4
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d061      	beq.n	800e0bc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dff8:	68ba      	ldr	r2, [r7, #8]
 800dffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dffc:	699b      	ldr	r3, [r3, #24]
 800dffe:	441a      	add	r2, r3
 800e000:	2300      	movs	r3, #0
 800e002:	9300      	str	r3, [sp, #0]
 800e004:	2300      	movs	r3, #0
 800e006:	2100      	movs	r1, #0
 800e008:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e00a:	f7ff fe01 	bl	800dc10 <xTimerGenericCommand>
 800e00e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e010:	6a3b      	ldr	r3, [r7, #32]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d152      	bne.n	800e0bc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e01a:	f383 8811 	msr	BASEPRI, r3
 800e01e:	f3bf 8f6f 	isb	sy
 800e022:	f3bf 8f4f 	dsb	sy
 800e026:	61bb      	str	r3, [r7, #24]
}
 800e028:	bf00      	nop
 800e02a:	bf00      	nop
 800e02c:	e7fd      	b.n	800e02a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e030:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e034:	f023 0301 	bic.w	r3, r3, #1
 800e038:	b2da      	uxtb	r2, r3
 800e03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e03c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e040:	e03d      	b.n	800e0be <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e044:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e048:	f043 0301 	orr.w	r3, r3, #1
 800e04c:	b2da      	uxtb	r2, r3
 800e04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e050:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e054:	68ba      	ldr	r2, [r7, #8]
 800e056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e058:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e05c:	699b      	ldr	r3, [r3, #24]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d10b      	bne.n	800e07a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e066:	f383 8811 	msr	BASEPRI, r3
 800e06a:	f3bf 8f6f 	isb	sy
 800e06e:	f3bf 8f4f 	dsb	sy
 800e072:	617b      	str	r3, [r7, #20]
}
 800e074:	bf00      	nop
 800e076:	bf00      	nop
 800e078:	e7fd      	b.n	800e076 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e07c:	699a      	ldr	r2, [r3, #24]
 800e07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e080:	18d1      	adds	r1, r2, r3
 800e082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e086:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e088:	f7ff ff04 	bl	800de94 <prvInsertTimerInActiveList>
					break;
 800e08c:	e017      	b.n	800e0be <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e090:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e094:	f003 0302 	and.w	r3, r3, #2
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d103      	bne.n	800e0a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e09c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e09e:	f000 fbeb 	bl	800e878 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e0a2:	e00c      	b.n	800e0be <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0aa:	f023 0301 	bic.w	r3, r3, #1
 800e0ae:	b2da      	uxtb	r2, r3
 800e0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e0b6:	e002      	b.n	800e0be <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e0b8:	bf00      	nop
 800e0ba:	e000      	b.n	800e0be <prvProcessReceivedCommands+0x1a6>
					break;
 800e0bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e0be:	4b08      	ldr	r3, [pc, #32]	@ (800e0e0 <prvProcessReceivedCommands+0x1c8>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	1d39      	adds	r1, r7, #4
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7fe fb80 	bl	800c7cc <xQueueReceive>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	f47f af26 	bne.w	800df20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e0d4:	bf00      	nop
 800e0d6:	bf00      	nop
 800e0d8:	3730      	adds	r7, #48	@ 0x30
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
 800e0de:	bf00      	nop
 800e0e0:	20001154 	.word	0x20001154

0800e0e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b088      	sub	sp, #32
 800e0e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e0ea:	e049      	b.n	800e180 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e0ec:	4b2e      	ldr	r3, [pc, #184]	@ (800e1a8 <prvSwitchTimerLists+0xc4>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0f6:	4b2c      	ldr	r3, [pc, #176]	@ (800e1a8 <prvSwitchTimerLists+0xc4>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	68db      	ldr	r3, [r3, #12]
 800e0fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	3304      	adds	r3, #4
 800e104:	4618      	mov	r0, r3
 800e106:	f7fd ffe3 	bl	800c0d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6a1b      	ldr	r3, [r3, #32]
 800e10e:	68f8      	ldr	r0, [r7, #12]
 800e110:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e118:	f003 0304 	and.w	r3, r3, #4
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d02f      	beq.n	800e180 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	699b      	ldr	r3, [r3, #24]
 800e124:	693a      	ldr	r2, [r7, #16]
 800e126:	4413      	add	r3, r2
 800e128:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e12a:	68ba      	ldr	r2, [r7, #8]
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	429a      	cmp	r2, r3
 800e130:	d90e      	bls.n	800e150 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	68ba      	ldr	r2, [r7, #8]
 800e136:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	68fa      	ldr	r2, [r7, #12]
 800e13c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e13e:	4b1a      	ldr	r3, [pc, #104]	@ (800e1a8 <prvSwitchTimerLists+0xc4>)
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	3304      	adds	r3, #4
 800e146:	4619      	mov	r1, r3
 800e148:	4610      	mov	r0, r2
 800e14a:	f7fd ff88 	bl	800c05e <vListInsert>
 800e14e:	e017      	b.n	800e180 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e150:	2300      	movs	r3, #0
 800e152:	9300      	str	r3, [sp, #0]
 800e154:	2300      	movs	r3, #0
 800e156:	693a      	ldr	r2, [r7, #16]
 800e158:	2100      	movs	r1, #0
 800e15a:	68f8      	ldr	r0, [r7, #12]
 800e15c:	f7ff fd58 	bl	800dc10 <xTimerGenericCommand>
 800e160:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d10b      	bne.n	800e180 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e16c:	f383 8811 	msr	BASEPRI, r3
 800e170:	f3bf 8f6f 	isb	sy
 800e174:	f3bf 8f4f 	dsb	sy
 800e178:	603b      	str	r3, [r7, #0]
}
 800e17a:	bf00      	nop
 800e17c:	bf00      	nop
 800e17e:	e7fd      	b.n	800e17c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e180:	4b09      	ldr	r3, [pc, #36]	@ (800e1a8 <prvSwitchTimerLists+0xc4>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d1b0      	bne.n	800e0ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e18a:	4b07      	ldr	r3, [pc, #28]	@ (800e1a8 <prvSwitchTimerLists+0xc4>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e190:	4b06      	ldr	r3, [pc, #24]	@ (800e1ac <prvSwitchTimerLists+0xc8>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	4a04      	ldr	r2, [pc, #16]	@ (800e1a8 <prvSwitchTimerLists+0xc4>)
 800e196:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e198:	4a04      	ldr	r2, [pc, #16]	@ (800e1ac <prvSwitchTimerLists+0xc8>)
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	6013      	str	r3, [r2, #0]
}
 800e19e:	bf00      	nop
 800e1a0:	3718      	adds	r7, #24
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	2000114c 	.word	0x2000114c
 800e1ac:	20001150 	.word	0x20001150

0800e1b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e1b6:	f000 f96f 	bl	800e498 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e1ba:	4b15      	ldr	r3, [pc, #84]	@ (800e210 <prvCheckForValidListAndQueue+0x60>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d120      	bne.n	800e204 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e1c2:	4814      	ldr	r0, [pc, #80]	@ (800e214 <prvCheckForValidListAndQueue+0x64>)
 800e1c4:	f7fd fefa 	bl	800bfbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e1c8:	4813      	ldr	r0, [pc, #76]	@ (800e218 <prvCheckForValidListAndQueue+0x68>)
 800e1ca:	f7fd fef7 	bl	800bfbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e1ce:	4b13      	ldr	r3, [pc, #76]	@ (800e21c <prvCheckForValidListAndQueue+0x6c>)
 800e1d0:	4a10      	ldr	r2, [pc, #64]	@ (800e214 <prvCheckForValidListAndQueue+0x64>)
 800e1d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e1d4:	4b12      	ldr	r3, [pc, #72]	@ (800e220 <prvCheckForValidListAndQueue+0x70>)
 800e1d6:	4a10      	ldr	r2, [pc, #64]	@ (800e218 <prvCheckForValidListAndQueue+0x68>)
 800e1d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e1da:	2300      	movs	r3, #0
 800e1dc:	9300      	str	r3, [sp, #0]
 800e1de:	4b11      	ldr	r3, [pc, #68]	@ (800e224 <prvCheckForValidListAndQueue+0x74>)
 800e1e0:	4a11      	ldr	r2, [pc, #68]	@ (800e228 <prvCheckForValidListAndQueue+0x78>)
 800e1e2:	2110      	movs	r1, #16
 800e1e4:	200a      	movs	r0, #10
 800e1e6:	f7fe f807 	bl	800c1f8 <xQueueGenericCreateStatic>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	4a08      	ldr	r2, [pc, #32]	@ (800e210 <prvCheckForValidListAndQueue+0x60>)
 800e1ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e1f0:	4b07      	ldr	r3, [pc, #28]	@ (800e210 <prvCheckForValidListAndQueue+0x60>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d005      	beq.n	800e204 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e1f8:	4b05      	ldr	r3, [pc, #20]	@ (800e210 <prvCheckForValidListAndQueue+0x60>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	490b      	ldr	r1, [pc, #44]	@ (800e22c <prvCheckForValidListAndQueue+0x7c>)
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7fe fcfa 	bl	800cbf8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e204:	f000 f97a 	bl	800e4fc <vPortExitCritical>
}
 800e208:	bf00      	nop
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop
 800e210:	20001154 	.word	0x20001154
 800e214:	20001124 	.word	0x20001124
 800e218:	20001138 	.word	0x20001138
 800e21c:	2000114c 	.word	0x2000114c
 800e220:	20001150 	.word	0x20001150
 800e224:	20001200 	.word	0x20001200
 800e228:	20001160 	.word	0x20001160
 800e22c:	0800f5f4 	.word	0x0800f5f4

0800e230 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e230:	b480      	push	{r7}
 800e232:	b085      	sub	sp, #20
 800e234:	af00      	add	r7, sp, #0
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	3b04      	subs	r3, #4
 800e240:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e248:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	3b04      	subs	r3, #4
 800e24e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	f023 0201 	bic.w	r2, r3, #1
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	3b04      	subs	r3, #4
 800e25e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e260:	4a0c      	ldr	r2, [pc, #48]	@ (800e294 <pxPortInitialiseStack+0x64>)
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	3b14      	subs	r3, #20
 800e26a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	3b04      	subs	r3, #4
 800e276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f06f 0202 	mvn.w	r2, #2
 800e27e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	3b20      	subs	r3, #32
 800e284:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e286:	68fb      	ldr	r3, [r7, #12]
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3714      	adds	r7, #20
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr
 800e294:	0800e299 	.word	0x0800e299

0800e298 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e298:	b480      	push	{r7}
 800e29a:	b085      	sub	sp, #20
 800e29c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e2a2:	4b13      	ldr	r3, [pc, #76]	@ (800e2f0 <prvTaskExitError+0x58>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2aa:	d00b      	beq.n	800e2c4 <prvTaskExitError+0x2c>
	__asm volatile
 800e2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2b0:	f383 8811 	msr	BASEPRI, r3
 800e2b4:	f3bf 8f6f 	isb	sy
 800e2b8:	f3bf 8f4f 	dsb	sy
 800e2bc:	60fb      	str	r3, [r7, #12]
}
 800e2be:	bf00      	nop
 800e2c0:	bf00      	nop
 800e2c2:	e7fd      	b.n	800e2c0 <prvTaskExitError+0x28>
	__asm volatile
 800e2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c8:	f383 8811 	msr	BASEPRI, r3
 800e2cc:	f3bf 8f6f 	isb	sy
 800e2d0:	f3bf 8f4f 	dsb	sy
 800e2d4:	60bb      	str	r3, [r7, #8]
}
 800e2d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e2d8:	bf00      	nop
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d0fc      	beq.n	800e2da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e2e0:	bf00      	nop
 800e2e2:	bf00      	nop
 800e2e4:	3714      	adds	r7, #20
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr
 800e2ee:	bf00      	nop
 800e2f0:	20000038 	.word	0x20000038
	...

0800e300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e300:	4b07      	ldr	r3, [pc, #28]	@ (800e320 <pxCurrentTCBConst2>)
 800e302:	6819      	ldr	r1, [r3, #0]
 800e304:	6808      	ldr	r0, [r1, #0]
 800e306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e30a:	f380 8809 	msr	PSP, r0
 800e30e:	f3bf 8f6f 	isb	sy
 800e312:	f04f 0000 	mov.w	r0, #0
 800e316:	f380 8811 	msr	BASEPRI, r0
 800e31a:	4770      	bx	lr
 800e31c:	f3af 8000 	nop.w

0800e320 <pxCurrentTCBConst2>:
 800e320:	20000c24 	.word	0x20000c24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e324:	bf00      	nop
 800e326:	bf00      	nop

0800e328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e328:	4808      	ldr	r0, [pc, #32]	@ (800e34c <prvPortStartFirstTask+0x24>)
 800e32a:	6800      	ldr	r0, [r0, #0]
 800e32c:	6800      	ldr	r0, [r0, #0]
 800e32e:	f380 8808 	msr	MSP, r0
 800e332:	f04f 0000 	mov.w	r0, #0
 800e336:	f380 8814 	msr	CONTROL, r0
 800e33a:	b662      	cpsie	i
 800e33c:	b661      	cpsie	f
 800e33e:	f3bf 8f4f 	dsb	sy
 800e342:	f3bf 8f6f 	isb	sy
 800e346:	df00      	svc	0
 800e348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e34a:	bf00      	nop
 800e34c:	e000ed08 	.word	0xe000ed08

0800e350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b086      	sub	sp, #24
 800e354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e356:	4b47      	ldr	r3, [pc, #284]	@ (800e474 <xPortStartScheduler+0x124>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4a47      	ldr	r2, [pc, #284]	@ (800e478 <xPortStartScheduler+0x128>)
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d10b      	bne.n	800e378 <xPortStartScheduler+0x28>
	__asm volatile
 800e360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e364:	f383 8811 	msr	BASEPRI, r3
 800e368:	f3bf 8f6f 	isb	sy
 800e36c:	f3bf 8f4f 	dsb	sy
 800e370:	613b      	str	r3, [r7, #16]
}
 800e372:	bf00      	nop
 800e374:	bf00      	nop
 800e376:	e7fd      	b.n	800e374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e378:	4b3e      	ldr	r3, [pc, #248]	@ (800e474 <xPortStartScheduler+0x124>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a3f      	ldr	r2, [pc, #252]	@ (800e47c <xPortStartScheduler+0x12c>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d10b      	bne.n	800e39a <xPortStartScheduler+0x4a>
	__asm volatile
 800e382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e386:	f383 8811 	msr	BASEPRI, r3
 800e38a:	f3bf 8f6f 	isb	sy
 800e38e:	f3bf 8f4f 	dsb	sy
 800e392:	60fb      	str	r3, [r7, #12]
}
 800e394:	bf00      	nop
 800e396:	bf00      	nop
 800e398:	e7fd      	b.n	800e396 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e39a:	4b39      	ldr	r3, [pc, #228]	@ (800e480 <xPortStartScheduler+0x130>)
 800e39c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	b2db      	uxtb	r3, r3
 800e3a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	22ff      	movs	r2, #255	@ 0xff
 800e3aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e3b4:	78fb      	ldrb	r3, [r7, #3]
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e3bc:	b2da      	uxtb	r2, r3
 800e3be:	4b31      	ldr	r3, [pc, #196]	@ (800e484 <xPortStartScheduler+0x134>)
 800e3c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e3c2:	4b31      	ldr	r3, [pc, #196]	@ (800e488 <xPortStartScheduler+0x138>)
 800e3c4:	2207      	movs	r2, #7
 800e3c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e3c8:	e009      	b.n	800e3de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e3ca:	4b2f      	ldr	r3, [pc, #188]	@ (800e488 <xPortStartScheduler+0x138>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	3b01      	subs	r3, #1
 800e3d0:	4a2d      	ldr	r2, [pc, #180]	@ (800e488 <xPortStartScheduler+0x138>)
 800e3d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e3d4:	78fb      	ldrb	r3, [r7, #3]
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	005b      	lsls	r3, r3, #1
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e3de:	78fb      	ldrb	r3, [r7, #3]
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3e6:	2b80      	cmp	r3, #128	@ 0x80
 800e3e8:	d0ef      	beq.n	800e3ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e3ea:	4b27      	ldr	r3, [pc, #156]	@ (800e488 <xPortStartScheduler+0x138>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f1c3 0307 	rsb	r3, r3, #7
 800e3f2:	2b04      	cmp	r3, #4
 800e3f4:	d00b      	beq.n	800e40e <xPortStartScheduler+0xbe>
	__asm volatile
 800e3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3fa:	f383 8811 	msr	BASEPRI, r3
 800e3fe:	f3bf 8f6f 	isb	sy
 800e402:	f3bf 8f4f 	dsb	sy
 800e406:	60bb      	str	r3, [r7, #8]
}
 800e408:	bf00      	nop
 800e40a:	bf00      	nop
 800e40c:	e7fd      	b.n	800e40a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e40e:	4b1e      	ldr	r3, [pc, #120]	@ (800e488 <xPortStartScheduler+0x138>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	021b      	lsls	r3, r3, #8
 800e414:	4a1c      	ldr	r2, [pc, #112]	@ (800e488 <xPortStartScheduler+0x138>)
 800e416:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e418:	4b1b      	ldr	r3, [pc, #108]	@ (800e488 <xPortStartScheduler+0x138>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e420:	4a19      	ldr	r2, [pc, #100]	@ (800e488 <xPortStartScheduler+0x138>)
 800e422:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	b2da      	uxtb	r2, r3
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e42c:	4b17      	ldr	r3, [pc, #92]	@ (800e48c <xPortStartScheduler+0x13c>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4a16      	ldr	r2, [pc, #88]	@ (800e48c <xPortStartScheduler+0x13c>)
 800e432:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e436:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e438:	4b14      	ldr	r3, [pc, #80]	@ (800e48c <xPortStartScheduler+0x13c>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a13      	ldr	r2, [pc, #76]	@ (800e48c <xPortStartScheduler+0x13c>)
 800e43e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e442:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e444:	f000 f8da 	bl	800e5fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e448:	4b11      	ldr	r3, [pc, #68]	@ (800e490 <xPortStartScheduler+0x140>)
 800e44a:	2200      	movs	r2, #0
 800e44c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e44e:	f000 f8f9 	bl	800e644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e452:	4b10      	ldr	r3, [pc, #64]	@ (800e494 <xPortStartScheduler+0x144>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	4a0f      	ldr	r2, [pc, #60]	@ (800e494 <xPortStartScheduler+0x144>)
 800e458:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e45c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e45e:	f7ff ff63 	bl	800e328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e462:	f7ff f82b 	bl	800d4bc <vTaskSwitchContext>
	prvTaskExitError();
 800e466:	f7ff ff17 	bl	800e298 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e46a:	2300      	movs	r3, #0
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3718      	adds	r7, #24
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	e000ed00 	.word	0xe000ed00
 800e478:	410fc271 	.word	0x410fc271
 800e47c:	410fc270 	.word	0x410fc270
 800e480:	e000e400 	.word	0xe000e400
 800e484:	20001250 	.word	0x20001250
 800e488:	20001254 	.word	0x20001254
 800e48c:	e000ed20 	.word	0xe000ed20
 800e490:	20000038 	.word	0x20000038
 800e494:	e000ef34 	.word	0xe000ef34

0800e498 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e498:	b480      	push	{r7}
 800e49a:	b083      	sub	sp, #12
 800e49c:	af00      	add	r7, sp, #0
	__asm volatile
 800e49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4a2:	f383 8811 	msr	BASEPRI, r3
 800e4a6:	f3bf 8f6f 	isb	sy
 800e4aa:	f3bf 8f4f 	dsb	sy
 800e4ae:	607b      	str	r3, [r7, #4]
}
 800e4b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e4b2:	4b10      	ldr	r3, [pc, #64]	@ (800e4f4 <vPortEnterCritical+0x5c>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	4a0e      	ldr	r2, [pc, #56]	@ (800e4f4 <vPortEnterCritical+0x5c>)
 800e4ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e4bc:	4b0d      	ldr	r3, [pc, #52]	@ (800e4f4 <vPortEnterCritical+0x5c>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d110      	bne.n	800e4e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e4c4:	4b0c      	ldr	r3, [pc, #48]	@ (800e4f8 <vPortEnterCritical+0x60>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	b2db      	uxtb	r3, r3
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d00b      	beq.n	800e4e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4d2:	f383 8811 	msr	BASEPRI, r3
 800e4d6:	f3bf 8f6f 	isb	sy
 800e4da:	f3bf 8f4f 	dsb	sy
 800e4de:	603b      	str	r3, [r7, #0]
}
 800e4e0:	bf00      	nop
 800e4e2:	bf00      	nop
 800e4e4:	e7fd      	b.n	800e4e2 <vPortEnterCritical+0x4a>
	}
}
 800e4e6:	bf00      	nop
 800e4e8:	370c      	adds	r7, #12
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr
 800e4f2:	bf00      	nop
 800e4f4:	20000038 	.word	0x20000038
 800e4f8:	e000ed04 	.word	0xe000ed04

0800e4fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e502:	4b12      	ldr	r3, [pc, #72]	@ (800e54c <vPortExitCritical+0x50>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d10b      	bne.n	800e522 <vPortExitCritical+0x26>
	__asm volatile
 800e50a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e50e:	f383 8811 	msr	BASEPRI, r3
 800e512:	f3bf 8f6f 	isb	sy
 800e516:	f3bf 8f4f 	dsb	sy
 800e51a:	607b      	str	r3, [r7, #4]
}
 800e51c:	bf00      	nop
 800e51e:	bf00      	nop
 800e520:	e7fd      	b.n	800e51e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e522:	4b0a      	ldr	r3, [pc, #40]	@ (800e54c <vPortExitCritical+0x50>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	3b01      	subs	r3, #1
 800e528:	4a08      	ldr	r2, [pc, #32]	@ (800e54c <vPortExitCritical+0x50>)
 800e52a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e52c:	4b07      	ldr	r3, [pc, #28]	@ (800e54c <vPortExitCritical+0x50>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d105      	bne.n	800e540 <vPortExitCritical+0x44>
 800e534:	2300      	movs	r3, #0
 800e536:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	f383 8811 	msr	BASEPRI, r3
}
 800e53e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e540:	bf00      	nop
 800e542:	370c      	adds	r7, #12
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr
 800e54c:	20000038 	.word	0x20000038

0800e550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e550:	f3ef 8009 	mrs	r0, PSP
 800e554:	f3bf 8f6f 	isb	sy
 800e558:	4b15      	ldr	r3, [pc, #84]	@ (800e5b0 <pxCurrentTCBConst>)
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	f01e 0f10 	tst.w	lr, #16
 800e560:	bf08      	it	eq
 800e562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e56a:	6010      	str	r0, [r2, #0]
 800e56c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e570:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e574:	f380 8811 	msr	BASEPRI, r0
 800e578:	f3bf 8f4f 	dsb	sy
 800e57c:	f3bf 8f6f 	isb	sy
 800e580:	f7fe ff9c 	bl	800d4bc <vTaskSwitchContext>
 800e584:	f04f 0000 	mov.w	r0, #0
 800e588:	f380 8811 	msr	BASEPRI, r0
 800e58c:	bc09      	pop	{r0, r3}
 800e58e:	6819      	ldr	r1, [r3, #0]
 800e590:	6808      	ldr	r0, [r1, #0]
 800e592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e596:	f01e 0f10 	tst.w	lr, #16
 800e59a:	bf08      	it	eq
 800e59c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e5a0:	f380 8809 	msr	PSP, r0
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	4770      	bx	lr
 800e5aa:	bf00      	nop
 800e5ac:	f3af 8000 	nop.w

0800e5b0 <pxCurrentTCBConst>:
 800e5b0:	20000c24 	.word	0x20000c24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e5b4:	bf00      	nop
 800e5b6:	bf00      	nop

0800e5b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
	__asm volatile
 800e5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5c2:	f383 8811 	msr	BASEPRI, r3
 800e5c6:	f3bf 8f6f 	isb	sy
 800e5ca:	f3bf 8f4f 	dsb	sy
 800e5ce:	607b      	str	r3, [r7, #4]
}
 800e5d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e5d2:	f7fe feb9 	bl	800d348 <xTaskIncrementTick>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d003      	beq.n	800e5e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e5dc:	4b06      	ldr	r3, [pc, #24]	@ (800e5f8 <xPortSysTickHandler+0x40>)
 800e5de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5e2:	601a      	str	r2, [r3, #0]
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	f383 8811 	msr	BASEPRI, r3
}
 800e5ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e5f0:	bf00      	nop
 800e5f2:	3708      	adds	r7, #8
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}
 800e5f8:	e000ed04 	.word	0xe000ed04

0800e5fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e600:	4b0b      	ldr	r3, [pc, #44]	@ (800e630 <vPortSetupTimerInterrupt+0x34>)
 800e602:	2200      	movs	r2, #0
 800e604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e606:	4b0b      	ldr	r3, [pc, #44]	@ (800e634 <vPortSetupTimerInterrupt+0x38>)
 800e608:	2200      	movs	r2, #0
 800e60a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e60c:	4b0a      	ldr	r3, [pc, #40]	@ (800e638 <vPortSetupTimerInterrupt+0x3c>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4a0a      	ldr	r2, [pc, #40]	@ (800e63c <vPortSetupTimerInterrupt+0x40>)
 800e612:	fba2 2303 	umull	r2, r3, r2, r3
 800e616:	099b      	lsrs	r3, r3, #6
 800e618:	4a09      	ldr	r2, [pc, #36]	@ (800e640 <vPortSetupTimerInterrupt+0x44>)
 800e61a:	3b01      	subs	r3, #1
 800e61c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e61e:	4b04      	ldr	r3, [pc, #16]	@ (800e630 <vPortSetupTimerInterrupt+0x34>)
 800e620:	2207      	movs	r2, #7
 800e622:	601a      	str	r2, [r3, #0]
}
 800e624:	bf00      	nop
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	e000e010 	.word	0xe000e010
 800e634:	e000e018 	.word	0xe000e018
 800e638:	2000002c 	.word	0x2000002c
 800e63c:	10624dd3 	.word	0x10624dd3
 800e640:	e000e014 	.word	0xe000e014

0800e644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e644:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e654 <vPortEnableVFP+0x10>
 800e648:	6801      	ldr	r1, [r0, #0]
 800e64a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e64e:	6001      	str	r1, [r0, #0]
 800e650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e652:	bf00      	nop
 800e654:	e000ed88 	.word	0xe000ed88

0800e658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e658:	b480      	push	{r7}
 800e65a:	b085      	sub	sp, #20
 800e65c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e65e:	f3ef 8305 	mrs	r3, IPSR
 800e662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2b0f      	cmp	r3, #15
 800e668:	d915      	bls.n	800e696 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e66a:	4a18      	ldr	r2, [pc, #96]	@ (800e6cc <vPortValidateInterruptPriority+0x74>)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	4413      	add	r3, r2
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e674:	4b16      	ldr	r3, [pc, #88]	@ (800e6d0 <vPortValidateInterruptPriority+0x78>)
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	7afa      	ldrb	r2, [r7, #11]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d20b      	bcs.n	800e696 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e682:	f383 8811 	msr	BASEPRI, r3
 800e686:	f3bf 8f6f 	isb	sy
 800e68a:	f3bf 8f4f 	dsb	sy
 800e68e:	607b      	str	r3, [r7, #4]
}
 800e690:	bf00      	nop
 800e692:	bf00      	nop
 800e694:	e7fd      	b.n	800e692 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e696:	4b0f      	ldr	r3, [pc, #60]	@ (800e6d4 <vPortValidateInterruptPriority+0x7c>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e69e:	4b0e      	ldr	r3, [pc, #56]	@ (800e6d8 <vPortValidateInterruptPriority+0x80>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d90b      	bls.n	800e6be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6aa:	f383 8811 	msr	BASEPRI, r3
 800e6ae:	f3bf 8f6f 	isb	sy
 800e6b2:	f3bf 8f4f 	dsb	sy
 800e6b6:	603b      	str	r3, [r7, #0]
}
 800e6b8:	bf00      	nop
 800e6ba:	bf00      	nop
 800e6bc:	e7fd      	b.n	800e6ba <vPortValidateInterruptPriority+0x62>
	}
 800e6be:	bf00      	nop
 800e6c0:	3714      	adds	r7, #20
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr
 800e6ca:	bf00      	nop
 800e6cc:	e000e3f0 	.word	0xe000e3f0
 800e6d0:	20001250 	.word	0x20001250
 800e6d4:	e000ed0c 	.word	0xe000ed0c
 800e6d8:	20001254 	.word	0x20001254

0800e6dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b08a      	sub	sp, #40	@ 0x28
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e6e8:	f7fe fd72 	bl	800d1d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e6ec:	4b5c      	ldr	r3, [pc, #368]	@ (800e860 <pvPortMalloc+0x184>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d101      	bne.n	800e6f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e6f4:	f000 f924 	bl	800e940 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e6f8:	4b5a      	ldr	r3, [pc, #360]	@ (800e864 <pvPortMalloc+0x188>)
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	4013      	ands	r3, r2
 800e700:	2b00      	cmp	r3, #0
 800e702:	f040 8095 	bne.w	800e830 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d01e      	beq.n	800e74a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e70c:	2208      	movs	r2, #8
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	4413      	add	r3, r2
 800e712:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f003 0307 	and.w	r3, r3, #7
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d015      	beq.n	800e74a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f023 0307 	bic.w	r3, r3, #7
 800e724:	3308      	adds	r3, #8
 800e726:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f003 0307 	and.w	r3, r3, #7
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d00b      	beq.n	800e74a <pvPortMalloc+0x6e>
	__asm volatile
 800e732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e736:	f383 8811 	msr	BASEPRI, r3
 800e73a:	f3bf 8f6f 	isb	sy
 800e73e:	f3bf 8f4f 	dsb	sy
 800e742:	617b      	str	r3, [r7, #20]
}
 800e744:	bf00      	nop
 800e746:	bf00      	nop
 800e748:	e7fd      	b.n	800e746 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d06f      	beq.n	800e830 <pvPortMalloc+0x154>
 800e750:	4b45      	ldr	r3, [pc, #276]	@ (800e868 <pvPortMalloc+0x18c>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	429a      	cmp	r2, r3
 800e758:	d86a      	bhi.n	800e830 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e75a:	4b44      	ldr	r3, [pc, #272]	@ (800e86c <pvPortMalloc+0x190>)
 800e75c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e75e:	4b43      	ldr	r3, [pc, #268]	@ (800e86c <pvPortMalloc+0x190>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e764:	e004      	b.n	800e770 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e768:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	687a      	ldr	r2, [r7, #4]
 800e776:	429a      	cmp	r2, r3
 800e778:	d903      	bls.n	800e782 <pvPortMalloc+0xa6>
 800e77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d1f1      	bne.n	800e766 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e782:	4b37      	ldr	r3, [pc, #220]	@ (800e860 <pvPortMalloc+0x184>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e788:	429a      	cmp	r2, r3
 800e78a:	d051      	beq.n	800e830 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e78c:	6a3b      	ldr	r3, [r7, #32]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2208      	movs	r2, #8
 800e792:	4413      	add	r3, r2
 800e794:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e798:	681a      	ldr	r2, [r3, #0]
 800e79a:	6a3b      	ldr	r3, [r7, #32]
 800e79c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a0:	685a      	ldr	r2, [r3, #4]
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	1ad2      	subs	r2, r2, r3
 800e7a6:	2308      	movs	r3, #8
 800e7a8:	005b      	lsls	r3, r3, #1
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d920      	bls.n	800e7f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e7ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	f003 0307 	and.w	r3, r3, #7
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d00b      	beq.n	800e7d8 <pvPortMalloc+0xfc>
	__asm volatile
 800e7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7c4:	f383 8811 	msr	BASEPRI, r3
 800e7c8:	f3bf 8f6f 	isb	sy
 800e7cc:	f3bf 8f4f 	dsb	sy
 800e7d0:	613b      	str	r3, [r7, #16]
}
 800e7d2:	bf00      	nop
 800e7d4:	bf00      	nop
 800e7d6:	e7fd      	b.n	800e7d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7da:	685a      	ldr	r2, [r3, #4]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	1ad2      	subs	r2, r2, r3
 800e7e0:	69bb      	ldr	r3, [r7, #24]
 800e7e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e6:	687a      	ldr	r2, [r7, #4]
 800e7e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e7ea:	69b8      	ldr	r0, [r7, #24]
 800e7ec:	f000 f90a 	bl	800ea04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e7f0:	4b1d      	ldr	r3, [pc, #116]	@ (800e868 <pvPortMalloc+0x18c>)
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	1ad3      	subs	r3, r2, r3
 800e7fa:	4a1b      	ldr	r2, [pc, #108]	@ (800e868 <pvPortMalloc+0x18c>)
 800e7fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e7fe:	4b1a      	ldr	r3, [pc, #104]	@ (800e868 <pvPortMalloc+0x18c>)
 800e800:	681a      	ldr	r2, [r3, #0]
 800e802:	4b1b      	ldr	r3, [pc, #108]	@ (800e870 <pvPortMalloc+0x194>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	429a      	cmp	r2, r3
 800e808:	d203      	bcs.n	800e812 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e80a:	4b17      	ldr	r3, [pc, #92]	@ (800e868 <pvPortMalloc+0x18c>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	4a18      	ldr	r2, [pc, #96]	@ (800e870 <pvPortMalloc+0x194>)
 800e810:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e814:	685a      	ldr	r2, [r3, #4]
 800e816:	4b13      	ldr	r3, [pc, #76]	@ (800e864 <pvPortMalloc+0x188>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	431a      	orrs	r2, r3
 800e81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e81e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e822:	2200      	movs	r2, #0
 800e824:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e826:	4b13      	ldr	r3, [pc, #76]	@ (800e874 <pvPortMalloc+0x198>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	3301      	adds	r3, #1
 800e82c:	4a11      	ldr	r2, [pc, #68]	@ (800e874 <pvPortMalloc+0x198>)
 800e82e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e830:	f7fe fcdc 	bl	800d1ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e834:	69fb      	ldr	r3, [r7, #28]
 800e836:	f003 0307 	and.w	r3, r3, #7
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d00b      	beq.n	800e856 <pvPortMalloc+0x17a>
	__asm volatile
 800e83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e842:	f383 8811 	msr	BASEPRI, r3
 800e846:	f3bf 8f6f 	isb	sy
 800e84a:	f3bf 8f4f 	dsb	sy
 800e84e:	60fb      	str	r3, [r7, #12]
}
 800e850:	bf00      	nop
 800e852:	bf00      	nop
 800e854:	e7fd      	b.n	800e852 <pvPortMalloc+0x176>
	return pvReturn;
 800e856:	69fb      	ldr	r3, [r7, #28]
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3728      	adds	r7, #40	@ 0x28
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	200029d0 	.word	0x200029d0
 800e864:	200029e4 	.word	0x200029e4
 800e868:	200029d4 	.word	0x200029d4
 800e86c:	200029c8 	.word	0x200029c8
 800e870:	200029d8 	.word	0x200029d8
 800e874:	200029dc 	.word	0x200029dc

0800e878 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b086      	sub	sp, #24
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d04f      	beq.n	800e92a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e88a:	2308      	movs	r3, #8
 800e88c:	425b      	negs	r3, r3
 800e88e:	697a      	ldr	r2, [r7, #20]
 800e890:	4413      	add	r3, r2
 800e892:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	685a      	ldr	r2, [r3, #4]
 800e89c:	4b25      	ldr	r3, [pc, #148]	@ (800e934 <vPortFree+0xbc>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	4013      	ands	r3, r2
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d10b      	bne.n	800e8be <vPortFree+0x46>
	__asm volatile
 800e8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8aa:	f383 8811 	msr	BASEPRI, r3
 800e8ae:	f3bf 8f6f 	isb	sy
 800e8b2:	f3bf 8f4f 	dsb	sy
 800e8b6:	60fb      	str	r3, [r7, #12]
}
 800e8b8:	bf00      	nop
 800e8ba:	bf00      	nop
 800e8bc:	e7fd      	b.n	800e8ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d00b      	beq.n	800e8de <vPortFree+0x66>
	__asm volatile
 800e8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ca:	f383 8811 	msr	BASEPRI, r3
 800e8ce:	f3bf 8f6f 	isb	sy
 800e8d2:	f3bf 8f4f 	dsb	sy
 800e8d6:	60bb      	str	r3, [r7, #8]
}
 800e8d8:	bf00      	nop
 800e8da:	bf00      	nop
 800e8dc:	e7fd      	b.n	800e8da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	685a      	ldr	r2, [r3, #4]
 800e8e2:	4b14      	ldr	r3, [pc, #80]	@ (800e934 <vPortFree+0xbc>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	4013      	ands	r3, r2
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d01e      	beq.n	800e92a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d11a      	bne.n	800e92a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	685a      	ldr	r2, [r3, #4]
 800e8f8:	4b0e      	ldr	r3, [pc, #56]	@ (800e934 <vPortFree+0xbc>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	43db      	mvns	r3, r3
 800e8fe:	401a      	ands	r2, r3
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e904:	f7fe fc64 	bl	800d1d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	685a      	ldr	r2, [r3, #4]
 800e90c:	4b0a      	ldr	r3, [pc, #40]	@ (800e938 <vPortFree+0xc0>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4413      	add	r3, r2
 800e912:	4a09      	ldr	r2, [pc, #36]	@ (800e938 <vPortFree+0xc0>)
 800e914:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e916:	6938      	ldr	r0, [r7, #16]
 800e918:	f000 f874 	bl	800ea04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e91c:	4b07      	ldr	r3, [pc, #28]	@ (800e93c <vPortFree+0xc4>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	3301      	adds	r3, #1
 800e922:	4a06      	ldr	r2, [pc, #24]	@ (800e93c <vPortFree+0xc4>)
 800e924:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e926:	f7fe fc61 	bl	800d1ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e92a:	bf00      	nop
 800e92c:	3718      	adds	r7, #24
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	200029e4 	.word	0x200029e4
 800e938:	200029d4 	.word	0x200029d4
 800e93c:	200029e0 	.word	0x200029e0

0800e940 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e940:	b480      	push	{r7}
 800e942:	b085      	sub	sp, #20
 800e944:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e946:	f241 7370 	movw	r3, #6000	@ 0x1770
 800e94a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e94c:	4b27      	ldr	r3, [pc, #156]	@ (800e9ec <prvHeapInit+0xac>)
 800e94e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f003 0307 	and.w	r3, r3, #7
 800e956:	2b00      	cmp	r3, #0
 800e958:	d00c      	beq.n	800e974 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	3307      	adds	r3, #7
 800e95e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f023 0307 	bic.w	r3, r3, #7
 800e966:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e968:	68ba      	ldr	r2, [r7, #8]
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	1ad3      	subs	r3, r2, r3
 800e96e:	4a1f      	ldr	r2, [pc, #124]	@ (800e9ec <prvHeapInit+0xac>)
 800e970:	4413      	add	r3, r2
 800e972:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e978:	4a1d      	ldr	r2, [pc, #116]	@ (800e9f0 <prvHeapInit+0xb0>)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e97e:	4b1c      	ldr	r3, [pc, #112]	@ (800e9f0 <prvHeapInit+0xb0>)
 800e980:	2200      	movs	r2, #0
 800e982:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	68ba      	ldr	r2, [r7, #8]
 800e988:	4413      	add	r3, r2
 800e98a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e98c:	2208      	movs	r2, #8
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	1a9b      	subs	r3, r3, r2
 800e992:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f023 0307 	bic.w	r3, r3, #7
 800e99a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	4a15      	ldr	r2, [pc, #84]	@ (800e9f4 <prvHeapInit+0xb4>)
 800e9a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e9a2:	4b14      	ldr	r3, [pc, #80]	@ (800e9f4 <prvHeapInit+0xb4>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e9aa:	4b12      	ldr	r3, [pc, #72]	@ (800e9f4 <prvHeapInit+0xb4>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	68fa      	ldr	r2, [r7, #12]
 800e9ba:	1ad2      	subs	r2, r2, r3
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e9c0:	4b0c      	ldr	r3, [pc, #48]	@ (800e9f4 <prvHeapInit+0xb4>)
 800e9c2:	681a      	ldr	r2, [r3, #0]
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	685b      	ldr	r3, [r3, #4]
 800e9cc:	4a0a      	ldr	r2, [pc, #40]	@ (800e9f8 <prvHeapInit+0xb8>)
 800e9ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	685b      	ldr	r3, [r3, #4]
 800e9d4:	4a09      	ldr	r2, [pc, #36]	@ (800e9fc <prvHeapInit+0xbc>)
 800e9d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e9d8:	4b09      	ldr	r3, [pc, #36]	@ (800ea00 <prvHeapInit+0xc0>)
 800e9da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e9de:	601a      	str	r2, [r3, #0]
}
 800e9e0:	bf00      	nop
 800e9e2:	3714      	adds	r7, #20
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ea:	4770      	bx	lr
 800e9ec:	20001258 	.word	0x20001258
 800e9f0:	200029c8 	.word	0x200029c8
 800e9f4:	200029d0 	.word	0x200029d0
 800e9f8:	200029d8 	.word	0x200029d8
 800e9fc:	200029d4 	.word	0x200029d4
 800ea00:	200029e4 	.word	0x200029e4

0800ea04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ea04:	b480      	push	{r7}
 800ea06:	b085      	sub	sp, #20
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ea0c:	4b28      	ldr	r3, [pc, #160]	@ (800eab0 <prvInsertBlockIntoFreeList+0xac>)
 800ea0e:	60fb      	str	r3, [r7, #12]
 800ea10:	e002      	b.n	800ea18 <prvInsertBlockIntoFreeList+0x14>
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	60fb      	str	r3, [r7, #12]
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	687a      	ldr	r2, [r7, #4]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d8f7      	bhi.n	800ea12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	68ba      	ldr	r2, [r7, #8]
 800ea2c:	4413      	add	r3, r2
 800ea2e:	687a      	ldr	r2, [r7, #4]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d108      	bne.n	800ea46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	685a      	ldr	r2, [r3, #4]
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	441a      	add	r2, r3
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	68ba      	ldr	r2, [r7, #8]
 800ea50:	441a      	add	r2, r3
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d118      	bne.n	800ea8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681a      	ldr	r2, [r3, #0]
 800ea5e:	4b15      	ldr	r3, [pc, #84]	@ (800eab4 <prvInsertBlockIntoFreeList+0xb0>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d00d      	beq.n	800ea82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	685a      	ldr	r2, [r3, #4]
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	441a      	add	r2, r3
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	681a      	ldr	r2, [r3, #0]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	601a      	str	r2, [r3, #0]
 800ea80:	e008      	b.n	800ea94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ea82:	4b0c      	ldr	r3, [pc, #48]	@ (800eab4 <prvInsertBlockIntoFreeList+0xb0>)
 800ea84:	681a      	ldr	r2, [r3, #0]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	601a      	str	r2, [r3, #0]
 800ea8a:	e003      	b.n	800ea94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ea94:	68fa      	ldr	r2, [r7, #12]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d002      	beq.n	800eaa2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eaa2:	bf00      	nop
 800eaa4:	3714      	adds	r7, #20
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr
 800eaae:	bf00      	nop
 800eab0:	200029c8 	.word	0x200029c8
 800eab4:	200029d0 	.word	0x200029d0

0800eab8 <_ZdlPvj>:
 800eab8:	f000 b800 	b.w	800eabc <_ZdlPv>

0800eabc <_ZdlPv>:
 800eabc:	f000 b800 	b.w	800eac0 <free>

0800eac0 <free>:
 800eac0:	4b02      	ldr	r3, [pc, #8]	@ (800eacc <free+0xc>)
 800eac2:	4601      	mov	r1, r0
 800eac4:	6818      	ldr	r0, [r3, #0]
 800eac6:	f000 b98d 	b.w	800ede4 <_free_r>
 800eaca:	bf00      	nop
 800eacc:	2000003c 	.word	0x2000003c

0800ead0 <sbrk_aligned>:
 800ead0:	b570      	push	{r4, r5, r6, lr}
 800ead2:	4e0f      	ldr	r6, [pc, #60]	@ (800eb10 <sbrk_aligned+0x40>)
 800ead4:	460c      	mov	r4, r1
 800ead6:	6831      	ldr	r1, [r6, #0]
 800ead8:	4605      	mov	r5, r0
 800eada:	b911      	cbnz	r1, 800eae2 <sbrk_aligned+0x12>
 800eadc:	f000 f938 	bl	800ed50 <_sbrk_r>
 800eae0:	6030      	str	r0, [r6, #0]
 800eae2:	4621      	mov	r1, r4
 800eae4:	4628      	mov	r0, r5
 800eae6:	f000 f933 	bl	800ed50 <_sbrk_r>
 800eaea:	1c43      	adds	r3, r0, #1
 800eaec:	d103      	bne.n	800eaf6 <sbrk_aligned+0x26>
 800eaee:	f04f 34ff 	mov.w	r4, #4294967295
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	bd70      	pop	{r4, r5, r6, pc}
 800eaf6:	1cc4      	adds	r4, r0, #3
 800eaf8:	f024 0403 	bic.w	r4, r4, #3
 800eafc:	42a0      	cmp	r0, r4
 800eafe:	d0f8      	beq.n	800eaf2 <sbrk_aligned+0x22>
 800eb00:	1a21      	subs	r1, r4, r0
 800eb02:	4628      	mov	r0, r5
 800eb04:	f000 f924 	bl	800ed50 <_sbrk_r>
 800eb08:	3001      	adds	r0, #1
 800eb0a:	d1f2      	bne.n	800eaf2 <sbrk_aligned+0x22>
 800eb0c:	e7ef      	b.n	800eaee <sbrk_aligned+0x1e>
 800eb0e:	bf00      	nop
 800eb10:	200029e8 	.word	0x200029e8

0800eb14 <_malloc_r>:
 800eb14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb18:	1ccd      	adds	r5, r1, #3
 800eb1a:	f025 0503 	bic.w	r5, r5, #3
 800eb1e:	3508      	adds	r5, #8
 800eb20:	2d0c      	cmp	r5, #12
 800eb22:	bf38      	it	cc
 800eb24:	250c      	movcc	r5, #12
 800eb26:	2d00      	cmp	r5, #0
 800eb28:	4606      	mov	r6, r0
 800eb2a:	db01      	blt.n	800eb30 <_malloc_r+0x1c>
 800eb2c:	42a9      	cmp	r1, r5
 800eb2e:	d904      	bls.n	800eb3a <_malloc_r+0x26>
 800eb30:	230c      	movs	r3, #12
 800eb32:	6033      	str	r3, [r6, #0]
 800eb34:	2000      	movs	r0, #0
 800eb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ec10 <_malloc_r+0xfc>
 800eb3e:	f000 f869 	bl	800ec14 <__malloc_lock>
 800eb42:	f8d8 3000 	ldr.w	r3, [r8]
 800eb46:	461c      	mov	r4, r3
 800eb48:	bb44      	cbnz	r4, 800eb9c <_malloc_r+0x88>
 800eb4a:	4629      	mov	r1, r5
 800eb4c:	4630      	mov	r0, r6
 800eb4e:	f7ff ffbf 	bl	800ead0 <sbrk_aligned>
 800eb52:	1c43      	adds	r3, r0, #1
 800eb54:	4604      	mov	r4, r0
 800eb56:	d158      	bne.n	800ec0a <_malloc_r+0xf6>
 800eb58:	f8d8 4000 	ldr.w	r4, [r8]
 800eb5c:	4627      	mov	r7, r4
 800eb5e:	2f00      	cmp	r7, #0
 800eb60:	d143      	bne.n	800ebea <_malloc_r+0xd6>
 800eb62:	2c00      	cmp	r4, #0
 800eb64:	d04b      	beq.n	800ebfe <_malloc_r+0xea>
 800eb66:	6823      	ldr	r3, [r4, #0]
 800eb68:	4639      	mov	r1, r7
 800eb6a:	4630      	mov	r0, r6
 800eb6c:	eb04 0903 	add.w	r9, r4, r3
 800eb70:	f000 f8ee 	bl	800ed50 <_sbrk_r>
 800eb74:	4581      	cmp	r9, r0
 800eb76:	d142      	bne.n	800ebfe <_malloc_r+0xea>
 800eb78:	6821      	ldr	r1, [r4, #0]
 800eb7a:	1a6d      	subs	r5, r5, r1
 800eb7c:	4629      	mov	r1, r5
 800eb7e:	4630      	mov	r0, r6
 800eb80:	f7ff ffa6 	bl	800ead0 <sbrk_aligned>
 800eb84:	3001      	adds	r0, #1
 800eb86:	d03a      	beq.n	800ebfe <_malloc_r+0xea>
 800eb88:	6823      	ldr	r3, [r4, #0]
 800eb8a:	442b      	add	r3, r5
 800eb8c:	6023      	str	r3, [r4, #0]
 800eb8e:	f8d8 3000 	ldr.w	r3, [r8]
 800eb92:	685a      	ldr	r2, [r3, #4]
 800eb94:	bb62      	cbnz	r2, 800ebf0 <_malloc_r+0xdc>
 800eb96:	f8c8 7000 	str.w	r7, [r8]
 800eb9a:	e00f      	b.n	800ebbc <_malloc_r+0xa8>
 800eb9c:	6822      	ldr	r2, [r4, #0]
 800eb9e:	1b52      	subs	r2, r2, r5
 800eba0:	d420      	bmi.n	800ebe4 <_malloc_r+0xd0>
 800eba2:	2a0b      	cmp	r2, #11
 800eba4:	d917      	bls.n	800ebd6 <_malloc_r+0xc2>
 800eba6:	1961      	adds	r1, r4, r5
 800eba8:	42a3      	cmp	r3, r4
 800ebaa:	6025      	str	r5, [r4, #0]
 800ebac:	bf18      	it	ne
 800ebae:	6059      	strne	r1, [r3, #4]
 800ebb0:	6863      	ldr	r3, [r4, #4]
 800ebb2:	bf08      	it	eq
 800ebb4:	f8c8 1000 	streq.w	r1, [r8]
 800ebb8:	5162      	str	r2, [r4, r5]
 800ebba:	604b      	str	r3, [r1, #4]
 800ebbc:	4630      	mov	r0, r6
 800ebbe:	f000 f82f 	bl	800ec20 <__malloc_unlock>
 800ebc2:	f104 000b 	add.w	r0, r4, #11
 800ebc6:	1d23      	adds	r3, r4, #4
 800ebc8:	f020 0007 	bic.w	r0, r0, #7
 800ebcc:	1ac2      	subs	r2, r0, r3
 800ebce:	bf1c      	itt	ne
 800ebd0:	1a1b      	subne	r3, r3, r0
 800ebd2:	50a3      	strne	r3, [r4, r2]
 800ebd4:	e7af      	b.n	800eb36 <_malloc_r+0x22>
 800ebd6:	6862      	ldr	r2, [r4, #4]
 800ebd8:	42a3      	cmp	r3, r4
 800ebda:	bf0c      	ite	eq
 800ebdc:	f8c8 2000 	streq.w	r2, [r8]
 800ebe0:	605a      	strne	r2, [r3, #4]
 800ebe2:	e7eb      	b.n	800ebbc <_malloc_r+0xa8>
 800ebe4:	4623      	mov	r3, r4
 800ebe6:	6864      	ldr	r4, [r4, #4]
 800ebe8:	e7ae      	b.n	800eb48 <_malloc_r+0x34>
 800ebea:	463c      	mov	r4, r7
 800ebec:	687f      	ldr	r7, [r7, #4]
 800ebee:	e7b6      	b.n	800eb5e <_malloc_r+0x4a>
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	42a3      	cmp	r3, r4
 800ebf6:	d1fb      	bne.n	800ebf0 <_malloc_r+0xdc>
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	6053      	str	r3, [r2, #4]
 800ebfc:	e7de      	b.n	800ebbc <_malloc_r+0xa8>
 800ebfe:	230c      	movs	r3, #12
 800ec00:	6033      	str	r3, [r6, #0]
 800ec02:	4630      	mov	r0, r6
 800ec04:	f000 f80c 	bl	800ec20 <__malloc_unlock>
 800ec08:	e794      	b.n	800eb34 <_malloc_r+0x20>
 800ec0a:	6005      	str	r5, [r0, #0]
 800ec0c:	e7d6      	b.n	800ebbc <_malloc_r+0xa8>
 800ec0e:	bf00      	nop
 800ec10:	200029ec 	.word	0x200029ec

0800ec14 <__malloc_lock>:
 800ec14:	4801      	ldr	r0, [pc, #4]	@ (800ec1c <__malloc_lock+0x8>)
 800ec16:	f000 b8d5 	b.w	800edc4 <__retarget_lock_acquire_recursive>
 800ec1a:	bf00      	nop
 800ec1c:	20002b2c 	.word	0x20002b2c

0800ec20 <__malloc_unlock>:
 800ec20:	4801      	ldr	r0, [pc, #4]	@ (800ec28 <__malloc_unlock+0x8>)
 800ec22:	f000 b8d0 	b.w	800edc6 <__retarget_lock_release_recursive>
 800ec26:	bf00      	nop
 800ec28:	20002b2c 	.word	0x20002b2c

0800ec2c <sniprintf>:
 800ec2c:	b40c      	push	{r2, r3}
 800ec2e:	b530      	push	{r4, r5, lr}
 800ec30:	4b17      	ldr	r3, [pc, #92]	@ (800ec90 <sniprintf+0x64>)
 800ec32:	1e0c      	subs	r4, r1, #0
 800ec34:	681d      	ldr	r5, [r3, #0]
 800ec36:	b09d      	sub	sp, #116	@ 0x74
 800ec38:	da08      	bge.n	800ec4c <sniprintf+0x20>
 800ec3a:	238b      	movs	r3, #139	@ 0x8b
 800ec3c:	602b      	str	r3, [r5, #0]
 800ec3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec42:	b01d      	add	sp, #116	@ 0x74
 800ec44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec48:	b002      	add	sp, #8
 800ec4a:	4770      	bx	lr
 800ec4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ec50:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ec54:	bf14      	ite	ne
 800ec56:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ec5a:	4623      	moveq	r3, r4
 800ec5c:	9304      	str	r3, [sp, #16]
 800ec5e:	9307      	str	r3, [sp, #28]
 800ec60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ec64:	9002      	str	r0, [sp, #8]
 800ec66:	9006      	str	r0, [sp, #24]
 800ec68:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ec6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ec6e:	ab21      	add	r3, sp, #132	@ 0x84
 800ec70:	a902      	add	r1, sp, #8
 800ec72:	4628      	mov	r0, r5
 800ec74:	9301      	str	r3, [sp, #4]
 800ec76:	f000 f95b 	bl	800ef30 <_svfiprintf_r>
 800ec7a:	1c43      	adds	r3, r0, #1
 800ec7c:	bfbc      	itt	lt
 800ec7e:	238b      	movlt	r3, #139	@ 0x8b
 800ec80:	602b      	strlt	r3, [r5, #0]
 800ec82:	2c00      	cmp	r4, #0
 800ec84:	d0dd      	beq.n	800ec42 <sniprintf+0x16>
 800ec86:	9b02      	ldr	r3, [sp, #8]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	701a      	strb	r2, [r3, #0]
 800ec8c:	e7d9      	b.n	800ec42 <sniprintf+0x16>
 800ec8e:	bf00      	nop
 800ec90:	2000003c 	.word	0x2000003c

0800ec94 <memset>:
 800ec94:	4402      	add	r2, r0
 800ec96:	4603      	mov	r3, r0
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d100      	bne.n	800ec9e <memset+0xa>
 800ec9c:	4770      	bx	lr
 800ec9e:	f803 1b01 	strb.w	r1, [r3], #1
 800eca2:	e7f9      	b.n	800ec98 <memset+0x4>

0800eca4 <_reclaim_reent>:
 800eca4:	4b29      	ldr	r3, [pc, #164]	@ (800ed4c <_reclaim_reent+0xa8>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4283      	cmp	r3, r0
 800ecaa:	b570      	push	{r4, r5, r6, lr}
 800ecac:	4604      	mov	r4, r0
 800ecae:	d04b      	beq.n	800ed48 <_reclaim_reent+0xa4>
 800ecb0:	69c3      	ldr	r3, [r0, #28]
 800ecb2:	b1ab      	cbz	r3, 800ece0 <_reclaim_reent+0x3c>
 800ecb4:	68db      	ldr	r3, [r3, #12]
 800ecb6:	b16b      	cbz	r3, 800ecd4 <_reclaim_reent+0x30>
 800ecb8:	2500      	movs	r5, #0
 800ecba:	69e3      	ldr	r3, [r4, #28]
 800ecbc:	68db      	ldr	r3, [r3, #12]
 800ecbe:	5959      	ldr	r1, [r3, r5]
 800ecc0:	2900      	cmp	r1, #0
 800ecc2:	d13b      	bne.n	800ed3c <_reclaim_reent+0x98>
 800ecc4:	3504      	adds	r5, #4
 800ecc6:	2d80      	cmp	r5, #128	@ 0x80
 800ecc8:	d1f7      	bne.n	800ecba <_reclaim_reent+0x16>
 800ecca:	69e3      	ldr	r3, [r4, #28]
 800eccc:	4620      	mov	r0, r4
 800ecce:	68d9      	ldr	r1, [r3, #12]
 800ecd0:	f000 f888 	bl	800ede4 <_free_r>
 800ecd4:	69e3      	ldr	r3, [r4, #28]
 800ecd6:	6819      	ldr	r1, [r3, #0]
 800ecd8:	b111      	cbz	r1, 800ece0 <_reclaim_reent+0x3c>
 800ecda:	4620      	mov	r0, r4
 800ecdc:	f000 f882 	bl	800ede4 <_free_r>
 800ece0:	6961      	ldr	r1, [r4, #20]
 800ece2:	b111      	cbz	r1, 800ecea <_reclaim_reent+0x46>
 800ece4:	4620      	mov	r0, r4
 800ece6:	f000 f87d 	bl	800ede4 <_free_r>
 800ecea:	69e1      	ldr	r1, [r4, #28]
 800ecec:	b111      	cbz	r1, 800ecf4 <_reclaim_reent+0x50>
 800ecee:	4620      	mov	r0, r4
 800ecf0:	f000 f878 	bl	800ede4 <_free_r>
 800ecf4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ecf6:	b111      	cbz	r1, 800ecfe <_reclaim_reent+0x5a>
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	f000 f873 	bl	800ede4 <_free_r>
 800ecfe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed00:	b111      	cbz	r1, 800ed08 <_reclaim_reent+0x64>
 800ed02:	4620      	mov	r0, r4
 800ed04:	f000 f86e 	bl	800ede4 <_free_r>
 800ed08:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ed0a:	b111      	cbz	r1, 800ed12 <_reclaim_reent+0x6e>
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	f000 f869 	bl	800ede4 <_free_r>
 800ed12:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ed14:	b111      	cbz	r1, 800ed1c <_reclaim_reent+0x78>
 800ed16:	4620      	mov	r0, r4
 800ed18:	f000 f864 	bl	800ede4 <_free_r>
 800ed1c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ed1e:	b111      	cbz	r1, 800ed26 <_reclaim_reent+0x82>
 800ed20:	4620      	mov	r0, r4
 800ed22:	f000 f85f 	bl	800ede4 <_free_r>
 800ed26:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ed28:	b111      	cbz	r1, 800ed30 <_reclaim_reent+0x8c>
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	f000 f85a 	bl	800ede4 <_free_r>
 800ed30:	6a23      	ldr	r3, [r4, #32]
 800ed32:	b14b      	cbz	r3, 800ed48 <_reclaim_reent+0xa4>
 800ed34:	4620      	mov	r0, r4
 800ed36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed3a:	4718      	bx	r3
 800ed3c:	680e      	ldr	r6, [r1, #0]
 800ed3e:	4620      	mov	r0, r4
 800ed40:	f000 f850 	bl	800ede4 <_free_r>
 800ed44:	4631      	mov	r1, r6
 800ed46:	e7bb      	b.n	800ecc0 <_reclaim_reent+0x1c>
 800ed48:	bd70      	pop	{r4, r5, r6, pc}
 800ed4a:	bf00      	nop
 800ed4c:	2000003c 	.word	0x2000003c

0800ed50 <_sbrk_r>:
 800ed50:	b538      	push	{r3, r4, r5, lr}
 800ed52:	4d06      	ldr	r5, [pc, #24]	@ (800ed6c <_sbrk_r+0x1c>)
 800ed54:	2300      	movs	r3, #0
 800ed56:	4604      	mov	r4, r0
 800ed58:	4608      	mov	r0, r1
 800ed5a:	602b      	str	r3, [r5, #0]
 800ed5c:	f7f4 fbb4 	bl	80034c8 <_sbrk>
 800ed60:	1c43      	adds	r3, r0, #1
 800ed62:	d102      	bne.n	800ed6a <_sbrk_r+0x1a>
 800ed64:	682b      	ldr	r3, [r5, #0]
 800ed66:	b103      	cbz	r3, 800ed6a <_sbrk_r+0x1a>
 800ed68:	6023      	str	r3, [r4, #0]
 800ed6a:	bd38      	pop	{r3, r4, r5, pc}
 800ed6c:	20002b28 	.word	0x20002b28

0800ed70 <__errno>:
 800ed70:	4b01      	ldr	r3, [pc, #4]	@ (800ed78 <__errno+0x8>)
 800ed72:	6818      	ldr	r0, [r3, #0]
 800ed74:	4770      	bx	lr
 800ed76:	bf00      	nop
 800ed78:	2000003c 	.word	0x2000003c

0800ed7c <__libc_init_array>:
 800ed7c:	b570      	push	{r4, r5, r6, lr}
 800ed7e:	4d0d      	ldr	r5, [pc, #52]	@ (800edb4 <__libc_init_array+0x38>)
 800ed80:	4c0d      	ldr	r4, [pc, #52]	@ (800edb8 <__libc_init_array+0x3c>)
 800ed82:	1b64      	subs	r4, r4, r5
 800ed84:	10a4      	asrs	r4, r4, #2
 800ed86:	2600      	movs	r6, #0
 800ed88:	42a6      	cmp	r6, r4
 800ed8a:	d109      	bne.n	800eda0 <__libc_init_array+0x24>
 800ed8c:	4d0b      	ldr	r5, [pc, #44]	@ (800edbc <__libc_init_array+0x40>)
 800ed8e:	4c0c      	ldr	r4, [pc, #48]	@ (800edc0 <__libc_init_array+0x44>)
 800ed90:	f000 fba8 	bl	800f4e4 <_init>
 800ed94:	1b64      	subs	r4, r4, r5
 800ed96:	10a4      	asrs	r4, r4, #2
 800ed98:	2600      	movs	r6, #0
 800ed9a:	42a6      	cmp	r6, r4
 800ed9c:	d105      	bne.n	800edaa <__libc_init_array+0x2e>
 800ed9e:	bd70      	pop	{r4, r5, r6, pc}
 800eda0:	f855 3b04 	ldr.w	r3, [r5], #4
 800eda4:	4798      	blx	r3
 800eda6:	3601      	adds	r6, #1
 800eda8:	e7ee      	b.n	800ed88 <__libc_init_array+0xc>
 800edaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800edae:	4798      	blx	r3
 800edb0:	3601      	adds	r6, #1
 800edb2:	e7f2      	b.n	800ed9a <__libc_init_array+0x1e>
 800edb4:	0800fc78 	.word	0x0800fc78
 800edb8:	0800fc78 	.word	0x0800fc78
 800edbc:	0800fc78 	.word	0x0800fc78
 800edc0:	0800fc80 	.word	0x0800fc80

0800edc4 <__retarget_lock_acquire_recursive>:
 800edc4:	4770      	bx	lr

0800edc6 <__retarget_lock_release_recursive>:
 800edc6:	4770      	bx	lr

0800edc8 <memcpy>:
 800edc8:	440a      	add	r2, r1
 800edca:	4291      	cmp	r1, r2
 800edcc:	f100 33ff 	add.w	r3, r0, #4294967295
 800edd0:	d100      	bne.n	800edd4 <memcpy+0xc>
 800edd2:	4770      	bx	lr
 800edd4:	b510      	push	{r4, lr}
 800edd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800edde:	4291      	cmp	r1, r2
 800ede0:	d1f9      	bne.n	800edd6 <memcpy+0xe>
 800ede2:	bd10      	pop	{r4, pc}

0800ede4 <_free_r>:
 800ede4:	b538      	push	{r3, r4, r5, lr}
 800ede6:	4605      	mov	r5, r0
 800ede8:	2900      	cmp	r1, #0
 800edea:	d041      	beq.n	800ee70 <_free_r+0x8c>
 800edec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edf0:	1f0c      	subs	r4, r1, #4
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	bfb8      	it	lt
 800edf6:	18e4      	addlt	r4, r4, r3
 800edf8:	f7ff ff0c 	bl	800ec14 <__malloc_lock>
 800edfc:	4a1d      	ldr	r2, [pc, #116]	@ (800ee74 <_free_r+0x90>)
 800edfe:	6813      	ldr	r3, [r2, #0]
 800ee00:	b933      	cbnz	r3, 800ee10 <_free_r+0x2c>
 800ee02:	6063      	str	r3, [r4, #4]
 800ee04:	6014      	str	r4, [r2, #0]
 800ee06:	4628      	mov	r0, r5
 800ee08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee0c:	f7ff bf08 	b.w	800ec20 <__malloc_unlock>
 800ee10:	42a3      	cmp	r3, r4
 800ee12:	d908      	bls.n	800ee26 <_free_r+0x42>
 800ee14:	6820      	ldr	r0, [r4, #0]
 800ee16:	1821      	adds	r1, r4, r0
 800ee18:	428b      	cmp	r3, r1
 800ee1a:	bf01      	itttt	eq
 800ee1c:	6819      	ldreq	r1, [r3, #0]
 800ee1e:	685b      	ldreq	r3, [r3, #4]
 800ee20:	1809      	addeq	r1, r1, r0
 800ee22:	6021      	streq	r1, [r4, #0]
 800ee24:	e7ed      	b.n	800ee02 <_free_r+0x1e>
 800ee26:	461a      	mov	r2, r3
 800ee28:	685b      	ldr	r3, [r3, #4]
 800ee2a:	b10b      	cbz	r3, 800ee30 <_free_r+0x4c>
 800ee2c:	42a3      	cmp	r3, r4
 800ee2e:	d9fa      	bls.n	800ee26 <_free_r+0x42>
 800ee30:	6811      	ldr	r1, [r2, #0]
 800ee32:	1850      	adds	r0, r2, r1
 800ee34:	42a0      	cmp	r0, r4
 800ee36:	d10b      	bne.n	800ee50 <_free_r+0x6c>
 800ee38:	6820      	ldr	r0, [r4, #0]
 800ee3a:	4401      	add	r1, r0
 800ee3c:	1850      	adds	r0, r2, r1
 800ee3e:	4283      	cmp	r3, r0
 800ee40:	6011      	str	r1, [r2, #0]
 800ee42:	d1e0      	bne.n	800ee06 <_free_r+0x22>
 800ee44:	6818      	ldr	r0, [r3, #0]
 800ee46:	685b      	ldr	r3, [r3, #4]
 800ee48:	6053      	str	r3, [r2, #4]
 800ee4a:	4408      	add	r0, r1
 800ee4c:	6010      	str	r0, [r2, #0]
 800ee4e:	e7da      	b.n	800ee06 <_free_r+0x22>
 800ee50:	d902      	bls.n	800ee58 <_free_r+0x74>
 800ee52:	230c      	movs	r3, #12
 800ee54:	602b      	str	r3, [r5, #0]
 800ee56:	e7d6      	b.n	800ee06 <_free_r+0x22>
 800ee58:	6820      	ldr	r0, [r4, #0]
 800ee5a:	1821      	adds	r1, r4, r0
 800ee5c:	428b      	cmp	r3, r1
 800ee5e:	bf04      	itt	eq
 800ee60:	6819      	ldreq	r1, [r3, #0]
 800ee62:	685b      	ldreq	r3, [r3, #4]
 800ee64:	6063      	str	r3, [r4, #4]
 800ee66:	bf04      	itt	eq
 800ee68:	1809      	addeq	r1, r1, r0
 800ee6a:	6021      	streq	r1, [r4, #0]
 800ee6c:	6054      	str	r4, [r2, #4]
 800ee6e:	e7ca      	b.n	800ee06 <_free_r+0x22>
 800ee70:	bd38      	pop	{r3, r4, r5, pc}
 800ee72:	bf00      	nop
 800ee74:	200029ec 	.word	0x200029ec

0800ee78 <__ssputs_r>:
 800ee78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee7c:	688e      	ldr	r6, [r1, #8]
 800ee7e:	461f      	mov	r7, r3
 800ee80:	42be      	cmp	r6, r7
 800ee82:	680b      	ldr	r3, [r1, #0]
 800ee84:	4682      	mov	sl, r0
 800ee86:	460c      	mov	r4, r1
 800ee88:	4690      	mov	r8, r2
 800ee8a:	d82d      	bhi.n	800eee8 <__ssputs_r+0x70>
 800ee8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ee90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ee94:	d026      	beq.n	800eee4 <__ssputs_r+0x6c>
 800ee96:	6965      	ldr	r5, [r4, #20]
 800ee98:	6909      	ldr	r1, [r1, #16]
 800ee9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee9e:	eba3 0901 	sub.w	r9, r3, r1
 800eea2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eea6:	1c7b      	adds	r3, r7, #1
 800eea8:	444b      	add	r3, r9
 800eeaa:	106d      	asrs	r5, r5, #1
 800eeac:	429d      	cmp	r5, r3
 800eeae:	bf38      	it	cc
 800eeb0:	461d      	movcc	r5, r3
 800eeb2:	0553      	lsls	r3, r2, #21
 800eeb4:	d527      	bpl.n	800ef06 <__ssputs_r+0x8e>
 800eeb6:	4629      	mov	r1, r5
 800eeb8:	f7ff fe2c 	bl	800eb14 <_malloc_r>
 800eebc:	4606      	mov	r6, r0
 800eebe:	b360      	cbz	r0, 800ef1a <__ssputs_r+0xa2>
 800eec0:	6921      	ldr	r1, [r4, #16]
 800eec2:	464a      	mov	r2, r9
 800eec4:	f7ff ff80 	bl	800edc8 <memcpy>
 800eec8:	89a3      	ldrh	r3, [r4, #12]
 800eeca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eed2:	81a3      	strh	r3, [r4, #12]
 800eed4:	6126      	str	r6, [r4, #16]
 800eed6:	6165      	str	r5, [r4, #20]
 800eed8:	444e      	add	r6, r9
 800eeda:	eba5 0509 	sub.w	r5, r5, r9
 800eede:	6026      	str	r6, [r4, #0]
 800eee0:	60a5      	str	r5, [r4, #8]
 800eee2:	463e      	mov	r6, r7
 800eee4:	42be      	cmp	r6, r7
 800eee6:	d900      	bls.n	800eeea <__ssputs_r+0x72>
 800eee8:	463e      	mov	r6, r7
 800eeea:	6820      	ldr	r0, [r4, #0]
 800eeec:	4632      	mov	r2, r6
 800eeee:	4641      	mov	r1, r8
 800eef0:	f000 faa8 	bl	800f444 <memmove>
 800eef4:	68a3      	ldr	r3, [r4, #8]
 800eef6:	1b9b      	subs	r3, r3, r6
 800eef8:	60a3      	str	r3, [r4, #8]
 800eefa:	6823      	ldr	r3, [r4, #0]
 800eefc:	4433      	add	r3, r6
 800eefe:	6023      	str	r3, [r4, #0]
 800ef00:	2000      	movs	r0, #0
 800ef02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef06:	462a      	mov	r2, r5
 800ef08:	f000 fab6 	bl	800f478 <_realloc_r>
 800ef0c:	4606      	mov	r6, r0
 800ef0e:	2800      	cmp	r0, #0
 800ef10:	d1e0      	bne.n	800eed4 <__ssputs_r+0x5c>
 800ef12:	6921      	ldr	r1, [r4, #16]
 800ef14:	4650      	mov	r0, sl
 800ef16:	f7ff ff65 	bl	800ede4 <_free_r>
 800ef1a:	230c      	movs	r3, #12
 800ef1c:	f8ca 3000 	str.w	r3, [sl]
 800ef20:	89a3      	ldrh	r3, [r4, #12]
 800ef22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef26:	81a3      	strh	r3, [r4, #12]
 800ef28:	f04f 30ff 	mov.w	r0, #4294967295
 800ef2c:	e7e9      	b.n	800ef02 <__ssputs_r+0x8a>
	...

0800ef30 <_svfiprintf_r>:
 800ef30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef34:	4698      	mov	r8, r3
 800ef36:	898b      	ldrh	r3, [r1, #12]
 800ef38:	061b      	lsls	r3, r3, #24
 800ef3a:	b09d      	sub	sp, #116	@ 0x74
 800ef3c:	4607      	mov	r7, r0
 800ef3e:	460d      	mov	r5, r1
 800ef40:	4614      	mov	r4, r2
 800ef42:	d510      	bpl.n	800ef66 <_svfiprintf_r+0x36>
 800ef44:	690b      	ldr	r3, [r1, #16]
 800ef46:	b973      	cbnz	r3, 800ef66 <_svfiprintf_r+0x36>
 800ef48:	2140      	movs	r1, #64	@ 0x40
 800ef4a:	f7ff fde3 	bl	800eb14 <_malloc_r>
 800ef4e:	6028      	str	r0, [r5, #0]
 800ef50:	6128      	str	r0, [r5, #16]
 800ef52:	b930      	cbnz	r0, 800ef62 <_svfiprintf_r+0x32>
 800ef54:	230c      	movs	r3, #12
 800ef56:	603b      	str	r3, [r7, #0]
 800ef58:	f04f 30ff 	mov.w	r0, #4294967295
 800ef5c:	b01d      	add	sp, #116	@ 0x74
 800ef5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef62:	2340      	movs	r3, #64	@ 0x40
 800ef64:	616b      	str	r3, [r5, #20]
 800ef66:	2300      	movs	r3, #0
 800ef68:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef6a:	2320      	movs	r3, #32
 800ef6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef70:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef74:	2330      	movs	r3, #48	@ 0x30
 800ef76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f114 <_svfiprintf_r+0x1e4>
 800ef7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef7e:	f04f 0901 	mov.w	r9, #1
 800ef82:	4623      	mov	r3, r4
 800ef84:	469a      	mov	sl, r3
 800ef86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef8a:	b10a      	cbz	r2, 800ef90 <_svfiprintf_r+0x60>
 800ef8c:	2a25      	cmp	r2, #37	@ 0x25
 800ef8e:	d1f9      	bne.n	800ef84 <_svfiprintf_r+0x54>
 800ef90:	ebba 0b04 	subs.w	fp, sl, r4
 800ef94:	d00b      	beq.n	800efae <_svfiprintf_r+0x7e>
 800ef96:	465b      	mov	r3, fp
 800ef98:	4622      	mov	r2, r4
 800ef9a:	4629      	mov	r1, r5
 800ef9c:	4638      	mov	r0, r7
 800ef9e:	f7ff ff6b 	bl	800ee78 <__ssputs_r>
 800efa2:	3001      	adds	r0, #1
 800efa4:	f000 80a7 	beq.w	800f0f6 <_svfiprintf_r+0x1c6>
 800efa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efaa:	445a      	add	r2, fp
 800efac:	9209      	str	r2, [sp, #36]	@ 0x24
 800efae:	f89a 3000 	ldrb.w	r3, [sl]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	f000 809f 	beq.w	800f0f6 <_svfiprintf_r+0x1c6>
 800efb8:	2300      	movs	r3, #0
 800efba:	f04f 32ff 	mov.w	r2, #4294967295
 800efbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efc2:	f10a 0a01 	add.w	sl, sl, #1
 800efc6:	9304      	str	r3, [sp, #16]
 800efc8:	9307      	str	r3, [sp, #28]
 800efca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800efce:	931a      	str	r3, [sp, #104]	@ 0x68
 800efd0:	4654      	mov	r4, sl
 800efd2:	2205      	movs	r2, #5
 800efd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efd8:	484e      	ldr	r0, [pc, #312]	@ (800f114 <_svfiprintf_r+0x1e4>)
 800efda:	f7f1 f909 	bl	80001f0 <memchr>
 800efde:	9a04      	ldr	r2, [sp, #16]
 800efe0:	b9d8      	cbnz	r0, 800f01a <_svfiprintf_r+0xea>
 800efe2:	06d0      	lsls	r0, r2, #27
 800efe4:	bf44      	itt	mi
 800efe6:	2320      	movmi	r3, #32
 800efe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efec:	0711      	lsls	r1, r2, #28
 800efee:	bf44      	itt	mi
 800eff0:	232b      	movmi	r3, #43	@ 0x2b
 800eff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eff6:	f89a 3000 	ldrb.w	r3, [sl]
 800effa:	2b2a      	cmp	r3, #42	@ 0x2a
 800effc:	d015      	beq.n	800f02a <_svfiprintf_r+0xfa>
 800effe:	9a07      	ldr	r2, [sp, #28]
 800f000:	4654      	mov	r4, sl
 800f002:	2000      	movs	r0, #0
 800f004:	f04f 0c0a 	mov.w	ip, #10
 800f008:	4621      	mov	r1, r4
 800f00a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f00e:	3b30      	subs	r3, #48	@ 0x30
 800f010:	2b09      	cmp	r3, #9
 800f012:	d94b      	bls.n	800f0ac <_svfiprintf_r+0x17c>
 800f014:	b1b0      	cbz	r0, 800f044 <_svfiprintf_r+0x114>
 800f016:	9207      	str	r2, [sp, #28]
 800f018:	e014      	b.n	800f044 <_svfiprintf_r+0x114>
 800f01a:	eba0 0308 	sub.w	r3, r0, r8
 800f01e:	fa09 f303 	lsl.w	r3, r9, r3
 800f022:	4313      	orrs	r3, r2
 800f024:	9304      	str	r3, [sp, #16]
 800f026:	46a2      	mov	sl, r4
 800f028:	e7d2      	b.n	800efd0 <_svfiprintf_r+0xa0>
 800f02a:	9b03      	ldr	r3, [sp, #12]
 800f02c:	1d19      	adds	r1, r3, #4
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	9103      	str	r1, [sp, #12]
 800f032:	2b00      	cmp	r3, #0
 800f034:	bfbb      	ittet	lt
 800f036:	425b      	neglt	r3, r3
 800f038:	f042 0202 	orrlt.w	r2, r2, #2
 800f03c:	9307      	strge	r3, [sp, #28]
 800f03e:	9307      	strlt	r3, [sp, #28]
 800f040:	bfb8      	it	lt
 800f042:	9204      	strlt	r2, [sp, #16]
 800f044:	7823      	ldrb	r3, [r4, #0]
 800f046:	2b2e      	cmp	r3, #46	@ 0x2e
 800f048:	d10a      	bne.n	800f060 <_svfiprintf_r+0x130>
 800f04a:	7863      	ldrb	r3, [r4, #1]
 800f04c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f04e:	d132      	bne.n	800f0b6 <_svfiprintf_r+0x186>
 800f050:	9b03      	ldr	r3, [sp, #12]
 800f052:	1d1a      	adds	r2, r3, #4
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	9203      	str	r2, [sp, #12]
 800f058:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f05c:	3402      	adds	r4, #2
 800f05e:	9305      	str	r3, [sp, #20]
 800f060:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f124 <_svfiprintf_r+0x1f4>
 800f064:	7821      	ldrb	r1, [r4, #0]
 800f066:	2203      	movs	r2, #3
 800f068:	4650      	mov	r0, sl
 800f06a:	f7f1 f8c1 	bl	80001f0 <memchr>
 800f06e:	b138      	cbz	r0, 800f080 <_svfiprintf_r+0x150>
 800f070:	9b04      	ldr	r3, [sp, #16]
 800f072:	eba0 000a 	sub.w	r0, r0, sl
 800f076:	2240      	movs	r2, #64	@ 0x40
 800f078:	4082      	lsls	r2, r0
 800f07a:	4313      	orrs	r3, r2
 800f07c:	3401      	adds	r4, #1
 800f07e:	9304      	str	r3, [sp, #16]
 800f080:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f084:	4824      	ldr	r0, [pc, #144]	@ (800f118 <_svfiprintf_r+0x1e8>)
 800f086:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f08a:	2206      	movs	r2, #6
 800f08c:	f7f1 f8b0 	bl	80001f0 <memchr>
 800f090:	2800      	cmp	r0, #0
 800f092:	d036      	beq.n	800f102 <_svfiprintf_r+0x1d2>
 800f094:	4b21      	ldr	r3, [pc, #132]	@ (800f11c <_svfiprintf_r+0x1ec>)
 800f096:	bb1b      	cbnz	r3, 800f0e0 <_svfiprintf_r+0x1b0>
 800f098:	9b03      	ldr	r3, [sp, #12]
 800f09a:	3307      	adds	r3, #7
 800f09c:	f023 0307 	bic.w	r3, r3, #7
 800f0a0:	3308      	adds	r3, #8
 800f0a2:	9303      	str	r3, [sp, #12]
 800f0a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0a6:	4433      	add	r3, r6
 800f0a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0aa:	e76a      	b.n	800ef82 <_svfiprintf_r+0x52>
 800f0ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0b0:	460c      	mov	r4, r1
 800f0b2:	2001      	movs	r0, #1
 800f0b4:	e7a8      	b.n	800f008 <_svfiprintf_r+0xd8>
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	3401      	adds	r4, #1
 800f0ba:	9305      	str	r3, [sp, #20]
 800f0bc:	4619      	mov	r1, r3
 800f0be:	f04f 0c0a 	mov.w	ip, #10
 800f0c2:	4620      	mov	r0, r4
 800f0c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0c8:	3a30      	subs	r2, #48	@ 0x30
 800f0ca:	2a09      	cmp	r2, #9
 800f0cc:	d903      	bls.n	800f0d6 <_svfiprintf_r+0x1a6>
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d0c6      	beq.n	800f060 <_svfiprintf_r+0x130>
 800f0d2:	9105      	str	r1, [sp, #20]
 800f0d4:	e7c4      	b.n	800f060 <_svfiprintf_r+0x130>
 800f0d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0da:	4604      	mov	r4, r0
 800f0dc:	2301      	movs	r3, #1
 800f0de:	e7f0      	b.n	800f0c2 <_svfiprintf_r+0x192>
 800f0e0:	ab03      	add	r3, sp, #12
 800f0e2:	9300      	str	r3, [sp, #0]
 800f0e4:	462a      	mov	r2, r5
 800f0e6:	4b0e      	ldr	r3, [pc, #56]	@ (800f120 <_svfiprintf_r+0x1f0>)
 800f0e8:	a904      	add	r1, sp, #16
 800f0ea:	4638      	mov	r0, r7
 800f0ec:	f3af 8000 	nop.w
 800f0f0:	1c42      	adds	r2, r0, #1
 800f0f2:	4606      	mov	r6, r0
 800f0f4:	d1d6      	bne.n	800f0a4 <_svfiprintf_r+0x174>
 800f0f6:	89ab      	ldrh	r3, [r5, #12]
 800f0f8:	065b      	lsls	r3, r3, #25
 800f0fa:	f53f af2d 	bmi.w	800ef58 <_svfiprintf_r+0x28>
 800f0fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f100:	e72c      	b.n	800ef5c <_svfiprintf_r+0x2c>
 800f102:	ab03      	add	r3, sp, #12
 800f104:	9300      	str	r3, [sp, #0]
 800f106:	462a      	mov	r2, r5
 800f108:	4b05      	ldr	r3, [pc, #20]	@ (800f120 <_svfiprintf_r+0x1f0>)
 800f10a:	a904      	add	r1, sp, #16
 800f10c:	4638      	mov	r0, r7
 800f10e:	f000 f879 	bl	800f204 <_printf_i>
 800f112:	e7ed      	b.n	800f0f0 <_svfiprintf_r+0x1c0>
 800f114:	0800fc3c 	.word	0x0800fc3c
 800f118:	0800fc46 	.word	0x0800fc46
 800f11c:	00000000 	.word	0x00000000
 800f120:	0800ee79 	.word	0x0800ee79
 800f124:	0800fc42 	.word	0x0800fc42

0800f128 <_printf_common>:
 800f128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f12c:	4616      	mov	r6, r2
 800f12e:	4698      	mov	r8, r3
 800f130:	688a      	ldr	r2, [r1, #8]
 800f132:	690b      	ldr	r3, [r1, #16]
 800f134:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f138:	4293      	cmp	r3, r2
 800f13a:	bfb8      	it	lt
 800f13c:	4613      	movlt	r3, r2
 800f13e:	6033      	str	r3, [r6, #0]
 800f140:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f144:	4607      	mov	r7, r0
 800f146:	460c      	mov	r4, r1
 800f148:	b10a      	cbz	r2, 800f14e <_printf_common+0x26>
 800f14a:	3301      	adds	r3, #1
 800f14c:	6033      	str	r3, [r6, #0]
 800f14e:	6823      	ldr	r3, [r4, #0]
 800f150:	0699      	lsls	r1, r3, #26
 800f152:	bf42      	ittt	mi
 800f154:	6833      	ldrmi	r3, [r6, #0]
 800f156:	3302      	addmi	r3, #2
 800f158:	6033      	strmi	r3, [r6, #0]
 800f15a:	6825      	ldr	r5, [r4, #0]
 800f15c:	f015 0506 	ands.w	r5, r5, #6
 800f160:	d106      	bne.n	800f170 <_printf_common+0x48>
 800f162:	f104 0a19 	add.w	sl, r4, #25
 800f166:	68e3      	ldr	r3, [r4, #12]
 800f168:	6832      	ldr	r2, [r6, #0]
 800f16a:	1a9b      	subs	r3, r3, r2
 800f16c:	42ab      	cmp	r3, r5
 800f16e:	dc26      	bgt.n	800f1be <_printf_common+0x96>
 800f170:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f174:	6822      	ldr	r2, [r4, #0]
 800f176:	3b00      	subs	r3, #0
 800f178:	bf18      	it	ne
 800f17a:	2301      	movne	r3, #1
 800f17c:	0692      	lsls	r2, r2, #26
 800f17e:	d42b      	bmi.n	800f1d8 <_printf_common+0xb0>
 800f180:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f184:	4641      	mov	r1, r8
 800f186:	4638      	mov	r0, r7
 800f188:	47c8      	blx	r9
 800f18a:	3001      	adds	r0, #1
 800f18c:	d01e      	beq.n	800f1cc <_printf_common+0xa4>
 800f18e:	6823      	ldr	r3, [r4, #0]
 800f190:	6922      	ldr	r2, [r4, #16]
 800f192:	f003 0306 	and.w	r3, r3, #6
 800f196:	2b04      	cmp	r3, #4
 800f198:	bf02      	ittt	eq
 800f19a:	68e5      	ldreq	r5, [r4, #12]
 800f19c:	6833      	ldreq	r3, [r6, #0]
 800f19e:	1aed      	subeq	r5, r5, r3
 800f1a0:	68a3      	ldr	r3, [r4, #8]
 800f1a2:	bf0c      	ite	eq
 800f1a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f1a8:	2500      	movne	r5, #0
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	bfc4      	itt	gt
 800f1ae:	1a9b      	subgt	r3, r3, r2
 800f1b0:	18ed      	addgt	r5, r5, r3
 800f1b2:	2600      	movs	r6, #0
 800f1b4:	341a      	adds	r4, #26
 800f1b6:	42b5      	cmp	r5, r6
 800f1b8:	d11a      	bne.n	800f1f0 <_printf_common+0xc8>
 800f1ba:	2000      	movs	r0, #0
 800f1bc:	e008      	b.n	800f1d0 <_printf_common+0xa8>
 800f1be:	2301      	movs	r3, #1
 800f1c0:	4652      	mov	r2, sl
 800f1c2:	4641      	mov	r1, r8
 800f1c4:	4638      	mov	r0, r7
 800f1c6:	47c8      	blx	r9
 800f1c8:	3001      	adds	r0, #1
 800f1ca:	d103      	bne.n	800f1d4 <_printf_common+0xac>
 800f1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1d4:	3501      	adds	r5, #1
 800f1d6:	e7c6      	b.n	800f166 <_printf_common+0x3e>
 800f1d8:	18e1      	adds	r1, r4, r3
 800f1da:	1c5a      	adds	r2, r3, #1
 800f1dc:	2030      	movs	r0, #48	@ 0x30
 800f1de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f1e2:	4422      	add	r2, r4
 800f1e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f1e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f1ec:	3302      	adds	r3, #2
 800f1ee:	e7c7      	b.n	800f180 <_printf_common+0x58>
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	4622      	mov	r2, r4
 800f1f4:	4641      	mov	r1, r8
 800f1f6:	4638      	mov	r0, r7
 800f1f8:	47c8      	blx	r9
 800f1fa:	3001      	adds	r0, #1
 800f1fc:	d0e6      	beq.n	800f1cc <_printf_common+0xa4>
 800f1fe:	3601      	adds	r6, #1
 800f200:	e7d9      	b.n	800f1b6 <_printf_common+0x8e>
	...

0800f204 <_printf_i>:
 800f204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f208:	7e0f      	ldrb	r7, [r1, #24]
 800f20a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f20c:	2f78      	cmp	r7, #120	@ 0x78
 800f20e:	4691      	mov	r9, r2
 800f210:	4680      	mov	r8, r0
 800f212:	460c      	mov	r4, r1
 800f214:	469a      	mov	sl, r3
 800f216:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f21a:	d807      	bhi.n	800f22c <_printf_i+0x28>
 800f21c:	2f62      	cmp	r7, #98	@ 0x62
 800f21e:	d80a      	bhi.n	800f236 <_printf_i+0x32>
 800f220:	2f00      	cmp	r7, #0
 800f222:	f000 80d2 	beq.w	800f3ca <_printf_i+0x1c6>
 800f226:	2f58      	cmp	r7, #88	@ 0x58
 800f228:	f000 80b9 	beq.w	800f39e <_printf_i+0x19a>
 800f22c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f230:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f234:	e03a      	b.n	800f2ac <_printf_i+0xa8>
 800f236:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f23a:	2b15      	cmp	r3, #21
 800f23c:	d8f6      	bhi.n	800f22c <_printf_i+0x28>
 800f23e:	a101      	add	r1, pc, #4	@ (adr r1, 800f244 <_printf_i+0x40>)
 800f240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f244:	0800f29d 	.word	0x0800f29d
 800f248:	0800f2b1 	.word	0x0800f2b1
 800f24c:	0800f22d 	.word	0x0800f22d
 800f250:	0800f22d 	.word	0x0800f22d
 800f254:	0800f22d 	.word	0x0800f22d
 800f258:	0800f22d 	.word	0x0800f22d
 800f25c:	0800f2b1 	.word	0x0800f2b1
 800f260:	0800f22d 	.word	0x0800f22d
 800f264:	0800f22d 	.word	0x0800f22d
 800f268:	0800f22d 	.word	0x0800f22d
 800f26c:	0800f22d 	.word	0x0800f22d
 800f270:	0800f3b1 	.word	0x0800f3b1
 800f274:	0800f2db 	.word	0x0800f2db
 800f278:	0800f36b 	.word	0x0800f36b
 800f27c:	0800f22d 	.word	0x0800f22d
 800f280:	0800f22d 	.word	0x0800f22d
 800f284:	0800f3d3 	.word	0x0800f3d3
 800f288:	0800f22d 	.word	0x0800f22d
 800f28c:	0800f2db 	.word	0x0800f2db
 800f290:	0800f22d 	.word	0x0800f22d
 800f294:	0800f22d 	.word	0x0800f22d
 800f298:	0800f373 	.word	0x0800f373
 800f29c:	6833      	ldr	r3, [r6, #0]
 800f29e:	1d1a      	adds	r2, r3, #4
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	6032      	str	r2, [r6, #0]
 800f2a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f2a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	e09d      	b.n	800f3ec <_printf_i+0x1e8>
 800f2b0:	6833      	ldr	r3, [r6, #0]
 800f2b2:	6820      	ldr	r0, [r4, #0]
 800f2b4:	1d19      	adds	r1, r3, #4
 800f2b6:	6031      	str	r1, [r6, #0]
 800f2b8:	0606      	lsls	r6, r0, #24
 800f2ba:	d501      	bpl.n	800f2c0 <_printf_i+0xbc>
 800f2bc:	681d      	ldr	r5, [r3, #0]
 800f2be:	e003      	b.n	800f2c8 <_printf_i+0xc4>
 800f2c0:	0645      	lsls	r5, r0, #25
 800f2c2:	d5fb      	bpl.n	800f2bc <_printf_i+0xb8>
 800f2c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f2c8:	2d00      	cmp	r5, #0
 800f2ca:	da03      	bge.n	800f2d4 <_printf_i+0xd0>
 800f2cc:	232d      	movs	r3, #45	@ 0x2d
 800f2ce:	426d      	negs	r5, r5
 800f2d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2d4:	4859      	ldr	r0, [pc, #356]	@ (800f43c <_printf_i+0x238>)
 800f2d6:	230a      	movs	r3, #10
 800f2d8:	e011      	b.n	800f2fe <_printf_i+0xfa>
 800f2da:	6821      	ldr	r1, [r4, #0]
 800f2dc:	6833      	ldr	r3, [r6, #0]
 800f2de:	0608      	lsls	r0, r1, #24
 800f2e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800f2e4:	d402      	bmi.n	800f2ec <_printf_i+0xe8>
 800f2e6:	0649      	lsls	r1, r1, #25
 800f2e8:	bf48      	it	mi
 800f2ea:	b2ad      	uxthmi	r5, r5
 800f2ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800f2ee:	4853      	ldr	r0, [pc, #332]	@ (800f43c <_printf_i+0x238>)
 800f2f0:	6033      	str	r3, [r6, #0]
 800f2f2:	bf14      	ite	ne
 800f2f4:	230a      	movne	r3, #10
 800f2f6:	2308      	moveq	r3, #8
 800f2f8:	2100      	movs	r1, #0
 800f2fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f2fe:	6866      	ldr	r6, [r4, #4]
 800f300:	60a6      	str	r6, [r4, #8]
 800f302:	2e00      	cmp	r6, #0
 800f304:	bfa2      	ittt	ge
 800f306:	6821      	ldrge	r1, [r4, #0]
 800f308:	f021 0104 	bicge.w	r1, r1, #4
 800f30c:	6021      	strge	r1, [r4, #0]
 800f30e:	b90d      	cbnz	r5, 800f314 <_printf_i+0x110>
 800f310:	2e00      	cmp	r6, #0
 800f312:	d04b      	beq.n	800f3ac <_printf_i+0x1a8>
 800f314:	4616      	mov	r6, r2
 800f316:	fbb5 f1f3 	udiv	r1, r5, r3
 800f31a:	fb03 5711 	mls	r7, r3, r1, r5
 800f31e:	5dc7      	ldrb	r7, [r0, r7]
 800f320:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f324:	462f      	mov	r7, r5
 800f326:	42bb      	cmp	r3, r7
 800f328:	460d      	mov	r5, r1
 800f32a:	d9f4      	bls.n	800f316 <_printf_i+0x112>
 800f32c:	2b08      	cmp	r3, #8
 800f32e:	d10b      	bne.n	800f348 <_printf_i+0x144>
 800f330:	6823      	ldr	r3, [r4, #0]
 800f332:	07df      	lsls	r7, r3, #31
 800f334:	d508      	bpl.n	800f348 <_printf_i+0x144>
 800f336:	6923      	ldr	r3, [r4, #16]
 800f338:	6861      	ldr	r1, [r4, #4]
 800f33a:	4299      	cmp	r1, r3
 800f33c:	bfde      	ittt	le
 800f33e:	2330      	movle	r3, #48	@ 0x30
 800f340:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f344:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f348:	1b92      	subs	r2, r2, r6
 800f34a:	6122      	str	r2, [r4, #16]
 800f34c:	f8cd a000 	str.w	sl, [sp]
 800f350:	464b      	mov	r3, r9
 800f352:	aa03      	add	r2, sp, #12
 800f354:	4621      	mov	r1, r4
 800f356:	4640      	mov	r0, r8
 800f358:	f7ff fee6 	bl	800f128 <_printf_common>
 800f35c:	3001      	adds	r0, #1
 800f35e:	d14a      	bne.n	800f3f6 <_printf_i+0x1f2>
 800f360:	f04f 30ff 	mov.w	r0, #4294967295
 800f364:	b004      	add	sp, #16
 800f366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f36a:	6823      	ldr	r3, [r4, #0]
 800f36c:	f043 0320 	orr.w	r3, r3, #32
 800f370:	6023      	str	r3, [r4, #0]
 800f372:	4833      	ldr	r0, [pc, #204]	@ (800f440 <_printf_i+0x23c>)
 800f374:	2778      	movs	r7, #120	@ 0x78
 800f376:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f37a:	6823      	ldr	r3, [r4, #0]
 800f37c:	6831      	ldr	r1, [r6, #0]
 800f37e:	061f      	lsls	r7, r3, #24
 800f380:	f851 5b04 	ldr.w	r5, [r1], #4
 800f384:	d402      	bmi.n	800f38c <_printf_i+0x188>
 800f386:	065f      	lsls	r7, r3, #25
 800f388:	bf48      	it	mi
 800f38a:	b2ad      	uxthmi	r5, r5
 800f38c:	6031      	str	r1, [r6, #0]
 800f38e:	07d9      	lsls	r1, r3, #31
 800f390:	bf44      	itt	mi
 800f392:	f043 0320 	orrmi.w	r3, r3, #32
 800f396:	6023      	strmi	r3, [r4, #0]
 800f398:	b11d      	cbz	r5, 800f3a2 <_printf_i+0x19e>
 800f39a:	2310      	movs	r3, #16
 800f39c:	e7ac      	b.n	800f2f8 <_printf_i+0xf4>
 800f39e:	4827      	ldr	r0, [pc, #156]	@ (800f43c <_printf_i+0x238>)
 800f3a0:	e7e9      	b.n	800f376 <_printf_i+0x172>
 800f3a2:	6823      	ldr	r3, [r4, #0]
 800f3a4:	f023 0320 	bic.w	r3, r3, #32
 800f3a8:	6023      	str	r3, [r4, #0]
 800f3aa:	e7f6      	b.n	800f39a <_printf_i+0x196>
 800f3ac:	4616      	mov	r6, r2
 800f3ae:	e7bd      	b.n	800f32c <_printf_i+0x128>
 800f3b0:	6833      	ldr	r3, [r6, #0]
 800f3b2:	6825      	ldr	r5, [r4, #0]
 800f3b4:	6961      	ldr	r1, [r4, #20]
 800f3b6:	1d18      	adds	r0, r3, #4
 800f3b8:	6030      	str	r0, [r6, #0]
 800f3ba:	062e      	lsls	r6, r5, #24
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	d501      	bpl.n	800f3c4 <_printf_i+0x1c0>
 800f3c0:	6019      	str	r1, [r3, #0]
 800f3c2:	e002      	b.n	800f3ca <_printf_i+0x1c6>
 800f3c4:	0668      	lsls	r0, r5, #25
 800f3c6:	d5fb      	bpl.n	800f3c0 <_printf_i+0x1bc>
 800f3c8:	8019      	strh	r1, [r3, #0]
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	6123      	str	r3, [r4, #16]
 800f3ce:	4616      	mov	r6, r2
 800f3d0:	e7bc      	b.n	800f34c <_printf_i+0x148>
 800f3d2:	6833      	ldr	r3, [r6, #0]
 800f3d4:	1d1a      	adds	r2, r3, #4
 800f3d6:	6032      	str	r2, [r6, #0]
 800f3d8:	681e      	ldr	r6, [r3, #0]
 800f3da:	6862      	ldr	r2, [r4, #4]
 800f3dc:	2100      	movs	r1, #0
 800f3de:	4630      	mov	r0, r6
 800f3e0:	f7f0 ff06 	bl	80001f0 <memchr>
 800f3e4:	b108      	cbz	r0, 800f3ea <_printf_i+0x1e6>
 800f3e6:	1b80      	subs	r0, r0, r6
 800f3e8:	6060      	str	r0, [r4, #4]
 800f3ea:	6863      	ldr	r3, [r4, #4]
 800f3ec:	6123      	str	r3, [r4, #16]
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f3f4:	e7aa      	b.n	800f34c <_printf_i+0x148>
 800f3f6:	6923      	ldr	r3, [r4, #16]
 800f3f8:	4632      	mov	r2, r6
 800f3fa:	4649      	mov	r1, r9
 800f3fc:	4640      	mov	r0, r8
 800f3fe:	47d0      	blx	sl
 800f400:	3001      	adds	r0, #1
 800f402:	d0ad      	beq.n	800f360 <_printf_i+0x15c>
 800f404:	6823      	ldr	r3, [r4, #0]
 800f406:	079b      	lsls	r3, r3, #30
 800f408:	d413      	bmi.n	800f432 <_printf_i+0x22e>
 800f40a:	68e0      	ldr	r0, [r4, #12]
 800f40c:	9b03      	ldr	r3, [sp, #12]
 800f40e:	4298      	cmp	r0, r3
 800f410:	bfb8      	it	lt
 800f412:	4618      	movlt	r0, r3
 800f414:	e7a6      	b.n	800f364 <_printf_i+0x160>
 800f416:	2301      	movs	r3, #1
 800f418:	4632      	mov	r2, r6
 800f41a:	4649      	mov	r1, r9
 800f41c:	4640      	mov	r0, r8
 800f41e:	47d0      	blx	sl
 800f420:	3001      	adds	r0, #1
 800f422:	d09d      	beq.n	800f360 <_printf_i+0x15c>
 800f424:	3501      	adds	r5, #1
 800f426:	68e3      	ldr	r3, [r4, #12]
 800f428:	9903      	ldr	r1, [sp, #12]
 800f42a:	1a5b      	subs	r3, r3, r1
 800f42c:	42ab      	cmp	r3, r5
 800f42e:	dcf2      	bgt.n	800f416 <_printf_i+0x212>
 800f430:	e7eb      	b.n	800f40a <_printf_i+0x206>
 800f432:	2500      	movs	r5, #0
 800f434:	f104 0619 	add.w	r6, r4, #25
 800f438:	e7f5      	b.n	800f426 <_printf_i+0x222>
 800f43a:	bf00      	nop
 800f43c:	0800fc4d 	.word	0x0800fc4d
 800f440:	0800fc5e 	.word	0x0800fc5e

0800f444 <memmove>:
 800f444:	4288      	cmp	r0, r1
 800f446:	b510      	push	{r4, lr}
 800f448:	eb01 0402 	add.w	r4, r1, r2
 800f44c:	d902      	bls.n	800f454 <memmove+0x10>
 800f44e:	4284      	cmp	r4, r0
 800f450:	4623      	mov	r3, r4
 800f452:	d807      	bhi.n	800f464 <memmove+0x20>
 800f454:	1e43      	subs	r3, r0, #1
 800f456:	42a1      	cmp	r1, r4
 800f458:	d008      	beq.n	800f46c <memmove+0x28>
 800f45a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f45e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f462:	e7f8      	b.n	800f456 <memmove+0x12>
 800f464:	4402      	add	r2, r0
 800f466:	4601      	mov	r1, r0
 800f468:	428a      	cmp	r2, r1
 800f46a:	d100      	bne.n	800f46e <memmove+0x2a>
 800f46c:	bd10      	pop	{r4, pc}
 800f46e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f472:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f476:	e7f7      	b.n	800f468 <memmove+0x24>

0800f478 <_realloc_r>:
 800f478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f47c:	4680      	mov	r8, r0
 800f47e:	4615      	mov	r5, r2
 800f480:	460c      	mov	r4, r1
 800f482:	b921      	cbnz	r1, 800f48e <_realloc_r+0x16>
 800f484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f488:	4611      	mov	r1, r2
 800f48a:	f7ff bb43 	b.w	800eb14 <_malloc_r>
 800f48e:	b92a      	cbnz	r2, 800f49c <_realloc_r+0x24>
 800f490:	f7ff fca8 	bl	800ede4 <_free_r>
 800f494:	2400      	movs	r4, #0
 800f496:	4620      	mov	r0, r4
 800f498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f49c:	f000 f81a 	bl	800f4d4 <_malloc_usable_size_r>
 800f4a0:	4285      	cmp	r5, r0
 800f4a2:	4606      	mov	r6, r0
 800f4a4:	d802      	bhi.n	800f4ac <_realloc_r+0x34>
 800f4a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f4aa:	d8f4      	bhi.n	800f496 <_realloc_r+0x1e>
 800f4ac:	4629      	mov	r1, r5
 800f4ae:	4640      	mov	r0, r8
 800f4b0:	f7ff fb30 	bl	800eb14 <_malloc_r>
 800f4b4:	4607      	mov	r7, r0
 800f4b6:	2800      	cmp	r0, #0
 800f4b8:	d0ec      	beq.n	800f494 <_realloc_r+0x1c>
 800f4ba:	42b5      	cmp	r5, r6
 800f4bc:	462a      	mov	r2, r5
 800f4be:	4621      	mov	r1, r4
 800f4c0:	bf28      	it	cs
 800f4c2:	4632      	movcs	r2, r6
 800f4c4:	f7ff fc80 	bl	800edc8 <memcpy>
 800f4c8:	4621      	mov	r1, r4
 800f4ca:	4640      	mov	r0, r8
 800f4cc:	f7ff fc8a 	bl	800ede4 <_free_r>
 800f4d0:	463c      	mov	r4, r7
 800f4d2:	e7e0      	b.n	800f496 <_realloc_r+0x1e>

0800f4d4 <_malloc_usable_size_r>:
 800f4d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4d8:	1f18      	subs	r0, r3, #4
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	bfbc      	itt	lt
 800f4de:	580b      	ldrlt	r3, [r1, r0]
 800f4e0:	18c0      	addlt	r0, r0, r3
 800f4e2:	4770      	bx	lr

0800f4e4 <_init>:
 800f4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4e6:	bf00      	nop
 800f4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4ea:	bc08      	pop	{r3}
 800f4ec:	469e      	mov	lr, r3
 800f4ee:	4770      	bx	lr

0800f4f0 <_fini>:
 800f4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4f2:	bf00      	nop
 800f4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4f6:	bc08      	pop	{r3}
 800f4f8:	469e      	mov	lr, r3
 800f4fa:	4770      	bx	lr
