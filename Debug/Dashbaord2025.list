
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a860  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800aa10  0800aa10  0000ba10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab58  0800ab58  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab58  0800ab58  0000bb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab60  0800ab60  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab60  0800ab60  0000bb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab64  0800ab64  0000bb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800ab68  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d74  20000060  0800abc8  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dd4  0800abc8  0000cdd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002672a  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004959  00000000  00000000  000327ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002088  00000000  00000000  00037118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000196e  00000000  00000000  000391a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd75  00000000  00000000  0003ab0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023e57  00000000  00000000  00068883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001243e9  00000000  00000000  0008c6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b0ac3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f48  00000000  00000000  001b0b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001b9a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a9f8 	.word	0x0800a9f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	0800a9f8 	.word	0x0800a9f8

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <TCAL9538RSVR_INIT>:
*/



uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	4611      	mov	r1, r2
 80004ec:	461a      	mov	r2, r3
 80004ee:	460b      	mov	r3, r1
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	4613      	mov	r3, r2
 80004f4:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;
	dev->input = direction_bitMask;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	79ba      	ldrb	r2, [r7, #6]
 80004fe:	719a      	strb	r2, [r3, #6]


    dev->i2cHandle = i2cHandle;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	2200      	movs	r2, #0
 800050a:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	f003 0303 	and.w	r3, r3, #3
 8000512:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress<<1);
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	b25b      	sxtb	r3, r3
 800051a:	f063 031f 	orn	r3, r3, #31
 800051e:	b25b      	sxtb	r3, r3
 8000520:	b2da      	uxtb	r2, r3
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	711a      	strb	r2, [r3, #4]
    uint8_t hold_bitMask = direction_bitMask;
 8000526:	79bb      	ldrb	r3, [r7, #6]
 8000528:	757b      	strb	r3, [r7, #21]

    status = TCAL9538RSVR_SetDirection(dev, &hold_bitMask);
 800052a:	f107 0315 	add.w	r3, r7, #21
 800052e:	4619      	mov	r1, r3
 8000530:	68f8      	ldr	r0, [r7, #12]
 8000532:	f000 f83b 	bl	80005ac <TCAL9538RSVR_SetDirection>
 8000536:	4603      	mov	r3, r0
 8000538:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800053a:	7dbb      	ldrb	r3, [r7, #22]
 800053c:	2b00      	cmp	r3, #0
 800053e:	bf14      	ite	ne
 8000540:	2301      	movne	r3, #1
 8000542:	2300      	moveq	r3, #0
 8000544:	b2db      	uxtb	r3, r3
 8000546:	461a      	mov	r2, r3
 8000548:	7dfb      	ldrb	r3, [r7, #23]
 800054a:	4413      	add	r3, r2
 800054c:	75fb      	strb	r3, [r7, #23]

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 800054e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000552:	4619      	mov	r1, r3
 8000554:	68f8      	ldr	r0, [r7, #12]
 8000556:	f000 f838 	bl	80005ca <TCAL9538RSVR_SetInterrupts>
 800055a:	4603      	mov	r3, r0
 800055c:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800055e:	7dbb      	ldrb	r3, [r7, #22]
 8000560:	2b00      	cmp	r3, #0
 8000562:	bf14      	ite	ne
 8000564:	2301      	movne	r3, #1
 8000566:	2300      	moveq	r3, #0
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	7dfb      	ldrb	r3, [r7, #23]
 800056e:	4413      	add	r3, r2
 8000570:	75fb      	strb	r3, [r7, #23]

    if (direction_bitMask == 0xFF) {
 8000572:	79bb      	ldrb	r3, [r7, #6]
 8000574:	2bff      	cmp	r3, #255	@ 0xff
 8000576:	d114      	bne.n	80005a2 <TCAL9538RSVR_INIT+0xc2>
        uint8_t full = 0xFF;
 8000578:	23ff      	movs	r3, #255	@ 0xff
 800057a:	753b      	strb	r3, [r7, #20]
        status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_INVERSION, &full);
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	461a      	mov	r2, r3
 8000582:	2102      	movs	r1, #2
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	f000 f894 	bl	80006b2 <TCAL9538RSVR_WriteRegister>
 800058a:	4603      	mov	r3, r0
 800058c:	75bb      	strb	r3, [r7, #22]
        errNum += (status != HAL_OK);
 800058e:	7dbb      	ldrb	r3, [r7, #22]
 8000590:	2b00      	cmp	r3, #0
 8000592:	bf14      	ite	ne
 8000594:	2301      	movne	r3, #1
 8000596:	2300      	moveq	r3, #0
 8000598:	b2db      	uxtb	r3, r3
 800059a:	461a      	mov	r2, r3
 800059c:	7dfb      	ldrb	r3, [r7, #23]
 800059e:	4413      	add	r3, r2
 80005a0:	75fb      	strb	r3, [r7, #23]
    }

    return (errNum);
 80005a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3718      	adds	r7, #24
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t* bitMask)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, bitMask);
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	2103      	movs	r1, #3
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f000 f879 	bl	80006b2 <TCAL9538RSVR_WriteRegister>
 80005c0:	4603      	mov	r3, r0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 80005d6:	1cfb      	adds	r3, r7, #3
 80005d8:	461a      	mov	r2, r3
 80005da:	2145      	movs	r1, #69	@ 0x45
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f868 	bl	80006b2 <TCAL9538RSVR_WriteRegister>
 80005e2:	4603      	mov	r3, r0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	737b      	strb	r3, [r7, #13]


    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 80005fc:	f107 030d 	add.w	r3, r7, #13
 8000600:	461a      	mov	r2, r3
 8000602:	2146      	movs	r1, #70	@ 0x46
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 f837 	bl	8000678 <TCAL9538RSVR_ReadRegister>
 800060a:	4603      	mov	r3, r0
 800060c:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 800060e:	7bbb      	ldrb	r3, [r7, #14]
 8000610:	2b00      	cmp	r3, #0
 8000612:	bf14      	ite	ne
 8000614:	2301      	movne	r3, #1
 8000616:	2300      	moveq	r3, #0
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	4413      	add	r3, r2
 8000620:	73fb      	strb	r3, [r7, #15]

    // Read updated input values
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3305      	adds	r3, #5
 8000626:	4619      	mov	r1, r3
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f000 f807 	bl	800063c <TCAL9538RSVR_ReadInput>
 800062e:	4603      	mov	r3, r0
 8000630:	73bb      	strb	r3, [r7, #14]


    return (errNum);
 8000632:	7bfb      	ldrb	r3, [r7, #15]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <TCAL9538RSVR_ReadInput>:




HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	2100      	movs	r1, #0
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 f814 	bl	8000678 <TCAL9538RSVR_ReadRegister>
 8000650:	4603      	mov	r3, r0
}
 8000652:	4618      	mov	r0, r3
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <TCAL9538RSVR_SetOutput>:
HAL_StatusTypeDef TCAL9538RSVR_SetOutput(TCAL9538RSVR* dev, uint8_t *data)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
 8000664:	683a      	ldr	r2, [r7, #0]
 8000666:	2101      	movs	r1, #1
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 f822 	bl	80006b2 <TCAL9538RSVR_WriteRegister>
 800066e:	4603      	mov	r3, r0
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <TCAL9538RSVR_ReadRegister>:

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	460b      	mov	r3, r1
 8000682:	607a      	str	r2, [r7, #4]
 8000684:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	4619      	mov	r1, r3
 8000690:	7afb      	ldrb	r3, [r7, #11]
 8000692:	b29a      	uxth	r2, r3
 8000694:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2301      	movs	r3, #1
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2301      	movs	r3, #1
 80006a4:	f003 fde6 	bl	8004274 <HAL_I2C_Mem_Read>
 80006a8:	4603      	mov	r3, r0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b088      	sub	sp, #32
 80006b6:	af04      	add	r7, sp, #16
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	460b      	mov	r3, r1
 80006bc:	607a      	str	r2, [r7, #4]
 80006be:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Write(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	791b      	ldrb	r3, [r3, #4]
 80006c8:	4619      	mov	r1, r3
 80006ca:	7afb      	ldrb	r3, [r7, #11]
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006d2:	9302      	str	r3, [sp, #8]
 80006d4:	2301      	movs	r3, #1
 80006d6:	9301      	str	r3, [sp, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2301      	movs	r3, #1
 80006de:	f003 fcb5 	bl	800404c <HAL_I2C_Mem_Write>
 80006e2:	4603      	mov	r3, r0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Update_CAN_Message1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Update_CAN_Message1(uint8_t flags[8], uint8_t* Input1, uint8_t* Input2)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b087      	sub	sp, #28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]

	static uint8_t prev_input1 = 0;
	static uint8_t prev_input2 = 0;


	flags[3] = 0;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	3303      	adds	r3, #3
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
	flags[4] = 0;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	3304      	adds	r3, #4
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]


	// Detect rising edges for each flag
	uint8_t risingEdges_flag1 = (~prev_input1) & *Input1;
 8000708:	4b4b      	ldr	r3, [pc, #300]	@ (8000838 <Update_CAN_Message1+0x14c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b25b      	sxtb	r3, r3
 800070e:	43db      	mvns	r3, r3
 8000710:	b25a      	sxtb	r2, r3
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b25b      	sxtb	r3, r3
 8000718:	4013      	ands	r3, r2
 800071a:	b25b      	sxtb	r3, r3
 800071c:	75fb      	strb	r3, [r7, #23]
	uint8_t risingEdges_flag2 = (~prev_input2) & *Input2;
 800071e:	4b47      	ldr	r3, [pc, #284]	@ (800083c <Update_CAN_Message1+0x150>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b25b      	sxtb	r3, r3
 8000724:	43db      	mvns	r3, r3
 8000726:	b25a      	sxtb	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b25b      	sxtb	r3, r3
 800072e:	4013      	ands	r3, r2
 8000730:	b25b      	sxtb	r3, r3
 8000732:	75bb      	strb	r3, [r7, #22]


	flags[1] ^= CHECK_BIT(risingEdges_flag2, 4) << 0; // Main
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3301      	adds	r3, #1
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b25a      	sxtb	r2, r3
 800073c:	7dbb      	ldrb	r3, [r7, #22]
 800073e:	f003 0310 	and.w	r3, r3, #16
 8000742:	2b00      	cmp	r3, #0
 8000744:	bf14      	ite	ne
 8000746:	2301      	movne	r3, #1
 8000748:	2300      	moveq	r3, #0
 800074a:	b2db      	uxtb	r3, r3
 800074c:	b25b      	sxtb	r3, r3
 800074e:	4053      	eors	r3, r2
 8000750:	b25a      	sxtb	r2, r3
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	3301      	adds	r3, #1
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 5) << 1; // Break
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3301      	adds	r3, #1
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	b25a      	sxtb	r2, r3
 8000762:	7dbb      	ldrb	r3, [r7, #22]
 8000764:	111b      	asrs	r3, r3, #4
 8000766:	b25b      	sxtb	r3, r3
 8000768:	f003 0302 	and.w	r3, r3, #2
 800076c:	b25b      	sxtb	r3, r3
 800076e:	4053      	eors	r3, r2
 8000770:	b25a      	sxtb	r2, r3
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	3301      	adds	r3, #1
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 0) << 2; // Mode
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3301      	adds	r3, #1
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b25a      	sxtb	r2, r3
 8000782:	7dbb      	ldrb	r3, [r7, #22]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	b25b      	sxtb	r3, r3
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	b25b      	sxtb	r3, r3
 800078e:	4053      	eors	r3, r2
 8000790:	b25a      	sxtb	r2, r3
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	3301      	adds	r3, #1
 8000796:	b2d2      	uxtb	r2, r2
 8000798:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 5) << 3; // MC
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	3301      	adds	r3, #1
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b25a      	sxtb	r2, r3
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	109b      	asrs	r3, r3, #2
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	f003 0308 	and.w	r3, r3, #8
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	4053      	eors	r3, r2
 80007b0:	b25a      	sxtb	r2, r3
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	3301      	adds	r3, #1
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 6) << 4; // Array
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	3301      	adds	r3, #1
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b25a      	sxtb	r2, r3
 80007c2:	7dfb      	ldrb	r3, [r7, #23]
 80007c4:	109b      	asrs	r3, r3, #2
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	f003 0310 	and.w	r3, r3, #16
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	4053      	eors	r3, r2
 80007d0:	b25a      	sxtb	r2, r3
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 4) << 5; // Extra 1
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	3301      	adds	r3, #1
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b25a      	sxtb	r2, r3
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	f003 0320 	and.w	r3, r3, #32
 80007ec:	b25b      	sxtb	r3, r3
 80007ee:	4053      	eors	r3, r2
 80007f0:	b25a      	sxtb	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3301      	adds	r3, #1
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	701a      	strb	r2, [r3, #0]


	//flags[2] |= CHECK_BIT(outputPortState, 2) << 0; // Blinkers
	//flags[2] |= CHECK_BIT(outputPortState, 0) << 1; // Left Turn Signal
	//flags[2] |= CHECK_BIT(outputPortState, 1) << 2; // Right Turn Signal
	flags[2] ^= CHECK_BIT(risingEdges_flag1, 7) << 3; //?
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3302      	adds	r3, #2
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b25a      	sxtb	r2, r3
 8000802:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000806:	111b      	asrs	r3, r3, #4
 8000808:	b25b      	sxtb	r3, r3
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	b25b      	sxtb	r3, r3
 8000810:	4053      	eors	r3, r2
 8000812:	b25a      	sxtb	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3302      	adds	r3, #2
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	701a      	strb	r2, [r3, #0]



	prev_input1 = *Input1;
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	781a      	ldrb	r2, [r3, #0]
 8000820:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <Update_CAN_Message1+0x14c>)
 8000822:	701a      	strb	r2, [r3, #0]
	prev_input2 = *Input2;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	4b04      	ldr	r3, [pc, #16]	@ (800083c <Update_CAN_Message1+0x150>)
 800082a:	701a      	strb	r2, [r3, #0]

}
 800082c:	bf00      	nop
 800082e:	371c      	adds	r7, #28
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	2000029d 	.word	0x2000029d
 800083c:	2000029e 	.word	0x2000029e

08000840 <HAL_GPIO_EXTI_Callback>:
	 * */
}

// GPIO Expander Interrupt Handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Triggered = 1;
 800084a:	4b04      	ldr	r3, [pc, #16]	@ (800085c <HAL_GPIO_EXTI_Callback+0x1c>)
 800084c:	2201      	movs	r2, #1
 800084e:	701a      	strb	r2, [r3, #0]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	20000284 	.word	0x20000284

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000866:	f000 ffd0 	bl	800180a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086a:	f000 f87d 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086e:	f000 faa3 	bl	8000db8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000872:	f000 fa83 	bl	8000d7c <MX_DMA_Init>
  MX_ADC1_Init();
 8000876:	f000 f8bd 	bl	80009f4 <MX_ADC1_Init>
  MX_I2C4_Init();
 800087a:	f000 fa0f 	bl	8000c9c <MX_I2C4_Init>
  MX_CAN1_Init();
 800087e:	f000 f9a1 	bl	8000bc4 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000882:	f000 f9d5 	bl	8000c30 <MX_CAN2_Init>
  MX_UART4_Init();
 8000886:	f000 fa49 	bl	8000d1c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  if (TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0xFF, 0x00) != HAL_OK) { Error_Handler(); } // inputs
 800088a:	2300      	movs	r3, #0
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	23ff      	movs	r3, #255	@ 0xff
 8000890:	2202      	movs	r2, #2
 8000892:	4923      	ldr	r1, [pc, #140]	@ (8000920 <main+0xc0>)
 8000894:	4823      	ldr	r0, [pc, #140]	@ (8000924 <main+0xc4>)
 8000896:	f7ff fe23 	bl	80004e0 <TCAL9538RSVR_INIT>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <main+0x44>
 80008a0:	f000 fc8a 	bl	80011b8 <Error_Handler>
  //if (TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b00111111, 0b11000000) != HAL_OK) { Error_Handler(); }
  if (TCAL9538RSVR_INIT(&U7, &hi2c4, 0x00, 0b00000000, 0b00000000) != HAL_OK) { Error_Handler(); } // output
 80008a4:	2300      	movs	r3, #0
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2300      	movs	r3, #0
 80008aa:	2200      	movs	r2, #0
 80008ac:	491c      	ldr	r1, [pc, #112]	@ (8000920 <main+0xc0>)
 80008ae:	481e      	ldr	r0, [pc, #120]	@ (8000928 <main+0xc8>)
 80008b0:	f7ff fe16 	bl	80004e0 <TCAL9538RSVR_INIT>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <main+0x5e>
 80008ba:	f000 fc7d 	bl	80011b8 <Error_Handler>

  // set outputs to low to start
  //TCAL9538RSVR_SetOutput(&U7, &outputPortState);

  HAL_CAN_Start(&hcan1);
 80008be:	481b      	ldr	r0, [pc, #108]	@ (800092c <main+0xcc>)
 80008c0:	f002 fcab 	bl	800321a <HAL_CAN_Start>

  //HAL_UART_Receive_IT(&huart4, &uart_rx, 1); // enables uart interrupt, it will call the interrupt when one byte is recieved
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008c4:	f007 f884 	bl	80079d0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_Mutex */
  CAN_MutexHandle = osSemaphoreNew(1, 1, &CAN_Mutex_attributes);
 80008c8:	4a19      	ldr	r2, [pc, #100]	@ (8000930 <main+0xd0>)
 80008ca:	2101      	movs	r1, #1
 80008cc:	2001      	movs	r0, #1
 80008ce:	f007 f976 	bl	8007bbe <osSemaphoreNew>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4a17      	ldr	r2, [pc, #92]	@ (8000934 <main+0xd4>)
 80008d6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
 80008d8:	4a17      	ldr	r2, [pc, #92]	@ (8000938 <main+0xd8>)
 80008da:	2100      	movs	r1, #0
 80008dc:	4817      	ldr	r0, [pc, #92]	@ (800093c <main+0xdc>)
 80008de:	f007 f8c1 	bl	8007a64 <osThreadNew>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4a16      	ldr	r2, [pc, #88]	@ (8000940 <main+0xe0>)
 80008e6:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 80008e8:	4a16      	ldr	r2, [pc, #88]	@ (8000944 <main+0xe4>)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4816      	ldr	r0, [pc, #88]	@ (8000948 <main+0xe8>)
 80008ee:	f007 f8b9 	bl	8007a64 <osThreadNew>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a15      	ldr	r2, [pc, #84]	@ (800094c <main+0xec>)
 80008f6:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 80008f8:	4a15      	ldr	r2, [pc, #84]	@ (8000950 <main+0xf0>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4815      	ldr	r0, [pc, #84]	@ (8000954 <main+0xf4>)
 80008fe:	f007 f8b1 	bl	8007a64 <osThreadNew>
 8000902:	4603      	mov	r3, r0
 8000904:	4a14      	ldr	r2, [pc, #80]	@ (8000958 <main+0xf8>)
 8000906:	6013      	str	r3, [r2, #0]

  /* creation of Outputs_Control */
  Outputs_ControlHandle = osThreadNew(StartTask04, NULL, &Outputs_Control_attributes);
 8000908:	4a14      	ldr	r2, [pc, #80]	@ (800095c <main+0xfc>)
 800090a:	2100      	movs	r1, #0
 800090c:	4814      	ldr	r0, [pc, #80]	@ (8000960 <main+0x100>)
 800090e:	f007 f8a9 	bl	8007a64 <osThreadNew>
 8000912:	4603      	mov	r3, r0
 8000914:	4a13      	ldr	r2, [pc, #76]	@ (8000964 <main+0x104>)
 8000916:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000918:	f007 f87e 	bl	8007a18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <main+0xbc>
 8000920:	2000017c 	.word	0x2000017c
 8000924:	2000026c 	.word	0x2000026c
 8000928:	2000027c 	.word	0x2000027c
 800092c:	2000012c 	.word	0x2000012c
 8000930:	0800ab00 	.word	0x0800ab00
 8000934:	20000268 	.word	0x20000268
 8000938:	0800aa70 	.word	0x0800aa70
 800093c:	08000e81 	.word	0x08000e81
 8000940:	20000258 	.word	0x20000258
 8000944:	0800aa94 	.word	0x0800aa94
 8000948:	08000ec1 	.word	0x08000ec1
 800094c:	2000025c 	.word	0x2000025c
 8000950:	0800aab8 	.word	0x0800aab8
 8000954:	08000fed 	.word	0x08000fed
 8000958:	20000260 	.word	0x20000260
 800095c:	0800aadc 	.word	0x0800aadc
 8000960:	080010e5 	.word	0x080010e5
 8000964:	20000264 	.word	0x20000264

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b096      	sub	sp, #88	@ 0x58
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	2244      	movs	r2, #68	@ 0x44
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f009 ff56 	bl	800a828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	463b      	mov	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800098a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800098e:	f004 f8f3 	bl	8004b78 <HAL_PWREx_ControlVoltageScaling>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000998:	f000 fc0e 	bl	80011b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800099c:	2310      	movs	r3, #16
 800099e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009a0:	2301      	movs	r3, #1
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009a8:	2360      	movs	r3, #96	@ 0x60
 80009aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4618      	mov	r0, r3
 80009b6:	f004 f935 	bl	8004c24 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80009c0:	f000 fbfa 	bl	80011b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c4:	230f      	movs	r3, #15
 80009c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 fd3b 	bl	8005458 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80009e8:	f000 fbe6 	bl	80011b8 <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	3758      	adds	r7, #88	@ 0x58
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a16:	4b68      	ldr	r3, [pc, #416]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000a18:	4a68      	ldr	r2, [pc, #416]	@ (8000bbc <MX_ADC1_Init+0x1c8>)
 8000a1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a1c:	4b66      	ldr	r3, [pc, #408]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a22:	4b65      	ldr	r3, [pc, #404]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a28:	4b63      	ldr	r3, [pc, #396]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a2e:	4b62      	ldr	r3, [pc, #392]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a34:	4b60      	ldr	r3, [pc, #384]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000a36:	2208      	movs	r2, #8
 8000a38:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a3a:	4b5f      	ldr	r3, [pc, #380]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a40:	4b5d      	ldr	r3, [pc, #372]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 8000a46:	4b5c      	ldr	r3, [pc, #368]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000a48:	220a      	movs	r2, #10
 8000a4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a4c:	4b5a      	ldr	r3, [pc, #360]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a54:	4b58      	ldr	r3, [pc, #352]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a5a:	4b57      	ldr	r3, [pc, #348]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a60:	4b55      	ldr	r3, [pc, #340]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a68:	4b53      	ldr	r3, [pc, #332]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a6e:	4b52      	ldr	r3, [pc, #328]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a76:	4850      	ldr	r0, [pc, #320]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000a78:	f001 f936 	bl	8001ce8 <HAL_ADC_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a82:	f000 fb99 	bl	80011b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4849      	ldr	r0, [pc, #292]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000a92:	f002 fa17 	bl	8002ec4 <HAL_ADCEx_MultiModeConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a9c:	f000 fb8c 	bl	80011b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aa0:	4b47      	ldr	r3, [pc, #284]	@ (8000bc0 <MX_ADC1_Init+0x1cc>)
 8000aa2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aa4:	2306      	movs	r3, #6
 8000aa6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aac:	237f      	movs	r3, #127	@ 0x7f
 8000aae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	483e      	ldr	r0, [pc, #248]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000abe:	f001 fb99 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ac8:	f000 fb76 	bl	80011b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000acc:	230c      	movs	r3, #12
 8000ace:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4838      	ldr	r0, [pc, #224]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000ad6:	f001 fb8d 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000ae0:	f000 fb6a 	bl	80011b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ae4:	2312      	movs	r3, #18
 8000ae6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	4619      	mov	r1, r3
 8000aec:	4832      	ldr	r0, [pc, #200]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000aee:	f001 fb81 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000af8:	f000 fb5e 	bl	80011b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000afc:	2318      	movs	r3, #24
 8000afe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	4619      	mov	r1, r3
 8000b04:	482c      	ldr	r0, [pc, #176]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000b06:	f001 fb75 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000b10:	f000 fb52 	bl	80011b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000b14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4826      	ldr	r0, [pc, #152]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000b20:	f001 fb68 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8000b2a:	f000 fb45 	bl	80011b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000b2e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000b32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	4619      	mov	r1, r3
 8000b38:	481f      	ldr	r0, [pc, #124]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000b3a:	f001 fb5b 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000b44:	f000 fb38 	bl	80011b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000b48:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4619      	mov	r1, r3
 8000b52:	4819      	ldr	r0, [pc, #100]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000b54:	f001 fb4e 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000b5e:	f000 fb2b 	bl	80011b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000b62:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000b66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4812      	ldr	r0, [pc, #72]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000b6e:	f001 fb41 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_ADC1_Init+0x188>
  {
    Error_Handler();
 8000b78:	f000 fb1e 	bl	80011b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000b7c:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000b80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	4619      	mov	r1, r3
 8000b86:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000b88:	f001 fb34 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 8000b92:	f000 fb11 	bl	80011b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000b96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_ADC1_Init+0x1c4>)
 8000ba2:	f001 fb27 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_ADC1_Init+0x1bc>
  {
    Error_Handler();
 8000bac:	f000 fb04 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	@ 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000007c 	.word	0x2000007c
 8000bbc:	50040000 	.word	0x50040000
 8000bc0:	04300002 	.word	0x04300002

08000bc4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <MX_CAN1_Init+0x64>)
 8000bca:	4a18      	ldr	r2, [pc, #96]	@ (8000c2c <MX_CAN1_Init+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000bce:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <MX_CAN1_Init+0x64>)
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <MX_CAN1_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bda:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <MX_CAN1_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <MX_CAN1_Init+0x64>)
 8000be2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000be6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <MX_CAN1_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <MX_CAN1_Init+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <MX_CAN1_Init+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <MX_CAN1_Init+0x64>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c00:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <MX_CAN1_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <MX_CAN1_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <MX_CAN1_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_CAN1_Init+0x64>)
 8000c14:	f002 fa06 	bl	8003024 <HAL_CAN_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000c1e:	f000 facb 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000012c 	.word	0x2000012c
 8000c2c:	40006400 	.word	0x40006400

08000c30 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000c34:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <MX_CAN2_Init+0x64>)
 8000c36:	4a18      	ldr	r2, [pc, #96]	@ (8000c98 <MX_CAN2_Init+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8000c3a:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <MX_CAN2_Init+0x64>)
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000c40:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <MX_CAN2_Init+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c46:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <MX_CAN2_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <MX_CAN2_Init+0x64>)
 8000c4e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c52:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <MX_CAN2_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <MX_CAN2_Init+0x64>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <MX_CAN2_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <MX_CAN2_Init+0x64>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <MX_CAN2_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <MX_CAN2_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <MX_CAN2_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <MX_CAN2_Init+0x64>)
 8000c80:	f002 f9d0 	bl	8003024 <HAL_CAN_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000c8a:	f000 fa95 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000154 	.word	0x20000154
 8000c98:	40006800 	.word	0x40006800

08000c9c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MX_I2C4_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d14 <MX_I2C4_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <MX_I2C4_Init+0x74>)
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d18 <MX_I2C4_Init+0x7c>)
 8000caa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000cac:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <MX_I2C4_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <MX_I2C4_Init+0x74>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <MX_I2C4_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_I2C4_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_I2C4_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_I2C4_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_I2C4_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000cd6:	480e      	ldr	r0, [pc, #56]	@ (8000d10 <MX_I2C4_Init+0x74>)
 8000cd8:	f003 f91c 	bl	8003f14 <HAL_I2C_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000ce2:	f000 fa69 	bl	80011b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4809      	ldr	r0, [pc, #36]	@ (8000d10 <MX_I2C4_Init+0x74>)
 8000cea:	f003 fe9f 	bl	8004a2c <HAL_I2CEx_ConfigAnalogFilter>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000cf4:	f000 fa60 	bl	80011b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <MX_I2C4_Init+0x74>)
 8000cfc:	f003 fee1 	bl	8004ac2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d06:	f000 fa57 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000017c 	.word	0x2000017c
 8000d14:	40008400 	.word	0x40008400
 8000d18:	00100d14 	.word	0x00100d14

08000d1c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d20:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <MX_UART4_Init+0x58>)
 8000d22:	4a15      	ldr	r2, [pc, #84]	@ (8000d78 <MX_UART4_Init+0x5c>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000d26:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <MX_UART4_Init+0x58>)
 8000d28:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d2c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_UART4_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <MX_UART4_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_UART4_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <MX_UART4_Init+0x58>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <MX_UART4_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <MX_UART4_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <MX_UART4_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <MX_UART4_Init+0x58>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <MX_UART4_Init+0x58>)
 8000d60:	f005 fd60 	bl	8006824 <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000d6a:	f000 fa25 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200001d0 	.word	0x200001d0
 8000d78:	40004c00 	.word	0x40004c00

08000d7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d82:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <MX_DMA_Init+0x38>)
 8000d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d86:	4a0b      	ldr	r2, [pc, #44]	@ (8000db4 <MX_DMA_Init+0x38>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <MX_DMA_Init+0x38>)
 8000d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2105      	movs	r1, #5
 8000d9e:	200b      	movs	r0, #11
 8000da0:	f002 fc3c 	bl	800361c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000da4:	200b      	movs	r0, #11
 8000da6:	f002 fc55 	bl	8003654 <HAL_NVIC_EnableIRQ>

}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000

08000db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b2a      	ldr	r3, [pc, #168]	@ (8000e78 <MX_GPIO_Init+0xc0>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	4a29      	ldr	r2, [pc, #164]	@ (8000e78 <MX_GPIO_Init+0xc0>)
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dda:	4b27      	ldr	r3, [pc, #156]	@ (8000e78 <MX_GPIO_Init+0xc0>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de6:	4b24      	ldr	r3, [pc, #144]	@ (8000e78 <MX_GPIO_Init+0xc0>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	4a23      	ldr	r2, [pc, #140]	@ (8000e78 <MX_GPIO_Init+0xc0>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df2:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <MX_GPIO_Init+0xc0>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000e78 <MX_GPIO_Init+0xc0>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	4a1d      	ldr	r2, [pc, #116]	@ (8000e78 <MX_GPIO_Init+0xc0>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e78 <MX_GPIO_Init+0xc0>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OK_LED_GPIO_Port, OK_LED_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e20:	f003 f82e 	bl	8003e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Alert1_Pin */
  GPIO_InitStruct.Pin = Alert1_Pin;
 8000e24:	2304      	movs	r3, #4
 8000e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e28:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alert1_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	4619      	mov	r1, r3
 8000e38:	4810      	ldr	r0, [pc, #64]	@ (8000e7c <MX_GPIO_Init+0xc4>)
 8000e3a:	f002 fe8f 	bl	8003b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OK_LED_Pin */
  GPIO_InitStruct.Pin = OK_LED_Pin;
 8000e3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OK_LED_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5a:	f002 fe7f 	bl	8003b5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2105      	movs	r1, #5
 8000e62:	2008      	movs	r0, #8
 8000e64:	f002 fbda 	bl	800361c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e68:	2008      	movs	r0, #8
 8000e6a:	f002 fbf3 	bl	8003654 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e6e:	bf00      	nop
 8000e70:	3720      	adds	r7, #32
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	48000800 	.word	0x48000800

08000e80 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000e88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e90:	f003 f80e 	bl	8003eb0 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000e94:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e98:	f006 fe76 	bl	8007b88 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000e9c:	bf00      	nop
 8000e9e:	e7f3      	b.n	8000e88 <StartTask01+0x8>

08000ea0 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_StartTask02 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	dma_flag = 1;
 8000ea8:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <HAL_ADC_ConvCpltCallback+0x1c>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	2000029c 	.word	0x2000029c

08000ec0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000ec0:	b5b0      	push	{r4, r5, r7, lr}
 8000ec2:	b092      	sub	sp, #72	@ 0x48
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

	uint16_t adc_var_avg = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	int HAL_CAN_BUSY = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	643b      	str	r3, [r7, #64]	@ 0x40
	uint64_t messages_sent = 0;
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	f04f 0300 	mov.w	r3, #0
 8000eda:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = { 0 };
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x0; // 11 bit Identifier
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000ef6:	2308      	movs	r3, #8
 8000ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxData[0] = 1;
 8000efa:	2301      	movs	r3, #1
 8000efc:	743b      	strb	r3, [r7, #16]
//  TxHeader.StdId = 0x0;
//  TxHeader.DLC = 8;


  // Transmit over CAN
  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	f107 0210 	add.w	r2, r7, #16
 8000f06:	f107 0118 	add.w	r1, r7, #24
 8000f0a:	4833      	ldr	r0, [pc, #204]	@ (8000fd8 <StartTask02+0x118>)
 8000f0c:	f002 f9c9 	bl	80032a2 <HAL_CAN_AddTxMessage>


  for (;;)
  {

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000f10:	220a      	movs	r2, #10
 8000f12:	4932      	ldr	r1, [pc, #200]	@ (8000fdc <StartTask02+0x11c>)
 8000f14:	4832      	ldr	r0, [pc, #200]	@ (8000fe0 <StartTask02+0x120>)
 8000f16:	f001 f83b 	bl	8001f90 <HAL_ADC_Start_DMA>
	// Start ADC with DMA
	while (!(dma_flag));
 8000f1a:	bf00      	nop
 8000f1c:	4b31      	ldr	r3, [pc, #196]	@ (8000fe4 <StartTask02+0x124>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0fa      	beq.n	8000f1c <StartTask02+0x5c>

	// Stop ADC with DMA
	HAL_ADC_Stop_DMA(&hadc1);
 8000f26:	482e      	ldr	r0, [pc, #184]	@ (8000fe0 <StartTask02+0x120>)
 8000f28:	f001 f8ee 	bl	8002108 <HAL_ADC_Stop_DMA>
	dma_flag = 0;
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe4 <StartTask02+0x124>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
	// Copy ADC buffer and compute average
	for (int i = 0; i < ADC_BUF_LEN; i++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f36:	e00b      	b.n	8000f50 <StartTask02+0x90>
	{
		adc_var_avg += adc_buf[i];
 8000f38:	4a28      	ldr	r2, [pc, #160]	@ (8000fdc <StartTask02+0x11c>)
 8000f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f3c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000f44:	4413      	add	r3, r2
 8000f46:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	for (int i = 0; i < ADC_BUF_LEN; i++)
 8000f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f52:	2b09      	cmp	r3, #9
 8000f54:	ddf0      	ble.n	8000f38 <StartTask02+0x78>
	}
	adc_var_avg /= ADC_BUF_LEN;
 8000f56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000f5a:	4a23      	ldr	r2, [pc, #140]	@ (8000fe8 <StartTask02+0x128>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	08db      	lsrs	r3, r3, #3
 8000f62:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	adc_data[0] = adc_var_avg & 0xFF;
 8000f66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	723b      	strb	r3, [r7, #8]
	adc_data[1] = (adc_var_avg >> 8) & 0x0F;
 8000f6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000f72:	0a1b      	lsrs	r3, r3, #8
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	f003 030f 	and.w	r3, r3, #15
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	727b      	strb	r3, [r7, #9]


	TxData[0] = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	743b      	strb	r3, [r7, #16]
	TxData[1] = adc_data[0];
 8000f84:	7a3b      	ldrb	r3, [r7, #8]
 8000f86:	747b      	strb	r3, [r7, #17]
	TxData[2] = adc_data[1];
 8000f88:	7a7b      	ldrb	r3, [r7, #9]
 8000f8a:	74bb      	strb	r3, [r7, #18]
	//Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
    // Wait until the ADC DMA completes
	  // Send CAN messages
//	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	f107 0210 	add.w	r2, r7, #16
 8000f94:	f107 0118 	add.w	r1, r7, #24
 8000f98:	480f      	ldr	r0, [pc, #60]	@ (8000fd8 <StartTask02+0x118>)
 8000f9a:	f002 f982 	bl	80032a2 <HAL_CAN_AddTxMessage>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	  messages_sent++;
 8000fa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000fa8:	1c54      	adds	r4, r2, #1
 8000faa:	f143 0500 	adc.w	r5, r3, #0
 8000fae:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
	  if (status == HAL_ERROR)
 8000fb2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d102      	bne.n	8000fc0 <StartTask02+0x100>
	  {
		  Error_Handler();
 8000fba:	f000 f8fd 	bl	80011b8 <Error_Handler>
 8000fbe:	e006      	b.n	8000fce <StartTask02+0x10e>
	  }
	  else if (status == HAL_BUSY)
 8000fc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d102      	bne.n	8000fce <StartTask02+0x10e>
	  {
		  HAL_CAN_BUSY++;
 8000fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fca:	3301      	adds	r3, #1
 8000fcc:	643b      	str	r3, [r7, #64]	@ 0x40
	  }
    osDelay(1);
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f006 fdda 	bl	8007b88 <osDelay>
  {
 8000fd4:	e79c      	b.n	8000f10 <StartTask02+0x50>
 8000fd6:	bf00      	nop
 8000fd8:	2000012c 	.word	0x2000012c
 8000fdc:	20000288 	.word	0x20000288
 8000fe0:	2000007c 	.word	0x2000007c
 8000fe4:	2000029c 	.word	0x2000029c
 8000fe8:	cccccccd 	.word	0xcccccccd

08000fec <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000fec:	b5b0      	push	{r4, r5, r7, lr}
 8000fee:	b090      	sub	sp, #64	@ 0x40
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */

	int debounce_count = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int HAL_CAN_BUSY = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint64_t messages_sent = 0;
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox = { 0 };
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = 0x7FF; // 11 bit Identifier !!Change!!
 8001018:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800101c:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8001022:	2308      	movs	r3, #8
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
	TxData[0] = 1;
 8001026:	2301      	movs	r3, #1
 8001028:	733b      	strb	r3, [r7, #12]

	Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	4a28      	ldr	r2, [pc, #160]	@ (80010d0 <StartTask03+0xe4>)
 8001030:	4928      	ldr	r1, [pc, #160]	@ (80010d4 <StartTask03+0xe8>)
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fb5a 	bl	80006ec <Update_CAN_Message1>

	/* Infinite loop */
	for(;;)
	{
	  // Read TCAL Input and update flags
	  if (GPIO_Interrupt_Triggered)
 8001038:	4b27      	ldr	r3, [pc, #156]	@ (80010d8 <StartTask03+0xec>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d018      	beq.n	8001072 <StartTask03+0x86>
	  {
		  if (debounce_count++ <= 2) {continue;}
 8001040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001046:	2b02      	cmp	r3, #2
 8001048:	dd3f      	ble.n	80010ca <StartTask03+0xde>
		  if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK){ Error_Handler(); }
 800104a:	4824      	ldr	r0, [pc, #144]	@ (80010dc <StartTask03+0xf0>)
 800104c:	f7ff face 	bl	80005ec <TCAL9538RSVR_HandleInterrupt>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <StartTask03+0x6e>
 8001056:	f000 f8af 	bl	80011b8 <Error_Handler>
		  //if (TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK){ Error_Handler(); }


		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	4a1c      	ldr	r2, [pc, #112]	@ (80010d0 <StartTask03+0xe4>)
 8001060:	491c      	ldr	r1, [pc, #112]	@ (80010d4 <StartTask03+0xe8>)
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fb42 	bl	80006ec <Update_CAN_Message1>
		  GPIO_Interrupt_Triggered = 0;
 8001068:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <StartTask03+0xec>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
		  debounce_count = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  }

	  // Send CAN messages
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8001072:	bf00      	nop
 8001074:	481a      	ldr	r0, [pc, #104]	@ (80010e0 <StartTask03+0xf4>)
 8001076:	f002 f9e4 	bl	8003442 <HAL_CAN_GetTxMailboxesFreeLevel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f9      	beq.n	8001074 <StartTask03+0x88>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	f107 020c 	add.w	r2, r7, #12
 8001088:	f107 0114 	add.w	r1, r7, #20
 800108c:	4814      	ldr	r0, [pc, #80]	@ (80010e0 <StartTask03+0xf4>)
 800108e:	f002 f908 	bl	80032a2 <HAL_CAN_AddTxMessage>
 8001092:	4603      	mov	r3, r0
 8001094:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  messages_sent++;
 8001098:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800109c:	1c54      	adds	r4, r2, #1
 800109e:	f143 0500 	adc.w	r5, r3, #0
 80010a2:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	  if (status == HAL_ERROR)
 80010a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d102      	bne.n	80010b4 <StartTask03+0xc8>
	  {
		  Error_Handler();
 80010ae:	f000 f883 	bl	80011b8 <Error_Handler>
 80010b2:	e006      	b.n	80010c2 <StartTask03+0xd6>
	  }
	  else if (status == HAL_BUSY)
 80010b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d102      	bne.n	80010c2 <StartTask03+0xd6>
	  {
		  HAL_CAN_BUSY++;
 80010bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010be:	3301      	adds	r3, #1
 80010c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	  }
	  osDelay(1);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f006 fd60 	bl	8007b88 <osDelay>
 80010c8:	e7b6      	b.n	8001038 <StartTask03+0x4c>
		  if (debounce_count++ <= 2) {continue;}
 80010ca:	bf00      	nop
	{
 80010cc:	e7b4      	b.n	8001038 <StartTask03+0x4c>
 80010ce:	bf00      	nop
 80010d0:	20000279 	.word	0x20000279
 80010d4:	20000271 	.word	0x20000271
 80010d8:	20000284 	.word	0x20000284
 80010dc:	2000026c 	.word	0x2000026c
 80010e0:	2000012c 	.word	0x2000012c

080010e4 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */

  uint32_t lastBlinkTime = HAL_GetTick();
 80010ec:	f000 fbba 	bl	8001864 <HAL_GetTick>
 80010f0:	6178      	str	r0, [r7, #20]
  const uint32_t blinkInterval = 500;
 80010f2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80010f6:	613b      	str	r3, [r7, #16]

    // blinking logic needs to be done here now
    // use lightState variable to see what should be turned on and then 
    // update outputPortState

    uint32_t currentTick = HAL_GetTick();
 80010f8:	f000 fbb4 	bl	8001864 <HAL_GetTick>
 80010fc:	60f8      	str	r0, [r7, #12]

    if (currentTick - lastBlinkTime > blinkInterval)
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	429a      	cmp	r2, r3
 8001108:	d230      	bcs.n	800116c <StartTask04+0x88>
    {
      lastBlinkTime = currentTick;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	617b      	str	r3, [r7, #20]
      if (lightState == LIGHTS_LEFT)
 800110e:	4b1e      	ldr	r3, [pc, #120]	@ (8001188 <StartTask04+0xa4>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d107      	bne.n	8001126 <StartTask04+0x42>
        outputPortState ^= OUTPUT_FL_LIGHT_CTRL;
 8001116:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <StartTask04+0xa8>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	f083 0310 	eor.w	r3, r3, #16
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <StartTask04+0xa8>)
 8001122:	701a      	strb	r2, [r3, #0]
 8001124:	e022      	b.n	800116c <StartTask04+0x88>
      else if (lightState == LIGHTS_RIGHT)
 8001126:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <StartTask04+0xa4>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d107      	bne.n	800113e <StartTask04+0x5a>
        outputPortState ^= OUTPUT_FR_LIGHT_CTRL;
 800112e:	4b17      	ldr	r3, [pc, #92]	@ (800118c <StartTask04+0xa8>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	f083 0320 	eor.w	r3, r3, #32
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <StartTask04+0xa8>)
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	e016      	b.n	800116c <StartTask04+0x88>
      else if (lightState == LIGHTS_HAZARD)
 800113e:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <StartTask04+0xa4>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d107      	bne.n	8001156 <StartTask04+0x72>
        outputPortState ^= (OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <StartTask04+0xa8>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <StartTask04+0xa8>)
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	e00a      	b.n	800116c <StartTask04+0x88>
      else if (lightState == LIGHTS_NONE)
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <StartTask04+0xa4>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d106      	bne.n	800116c <StartTask04+0x88>
        outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 800115e:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <StartTask04+0xa8>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b08      	ldr	r3, [pc, #32]	@ (800118c <StartTask04+0xa8>)
 800116a:	701a      	strb	r2, [r3, #0]
    }

    if(TCAL9538RSVR_SetOutput(&U7, &outputPortState) != HAL_OK)
 800116c:	4907      	ldr	r1, [pc, #28]	@ (800118c <StartTask04+0xa8>)
 800116e:	4808      	ldr	r0, [pc, #32]	@ (8001190 <StartTask04+0xac>)
 8001170:	f7ff fa73 	bl	800065a <TCAL9538RSVR_SetOutput>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <StartTask04+0x9a>
    {
    	Error_Handler();
 800117a:	f000 f81d 	bl	80011b8 <Error_Handler>
    }

    osDelay(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f006 fd02 	bl	8007b88 <osDelay>
  {
 8001184:	e7b8      	b.n	80010f8 <StartTask04+0x14>
 8001186:	bf00      	nop
 8001188:	20000286 	.word	0x20000286
 800118c:	20000285 	.word	0x20000285
 8001190:	2000027c 	.word	0x2000027c

08001194 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d101      	bne.n	80011aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011a6:	f000 fb49 	bl	800183c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40000400 	.word	0x40000400

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <Error_Handler+0x8>

080011c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <HAL_MspInit+0x4c>)
 80011cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ce:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <HAL_MspInit+0x4c>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80011d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <HAL_MspInit+0x4c>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <HAL_MspInit+0x4c>)
 80011e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <HAL_MspInit+0x4c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ee:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <HAL_MspInit+0x4c>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	210f      	movs	r1, #15
 80011fe:	f06f 0001 	mvn.w	r0, #1
 8001202:	f002 fa0b 	bl	800361c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000

08001214 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0ac      	sub	sp, #176	@ 0xb0
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	228c      	movs	r2, #140	@ 0x8c
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f009 faf7 	bl	800a828 <memset>
  if(hadc->Instance==ADC1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a35      	ldr	r2, [pc, #212]	@ (8001314 <HAL_ADC_MspInit+0x100>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d163      	bne.n	800130c <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001244:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001248:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800124a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800124e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	4618      	mov	r0, r3
 8001258:	f004 fb54 	bl	8005904 <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001262:	f7ff ffa9 	bl	80011b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001266:	4b2c      	ldr	r3, [pc, #176]	@ (8001318 <HAL_ADC_MspInit+0x104>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a2b      	ldr	r2, [pc, #172]	@ (8001318 <HAL_ADC_MspInit+0x104>)
 800126c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b29      	ldr	r3, [pc, #164]	@ (8001318 <HAL_ADC_MspInit+0x104>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	4b26      	ldr	r3, [pc, #152]	@ (8001318 <HAL_ADC_MspInit+0x104>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	4a25      	ldr	r2, [pc, #148]	@ (8001318 <HAL_ADC_MspInit+0x104>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128a:	4b23      	ldr	r3, [pc, #140]	@ (8001318 <HAL_ADC_MspInit+0x104>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001296:	2301      	movs	r3, #1
 8001298:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129c:	2303      	movs	r3, #3
 800129e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012ac:	4619      	mov	r1, r3
 80012ae:	481b      	ldr	r0, [pc, #108]	@ (800131c <HAL_ADC_MspInit+0x108>)
 80012b0:	f002 fc54 	bl	8003b5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <HAL_ADC_MspInit+0x10c>)
 80012b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001324 <HAL_ADC_MspInit+0x110>)
 80012b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80012ba:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <HAL_ADC_MspInit+0x10c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c0:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <HAL_ADC_MspInit+0x10c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c6:	4b16      	ldr	r3, [pc, #88]	@ (8001320 <HAL_ADC_MspInit+0x10c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012cc:	4b14      	ldr	r3, [pc, #80]	@ (8001320 <HAL_ADC_MspInit+0x10c>)
 80012ce:	2280      	movs	r2, #128	@ 0x80
 80012d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012d2:	4b13      	ldr	r3, [pc, #76]	@ (8001320 <HAL_ADC_MspInit+0x10c>)
 80012d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012da:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <HAL_ADC_MspInit+0x10c>)
 80012dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <HAL_ADC_MspInit+0x10c>)
 80012e4:	2220      	movs	r2, #32
 80012e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80012e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <HAL_ADC_MspInit+0x10c>)
 80012ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012f0:	480b      	ldr	r0, [pc, #44]	@ (8001320 <HAL_ADC_MspInit+0x10c>)
 80012f2:	f002 f9bd 	bl	8003670 <HAL_DMA_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 80012fc:	f7ff ff5c 	bl	80011b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a07      	ldr	r2, [pc, #28]	@ (8001320 <HAL_ADC_MspInit+0x10c>)
 8001304:	651a      	str	r2, [r3, #80]	@ 0x50
 8001306:	4a06      	ldr	r2, [pc, #24]	@ (8001320 <HAL_ADC_MspInit+0x10c>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800130c:	bf00      	nop
 800130e:	37b0      	adds	r7, #176	@ 0xb0
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	50040000 	.word	0x50040000
 8001318:	40021000 	.word	0x40021000
 800131c:	48000800 	.word	0x48000800
 8001320:	200000e4 	.word	0x200000e4
 8001324:	40020008 	.word	0x40020008

08001328 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	@ 0x30
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a4e      	ldr	r2, [pc, #312]	@ (8001480 <HAL_CAN_MspInit+0x158>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d143      	bne.n	80013d2 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800134a:	4b4e      	ldr	r3, [pc, #312]	@ (8001484 <HAL_CAN_MspInit+0x15c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	4a4c      	ldr	r2, [pc, #304]	@ (8001484 <HAL_CAN_MspInit+0x15c>)
 8001352:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001354:	4b4b      	ldr	r3, [pc, #300]	@ (8001484 <HAL_CAN_MspInit+0x15c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d10b      	bne.n	8001374 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800135c:	4b4a      	ldr	r3, [pc, #296]	@ (8001488 <HAL_CAN_MspInit+0x160>)
 800135e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001360:	4a49      	ldr	r2, [pc, #292]	@ (8001488 <HAL_CAN_MspInit+0x160>)
 8001362:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001366:	6593      	str	r3, [r2, #88]	@ 0x58
 8001368:	4b47      	ldr	r3, [pc, #284]	@ (8001488 <HAL_CAN_MspInit+0x160>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001370:	61bb      	str	r3, [r7, #24]
 8001372:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001374:	4b44      	ldr	r3, [pc, #272]	@ (8001488 <HAL_CAN_MspInit+0x160>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001378:	4a43      	ldr	r2, [pc, #268]	@ (8001488 <HAL_CAN_MspInit+0x160>)
 800137a:	f043 0302 	orr.w	r3, r3, #2
 800137e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001380:	4b41      	ldr	r3, [pc, #260]	@ (8001488 <HAL_CAN_MspInit+0x160>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800138c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001396:	2301      	movs	r3, #1
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800139e:	2309      	movs	r3, #9
 80013a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	4838      	ldr	r0, [pc, #224]	@ (800148c <HAL_CAN_MspInit+0x164>)
 80013aa:	f002 fbd7 	bl	8003b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80013c0:	2309      	movs	r3, #9
 80013c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	4830      	ldr	r0, [pc, #192]	@ (800148c <HAL_CAN_MspInit+0x164>)
 80013cc:	f002 fbc6 	bl	8003b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80013d0:	e051      	b.n	8001476 <HAL_CAN_MspInit+0x14e>
  else if(hcan->Instance==CAN2)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001490 <HAL_CAN_MspInit+0x168>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d14c      	bne.n	8001476 <HAL_CAN_MspInit+0x14e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80013dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001488 <HAL_CAN_MspInit+0x160>)
 80013de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e0:	4a29      	ldr	r2, [pc, #164]	@ (8001488 <HAL_CAN_MspInit+0x160>)
 80013e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80013e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80013e8:	4b27      	ldr	r3, [pc, #156]	@ (8001488 <HAL_CAN_MspInit+0x160>)
 80013ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80013f4:	4b23      	ldr	r3, [pc, #140]	@ (8001484 <HAL_CAN_MspInit+0x15c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	4a22      	ldr	r2, [pc, #136]	@ (8001484 <HAL_CAN_MspInit+0x15c>)
 80013fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80013fe:	4b21      	ldr	r3, [pc, #132]	@ (8001484 <HAL_CAN_MspInit+0x15c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d10b      	bne.n	800141e <HAL_CAN_MspInit+0xf6>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <HAL_CAN_MspInit+0x160>)
 8001408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140a:	4a1f      	ldr	r2, [pc, #124]	@ (8001488 <HAL_CAN_MspInit+0x160>)
 800140c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001410:	6593      	str	r3, [r2, #88]	@ 0x58
 8001412:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <HAL_CAN_MspInit+0x160>)
 8001414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <HAL_CAN_MspInit+0x160>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001422:	4a19      	ldr	r2, [pc, #100]	@ (8001488 <HAL_CAN_MspInit+0x160>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142a:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <HAL_CAN_MspInit+0x160>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001436:	2320      	movs	r3, #32
 8001438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800143e:	2301      	movs	r3, #1
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8001446:	2303      	movs	r3, #3
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	480e      	ldr	r0, [pc, #56]	@ (800148c <HAL_CAN_MspInit+0x164>)
 8001452:	f002 fb83 	bl	8003b5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001456:	2340      	movs	r3, #64	@ 0x40
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8001466:	2308      	movs	r3, #8
 8001468:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	4806      	ldr	r0, [pc, #24]	@ (800148c <HAL_CAN_MspInit+0x164>)
 8001472:	f002 fb73 	bl	8003b5c <HAL_GPIO_Init>
}
 8001476:	bf00      	nop
 8001478:	3730      	adds	r7, #48	@ 0x30
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40006400 	.word	0x40006400
 8001484:	200002a0 	.word	0x200002a0
 8001488:	40021000 	.word	0x40021000
 800148c:	48000400 	.word	0x48000400
 8001490:	40006800 	.word	0x40006800

08001494 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b0ac      	sub	sp, #176	@ 0xb0
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	228c      	movs	r2, #140	@ 0x8c
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f009 f9b7 	bl	800a828 <memset>
  if(hi2c->Instance==I2C4)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a22      	ldr	r2, [pc, #136]	@ (8001548 <HAL_I2C_MspInit+0xb4>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d13c      	bne.n	800153e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80014c4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ce:	f107 0310 	add.w	r3, r7, #16
 80014d2:	4618      	mov	r0, r3
 80014d4:	f004 fa16 	bl	8005904 <HAL_RCCEx_PeriphCLKConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80014de:	f7ff fe6b 	bl	80011b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	4b1a      	ldr	r3, [pc, #104]	@ (800154c <HAL_I2C_MspInit+0xb8>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e6:	4a19      	ldr	r2, [pc, #100]	@ (800154c <HAL_I2C_MspInit+0xb8>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ee:	4b17      	ldr	r3, [pc, #92]	@ (800154c <HAL_I2C_MspInit+0xb8>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001502:	2312      	movs	r3, #18
 8001504:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001514:	2303      	movs	r3, #3
 8001516:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800151e:	4619      	mov	r1, r3
 8001520:	480b      	ldr	r0, [pc, #44]	@ (8001550 <HAL_I2C_MspInit+0xbc>)
 8001522:	f002 fb1b 	bl	8003b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <HAL_I2C_MspInit+0xb8>)
 8001528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800152a:	4a08      	ldr	r2, [pc, #32]	@ (800154c <HAL_I2C_MspInit+0xb8>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_I2C_MspInit+0xb8>)
 8001534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 800153e:	bf00      	nop
 8001540:	37b0      	adds	r7, #176	@ 0xb0
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40008400 	.word	0x40008400
 800154c:	40021000 	.word	0x40021000
 8001550:	48000400 	.word	0x48000400

08001554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b0ac      	sub	sp, #176	@ 0xb0
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	228c      	movs	r2, #140	@ 0x8c
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f009 f957 	bl	800a828 <memset>
  if(huart->Instance==UART4)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a25      	ldr	r2, [pc, #148]	@ (8001614 <HAL_UART_MspInit+0xc0>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d143      	bne.n	800160c <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001584:	2308      	movs	r3, #8
 8001586:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001588:	2300      	movs	r3, #0
 800158a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	4618      	mov	r0, r3
 8001592:	f004 f9b7 	bl	8005904 <HAL_RCCEx_PeriphCLKConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800159c:	f7ff fe0c 	bl	80011b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <HAL_UART_MspInit+0xc4>)
 80015a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001618 <HAL_UART_MspInit+0xc4>)
 80015a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <HAL_UART_MspInit+0xc4>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <HAL_UART_MspInit+0xc4>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015bc:	4a16      	ldr	r2, [pc, #88]	@ (8001618 <HAL_UART_MspInit+0xc4>)
 80015be:	f043 0304 	orr.w	r3, r3, #4
 80015c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <HAL_UART_MspInit+0xc4>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015d0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015ea:	2308      	movs	r3, #8
 80015ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015f4:	4619      	mov	r1, r3
 80015f6:	4809      	ldr	r0, [pc, #36]	@ (800161c <HAL_UART_MspInit+0xc8>)
 80015f8:	f002 fab0 	bl	8003b5c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2105      	movs	r1, #5
 8001600:	2034      	movs	r0, #52	@ 0x34
 8001602:	f002 f80b 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001606:	2034      	movs	r0, #52	@ 0x34
 8001608:	f002 f824 	bl	8003654 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 800160c:	bf00      	nop
 800160e:	37b0      	adds	r7, #176	@ 0xb0
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40004c00 	.word	0x40004c00
 8001618:	40021000 	.word	0x40021000
 800161c:	48000800 	.word	0x48000800

08001620 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08e      	sub	sp, #56	@ 0x38
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800162e:	4b34      	ldr	r3, [pc, #208]	@ (8001700 <HAL_InitTick+0xe0>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001632:	4a33      	ldr	r2, [pc, #204]	@ (8001700 <HAL_InitTick+0xe0>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6593      	str	r3, [r2, #88]	@ 0x58
 800163a:	4b31      	ldr	r3, [pc, #196]	@ (8001700 <HAL_InitTick+0xe0>)
 800163c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001646:	f107 0210 	add.w	r2, r7, #16
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f004 f8c5 	bl	80057e0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800165a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800165c:	2b00      	cmp	r3, #0
 800165e:	d103      	bne.n	8001668 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001660:	f004 f892 	bl	8005788 <HAL_RCC_GetPCLK1Freq>
 8001664:	6378      	str	r0, [r7, #52]	@ 0x34
 8001666:	e004      	b.n	8001672 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001668:	f004 f88e 	bl	8005788 <HAL_RCC_GetPCLK1Freq>
 800166c:	4603      	mov	r3, r0
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001674:	4a23      	ldr	r2, [pc, #140]	@ (8001704 <HAL_InitTick+0xe4>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	0c9b      	lsrs	r3, r3, #18
 800167c:	3b01      	subs	r3, #1
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001680:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <HAL_InitTick+0xe8>)
 8001682:	4a22      	ldr	r2, [pc, #136]	@ (800170c <HAL_InitTick+0xec>)
 8001684:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001686:	4b20      	ldr	r3, [pc, #128]	@ (8001708 <HAL_InitTick+0xe8>)
 8001688:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800168c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800168e:	4a1e      	ldr	r2, [pc, #120]	@ (8001708 <HAL_InitTick+0xe8>)
 8001690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001692:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001694:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <HAL_InitTick+0xe8>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169a:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <HAL_InitTick+0xe8>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a0:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <HAL_InitTick+0xe8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80016a6:	4818      	ldr	r0, [pc, #96]	@ (8001708 <HAL_InitTick+0xe8>)
 80016a8:	f004 fdf6 	bl	8006298 <HAL_TIM_Base_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d11b      	bne.n	80016f2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80016ba:	4813      	ldr	r0, [pc, #76]	@ (8001708 <HAL_InitTick+0xe8>)
 80016bc:	f004 fe4e 	bl	800635c <HAL_TIM_Base_Start_IT>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d111      	bne.n	80016f2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016ce:	201d      	movs	r0, #29
 80016d0:	f001 ffc0 	bl	8003654 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b0f      	cmp	r3, #15
 80016d8:	d808      	bhi.n	80016ec <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80016da:	2200      	movs	r2, #0
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	201d      	movs	r0, #29
 80016e0:	f001 ff9c 	bl	800361c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <HAL_InitTick+0xf0>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e002      	b.n	80016f2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3738      	adds	r7, #56	@ 0x38
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	431bde83 	.word	0x431bde83
 8001708:	200002a4 	.word	0x200002a4
 800170c:	40000400 	.word	0x40000400
 8001710:	20000004 	.word	0x20000004

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <NMI_Handler+0x4>

0800171c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <MemManage_Handler+0x4>

0800172c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <BusFault_Handler+0x4>

08001734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <UsageFault_Handler+0x4>

0800173c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alert1_Pin);
 800174e:	2004      	movs	r0, #4
 8001750:	f002 fbc8 	bl	8003ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800175c:	4802      	ldr	r0, [pc, #8]	@ (8001768 <DMA1_Channel1_IRQHandler+0x10>)
 800175e:	f002 f91e 	bl	800399e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200000e4 	.word	0x200000e4

0800176c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001770:	4802      	ldr	r0, [pc, #8]	@ (800177c <TIM3_IRQHandler+0x10>)
 8001772:	f004 fe63 	bl	800643c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200002a4 	.word	0x200002a4

08001780 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001784:	4802      	ldr	r0, [pc, #8]	@ (8001790 <UART4_IRQHandler+0x10>)
 8001786:	f005 f89b 	bl	80068c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200001d0 	.word	0x200001d0

08001794 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <SystemInit+0x20>)
 800179a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800179e:	4a05      	ldr	r2, [pc, #20]	@ (80017b4 <SystemInit+0x20>)
 80017a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017bc:	f7ff ffea 	bl	8001794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c0:	480c      	ldr	r0, [pc, #48]	@ (80017f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80017c2:	490d      	ldr	r1, [pc, #52]	@ (80017f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017c4:	4a0d      	ldr	r2, [pc, #52]	@ (80017fc <LoopForever+0xe>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001804 <LoopForever+0x16>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e6:	f009 f87d 	bl	800a8e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ea:	f7ff f839 	bl	8000860 <main>

080017ee <LoopForever>:

LoopForever:
    b LoopForever
 80017ee:	e7fe      	b.n	80017ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017f0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80017fc:	0800ab68 	.word	0x0800ab68
  ldr r2, =_sbss
 8001800:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001804:	20001dd4 	.word	0x20001dd4

08001808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC1_2_IRQHandler>

0800180a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001814:	2003      	movs	r0, #3
 8001816:	f001 fef6 	bl	8003606 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800181a:	200f      	movs	r0, #15
 800181c:	f7ff ff00 	bl	8001620 <HAL_InitTick>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	71fb      	strb	r3, [r7, #7]
 800182a:	e001      	b.n	8001830 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800182c:	f7ff fcca 	bl	80011c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001830:	79fb      	ldrb	r3, [r7, #7]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <HAL_IncTick+0x20>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_IncTick+0x24>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4413      	add	r3, r2
 800184c:	4a04      	ldr	r2, [pc, #16]	@ (8001860 <HAL_IncTick+0x24>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000008 	.word	0x20000008
 8001860:	200002f0 	.word	0x200002f0

08001864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return uwTick;
 8001868:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <HAL_GetTick+0x14>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	200002f0 	.word	0x200002f0

0800187c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	609a      	str	r2, [r3, #8]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	609a      	str	r2, [r3, #8]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
 80018f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3360      	adds	r3, #96	@ 0x60
 80018f6:	461a      	mov	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <LL_ADC_SetOffset+0x44>)
 8001906:	4013      	ands	r3, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	4313      	orrs	r3, r2
 8001914:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800191c:	bf00      	nop
 800191e:	371c      	adds	r7, #28
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	03fff000 	.word	0x03fff000

0800192c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3360      	adds	r3, #96	@ 0x60
 800193a:	461a      	mov	r2, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3360      	adds	r3, #96	@ 0x60
 8001968:	461a      	mov	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	431a      	orrs	r2, r3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001982:	bf00      	nop
 8001984:	371c      	adds	r7, #28
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	615a      	str	r2, [r3, #20]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019da:	b480      	push	{r7}
 80019dc:	b087      	sub	sp, #28
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3330      	adds	r3, #48	@ 0x30
 80019ea:	461a      	mov	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	0a1b      	lsrs	r3, r3, #8
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	4413      	add	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	f003 031f 	and.w	r3, r3, #31
 8001a04:	211f      	movs	r1, #31
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	401a      	ands	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	0e9b      	lsrs	r3, r3, #26
 8001a12:	f003 011f 	and.w	r1, r3, #31
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	f003 031f 	and.w	r3, r3, #31
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	431a      	orrs	r2, r3
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a26:	bf00      	nop
 8001a28:	371c      	adds	r7, #28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b087      	sub	sp, #28
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3314      	adds	r3, #20
 8001a42:	461a      	mov	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	0e5b      	lsrs	r3, r3, #25
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	4413      	add	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	0d1b      	lsrs	r3, r3, #20
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	2107      	movs	r1, #7
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	401a      	ands	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	0d1b      	lsrs	r3, r3, #20
 8001a6c:	f003 031f 	and.w	r3, r3, #31
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	431a      	orrs	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a7c:	bf00      	nop
 8001a7e:	371c      	adds	r7, #28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0318 	and.w	r3, r3, #24
 8001aaa:	4908      	ldr	r1, [pc, #32]	@ (8001acc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001aac:	40d9      	lsrs	r1, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	400b      	ands	r3, r1
 8001ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	0007ffff 	.word	0x0007ffff

08001ad0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 031f 	and.w	r3, r3, #31
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001afc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6093      	str	r3, [r2, #8]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b24:	d101      	bne.n	8001b2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b4c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b74:	d101      	bne.n	8001b7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bc4:	f043 0202 	orr.w	r2, r3, #2
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <LL_ADC_IsEnabled+0x18>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <LL_ADC_IsEnabled+0x1a>
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d101      	bne.n	8001c16 <LL_ADC_IsDisableOngoing+0x18>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <LL_ADC_IsDisableOngoing+0x1a>
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c38:	f043 0204 	orr.w	r2, r3, #4
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c60:	f043 0210 	orr.w	r2, r3, #16
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d101      	bne.n	8001c8c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001caa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cae:	f043 0220 	orr.w	r2, r3, #32
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d101      	bne.n	8001cda <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b089      	sub	sp, #36	@ 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e133      	b.n	8001f6a <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d109      	bne.n	8001d24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fa7f 	bl	8001214 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fef1 	bl	8001b10 <LL_ADC_IsDeepPowerDownEnabled>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d004      	beq.n	8001d3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fed7 	bl	8001aec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ff0c 	bl	8001b60 <LL_ADC_IsInternalRegulatorEnabled>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d115      	bne.n	8001d7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fef0 	bl	8001b38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d58:	4b86      	ldr	r3, [pc, #536]	@ (8001f74 <HAL_ADC_Init+0x28c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	099b      	lsrs	r3, r3, #6
 8001d5e:	4a86      	ldr	r2, [pc, #536]	@ (8001f78 <HAL_ADC_Init+0x290>)
 8001d60:	fba2 2303 	umull	r2, r3, r2, r3
 8001d64:	099b      	lsrs	r3, r3, #6
 8001d66:	3301      	adds	r3, #1
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d6c:	e002      	b.n	8001d74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f9      	bne.n	8001d6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff feee 	bl	8001b60 <LL_ADC_IsInternalRegulatorEnabled>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10d      	bne.n	8001da6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8e:	f043 0210 	orr.w	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9a:	f043 0201 	orr.w	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ff62 	bl	8001c74 <LL_ADC_REG_IsConversionOngoing>
 8001db0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 80cc 	bne.w	8001f58 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 80c8 	bne.w	8001f58 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dcc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001dd0:	f043 0202 	orr.w	r2, r3, #2
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fefb 	bl	8001bd8 <LL_ADC_IsEnabled>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d115      	bne.n	8001e14 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001de8:	4864      	ldr	r0, [pc, #400]	@ (8001f7c <HAL_ADC_Init+0x294>)
 8001dea:	f7ff fef5 	bl	8001bd8 <LL_ADC_IsEnabled>
 8001dee:	4604      	mov	r4, r0
 8001df0:	4863      	ldr	r0, [pc, #396]	@ (8001f80 <HAL_ADC_Init+0x298>)
 8001df2:	f7ff fef1 	bl	8001bd8 <LL_ADC_IsEnabled>
 8001df6:	4603      	mov	r3, r0
 8001df8:	431c      	orrs	r4, r3
 8001dfa:	4862      	ldr	r0, [pc, #392]	@ (8001f84 <HAL_ADC_Init+0x29c>)
 8001dfc:	f7ff feec 	bl	8001bd8 <LL_ADC_IsEnabled>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4323      	orrs	r3, r4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d105      	bne.n	8001e14 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	485e      	ldr	r0, [pc, #376]	@ (8001f88 <HAL_ADC_Init+0x2a0>)
 8001e10:	f7ff fd34 	bl	800187c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7e5b      	ldrb	r3, [r3, #25]
 8001e18:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e1e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e24:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e2a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e32:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d106      	bne.n	8001e50 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e46:	3b01      	subs	r3, #1
 8001e48:	045b      	lsls	r3, r3, #17
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d009      	beq.n	8001e6c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e64:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	4b46      	ldr	r3, [pc, #280]	@ (8001f8c <HAL_ADC_Init+0x2a4>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	69b9      	ldr	r1, [r7, #24]
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff1c 	bl	8001cc2 <LL_ADC_INJ_IsConversionOngoing>
 8001e8a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d140      	bne.n	8001f14 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d13d      	bne.n	8001f14 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	7e1b      	ldrb	r3, [r3, #24]
 8001ea0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ea2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001eaa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001eba:	f023 0306 	bic.w	r3, r3, #6
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	69b9      	ldr	r1, [r7, #24]
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d118      	bne.n	8001f04 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001edc:	f023 0304 	bic.w	r3, r3, #4
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ee8:	4311      	orrs	r1, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001eee:	4311      	orrs	r1, r2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0201 	orr.w	r2, r2, #1
 8001f00:	611a      	str	r2, [r3, #16]
 8001f02:	e007      	b.n	8001f14 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0201 	bic.w	r2, r2, #1
 8001f12:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d10c      	bne.n	8001f36 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f023 010f 	bic.w	r1, r3, #15
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	1e5a      	subs	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f34:	e007      	b.n	8001f46 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 020f 	bic.w	r2, r2, #15
 8001f44:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f56:	e007      	b.n	8001f68 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	f043 0210 	orr.w	r2, r3, #16
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f68:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	@ 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd90      	pop	{r4, r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000000 	.word	0x20000000
 8001f78:	053e2d63 	.word	0x053e2d63
 8001f7c:	50040000 	.word	0x50040000
 8001f80:	50040100 	.word	0x50040100
 8001f84:	50040200 	.word	0x50040200
 8001f88:	50040300 	.word	0x50040300
 8001f8c:	fff0c007 	.word	0xfff0c007

08001f90 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f9c:	4853      	ldr	r0, [pc, #332]	@ (80020ec <HAL_ADC_Start_DMA+0x15c>)
 8001f9e:	f7ff fd97 	bl	8001ad0 <LL_ADC_GetMultimode>
 8001fa2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fe63 	bl	8001c74 <LL_ADC_REG_IsConversionOngoing>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f040 8093 	bne.w	80020dc <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ADC_Start_DMA+0x34>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e08e      	b.n	80020e2 <HAL_ADC_Start_DMA+0x152>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a47      	ldr	r2, [pc, #284]	@ (80020f0 <HAL_ADC_Start_DMA+0x160>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d008      	beq.n	8001fe8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b05      	cmp	r3, #5
 8001fe0:	d002      	beq.n	8001fe8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b09      	cmp	r3, #9
 8001fe6:	d172      	bne.n	80020ce <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 fdcb 	bl	8002b84 <ADC_Enable>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001ff2:	7dfb      	ldrb	r3, [r7, #23]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d165      	bne.n	80020c4 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a38      	ldr	r2, [pc, #224]	@ (80020f4 <HAL_ADC_Start_DMA+0x164>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d002      	beq.n	800201c <HAL_ADC_Start_DMA+0x8c>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	e000      	b.n	800201e <HAL_ADC_Start_DMA+0x8e>
 800201c:	4b36      	ldr	r3, [pc, #216]	@ (80020f8 <HAL_ADC_Start_DMA+0x168>)
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	4293      	cmp	r3, r2
 8002024:	d002      	beq.n	800202c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d105      	bne.n	8002038 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002030:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d006      	beq.n	8002052 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002048:	f023 0206 	bic.w	r2, r3, #6
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002050:	e002      	b.n	8002058 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800205c:	4a27      	ldr	r2, [pc, #156]	@ (80020fc <HAL_ADC_Start_DMA+0x16c>)
 800205e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002064:	4a26      	ldr	r2, [pc, #152]	@ (8002100 <HAL_ADC_Start_DMA+0x170>)
 8002066:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800206c:	4a25      	ldr	r2, [pc, #148]	@ (8002104 <HAL_ADC_Start_DMA+0x174>)
 800206e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	221c      	movs	r2, #28
 8002076:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0210 	orr.w	r2, r2, #16
 800208e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0201 	orr.w	r2, r2, #1
 800209e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3340      	adds	r3, #64	@ 0x40
 80020aa:	4619      	mov	r1, r3
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f001 fb96 	bl	80037e0 <HAL_DMA_Start_IT>
 80020b4:	4603      	mov	r3, r0
 80020b6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fdb1 	bl	8001c24 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80020c2:	e00d      	b.n	80020e0 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 80020cc:	e008      	b.n	80020e0 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80020da:	e001      	b.n	80020e0 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020dc:	2302      	movs	r3, #2
 80020de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	50040300 	.word	0x50040300
 80020f0:	50040200 	.word	0x50040200
 80020f4:	50040100 	.word	0x50040100
 80020f8:	50040000 	.word	0x50040000
 80020fc:	08002d4f 	.word	0x08002d4f
 8002100:	08002e27 	.word	0x08002e27
 8002104:	08002e43 	.word	0x08002e43

08002108 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_ADC_Stop_DMA+0x16>
 800211a:	2302      	movs	r3, #2
 800211c:	e051      	b.n	80021c2 <HAL_ADC_Stop_DMA+0xba>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002126:	2103      	movs	r1, #3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fc6f 	bl	8002a0c <ADC_ConversionStop>
 800212e:	4603      	mov	r3, r0
 8002130:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d13f      	bne.n	80021b8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800214c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d10f      	bne.n	8002176 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800215a:	4618      	mov	r0, r3
 800215c:	f001 fba0 	bl	80038a0 <HAL_DMA_Abort>
 8002160:	4603      	mov	r3, r0
 8002162:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d005      	beq.n	8002176 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0210 	bic.w	r2, r2, #16
 8002184:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fd7f 	bl	8002c90 <ADC_Disable>
 8002192:	4603      	mov	r3, r0
 8002194:	73fb      	strb	r3, [r7, #15]
 8002196:	e002      	b.n	800219e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fd79 	bl	8002c90 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d109      	bne.n	80021b8 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	f043 0201 	orr.w	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b0b6      	sub	sp, #216	@ 0xd8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x22>
 8002212:	2302      	movs	r3, #2
 8002214:	e3e3      	b.n	80029de <HAL_ADC_ConfigChannel+0x7ea>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fd26 	bl	8001c74 <LL_ADC_REG_IsConversionOngoing>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	f040 83c4 	bne.w	80029b8 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b05      	cmp	r3, #5
 800223e:	d824      	bhi.n	800228a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	3b02      	subs	r3, #2
 8002246:	2b03      	cmp	r3, #3
 8002248:	d81b      	bhi.n	8002282 <HAL_ADC_ConfigChannel+0x8e>
 800224a:	a201      	add	r2, pc, #4	@ (adr r2, 8002250 <HAL_ADC_ConfigChannel+0x5c>)
 800224c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002250:	08002261 	.word	0x08002261
 8002254:	08002269 	.word	0x08002269
 8002258:	08002271 	.word	0x08002271
 800225c:	08002279 	.word	0x08002279
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002260:	230c      	movs	r3, #12
 8002262:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002266:	e010      	b.n	800228a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002268:	2312      	movs	r3, #18
 800226a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800226e:	e00c      	b.n	800228a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002270:	2318      	movs	r3, #24
 8002272:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002276:	e008      	b.n	800228a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800227c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002280:	e003      	b.n	800228a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002282:	2306      	movs	r3, #6
 8002284:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002288:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002298:	f7ff fb9f 	bl	80019da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fce7 	bl	8001c74 <LL_ADC_REG_IsConversionOngoing>
 80022a6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fd07 	bl	8001cc2 <LL_ADC_INJ_IsConversionOngoing>
 80022b4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f040 81bf 	bne.w	8002640 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f040 81ba 	bne.w	8002640 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022d4:	d10f      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2200      	movs	r2, #0
 80022e0:	4619      	mov	r1, r3
 80022e2:	f7ff fba6 	bl	8001a32 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fb4d 	bl	800198e <LL_ADC_SetSamplingTimeCommonConfig>
 80022f4:	e00e      	b.n	8002314 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6819      	ldr	r1, [r3, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	461a      	mov	r2, r3
 8002304:	f7ff fb95 	bl	8001a32 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fb3d 	bl	800198e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	08db      	lsrs	r3, r3, #3
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b04      	cmp	r3, #4
 8002334:	d00a      	beq.n	800234c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	6919      	ldr	r1, [r3, #16]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002346:	f7ff facd 	bl	80018e4 <LL_ADC_SetOffset>
 800234a:	e179      	b.n	8002640 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff faea 	bl	800192c <LL_ADC_GetOffsetChannel>
 8002358:	4603      	mov	r3, r0
 800235a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10a      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x184>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fadf 	bl	800192c <LL_ADC_GetOffsetChannel>
 800236e:	4603      	mov	r3, r0
 8002370:	0e9b      	lsrs	r3, r3, #26
 8002372:	f003 021f 	and.w	r2, r3, #31
 8002376:	e01e      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x1c2>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fad4 	bl	800192c <LL_ADC_GetOffsetChannel>
 8002384:	4603      	mov	r3, r0
 8002386:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800238e:	fa93 f3a3 	rbit	r3, r3
 8002392:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002396:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800239a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800239e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80023a6:	2320      	movs	r3, #32
 80023a8:	e004      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80023aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d105      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x1da>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	0e9b      	lsrs	r3, r3, #26
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	e018      	b.n	8002400 <HAL_ADC_ConfigChannel+0x20c>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80023e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80023ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80023f2:	2320      	movs	r3, #32
 80023f4:	e004      	b.n	8002400 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80023f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002400:	429a      	cmp	r2, r3
 8002402:	d106      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2200      	movs	r2, #0
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff faa3 	bl	8001958 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2101      	movs	r1, #1
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fa87 	bl	800192c <LL_ADC_GetOffsetChannel>
 800241e:	4603      	mov	r3, r0
 8002420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10a      	bne.n	800243e <HAL_ADC_ConfigChannel+0x24a>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2101      	movs	r1, #1
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fa7c 	bl	800192c <LL_ADC_GetOffsetChannel>
 8002434:	4603      	mov	r3, r0
 8002436:	0e9b      	lsrs	r3, r3, #26
 8002438:	f003 021f 	and.w	r2, r3, #31
 800243c:	e01e      	b.n	800247c <HAL_ADC_ConfigChannel+0x288>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2101      	movs	r1, #1
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fa71 	bl	800192c <LL_ADC_GetOffsetChannel>
 800244a:	4603      	mov	r3, r0
 800244c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800245c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002460:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002464:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800246c:	2320      	movs	r3, #32
 800246e:	e004      	b.n	800247a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002470:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002474:	fab3 f383 	clz	r3, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x2a0>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	0e9b      	lsrs	r3, r3, #26
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	e018      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x2d2>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80024a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80024b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80024b8:	2320      	movs	r3, #32
 80024ba:	e004      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80024bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d106      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	2101      	movs	r1, #1
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fa40 	bl	8001958 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2102      	movs	r1, #2
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fa24 	bl	800192c <LL_ADC_GetOffsetChannel>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10a      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x310>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2102      	movs	r1, #2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fa19 	bl	800192c <LL_ADC_GetOffsetChannel>
 80024fa:	4603      	mov	r3, r0
 80024fc:	0e9b      	lsrs	r3, r3, #26
 80024fe:	f003 021f 	and.w	r2, r3, #31
 8002502:	e01e      	b.n	8002542 <HAL_ADC_ConfigChannel+0x34e>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2102      	movs	r1, #2
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fa0e 	bl	800192c <LL_ADC_GetOffsetChannel>
 8002510:	4603      	mov	r3, r0
 8002512:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002522:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002526:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800252a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002532:	2320      	movs	r3, #32
 8002534:	e004      	b.n	8002540 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254a:	2b00      	cmp	r3, #0
 800254c:	d105      	bne.n	800255a <HAL_ADC_ConfigChannel+0x366>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	0e9b      	lsrs	r3, r3, #26
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	e014      	b.n	8002584 <HAL_ADC_ConfigChannel+0x390>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002568:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800256a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800256e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002576:	2320      	movs	r3, #32
 8002578:	e004      	b.n	8002584 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800257a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002584:	429a      	cmp	r2, r3
 8002586:	d106      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2200      	movs	r2, #0
 800258e:	2102      	movs	r1, #2
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff f9e1 	bl	8001958 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2103      	movs	r1, #3
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff f9c5 	bl	800192c <LL_ADC_GetOffsetChannel>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x3ce>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2103      	movs	r1, #3
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff f9ba 	bl	800192c <LL_ADC_GetOffsetChannel>
 80025b8:	4603      	mov	r3, r0
 80025ba:	0e9b      	lsrs	r3, r3, #26
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	e017      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x3fe>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2103      	movs	r1, #3
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff f9af 	bl	800192c <LL_ADC_GetOffsetChannel>
 80025ce:	4603      	mov	r3, r0
 80025d0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80025da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025dc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80025de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80025e4:	2320      	movs	r3, #32
 80025e6:	e003      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80025e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d105      	bne.n	800260a <HAL_ADC_ConfigChannel+0x416>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	0e9b      	lsrs	r3, r3, #26
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	e011      	b.n	800262e <HAL_ADC_ConfigChannel+0x43a>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002618:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800261a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800261c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002622:	2320      	movs	r3, #32
 8002624:	e003      	b.n	800262e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002626:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800262e:	429a      	cmp	r2, r3
 8002630:	d106      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2200      	movs	r2, #0
 8002638:	2103      	movs	r1, #3
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff f98c 	bl	8001958 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fac7 	bl	8001bd8 <LL_ADC_IsEnabled>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	f040 813f 	bne.w	80028d0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6819      	ldr	r1, [r3, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	461a      	mov	r2, r3
 8002660:	f7ff fa12 	bl	8001a88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4a8e      	ldr	r2, [pc, #568]	@ (80028a4 <HAL_ADC_ConfigChannel+0x6b0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	f040 8130 	bne.w	80028d0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10b      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x4a4>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0e9b      	lsrs	r3, r3, #26
 8002686:	3301      	adds	r3, #1
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2b09      	cmp	r3, #9
 800268e:	bf94      	ite	ls
 8002690:	2301      	movls	r3, #1
 8002692:	2300      	movhi	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	e019      	b.n	80026cc <HAL_ADC_ConfigChannel+0x4d8>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80026a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80026aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80026b0:	2320      	movs	r3, #32
 80026b2:	e003      	b.n	80026bc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80026b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	3301      	adds	r3, #1
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	2b09      	cmp	r3, #9
 80026c4:	bf94      	ite	ls
 80026c6:	2301      	movls	r3, #1
 80026c8:	2300      	movhi	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d079      	beq.n	80027c4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x4f8>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0e9b      	lsrs	r3, r3, #26
 80026e2:	3301      	adds	r3, #1
 80026e4:	069b      	lsls	r3, r3, #26
 80026e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026ea:	e015      	b.n	8002718 <HAL_ADC_ConfigChannel+0x524>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026f4:	fa93 f3a3 	rbit	r3, r3
 80026f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80026fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026fc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80026fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002704:	2320      	movs	r3, #32
 8002706:	e003      	b.n	8002710 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	3301      	adds	r3, #1
 8002712:	069b      	lsls	r3, r3, #26
 8002714:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x544>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	0e9b      	lsrs	r3, r3, #26
 800272a:	3301      	adds	r3, #1
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	2101      	movs	r1, #1
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	e017      	b.n	8002768 <HAL_ADC_ConfigChannel+0x574>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002748:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800274a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002750:	2320      	movs	r3, #32
 8002752:	e003      	b.n	800275c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	3301      	adds	r3, #1
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	2101      	movs	r1, #1
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	ea42 0103 	orr.w	r1, r2, r3
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10a      	bne.n	800278e <HAL_ADC_ConfigChannel+0x59a>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	0e9b      	lsrs	r3, r3, #26
 800277e:	3301      	adds	r3, #1
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	051b      	lsls	r3, r3, #20
 800278c:	e018      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x5cc>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800279c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800279e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80027a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80027a6:	2320      	movs	r3, #32
 80027a8:	e003      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80027aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	3301      	adds	r3, #1
 80027b4:	f003 021f 	and.w	r2, r3, #31
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027c0:	430b      	orrs	r3, r1
 80027c2:	e080      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d107      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x5ec>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	0e9b      	lsrs	r3, r3, #26
 80027d6:	3301      	adds	r3, #1
 80027d8:	069b      	lsls	r3, r3, #26
 80027da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027de:	e015      	b.n	800280c <HAL_ADC_ConfigChannel+0x618>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80027f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80027f8:	2320      	movs	r3, #32
 80027fa:	e003      	b.n	8002804 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80027fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	3301      	adds	r3, #1
 8002806:	069b      	lsls	r3, r3, #26
 8002808:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002814:	2b00      	cmp	r3, #0
 8002816:	d109      	bne.n	800282c <HAL_ADC_ConfigChannel+0x638>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0e9b      	lsrs	r3, r3, #26
 800281e:	3301      	adds	r3, #1
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	2101      	movs	r1, #1
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	e017      	b.n	800285c <HAL_ADC_ConfigChannel+0x668>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	61bb      	str	r3, [r7, #24]
  return result;
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002844:	2320      	movs	r3, #32
 8002846:	e003      	b.n	8002850 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	3301      	adds	r3, #1
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	2101      	movs	r1, #1
 8002858:	fa01 f303 	lsl.w	r3, r1, r3
 800285c:	ea42 0103 	orr.w	r1, r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10d      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x694>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0e9b      	lsrs	r3, r3, #26
 8002872:	3301      	adds	r3, #1
 8002874:	f003 021f 	and.w	r2, r3, #31
 8002878:	4613      	mov	r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4413      	add	r3, r2
 800287e:	3b1e      	subs	r3, #30
 8002880:	051b      	lsls	r3, r3, #20
 8002882:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002886:	e01d      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x6d0>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	60fb      	str	r3, [r7, #12]
  return result;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d103      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80028a0:	2320      	movs	r3, #32
 80028a2:	e005      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x6bc>
 80028a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	3301      	adds	r3, #1
 80028b2:	f003 021f 	and.w	r2, r3, #31
 80028b6:	4613      	mov	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	3b1e      	subs	r3, #30
 80028be:	051b      	lsls	r3, r3, #20
 80028c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ca:	4619      	mov	r1, r3
 80028cc:	f7ff f8b1 	bl	8001a32 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b44      	ldr	r3, [pc, #272]	@ (80029e8 <HAL_ADC_ConfigChannel+0x7f4>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d07a      	beq.n	80029d2 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028dc:	4843      	ldr	r0, [pc, #268]	@ (80029ec <HAL_ADC_ConfigChannel+0x7f8>)
 80028de:	f7fe fff3 	bl	80018c8 <LL_ADC_GetCommonPathInternalCh>
 80028e2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a41      	ldr	r2, [pc, #260]	@ (80029f0 <HAL_ADC_ConfigChannel+0x7fc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d12c      	bne.n	800294a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d126      	bne.n	800294a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a3c      	ldr	r2, [pc, #240]	@ (80029f4 <HAL_ADC_ConfigChannel+0x800>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d004      	beq.n	8002910 <HAL_ADC_ConfigChannel+0x71c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a3b      	ldr	r2, [pc, #236]	@ (80029f8 <HAL_ADC_ConfigChannel+0x804>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d15d      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002910:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002914:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002918:	4619      	mov	r1, r3
 800291a:	4834      	ldr	r0, [pc, #208]	@ (80029ec <HAL_ADC_ConfigChannel+0x7f8>)
 800291c:	f7fe ffc1 	bl	80018a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002920:	4b36      	ldr	r3, [pc, #216]	@ (80029fc <HAL_ADC_ConfigChannel+0x808>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	099b      	lsrs	r3, r3, #6
 8002926:	4a36      	ldr	r2, [pc, #216]	@ (8002a00 <HAL_ADC_ConfigChannel+0x80c>)
 8002928:	fba2 2303 	umull	r2, r3, r2, r3
 800292c:	099b      	lsrs	r3, r3, #6
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	4613      	mov	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800293a:	e002      	b.n	8002942 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	3b01      	subs	r3, #1
 8002940:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f9      	bne.n	800293c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002948:	e040      	b.n	80029cc <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a2d      	ldr	r2, [pc, #180]	@ (8002a04 <HAL_ADC_ConfigChannel+0x810>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d118      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002954:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002958:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d112      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a23      	ldr	r2, [pc, #140]	@ (80029f4 <HAL_ADC_ConfigChannel+0x800>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d004      	beq.n	8002974 <HAL_ADC_ConfigChannel+0x780>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a22      	ldr	r2, [pc, #136]	@ (80029f8 <HAL_ADC_ConfigChannel+0x804>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d12d      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002974:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002978:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800297c:	4619      	mov	r1, r3
 800297e:	481b      	ldr	r0, [pc, #108]	@ (80029ec <HAL_ADC_ConfigChannel+0x7f8>)
 8002980:	f7fe ff8f 	bl	80018a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002984:	e024      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1f      	ldr	r2, [pc, #124]	@ (8002a08 <HAL_ADC_ConfigChannel+0x814>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d120      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002990:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d11a      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a14      	ldr	r2, [pc, #80]	@ (80029f4 <HAL_ADC_ConfigChannel+0x800>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d115      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029ae:	4619      	mov	r1, r3
 80029b0:	480e      	ldr	r0, [pc, #56]	@ (80029ec <HAL_ADC_ConfigChannel+0x7f8>)
 80029b2:	f7fe ff76 	bl	80018a2 <LL_ADC_SetCommonPathInternalCh>
 80029b6:	e00c      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80029ca:	e002      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029cc:	bf00      	nop
 80029ce:	e000      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80029da:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80029de:	4618      	mov	r0, r3
 80029e0:	37d8      	adds	r7, #216	@ 0xd8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	80080000 	.word	0x80080000
 80029ec:	50040300 	.word	0x50040300
 80029f0:	c7520000 	.word	0xc7520000
 80029f4:	50040000 	.word	0x50040000
 80029f8:	50040200 	.word	0x50040200
 80029fc:	20000000 	.word	0x20000000
 8002a00:	053e2d63 	.word	0x053e2d63
 8002a04:	cb840000 	.word	0xcb840000
 8002a08:	80000001 	.word	0x80000001

08002a0c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff f926 	bl	8001c74 <LL_ADC_REG_IsConversionOngoing>
 8002a28:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff f947 	bl	8001cc2 <LL_ADC_INJ_IsConversionOngoing>
 8002a34:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d103      	bne.n	8002a44 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8098 	beq.w	8002b74 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d02a      	beq.n	8002aa8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	7e5b      	ldrb	r3, [r3, #25]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d126      	bne.n	8002aa8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	7e1b      	ldrb	r3, [r3, #24]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d122      	bne.n	8002aa8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002a62:	2301      	movs	r3, #1
 8002a64:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a66:	e014      	b.n	8002a92 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	4a45      	ldr	r2, [pc, #276]	@ (8002b80 <ADC_ConversionStop+0x174>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d90d      	bls.n	8002a8c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a74:	f043 0210 	orr.w	r2, r3, #16
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e074      	b.n	8002b76 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a9c:	2b40      	cmp	r3, #64	@ 0x40
 8002a9e:	d1e3      	bne.n	8002a68 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2240      	movs	r2, #64	@ 0x40
 8002aa6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d014      	beq.n	8002ad8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff f8de 	bl	8001c74 <LL_ADC_REG_IsConversionOngoing>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00c      	beq.n	8002ad8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff f89b 	bl	8001bfe <LL_ADC_IsDisableOngoing>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d104      	bne.n	8002ad8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff f8ba 	bl	8001c4c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d014      	beq.n	8002b08 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff f8ed 	bl	8001cc2 <LL_ADC_INJ_IsConversionOngoing>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00c      	beq.n	8002b08 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff f883 	bl	8001bfe <LL_ADC_IsDisableOngoing>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d104      	bne.n	8002b08 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff f8c9 	bl	8001c9a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d005      	beq.n	8002b1a <ADC_ConversionStop+0x10e>
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d105      	bne.n	8002b20 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002b14:	230c      	movs	r3, #12
 8002b16:	617b      	str	r3, [r7, #20]
        break;
 8002b18:	e005      	b.n	8002b26 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	617b      	str	r3, [r7, #20]
        break;
 8002b1e:	e002      	b.n	8002b26 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002b20:	2304      	movs	r3, #4
 8002b22:	617b      	str	r3, [r7, #20]
        break;
 8002b24:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002b26:	f7fe fe9d 	bl	8001864 <HAL_GetTick>
 8002b2a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b2c:	e01b      	b.n	8002b66 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002b2e:	f7fe fe99 	bl	8001864 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b05      	cmp	r3, #5
 8002b3a:	d914      	bls.n	8002b66 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4e:	f043 0210 	orr.w	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5a:	f043 0201 	orr.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e007      	b.n	8002b76 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1dc      	bne.n	8002b2e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	a33fffff 	.word	0xa33fffff

08002b84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff f81f 	bl	8001bd8 <LL_ADC_IsEnabled>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d169      	bne.n	8002c74 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	4b36      	ldr	r3, [pc, #216]	@ (8002c80 <ADC_Enable+0xfc>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00d      	beq.n	8002bca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb2:	f043 0210 	orr.w	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e055      	b.n	8002c76 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe ffda 	bl	8001b88 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002bd4:	482b      	ldr	r0, [pc, #172]	@ (8002c84 <ADC_Enable+0x100>)
 8002bd6:	f7fe fe77 	bl	80018c8 <LL_ADC_GetCommonPathInternalCh>
 8002bda:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002bdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d013      	beq.n	8002c0c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002be4:	4b28      	ldr	r3, [pc, #160]	@ (8002c88 <ADC_Enable+0x104>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	099b      	lsrs	r3, r3, #6
 8002bea:	4a28      	ldr	r2, [pc, #160]	@ (8002c8c <ADC_Enable+0x108>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	099b      	lsrs	r3, r3, #6
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bfe:	e002      	b.n	8002c06 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f9      	bne.n	8002c00 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c0c:	f7fe fe2a 	bl	8001864 <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c12:	e028      	b.n	8002c66 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe ffdd 	bl	8001bd8 <LL_ADC_IsEnabled>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d104      	bne.n	8002c2e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe ffad 	bl	8001b88 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c2e:	f7fe fe19 	bl	8001864 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d914      	bls.n	8002c66 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d00d      	beq.n	8002c66 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4e:	f043 0210 	orr.w	r2, r3, #16
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5a:	f043 0201 	orr.w	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e007      	b.n	8002c76 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d1cf      	bne.n	8002c14 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	8000003f 	.word	0x8000003f
 8002c84:	50040300 	.word	0x50040300
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	053e2d63 	.word	0x053e2d63

08002c90 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe ffae 	bl	8001bfe <LL_ADC_IsDisableOngoing>
 8002ca2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe ff95 	bl	8001bd8 <LL_ADC_IsEnabled>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d047      	beq.n	8002d44 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d144      	bne.n	8002d44 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 030d 	and.w	r3, r3, #13
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d10c      	bne.n	8002ce2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe ff6f 	bl	8001bb0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cda:	f7fe fdc3 	bl	8001864 <HAL_GetTick>
 8002cde:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ce0:	e029      	b.n	8002d36 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce6:	f043 0210 	orr.w	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf2:	f043 0201 	orr.w	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e023      	b.n	8002d46 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cfe:	f7fe fdb1 	bl	8001864 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d914      	bls.n	8002d36 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00d      	beq.n	8002d36 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1e:	f043 0210 	orr.w	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e007      	b.n	8002d46 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1dc      	bne.n	8002cfe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d60:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d14b      	bne.n	8002e00 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d021      	beq.n	8002dc6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe fe14 	bl	80019b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d032      	beq.n	8002df8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d12b      	bne.n	8002df8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d11f      	bne.n	8002df8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbc:	f043 0201 	orr.w	r2, r3, #1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dc4:	e018      	b.n	8002df8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d111      	bne.n	8002df8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d105      	bne.n	8002df8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df0:	f043 0201 	orr.w	r2, r3, #1
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7fe f851 	bl	8000ea0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dfe:	e00e      	b.n	8002e1e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff f9e6 	bl	80021de <HAL_ADC_ErrorCallback>
}
 8002e12:	e004      	b.n	8002e1e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	4798      	blx	r3
}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f7ff f9c8 	bl	80021ca <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e60:	f043 0204 	orr.w	r2, r3, #4
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f7ff f9b8 	bl	80021de <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <LL_ADC_IsEnabled>:
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <LL_ADC_IsEnabled+0x18>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <LL_ADC_IsEnabled+0x1a>
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_ADC_REG_IsConversionOngoing>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d101      	bne.n	8002eb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b0a1      	sub	sp, #132	@ 0x84
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e093      	b.n	800300a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002eea:	2300      	movs	r3, #0
 8002eec:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a47      	ldr	r2, [pc, #284]	@ (8003014 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d102      	bne.n	8002f02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002efc:	4b46      	ldr	r3, [pc, #280]	@ (8003018 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	e001      	b.n	8002f06 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10b      	bne.n	8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f10:	f043 0220 	orr.w	r2, r3, #32
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e072      	b.n	800300a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ffb8 	bl	8002e9c <LL_ADC_REG_IsConversionOngoing>
 8002f2c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff ffb2 	bl	8002e9c <LL_ADC_REG_IsConversionOngoing>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d154      	bne.n	8002fe8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d151      	bne.n	8002fe8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f44:	4b35      	ldr	r3, [pc, #212]	@ (800301c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002f46:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d02c      	beq.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f62:	035b      	lsls	r3, r3, #13
 8002f64:	430b      	orrs	r3, r1
 8002f66:	431a      	orrs	r2, r3
 8002f68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f6a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f6c:	4829      	ldr	r0, [pc, #164]	@ (8003014 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f6e:	f7ff ff82 	bl	8002e76 <LL_ADC_IsEnabled>
 8002f72:	4604      	mov	r4, r0
 8002f74:	4828      	ldr	r0, [pc, #160]	@ (8003018 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f76:	f7ff ff7e 	bl	8002e76 <LL_ADC_IsEnabled>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	431c      	orrs	r4, r3
 8002f7e:	4828      	ldr	r0, [pc, #160]	@ (8003020 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f80:	f7ff ff79 	bl	8002e76 <LL_ADC_IsEnabled>
 8002f84:	4603      	mov	r3, r0
 8002f86:	4323      	orrs	r3, r4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d137      	bne.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f94:	f023 030f 	bic.w	r3, r3, #15
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	6811      	ldr	r1, [r2, #0]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	6892      	ldr	r2, [r2, #8]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fa6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa8:	e028      	b.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002faa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fb4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fb6:	4817      	ldr	r0, [pc, #92]	@ (8003014 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fb8:	f7ff ff5d 	bl	8002e76 <LL_ADC_IsEnabled>
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	4816      	ldr	r0, [pc, #88]	@ (8003018 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fc0:	f7ff ff59 	bl	8002e76 <LL_ADC_IsEnabled>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	431c      	orrs	r4, r3
 8002fc8:	4815      	ldr	r0, [pc, #84]	@ (8003020 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002fca:	f7ff ff54 	bl	8002e76 <LL_ADC_IsEnabled>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4323      	orrs	r3, r4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d112      	bne.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002fde:	f023 030f 	bic.w	r3, r3, #15
 8002fe2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002fe4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fe6:	e009      	b.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002ffa:	e000      	b.n	8002ffe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ffc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003006:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800300a:	4618      	mov	r0, r3
 800300c:	3784      	adds	r7, #132	@ 0x84
 800300e:	46bd      	mov	sp, r7
 8003010:	bd90      	pop	{r4, r7, pc}
 8003012:	bf00      	nop
 8003014:	50040000 	.word	0x50040000
 8003018:	50040100 	.word	0x50040100
 800301c:	50040300 	.word	0x50040300
 8003020:	50040200 	.word	0x50040200

08003024 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e0ed      	b.n	8003212 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d102      	bne.n	8003048 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fe f970 	bl	8001328 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003058:	f7fe fc04 	bl	8001864 <HAL_GetTick>
 800305c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800305e:	e012      	b.n	8003086 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003060:	f7fe fc00 	bl	8001864 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b0a      	cmp	r3, #10
 800306c:	d90b      	bls.n	8003086 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2205      	movs	r2, #5
 800307e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e0c5      	b.n	8003212 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0e5      	beq.n	8003060 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0202 	bic.w	r2, r2, #2
 80030a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030a4:	f7fe fbde 	bl	8001864 <HAL_GetTick>
 80030a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030aa:	e012      	b.n	80030d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030ac:	f7fe fbda 	bl	8001864 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b0a      	cmp	r3, #10
 80030b8:	d90b      	bls.n	80030d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2205      	movs	r2, #5
 80030ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e09f      	b.n	8003212 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e5      	bne.n	80030ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	7e1b      	ldrb	r3, [r3, #24]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d108      	bne.n	80030fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	e007      	b.n	800310a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003108:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	7e5b      	ldrb	r3, [r3, #25]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d108      	bne.n	8003124 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e007      	b.n	8003134 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003132:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	7e9b      	ldrb	r3, [r3, #26]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d108      	bne.n	800314e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0220 	orr.w	r2, r2, #32
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	e007      	b.n	800315e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0220 	bic.w	r2, r2, #32
 800315c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	7edb      	ldrb	r3, [r3, #27]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d108      	bne.n	8003178 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0210 	bic.w	r2, r2, #16
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	e007      	b.n	8003188 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0210 	orr.w	r2, r2, #16
 8003186:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7f1b      	ldrb	r3, [r3, #28]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d108      	bne.n	80031a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0208 	orr.w	r2, r2, #8
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	e007      	b.n	80031b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0208 	bic.w	r2, r2, #8
 80031b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7f5b      	ldrb	r3, [r3, #29]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d108      	bne.n	80031cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0204 	orr.w	r2, r2, #4
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	e007      	b.n	80031dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0204 	bic.w	r2, r2, #4
 80031da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	ea42 0103 	orr.w	r1, r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	1e5a      	subs	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d12e      	bne.n	800328c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2202      	movs	r2, #2
 8003232:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0201 	bic.w	r2, r2, #1
 8003244:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003246:	f7fe fb0d 	bl	8001864 <HAL_GetTick>
 800324a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800324c:	e012      	b.n	8003274 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800324e:	f7fe fb09 	bl	8001864 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b0a      	cmp	r3, #10
 800325a:	d90b      	bls.n	8003274 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2205      	movs	r2, #5
 800326c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e012      	b.n	800329a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1e5      	bne.n	800324e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	e006      	b.n	800329a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
  }
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b089      	sub	sp, #36	@ 0x24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80032c0:	7ffb      	ldrb	r3, [r7, #31]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d003      	beq.n	80032ce <HAL_CAN_AddTxMessage+0x2c>
 80032c6:	7ffb      	ldrb	r3, [r7, #31]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	f040 80ad 	bne.w	8003428 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d105      	bne.n	80032ee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8095 	beq.w	8003418 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	0e1b      	lsrs	r3, r3, #24
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80032f8:	2201      	movs	r2, #1
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	409a      	lsls	r2, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10d      	bne.n	8003326 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003314:	68f9      	ldr	r1, [r7, #12]
 8003316:	6809      	ldr	r1, [r1, #0]
 8003318:	431a      	orrs	r2, r3
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	3318      	adds	r3, #24
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	440b      	add	r3, r1
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	e00f      	b.n	8003346 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003330:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003336:	68f9      	ldr	r1, [r7, #12]
 8003338:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800333a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	3318      	adds	r3, #24
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	440b      	add	r3, r1
 8003344:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6819      	ldr	r1, [r3, #0]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	3318      	adds	r3, #24
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	440b      	add	r3, r1
 8003356:	3304      	adds	r3, #4
 8003358:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	7d1b      	ldrb	r3, [r3, #20]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d111      	bne.n	8003386 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	3318      	adds	r3, #24
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	4413      	add	r3, r2
 800336e:	3304      	adds	r3, #4
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	6811      	ldr	r1, [r2, #0]
 8003376:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	3318      	adds	r3, #24
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	440b      	add	r3, r1
 8003382:	3304      	adds	r3, #4
 8003384:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3307      	adds	r3, #7
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	061a      	lsls	r2, r3, #24
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3306      	adds	r3, #6
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	041b      	lsls	r3, r3, #16
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3305      	adds	r3, #5
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	4313      	orrs	r3, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	3204      	adds	r2, #4
 80033a6:	7812      	ldrb	r2, [r2, #0]
 80033a8:	4610      	mov	r0, r2
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	6811      	ldr	r1, [r2, #0]
 80033ae:	ea43 0200 	orr.w	r2, r3, r0
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	440b      	add	r3, r1
 80033b8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80033bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3303      	adds	r3, #3
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	061a      	lsls	r2, r3, #24
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3302      	adds	r3, #2
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	041b      	lsls	r3, r3, #16
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3301      	adds	r3, #1
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	4313      	orrs	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	7812      	ldrb	r2, [r2, #0]
 80033de:	4610      	mov	r0, r2
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	6811      	ldr	r1, [r2, #0]
 80033e4:	ea43 0200 	orr.w	r2, r3, r0
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	440b      	add	r3, r1
 80033ee:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80033f2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	3318      	adds	r3, #24
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	4413      	add	r3, r2
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	6811      	ldr	r1, [r2, #0]
 8003406:	f043 0201 	orr.w	r2, r3, #1
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	3318      	adds	r3, #24
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	440b      	add	r3, r1
 8003412:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e00e      	b.n	8003436 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e006      	b.n	8003436 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
  }
}
 8003436:	4618      	mov	r0, r3
 8003438:	3724      	adds	r7, #36	@ 0x24
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8003442:	b480      	push	{r7}
 8003444:	b085      	sub	sp, #20
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003454:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003456:	7afb      	ldrb	r3, [r7, #11]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d002      	beq.n	8003462 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800345c:	7afb      	ldrb	r3, [r7, #11]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d11d      	bne.n	800349e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	3301      	adds	r3, #1
 8003474:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3301      	adds	r3, #1
 8003488:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3301      	adds	r3, #1
 800349c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800349e:	68fb      	ldr	r3, [r7, #12]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034bc:	4b0c      	ldr	r3, [pc, #48]	@ (80034f0 <__NVIC_SetPriorityGrouping+0x44>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034c8:	4013      	ands	r3, r2
 80034ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034de:	4a04      	ldr	r2, [pc, #16]	@ (80034f0 <__NVIC_SetPriorityGrouping+0x44>)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	60d3      	str	r3, [r2, #12]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f8:	4b04      	ldr	r3, [pc, #16]	@ (800350c <__NVIC_GetPriorityGrouping+0x18>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	0a1b      	lsrs	r3, r3, #8
 80034fe:	f003 0307 	and.w	r3, r3, #7
}
 8003502:	4618      	mov	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351e:	2b00      	cmp	r3, #0
 8003520:	db0b      	blt.n	800353a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	f003 021f 	and.w	r2, r3, #31
 8003528:	4907      	ldr	r1, [pc, #28]	@ (8003548 <__NVIC_EnableIRQ+0x38>)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	2001      	movs	r0, #1
 8003532:	fa00 f202 	lsl.w	r2, r0, r2
 8003536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	e000e100 	.word	0xe000e100

0800354c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	6039      	str	r1, [r7, #0]
 8003556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355c:	2b00      	cmp	r3, #0
 800355e:	db0a      	blt.n	8003576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	b2da      	uxtb	r2, r3
 8003564:	490c      	ldr	r1, [pc, #48]	@ (8003598 <__NVIC_SetPriority+0x4c>)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	0112      	lsls	r2, r2, #4
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	440b      	add	r3, r1
 8003570:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003574:	e00a      	b.n	800358c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4908      	ldr	r1, [pc, #32]	@ (800359c <__NVIC_SetPriority+0x50>)
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	3b04      	subs	r3, #4
 8003584:	0112      	lsls	r2, r2, #4
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	440b      	add	r3, r1
 800358a:	761a      	strb	r2, [r3, #24]
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	e000e100 	.word	0xe000e100
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b089      	sub	sp, #36	@ 0x24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f1c3 0307 	rsb	r3, r3, #7
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	bf28      	it	cs
 80035be:	2304      	movcs	r3, #4
 80035c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	3304      	adds	r3, #4
 80035c6:	2b06      	cmp	r3, #6
 80035c8:	d902      	bls.n	80035d0 <NVIC_EncodePriority+0x30>
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	3b03      	subs	r3, #3
 80035ce:	e000      	b.n	80035d2 <NVIC_EncodePriority+0x32>
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43da      	mvns	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	401a      	ands	r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	43d9      	mvns	r1, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f8:	4313      	orrs	r3, r2
         );
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3724      	adds	r7, #36	@ 0x24
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff ff4c 	bl	80034ac <__NVIC_SetPriorityGrouping>
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800362e:	f7ff ff61 	bl	80034f4 <__NVIC_GetPriorityGrouping>
 8003632:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	6978      	ldr	r0, [r7, #20]
 800363a:	f7ff ffb1 	bl	80035a0 <NVIC_EncodePriority>
 800363e:	4602      	mov	r2, r0
 8003640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003644:	4611      	mov	r1, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff ff80 	bl	800354c <__NVIC_SetPriority>
}
 800364c:	bf00      	nop
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800365e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff ff54 	bl	8003510 <__NVIC_EnableIRQ>
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e098      	b.n	80037b4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	4b4d      	ldr	r3, [pc, #308]	@ (80037c0 <HAL_DMA_Init+0x150>)
 800368a:	429a      	cmp	r2, r3
 800368c:	d80f      	bhi.n	80036ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	4b4b      	ldr	r3, [pc, #300]	@ (80037c4 <HAL_DMA_Init+0x154>)
 8003696:	4413      	add	r3, r2
 8003698:	4a4b      	ldr	r2, [pc, #300]	@ (80037c8 <HAL_DMA_Init+0x158>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	091b      	lsrs	r3, r3, #4
 80036a0:	009a      	lsls	r2, r3, #2
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a48      	ldr	r2, [pc, #288]	@ (80037cc <HAL_DMA_Init+0x15c>)
 80036aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80036ac:	e00e      	b.n	80036cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b46      	ldr	r3, [pc, #280]	@ (80037d0 <HAL_DMA_Init+0x160>)
 80036b6:	4413      	add	r3, r2
 80036b8:	4a43      	ldr	r2, [pc, #268]	@ (80037c8 <HAL_DMA_Init+0x158>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	091b      	lsrs	r3, r3, #4
 80036c0:	009a      	lsls	r2, r3, #2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a42      	ldr	r2, [pc, #264]	@ (80037d4 <HAL_DMA_Init+0x164>)
 80036ca:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80036e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003708:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003726:	d039      	beq.n	800379c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	4a27      	ldr	r2, [pc, #156]	@ (80037cc <HAL_DMA_Init+0x15c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d11a      	bne.n	8003768 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003732:	4b29      	ldr	r3, [pc, #164]	@ (80037d8 <HAL_DMA_Init+0x168>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373a:	f003 031c 	and.w	r3, r3, #28
 800373e:	210f      	movs	r1, #15
 8003740:	fa01 f303 	lsl.w	r3, r1, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	4924      	ldr	r1, [pc, #144]	@ (80037d8 <HAL_DMA_Init+0x168>)
 8003748:	4013      	ands	r3, r2
 800374a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800374c:	4b22      	ldr	r3, [pc, #136]	@ (80037d8 <HAL_DMA_Init+0x168>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003758:	f003 031c 	and.w	r3, r3, #28
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	491d      	ldr	r1, [pc, #116]	@ (80037d8 <HAL_DMA_Init+0x168>)
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]
 8003766:	e019      	b.n	800379c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003768:	4b1c      	ldr	r3, [pc, #112]	@ (80037dc <HAL_DMA_Init+0x16c>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003770:	f003 031c 	and.w	r3, r3, #28
 8003774:	210f      	movs	r1, #15
 8003776:	fa01 f303 	lsl.w	r3, r1, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	4917      	ldr	r1, [pc, #92]	@ (80037dc <HAL_DMA_Init+0x16c>)
 800377e:	4013      	ands	r3, r2
 8003780:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003782:	4b16      	ldr	r3, [pc, #88]	@ (80037dc <HAL_DMA_Init+0x16c>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6859      	ldr	r1, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378e:	f003 031c 	and.w	r3, r3, #28
 8003792:	fa01 f303 	lsl.w	r3, r1, r3
 8003796:	4911      	ldr	r1, [pc, #68]	@ (80037dc <HAL_DMA_Init+0x16c>)
 8003798:	4313      	orrs	r3, r2
 800379a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	40020407 	.word	0x40020407
 80037c4:	bffdfff8 	.word	0xbffdfff8
 80037c8:	cccccccd 	.word	0xcccccccd
 80037cc:	40020000 	.word	0x40020000
 80037d0:	bffdfbf8 	.word	0xbffdfbf8
 80037d4:	40020400 	.word	0x40020400
 80037d8:	400200a8 	.word	0x400200a8
 80037dc:	400204a8 	.word	0x400204a8

080037e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_DMA_Start_IT+0x20>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e04b      	b.n	8003898 <HAL_DMA_Start_IT+0xb8>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	d13a      	bne.n	800388a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f95f 	bl	8003afc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 020e 	orr.w	r2, r2, #14
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e00f      	b.n	8003878 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0204 	bic.w	r2, r2, #4
 8003866:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 020a 	orr.w	r2, r2, #10
 8003876:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	e005      	b.n	8003896 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003892:	2302      	movs	r3, #2
 8003894:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003896:	7dfb      	ldrb	r3, [r7, #23]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d008      	beq.n	80038ca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2204      	movs	r2, #4
 80038bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e022      	b.n	8003910 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 020e 	bic.w	r2, r2, #14
 80038d8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0201 	bic.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ee:	f003 021c 	and.w	r2, r3, #28
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	2101      	movs	r1, #1
 80038f8:	fa01 f202 	lsl.w	r2, r1, r2
 80038fc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800390e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003910:	4618      	mov	r0, r3
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d005      	beq.n	8003940 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2204      	movs	r2, #4
 8003938:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
 800393e:	e029      	b.n	8003994 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 020e 	bic.w	r2, r2, #14
 800394e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003964:	f003 021c 	and.w	r2, r3, #28
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396c:	2101      	movs	r1, #1
 800396e:	fa01 f202 	lsl.w	r2, r1, r2
 8003972:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	4798      	blx	r3
    }
  }
  return status;
 8003994:	7bfb      	ldrb	r3, [r7, #15]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ba:	f003 031c 	and.w	r3, r3, #28
 80039be:	2204      	movs	r2, #4
 80039c0:	409a      	lsls	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d026      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x7a>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d021      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d107      	bne.n	80039f2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0204 	bic.w	r2, r2, #4
 80039f0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	f003 021c 	and.w	r2, r3, #28
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	2104      	movs	r1, #4
 8003a00:	fa01 f202 	lsl.w	r2, r1, r2
 8003a04:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d071      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a16:	e06c      	b.n	8003af2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1c:	f003 031c 	and.w	r3, r3, #28
 8003a20:	2202      	movs	r2, #2
 8003a22:	409a      	lsls	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d02e      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xec>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d029      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10b      	bne.n	8003a5c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 020a 	bic.w	r2, r2, #10
 8003a52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a60:	f003 021c 	and.w	r2, r3, #28
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	2102      	movs	r1, #2
 8003a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d038      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a88:	e033      	b.n	8003af2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	f003 031c 	and.w	r3, r3, #28
 8003a92:	2208      	movs	r2, #8
 8003a94:	409a      	lsls	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d02a      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x156>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d025      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 020e 	bic.w	r2, r2, #14
 8003ab6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003abc:	f003 021c 	and.w	r2, r3, #28
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d004      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003af2:	bf00      	nop
 8003af4:	bf00      	nop
}
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0e:	f003 021c 	and.w	r2, r3, #28
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	2101      	movs	r1, #1
 8003b18:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d108      	bne.n	8003b40 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b3e:	e007      	b.n	8003b50 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	60da      	str	r2, [r3, #12]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b6a:	e166      	b.n	8003e3a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	2101      	movs	r1, #1
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	fa01 f303 	lsl.w	r3, r1, r3
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8158 	beq.w	8003e34 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d005      	beq.n	8003b9c <HAL_GPIO_Init+0x40>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d130      	bne.n	8003bfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4013      	ands	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	091b      	lsrs	r3, r3, #4
 8003be8:	f003 0201 	and.w	r2, r3, #1
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d017      	beq.n	8003c3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	2203      	movs	r2, #3
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d123      	bne.n	8003c8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	08da      	lsrs	r2, r3, #3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3208      	adds	r2, #8
 8003c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	220f      	movs	r2, #15
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	08da      	lsrs	r2, r3, #3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3208      	adds	r2, #8
 8003c88:	6939      	ldr	r1, [r7, #16]
 8003c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	2203      	movs	r2, #3
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 0203 	and.w	r2, r3, #3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 80b2 	beq.w	8003e34 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd0:	4b61      	ldr	r3, [pc, #388]	@ (8003e58 <HAL_GPIO_Init+0x2fc>)
 8003cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cd4:	4a60      	ldr	r2, [pc, #384]	@ (8003e58 <HAL_GPIO_Init+0x2fc>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cdc:	4b5e      	ldr	r3, [pc, #376]	@ (8003e58 <HAL_GPIO_Init+0x2fc>)
 8003cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ce8:	4a5c      	ldr	r2, [pc, #368]	@ (8003e5c <HAL_GPIO_Init+0x300>)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	089b      	lsrs	r3, r3, #2
 8003cee:	3302      	adds	r3, #2
 8003cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	220f      	movs	r2, #15
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d12:	d02b      	beq.n	8003d6c <HAL_GPIO_Init+0x210>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a52      	ldr	r2, [pc, #328]	@ (8003e60 <HAL_GPIO_Init+0x304>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d025      	beq.n	8003d68 <HAL_GPIO_Init+0x20c>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a51      	ldr	r2, [pc, #324]	@ (8003e64 <HAL_GPIO_Init+0x308>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d01f      	beq.n	8003d64 <HAL_GPIO_Init+0x208>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a50      	ldr	r2, [pc, #320]	@ (8003e68 <HAL_GPIO_Init+0x30c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d019      	beq.n	8003d60 <HAL_GPIO_Init+0x204>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a4f      	ldr	r2, [pc, #316]	@ (8003e6c <HAL_GPIO_Init+0x310>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d013      	beq.n	8003d5c <HAL_GPIO_Init+0x200>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a4e      	ldr	r2, [pc, #312]	@ (8003e70 <HAL_GPIO_Init+0x314>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00d      	beq.n	8003d58 <HAL_GPIO_Init+0x1fc>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a4d      	ldr	r2, [pc, #308]	@ (8003e74 <HAL_GPIO_Init+0x318>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d007      	beq.n	8003d54 <HAL_GPIO_Init+0x1f8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a4c      	ldr	r2, [pc, #304]	@ (8003e78 <HAL_GPIO_Init+0x31c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d101      	bne.n	8003d50 <HAL_GPIO_Init+0x1f4>
 8003d4c:	2307      	movs	r3, #7
 8003d4e:	e00e      	b.n	8003d6e <HAL_GPIO_Init+0x212>
 8003d50:	2308      	movs	r3, #8
 8003d52:	e00c      	b.n	8003d6e <HAL_GPIO_Init+0x212>
 8003d54:	2306      	movs	r3, #6
 8003d56:	e00a      	b.n	8003d6e <HAL_GPIO_Init+0x212>
 8003d58:	2305      	movs	r3, #5
 8003d5a:	e008      	b.n	8003d6e <HAL_GPIO_Init+0x212>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	e006      	b.n	8003d6e <HAL_GPIO_Init+0x212>
 8003d60:	2303      	movs	r3, #3
 8003d62:	e004      	b.n	8003d6e <HAL_GPIO_Init+0x212>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e002      	b.n	8003d6e <HAL_GPIO_Init+0x212>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <HAL_GPIO_Init+0x212>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	f002 0203 	and.w	r2, r2, #3
 8003d74:	0092      	lsls	r2, r2, #2
 8003d76:	4093      	lsls	r3, r2
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d7e:	4937      	ldr	r1, [pc, #220]	@ (8003e5c <HAL_GPIO_Init+0x300>)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	089b      	lsrs	r3, r3, #2
 8003d84:	3302      	adds	r3, #2
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e7c <HAL_GPIO_Init+0x320>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	43db      	mvns	r3, r3
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003db0:	4a32      	ldr	r2, [pc, #200]	@ (8003e7c <HAL_GPIO_Init+0x320>)
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003db6:	4b31      	ldr	r3, [pc, #196]	@ (8003e7c <HAL_GPIO_Init+0x320>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dda:	4a28      	ldr	r2, [pc, #160]	@ (8003e7c <HAL_GPIO_Init+0x320>)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003de0:	4b26      	ldr	r3, [pc, #152]	@ (8003e7c <HAL_GPIO_Init+0x320>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	43db      	mvns	r3, r3
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4013      	ands	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e04:	4a1d      	ldr	r2, [pc, #116]	@ (8003e7c <HAL_GPIO_Init+0x320>)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003e7c <HAL_GPIO_Init+0x320>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	43db      	mvns	r3, r3
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4013      	ands	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e2e:	4a13      	ldr	r2, [pc, #76]	@ (8003e7c <HAL_GPIO_Init+0x320>)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	3301      	adds	r3, #1
 8003e38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f47f ae91 	bne.w	8003b6c <HAL_GPIO_Init+0x10>
  }
}
 8003e4a:	bf00      	nop
 8003e4c:	bf00      	nop
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40010000 	.word	0x40010000
 8003e60:	48000400 	.word	0x48000400
 8003e64:	48000800 	.word	0x48000800
 8003e68:	48000c00 	.word	0x48000c00
 8003e6c:	48001000 	.word	0x48001000
 8003e70:	48001400 	.word	0x48001400
 8003e74:	48001800 	.word	0x48001800
 8003e78:	48001c00 	.word	0x48001c00
 8003e7c:	40010400 	.word	0x40010400

08003e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	807b      	strh	r3, [r7, #2]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e90:	787b      	ldrb	r3, [r7, #1]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e96:	887a      	ldrh	r2, [r7, #2]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e9c:	e002      	b.n	8003ea4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e9e:	887a      	ldrh	r2, [r7, #2]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ec2:	887a      	ldrh	r2, [r7, #2]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	041a      	lsls	r2, r3, #16
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	43d9      	mvns	r1, r3
 8003ece:	887b      	ldrh	r3, [r7, #2]
 8003ed0:	400b      	ands	r3, r1
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	619a      	str	r2, [r3, #24]
}
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003eee:	4b08      	ldr	r3, [pc, #32]	@ (8003f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d006      	beq.n	8003f08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003efa:	4a05      	ldr	r2, [pc, #20]	@ (8003f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f00:	88fb      	ldrh	r3, [r7, #6]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fc fc9c 	bl	8000840 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f08:	bf00      	nop
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40010400 	.word	0x40010400

08003f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e08d      	b.n	8004042 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fd faaa 	bl	8001494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2224      	movs	r2, #36	@ 0x24
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0201 	bic.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d107      	bne.n	8003f8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	e006      	b.n	8003f9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d108      	bne.n	8003fb6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	e007      	b.n	8003fc6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6812      	ldr	r2, [r2, #0]
 8003fd0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fe8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69d9      	ldr	r1, [r3, #28]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1a      	ldr	r2, [r3, #32]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	4608      	mov	r0, r1
 8004056:	4611      	mov	r1, r2
 8004058:	461a      	mov	r2, r3
 800405a:	4603      	mov	r3, r0
 800405c:	817b      	strh	r3, [r7, #10]
 800405e:	460b      	mov	r3, r1
 8004060:	813b      	strh	r3, [r7, #8]
 8004062:	4613      	mov	r3, r2
 8004064:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b20      	cmp	r3, #32
 8004070:	f040 80f9 	bne.w	8004266 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <HAL_I2C_Mem_Write+0x34>
 800407a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004086:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0ed      	b.n	8004268 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_I2C_Mem_Write+0x4e>
 8004096:	2302      	movs	r3, #2
 8004098:	e0e6      	b.n	8004268 <HAL_I2C_Mem_Write+0x21c>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040a2:	f7fd fbdf 	bl	8001864 <HAL_GetTick>
 80040a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	2319      	movs	r3, #25
 80040ae:	2201      	movs	r2, #1
 80040b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 fac3 	bl	8004640 <I2C_WaitOnFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0d1      	b.n	8004268 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2221      	movs	r2, #33	@ 0x21
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2240      	movs	r2, #64	@ 0x40
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a3a      	ldr	r2, [r7, #32]
 80040de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80040e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040ec:	88f8      	ldrh	r0, [r7, #6]
 80040ee:	893a      	ldrh	r2, [r7, #8]
 80040f0:	8979      	ldrh	r1, [r7, #10]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	9301      	str	r3, [sp, #4]
 80040f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	4603      	mov	r3, r0
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f9d3 	bl	80044a8 <I2C_RequestMemoryWrite>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0a9      	b.n	8004268 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	2bff      	cmp	r3, #255	@ 0xff
 800411c:	d90e      	bls.n	800413c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	22ff      	movs	r2, #255	@ 0xff
 8004122:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004128:	b2da      	uxtb	r2, r3
 800412a:	8979      	ldrh	r1, [r7, #10]
 800412c:	2300      	movs	r3, #0
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 fc47 	bl	80049c8 <I2C_TransferConfig>
 800413a:	e00f      	b.n	800415c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414a:	b2da      	uxtb	r2, r3
 800414c:	8979      	ldrh	r1, [r7, #10]
 800414e:	2300      	movs	r3, #0
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 fc36 	bl	80049c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 fac6 	bl	80046f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e07b      	b.n	8004268 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	781a      	ldrb	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d034      	beq.n	8004214 <HAL_I2C_Mem_Write+0x1c8>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d130      	bne.n	8004214 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b8:	2200      	movs	r2, #0
 80041ba:	2180      	movs	r1, #128	@ 0x80
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 fa3f 	bl	8004640 <I2C_WaitOnFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e04d      	b.n	8004268 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2bff      	cmp	r3, #255	@ 0xff
 80041d4:	d90e      	bls.n	80041f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	22ff      	movs	r2, #255	@ 0xff
 80041da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	8979      	ldrh	r1, [r7, #10]
 80041e4:	2300      	movs	r3, #0
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fbeb 	bl	80049c8 <I2C_TransferConfig>
 80041f2:	e00f      	b.n	8004214 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004202:	b2da      	uxtb	r2, r3
 8004204:	8979      	ldrh	r1, [r7, #10]
 8004206:	2300      	movs	r3, #0
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 fbda 	bl	80049c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d19e      	bne.n	800415c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 faac 	bl	8004780 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e01a      	b.n	8004268 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2220      	movs	r2, #32
 8004238:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6859      	ldr	r1, [r3, #4]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4b0a      	ldr	r3, [pc, #40]	@ (8004270 <HAL_I2C_Mem_Write+0x224>)
 8004246:	400b      	ands	r3, r1
 8004248:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	e000      	b.n	8004268 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004266:	2302      	movs	r3, #2
  }
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	fe00e800 	.word	0xfe00e800

08004274 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af02      	add	r7, sp, #8
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	4608      	mov	r0, r1
 800427e:	4611      	mov	r1, r2
 8004280:	461a      	mov	r2, r3
 8004282:	4603      	mov	r3, r0
 8004284:	817b      	strh	r3, [r7, #10]
 8004286:	460b      	mov	r3, r1
 8004288:	813b      	strh	r3, [r7, #8]
 800428a:	4613      	mov	r3, r2
 800428c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b20      	cmp	r3, #32
 8004298:	f040 80fd 	bne.w	8004496 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <HAL_I2C_Mem_Read+0x34>
 80042a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d105      	bne.n	80042b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0f1      	b.n	8004498 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_I2C_Mem_Read+0x4e>
 80042be:	2302      	movs	r3, #2
 80042c0:	e0ea      	b.n	8004498 <HAL_I2C_Mem_Read+0x224>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042ca:	f7fd facb 	bl	8001864 <HAL_GetTick>
 80042ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	2319      	movs	r3, #25
 80042d6:	2201      	movs	r2, #1
 80042d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f9af 	bl	8004640 <I2C_WaitOnFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0d5      	b.n	8004498 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2222      	movs	r2, #34	@ 0x22
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2240      	movs	r2, #64	@ 0x40
 80042f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a3a      	ldr	r2, [r7, #32]
 8004306:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800430c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004314:	88f8      	ldrh	r0, [r7, #6]
 8004316:	893a      	ldrh	r2, [r7, #8]
 8004318:	8979      	ldrh	r1, [r7, #10]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	9301      	str	r3, [sp, #4]
 800431e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	4603      	mov	r3, r0
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f913 	bl	8004550 <I2C_RequestMemoryRead>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0ad      	b.n	8004498 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	2bff      	cmp	r3, #255	@ 0xff
 8004344:	d90e      	bls.n	8004364 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004350:	b2da      	uxtb	r2, r3
 8004352:	8979      	ldrh	r1, [r7, #10]
 8004354:	4b52      	ldr	r3, [pc, #328]	@ (80044a0 <HAL_I2C_Mem_Read+0x22c>)
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 fb33 	bl	80049c8 <I2C_TransferConfig>
 8004362:	e00f      	b.n	8004384 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004372:	b2da      	uxtb	r2, r3
 8004374:	8979      	ldrh	r1, [r7, #10]
 8004376:	4b4a      	ldr	r3, [pc, #296]	@ (80044a0 <HAL_I2C_Mem_Read+0x22c>)
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 fb22 	bl	80049c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438a:	2200      	movs	r2, #0
 800438c:	2104      	movs	r1, #4
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f956 	bl	8004640 <I2C_WaitOnFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e07c      	b.n	8004498 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d034      	beq.n	8004444 <HAL_I2C_Mem_Read+0x1d0>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d130      	bne.n	8004444 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e8:	2200      	movs	r2, #0
 80043ea:	2180      	movs	r1, #128	@ 0x80
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f927 	bl	8004640 <I2C_WaitOnFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e04d      	b.n	8004498 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2bff      	cmp	r3, #255	@ 0xff
 8004404:	d90e      	bls.n	8004424 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2201      	movs	r2, #1
 800440a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004410:	b2da      	uxtb	r2, r3
 8004412:	8979      	ldrh	r1, [r7, #10]
 8004414:	2300      	movs	r3, #0
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fad3 	bl	80049c8 <I2C_TransferConfig>
 8004422:	e00f      	b.n	8004444 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004432:	b2da      	uxtb	r2, r3
 8004434:	8979      	ldrh	r1, [r7, #10]
 8004436:	2300      	movs	r3, #0
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fac2 	bl	80049c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d19a      	bne.n	8004384 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f994 	bl	8004780 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e01a      	b.n	8004498 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2220      	movs	r2, #32
 8004468:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6859      	ldr	r1, [r3, #4]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <HAL_I2C_Mem_Read+0x230>)
 8004476:	400b      	ands	r3, r1
 8004478:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	e000      	b.n	8004498 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004496:	2302      	movs	r3, #2
  }
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	80002400 	.word	0x80002400
 80044a4:	fe00e800 	.word	0xfe00e800

080044a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	4608      	mov	r0, r1
 80044b2:	4611      	mov	r1, r2
 80044b4:	461a      	mov	r2, r3
 80044b6:	4603      	mov	r3, r0
 80044b8:	817b      	strh	r3, [r7, #10]
 80044ba:	460b      	mov	r3, r1
 80044bc:	813b      	strh	r3, [r7, #8]
 80044be:	4613      	mov	r3, r2
 80044c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	8979      	ldrh	r1, [r7, #10]
 80044c8:	4b20      	ldr	r3, [pc, #128]	@ (800454c <I2C_RequestMemoryWrite+0xa4>)
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 fa79 	bl	80049c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d6:	69fa      	ldr	r2, [r7, #28]
 80044d8:	69b9      	ldr	r1, [r7, #24]
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f909 	bl	80046f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e02c      	b.n	8004544 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044ea:	88fb      	ldrh	r3, [r7, #6]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d105      	bne.n	80044fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044f0:	893b      	ldrh	r3, [r7, #8]
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80044fa:	e015      	b.n	8004528 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044fc:	893b      	ldrh	r3, [r7, #8]
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	b29b      	uxth	r3, r3
 8004502:	b2da      	uxtb	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	69b9      	ldr	r1, [r7, #24]
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 f8ef 	bl	80046f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e012      	b.n	8004544 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800451e:	893b      	ldrh	r3, [r7, #8]
 8004520:	b2da      	uxtb	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	2200      	movs	r2, #0
 8004530:	2180      	movs	r1, #128	@ 0x80
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f884 	bl	8004640 <I2C_WaitOnFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	80002000 	.word	0x80002000

08004550 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	4608      	mov	r0, r1
 800455a:	4611      	mov	r1, r2
 800455c:	461a      	mov	r2, r3
 800455e:	4603      	mov	r3, r0
 8004560:	817b      	strh	r3, [r7, #10]
 8004562:	460b      	mov	r3, r1
 8004564:	813b      	strh	r3, [r7, #8]
 8004566:	4613      	mov	r3, r2
 8004568:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800456a:	88fb      	ldrh	r3, [r7, #6]
 800456c:	b2da      	uxtb	r2, r3
 800456e:	8979      	ldrh	r1, [r7, #10]
 8004570:	4b20      	ldr	r3, [pc, #128]	@ (80045f4 <I2C_RequestMemoryRead+0xa4>)
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	2300      	movs	r3, #0
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 fa26 	bl	80049c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800457c:	69fa      	ldr	r2, [r7, #28]
 800457e:	69b9      	ldr	r1, [r7, #24]
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 f8b6 	bl	80046f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e02c      	b.n	80045ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004590:	88fb      	ldrh	r3, [r7, #6]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d105      	bne.n	80045a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004596:	893b      	ldrh	r3, [r7, #8]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	629a      	str	r2, [r3, #40]	@ 0x28
 80045a0:	e015      	b.n	80045ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045a2:	893b      	ldrh	r3, [r7, #8]
 80045a4:	0a1b      	lsrs	r3, r3, #8
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b0:	69fa      	ldr	r2, [r7, #28]
 80045b2:	69b9      	ldr	r1, [r7, #24]
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f89c 	bl	80046f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e012      	b.n	80045ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045c4:	893b      	ldrh	r3, [r7, #8]
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2200      	movs	r2, #0
 80045d6:	2140      	movs	r1, #64	@ 0x40
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f831 	bl	8004640 <I2C_WaitOnFlagUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	80002000 	.word	0x80002000

080045f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b02      	cmp	r3, #2
 800460c:	d103      	bne.n	8004616 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2200      	movs	r2, #0
 8004614:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b01      	cmp	r3, #1
 8004622:	d007      	beq.n	8004634 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	619a      	str	r2, [r3, #24]
  }
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	603b      	str	r3, [r7, #0]
 800464c:	4613      	mov	r3, r2
 800464e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004650:	e03b      	b.n	80046ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	6839      	ldr	r1, [r7, #0]
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f8d6 	bl	8004808 <I2C_IsErrorOccurred>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e041      	b.n	80046ea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800466c:	d02d      	beq.n	80046ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800466e:	f7fd f8f9 	bl	8001864 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d302      	bcc.n	8004684 <I2C_WaitOnFlagUntilTimeout+0x44>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d122      	bne.n	80046ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4013      	ands	r3, r2
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	429a      	cmp	r2, r3
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	461a      	mov	r2, r3
 800469c:	79fb      	ldrb	r3, [r7, #7]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d113      	bne.n	80046ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a6:	f043 0220 	orr.w	r2, r3, #32
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e00f      	b.n	80046ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699a      	ldr	r2, [r3, #24]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	4013      	ands	r3, r2
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	bf0c      	ite	eq
 80046da:	2301      	moveq	r3, #1
 80046dc:	2300      	movne	r3, #0
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d0b4      	beq.n	8004652 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	60f8      	str	r0, [r7, #12]
 80046fa:	60b9      	str	r1, [r7, #8]
 80046fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046fe:	e033      	b.n	8004768 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	68b9      	ldr	r1, [r7, #8]
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f87f 	bl	8004808 <I2C_IsErrorOccurred>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e031      	b.n	8004778 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800471a:	d025      	beq.n	8004768 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800471c:	f7fd f8a2 	bl	8001864 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	429a      	cmp	r2, r3
 800472a:	d302      	bcc.n	8004732 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d11a      	bne.n	8004768 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b02      	cmp	r3, #2
 800473e:	d013      	beq.n	8004768 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e007      	b.n	8004778 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b02      	cmp	r3, #2
 8004774:	d1c4      	bne.n	8004700 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800478c:	e02f      	b.n	80047ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 f838 	bl	8004808 <I2C_IsErrorOccurred>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e02d      	b.n	80047fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a2:	f7fd f85f 	bl	8001864 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d302      	bcc.n	80047b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d11a      	bne.n	80047ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d013      	beq.n	80047ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ca:	f043 0220 	orr.w	r2, r3, #32
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e007      	b.n	80047fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	d1c8      	bne.n	800478e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b08a      	sub	sp, #40	@ 0x28
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b00      	cmp	r3, #0
 8004832:	d068      	beq.n	8004906 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2210      	movs	r2, #16
 800483a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800483c:	e049      	b.n	80048d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004844:	d045      	beq.n	80048d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004846:	f7fd f80d 	bl	8001864 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	429a      	cmp	r2, r3
 8004854:	d302      	bcc.n	800485c <I2C_IsErrorOccurred+0x54>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d13a      	bne.n	80048d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004866:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800486e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800487a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800487e:	d121      	bne.n	80048c4 <I2C_IsErrorOccurred+0xbc>
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004886:	d01d      	beq.n	80048c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004888:	7cfb      	ldrb	r3, [r7, #19]
 800488a:	2b20      	cmp	r3, #32
 800488c:	d01a      	beq.n	80048c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800489c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800489e:	f7fc ffe1 	bl	8001864 <HAL_GetTick>
 80048a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048a4:	e00e      	b.n	80048c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048a6:	f7fc ffdd 	bl	8001864 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b19      	cmp	r3, #25
 80048b2:	d907      	bls.n	80048c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	f043 0320 	orr.w	r3, r3, #32
 80048ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80048c2:	e006      	b.n	80048d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d1e9      	bne.n	80048a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d003      	beq.n	80048e8 <I2C_IsErrorOccurred+0xe0>
 80048e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0aa      	beq.n	800483e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80048e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d103      	bne.n	80048f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2220      	movs	r2, #32
 80048f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	f043 0304 	orr.w	r3, r3, #4
 80048fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00b      	beq.n	8004930 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004928:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00b      	beq.n	8004952 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	f043 0308 	orr.w	r3, r3, #8
 8004940:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800494a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00b      	beq.n	8004974 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	f043 0302 	orr.w	r3, r3, #2
 8004962:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800496c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01c      	beq.n	80049b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f7ff fe3b 	bl	80045f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6859      	ldr	r1, [r3, #4]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b0d      	ldr	r3, [pc, #52]	@ (80049c4 <I2C_IsErrorOccurred+0x1bc>)
 800498e:	400b      	ands	r3, r1
 8004990:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	431a      	orrs	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80049b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3728      	adds	r7, #40	@ 0x28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	fe00e800 	.word	0xfe00e800

080049c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	607b      	str	r3, [r7, #4]
 80049d2:	460b      	mov	r3, r1
 80049d4:	817b      	strh	r3, [r7, #10]
 80049d6:	4613      	mov	r3, r2
 80049d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049da:	897b      	ldrh	r3, [r7, #10]
 80049dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049e0:	7a7b      	ldrb	r3, [r7, #9]
 80049e2:	041b      	lsls	r3, r3, #16
 80049e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	0d5b      	lsrs	r3, r3, #21
 8004a02:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004a06:	4b08      	ldr	r3, [pc, #32]	@ (8004a28 <I2C_TransferConfig+0x60>)
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	ea02 0103 	and.w	r1, r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a1a:	bf00      	nop
 8004a1c:	371c      	adds	r7, #28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	03ff63ff 	.word	0x03ff63ff

08004a2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d138      	bne.n	8004ab4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e032      	b.n	8004ab6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2224      	movs	r2, #36	@ 0x24
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0201 	bic.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6819      	ldr	r1, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e000      	b.n	8004ab6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ab4:	2302      	movs	r3, #2
  }
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b085      	sub	sp, #20
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d139      	bne.n	8004b4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e033      	b.n	8004b4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2224      	movs	r2, #36	@ 0x24
 8004af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0201 	bic.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e000      	b.n	8004b4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b4c:	2302      	movs	r3, #2
  }
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
	...

08004b5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004b60:	4b04      	ldr	r3, [pc, #16]	@ (8004b74 <HAL_PWREx_GetVoltageRange+0x18>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40007000 	.word	0x40007000

08004b78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b86:	d130      	bne.n	8004bea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b88:	4b23      	ldr	r3, [pc, #140]	@ (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b94:	d038      	beq.n	8004c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b96:	4b20      	ldr	r3, [pc, #128]	@ (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ba0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ba4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2232      	movs	r2, #50	@ 0x32
 8004bac:	fb02 f303 	mul.w	r3, r2, r3
 8004bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	0c9b      	lsrs	r3, r3, #18
 8004bb8:	3301      	adds	r3, #1
 8004bba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bbc:	e002      	b.n	8004bc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bc4:	4b14      	ldr	r3, [pc, #80]	@ (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bd0:	d102      	bne.n	8004bd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f2      	bne.n	8004bbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004be4:	d110      	bne.n	8004c08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e00f      	b.n	8004c0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bea:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bf6:	d007      	beq.n	8004c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004bf8:	4b07      	ldr	r3, [pc, #28]	@ (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c00:	4a05      	ldr	r2, [pc, #20]	@ (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40007000 	.word	0x40007000
 8004c1c:	20000000 	.word	0x20000000
 8004c20:	431bde83 	.word	0x431bde83

08004c24 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d102      	bne.n	8004c38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	f000 bc08 	b.w	8005448 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c38:	4b96      	ldr	r3, [pc, #600]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 030c 	and.w	r3, r3, #12
 8004c40:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c42:	4b94      	ldr	r3, [pc, #592]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80e4 	beq.w	8004e22 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <HAL_RCC_OscConfig+0x4c>
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b0c      	cmp	r3, #12
 8004c64:	f040 808b 	bne.w	8004d7e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	f040 8087 	bne.w	8004d7e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c70:	4b88      	ldr	r3, [pc, #544]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_RCC_OscConfig+0x64>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e3df      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1a      	ldr	r2, [r3, #32]
 8004c8c:	4b81      	ldr	r3, [pc, #516]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d004      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x7e>
 8004c98:	4b7e      	ldr	r3, [pc, #504]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ca0:	e005      	b.n	8004cae <HAL_RCC_OscConfig+0x8a>
 8004ca2:	4b7c      	ldr	r3, [pc, #496]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d223      	bcs.n	8004cfa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fdc4 	bl	8005844 <RCC_SetFlashLatencyFromMSIRange>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e3c0      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cc6:	4b73      	ldr	r3, [pc, #460]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a72      	ldr	r2, [pc, #456]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004ccc:	f043 0308 	orr.w	r3, r3, #8
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	4b70      	ldr	r3, [pc, #448]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	496d      	ldr	r1, [pc, #436]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ce4:	4b6b      	ldr	r3, [pc, #428]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	4968      	ldr	r1, [pc, #416]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	604b      	str	r3, [r1, #4]
 8004cf8:	e025      	b.n	8004d46 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cfa:	4b66      	ldr	r3, [pc, #408]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a65      	ldr	r2, [pc, #404]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d00:	f043 0308 	orr.w	r3, r3, #8
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	4b63      	ldr	r3, [pc, #396]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	4960      	ldr	r1, [pc, #384]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d18:	4b5e      	ldr	r3, [pc, #376]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	495b      	ldr	r1, [pc, #364]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fd84 	bl	8005844 <RCC_SetFlashLatencyFromMSIRange>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e380      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d46:	f000 fc87 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	4b51      	ldr	r3, [pc, #324]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	091b      	lsrs	r3, r3, #4
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	4950      	ldr	r1, [pc, #320]	@ (8004e98 <HAL_RCC_OscConfig+0x274>)
 8004d58:	5ccb      	ldrb	r3, [r1, r3]
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d62:	4a4e      	ldr	r2, [pc, #312]	@ (8004e9c <HAL_RCC_OscConfig+0x278>)
 8004d64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004d66:	4b4e      	ldr	r3, [pc, #312]	@ (8004ea0 <HAL_RCC_OscConfig+0x27c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fc fc58 	bl	8001620 <HAL_InitTick>
 8004d70:	4603      	mov	r3, r0
 8004d72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d052      	beq.n	8004e20 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	e364      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d032      	beq.n	8004dec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d86:	4b43      	ldr	r3, [pc, #268]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a42      	ldr	r2, [pc, #264]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d8c:	f043 0301 	orr.w	r3, r3, #1
 8004d90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d92:	f7fc fd67 	bl	8001864 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d9a:	f7fc fd63 	bl	8001864 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e34d      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004dac:	4b39      	ldr	r3, [pc, #228]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004db8:	4b36      	ldr	r3, [pc, #216]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a35      	ldr	r2, [pc, #212]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dbe:	f043 0308 	orr.w	r3, r3, #8
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	4b33      	ldr	r3, [pc, #204]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	4930      	ldr	r1, [pc, #192]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	492b      	ldr	r1, [pc, #172]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	604b      	str	r3, [r1, #4]
 8004dea:	e01a      	b.n	8004e22 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004dec:	4b29      	ldr	r3, [pc, #164]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a28      	ldr	r2, [pc, #160]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004df8:	f7fc fd34 	bl	8001864 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e00:	f7fc fd30 	bl	8001864 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e31a      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e12:	4b20      	ldr	r3, [pc, #128]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f0      	bne.n	8004e00 <HAL_RCC_OscConfig+0x1dc>
 8004e1e:	e000      	b.n	8004e22 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d073      	beq.n	8004f16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d005      	beq.n	8004e40 <HAL_RCC_OscConfig+0x21c>
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	2b0c      	cmp	r3, #12
 8004e38:	d10e      	bne.n	8004e58 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d10b      	bne.n	8004e58 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e40:	4b14      	ldr	r3, [pc, #80]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d063      	beq.n	8004f14 <HAL_RCC_OscConfig+0x2f0>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d15f      	bne.n	8004f14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e2f7      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e60:	d106      	bne.n	8004e70 <HAL_RCC_OscConfig+0x24c>
 8004e62:	4b0c      	ldr	r3, [pc, #48]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a0b      	ldr	r2, [pc, #44]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	e025      	b.n	8004ebc <HAL_RCC_OscConfig+0x298>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e78:	d114      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x280>
 8004e7a:	4b06      	ldr	r3, [pc, #24]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a05      	ldr	r2, [pc, #20]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	4b03      	ldr	r3, [pc, #12]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a02      	ldr	r2, [pc, #8]	@ (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	e013      	b.n	8004ebc <HAL_RCC_OscConfig+0x298>
 8004e94:	40021000 	.word	0x40021000
 8004e98:	0800ab10 	.word	0x0800ab10
 8004e9c:	20000000 	.word	0x20000000
 8004ea0:	20000004 	.word	0x20000004
 8004ea4:	4ba0      	ldr	r3, [pc, #640]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a9f      	ldr	r2, [pc, #636]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8004eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	4b9d      	ldr	r3, [pc, #628]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a9c      	ldr	r2, [pc, #624]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8004eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d013      	beq.n	8004eec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec4:	f7fc fcce 	bl	8001864 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ecc:	f7fc fcca 	bl	8001864 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b64      	cmp	r3, #100	@ 0x64
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e2b4      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ede:	4b92      	ldr	r3, [pc, #584]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f0      	beq.n	8004ecc <HAL_RCC_OscConfig+0x2a8>
 8004eea:	e014      	b.n	8004f16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eec:	f7fc fcba 	bl	8001864 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef4:	f7fc fcb6 	bl	8001864 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b64      	cmp	r3, #100	@ 0x64
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e2a0      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f06:	4b88      	ldr	r3, [pc, #544]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x2d0>
 8004f12:	e000      	b.n	8004f16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d060      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d005      	beq.n	8004f34 <HAL_RCC_OscConfig+0x310>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b0c      	cmp	r3, #12
 8004f2c:	d119      	bne.n	8004f62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d116      	bne.n	8004f62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f34:	4b7c      	ldr	r3, [pc, #496]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <HAL_RCC_OscConfig+0x328>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e27d      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f4c:	4b76      	ldr	r3, [pc, #472]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	061b      	lsls	r3, r3, #24
 8004f5a:	4973      	ldr	r1, [pc, #460]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f60:	e040      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d023      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f6a:	4b6f      	ldr	r3, [pc, #444]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a6e      	ldr	r2, [pc, #440]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f76:	f7fc fc75 	bl	8001864 <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f7e:	f7fc fc71 	bl	8001864 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e25b      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f90:	4b65      	ldr	r3, [pc, #404]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0f0      	beq.n	8004f7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9c:	4b62      	ldr	r3, [pc, #392]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	061b      	lsls	r3, r3, #24
 8004faa:	495f      	ldr	r1, [pc, #380]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	604b      	str	r3, [r1, #4]
 8004fb0:	e018      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fb2:	4b5d      	ldr	r3, [pc, #372]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a5c      	ldr	r2, [pc, #368]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8004fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbe:	f7fc fc51 	bl	8001864 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fc6:	f7fc fc4d 	bl	8001864 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e237      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fd8:	4b53      	ldr	r3, [pc, #332]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1f0      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d03c      	beq.n	800506a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01c      	beq.n	8005032 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ff8:	4b4b      	ldr	r3, [pc, #300]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8004ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ffe:	4a4a      	ldr	r2, [pc, #296]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005008:	f7fc fc2c 	bl	8001864 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005010:	f7fc fc28 	bl	8001864 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e212      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005022:	4b41      	ldr	r3, [pc, #260]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8005024:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0ef      	beq.n	8005010 <HAL_RCC_OscConfig+0x3ec>
 8005030:	e01b      	b.n	800506a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005032:	4b3d      	ldr	r3, [pc, #244]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8005034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005038:	4a3b      	ldr	r2, [pc, #236]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 800503a:	f023 0301 	bic.w	r3, r3, #1
 800503e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005042:	f7fc fc0f 	bl	8001864 <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800504a:	f7fc fc0b 	bl	8001864 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e1f5      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800505c:	4b32      	ldr	r3, [pc, #200]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 800505e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1ef      	bne.n	800504a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 80a6 	beq.w	80051c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005078:	2300      	movs	r3, #0
 800507a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800507c:	4b2a      	ldr	r3, [pc, #168]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 800507e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10d      	bne.n	80050a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005088:	4b27      	ldr	r3, [pc, #156]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 800508a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508c:	4a26      	ldr	r2, [pc, #152]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 800508e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005092:	6593      	str	r3, [r2, #88]	@ 0x58
 8005094:	4b24      	ldr	r3, [pc, #144]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8005096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800509c:	60bb      	str	r3, [r7, #8]
 800509e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a0:	2301      	movs	r3, #1
 80050a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050a4:	4b21      	ldr	r3, [pc, #132]	@ (800512c <HAL_RCC_OscConfig+0x508>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d118      	bne.n	80050e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050b0:	4b1e      	ldr	r3, [pc, #120]	@ (800512c <HAL_RCC_OscConfig+0x508>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1d      	ldr	r2, [pc, #116]	@ (800512c <HAL_RCC_OscConfig+0x508>)
 80050b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050bc:	f7fc fbd2 	bl	8001864 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c4:	f7fc fbce 	bl	8001864 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e1b8      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050d6:	4b15      	ldr	r3, [pc, #84]	@ (800512c <HAL_RCC_OscConfig+0x508>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0f0      	beq.n	80050c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d108      	bne.n	80050fc <HAL_RCC_OscConfig+0x4d8>
 80050ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 80050ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f0:	4a0d      	ldr	r2, [pc, #52]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050fa:	e029      	b.n	8005150 <HAL_RCC_OscConfig+0x52c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b05      	cmp	r3, #5
 8005102:	d115      	bne.n	8005130 <HAL_RCC_OscConfig+0x50c>
 8005104:	4b08      	ldr	r3, [pc, #32]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800510a:	4a07      	ldr	r2, [pc, #28]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 800510c:	f043 0304 	orr.w	r3, r3, #4
 8005110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005114:	4b04      	ldr	r3, [pc, #16]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 8005116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800511a:	4a03      	ldr	r2, [pc, #12]	@ (8005128 <HAL_RCC_OscConfig+0x504>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005124:	e014      	b.n	8005150 <HAL_RCC_OscConfig+0x52c>
 8005126:	bf00      	nop
 8005128:	40021000 	.word	0x40021000
 800512c:	40007000 	.word	0x40007000
 8005130:	4b9d      	ldr	r3, [pc, #628]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005136:	4a9c      	ldr	r2, [pc, #624]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 8005138:	f023 0301 	bic.w	r3, r3, #1
 800513c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005140:	4b99      	ldr	r3, [pc, #612]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005146:	4a98      	ldr	r2, [pc, #608]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 8005148:	f023 0304 	bic.w	r3, r3, #4
 800514c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d016      	beq.n	8005186 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005158:	f7fc fb84 	bl	8001864 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800515e:	e00a      	b.n	8005176 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005160:	f7fc fb80 	bl	8001864 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800516e:	4293      	cmp	r3, r2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e168      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005176:	4b8c      	ldr	r3, [pc, #560]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0ed      	beq.n	8005160 <HAL_RCC_OscConfig+0x53c>
 8005184:	e015      	b.n	80051b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005186:	f7fc fb6d 	bl	8001864 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800518c:	e00a      	b.n	80051a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800518e:	f7fc fb69 	bl	8001864 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800519c:	4293      	cmp	r3, r2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e151      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051a4:	4b80      	ldr	r3, [pc, #512]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1ed      	bne.n	800518e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051b2:	7ffb      	ldrb	r3, [r7, #31]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d105      	bne.n	80051c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b8:	4b7b      	ldr	r3, [pc, #492]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 80051ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051bc:	4a7a      	ldr	r2, [pc, #488]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 80051be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0320 	and.w	r3, r3, #32
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d03c      	beq.n	800524a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01c      	beq.n	8005212 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051d8:	4b73      	ldr	r3, [pc, #460]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 80051da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051de:	4a72      	ldr	r2, [pc, #456]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e8:	f7fc fb3c 	bl	8001864 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051f0:	f7fc fb38 	bl	8001864 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e122      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005202:	4b69      	ldr	r3, [pc, #420]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 8005204:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0ef      	beq.n	80051f0 <HAL_RCC_OscConfig+0x5cc>
 8005210:	e01b      	b.n	800524a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005212:	4b65      	ldr	r3, [pc, #404]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 8005214:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005218:	4a63      	ldr	r2, [pc, #396]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 800521a:	f023 0301 	bic.w	r3, r3, #1
 800521e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005222:	f7fc fb1f 	bl	8001864 <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800522a:	f7fc fb1b 	bl	8001864 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e105      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800523c:	4b5a      	ldr	r3, [pc, #360]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 800523e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1ef      	bne.n	800522a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 80f9 	beq.w	8005446 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005258:	2b02      	cmp	r3, #2
 800525a:	f040 80cf 	bne.w	80053fc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800525e:	4b52      	ldr	r3, [pc, #328]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f003 0203 	and.w	r2, r3, #3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526e:	429a      	cmp	r2, r3
 8005270:	d12c      	bne.n	80052cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527c:	3b01      	subs	r3, #1
 800527e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005280:	429a      	cmp	r2, r3
 8005282:	d123      	bne.n	80052cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800528e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005290:	429a      	cmp	r2, r3
 8005292:	d11b      	bne.n	80052cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d113      	bne.n	80052cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ae:	085b      	lsrs	r3, r3, #1
 80052b0:	3b01      	subs	r3, #1
 80052b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d109      	bne.n	80052cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c2:	085b      	lsrs	r3, r3, #1
 80052c4:	3b01      	subs	r3, #1
 80052c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d071      	beq.n	80053b0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b0c      	cmp	r3, #12
 80052d0:	d068      	beq.n	80053a4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80052d2:	4b35      	ldr	r3, [pc, #212]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d105      	bne.n	80052ea <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80052de:	4b32      	ldr	r3, [pc, #200]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e0ac      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80052ee:	4b2e      	ldr	r3, [pc, #184]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a2d      	ldr	r2, [pc, #180]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 80052f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052fa:	f7fc fab3 	bl	8001864 <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005302:	f7fc faaf 	bl	8001864 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e099      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005314:	4b24      	ldr	r3, [pc, #144]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1f0      	bne.n	8005302 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005320:	4b21      	ldr	r3, [pc, #132]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	4b21      	ldr	r3, [pc, #132]	@ (80053ac <HAL_RCC_OscConfig+0x788>)
 8005326:	4013      	ands	r3, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005330:	3a01      	subs	r2, #1
 8005332:	0112      	lsls	r2, r2, #4
 8005334:	4311      	orrs	r1, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800533a:	0212      	lsls	r2, r2, #8
 800533c:	4311      	orrs	r1, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005342:	0852      	lsrs	r2, r2, #1
 8005344:	3a01      	subs	r2, #1
 8005346:	0552      	lsls	r2, r2, #21
 8005348:	4311      	orrs	r1, r2
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800534e:	0852      	lsrs	r2, r2, #1
 8005350:	3a01      	subs	r2, #1
 8005352:	0652      	lsls	r2, r2, #25
 8005354:	4311      	orrs	r1, r2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800535a:	06d2      	lsls	r2, r2, #27
 800535c:	430a      	orrs	r2, r1
 800535e:	4912      	ldr	r1, [pc, #72]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 8005360:	4313      	orrs	r3, r2
 8005362:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005364:	4b10      	ldr	r3, [pc, #64]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a0f      	ldr	r2, [pc, #60]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 800536a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800536e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005370:	4b0d      	ldr	r3, [pc, #52]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	4a0c      	ldr	r2, [pc, #48]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 8005376:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800537a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800537c:	f7fc fa72 	bl	8001864 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005384:	f7fc fa6e 	bl	8001864 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e058      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005396:	4b04      	ldr	r3, [pc, #16]	@ (80053a8 <HAL_RCC_OscConfig+0x784>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f0      	beq.n	8005384 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053a2:	e050      	b.n	8005446 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e04f      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
 80053a8:	40021000 	.word	0x40021000
 80053ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053b0:	4b27      	ldr	r3, [pc, #156]	@ (8005450 <HAL_RCC_OscConfig+0x82c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d144      	bne.n	8005446 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80053bc:	4b24      	ldr	r3, [pc, #144]	@ (8005450 <HAL_RCC_OscConfig+0x82c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a23      	ldr	r2, [pc, #140]	@ (8005450 <HAL_RCC_OscConfig+0x82c>)
 80053c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053c8:	4b21      	ldr	r3, [pc, #132]	@ (8005450 <HAL_RCC_OscConfig+0x82c>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4a20      	ldr	r2, [pc, #128]	@ (8005450 <HAL_RCC_OscConfig+0x82c>)
 80053ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053d4:	f7fc fa46 	bl	8001864 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053dc:	f7fc fa42 	bl	8001864 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e02c      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ee:	4b18      	ldr	r3, [pc, #96]	@ (8005450 <HAL_RCC_OscConfig+0x82c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0x7b8>
 80053fa:	e024      	b.n	8005446 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b0c      	cmp	r3, #12
 8005400:	d01f      	beq.n	8005442 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005402:	4b13      	ldr	r3, [pc, #76]	@ (8005450 <HAL_RCC_OscConfig+0x82c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a12      	ldr	r2, [pc, #72]	@ (8005450 <HAL_RCC_OscConfig+0x82c>)
 8005408:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800540c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540e:	f7fc fa29 	bl	8001864 <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005414:	e008      	b.n	8005428 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005416:	f7fc fa25 	bl	8001864 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e00f      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005428:	4b09      	ldr	r3, [pc, #36]	@ (8005450 <HAL_RCC_OscConfig+0x82c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1f0      	bne.n	8005416 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005434:	4b06      	ldr	r3, [pc, #24]	@ (8005450 <HAL_RCC_OscConfig+0x82c>)
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	4905      	ldr	r1, [pc, #20]	@ (8005450 <HAL_RCC_OscConfig+0x82c>)
 800543a:	4b06      	ldr	r3, [pc, #24]	@ (8005454 <HAL_RCC_OscConfig+0x830>)
 800543c:	4013      	ands	r3, r2
 800543e:	60cb      	str	r3, [r1, #12]
 8005440:	e001      	b.n	8005446 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3720      	adds	r7, #32
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40021000 	.word	0x40021000
 8005454:	feeefffc 	.word	0xfeeefffc

08005458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e0e7      	b.n	800563c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800546c:	4b75      	ldr	r3, [pc, #468]	@ (8005644 <HAL_RCC_ClockConfig+0x1ec>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d910      	bls.n	800549c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547a:	4b72      	ldr	r3, [pc, #456]	@ (8005644 <HAL_RCC_ClockConfig+0x1ec>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f023 0207 	bic.w	r2, r3, #7
 8005482:	4970      	ldr	r1, [pc, #448]	@ (8005644 <HAL_RCC_ClockConfig+0x1ec>)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	4313      	orrs	r3, r2
 8005488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800548a:	4b6e      	ldr	r3, [pc, #440]	@ (8005644 <HAL_RCC_ClockConfig+0x1ec>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d001      	beq.n	800549c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e0cf      	b.n	800563c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d010      	beq.n	80054ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	4b66      	ldr	r3, [pc, #408]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d908      	bls.n	80054ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054b8:	4b63      	ldr	r3, [pc, #396]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	4960      	ldr	r1, [pc, #384]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d04c      	beq.n	8005570 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d107      	bne.n	80054ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054de:	4b5a      	ldr	r3, [pc, #360]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d121      	bne.n	800552e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e0a6      	b.n	800563c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d107      	bne.n	8005506 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054f6:	4b54      	ldr	r3, [pc, #336]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d115      	bne.n	800552e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e09a      	b.n	800563c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d107      	bne.n	800551e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800550e:	4b4e      	ldr	r3, [pc, #312]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d109      	bne.n	800552e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e08e      	b.n	800563c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800551e:	4b4a      	ldr	r3, [pc, #296]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e086      	b.n	800563c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800552e:	4b46      	ldr	r3, [pc, #280]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f023 0203 	bic.w	r2, r3, #3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	4943      	ldr	r1, [pc, #268]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 800553c:	4313      	orrs	r3, r2
 800553e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005540:	f7fc f990 	bl	8001864 <HAL_GetTick>
 8005544:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005546:	e00a      	b.n	800555e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005548:	f7fc f98c 	bl	8001864 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005556:	4293      	cmp	r3, r2
 8005558:	d901      	bls.n	800555e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e06e      	b.n	800563c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800555e:	4b3a      	ldr	r3, [pc, #232]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 020c 	and.w	r2, r3, #12
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	429a      	cmp	r2, r3
 800556e:	d1eb      	bne.n	8005548 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d010      	beq.n	800559e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	4b31      	ldr	r3, [pc, #196]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005588:	429a      	cmp	r2, r3
 800558a:	d208      	bcs.n	800559e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800558c:	4b2e      	ldr	r3, [pc, #184]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	492b      	ldr	r1, [pc, #172]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 800559a:	4313      	orrs	r3, r2
 800559c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800559e:	4b29      	ldr	r3, [pc, #164]	@ (8005644 <HAL_RCC_ClockConfig+0x1ec>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d210      	bcs.n	80055ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ac:	4b25      	ldr	r3, [pc, #148]	@ (8005644 <HAL_RCC_ClockConfig+0x1ec>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f023 0207 	bic.w	r2, r3, #7
 80055b4:	4923      	ldr	r1, [pc, #140]	@ (8005644 <HAL_RCC_ClockConfig+0x1ec>)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055bc:	4b21      	ldr	r3, [pc, #132]	@ (8005644 <HAL_RCC_ClockConfig+0x1ec>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d001      	beq.n	80055ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e036      	b.n	800563c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d008      	beq.n	80055ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055da:	4b1b      	ldr	r3, [pc, #108]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	4918      	ldr	r1, [pc, #96]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0308 	and.w	r3, r3, #8
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d009      	beq.n	800560c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055f8:	4b13      	ldr	r3, [pc, #76]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	4910      	ldr	r1, [pc, #64]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 8005608:	4313      	orrs	r3, r2
 800560a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800560c:	f000 f824 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 8005610:	4602      	mov	r2, r0
 8005612:	4b0d      	ldr	r3, [pc, #52]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	091b      	lsrs	r3, r3, #4
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	490b      	ldr	r1, [pc, #44]	@ (800564c <HAL_RCC_ClockConfig+0x1f4>)
 800561e:	5ccb      	ldrb	r3, [r1, r3]
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	fa22 f303 	lsr.w	r3, r2, r3
 8005628:	4a09      	ldr	r2, [pc, #36]	@ (8005650 <HAL_RCC_ClockConfig+0x1f8>)
 800562a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800562c:	4b09      	ldr	r3, [pc, #36]	@ (8005654 <HAL_RCC_ClockConfig+0x1fc>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4618      	mov	r0, r3
 8005632:	f7fb fff5 	bl	8001620 <HAL_InitTick>
 8005636:	4603      	mov	r3, r0
 8005638:	72fb      	strb	r3, [r7, #11]

  return status;
 800563a:	7afb      	ldrb	r3, [r7, #11]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40022000 	.word	0x40022000
 8005648:	40021000 	.word	0x40021000
 800564c:	0800ab10 	.word	0x0800ab10
 8005650:	20000000 	.word	0x20000000
 8005654:	20000004 	.word	0x20000004

08005658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005658:	b480      	push	{r7}
 800565a:	b089      	sub	sp, #36	@ 0x24
 800565c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	61fb      	str	r3, [r7, #28]
 8005662:	2300      	movs	r3, #0
 8005664:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005666:	4b3e      	ldr	r3, [pc, #248]	@ (8005760 <HAL_RCC_GetSysClockFreq+0x108>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 030c 	and.w	r3, r3, #12
 800566e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005670:	4b3b      	ldr	r3, [pc, #236]	@ (8005760 <HAL_RCC_GetSysClockFreq+0x108>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <HAL_RCC_GetSysClockFreq+0x34>
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	2b0c      	cmp	r3, #12
 8005684:	d121      	bne.n	80056ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d11e      	bne.n	80056ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800568c:	4b34      	ldr	r3, [pc, #208]	@ (8005760 <HAL_RCC_GetSysClockFreq+0x108>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	2b00      	cmp	r3, #0
 8005696:	d107      	bne.n	80056a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005698:	4b31      	ldr	r3, [pc, #196]	@ (8005760 <HAL_RCC_GetSysClockFreq+0x108>)
 800569a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800569e:	0a1b      	lsrs	r3, r3, #8
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	61fb      	str	r3, [r7, #28]
 80056a6:	e005      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80056a8:	4b2d      	ldr	r3, [pc, #180]	@ (8005760 <HAL_RCC_GetSysClockFreq+0x108>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	091b      	lsrs	r3, r3, #4
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80056b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x10c>)
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10d      	bne.n	80056e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056c8:	e00a      	b.n	80056e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d102      	bne.n	80056d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80056d0:	4b25      	ldr	r3, [pc, #148]	@ (8005768 <HAL_RCC_GetSysClockFreq+0x110>)
 80056d2:	61bb      	str	r3, [r7, #24]
 80056d4:	e004      	b.n	80056e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d101      	bne.n	80056e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056dc:	4b23      	ldr	r3, [pc, #140]	@ (800576c <HAL_RCC_GetSysClockFreq+0x114>)
 80056de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	2b0c      	cmp	r3, #12
 80056e4:	d134      	bne.n	8005750 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005760 <HAL_RCC_GetSysClockFreq+0x108>)
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d003      	beq.n	80056fe <HAL_RCC_GetSysClockFreq+0xa6>
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d003      	beq.n	8005704 <HAL_RCC_GetSysClockFreq+0xac>
 80056fc:	e005      	b.n	800570a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80056fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005768 <HAL_RCC_GetSysClockFreq+0x110>)
 8005700:	617b      	str	r3, [r7, #20]
      break;
 8005702:	e005      	b.n	8005710 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005704:	4b19      	ldr	r3, [pc, #100]	@ (800576c <HAL_RCC_GetSysClockFreq+0x114>)
 8005706:	617b      	str	r3, [r7, #20]
      break;
 8005708:	e002      	b.n	8005710 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	617b      	str	r3, [r7, #20]
      break;
 800570e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005710:	4b13      	ldr	r3, [pc, #76]	@ (8005760 <HAL_RCC_GetSysClockFreq+0x108>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	091b      	lsrs	r3, r3, #4
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	3301      	adds	r3, #1
 800571c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800571e:	4b10      	ldr	r3, [pc, #64]	@ (8005760 <HAL_RCC_GetSysClockFreq+0x108>)
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	0a1b      	lsrs	r3, r3, #8
 8005724:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	fb03 f202 	mul.w	r2, r3, r2
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005736:	4b0a      	ldr	r3, [pc, #40]	@ (8005760 <HAL_RCC_GetSysClockFreq+0x108>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	0e5b      	lsrs	r3, r3, #25
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	3301      	adds	r3, #1
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	fbb2 f3f3 	udiv	r3, r2, r3
 800574e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005750:	69bb      	ldr	r3, [r7, #24]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3724      	adds	r7, #36	@ 0x24
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40021000 	.word	0x40021000
 8005764:	0800ab28 	.word	0x0800ab28
 8005768:	00f42400 	.word	0x00f42400
 800576c:	007a1200 	.word	0x007a1200

08005770 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005774:	4b03      	ldr	r3, [pc, #12]	@ (8005784 <HAL_RCC_GetHCLKFreq+0x14>)
 8005776:	681b      	ldr	r3, [r3, #0]
}
 8005778:	4618      	mov	r0, r3
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	20000000 	.word	0x20000000

08005788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800578c:	f7ff fff0 	bl	8005770 <HAL_RCC_GetHCLKFreq>
 8005790:	4602      	mov	r2, r0
 8005792:	4b06      	ldr	r3, [pc, #24]	@ (80057ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	0a1b      	lsrs	r3, r3, #8
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	4904      	ldr	r1, [pc, #16]	@ (80057b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800579e:	5ccb      	ldrb	r3, [r1, r3]
 80057a0:	f003 031f 	and.w	r3, r3, #31
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40021000 	.word	0x40021000
 80057b0:	0800ab20 	.word	0x0800ab20

080057b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80057b8:	f7ff ffda 	bl	8005770 <HAL_RCC_GetHCLKFreq>
 80057bc:	4602      	mov	r2, r0
 80057be:	4b06      	ldr	r3, [pc, #24]	@ (80057d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	0adb      	lsrs	r3, r3, #11
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	4904      	ldr	r1, [pc, #16]	@ (80057dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80057ca:	5ccb      	ldrb	r3, [r1, r3]
 80057cc:	f003 031f 	and.w	r3, r3, #31
 80057d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	40021000 	.word	0x40021000
 80057dc:	0800ab20 	.word	0x0800ab20

080057e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	220f      	movs	r2, #15
 80057ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80057f0:	4b12      	ldr	r3, [pc, #72]	@ (800583c <HAL_RCC_GetClockConfig+0x5c>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 0203 	and.w	r2, r3, #3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80057fc:	4b0f      	ldr	r3, [pc, #60]	@ (800583c <HAL_RCC_GetClockConfig+0x5c>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005808:	4b0c      	ldr	r3, [pc, #48]	@ (800583c <HAL_RCC_GetClockConfig+0x5c>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005814:	4b09      	ldr	r3, [pc, #36]	@ (800583c <HAL_RCC_GetClockConfig+0x5c>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	08db      	lsrs	r3, r3, #3
 800581a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005822:	4b07      	ldr	r3, [pc, #28]	@ (8005840 <HAL_RCC_GetClockConfig+0x60>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0207 	and.w	r2, r3, #7
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	601a      	str	r2, [r3, #0]
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40021000 	.word	0x40021000
 8005840:	40022000 	.word	0x40022000

08005844 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800584c:	2300      	movs	r3, #0
 800584e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005850:	4b2a      	ldr	r3, [pc, #168]	@ (80058fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800585c:	f7ff f97e 	bl	8004b5c <HAL_PWREx_GetVoltageRange>
 8005860:	6178      	str	r0, [r7, #20]
 8005862:	e014      	b.n	800588e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005864:	4b25      	ldr	r3, [pc, #148]	@ (80058fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005868:	4a24      	ldr	r2, [pc, #144]	@ (80058fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800586a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800586e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005870:	4b22      	ldr	r3, [pc, #136]	@ (80058fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800587c:	f7ff f96e 	bl	8004b5c <HAL_PWREx_GetVoltageRange>
 8005880:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005882:	4b1e      	ldr	r3, [pc, #120]	@ (80058fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005886:	4a1d      	ldr	r2, [pc, #116]	@ (80058fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800588c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005894:	d10b      	bne.n	80058ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b80      	cmp	r3, #128	@ 0x80
 800589a:	d919      	bls.n	80058d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2ba0      	cmp	r3, #160	@ 0xa0
 80058a0:	d902      	bls.n	80058a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80058a2:	2302      	movs	r3, #2
 80058a4:	613b      	str	r3, [r7, #16]
 80058a6:	e013      	b.n	80058d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058a8:	2301      	movs	r3, #1
 80058aa:	613b      	str	r3, [r7, #16]
 80058ac:	e010      	b.n	80058d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b80      	cmp	r3, #128	@ 0x80
 80058b2:	d902      	bls.n	80058ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80058b4:	2303      	movs	r3, #3
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	e00a      	b.n	80058d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b80      	cmp	r3, #128	@ 0x80
 80058be:	d102      	bne.n	80058c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80058c0:	2302      	movs	r3, #2
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	e004      	b.n	80058d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b70      	cmp	r3, #112	@ 0x70
 80058ca:	d101      	bne.n	80058d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058cc:	2301      	movs	r3, #1
 80058ce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80058d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005900 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f023 0207 	bic.w	r2, r3, #7
 80058d8:	4909      	ldr	r1, [pc, #36]	@ (8005900 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80058e0:	4b07      	ldr	r3, [pc, #28]	@ (8005900 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d001      	beq.n	80058f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e000      	b.n	80058f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40021000 	.word	0x40021000
 8005900:	40022000 	.word	0x40022000

08005904 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800590c:	2300      	movs	r3, #0
 800590e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005910:	2300      	movs	r3, #0
 8005912:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800591c:	2b00      	cmp	r3, #0
 800591e:	d041      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005924:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005928:	d02a      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800592a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800592e:	d824      	bhi.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005930:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005934:	d008      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005936:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800593a:	d81e      	bhi.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005940:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005944:	d010      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005946:	e018      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005948:	4b86      	ldr	r3, [pc, #536]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	4a85      	ldr	r2, [pc, #532]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800594e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005952:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005954:	e015      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3304      	adds	r3, #4
 800595a:	2100      	movs	r1, #0
 800595c:	4618      	mov	r0, r3
 800595e:	f000 facd 	bl	8005efc <RCCEx_PLLSAI1_Config>
 8005962:	4603      	mov	r3, r0
 8005964:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005966:	e00c      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3320      	adds	r3, #32
 800596c:	2100      	movs	r1, #0
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fbb6 	bl	80060e0 <RCCEx_PLLSAI2_Config>
 8005974:	4603      	mov	r3, r0
 8005976:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005978:	e003      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	74fb      	strb	r3, [r7, #19]
      break;
 800597e:	e000      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005982:	7cfb      	ldrb	r3, [r7, #19]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10b      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005988:	4b76      	ldr	r3, [pc, #472]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005996:	4973      	ldr	r1, [pc, #460]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800599e:	e001      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a0:	7cfb      	ldrb	r3, [r7, #19]
 80059a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d041      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059b8:	d02a      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80059ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059be:	d824      	bhi.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80059c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059c4:	d008      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80059c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059ca:	d81e      	bhi.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00a      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80059d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059d4:	d010      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80059d6:	e018      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80059d8:	4b62      	ldr	r3, [pc, #392]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	4a61      	ldr	r2, [pc, #388]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80059e4:	e015      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3304      	adds	r3, #4
 80059ea:	2100      	movs	r1, #0
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fa85 	bl	8005efc <RCCEx_PLLSAI1_Config>
 80059f2:	4603      	mov	r3, r0
 80059f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80059f6:	e00c      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3320      	adds	r3, #32
 80059fc:	2100      	movs	r1, #0
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fb6e 	bl	80060e0 <RCCEx_PLLSAI2_Config>
 8005a04:	4603      	mov	r3, r0
 8005a06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a08:	e003      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	74fb      	strb	r3, [r7, #19]
      break;
 8005a0e:	e000      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a12:	7cfb      	ldrb	r3, [r7, #19]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10b      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a18:	4b52      	ldr	r3, [pc, #328]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a26:	494f      	ldr	r1, [pc, #316]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005a2e:	e001      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a30:	7cfb      	ldrb	r3, [r7, #19]
 8005a32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 80a0 	beq.w	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a42:	2300      	movs	r3, #0
 8005a44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a46:	4b47      	ldr	r3, [pc, #284]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005a56:	2300      	movs	r3, #0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00d      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a5c:	4b41      	ldr	r3, [pc, #260]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a60:	4a40      	ldr	r2, [pc, #256]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a66:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a68:	4b3e      	ldr	r3, [pc, #248]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a70:	60bb      	str	r3, [r7, #8]
 8005a72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a74:	2301      	movs	r3, #1
 8005a76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a78:	4b3b      	ldr	r3, [pc, #236]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a3a      	ldr	r2, [pc, #232]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a84:	f7fb feee 	bl	8001864 <HAL_GetTick>
 8005a88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a8a:	e009      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a8c:	f7fb feea 	bl	8001864 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d902      	bls.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	74fb      	strb	r3, [r7, #19]
        break;
 8005a9e:	e005      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005aa0:	4b31      	ldr	r3, [pc, #196]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0ef      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005aac:	7cfb      	ldrb	r3, [r7, #19]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d15c      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005abc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01f      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d019      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ad0:	4b24      	ldr	r3, [pc, #144]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ada:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005adc:	4b21      	ldr	r3, [pc, #132]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ae2:	4a20      	ldr	r2, [pc, #128]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005aec:	4b1d      	ldr	r3, [pc, #116]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005af4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005afc:	4a19      	ldr	r2, [pc, #100]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d016      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0e:	f7fb fea9 	bl	8001864 <HAL_GetTick>
 8005b12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b14:	e00b      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b16:	f7fb fea5 	bl	8001864 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d902      	bls.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	74fb      	strb	r3, [r7, #19]
            break;
 8005b2c:	e006      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0ec      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005b3c:	7cfb      	ldrb	r3, [r7, #19]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10c      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b42:	4b08      	ldr	r3, [pc, #32]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b52:	4904      	ldr	r1, [pc, #16]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005b5a:	e009      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b5c:	7cfb      	ldrb	r3, [r7, #19]
 8005b5e:	74bb      	strb	r3, [r7, #18]
 8005b60:	e006      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005b62:	bf00      	nop
 8005b64:	40021000 	.word	0x40021000
 8005b68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6c:	7cfb      	ldrb	r3, [r7, #19]
 8005b6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b70:	7c7b      	ldrb	r3, [r7, #17]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d105      	bne.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b76:	4ba6      	ldr	r3, [pc, #664]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b7a:	4aa5      	ldr	r2, [pc, #660]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b8e:	4ba0      	ldr	r3, [pc, #640]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b94:	f023 0203 	bic.w	r2, r3, #3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9c:	499c      	ldr	r1, [pc, #624]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bb0:	4b97      	ldr	r3, [pc, #604]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb6:	f023 020c 	bic.w	r2, r3, #12
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bbe:	4994      	ldr	r1, [pc, #592]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0304 	and.w	r3, r3, #4
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bd2:	4b8f      	ldr	r3, [pc, #572]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be0:	498b      	ldr	r1, [pc, #556]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0308 	and.w	r3, r3, #8
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005bf4:	4b86      	ldr	r3, [pc, #536]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bfa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c02:	4983      	ldr	r1, [pc, #524]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0310 	and.w	r3, r3, #16
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c16:	4b7e      	ldr	r3, [pc, #504]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c24:	497a      	ldr	r1, [pc, #488]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0320 	and.w	r3, r3, #32
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c38:	4b75      	ldr	r3, [pc, #468]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c46:	4972      	ldr	r1, [pc, #456]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c68:	4969      	ldr	r1, [pc, #420]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c7c:	4b64      	ldr	r3, [pc, #400]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c8a:	4961      	ldr	r1, [pc, #388]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c9e:	4b5c      	ldr	r3, [pc, #368]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cac:	4958      	ldr	r1, [pc, #352]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00a      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cc0:	4b53      	ldr	r3, [pc, #332]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cce:	4950      	ldr	r1, [pc, #320]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ce2:	4b4b      	ldr	r3, [pc, #300]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf0:	4947      	ldr	r1, [pc, #284]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d04:	4b42      	ldr	r3, [pc, #264]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d0a:	f023 0203 	bic.w	r2, r3, #3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d12:	493f      	ldr	r1, [pc, #252]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d028      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d26:	4b3a      	ldr	r3, [pc, #232]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d2c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d34:	4936      	ldr	r1, [pc, #216]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d44:	d106      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d46:	4b32      	ldr	r3, [pc, #200]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	4a31      	ldr	r2, [pc, #196]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d50:	60d3      	str	r3, [r2, #12]
 8005d52:	e011      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d5c:	d10c      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3304      	adds	r3, #4
 8005d62:	2101      	movs	r1, #1
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 f8c9 	bl	8005efc <RCCEx_PLLSAI1_Config>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005d6e:	7cfb      	ldrb	r3, [r7, #19]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005d74:	7cfb      	ldrb	r3, [r7, #19]
 8005d76:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d028      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005d84:	4b22      	ldr	r3, [pc, #136]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d92:	491f      	ldr	r1, [pc, #124]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005da2:	d106      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005da4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	4a19      	ldr	r2, [pc, #100]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005daa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dae:	60d3      	str	r3, [r2, #12]
 8005db0:	e011      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005db6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005dba:	d10c      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 f89a 	bl	8005efc <RCCEx_PLLSAI1_Config>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dcc:	7cfb      	ldrb	r3, [r7, #19]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005dd2:	7cfb      	ldrb	r3, [r7, #19]
 8005dd4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d02a      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005de2:	4b0b      	ldr	r3, [pc, #44]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005df0:	4907      	ldr	r1, [pc, #28]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005dfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e00:	d108      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e02:	4b03      	ldr	r3, [pc, #12]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	4a02      	ldr	r2, [pc, #8]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e0c:	60d3      	str	r3, [r2, #12]
 8005e0e:	e013      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005e10:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e1c:	d10c      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3304      	adds	r3, #4
 8005e22:	2101      	movs	r1, #1
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 f869 	bl	8005efc <RCCEx_PLLSAI1_Config>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e2e:	7cfb      	ldrb	r3, [r7, #19]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005e34:	7cfb      	ldrb	r3, [r7, #19]
 8005e36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d02f      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e44:	4b2c      	ldr	r3, [pc, #176]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e52:	4929      	ldr	r1, [pc, #164]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e62:	d10d      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3304      	adds	r3, #4
 8005e68:	2102      	movs	r1, #2
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 f846 	bl	8005efc <RCCEx_PLLSAI1_Config>
 8005e70:	4603      	mov	r3, r0
 8005e72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e74:	7cfb      	ldrb	r3, [r7, #19]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d014      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005e7a:	7cfb      	ldrb	r3, [r7, #19]
 8005e7c:	74bb      	strb	r3, [r7, #18]
 8005e7e:	e011      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e88:	d10c      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	3320      	adds	r3, #32
 8005e8e:	2102      	movs	r1, #2
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 f925 	bl	80060e0 <RCCEx_PLLSAI2_Config>
 8005e96:	4603      	mov	r3, r0
 8005e98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e9a:	7cfb      	ldrb	r3, [r7, #19]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005ea0:	7cfb      	ldrb	r3, [r7, #19]
 8005ea2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00b      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005eb0:	4b11      	ldr	r3, [pc, #68]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ec0:	490d      	ldr	r1, [pc, #52]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00b      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ed4:	4b08      	ldr	r3, [pc, #32]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eda:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ee4:	4904      	ldr	r1, [pc, #16]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005eec:	7cbb      	ldrb	r3, [r7, #18]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40021000 	.word	0x40021000

08005efc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f0a:	4b74      	ldr	r3, [pc, #464]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d018      	beq.n	8005f48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f16:	4b71      	ldr	r3, [pc, #452]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f003 0203 	and.w	r2, r3, #3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d10d      	bne.n	8005f42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
       ||
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d009      	beq.n	8005f42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005f2e:	4b6b      	ldr	r3, [pc, #428]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	091b      	lsrs	r3, r3, #4
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
       ||
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d047      	beq.n	8005fd2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	73fb      	strb	r3, [r7, #15]
 8005f46:	e044      	b.n	8005fd2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d018      	beq.n	8005f82 <RCCEx_PLLSAI1_Config+0x86>
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d825      	bhi.n	8005fa0 <RCCEx_PLLSAI1_Config+0xa4>
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d002      	beq.n	8005f5e <RCCEx_PLLSAI1_Config+0x62>
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d009      	beq.n	8005f70 <RCCEx_PLLSAI1_Config+0x74>
 8005f5c:	e020      	b.n	8005fa0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f5e:	4b5f      	ldr	r3, [pc, #380]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d11d      	bne.n	8005fa6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f6e:	e01a      	b.n	8005fa6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f70:	4b5a      	ldr	r3, [pc, #360]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d116      	bne.n	8005faa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f80:	e013      	b.n	8005faa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f82:	4b56      	ldr	r3, [pc, #344]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10f      	bne.n	8005fae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f8e:	4b53      	ldr	r3, [pc, #332]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d109      	bne.n	8005fae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f9e:	e006      	b.n	8005fae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa4:	e004      	b.n	8005fb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005fa6:	bf00      	nop
 8005fa8:	e002      	b.n	8005fb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005faa:	bf00      	nop
 8005fac:	e000      	b.n	8005fb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005fae:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10d      	bne.n	8005fd2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005fb6:	4b49      	ldr	r3, [pc, #292]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6819      	ldr	r1, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	011b      	lsls	r3, r3, #4
 8005fca:	430b      	orrs	r3, r1
 8005fcc:	4943      	ldr	r1, [pc, #268]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d17c      	bne.n	80060d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005fd8:	4b40      	ldr	r3, [pc, #256]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a3f      	ldr	r2, [pc, #252]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fde:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fe4:	f7fb fc3e 	bl	8001864 <HAL_GetTick>
 8005fe8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fea:	e009      	b.n	8006000 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fec:	f7fb fc3a 	bl	8001864 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d902      	bls.n	8006000 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	73fb      	strb	r3, [r7, #15]
        break;
 8005ffe:	e005      	b.n	800600c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006000:	4b36      	ldr	r3, [pc, #216]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1ef      	bne.n	8005fec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d15f      	bne.n	80060d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d110      	bne.n	800603a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006018:	4b30      	ldr	r3, [pc, #192]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006020:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6892      	ldr	r2, [r2, #8]
 8006028:	0211      	lsls	r1, r2, #8
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	68d2      	ldr	r2, [r2, #12]
 800602e:	06d2      	lsls	r2, r2, #27
 8006030:	430a      	orrs	r2, r1
 8006032:	492a      	ldr	r1, [pc, #168]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006034:	4313      	orrs	r3, r2
 8006036:	610b      	str	r3, [r1, #16]
 8006038:	e027      	b.n	800608a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d112      	bne.n	8006066 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006040:	4b26      	ldr	r3, [pc, #152]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006048:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6892      	ldr	r2, [r2, #8]
 8006050:	0211      	lsls	r1, r2, #8
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	6912      	ldr	r2, [r2, #16]
 8006056:	0852      	lsrs	r2, r2, #1
 8006058:	3a01      	subs	r2, #1
 800605a:	0552      	lsls	r2, r2, #21
 800605c:	430a      	orrs	r2, r1
 800605e:	491f      	ldr	r1, [pc, #124]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006060:	4313      	orrs	r3, r2
 8006062:	610b      	str	r3, [r1, #16]
 8006064:	e011      	b.n	800608a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006066:	4b1d      	ldr	r3, [pc, #116]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800606e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6892      	ldr	r2, [r2, #8]
 8006076:	0211      	lsls	r1, r2, #8
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6952      	ldr	r2, [r2, #20]
 800607c:	0852      	lsrs	r2, r2, #1
 800607e:	3a01      	subs	r2, #1
 8006080:	0652      	lsls	r2, r2, #25
 8006082:	430a      	orrs	r2, r1
 8006084:	4915      	ldr	r1, [pc, #84]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006086:	4313      	orrs	r3, r2
 8006088:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800608a:	4b14      	ldr	r3, [pc, #80]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a13      	ldr	r2, [pc, #76]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006090:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006094:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006096:	f7fb fbe5 	bl	8001864 <HAL_GetTick>
 800609a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800609c:	e009      	b.n	80060b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800609e:	f7fb fbe1 	bl	8001864 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d902      	bls.n	80060b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	73fb      	strb	r3, [r7, #15]
          break;
 80060b0:	e005      	b.n	80060be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060b2:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0ef      	beq.n	800609e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d106      	bne.n	80060d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80060c4:	4b05      	ldr	r3, [pc, #20]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80060c6:	691a      	ldr	r2, [r3, #16]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	4903      	ldr	r1, [pc, #12]	@ (80060dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	40021000 	.word	0x40021000

080060e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80060ee:	4b69      	ldr	r3, [pc, #420]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d018      	beq.n	800612c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80060fa:	4b66      	ldr	r3, [pc, #408]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f003 0203 	and.w	r2, r3, #3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	429a      	cmp	r2, r3
 8006108:	d10d      	bne.n	8006126 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
       ||
 800610e:	2b00      	cmp	r3, #0
 8006110:	d009      	beq.n	8006126 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006112:	4b60      	ldr	r3, [pc, #384]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	091b      	lsrs	r3, r3, #4
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
       ||
 8006122:	429a      	cmp	r2, r3
 8006124:	d047      	beq.n	80061b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	73fb      	strb	r3, [r7, #15]
 800612a:	e044      	b.n	80061b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b03      	cmp	r3, #3
 8006132:	d018      	beq.n	8006166 <RCCEx_PLLSAI2_Config+0x86>
 8006134:	2b03      	cmp	r3, #3
 8006136:	d825      	bhi.n	8006184 <RCCEx_PLLSAI2_Config+0xa4>
 8006138:	2b01      	cmp	r3, #1
 800613a:	d002      	beq.n	8006142 <RCCEx_PLLSAI2_Config+0x62>
 800613c:	2b02      	cmp	r3, #2
 800613e:	d009      	beq.n	8006154 <RCCEx_PLLSAI2_Config+0x74>
 8006140:	e020      	b.n	8006184 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006142:	4b54      	ldr	r3, [pc, #336]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d11d      	bne.n	800618a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006152:	e01a      	b.n	800618a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006154:	4b4f      	ldr	r3, [pc, #316]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800615c:	2b00      	cmp	r3, #0
 800615e:	d116      	bne.n	800618e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006164:	e013      	b.n	800618e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006166:	4b4b      	ldr	r3, [pc, #300]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10f      	bne.n	8006192 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006172:	4b48      	ldr	r3, [pc, #288]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d109      	bne.n	8006192 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006182:	e006      	b.n	8006192 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	73fb      	strb	r3, [r7, #15]
      break;
 8006188:	e004      	b.n	8006194 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800618a:	bf00      	nop
 800618c:	e002      	b.n	8006194 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800618e:	bf00      	nop
 8006190:	e000      	b.n	8006194 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006192:	bf00      	nop
    }

    if(status == HAL_OK)
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10d      	bne.n	80061b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800619a:	4b3e      	ldr	r3, [pc, #248]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6819      	ldr	r1, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	430b      	orrs	r3, r1
 80061b0:	4938      	ldr	r1, [pc, #224]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d166      	bne.n	800628a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80061bc:	4b35      	ldr	r3, [pc, #212]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a34      	ldr	r2, [pc, #208]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061c8:	f7fb fb4c 	bl	8001864 <HAL_GetTick>
 80061cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061ce:	e009      	b.n	80061e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061d0:	f7fb fb48 	bl	8001864 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d902      	bls.n	80061e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	73fb      	strb	r3, [r7, #15]
        break;
 80061e2:	e005      	b.n	80061f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1ef      	bne.n	80061d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d149      	bne.n	800628a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d110      	bne.n	800621e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80061fc:	4b25      	ldr	r3, [pc, #148]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006204:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6892      	ldr	r2, [r2, #8]
 800620c:	0211      	lsls	r1, r2, #8
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	68d2      	ldr	r2, [r2, #12]
 8006212:	06d2      	lsls	r2, r2, #27
 8006214:	430a      	orrs	r2, r1
 8006216:	491f      	ldr	r1, [pc, #124]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006218:	4313      	orrs	r3, r2
 800621a:	614b      	str	r3, [r1, #20]
 800621c:	e011      	b.n	8006242 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800621e:	4b1d      	ldr	r3, [pc, #116]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006226:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6892      	ldr	r2, [r2, #8]
 800622e:	0211      	lsls	r1, r2, #8
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	6912      	ldr	r2, [r2, #16]
 8006234:	0852      	lsrs	r2, r2, #1
 8006236:	3a01      	subs	r2, #1
 8006238:	0652      	lsls	r2, r2, #25
 800623a:	430a      	orrs	r2, r1
 800623c:	4915      	ldr	r1, [pc, #84]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 800623e:	4313      	orrs	r3, r2
 8006240:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006242:	4b14      	ldr	r3, [pc, #80]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a13      	ldr	r2, [pc, #76]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800624c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800624e:	f7fb fb09 	bl	8001864 <HAL_GetTick>
 8006252:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006254:	e009      	b.n	800626a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006256:	f7fb fb05 	bl	8001864 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d902      	bls.n	800626a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	73fb      	strb	r3, [r7, #15]
          break;
 8006268:	e005      	b.n	8006276 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800626a:	4b0a      	ldr	r3, [pc, #40]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0ef      	beq.n	8006256 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d106      	bne.n	800628a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800627c:	4b05      	ldr	r3, [pc, #20]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 800627e:	695a      	ldr	r2, [r3, #20]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	4903      	ldr	r1, [pc, #12]	@ (8006294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006286:	4313      	orrs	r3, r2
 8006288:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800628a:	7bfb      	ldrb	r3, [r7, #15]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	40021000 	.word	0x40021000

08006298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e049      	b.n	800633e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f841 	bl	8006346 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3304      	adds	r3, #4
 80062d4:	4619      	mov	r1, r3
 80062d6:	4610      	mov	r0, r2
 80062d8:	f000 f9e0 	bl	800669c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
	...

0800635c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b01      	cmp	r3, #1
 800636e:	d001      	beq.n	8006374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e04f      	b.n	8006414 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68da      	ldr	r2, [r3, #12]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0201 	orr.w	r2, r2, #1
 800638a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a23      	ldr	r2, [pc, #140]	@ (8006420 <HAL_TIM_Base_Start_IT+0xc4>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d01d      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x76>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800639e:	d018      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x76>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006424 <HAL_TIM_Base_Start_IT+0xc8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d013      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x76>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a1e      	ldr	r2, [pc, #120]	@ (8006428 <HAL_TIM_Base_Start_IT+0xcc>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00e      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x76>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a1c      	ldr	r2, [pc, #112]	@ (800642c <HAL_TIM_Base_Start_IT+0xd0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d009      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x76>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a1b      	ldr	r2, [pc, #108]	@ (8006430 <HAL_TIM_Base_Start_IT+0xd4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d004      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x76>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a19      	ldr	r2, [pc, #100]	@ (8006434 <HAL_TIM_Base_Start_IT+0xd8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d115      	bne.n	80063fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	4b17      	ldr	r3, [pc, #92]	@ (8006438 <HAL_TIM_Base_Start_IT+0xdc>)
 80063da:	4013      	ands	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b06      	cmp	r3, #6
 80063e2:	d015      	beq.n	8006410 <HAL_TIM_Base_Start_IT+0xb4>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063ea:	d011      	beq.n	8006410 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0201 	orr.w	r2, r2, #1
 80063fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063fc:	e008      	b.n	8006410 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0201 	orr.w	r2, r2, #1
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	e000      	b.n	8006412 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006410:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	40012c00 	.word	0x40012c00
 8006424:	40000400 	.word	0x40000400
 8006428:	40000800 	.word	0x40000800
 800642c:	40000c00 	.word	0x40000c00
 8006430:	40013400 	.word	0x40013400
 8006434:	40014000 	.word	0x40014000
 8006438:	00010007 	.word	0x00010007

0800643c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d020      	beq.n	80064a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01b      	beq.n	80064a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f06f 0202 	mvn.w	r2, #2
 8006470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f8e9 	bl	800665e <HAL_TIM_IC_CaptureCallback>
 800648c:	e005      	b.n	800649a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f8db 	bl	800664a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f8ec 	bl	8006672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f003 0304 	and.w	r3, r3, #4
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d020      	beq.n	80064ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01b      	beq.n	80064ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f06f 0204 	mvn.w	r2, #4
 80064bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2202      	movs	r2, #2
 80064c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f8c3 	bl	800665e <HAL_TIM_IC_CaptureCallback>
 80064d8:	e005      	b.n	80064e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f8b5 	bl	800664a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f8c6 	bl	8006672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f003 0308 	and.w	r3, r3, #8
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d020      	beq.n	8006538 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f003 0308 	and.w	r3, r3, #8
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01b      	beq.n	8006538 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f06f 0208 	mvn.w	r2, #8
 8006508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2204      	movs	r2, #4
 800650e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f89d 	bl	800665e <HAL_TIM_IC_CaptureCallback>
 8006524:	e005      	b.n	8006532 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f88f 	bl	800664a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f8a0 	bl	8006672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f003 0310 	and.w	r3, r3, #16
 800653e:	2b00      	cmp	r3, #0
 8006540:	d020      	beq.n	8006584 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b00      	cmp	r3, #0
 800654a:	d01b      	beq.n	8006584 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0210 	mvn.w	r2, #16
 8006554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2208      	movs	r2, #8
 800655a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f877 	bl	800665e <HAL_TIM_IC_CaptureCallback>
 8006570:	e005      	b.n	800657e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f869 	bl	800664a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f87a 	bl	8006672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00c      	beq.n	80065a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	d007      	beq.n	80065a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f06f 0201 	mvn.w	r2, #1
 80065a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fa fdf6 	bl	8001194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d104      	bne.n	80065bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00c      	beq.n	80065d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d007      	beq.n	80065d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80065ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f913 	bl	80067fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00c      	beq.n	80065fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d007      	beq.n	80065fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80065f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f90b 	bl	8006810 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00c      	beq.n	800661e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800660a:	2b00      	cmp	r3, #0
 800660c:	d007      	beq.n	800661e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f834 	bl	8006686 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f003 0320 	and.w	r3, r3, #32
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00c      	beq.n	8006642 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	2b00      	cmp	r3, #0
 8006630:	d007      	beq.n	8006642 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f06f 0220 	mvn.w	r2, #32
 800663a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f8d3 	bl	80067e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006642:	bf00      	nop
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006652:	bf00      	nop
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800665e:	b480      	push	{r7}
 8006660:	b083      	sub	sp, #12
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
	...

0800669c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a46      	ldr	r2, [pc, #280]	@ (80067c8 <TIM_Base_SetConfig+0x12c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d013      	beq.n	80066dc <TIM_Base_SetConfig+0x40>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ba:	d00f      	beq.n	80066dc <TIM_Base_SetConfig+0x40>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a43      	ldr	r2, [pc, #268]	@ (80067cc <TIM_Base_SetConfig+0x130>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00b      	beq.n	80066dc <TIM_Base_SetConfig+0x40>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a42      	ldr	r2, [pc, #264]	@ (80067d0 <TIM_Base_SetConfig+0x134>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d007      	beq.n	80066dc <TIM_Base_SetConfig+0x40>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a41      	ldr	r2, [pc, #260]	@ (80067d4 <TIM_Base_SetConfig+0x138>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d003      	beq.n	80066dc <TIM_Base_SetConfig+0x40>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a40      	ldr	r2, [pc, #256]	@ (80067d8 <TIM_Base_SetConfig+0x13c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d108      	bne.n	80066ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a35      	ldr	r2, [pc, #212]	@ (80067c8 <TIM_Base_SetConfig+0x12c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d01f      	beq.n	8006736 <TIM_Base_SetConfig+0x9a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066fc:	d01b      	beq.n	8006736 <TIM_Base_SetConfig+0x9a>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a32      	ldr	r2, [pc, #200]	@ (80067cc <TIM_Base_SetConfig+0x130>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d017      	beq.n	8006736 <TIM_Base_SetConfig+0x9a>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a31      	ldr	r2, [pc, #196]	@ (80067d0 <TIM_Base_SetConfig+0x134>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d013      	beq.n	8006736 <TIM_Base_SetConfig+0x9a>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a30      	ldr	r2, [pc, #192]	@ (80067d4 <TIM_Base_SetConfig+0x138>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00f      	beq.n	8006736 <TIM_Base_SetConfig+0x9a>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a2f      	ldr	r2, [pc, #188]	@ (80067d8 <TIM_Base_SetConfig+0x13c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d00b      	beq.n	8006736 <TIM_Base_SetConfig+0x9a>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a2e      	ldr	r2, [pc, #184]	@ (80067dc <TIM_Base_SetConfig+0x140>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d007      	beq.n	8006736 <TIM_Base_SetConfig+0x9a>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a2d      	ldr	r2, [pc, #180]	@ (80067e0 <TIM_Base_SetConfig+0x144>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d003      	beq.n	8006736 <TIM_Base_SetConfig+0x9a>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a2c      	ldr	r2, [pc, #176]	@ (80067e4 <TIM_Base_SetConfig+0x148>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d108      	bne.n	8006748 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800673c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a16      	ldr	r2, [pc, #88]	@ (80067c8 <TIM_Base_SetConfig+0x12c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d00f      	beq.n	8006794 <TIM_Base_SetConfig+0xf8>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a18      	ldr	r2, [pc, #96]	@ (80067d8 <TIM_Base_SetConfig+0x13c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d00b      	beq.n	8006794 <TIM_Base_SetConfig+0xf8>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a17      	ldr	r2, [pc, #92]	@ (80067dc <TIM_Base_SetConfig+0x140>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d007      	beq.n	8006794 <TIM_Base_SetConfig+0xf8>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a16      	ldr	r2, [pc, #88]	@ (80067e0 <TIM_Base_SetConfig+0x144>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d003      	beq.n	8006794 <TIM_Base_SetConfig+0xf8>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a15      	ldr	r2, [pc, #84]	@ (80067e4 <TIM_Base_SetConfig+0x148>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d103      	bne.n	800679c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	691a      	ldr	r2, [r3, #16]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d105      	bne.n	80067ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f023 0201 	bic.w	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	611a      	str	r2, [r3, #16]
  }
}
 80067ba:	bf00      	nop
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40012c00 	.word	0x40012c00
 80067cc:	40000400 	.word	0x40000400
 80067d0:	40000800 	.word	0x40000800
 80067d4:	40000c00 	.word	0x40000c00
 80067d8:	40013400 	.word	0x40013400
 80067dc:	40014000 	.word	0x40014000
 80067e0:	40014400 	.word	0x40014400
 80067e4:	40014800 	.word	0x40014800

080067e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e040      	b.n	80068b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800683a:	2b00      	cmp	r3, #0
 800683c:	d106      	bne.n	800684c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fa fe84 	bl	8001554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2224      	movs	r2, #36	@ 0x24
 8006850:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0201 	bic.w	r2, r2, #1
 8006860:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fe06 	bl	800747c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fb4b 	bl	8006f0c <UART_SetConfig>
 8006876:	4603      	mov	r3, r0
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e01b      	b.n	80068b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800688e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800689e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0201 	orr.w	r2, r2, #1
 80068ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fe85 	bl	80075c0 <UART_CheckIdleState>
 80068b6:	4603      	mov	r3, r0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b0ba      	sub	sp, #232	@ 0xe8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80068ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80068ee:	4013      	ands	r3, r2
 80068f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80068f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d115      	bne.n	8006928 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80068fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006900:	f003 0320 	and.w	r3, r3, #32
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00f      	beq.n	8006928 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b00      	cmp	r3, #0
 8006912:	d009      	beq.n	8006928 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 82ca 	beq.w	8006eb2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	4798      	blx	r3
      }
      return;
 8006926:	e2c4      	b.n	8006eb2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006928:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 8117 	beq.w	8006b60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d106      	bne.n	800694c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800693e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006942:	4b85      	ldr	r3, [pc, #532]	@ (8006b58 <HAL_UART_IRQHandler+0x298>)
 8006944:	4013      	ands	r3, r2
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 810a 	beq.w	8006b60 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800694c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	2b00      	cmp	r3, #0
 8006956:	d011      	beq.n	800697c <HAL_UART_IRQHandler+0xbc>
 8006958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800695c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2201      	movs	r2, #1
 800696a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006972:	f043 0201 	orr.w	r2, r3, #1
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800697c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d011      	beq.n	80069ac <HAL_UART_IRQHandler+0xec>
 8006988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00b      	beq.n	80069ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2202      	movs	r2, #2
 800699a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069a2:	f043 0204 	orr.w	r2, r3, #4
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d011      	beq.n	80069dc <HAL_UART_IRQHandler+0x11c>
 80069b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00b      	beq.n	80069dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2204      	movs	r2, #4
 80069ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069d2:	f043 0202 	orr.w	r2, r3, #2
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069e0:	f003 0308 	and.w	r3, r3, #8
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d017      	beq.n	8006a18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069ec:	f003 0320 	and.w	r3, r3, #32
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d105      	bne.n	8006a00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80069f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2208      	movs	r2, #8
 8006a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a0e:	f043 0208 	orr.w	r2, r3, #8
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d012      	beq.n	8006a4a <HAL_UART_IRQHandler+0x18a>
 8006a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00c      	beq.n	8006a4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a40:	f043 0220 	orr.w	r2, r3, #32
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 8230 	beq.w	8006eb6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00d      	beq.n	8006a7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a66:	f003 0320 	and.w	r3, r3, #32
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d007      	beq.n	8006a7e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a92:	2b40      	cmp	r3, #64	@ 0x40
 8006a94:	d005      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d04f      	beq.n	8006b42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fea1 	bl	80077ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab2:	2b40      	cmp	r3, #64	@ 0x40
 8006ab4:	d141      	bne.n	8006b3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3308      	adds	r3, #8
 8006abc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ad0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3308      	adds	r3, #8
 8006ade:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ae2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006aee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006af2:	e841 2300 	strex	r3, r2, [r1]
 8006af6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1d9      	bne.n	8006ab6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d013      	beq.n	8006b32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b0e:	4a13      	ldr	r2, [pc, #76]	@ (8006b5c <HAL_UART_IRQHandler+0x29c>)
 8006b10:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fc ff00 	bl	800391c <HAL_DMA_Abort_IT>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d017      	beq.n	8006b52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b30:	e00f      	b.n	8006b52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f9d4 	bl	8006ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b38:	e00b      	b.n	8006b52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f9d0 	bl	8006ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b40:	e007      	b.n	8006b52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f9cc 	bl	8006ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006b50:	e1b1      	b.n	8006eb6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b52:	bf00      	nop
    return;
 8006b54:	e1af      	b.n	8006eb6 <HAL_UART_IRQHandler+0x5f6>
 8006b56:	bf00      	nop
 8006b58:	04000120 	.word	0x04000120
 8006b5c:	080078b3 	.word	0x080078b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	f040 816a 	bne.w	8006e3e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b6e:	f003 0310 	and.w	r3, r3, #16
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 8163 	beq.w	8006e3e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b7c:	f003 0310 	and.w	r3, r3, #16
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 815c 	beq.w	8006e3e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2210      	movs	r2, #16
 8006b8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b98:	2b40      	cmp	r3, #64	@ 0x40
 8006b9a:	f040 80d4 	bne.w	8006d46 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006baa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 80ad 	beq.w	8006d0e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	f080 80a5 	bcs.w	8006d0e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0320 	and.w	r3, r3, #32
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f040 8086 	bne.w	8006cec <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c0e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1da      	bne.n	8006be0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c3c:	f023 0301 	bic.w	r3, r3, #1
 8006c40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3308      	adds	r3, #8
 8006c4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e1      	bne.n	8006c2a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3308      	adds	r3, #8
 8006c86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e3      	bne.n	8006c66 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cbc:	f023 0310 	bic.w	r3, r3, #16
 8006cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cd0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e4      	bne.n	8006cac <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fc fdda 	bl	80038a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f8f4 	bl	8006ef4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006d0c:	e0d5      	b.n	8006eba <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	f040 80ce 	bne.w	8006eba <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b20      	cmp	r3, #32
 8006d2c:	f040 80c5 	bne.w	8006eba <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f8d8 	bl	8006ef4 <HAL_UARTEx_RxEventCallback>
      return;
 8006d44:	e0b9      	b.n	8006eba <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 80ab 	beq.w	8006ebe <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 80a6 	beq.w	8006ebe <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7a:	e853 3f00 	ldrex	r3, [r3]
 8006d7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d9c:	e841 2300 	strex	r3, r2, [r1]
 8006da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1e4      	bne.n	8006d72 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3308      	adds	r3, #8
 8006dae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db2:	e853 3f00 	ldrex	r3, [r3]
 8006db6:	623b      	str	r3, [r7, #32]
   return(result);
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	f023 0301 	bic.w	r3, r3, #1
 8006dbe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006dcc:	633a      	str	r2, [r7, #48]	@ 0x30
 8006dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dd4:	e841 2300 	strex	r3, r2, [r1]
 8006dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e3      	bne.n	8006da8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f023 0310 	bic.w	r3, r3, #16
 8006e08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	461a      	mov	r2, r3
 8006e12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e16:	61fb      	str	r3, [r7, #28]
 8006e18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1a:	69b9      	ldr	r1, [r7, #24]
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	e841 2300 	strex	r3, r2, [r1]
 8006e22:	617b      	str	r3, [r7, #20]
   return(result);
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1e4      	bne.n	8006df4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f85c 	bl	8006ef4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e3c:	e03f      	b.n	8006ebe <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00e      	beq.n	8006e68 <HAL_UART_IRQHandler+0x5a8>
 8006e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d008      	beq.n	8006e68 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006e5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fd66 	bl	8007932 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e66:	e02d      	b.n	8006ec4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00e      	beq.n	8006e92 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d008      	beq.n	8006e92 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d01c      	beq.n	8006ec2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	4798      	blx	r3
    }
    return;
 8006e90:	e017      	b.n	8006ec2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d012      	beq.n	8006ec4 <HAL_UART_IRQHandler+0x604>
 8006e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00c      	beq.n	8006ec4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fd17 	bl	80078de <UART_EndTransmit_IT>
    return;
 8006eb0:	e008      	b.n	8006ec4 <HAL_UART_IRQHandler+0x604>
      return;
 8006eb2:	bf00      	nop
 8006eb4:	e006      	b.n	8006ec4 <HAL_UART_IRQHandler+0x604>
    return;
 8006eb6:	bf00      	nop
 8006eb8:	e004      	b.n	8006ec4 <HAL_UART_IRQHandler+0x604>
      return;
 8006eba:	bf00      	nop
 8006ebc:	e002      	b.n	8006ec4 <HAL_UART_IRQHandler+0x604>
      return;
 8006ebe:	bf00      	nop
 8006ec0:	e000      	b.n	8006ec4 <HAL_UART_IRQHandler+0x604>
    return;
 8006ec2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006ec4:	37e8      	adds	r7, #232	@ 0xe8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop

08006ecc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f10:	b08a      	sub	sp, #40	@ 0x28
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	431a      	orrs	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	4ba4      	ldr	r3, [pc, #656]	@ (80071cc <UART_SetConfig+0x2c0>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	6812      	ldr	r2, [r2, #0]
 8006f42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f44:	430b      	orrs	r3, r1
 8006f46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	68da      	ldr	r2, [r3, #12]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a99      	ldr	r2, [pc, #612]	@ (80071d0 <UART_SetConfig+0x2c4>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d004      	beq.n	8006f78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f74:	4313      	orrs	r3, r2
 8006f76:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a90      	ldr	r2, [pc, #576]	@ (80071d4 <UART_SetConfig+0x2c8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d126      	bne.n	8006fe4 <UART_SetConfig+0xd8>
 8006f96:	4b90      	ldr	r3, [pc, #576]	@ (80071d8 <UART_SetConfig+0x2cc>)
 8006f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f9c:	f003 0303 	and.w	r3, r3, #3
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d81b      	bhi.n	8006fdc <UART_SetConfig+0xd0>
 8006fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8006fac <UART_SetConfig+0xa0>)
 8006fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006faa:	bf00      	nop
 8006fac:	08006fbd 	.word	0x08006fbd
 8006fb0:	08006fcd 	.word	0x08006fcd
 8006fb4:	08006fc5 	.word	0x08006fc5
 8006fb8:	08006fd5 	.word	0x08006fd5
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fc2:	e116      	b.n	80071f2 <UART_SetConfig+0x2e6>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fca:	e112      	b.n	80071f2 <UART_SetConfig+0x2e6>
 8006fcc:	2304      	movs	r3, #4
 8006fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fd2:	e10e      	b.n	80071f2 <UART_SetConfig+0x2e6>
 8006fd4:	2308      	movs	r3, #8
 8006fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fda:	e10a      	b.n	80071f2 <UART_SetConfig+0x2e6>
 8006fdc:	2310      	movs	r3, #16
 8006fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fe2:	e106      	b.n	80071f2 <UART_SetConfig+0x2e6>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a7c      	ldr	r2, [pc, #496]	@ (80071dc <UART_SetConfig+0x2d0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d138      	bne.n	8007060 <UART_SetConfig+0x154>
 8006fee:	4b7a      	ldr	r3, [pc, #488]	@ (80071d8 <UART_SetConfig+0x2cc>)
 8006ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ff4:	f003 030c 	and.w	r3, r3, #12
 8006ff8:	2b0c      	cmp	r3, #12
 8006ffa:	d82d      	bhi.n	8007058 <UART_SetConfig+0x14c>
 8006ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8007004 <UART_SetConfig+0xf8>)
 8006ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007002:	bf00      	nop
 8007004:	08007039 	.word	0x08007039
 8007008:	08007059 	.word	0x08007059
 800700c:	08007059 	.word	0x08007059
 8007010:	08007059 	.word	0x08007059
 8007014:	08007049 	.word	0x08007049
 8007018:	08007059 	.word	0x08007059
 800701c:	08007059 	.word	0x08007059
 8007020:	08007059 	.word	0x08007059
 8007024:	08007041 	.word	0x08007041
 8007028:	08007059 	.word	0x08007059
 800702c:	08007059 	.word	0x08007059
 8007030:	08007059 	.word	0x08007059
 8007034:	08007051 	.word	0x08007051
 8007038:	2300      	movs	r3, #0
 800703a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800703e:	e0d8      	b.n	80071f2 <UART_SetConfig+0x2e6>
 8007040:	2302      	movs	r3, #2
 8007042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007046:	e0d4      	b.n	80071f2 <UART_SetConfig+0x2e6>
 8007048:	2304      	movs	r3, #4
 800704a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800704e:	e0d0      	b.n	80071f2 <UART_SetConfig+0x2e6>
 8007050:	2308      	movs	r3, #8
 8007052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007056:	e0cc      	b.n	80071f2 <UART_SetConfig+0x2e6>
 8007058:	2310      	movs	r3, #16
 800705a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800705e:	e0c8      	b.n	80071f2 <UART_SetConfig+0x2e6>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a5e      	ldr	r2, [pc, #376]	@ (80071e0 <UART_SetConfig+0x2d4>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d125      	bne.n	80070b6 <UART_SetConfig+0x1aa>
 800706a:	4b5b      	ldr	r3, [pc, #364]	@ (80071d8 <UART_SetConfig+0x2cc>)
 800706c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007070:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007074:	2b30      	cmp	r3, #48	@ 0x30
 8007076:	d016      	beq.n	80070a6 <UART_SetConfig+0x19a>
 8007078:	2b30      	cmp	r3, #48	@ 0x30
 800707a:	d818      	bhi.n	80070ae <UART_SetConfig+0x1a2>
 800707c:	2b20      	cmp	r3, #32
 800707e:	d00a      	beq.n	8007096 <UART_SetConfig+0x18a>
 8007080:	2b20      	cmp	r3, #32
 8007082:	d814      	bhi.n	80070ae <UART_SetConfig+0x1a2>
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <UART_SetConfig+0x182>
 8007088:	2b10      	cmp	r3, #16
 800708a:	d008      	beq.n	800709e <UART_SetConfig+0x192>
 800708c:	e00f      	b.n	80070ae <UART_SetConfig+0x1a2>
 800708e:	2300      	movs	r3, #0
 8007090:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007094:	e0ad      	b.n	80071f2 <UART_SetConfig+0x2e6>
 8007096:	2302      	movs	r3, #2
 8007098:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800709c:	e0a9      	b.n	80071f2 <UART_SetConfig+0x2e6>
 800709e:	2304      	movs	r3, #4
 80070a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070a4:	e0a5      	b.n	80071f2 <UART_SetConfig+0x2e6>
 80070a6:	2308      	movs	r3, #8
 80070a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ac:	e0a1      	b.n	80071f2 <UART_SetConfig+0x2e6>
 80070ae:	2310      	movs	r3, #16
 80070b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070b4:	e09d      	b.n	80071f2 <UART_SetConfig+0x2e6>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a4a      	ldr	r2, [pc, #296]	@ (80071e4 <UART_SetConfig+0x2d8>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d125      	bne.n	800710c <UART_SetConfig+0x200>
 80070c0:	4b45      	ldr	r3, [pc, #276]	@ (80071d8 <UART_SetConfig+0x2cc>)
 80070c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80070ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80070cc:	d016      	beq.n	80070fc <UART_SetConfig+0x1f0>
 80070ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80070d0:	d818      	bhi.n	8007104 <UART_SetConfig+0x1f8>
 80070d2:	2b80      	cmp	r3, #128	@ 0x80
 80070d4:	d00a      	beq.n	80070ec <UART_SetConfig+0x1e0>
 80070d6:	2b80      	cmp	r3, #128	@ 0x80
 80070d8:	d814      	bhi.n	8007104 <UART_SetConfig+0x1f8>
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d002      	beq.n	80070e4 <UART_SetConfig+0x1d8>
 80070de:	2b40      	cmp	r3, #64	@ 0x40
 80070e0:	d008      	beq.n	80070f4 <UART_SetConfig+0x1e8>
 80070e2:	e00f      	b.n	8007104 <UART_SetConfig+0x1f8>
 80070e4:	2300      	movs	r3, #0
 80070e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ea:	e082      	b.n	80071f2 <UART_SetConfig+0x2e6>
 80070ec:	2302      	movs	r3, #2
 80070ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070f2:	e07e      	b.n	80071f2 <UART_SetConfig+0x2e6>
 80070f4:	2304      	movs	r3, #4
 80070f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070fa:	e07a      	b.n	80071f2 <UART_SetConfig+0x2e6>
 80070fc:	2308      	movs	r3, #8
 80070fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007102:	e076      	b.n	80071f2 <UART_SetConfig+0x2e6>
 8007104:	2310      	movs	r3, #16
 8007106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800710a:	e072      	b.n	80071f2 <UART_SetConfig+0x2e6>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a35      	ldr	r2, [pc, #212]	@ (80071e8 <UART_SetConfig+0x2dc>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d12a      	bne.n	800716c <UART_SetConfig+0x260>
 8007116:	4b30      	ldr	r3, [pc, #192]	@ (80071d8 <UART_SetConfig+0x2cc>)
 8007118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800711c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007120:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007124:	d01a      	beq.n	800715c <UART_SetConfig+0x250>
 8007126:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800712a:	d81b      	bhi.n	8007164 <UART_SetConfig+0x258>
 800712c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007130:	d00c      	beq.n	800714c <UART_SetConfig+0x240>
 8007132:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007136:	d815      	bhi.n	8007164 <UART_SetConfig+0x258>
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <UART_SetConfig+0x238>
 800713c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007140:	d008      	beq.n	8007154 <UART_SetConfig+0x248>
 8007142:	e00f      	b.n	8007164 <UART_SetConfig+0x258>
 8007144:	2300      	movs	r3, #0
 8007146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800714a:	e052      	b.n	80071f2 <UART_SetConfig+0x2e6>
 800714c:	2302      	movs	r3, #2
 800714e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007152:	e04e      	b.n	80071f2 <UART_SetConfig+0x2e6>
 8007154:	2304      	movs	r3, #4
 8007156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800715a:	e04a      	b.n	80071f2 <UART_SetConfig+0x2e6>
 800715c:	2308      	movs	r3, #8
 800715e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007162:	e046      	b.n	80071f2 <UART_SetConfig+0x2e6>
 8007164:	2310      	movs	r3, #16
 8007166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800716a:	e042      	b.n	80071f2 <UART_SetConfig+0x2e6>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a17      	ldr	r2, [pc, #92]	@ (80071d0 <UART_SetConfig+0x2c4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d13a      	bne.n	80071ec <UART_SetConfig+0x2e0>
 8007176:	4b18      	ldr	r3, [pc, #96]	@ (80071d8 <UART_SetConfig+0x2cc>)
 8007178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007180:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007184:	d01a      	beq.n	80071bc <UART_SetConfig+0x2b0>
 8007186:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800718a:	d81b      	bhi.n	80071c4 <UART_SetConfig+0x2b8>
 800718c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007190:	d00c      	beq.n	80071ac <UART_SetConfig+0x2a0>
 8007192:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007196:	d815      	bhi.n	80071c4 <UART_SetConfig+0x2b8>
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <UART_SetConfig+0x298>
 800719c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071a0:	d008      	beq.n	80071b4 <UART_SetConfig+0x2a8>
 80071a2:	e00f      	b.n	80071c4 <UART_SetConfig+0x2b8>
 80071a4:	2300      	movs	r3, #0
 80071a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071aa:	e022      	b.n	80071f2 <UART_SetConfig+0x2e6>
 80071ac:	2302      	movs	r3, #2
 80071ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071b2:	e01e      	b.n	80071f2 <UART_SetConfig+0x2e6>
 80071b4:	2304      	movs	r3, #4
 80071b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ba:	e01a      	b.n	80071f2 <UART_SetConfig+0x2e6>
 80071bc:	2308      	movs	r3, #8
 80071be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071c2:	e016      	b.n	80071f2 <UART_SetConfig+0x2e6>
 80071c4:	2310      	movs	r3, #16
 80071c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ca:	e012      	b.n	80071f2 <UART_SetConfig+0x2e6>
 80071cc:	efff69f3 	.word	0xefff69f3
 80071d0:	40008000 	.word	0x40008000
 80071d4:	40013800 	.word	0x40013800
 80071d8:	40021000 	.word	0x40021000
 80071dc:	40004400 	.word	0x40004400
 80071e0:	40004800 	.word	0x40004800
 80071e4:	40004c00 	.word	0x40004c00
 80071e8:	40005000 	.word	0x40005000
 80071ec:	2310      	movs	r3, #16
 80071ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a9f      	ldr	r2, [pc, #636]	@ (8007474 <UART_SetConfig+0x568>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d17a      	bne.n	80072f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007200:	2b08      	cmp	r3, #8
 8007202:	d824      	bhi.n	800724e <UART_SetConfig+0x342>
 8007204:	a201      	add	r2, pc, #4	@ (adr r2, 800720c <UART_SetConfig+0x300>)
 8007206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720a:	bf00      	nop
 800720c:	08007231 	.word	0x08007231
 8007210:	0800724f 	.word	0x0800724f
 8007214:	08007239 	.word	0x08007239
 8007218:	0800724f 	.word	0x0800724f
 800721c:	0800723f 	.word	0x0800723f
 8007220:	0800724f 	.word	0x0800724f
 8007224:	0800724f 	.word	0x0800724f
 8007228:	0800724f 	.word	0x0800724f
 800722c:	08007247 	.word	0x08007247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007230:	f7fe faaa 	bl	8005788 <HAL_RCC_GetPCLK1Freq>
 8007234:	61f8      	str	r0, [r7, #28]
        break;
 8007236:	e010      	b.n	800725a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007238:	4b8f      	ldr	r3, [pc, #572]	@ (8007478 <UART_SetConfig+0x56c>)
 800723a:	61fb      	str	r3, [r7, #28]
        break;
 800723c:	e00d      	b.n	800725a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800723e:	f7fe fa0b 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 8007242:	61f8      	str	r0, [r7, #28]
        break;
 8007244:	e009      	b.n	800725a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800724a:	61fb      	str	r3, [r7, #28]
        break;
 800724c:	e005      	b.n	800725a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007258:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 80fb 	beq.w	8007458 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	4613      	mov	r3, r2
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	4413      	add	r3, r2
 800726c:	69fa      	ldr	r2, [r7, #28]
 800726e:	429a      	cmp	r2, r3
 8007270:	d305      	bcc.n	800727e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007278:	69fa      	ldr	r2, [r7, #28]
 800727a:	429a      	cmp	r2, r3
 800727c:	d903      	bls.n	8007286 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007284:	e0e8      	b.n	8007458 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	2200      	movs	r2, #0
 800728a:	461c      	mov	r4, r3
 800728c:	4615      	mov	r5, r2
 800728e:	f04f 0200 	mov.w	r2, #0
 8007292:	f04f 0300 	mov.w	r3, #0
 8007296:	022b      	lsls	r3, r5, #8
 8007298:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800729c:	0222      	lsls	r2, r4, #8
 800729e:	68f9      	ldr	r1, [r7, #12]
 80072a0:	6849      	ldr	r1, [r1, #4]
 80072a2:	0849      	lsrs	r1, r1, #1
 80072a4:	2000      	movs	r0, #0
 80072a6:	4688      	mov	r8, r1
 80072a8:	4681      	mov	r9, r0
 80072aa:	eb12 0a08 	adds.w	sl, r2, r8
 80072ae:	eb43 0b09 	adc.w	fp, r3, r9
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	603b      	str	r3, [r7, #0]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072c0:	4650      	mov	r0, sl
 80072c2:	4659      	mov	r1, fp
 80072c4:	f7f8 ff94 	bl	80001f0 <__aeabi_uldivmod>
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	4613      	mov	r3, r2
 80072ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072d6:	d308      	bcc.n	80072ea <UART_SetConfig+0x3de>
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072de:	d204      	bcs.n	80072ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	60da      	str	r2, [r3, #12]
 80072e8:	e0b6      	b.n	8007458 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80072f0:	e0b2      	b.n	8007458 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072fa:	d15e      	bne.n	80073ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80072fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007300:	2b08      	cmp	r3, #8
 8007302:	d828      	bhi.n	8007356 <UART_SetConfig+0x44a>
 8007304:	a201      	add	r2, pc, #4	@ (adr r2, 800730c <UART_SetConfig+0x400>)
 8007306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730a:	bf00      	nop
 800730c:	08007331 	.word	0x08007331
 8007310:	08007339 	.word	0x08007339
 8007314:	08007341 	.word	0x08007341
 8007318:	08007357 	.word	0x08007357
 800731c:	08007347 	.word	0x08007347
 8007320:	08007357 	.word	0x08007357
 8007324:	08007357 	.word	0x08007357
 8007328:	08007357 	.word	0x08007357
 800732c:	0800734f 	.word	0x0800734f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007330:	f7fe fa2a 	bl	8005788 <HAL_RCC_GetPCLK1Freq>
 8007334:	61f8      	str	r0, [r7, #28]
        break;
 8007336:	e014      	b.n	8007362 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007338:	f7fe fa3c 	bl	80057b4 <HAL_RCC_GetPCLK2Freq>
 800733c:	61f8      	str	r0, [r7, #28]
        break;
 800733e:	e010      	b.n	8007362 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007340:	4b4d      	ldr	r3, [pc, #308]	@ (8007478 <UART_SetConfig+0x56c>)
 8007342:	61fb      	str	r3, [r7, #28]
        break;
 8007344:	e00d      	b.n	8007362 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007346:	f7fe f987 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 800734a:	61f8      	str	r0, [r7, #28]
        break;
 800734c:	e009      	b.n	8007362 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800734e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007352:	61fb      	str	r3, [r7, #28]
        break;
 8007354:	e005      	b.n	8007362 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007360:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d077      	beq.n	8007458 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	005a      	lsls	r2, r3, #1
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	085b      	lsrs	r3, r3, #1
 8007372:	441a      	add	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	fbb2 f3f3 	udiv	r3, r2, r3
 800737c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	2b0f      	cmp	r3, #15
 8007382:	d916      	bls.n	80073b2 <UART_SetConfig+0x4a6>
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800738a:	d212      	bcs.n	80073b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	b29b      	uxth	r3, r3
 8007390:	f023 030f 	bic.w	r3, r3, #15
 8007394:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	085b      	lsrs	r3, r3, #1
 800739a:	b29b      	uxth	r3, r3
 800739c:	f003 0307 	and.w	r3, r3, #7
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	8afb      	ldrh	r3, [r7, #22]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	8afa      	ldrh	r2, [r7, #22]
 80073ae:	60da      	str	r2, [r3, #12]
 80073b0:	e052      	b.n	8007458 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80073b8:	e04e      	b.n	8007458 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80073be:	2b08      	cmp	r3, #8
 80073c0:	d827      	bhi.n	8007412 <UART_SetConfig+0x506>
 80073c2:	a201      	add	r2, pc, #4	@ (adr r2, 80073c8 <UART_SetConfig+0x4bc>)
 80073c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c8:	080073ed 	.word	0x080073ed
 80073cc:	080073f5 	.word	0x080073f5
 80073d0:	080073fd 	.word	0x080073fd
 80073d4:	08007413 	.word	0x08007413
 80073d8:	08007403 	.word	0x08007403
 80073dc:	08007413 	.word	0x08007413
 80073e0:	08007413 	.word	0x08007413
 80073e4:	08007413 	.word	0x08007413
 80073e8:	0800740b 	.word	0x0800740b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073ec:	f7fe f9cc 	bl	8005788 <HAL_RCC_GetPCLK1Freq>
 80073f0:	61f8      	str	r0, [r7, #28]
        break;
 80073f2:	e014      	b.n	800741e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073f4:	f7fe f9de 	bl	80057b4 <HAL_RCC_GetPCLK2Freq>
 80073f8:	61f8      	str	r0, [r7, #28]
        break;
 80073fa:	e010      	b.n	800741e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073fc:	4b1e      	ldr	r3, [pc, #120]	@ (8007478 <UART_SetConfig+0x56c>)
 80073fe:	61fb      	str	r3, [r7, #28]
        break;
 8007400:	e00d      	b.n	800741e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007402:	f7fe f929 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 8007406:	61f8      	str	r0, [r7, #28]
        break;
 8007408:	e009      	b.n	800741e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800740a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800740e:	61fb      	str	r3, [r7, #28]
        break;
 8007410:	e005      	b.n	800741e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800741c:	bf00      	nop
    }

    if (pclk != 0U)
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d019      	beq.n	8007458 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	085a      	lsrs	r2, r3, #1
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	441a      	add	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	fbb2 f3f3 	udiv	r3, r2, r3
 8007436:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	2b0f      	cmp	r3, #15
 800743c:	d909      	bls.n	8007452 <UART_SetConfig+0x546>
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007444:	d205      	bcs.n	8007452 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	b29a      	uxth	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	60da      	str	r2, [r3, #12]
 8007450:	e002      	b.n	8007458 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007464:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007468:	4618      	mov	r0, r3
 800746a:	3728      	adds	r7, #40	@ 0x28
 800746c:	46bd      	mov	sp, r7
 800746e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007472:	bf00      	nop
 8007474:	40008000 	.word	0x40008000
 8007478:	00f42400 	.word	0x00f42400

0800747c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007488:	f003 0308 	and.w	r3, r3, #8
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00a      	beq.n	80074a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00a      	beq.n	80074c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074cc:	f003 0302 	and.w	r3, r3, #2
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00a      	beq.n	80074ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ee:	f003 0304 	and.w	r3, r3, #4
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00a      	beq.n	800750c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	430a      	orrs	r2, r1
 800750a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007510:	f003 0310 	and.w	r3, r3, #16
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00a      	beq.n	800752e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007532:	f003 0320 	and.w	r3, r3, #32
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00a      	beq.n	8007550 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007558:	2b00      	cmp	r3, #0
 800755a:	d01a      	beq.n	8007592 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007576:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800757a:	d10a      	bne.n	8007592 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	430a      	orrs	r2, r1
 80075b2:	605a      	str	r2, [r3, #4]
  }
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b098      	sub	sp, #96	@ 0x60
 80075c4:	af02      	add	r7, sp, #8
 80075c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075d0:	f7fa f948 	bl	8001864 <HAL_GetTick>
 80075d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0308 	and.w	r3, r3, #8
 80075e0:	2b08      	cmp	r3, #8
 80075e2:	d12e      	bne.n	8007642 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075ec:	2200      	movs	r2, #0
 80075ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f88c 	bl	8007710 <UART_WaitOnFlagUntilTimeout>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d021      	beq.n	8007642 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007606:	e853 3f00 	ldrex	r3, [r3]
 800760a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800760c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800760e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007612:	653b      	str	r3, [r7, #80]	@ 0x50
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	461a      	mov	r2, r3
 800761a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800761c:	647b      	str	r3, [r7, #68]	@ 0x44
 800761e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007620:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007622:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007624:	e841 2300 	strex	r3, r2, [r1]
 8007628:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800762a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1e6      	bne.n	80075fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2220      	movs	r2, #32
 8007634:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e062      	b.n	8007708 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b04      	cmp	r3, #4
 800764e:	d149      	bne.n	80076e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007650:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007658:	2200      	movs	r2, #0
 800765a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f856 	bl	8007710 <UART_WaitOnFlagUntilTimeout>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d03c      	beq.n	80076e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007672:	e853 3f00 	ldrex	r3, [r3]
 8007676:	623b      	str	r3, [r7, #32]
   return(result);
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800767e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	461a      	mov	r2, r3
 8007686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007688:	633b      	str	r3, [r7, #48]	@ 0x30
 800768a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800768e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007690:	e841 2300 	strex	r3, r2, [r1]
 8007694:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1e6      	bne.n	800766a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3308      	adds	r3, #8
 80076a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 0301 	bic.w	r3, r3, #1
 80076b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3308      	adds	r3, #8
 80076ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076bc:	61fa      	str	r2, [r7, #28]
 80076be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	69b9      	ldr	r1, [r7, #24]
 80076c2:	69fa      	ldr	r2, [r7, #28]
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	617b      	str	r3, [r7, #20]
   return(result);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e5      	bne.n	800769c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e011      	b.n	8007708 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2220      	movs	r2, #32
 80076e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2220      	movs	r2, #32
 80076ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3758      	adds	r7, #88	@ 0x58
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	603b      	str	r3, [r7, #0]
 800771c:	4613      	mov	r3, r2
 800771e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007720:	e04f      	b.n	80077c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007728:	d04b      	beq.n	80077c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800772a:	f7fa f89b 	bl	8001864 <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	429a      	cmp	r2, r3
 8007738:	d302      	bcc.n	8007740 <UART_WaitOnFlagUntilTimeout+0x30>
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e04e      	b.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0304 	and.w	r3, r3, #4
 800774e:	2b00      	cmp	r3, #0
 8007750:	d037      	beq.n	80077c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2b80      	cmp	r3, #128	@ 0x80
 8007756:	d034      	beq.n	80077c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2b40      	cmp	r3, #64	@ 0x40
 800775c:	d031      	beq.n	80077c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	f003 0308 	and.w	r3, r3, #8
 8007768:	2b08      	cmp	r3, #8
 800776a:	d110      	bne.n	800778e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2208      	movs	r2, #8
 8007772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f838 	bl	80077ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2208      	movs	r2, #8
 800777e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e029      	b.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800779c:	d111      	bne.n	80077c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 f81e 	bl	80077ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e00f      	b.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	69da      	ldr	r2, [r3, #28]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	4013      	ands	r3, r2
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	bf0c      	ite	eq
 80077d2:	2301      	moveq	r3, #1
 80077d4:	2300      	movne	r3, #0
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	79fb      	ldrb	r3, [r7, #7]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d0a0      	beq.n	8007722 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b095      	sub	sp, #84	@ 0x54
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077fa:	e853 3f00 	ldrex	r3, [r3]
 80077fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	461a      	mov	r2, r3
 800780e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007810:	643b      	str	r3, [r7, #64]	@ 0x40
 8007812:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007814:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007816:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007818:	e841 2300 	strex	r3, r2, [r1]
 800781c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800781e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e6      	bne.n	80077f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3308      	adds	r3, #8
 800782a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	e853 3f00 	ldrex	r3, [r3]
 8007832:	61fb      	str	r3, [r7, #28]
   return(result);
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	f023 0301 	bic.w	r3, r3, #1
 800783a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3308      	adds	r3, #8
 8007842:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007844:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007846:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007848:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800784a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800784c:	e841 2300 	strex	r3, r2, [r1]
 8007850:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1e5      	bne.n	8007824 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800785c:	2b01      	cmp	r3, #1
 800785e:	d118      	bne.n	8007892 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	60bb      	str	r3, [r7, #8]
   return(result);
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f023 0310 	bic.w	r3, r3, #16
 8007874:	647b      	str	r3, [r7, #68]	@ 0x44
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800787e:	61bb      	str	r3, [r7, #24]
 8007880:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007882:	6979      	ldr	r1, [r7, #20]
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	613b      	str	r3, [r7, #16]
   return(result);
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1e6      	bne.n	8007860 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2220      	movs	r2, #32
 8007896:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80078a6:	bf00      	nop
 80078a8:	3754      	adds	r7, #84	@ 0x54
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7ff fb05 	bl	8006ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078d6:	bf00      	nop
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b088      	sub	sp, #32
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	e853 3f00 	ldrex	r3, [r3]
 80078f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078fa:	61fb      	str	r3, [r7, #28]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	61bb      	str	r3, [r7, #24]
 8007906:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6979      	ldr	r1, [r7, #20]
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	613b      	str	r3, [r7, #16]
   return(result);
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e6      	bne.n	80078e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2220      	movs	r2, #32
 800791c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7ff fad1 	bl	8006ecc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800792a:	bf00      	nop
 800792c:	3720      	adds	r7, #32
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800793a:	bf00      	nop
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
	...

08007948 <__NVIC_SetPriority>:
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	6039      	str	r1, [r7, #0]
 8007952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007958:	2b00      	cmp	r3, #0
 800795a:	db0a      	blt.n	8007972 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	b2da      	uxtb	r2, r3
 8007960:	490c      	ldr	r1, [pc, #48]	@ (8007994 <__NVIC_SetPriority+0x4c>)
 8007962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007966:	0112      	lsls	r2, r2, #4
 8007968:	b2d2      	uxtb	r2, r2
 800796a:	440b      	add	r3, r1
 800796c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007970:	e00a      	b.n	8007988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	b2da      	uxtb	r2, r3
 8007976:	4908      	ldr	r1, [pc, #32]	@ (8007998 <__NVIC_SetPriority+0x50>)
 8007978:	79fb      	ldrb	r3, [r7, #7]
 800797a:	f003 030f 	and.w	r3, r3, #15
 800797e:	3b04      	subs	r3, #4
 8007980:	0112      	lsls	r2, r2, #4
 8007982:	b2d2      	uxtb	r2, r2
 8007984:	440b      	add	r3, r1
 8007986:	761a      	strb	r2, [r3, #24]
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	e000e100 	.word	0xe000e100
 8007998:	e000ed00 	.word	0xe000ed00

0800799c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80079a0:	4b05      	ldr	r3, [pc, #20]	@ (80079b8 <SysTick_Handler+0x1c>)
 80079a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80079a4:	f001 fec6 	bl	8009734 <xTaskGetSchedulerState>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d001      	beq.n	80079b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80079ae:	f002 fcbb 	bl	800a328 <xPortSysTickHandler>
  }
}
 80079b2:	bf00      	nop
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	e000e010 	.word	0xe000e010

080079bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80079c0:	2100      	movs	r1, #0
 80079c2:	f06f 0004 	mvn.w	r0, #4
 80079c6:	f7ff ffbf 	bl	8007948 <__NVIC_SetPriority>
#endif
}
 80079ca:	bf00      	nop
 80079cc:	bd80      	pop	{r7, pc}
	...

080079d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079d6:	f3ef 8305 	mrs	r3, IPSR
 80079da:	603b      	str	r3, [r7, #0]
  return(result);
 80079dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d003      	beq.n	80079ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80079e2:	f06f 0305 	mvn.w	r3, #5
 80079e6:	607b      	str	r3, [r7, #4]
 80079e8:	e00c      	b.n	8007a04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80079ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007a14 <osKernelInitialize+0x44>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d105      	bne.n	80079fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80079f2:	4b08      	ldr	r3, [pc, #32]	@ (8007a14 <osKernelInitialize+0x44>)
 80079f4:	2201      	movs	r2, #1
 80079f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	607b      	str	r3, [r7, #4]
 80079fc:	e002      	b.n	8007a04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80079fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a04:	687b      	ldr	r3, [r7, #4]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	200002f4 	.word	0x200002f4

08007a18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a1e:	f3ef 8305 	mrs	r3, IPSR
 8007a22:	603b      	str	r3, [r7, #0]
  return(result);
 8007a24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007a2a:	f06f 0305 	mvn.w	r3, #5
 8007a2e:	607b      	str	r3, [r7, #4]
 8007a30:	e010      	b.n	8007a54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007a32:	4b0b      	ldr	r3, [pc, #44]	@ (8007a60 <osKernelStart+0x48>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d109      	bne.n	8007a4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007a3a:	f7ff ffbf 	bl	80079bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a3e:	4b08      	ldr	r3, [pc, #32]	@ (8007a60 <osKernelStart+0x48>)
 8007a40:	2202      	movs	r2, #2
 8007a42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a44:	f001 fa12 	bl	8008e6c <vTaskStartScheduler>
      stat = osOK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	607b      	str	r3, [r7, #4]
 8007a4c:	e002      	b.n	8007a54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007a4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a54:	687b      	ldr	r3, [r7, #4]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	200002f4 	.word	0x200002f4

08007a64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08e      	sub	sp, #56	@ 0x38
 8007a68:	af04      	add	r7, sp, #16
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a70:	2300      	movs	r3, #0
 8007a72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a74:	f3ef 8305 	mrs	r3, IPSR
 8007a78:	617b      	str	r3, [r7, #20]
  return(result);
 8007a7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d17e      	bne.n	8007b7e <osThreadNew+0x11a>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d07b      	beq.n	8007b7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007a86:	2380      	movs	r3, #128	@ 0x80
 8007a88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007a8a:	2318      	movs	r3, #24
 8007a8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007a92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d045      	beq.n	8007b2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d002      	beq.n	8007aac <osThreadNew+0x48>
        name = attr->name;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d008      	beq.n	8007ad2 <osThreadNew+0x6e>
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	2b38      	cmp	r3, #56	@ 0x38
 8007ac4:	d805      	bhi.n	8007ad2 <osThreadNew+0x6e>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <osThreadNew+0x72>
        return (NULL);
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e054      	b.n	8007b80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	089b      	lsrs	r3, r3, #2
 8007ae4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00e      	beq.n	8007b0c <osThreadNew+0xa8>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	2ba7      	cmp	r3, #167	@ 0xa7
 8007af4:	d90a      	bls.n	8007b0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d006      	beq.n	8007b0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d002      	beq.n	8007b0c <osThreadNew+0xa8>
        mem = 1;
 8007b06:	2301      	movs	r3, #1
 8007b08:	61bb      	str	r3, [r7, #24]
 8007b0a:	e010      	b.n	8007b2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10c      	bne.n	8007b2e <osThreadNew+0xca>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d108      	bne.n	8007b2e <osThreadNew+0xca>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d104      	bne.n	8007b2e <osThreadNew+0xca>
          mem = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	61bb      	str	r3, [r7, #24]
 8007b28:	e001      	b.n	8007b2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d110      	bne.n	8007b56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b3c:	9202      	str	r2, [sp, #8]
 8007b3e:	9301      	str	r3, [sp, #4]
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	6a3a      	ldr	r2, [r7, #32]
 8007b48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 ff9a 	bl	8008a84 <xTaskCreateStatic>
 8007b50:	4603      	mov	r3, r0
 8007b52:	613b      	str	r3, [r7, #16]
 8007b54:	e013      	b.n	8007b7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d110      	bne.n	8007b7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	f107 0310 	add.w	r3, r7, #16
 8007b64:	9301      	str	r3, [sp, #4]
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 ffe8 	bl	8008b44 <xTaskCreate>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d001      	beq.n	8007b7e <osThreadNew+0x11a>
            hTask = NULL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007b7e:	693b      	ldr	r3, [r7, #16]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3728      	adds	r7, #40	@ 0x28
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b90:	f3ef 8305 	mrs	r3, IPSR
 8007b94:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b96:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <osDelay+0x1c>
    stat = osErrorISR;
 8007b9c:	f06f 0305 	mvn.w	r3, #5
 8007ba0:	60fb      	str	r3, [r7, #12]
 8007ba2:	e007      	b.n	8007bb4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f001 f926 	bl	8008e00 <vTaskDelay>
    }
  }

  return (stat);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b08a      	sub	sp, #40	@ 0x28
 8007bc2:	af02      	add	r7, sp, #8
 8007bc4:	60f8      	str	r0, [r7, #12]
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bce:	f3ef 8305 	mrs	r3, IPSR
 8007bd2:	613b      	str	r3, [r7, #16]
  return(result);
 8007bd4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d175      	bne.n	8007cc6 <osSemaphoreNew+0x108>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d072      	beq.n	8007cc6 <osSemaphoreNew+0x108>
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d86e      	bhi.n	8007cc6 <osSemaphoreNew+0x108>
    mem = -1;
 8007be8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d015      	beq.n	8007c20 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d006      	beq.n	8007c0a <osSemaphoreNew+0x4c>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	2b4f      	cmp	r3, #79	@ 0x4f
 8007c02:	d902      	bls.n	8007c0a <osSemaphoreNew+0x4c>
        mem = 1;
 8007c04:	2301      	movs	r3, #1
 8007c06:	61bb      	str	r3, [r7, #24]
 8007c08:	e00c      	b.n	8007c24 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d108      	bne.n	8007c24 <osSemaphoreNew+0x66>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d104      	bne.n	8007c24 <osSemaphoreNew+0x66>
          mem = 0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61bb      	str	r3, [r7, #24]
 8007c1e:	e001      	b.n	8007c24 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007c20:	2300      	movs	r3, #0
 8007c22:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c2a:	d04c      	beq.n	8007cc6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d128      	bne.n	8007c84 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d10a      	bne.n	8007c4e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	2203      	movs	r2, #3
 8007c3e:	9200      	str	r2, [sp, #0]
 8007c40:	2200      	movs	r2, #0
 8007c42:	2100      	movs	r1, #0
 8007c44:	2001      	movs	r0, #1
 8007c46:	f000 f995 	bl	8007f74 <xQueueGenericCreateStatic>
 8007c4a:	61f8      	str	r0, [r7, #28]
 8007c4c:	e005      	b.n	8007c5a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007c4e:	2203      	movs	r2, #3
 8007c50:	2100      	movs	r1, #0
 8007c52:	2001      	movs	r0, #1
 8007c54:	f000 fa0b 	bl	800806e <xQueueGenericCreate>
 8007c58:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d022      	beq.n	8007ca6 <osSemaphoreNew+0xe8>
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d01f      	beq.n	8007ca6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007c66:	2300      	movs	r3, #0
 8007c68:	2200      	movs	r2, #0
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	69f8      	ldr	r0, [r7, #28]
 8007c6e:	f000 facb 	bl	8008208 <xQueueGenericSend>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d016      	beq.n	8007ca6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007c78:	69f8      	ldr	r0, [r7, #28]
 8007c7a:	f000 fd47 	bl	800870c <vQueueDelete>
            hSemaphore = NULL;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	61fb      	str	r3, [r7, #28]
 8007c82:	e010      	b.n	8007ca6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d108      	bne.n	8007c9c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	68b9      	ldr	r1, [r7, #8]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 fa49 	bl	800812a <xQueueCreateCountingSemaphoreStatic>
 8007c98:	61f8      	str	r0, [r7, #28]
 8007c9a:	e004      	b.n	8007ca6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007c9c:	68b9      	ldr	r1, [r7, #8]
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 fa7c 	bl	800819c <xQueueCreateCountingSemaphore>
 8007ca4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00c      	beq.n	8007cc6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d003      	beq.n	8007cba <osSemaphoreNew+0xfc>
          name = attr->name;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	617b      	str	r3, [r7, #20]
 8007cb8:	e001      	b.n	8007cbe <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007cbe:	6979      	ldr	r1, [r7, #20]
 8007cc0:	69f8      	ldr	r0, [r7, #28]
 8007cc2:	f000 fe57 	bl	8008974 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007cc6:	69fb      	ldr	r3, [r7, #28]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3720      	adds	r7, #32
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4a07      	ldr	r2, [pc, #28]	@ (8007cfc <vApplicationGetIdleTaskMemory+0x2c>)
 8007ce0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	4a06      	ldr	r2, [pc, #24]	@ (8007d00 <vApplicationGetIdleTaskMemory+0x30>)
 8007ce6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2280      	movs	r2, #128	@ 0x80
 8007cec:	601a      	str	r2, [r3, #0]
}
 8007cee:	bf00      	nop
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	200002f8 	.word	0x200002f8
 8007d00:	200003a0 	.word	0x200003a0

08007d04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4a07      	ldr	r2, [pc, #28]	@ (8007d30 <vApplicationGetTimerTaskMemory+0x2c>)
 8007d14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	4a06      	ldr	r2, [pc, #24]	@ (8007d34 <vApplicationGetTimerTaskMemory+0x30>)
 8007d1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d22:	601a      	str	r2, [r3, #0]
}
 8007d24:	bf00      	nop
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	200005a0 	.word	0x200005a0
 8007d34:	20000648 	.word	0x20000648

08007d38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f103 0208 	add.w	r2, r3, #8
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f103 0208 	add.w	r2, r3, #8
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f103 0208 	add.w	r2, r3, #8
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d92:	b480      	push	{r7}
 8007d94:	b085      	sub	sp, #20
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	689a      	ldr	r2, [r3, #8]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	601a      	str	r2, [r3, #0]
}
 8007dce:	bf00      	nop
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b085      	sub	sp, #20
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007df0:	d103      	bne.n	8007dfa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	e00c      	b.n	8007e14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3308      	adds	r3, #8
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	e002      	b.n	8007e08 <vListInsert+0x2e>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d2f6      	bcs.n	8007e02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	1c5a      	adds	r2, r3, #1
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	601a      	str	r2, [r3, #0]
}
 8007e40:	bf00      	nop
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	6892      	ldr	r2, [r2, #8]
 8007e62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	6852      	ldr	r2, [r2, #4]
 8007e6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d103      	bne.n	8007e80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	1e5a      	subs	r2, r3, #1
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10b      	bne.n	8007ecc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007ec6:	bf00      	nop
 8007ec8:	bf00      	nop
 8007eca:	e7fd      	b.n	8007ec8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ecc:	f002 f99c 	bl	800a208 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ed8:	68f9      	ldr	r1, [r7, #12]
 8007eda:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007edc:	fb01 f303 	mul.w	r3, r1, r3
 8007ee0:	441a      	add	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007efc:	3b01      	subs	r3, #1
 8007efe:	68f9      	ldr	r1, [r7, #12]
 8007f00:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f02:	fb01 f303 	mul.w	r3, r1, r3
 8007f06:	441a      	add	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	22ff      	movs	r2, #255	@ 0xff
 8007f10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	22ff      	movs	r2, #255	@ 0xff
 8007f18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d114      	bne.n	8007f4c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d01a      	beq.n	8007f60 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	3310      	adds	r3, #16
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f001 fa3a 	bl	80093a8 <xTaskRemoveFromEventList>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d012      	beq.n	8007f60 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f70 <xQueueGenericReset+0xd0>)
 8007f3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	e009      	b.n	8007f60 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3310      	adds	r3, #16
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7ff fef1 	bl	8007d38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3324      	adds	r3, #36	@ 0x24
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff feec 	bl	8007d38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f60:	f002 f984 	bl	800a26c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f64:	2301      	movs	r3, #1
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	e000ed04 	.word	0xe000ed04

08007f74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b08e      	sub	sp, #56	@ 0x38
 8007f78:	af02      	add	r7, sp, #8
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
 8007f80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10b      	bne.n	8007fa0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f9a:	bf00      	nop
 8007f9c:	bf00      	nop
 8007f9e:	e7fd      	b.n	8007f9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10b      	bne.n	8007fbe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007fb8:	bf00      	nop
 8007fba:	bf00      	nop
 8007fbc:	e7fd      	b.n	8007fba <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <xQueueGenericCreateStatic+0x56>
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <xQueueGenericCreateStatic+0x5a>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e000      	b.n	8007fd0 <xQueueGenericCreateStatic+0x5c>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10b      	bne.n	8007fec <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	623b      	str	r3, [r7, #32]
}
 8007fe6:	bf00      	nop
 8007fe8:	bf00      	nop
 8007fea:	e7fd      	b.n	8007fe8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d102      	bne.n	8007ff8 <xQueueGenericCreateStatic+0x84>
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <xQueueGenericCreateStatic+0x88>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e000      	b.n	8007ffe <xQueueGenericCreateStatic+0x8a>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10b      	bne.n	800801a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	61fb      	str	r3, [r7, #28]
}
 8008014:	bf00      	nop
 8008016:	bf00      	nop
 8008018:	e7fd      	b.n	8008016 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800801a:	2350      	movs	r3, #80	@ 0x50
 800801c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	2b50      	cmp	r3, #80	@ 0x50
 8008022:	d00b      	beq.n	800803c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	61bb      	str	r3, [r7, #24]
}
 8008036:	bf00      	nop
 8008038:	bf00      	nop
 800803a:	e7fd      	b.n	8008038 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800803c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00d      	beq.n	8008064 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008050:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	4613      	mov	r3, r2
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	68b9      	ldr	r1, [r7, #8]
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 f840 	bl	80080e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008066:	4618      	mov	r0, r3
 8008068:	3730      	adds	r7, #48	@ 0x30
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800806e:	b580      	push	{r7, lr}
 8008070:	b08a      	sub	sp, #40	@ 0x28
 8008072:	af02      	add	r7, sp, #8
 8008074:	60f8      	str	r0, [r7, #12]
 8008076:	60b9      	str	r1, [r7, #8]
 8008078:	4613      	mov	r3, r2
 800807a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10b      	bne.n	800809a <xQueueGenericCreate+0x2c>
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	613b      	str	r3, [r7, #16]
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop
 8008098:	e7fd      	b.n	8008096 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	fb02 f303 	mul.w	r3, r2, r3
 80080a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	3350      	adds	r3, #80	@ 0x50
 80080a8:	4618      	mov	r0, r3
 80080aa:	f002 f9cf 	bl	800a44c <pvPortMalloc>
 80080ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d011      	beq.n	80080da <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	3350      	adds	r3, #80	@ 0x50
 80080be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080c8:	79fa      	ldrb	r2, [r7, #7]
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	4613      	mov	r3, r2
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	68b9      	ldr	r1, [r7, #8]
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 f805 	bl	80080e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080da:	69bb      	ldr	r3, [r7, #24]
	}
 80080dc:	4618      	mov	r0, r3
 80080de:	3720      	adds	r7, #32
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
 80080f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d103      	bne.n	8008100 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	e002      	b.n	8008106 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008112:	2101      	movs	r1, #1
 8008114:	69b8      	ldr	r0, [r7, #24]
 8008116:	f7ff fec3 	bl	8007ea0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	78fa      	ldrb	r2, [r7, #3]
 800811e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008122:	bf00      	nop
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800812a:	b580      	push	{r7, lr}
 800812c:	b08a      	sub	sp, #40	@ 0x28
 800812e:	af02      	add	r7, sp, #8
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10b      	bne.n	8008154 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800813c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	61bb      	str	r3, [r7, #24]
}
 800814e:	bf00      	nop
 8008150:	bf00      	nop
 8008152:	e7fd      	b.n	8008150 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	429a      	cmp	r2, r3
 800815a:	d90b      	bls.n	8008174 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	617b      	str	r3, [r7, #20]
}
 800816e:	bf00      	nop
 8008170:	bf00      	nop
 8008172:	e7fd      	b.n	8008170 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008174:	2302      	movs	r3, #2
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	2100      	movs	r1, #0
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f7ff fef8 	bl	8007f74 <xQueueGenericCreateStatic>
 8008184:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008192:	69fb      	ldr	r3, [r7, #28]
	}
 8008194:	4618      	mov	r0, r3
 8008196:	3720      	adds	r7, #32
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10b      	bne.n	80081c4 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80081ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	613b      	str	r3, [r7, #16]
}
 80081be:	bf00      	nop
 80081c0:	bf00      	nop
 80081c2:	e7fd      	b.n	80081c0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d90b      	bls.n	80081e4 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80081cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	60fb      	str	r3, [r7, #12]
}
 80081de:	bf00      	nop
 80081e0:	bf00      	nop
 80081e2:	e7fd      	b.n	80081e0 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80081e4:	2202      	movs	r2, #2
 80081e6:	2100      	movs	r1, #0
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7ff ff40 	bl	800806e <xQueueGenericCreate>
 80081ee:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d002      	beq.n	80081fc <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80081fc:	697b      	ldr	r3, [r7, #20]
	}
 80081fe:	4618      	mov	r0, r3
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08e      	sub	sp, #56	@ 0x38
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
 8008214:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008216:	2300      	movs	r3, #0
 8008218:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800821e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10b      	bne.n	800823c <xQueueGenericSend+0x34>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008236:	bf00      	nop
 8008238:	bf00      	nop
 800823a:	e7fd      	b.n	8008238 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d103      	bne.n	800824a <xQueueGenericSend+0x42>
 8008242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <xQueueGenericSend+0x46>
 800824a:	2301      	movs	r3, #1
 800824c:	e000      	b.n	8008250 <xQueueGenericSend+0x48>
 800824e:	2300      	movs	r3, #0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10b      	bne.n	800826c <xQueueGenericSend+0x64>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008266:	bf00      	nop
 8008268:	bf00      	nop
 800826a:	e7fd      	b.n	8008268 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b02      	cmp	r3, #2
 8008270:	d103      	bne.n	800827a <xQueueGenericSend+0x72>
 8008272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008276:	2b01      	cmp	r3, #1
 8008278:	d101      	bne.n	800827e <xQueueGenericSend+0x76>
 800827a:	2301      	movs	r3, #1
 800827c:	e000      	b.n	8008280 <xQueueGenericSend+0x78>
 800827e:	2300      	movs	r3, #0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10b      	bne.n	800829c <xQueueGenericSend+0x94>
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	623b      	str	r3, [r7, #32]
}
 8008296:	bf00      	nop
 8008298:	bf00      	nop
 800829a:	e7fd      	b.n	8008298 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800829c:	f001 fa4a 	bl	8009734 <xTaskGetSchedulerState>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d102      	bne.n	80082ac <xQueueGenericSend+0xa4>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <xQueueGenericSend+0xa8>
 80082ac:	2301      	movs	r3, #1
 80082ae:	e000      	b.n	80082b2 <xQueueGenericSend+0xaa>
 80082b0:	2300      	movs	r3, #0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10b      	bne.n	80082ce <xQueueGenericSend+0xc6>
	__asm volatile
 80082b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	61fb      	str	r3, [r7, #28]
}
 80082c8:	bf00      	nop
 80082ca:	bf00      	nop
 80082cc:	e7fd      	b.n	80082ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082ce:	f001 ff9b 	bl	800a208 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082da:	429a      	cmp	r2, r3
 80082dc:	d302      	bcc.n	80082e4 <xQueueGenericSend+0xdc>
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d129      	bne.n	8008338 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	68b9      	ldr	r1, [r7, #8]
 80082e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082ea:	f000 fa33 	bl	8008754 <prvCopyDataToQueue>
 80082ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d010      	beq.n	800831a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fa:	3324      	adds	r3, #36	@ 0x24
 80082fc:	4618      	mov	r0, r3
 80082fe:	f001 f853 	bl	80093a8 <xTaskRemoveFromEventList>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d013      	beq.n	8008330 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008308:	4b3f      	ldr	r3, [pc, #252]	@ (8008408 <xQueueGenericSend+0x200>)
 800830a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	e00a      	b.n	8008330 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800831a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800831c:	2b00      	cmp	r3, #0
 800831e:	d007      	beq.n	8008330 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008320:	4b39      	ldr	r3, [pc, #228]	@ (8008408 <xQueueGenericSend+0x200>)
 8008322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008330:	f001 ff9c 	bl	800a26c <vPortExitCritical>
				return pdPASS;
 8008334:	2301      	movs	r3, #1
 8008336:	e063      	b.n	8008400 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d103      	bne.n	8008346 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800833e:	f001 ff95 	bl	800a26c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008342:	2300      	movs	r3, #0
 8008344:	e05c      	b.n	8008400 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008348:	2b00      	cmp	r3, #0
 800834a:	d106      	bne.n	800835a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800834c:	f107 0314 	add.w	r3, r7, #20
 8008350:	4618      	mov	r0, r3
 8008352:	f001 f88d 	bl	8009470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008356:	2301      	movs	r3, #1
 8008358:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800835a:	f001 ff87 	bl	800a26c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800835e:	f000 fdf5 	bl	8008f4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008362:	f001 ff51 	bl	800a208 <vPortEnterCritical>
 8008366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008368:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800836c:	b25b      	sxtb	r3, r3
 800836e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008372:	d103      	bne.n	800837c <xQueueGenericSend+0x174>
 8008374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008376:	2200      	movs	r2, #0
 8008378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800837c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800837e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008382:	b25b      	sxtb	r3, r3
 8008384:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008388:	d103      	bne.n	8008392 <xQueueGenericSend+0x18a>
 800838a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008392:	f001 ff6b 	bl	800a26c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008396:	1d3a      	adds	r2, r7, #4
 8008398:	f107 0314 	add.w	r3, r7, #20
 800839c:	4611      	mov	r1, r2
 800839e:	4618      	mov	r0, r3
 80083a0:	f001 f87c 	bl	800949c <xTaskCheckForTimeOut>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d124      	bne.n	80083f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80083aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083ac:	f000 faca 	bl	8008944 <prvIsQueueFull>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d018      	beq.n	80083e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80083b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b8:	3310      	adds	r3, #16
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	4611      	mov	r1, r2
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 ffa0 	bl	8009304 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80083c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083c6:	f000 fa55 	bl	8008874 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80083ca:	f000 fdcd 	bl	8008f68 <xTaskResumeAll>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f47f af7c 	bne.w	80082ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80083d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008408 <xQueueGenericSend+0x200>)
 80083d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	e772      	b.n	80082ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083ea:	f000 fa43 	bl	8008874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083ee:	f000 fdbb 	bl	8008f68 <xTaskResumeAll>
 80083f2:	e76c      	b.n	80082ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083f6:	f000 fa3d 	bl	8008874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083fa:	f000 fdb5 	bl	8008f68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008400:	4618      	mov	r0, r3
 8008402:	3738      	adds	r7, #56	@ 0x38
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	e000ed04 	.word	0xe000ed04

0800840c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b090      	sub	sp, #64	@ 0x40
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800841e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10b      	bne.n	800843c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008436:	bf00      	nop
 8008438:	bf00      	nop
 800843a:	e7fd      	b.n	8008438 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d103      	bne.n	800844a <xQueueGenericSendFromISR+0x3e>
 8008442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <xQueueGenericSendFromISR+0x42>
 800844a:	2301      	movs	r3, #1
 800844c:	e000      	b.n	8008450 <xQueueGenericSendFromISR+0x44>
 800844e:	2300      	movs	r3, #0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10b      	bne.n	800846c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008466:	bf00      	nop
 8008468:	bf00      	nop
 800846a:	e7fd      	b.n	8008468 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b02      	cmp	r3, #2
 8008470:	d103      	bne.n	800847a <xQueueGenericSendFromISR+0x6e>
 8008472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008476:	2b01      	cmp	r3, #1
 8008478:	d101      	bne.n	800847e <xQueueGenericSendFromISR+0x72>
 800847a:	2301      	movs	r3, #1
 800847c:	e000      	b.n	8008480 <xQueueGenericSendFromISR+0x74>
 800847e:	2300      	movs	r3, #0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10b      	bne.n	800849c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	623b      	str	r3, [r7, #32]
}
 8008496:	bf00      	nop
 8008498:	bf00      	nop
 800849a:	e7fd      	b.n	8008498 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800849c:	f001 ff94 	bl	800a3c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80084a0:	f3ef 8211 	mrs	r2, BASEPRI
 80084a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	61fa      	str	r2, [r7, #28]
 80084b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80084b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80084ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d302      	bcc.n	80084ce <xQueueGenericSendFromISR+0xc2>
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d12f      	bne.n	800852e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80084ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	68b9      	ldr	r1, [r7, #8]
 80084e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80084e4:	f000 f936 	bl	8008754 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80084ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084f0:	d112      	bne.n	8008518 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d016      	beq.n	8008528 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fc:	3324      	adds	r3, #36	@ 0x24
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 ff52 	bl	80093a8 <xTaskRemoveFromEventList>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00e      	beq.n	8008528 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00b      	beq.n	8008528 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	601a      	str	r2, [r3, #0]
 8008516:	e007      	b.n	8008528 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008518:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800851c:	3301      	adds	r3, #1
 800851e:	b2db      	uxtb	r3, r3
 8008520:	b25a      	sxtb	r2, r3
 8008522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008528:	2301      	movs	r3, #1
 800852a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800852c:	e001      	b.n	8008532 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800852e:	2300      	movs	r3, #0
 8008530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008534:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800853c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800853e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008540:	4618      	mov	r0, r3
 8008542:	3740      	adds	r7, #64	@ 0x40
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b08c      	sub	sp, #48	@ 0x30
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008554:	2300      	movs	r3, #0
 8008556:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800855c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855e:	2b00      	cmp	r3, #0
 8008560:	d10b      	bne.n	800857a <xQueueReceive+0x32>
	__asm volatile
 8008562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	623b      	str	r3, [r7, #32]
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop
 8008578:	e7fd      	b.n	8008576 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d103      	bne.n	8008588 <xQueueReceive+0x40>
 8008580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <xQueueReceive+0x44>
 8008588:	2301      	movs	r3, #1
 800858a:	e000      	b.n	800858e <xQueueReceive+0x46>
 800858c:	2300      	movs	r3, #0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10b      	bne.n	80085aa <xQueueReceive+0x62>
	__asm volatile
 8008592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	61fb      	str	r3, [r7, #28]
}
 80085a4:	bf00      	nop
 80085a6:	bf00      	nop
 80085a8:	e7fd      	b.n	80085a6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085aa:	f001 f8c3 	bl	8009734 <xTaskGetSchedulerState>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d102      	bne.n	80085ba <xQueueReceive+0x72>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <xQueueReceive+0x76>
 80085ba:	2301      	movs	r3, #1
 80085bc:	e000      	b.n	80085c0 <xQueueReceive+0x78>
 80085be:	2300      	movs	r3, #0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10b      	bne.n	80085dc <xQueueReceive+0x94>
	__asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	61bb      	str	r3, [r7, #24]
}
 80085d6:	bf00      	nop
 80085d8:	bf00      	nop
 80085da:	e7fd      	b.n	80085d8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085dc:	f001 fe14 	bl	800a208 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d01f      	beq.n	800862c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085ec:	68b9      	ldr	r1, [r7, #8]
 80085ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085f0:	f000 f91a 	bl	8008828 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f6:	1e5a      	subs	r2, r3, #1
 80085f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00f      	beq.n	8008624 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008606:	3310      	adds	r3, #16
 8008608:	4618      	mov	r0, r3
 800860a:	f000 fecd 	bl	80093a8 <xTaskRemoveFromEventList>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d007      	beq.n	8008624 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008614:	4b3c      	ldr	r3, [pc, #240]	@ (8008708 <xQueueReceive+0x1c0>)
 8008616:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008624:	f001 fe22 	bl	800a26c <vPortExitCritical>
				return pdPASS;
 8008628:	2301      	movs	r3, #1
 800862a:	e069      	b.n	8008700 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d103      	bne.n	800863a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008632:	f001 fe1b 	bl	800a26c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008636:	2300      	movs	r3, #0
 8008638:	e062      	b.n	8008700 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800863a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863c:	2b00      	cmp	r3, #0
 800863e:	d106      	bne.n	800864e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008640:	f107 0310 	add.w	r3, r7, #16
 8008644:	4618      	mov	r0, r3
 8008646:	f000 ff13 	bl	8009470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800864a:	2301      	movs	r3, #1
 800864c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800864e:	f001 fe0d 	bl	800a26c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008652:	f000 fc7b 	bl	8008f4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008656:	f001 fdd7 	bl	800a208 <vPortEnterCritical>
 800865a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008660:	b25b      	sxtb	r3, r3
 8008662:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008666:	d103      	bne.n	8008670 <xQueueReceive+0x128>
 8008668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008672:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008676:	b25b      	sxtb	r3, r3
 8008678:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800867c:	d103      	bne.n	8008686 <xQueueReceive+0x13e>
 800867e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008680:	2200      	movs	r2, #0
 8008682:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008686:	f001 fdf1 	bl	800a26c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800868a:	1d3a      	adds	r2, r7, #4
 800868c:	f107 0310 	add.w	r3, r7, #16
 8008690:	4611      	mov	r1, r2
 8008692:	4618      	mov	r0, r3
 8008694:	f000 ff02 	bl	800949c <xTaskCheckForTimeOut>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d123      	bne.n	80086e6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800869e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086a0:	f000 f93a 	bl	8008918 <prvIsQueueEmpty>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d017      	beq.n	80086da <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ac:	3324      	adds	r3, #36	@ 0x24
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	4611      	mov	r1, r2
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fe26 	bl	8009304 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086ba:	f000 f8db 	bl	8008874 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086be:	f000 fc53 	bl	8008f68 <xTaskResumeAll>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d189      	bne.n	80085dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80086c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008708 <xQueueReceive+0x1c0>)
 80086ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	e780      	b.n	80085dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80086da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086dc:	f000 f8ca 	bl	8008874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086e0:	f000 fc42 	bl	8008f68 <xTaskResumeAll>
 80086e4:	e77a      	b.n	80085dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80086e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086e8:	f000 f8c4 	bl	8008874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086ec:	f000 fc3c 	bl	8008f68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086f2:	f000 f911 	bl	8008918 <prvIsQueueEmpty>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f43f af6f 	beq.w	80085dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008700:	4618      	mov	r0, r3
 8008702:	3730      	adds	r7, #48	@ 0x30
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	e000ed04 	.word	0xe000ed04

0800870c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10b      	bne.n	8008736 <vQueueDelete+0x2a>
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	60bb      	str	r3, [r7, #8]
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	e7fd      	b.n	8008732 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 f946 	bl	80089c8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008742:	2b00      	cmp	r3, #0
 8008744:	d102      	bne.n	800874c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f001 ff4e 	bl	800a5e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800874c:	bf00      	nop
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008760:	2300      	movs	r3, #0
 8008762:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008768:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10d      	bne.n	800878e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d14d      	bne.n	8008816 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fff6 	bl	8009770 <xTaskPriorityDisinherit>
 8008784:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	609a      	str	r2, [r3, #8]
 800878c:	e043      	b.n	8008816 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d119      	bne.n	80087c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6858      	ldr	r0, [r3, #4]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800879c:	461a      	mov	r2, r3
 800879e:	68b9      	ldr	r1, [r7, #8]
 80087a0:	f002 f8c6 	bl	800a930 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	685a      	ldr	r2, [r3, #4]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ac:	441a      	add	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d32b      	bcc.n	8008816 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	605a      	str	r2, [r3, #4]
 80087c6:	e026      	b.n	8008816 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	68d8      	ldr	r0, [r3, #12]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087d0:	461a      	mov	r2, r3
 80087d2:	68b9      	ldr	r1, [r7, #8]
 80087d4:	f002 f8ac 	bl	800a930 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	68da      	ldr	r2, [r3, #12]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e0:	425b      	negs	r3, r3
 80087e2:	441a      	add	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	68da      	ldr	r2, [r3, #12]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d207      	bcs.n	8008804 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087fc:	425b      	negs	r3, r3
 80087fe:	441a      	add	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b02      	cmp	r3, #2
 8008808:	d105      	bne.n	8008816 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d002      	beq.n	8008816 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	3b01      	subs	r3, #1
 8008814:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	1c5a      	adds	r2, r3, #1
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800881e:	697b      	ldr	r3, [r7, #20]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3718      	adds	r7, #24
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008836:	2b00      	cmp	r3, #0
 8008838:	d018      	beq.n	800886c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68da      	ldr	r2, [r3, #12]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008842:	441a      	add	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	68da      	ldr	r2, [r3, #12]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	429a      	cmp	r2, r3
 8008852:	d303      	bcc.n	800885c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68d9      	ldr	r1, [r3, #12]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008864:	461a      	mov	r2, r3
 8008866:	6838      	ldr	r0, [r7, #0]
 8008868:	f002 f862 	bl	800a930 <memcpy>
	}
}
 800886c:	bf00      	nop
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800887c:	f001 fcc4 	bl	800a208 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008886:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008888:	e011      	b.n	80088ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800888e:	2b00      	cmp	r3, #0
 8008890:	d012      	beq.n	80088b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	3324      	adds	r3, #36	@ 0x24
 8008896:	4618      	mov	r0, r3
 8008898:	f000 fd86 	bl	80093a8 <xTaskRemoveFromEventList>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088a2:	f000 fe5f 	bl	8009564 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
 80088a8:	3b01      	subs	r3, #1
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	dce9      	bgt.n	800888a <prvUnlockQueue+0x16>
 80088b6:	e000      	b.n	80088ba <prvUnlockQueue+0x46>
					break;
 80088b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	22ff      	movs	r2, #255	@ 0xff
 80088be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80088c2:	f001 fcd3 	bl	800a26c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80088c6:	f001 fc9f 	bl	800a208 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088d2:	e011      	b.n	80088f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d012      	beq.n	8008902 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	3310      	adds	r3, #16
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 fd61 	bl	80093a8 <xTaskRemoveFromEventList>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d001      	beq.n	80088f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80088ec:	f000 fe3a 	bl	8009564 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80088f0:	7bbb      	ldrb	r3, [r7, #14]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	dce9      	bgt.n	80088d4 <prvUnlockQueue+0x60>
 8008900:	e000      	b.n	8008904 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008902:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	22ff      	movs	r2, #255	@ 0xff
 8008908:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800890c:	f001 fcae 	bl	800a26c <vPortExitCritical>
}
 8008910:	bf00      	nop
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008920:	f001 fc72 	bl	800a208 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008928:	2b00      	cmp	r3, #0
 800892a:	d102      	bne.n	8008932 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800892c:	2301      	movs	r3, #1
 800892e:	60fb      	str	r3, [r7, #12]
 8008930:	e001      	b.n	8008936 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008932:	2300      	movs	r3, #0
 8008934:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008936:	f001 fc99 	bl	800a26c <vPortExitCritical>

	return xReturn;
 800893a:	68fb      	ldr	r3, [r7, #12]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800894c:	f001 fc5c 	bl	800a208 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008958:	429a      	cmp	r2, r3
 800895a:	d102      	bne.n	8008962 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800895c:	2301      	movs	r3, #1
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	e001      	b.n	8008966 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008962:	2300      	movs	r3, #0
 8008964:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008966:	f001 fc81 	bl	800a26c <vPortExitCritical>

	return xReturn;
 800896a:	68fb      	ldr	r3, [r7, #12]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800897e:	2300      	movs	r3, #0
 8008980:	60fb      	str	r3, [r7, #12]
 8008982:	e014      	b.n	80089ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008984:	4a0f      	ldr	r2, [pc, #60]	@ (80089c4 <vQueueAddToRegistry+0x50>)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10b      	bne.n	80089a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008990:	490c      	ldr	r1, [pc, #48]	@ (80089c4 <vQueueAddToRegistry+0x50>)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800899a:	4a0a      	ldr	r2, [pc, #40]	@ (80089c4 <vQueueAddToRegistry+0x50>)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	00db      	lsls	r3, r3, #3
 80089a0:	4413      	add	r3, r2
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089a6:	e006      	b.n	80089b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	3301      	adds	r3, #1
 80089ac:	60fb      	str	r3, [r7, #12]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2b07      	cmp	r3, #7
 80089b2:	d9e7      	bls.n	8008984 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	20000a48 	.word	0x20000a48

080089c8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089d0:	2300      	movs	r3, #0
 80089d2:	60fb      	str	r3, [r7, #12]
 80089d4:	e016      	b.n	8008a04 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80089d6:	4a10      	ldr	r2, [pc, #64]	@ (8008a18 <vQueueUnregisterQueue+0x50>)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	00db      	lsls	r3, r3, #3
 80089dc:	4413      	add	r3, r2
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d10b      	bne.n	80089fe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80089e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008a18 <vQueueUnregisterQueue+0x50>)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2100      	movs	r1, #0
 80089ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80089f0:	4a09      	ldr	r2, [pc, #36]	@ (8008a18 <vQueueUnregisterQueue+0x50>)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	00db      	lsls	r3, r3, #3
 80089f6:	4413      	add	r3, r2
 80089f8:	2200      	movs	r2, #0
 80089fa:	605a      	str	r2, [r3, #4]
				break;
 80089fc:	e006      	b.n	8008a0c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	3301      	adds	r3, #1
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2b07      	cmp	r3, #7
 8008a08:	d9e5      	bls.n	80089d6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008a0a:	bf00      	nop
 8008a0c:	bf00      	nop
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	20000a48 	.word	0x20000a48

08008a1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a2c:	f001 fbec 	bl	800a208 <vPortEnterCritical>
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a36:	b25b      	sxtb	r3, r3
 8008a38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a3c:	d103      	bne.n	8008a46 <vQueueWaitForMessageRestricted+0x2a>
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a4c:	b25b      	sxtb	r3, r3
 8008a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a52:	d103      	bne.n	8008a5c <vQueueWaitForMessageRestricted+0x40>
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a5c:	f001 fc06 	bl	800a26c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d106      	bne.n	8008a76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	3324      	adds	r3, #36	@ 0x24
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	68b9      	ldr	r1, [r7, #8]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 fc6d 	bl	8009350 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a76:	6978      	ldr	r0, [r7, #20]
 8008a78:	f7ff fefc 	bl	8008874 <prvUnlockQueue>
	}
 8008a7c:	bf00      	nop
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b08e      	sub	sp, #56	@ 0x38
 8008a88:	af04      	add	r7, sp, #16
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
 8008a90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10b      	bne.n	8008ab0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	623b      	str	r3, [r7, #32]
}
 8008aaa:	bf00      	nop
 8008aac:	bf00      	nop
 8008aae:	e7fd      	b.n	8008aac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10b      	bne.n	8008ace <xTaskCreateStatic+0x4a>
	__asm volatile
 8008ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	61fb      	str	r3, [r7, #28]
}
 8008ac8:	bf00      	nop
 8008aca:	bf00      	nop
 8008acc:	e7fd      	b.n	8008aca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ace:	23a8      	movs	r3, #168	@ 0xa8
 8008ad0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	2ba8      	cmp	r3, #168	@ 0xa8
 8008ad6:	d00b      	beq.n	8008af0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	61bb      	str	r3, [r7, #24]
}
 8008aea:	bf00      	nop
 8008aec:	bf00      	nop
 8008aee:	e7fd      	b.n	8008aec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008af0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d01e      	beq.n	8008b36 <xTaskCreateStatic+0xb2>
 8008af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d01b      	beq.n	8008b36 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b00:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b06:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b10:	2300      	movs	r3, #0
 8008b12:	9303      	str	r3, [sp, #12]
 8008b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b16:	9302      	str	r3, [sp, #8]
 8008b18:	f107 0314 	add.w	r3, r7, #20
 8008b1c:	9301      	str	r3, [sp, #4]
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	68b9      	ldr	r1, [r7, #8]
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 f851 	bl	8008bd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b30:	f000 f8f6 	bl	8008d20 <prvAddNewTaskToReadyList>
 8008b34:	e001      	b.n	8008b3a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008b36:	2300      	movs	r3, #0
 8008b38:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b3a:	697b      	ldr	r3, [r7, #20]
	}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3728      	adds	r7, #40	@ 0x28
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b08c      	sub	sp, #48	@ 0x30
 8008b48:	af04      	add	r7, sp, #16
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	603b      	str	r3, [r7, #0]
 8008b50:	4613      	mov	r3, r2
 8008b52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b54:	88fb      	ldrh	r3, [r7, #6]
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f001 fc77 	bl	800a44c <pvPortMalloc>
 8008b5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00e      	beq.n	8008b84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b66:	20a8      	movs	r0, #168	@ 0xa8
 8008b68:	f001 fc70 	bl	800a44c <pvPortMalloc>
 8008b6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d003      	beq.n	8008b7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b7a:	e005      	b.n	8008b88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b7c:	6978      	ldr	r0, [r7, #20]
 8008b7e:	f001 fd33 	bl	800a5e8 <vPortFree>
 8008b82:	e001      	b.n	8008b88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b84:	2300      	movs	r3, #0
 8008b86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d017      	beq.n	8008bbe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b96:	88fa      	ldrh	r2, [r7, #6]
 8008b98:	2300      	movs	r3, #0
 8008b9a:	9303      	str	r3, [sp, #12]
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	9302      	str	r3, [sp, #8]
 8008ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba2:	9301      	str	r3, [sp, #4]
 8008ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	68b9      	ldr	r1, [r7, #8]
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 f80f 	bl	8008bd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bb2:	69f8      	ldr	r0, [r7, #28]
 8008bb4:	f000 f8b4 	bl	8008d20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	61bb      	str	r3, [r7, #24]
 8008bbc:	e002      	b.n	8008bc4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008bbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008bc2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008bc4:	69bb      	ldr	r3, [r7, #24]
	}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3720      	adds	r7, #32
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
	...

08008bd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
 8008bdc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	461a      	mov	r2, r3
 8008be8:	21a5      	movs	r1, #165	@ 0xa5
 8008bea:	f001 fe1d 	bl	800a828 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	f023 0307 	bic.w	r3, r3, #7
 8008c06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	f003 0307 	and.w	r3, r3, #7
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00b      	beq.n	8008c2a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	617b      	str	r3, [r7, #20]
}
 8008c24:	bf00      	nop
 8008c26:	bf00      	nop
 8008c28:	e7fd      	b.n	8008c26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d01f      	beq.n	8008c70 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c30:	2300      	movs	r3, #0
 8008c32:	61fb      	str	r3, [r7, #28]
 8008c34:	e012      	b.n	8008c5c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	7819      	ldrb	r1, [r3, #0]
 8008c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	4413      	add	r3, r2
 8008c44:	3334      	adds	r3, #52	@ 0x34
 8008c46:	460a      	mov	r2, r1
 8008c48:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	4413      	add	r3, r2
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d006      	beq.n	8008c64 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	61fb      	str	r3, [r7, #28]
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	2b0f      	cmp	r3, #15
 8008c60:	d9e9      	bls.n	8008c36 <prvInitialiseNewTask+0x66>
 8008c62:	e000      	b.n	8008c66 <prvInitialiseNewTask+0x96>
			{
				break;
 8008c64:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c6e:	e003      	b.n	8008c78 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7a:	2b37      	cmp	r3, #55	@ 0x37
 8008c7c:	d901      	bls.n	8008c82 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c7e:	2337      	movs	r3, #55	@ 0x37
 8008c80:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c86:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c8c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c90:	2200      	movs	r2, #0
 8008c92:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c96:	3304      	adds	r3, #4
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7ff f86d 	bl	8007d78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca0:	3318      	adds	r3, #24
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7ff f868 	bl	8007d78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008caa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cbc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd0:	3354      	adds	r3, #84	@ 0x54
 8008cd2:	224c      	movs	r2, #76	@ 0x4c
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f001 fda6 	bl	800a828 <memset>
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cde:	4a0d      	ldr	r2, [pc, #52]	@ (8008d14 <prvInitialiseNewTask+0x144>)
 8008ce0:	659a      	str	r2, [r3, #88]	@ 0x58
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8008d18 <prvInitialiseNewTask+0x148>)
 8008ce6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cea:	4a0c      	ldr	r2, [pc, #48]	@ (8008d1c <prvInitialiseNewTask+0x14c>)
 8008cec:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	68f9      	ldr	r1, [r7, #12]
 8008cf2:	69b8      	ldr	r0, [r7, #24]
 8008cf4:	f001 f95a 	bl	8009fac <pxPortInitialiseStack>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d002      	beq.n	8008d0a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d0a:	bf00      	nop
 8008d0c:	3720      	adds	r7, #32
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	20001c94 	.word	0x20001c94
 8008d18:	20001cfc 	.word	0x20001cfc
 8008d1c:	20001d64 	.word	0x20001d64

08008d20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d28:	f001 fa6e 	bl	800a208 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8008de4 <prvAddNewTaskToReadyList+0xc4>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3301      	adds	r3, #1
 8008d32:	4a2c      	ldr	r2, [pc, #176]	@ (8008de4 <prvAddNewTaskToReadyList+0xc4>)
 8008d34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d36:	4b2c      	ldr	r3, [pc, #176]	@ (8008de8 <prvAddNewTaskToReadyList+0xc8>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d109      	bne.n	8008d52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8008de8 <prvAddNewTaskToReadyList+0xc8>)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d44:	4b27      	ldr	r3, [pc, #156]	@ (8008de4 <prvAddNewTaskToReadyList+0xc4>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d110      	bne.n	8008d6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d4c:	f000 fc2e 	bl	80095ac <prvInitialiseTaskLists>
 8008d50:	e00d      	b.n	8008d6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d52:	4b26      	ldr	r3, [pc, #152]	@ (8008dec <prvAddNewTaskToReadyList+0xcc>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d109      	bne.n	8008d6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d5a:	4b23      	ldr	r3, [pc, #140]	@ (8008de8 <prvAddNewTaskToReadyList+0xc8>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d802      	bhi.n	8008d6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d68:	4a1f      	ldr	r2, [pc, #124]	@ (8008de8 <prvAddNewTaskToReadyList+0xc8>)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d6e:	4b20      	ldr	r3, [pc, #128]	@ (8008df0 <prvAddNewTaskToReadyList+0xd0>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3301      	adds	r3, #1
 8008d74:	4a1e      	ldr	r2, [pc, #120]	@ (8008df0 <prvAddNewTaskToReadyList+0xd0>)
 8008d76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d78:	4b1d      	ldr	r3, [pc, #116]	@ (8008df0 <prvAddNewTaskToReadyList+0xd0>)
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d84:	4b1b      	ldr	r3, [pc, #108]	@ (8008df4 <prvAddNewTaskToReadyList+0xd4>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d903      	bls.n	8008d94 <prvAddNewTaskToReadyList+0x74>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d90:	4a18      	ldr	r2, [pc, #96]	@ (8008df4 <prvAddNewTaskToReadyList+0xd4>)
 8008d92:	6013      	str	r3, [r2, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d98:	4613      	mov	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	4413      	add	r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4a15      	ldr	r2, [pc, #84]	@ (8008df8 <prvAddNewTaskToReadyList+0xd8>)
 8008da2:	441a      	add	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	3304      	adds	r3, #4
 8008da8:	4619      	mov	r1, r3
 8008daa:	4610      	mov	r0, r2
 8008dac:	f7fe fff1 	bl	8007d92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008db0:	f001 fa5c 	bl	800a26c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008db4:	4b0d      	ldr	r3, [pc, #52]	@ (8008dec <prvAddNewTaskToReadyList+0xcc>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00e      	beq.n	8008dda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8008de8 <prvAddNewTaskToReadyList+0xc8>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d207      	bcs.n	8008dda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008dca:	4b0c      	ldr	r3, [pc, #48]	@ (8008dfc <prvAddNewTaskToReadyList+0xdc>)
 8008dcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dd0:	601a      	str	r2, [r3, #0]
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dda:	bf00      	nop
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	20000f5c 	.word	0x20000f5c
 8008de8:	20000a88 	.word	0x20000a88
 8008dec:	20000f68 	.word	0x20000f68
 8008df0:	20000f78 	.word	0x20000f78
 8008df4:	20000f64 	.word	0x20000f64
 8008df8:	20000a8c 	.word	0x20000a8c
 8008dfc:	e000ed04 	.word	0xe000ed04

08008e00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d018      	beq.n	8008e44 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e12:	4b14      	ldr	r3, [pc, #80]	@ (8008e64 <vTaskDelay+0x64>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00b      	beq.n	8008e32 <vTaskDelay+0x32>
	__asm volatile
 8008e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	60bb      	str	r3, [r7, #8]
}
 8008e2c:	bf00      	nop
 8008e2e:	bf00      	nop
 8008e30:	e7fd      	b.n	8008e2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e32:	f000 f88b 	bl	8008f4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e36:	2100      	movs	r1, #0
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fd09 	bl	8009850 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e3e:	f000 f893 	bl	8008f68 <xTaskResumeAll>
 8008e42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d107      	bne.n	8008e5a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008e4a:	4b07      	ldr	r3, [pc, #28]	@ (8008e68 <vTaskDelay+0x68>)
 8008e4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e50:	601a      	str	r2, [r3, #0]
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e5a:	bf00      	nop
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	20000f84 	.word	0x20000f84
 8008e68:	e000ed04 	.word	0xe000ed04

08008e6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b08a      	sub	sp, #40	@ 0x28
 8008e70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e72:	2300      	movs	r3, #0
 8008e74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e76:	2300      	movs	r3, #0
 8008e78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e7a:	463a      	mov	r2, r7
 8008e7c:	1d39      	adds	r1, r7, #4
 8008e7e:	f107 0308 	add.w	r3, r7, #8
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe ff24 	bl	8007cd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	9202      	str	r2, [sp, #8]
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	2300      	movs	r3, #0
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	2300      	movs	r3, #0
 8008e98:	460a      	mov	r2, r1
 8008e9a:	4924      	ldr	r1, [pc, #144]	@ (8008f2c <vTaskStartScheduler+0xc0>)
 8008e9c:	4824      	ldr	r0, [pc, #144]	@ (8008f30 <vTaskStartScheduler+0xc4>)
 8008e9e:	f7ff fdf1 	bl	8008a84 <xTaskCreateStatic>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	4a23      	ldr	r2, [pc, #140]	@ (8008f34 <vTaskStartScheduler+0xc8>)
 8008ea6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ea8:	4b22      	ldr	r3, [pc, #136]	@ (8008f34 <vTaskStartScheduler+0xc8>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d002      	beq.n	8008eb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	617b      	str	r3, [r7, #20]
 8008eb4:	e001      	b.n	8008eba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d102      	bne.n	8008ec6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ec0:	f000 fd1a 	bl	80098f8 <xTimerCreateTimerTask>
 8008ec4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d11b      	bne.n	8008f04 <vTaskStartScheduler+0x98>
	__asm volatile
 8008ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed0:	f383 8811 	msr	BASEPRI, r3
 8008ed4:	f3bf 8f6f 	isb	sy
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	613b      	str	r3, [r7, #16]
}
 8008ede:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ee0:	4b15      	ldr	r3, [pc, #84]	@ (8008f38 <vTaskStartScheduler+0xcc>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3354      	adds	r3, #84	@ 0x54
 8008ee6:	4a15      	ldr	r2, [pc, #84]	@ (8008f3c <vTaskStartScheduler+0xd0>)
 8008ee8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008eea:	4b15      	ldr	r3, [pc, #84]	@ (8008f40 <vTaskStartScheduler+0xd4>)
 8008eec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ef0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ef2:	4b14      	ldr	r3, [pc, #80]	@ (8008f44 <vTaskStartScheduler+0xd8>)
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ef8:	4b13      	ldr	r3, [pc, #76]	@ (8008f48 <vTaskStartScheduler+0xdc>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008efe:	f001 f8df 	bl	800a0c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f02:	e00f      	b.n	8008f24 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f0a:	d10b      	bne.n	8008f24 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	60fb      	str	r3, [r7, #12]
}
 8008f1e:	bf00      	nop
 8008f20:	bf00      	nop
 8008f22:	e7fd      	b.n	8008f20 <vTaskStartScheduler+0xb4>
}
 8008f24:	bf00      	nop
 8008f26:	3718      	adds	r7, #24
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	0800aa58 	.word	0x0800aa58
 8008f30:	0800957d 	.word	0x0800957d
 8008f34:	20000f80 	.word	0x20000f80
 8008f38:	20000a88 	.word	0x20000a88
 8008f3c:	20000010 	.word	0x20000010
 8008f40:	20000f7c 	.word	0x20000f7c
 8008f44:	20000f68 	.word	0x20000f68
 8008f48:	20000f60 	.word	0x20000f60

08008f4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008f50:	4b04      	ldr	r3, [pc, #16]	@ (8008f64 <vTaskSuspendAll+0x18>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	3301      	adds	r3, #1
 8008f56:	4a03      	ldr	r2, [pc, #12]	@ (8008f64 <vTaskSuspendAll+0x18>)
 8008f58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008f5a:	bf00      	nop
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	20000f84 	.word	0x20000f84

08008f68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f72:	2300      	movs	r3, #0
 8008f74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f76:	4b42      	ldr	r3, [pc, #264]	@ (8009080 <xTaskResumeAll+0x118>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10b      	bne.n	8008f96 <xTaskResumeAll+0x2e>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	603b      	str	r3, [r7, #0]
}
 8008f90:	bf00      	nop
 8008f92:	bf00      	nop
 8008f94:	e7fd      	b.n	8008f92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f96:	f001 f937 	bl	800a208 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f9a:	4b39      	ldr	r3, [pc, #228]	@ (8009080 <xTaskResumeAll+0x118>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	4a37      	ldr	r2, [pc, #220]	@ (8009080 <xTaskResumeAll+0x118>)
 8008fa2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fa4:	4b36      	ldr	r3, [pc, #216]	@ (8009080 <xTaskResumeAll+0x118>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d162      	bne.n	8009072 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008fac:	4b35      	ldr	r3, [pc, #212]	@ (8009084 <xTaskResumeAll+0x11c>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d05e      	beq.n	8009072 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fb4:	e02f      	b.n	8009016 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fb6:	4b34      	ldr	r3, [pc, #208]	@ (8009088 <xTaskResumeAll+0x120>)
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3318      	adds	r3, #24
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fe ff42 	bl	8007e4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	3304      	adds	r3, #4
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fe ff3d 	bl	8007e4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fd6:	4b2d      	ldr	r3, [pc, #180]	@ (800908c <xTaskResumeAll+0x124>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d903      	bls.n	8008fe6 <xTaskResumeAll+0x7e>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800908c <xTaskResumeAll+0x124>)
 8008fe4:	6013      	str	r3, [r2, #0]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fea:	4613      	mov	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4413      	add	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4a27      	ldr	r2, [pc, #156]	@ (8009090 <xTaskResumeAll+0x128>)
 8008ff4:	441a      	add	r2, r3
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	f7fe fec8 	bl	8007d92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009006:	4b23      	ldr	r3, [pc, #140]	@ (8009094 <xTaskResumeAll+0x12c>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800900c:	429a      	cmp	r2, r3
 800900e:	d302      	bcc.n	8009016 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009010:	4b21      	ldr	r3, [pc, #132]	@ (8009098 <xTaskResumeAll+0x130>)
 8009012:	2201      	movs	r2, #1
 8009014:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009016:	4b1c      	ldr	r3, [pc, #112]	@ (8009088 <xTaskResumeAll+0x120>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1cb      	bne.n	8008fb6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d001      	beq.n	8009028 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009024:	f000 fb66 	bl	80096f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009028:	4b1c      	ldr	r3, [pc, #112]	@ (800909c <xTaskResumeAll+0x134>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d010      	beq.n	8009056 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009034:	f000 f846 	bl	80090c4 <xTaskIncrementTick>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d002      	beq.n	8009044 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800903e:	4b16      	ldr	r3, [pc, #88]	@ (8009098 <xTaskResumeAll+0x130>)
 8009040:	2201      	movs	r2, #1
 8009042:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	3b01      	subs	r3, #1
 8009048:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1f1      	bne.n	8009034 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009050:	4b12      	ldr	r3, [pc, #72]	@ (800909c <xTaskResumeAll+0x134>)
 8009052:	2200      	movs	r2, #0
 8009054:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009056:	4b10      	ldr	r3, [pc, #64]	@ (8009098 <xTaskResumeAll+0x130>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d009      	beq.n	8009072 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800905e:	2301      	movs	r3, #1
 8009060:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009062:	4b0f      	ldr	r3, [pc, #60]	@ (80090a0 <xTaskResumeAll+0x138>)
 8009064:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009068:	601a      	str	r2, [r3, #0]
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009072:	f001 f8fb 	bl	800a26c <vPortExitCritical>

	return xAlreadyYielded;
 8009076:	68bb      	ldr	r3, [r7, #8]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	20000f84 	.word	0x20000f84
 8009084:	20000f5c 	.word	0x20000f5c
 8009088:	20000f1c 	.word	0x20000f1c
 800908c:	20000f64 	.word	0x20000f64
 8009090:	20000a8c 	.word	0x20000a8c
 8009094:	20000a88 	.word	0x20000a88
 8009098:	20000f70 	.word	0x20000f70
 800909c:	20000f6c 	.word	0x20000f6c
 80090a0:	e000ed04 	.word	0xe000ed04

080090a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80090aa:	4b05      	ldr	r3, [pc, #20]	@ (80090c0 <xTaskGetTickCount+0x1c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80090b0:	687b      	ldr	r3, [r7, #4]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	370c      	adds	r7, #12
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	20000f60 	.word	0x20000f60

080090c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80090ca:	2300      	movs	r3, #0
 80090cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090ce:	4b4f      	ldr	r3, [pc, #316]	@ (800920c <xTaskIncrementTick+0x148>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f040 8090 	bne.w	80091f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090d8:	4b4d      	ldr	r3, [pc, #308]	@ (8009210 <xTaskIncrementTick+0x14c>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3301      	adds	r3, #1
 80090de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090e0:	4a4b      	ldr	r2, [pc, #300]	@ (8009210 <xTaskIncrementTick+0x14c>)
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d121      	bne.n	8009130 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80090ec:	4b49      	ldr	r3, [pc, #292]	@ (8009214 <xTaskIncrementTick+0x150>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00b      	beq.n	800910e <xTaskIncrementTick+0x4a>
	__asm volatile
 80090f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	603b      	str	r3, [r7, #0]
}
 8009108:	bf00      	nop
 800910a:	bf00      	nop
 800910c:	e7fd      	b.n	800910a <xTaskIncrementTick+0x46>
 800910e:	4b41      	ldr	r3, [pc, #260]	@ (8009214 <xTaskIncrementTick+0x150>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	60fb      	str	r3, [r7, #12]
 8009114:	4b40      	ldr	r3, [pc, #256]	@ (8009218 <xTaskIncrementTick+0x154>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a3e      	ldr	r2, [pc, #248]	@ (8009214 <xTaskIncrementTick+0x150>)
 800911a:	6013      	str	r3, [r2, #0]
 800911c:	4a3e      	ldr	r2, [pc, #248]	@ (8009218 <xTaskIncrementTick+0x154>)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6013      	str	r3, [r2, #0]
 8009122:	4b3e      	ldr	r3, [pc, #248]	@ (800921c <xTaskIncrementTick+0x158>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3301      	adds	r3, #1
 8009128:	4a3c      	ldr	r2, [pc, #240]	@ (800921c <xTaskIncrementTick+0x158>)
 800912a:	6013      	str	r3, [r2, #0]
 800912c:	f000 fae2 	bl	80096f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009130:	4b3b      	ldr	r3, [pc, #236]	@ (8009220 <xTaskIncrementTick+0x15c>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	429a      	cmp	r2, r3
 8009138:	d349      	bcc.n	80091ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800913a:	4b36      	ldr	r3, [pc, #216]	@ (8009214 <xTaskIncrementTick+0x150>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d104      	bne.n	800914e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009144:	4b36      	ldr	r3, [pc, #216]	@ (8009220 <xTaskIncrementTick+0x15c>)
 8009146:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800914a:	601a      	str	r2, [r3, #0]
					break;
 800914c:	e03f      	b.n	80091ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800914e:	4b31      	ldr	r3, [pc, #196]	@ (8009214 <xTaskIncrementTick+0x150>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	429a      	cmp	r2, r3
 8009164:	d203      	bcs.n	800916e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009166:	4a2e      	ldr	r2, [pc, #184]	@ (8009220 <xTaskIncrementTick+0x15c>)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800916c:	e02f      	b.n	80091ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	3304      	adds	r3, #4
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe fe6a 	bl	8007e4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800917c:	2b00      	cmp	r3, #0
 800917e:	d004      	beq.n	800918a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	3318      	adds	r3, #24
 8009184:	4618      	mov	r0, r3
 8009186:	f7fe fe61 	bl	8007e4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800918e:	4b25      	ldr	r3, [pc, #148]	@ (8009224 <xTaskIncrementTick+0x160>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	429a      	cmp	r2, r3
 8009194:	d903      	bls.n	800919e <xTaskIncrementTick+0xda>
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919a:	4a22      	ldr	r2, [pc, #136]	@ (8009224 <xTaskIncrementTick+0x160>)
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091a2:	4613      	mov	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4a1f      	ldr	r2, [pc, #124]	@ (8009228 <xTaskIncrementTick+0x164>)
 80091ac:	441a      	add	r2, r3
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	3304      	adds	r3, #4
 80091b2:	4619      	mov	r1, r3
 80091b4:	4610      	mov	r0, r2
 80091b6:	f7fe fdec 	bl	8007d92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091be:	4b1b      	ldr	r3, [pc, #108]	@ (800922c <xTaskIncrementTick+0x168>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d3b8      	bcc.n	800913a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80091c8:	2301      	movs	r3, #1
 80091ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091cc:	e7b5      	b.n	800913a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091ce:	4b17      	ldr	r3, [pc, #92]	@ (800922c <xTaskIncrementTick+0x168>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d4:	4914      	ldr	r1, [pc, #80]	@ (8009228 <xTaskIncrementTick+0x164>)
 80091d6:	4613      	mov	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	440b      	add	r3, r1
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d901      	bls.n	80091ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80091e6:	2301      	movs	r3, #1
 80091e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80091ea:	4b11      	ldr	r3, [pc, #68]	@ (8009230 <xTaskIncrementTick+0x16c>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d007      	beq.n	8009202 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80091f2:	2301      	movs	r3, #1
 80091f4:	617b      	str	r3, [r7, #20]
 80091f6:	e004      	b.n	8009202 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80091f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009234 <xTaskIncrementTick+0x170>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3301      	adds	r3, #1
 80091fe:	4a0d      	ldr	r2, [pc, #52]	@ (8009234 <xTaskIncrementTick+0x170>)
 8009200:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009202:	697b      	ldr	r3, [r7, #20]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3718      	adds	r7, #24
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	20000f84 	.word	0x20000f84
 8009210:	20000f60 	.word	0x20000f60
 8009214:	20000f14 	.word	0x20000f14
 8009218:	20000f18 	.word	0x20000f18
 800921c:	20000f74 	.word	0x20000f74
 8009220:	20000f7c 	.word	0x20000f7c
 8009224:	20000f64 	.word	0x20000f64
 8009228:	20000a8c 	.word	0x20000a8c
 800922c:	20000a88 	.word	0x20000a88
 8009230:	20000f70 	.word	0x20000f70
 8009234:	20000f6c 	.word	0x20000f6c

08009238 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800923e:	4b2b      	ldr	r3, [pc, #172]	@ (80092ec <vTaskSwitchContext+0xb4>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d003      	beq.n	800924e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009246:	4b2a      	ldr	r3, [pc, #168]	@ (80092f0 <vTaskSwitchContext+0xb8>)
 8009248:	2201      	movs	r2, #1
 800924a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800924c:	e047      	b.n	80092de <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800924e:	4b28      	ldr	r3, [pc, #160]	@ (80092f0 <vTaskSwitchContext+0xb8>)
 8009250:	2200      	movs	r2, #0
 8009252:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009254:	4b27      	ldr	r3, [pc, #156]	@ (80092f4 <vTaskSwitchContext+0xbc>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	60fb      	str	r3, [r7, #12]
 800925a:	e011      	b.n	8009280 <vTaskSwitchContext+0x48>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10b      	bne.n	800927a <vTaskSwitchContext+0x42>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	607b      	str	r3, [r7, #4]
}
 8009274:	bf00      	nop
 8009276:	bf00      	nop
 8009278:	e7fd      	b.n	8009276 <vTaskSwitchContext+0x3e>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3b01      	subs	r3, #1
 800927e:	60fb      	str	r3, [r7, #12]
 8009280:	491d      	ldr	r1, [pc, #116]	@ (80092f8 <vTaskSwitchContext+0xc0>)
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	4613      	mov	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4413      	add	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	440b      	add	r3, r1
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d0e3      	beq.n	800925c <vTaskSwitchContext+0x24>
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	4613      	mov	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4a16      	ldr	r2, [pc, #88]	@ (80092f8 <vTaskSwitchContext+0xc0>)
 80092a0:	4413      	add	r3, r2
 80092a2:	60bb      	str	r3, [r7, #8]
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	605a      	str	r2, [r3, #4]
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	3308      	adds	r3, #8
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d104      	bne.n	80092c4 <vTaskSwitchContext+0x8c>
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	605a      	str	r2, [r3, #4]
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	4a0c      	ldr	r2, [pc, #48]	@ (80092fc <vTaskSwitchContext+0xc4>)
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	4a09      	ldr	r2, [pc, #36]	@ (80092f4 <vTaskSwitchContext+0xbc>)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092d4:	4b09      	ldr	r3, [pc, #36]	@ (80092fc <vTaskSwitchContext+0xc4>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	3354      	adds	r3, #84	@ 0x54
 80092da:	4a09      	ldr	r2, [pc, #36]	@ (8009300 <vTaskSwitchContext+0xc8>)
 80092dc:	6013      	str	r3, [r2, #0]
}
 80092de:	bf00      	nop
 80092e0:	3714      	adds	r7, #20
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	20000f84 	.word	0x20000f84
 80092f0:	20000f70 	.word	0x20000f70
 80092f4:	20000f64 	.word	0x20000f64
 80092f8:	20000a8c 	.word	0x20000a8c
 80092fc:	20000a88 	.word	0x20000a88
 8009300:	20000010 	.word	0x20000010

08009304 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10b      	bne.n	800932c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	60fb      	str	r3, [r7, #12]
}
 8009326:	bf00      	nop
 8009328:	bf00      	nop
 800932a:	e7fd      	b.n	8009328 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800932c:	4b07      	ldr	r3, [pc, #28]	@ (800934c <vTaskPlaceOnEventList+0x48>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	3318      	adds	r3, #24
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f7fe fd50 	bl	8007dda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800933a:	2101      	movs	r1, #1
 800933c:	6838      	ldr	r0, [r7, #0]
 800933e:	f000 fa87 	bl	8009850 <prvAddCurrentTaskToDelayedList>
}
 8009342:	bf00      	nop
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	20000a88 	.word	0x20000a88

08009350 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10b      	bne.n	800937a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	617b      	str	r3, [r7, #20]
}
 8009374:	bf00      	nop
 8009376:	bf00      	nop
 8009378:	e7fd      	b.n	8009376 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800937a:	4b0a      	ldr	r3, [pc, #40]	@ (80093a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	3318      	adds	r3, #24
 8009380:	4619      	mov	r1, r3
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f7fe fd05 	bl	8007d92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d002      	beq.n	8009394 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800938e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009392:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009394:	6879      	ldr	r1, [r7, #4]
 8009396:	68b8      	ldr	r0, [r7, #8]
 8009398:	f000 fa5a 	bl	8009850 <prvAddCurrentTaskToDelayedList>
	}
 800939c:	bf00      	nop
 800939e:	3718      	adds	r7, #24
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	20000a88 	.word	0x20000a88

080093a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10b      	bne.n	80093d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80093be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	60fb      	str	r3, [r7, #12]
}
 80093d0:	bf00      	nop
 80093d2:	bf00      	nop
 80093d4:	e7fd      	b.n	80093d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	3318      	adds	r3, #24
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fe fd36 	bl	8007e4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009458 <xTaskRemoveFromEventList+0xb0>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d11d      	bne.n	8009424 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	3304      	adds	r3, #4
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fe fd2d 	bl	8007e4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093f6:	4b19      	ldr	r3, [pc, #100]	@ (800945c <xTaskRemoveFromEventList+0xb4>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d903      	bls.n	8009406 <xTaskRemoveFromEventList+0x5e>
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009402:	4a16      	ldr	r2, [pc, #88]	@ (800945c <xTaskRemoveFromEventList+0xb4>)
 8009404:	6013      	str	r3, [r2, #0]
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800940a:	4613      	mov	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4a13      	ldr	r2, [pc, #76]	@ (8009460 <xTaskRemoveFromEventList+0xb8>)
 8009414:	441a      	add	r2, r3
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	3304      	adds	r3, #4
 800941a:	4619      	mov	r1, r3
 800941c:	4610      	mov	r0, r2
 800941e:	f7fe fcb8 	bl	8007d92 <vListInsertEnd>
 8009422:	e005      	b.n	8009430 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	3318      	adds	r3, #24
 8009428:	4619      	mov	r1, r3
 800942a:	480e      	ldr	r0, [pc, #56]	@ (8009464 <xTaskRemoveFromEventList+0xbc>)
 800942c:	f7fe fcb1 	bl	8007d92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009434:	4b0c      	ldr	r3, [pc, #48]	@ (8009468 <xTaskRemoveFromEventList+0xc0>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943a:	429a      	cmp	r2, r3
 800943c:	d905      	bls.n	800944a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800943e:	2301      	movs	r3, #1
 8009440:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009442:	4b0a      	ldr	r3, [pc, #40]	@ (800946c <xTaskRemoveFromEventList+0xc4>)
 8009444:	2201      	movs	r2, #1
 8009446:	601a      	str	r2, [r3, #0]
 8009448:	e001      	b.n	800944e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800944a:	2300      	movs	r3, #0
 800944c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800944e:	697b      	ldr	r3, [r7, #20]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	20000f84 	.word	0x20000f84
 800945c:	20000f64 	.word	0x20000f64
 8009460:	20000a8c 	.word	0x20000a8c
 8009464:	20000f1c 	.word	0x20000f1c
 8009468:	20000a88 	.word	0x20000a88
 800946c:	20000f70 	.word	0x20000f70

08009470 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009478:	4b06      	ldr	r3, [pc, #24]	@ (8009494 <vTaskInternalSetTimeOutState+0x24>)
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009480:	4b05      	ldr	r3, [pc, #20]	@ (8009498 <vTaskInternalSetTimeOutState+0x28>)
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	605a      	str	r2, [r3, #4]
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr
 8009494:	20000f74 	.word	0x20000f74
 8009498:	20000f60 	.word	0x20000f60

0800949c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b088      	sub	sp, #32
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10b      	bne.n	80094c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	613b      	str	r3, [r7, #16]
}
 80094be:	bf00      	nop
 80094c0:	bf00      	nop
 80094c2:	e7fd      	b.n	80094c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d10b      	bne.n	80094e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80094ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ce:	f383 8811 	msr	BASEPRI, r3
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	60fb      	str	r3, [r7, #12]
}
 80094dc:	bf00      	nop
 80094de:	bf00      	nop
 80094e0:	e7fd      	b.n	80094de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80094e2:	f000 fe91 	bl	800a208 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80094e6:	4b1d      	ldr	r3, [pc, #116]	@ (800955c <xTaskCheckForTimeOut+0xc0>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	69ba      	ldr	r2, [r7, #24]
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094fe:	d102      	bne.n	8009506 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009500:	2300      	movs	r3, #0
 8009502:	61fb      	str	r3, [r7, #28]
 8009504:	e023      	b.n	800954e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	4b15      	ldr	r3, [pc, #84]	@ (8009560 <xTaskCheckForTimeOut+0xc4>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	429a      	cmp	r2, r3
 8009510:	d007      	beq.n	8009522 <xTaskCheckForTimeOut+0x86>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	69ba      	ldr	r2, [r7, #24]
 8009518:	429a      	cmp	r2, r3
 800951a:	d302      	bcc.n	8009522 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800951c:	2301      	movs	r3, #1
 800951e:	61fb      	str	r3, [r7, #28]
 8009520:	e015      	b.n	800954e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	429a      	cmp	r2, r3
 800952a:	d20b      	bcs.n	8009544 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	1ad2      	subs	r2, r2, r3
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7ff ff99 	bl	8009470 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800953e:	2300      	movs	r3, #0
 8009540:	61fb      	str	r3, [r7, #28]
 8009542:	e004      	b.n	800954e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	2200      	movs	r2, #0
 8009548:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800954a:	2301      	movs	r3, #1
 800954c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800954e:	f000 fe8d 	bl	800a26c <vPortExitCritical>

	return xReturn;
 8009552:	69fb      	ldr	r3, [r7, #28]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3720      	adds	r7, #32
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	20000f60 	.word	0x20000f60
 8009560:	20000f74 	.word	0x20000f74

08009564 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009564:	b480      	push	{r7}
 8009566:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009568:	4b03      	ldr	r3, [pc, #12]	@ (8009578 <vTaskMissedYield+0x14>)
 800956a:	2201      	movs	r2, #1
 800956c:	601a      	str	r2, [r3, #0]
}
 800956e:	bf00      	nop
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr
 8009578:	20000f70 	.word	0x20000f70

0800957c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009584:	f000 f852 	bl	800962c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009588:	4b06      	ldr	r3, [pc, #24]	@ (80095a4 <prvIdleTask+0x28>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d9f9      	bls.n	8009584 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009590:	4b05      	ldr	r3, [pc, #20]	@ (80095a8 <prvIdleTask+0x2c>)
 8009592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009596:	601a      	str	r2, [r3, #0]
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095a0:	e7f0      	b.n	8009584 <prvIdleTask+0x8>
 80095a2:	bf00      	nop
 80095a4:	20000a8c 	.word	0x20000a8c
 80095a8:	e000ed04 	.word	0xe000ed04

080095ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095b2:	2300      	movs	r3, #0
 80095b4:	607b      	str	r3, [r7, #4]
 80095b6:	e00c      	b.n	80095d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	4613      	mov	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4413      	add	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4a12      	ldr	r2, [pc, #72]	@ (800960c <prvInitialiseTaskLists+0x60>)
 80095c4:	4413      	add	r3, r2
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fe fbb6 	bl	8007d38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	3301      	adds	r3, #1
 80095d0:	607b      	str	r3, [r7, #4]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2b37      	cmp	r3, #55	@ 0x37
 80095d6:	d9ef      	bls.n	80095b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80095d8:	480d      	ldr	r0, [pc, #52]	@ (8009610 <prvInitialiseTaskLists+0x64>)
 80095da:	f7fe fbad 	bl	8007d38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80095de:	480d      	ldr	r0, [pc, #52]	@ (8009614 <prvInitialiseTaskLists+0x68>)
 80095e0:	f7fe fbaa 	bl	8007d38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80095e4:	480c      	ldr	r0, [pc, #48]	@ (8009618 <prvInitialiseTaskLists+0x6c>)
 80095e6:	f7fe fba7 	bl	8007d38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80095ea:	480c      	ldr	r0, [pc, #48]	@ (800961c <prvInitialiseTaskLists+0x70>)
 80095ec:	f7fe fba4 	bl	8007d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80095f0:	480b      	ldr	r0, [pc, #44]	@ (8009620 <prvInitialiseTaskLists+0x74>)
 80095f2:	f7fe fba1 	bl	8007d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80095f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009624 <prvInitialiseTaskLists+0x78>)
 80095f8:	4a05      	ldr	r2, [pc, #20]	@ (8009610 <prvInitialiseTaskLists+0x64>)
 80095fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80095fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009628 <prvInitialiseTaskLists+0x7c>)
 80095fe:	4a05      	ldr	r2, [pc, #20]	@ (8009614 <prvInitialiseTaskLists+0x68>)
 8009600:	601a      	str	r2, [r3, #0]
}
 8009602:	bf00      	nop
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	20000a8c 	.word	0x20000a8c
 8009610:	20000eec 	.word	0x20000eec
 8009614:	20000f00 	.word	0x20000f00
 8009618:	20000f1c 	.word	0x20000f1c
 800961c:	20000f30 	.word	0x20000f30
 8009620:	20000f48 	.word	0x20000f48
 8009624:	20000f14 	.word	0x20000f14
 8009628:	20000f18 	.word	0x20000f18

0800962c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009632:	e019      	b.n	8009668 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009634:	f000 fde8 	bl	800a208 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009638:	4b10      	ldr	r3, [pc, #64]	@ (800967c <prvCheckTasksWaitingTermination+0x50>)
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	3304      	adds	r3, #4
 8009644:	4618      	mov	r0, r3
 8009646:	f7fe fc01 	bl	8007e4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800964a:	4b0d      	ldr	r3, [pc, #52]	@ (8009680 <prvCheckTasksWaitingTermination+0x54>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	3b01      	subs	r3, #1
 8009650:	4a0b      	ldr	r2, [pc, #44]	@ (8009680 <prvCheckTasksWaitingTermination+0x54>)
 8009652:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009654:	4b0b      	ldr	r3, [pc, #44]	@ (8009684 <prvCheckTasksWaitingTermination+0x58>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	3b01      	subs	r3, #1
 800965a:	4a0a      	ldr	r2, [pc, #40]	@ (8009684 <prvCheckTasksWaitingTermination+0x58>)
 800965c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800965e:	f000 fe05 	bl	800a26c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f810 	bl	8009688 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009668:	4b06      	ldr	r3, [pc, #24]	@ (8009684 <prvCheckTasksWaitingTermination+0x58>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d1e1      	bne.n	8009634 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009670:	bf00      	nop
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	20000f30 	.word	0x20000f30
 8009680:	20000f5c 	.word	0x20000f5c
 8009684:	20000f44 	.word	0x20000f44

08009688 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	3354      	adds	r3, #84	@ 0x54
 8009694:	4618      	mov	r0, r3
 8009696:	f001 f8cf 	bl	800a838 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d108      	bne.n	80096b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096a8:	4618      	mov	r0, r3
 80096aa:	f000 ff9d 	bl	800a5e8 <vPortFree>
				vPortFree( pxTCB );
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 ff9a 	bl	800a5e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80096b4:	e019      	b.n	80096ea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d103      	bne.n	80096c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 ff91 	bl	800a5e8 <vPortFree>
	}
 80096c6:	e010      	b.n	80096ea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d00b      	beq.n	80096ea <prvDeleteTCB+0x62>
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	60fb      	str	r3, [r7, #12]
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop
 80096e8:	e7fd      	b.n	80096e6 <prvDeleteTCB+0x5e>
	}
 80096ea:	bf00      	nop
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096fa:	4b0c      	ldr	r3, [pc, #48]	@ (800972c <prvResetNextTaskUnblockTime+0x38>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d104      	bne.n	800970e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009704:	4b0a      	ldr	r3, [pc, #40]	@ (8009730 <prvResetNextTaskUnblockTime+0x3c>)
 8009706:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800970a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800970c:	e008      	b.n	8009720 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800970e:	4b07      	ldr	r3, [pc, #28]	@ (800972c <prvResetNextTaskUnblockTime+0x38>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	4a04      	ldr	r2, [pc, #16]	@ (8009730 <prvResetNextTaskUnblockTime+0x3c>)
 800971e:	6013      	str	r3, [r2, #0]
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	20000f14 	.word	0x20000f14
 8009730:	20000f7c 	.word	0x20000f7c

08009734 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800973a:	4b0b      	ldr	r3, [pc, #44]	@ (8009768 <xTaskGetSchedulerState+0x34>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d102      	bne.n	8009748 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009742:	2301      	movs	r3, #1
 8009744:	607b      	str	r3, [r7, #4]
 8009746:	e008      	b.n	800975a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009748:	4b08      	ldr	r3, [pc, #32]	@ (800976c <xTaskGetSchedulerState+0x38>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d102      	bne.n	8009756 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009750:	2302      	movs	r3, #2
 8009752:	607b      	str	r3, [r7, #4]
 8009754:	e001      	b.n	800975a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009756:	2300      	movs	r3, #0
 8009758:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800975a:	687b      	ldr	r3, [r7, #4]
	}
 800975c:	4618      	mov	r0, r3
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	20000f68 	.word	0x20000f68
 800976c:	20000f84 	.word	0x20000f84

08009770 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800977c:	2300      	movs	r3, #0
 800977e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d058      	beq.n	8009838 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009786:	4b2f      	ldr	r3, [pc, #188]	@ (8009844 <xTaskPriorityDisinherit+0xd4>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	693a      	ldr	r2, [r7, #16]
 800978c:	429a      	cmp	r2, r3
 800978e:	d00b      	beq.n	80097a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	60fb      	str	r3, [r7, #12]
}
 80097a2:	bf00      	nop
 80097a4:	bf00      	nop
 80097a6:	e7fd      	b.n	80097a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10b      	bne.n	80097c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	60bb      	str	r3, [r7, #8]
}
 80097c2:	bf00      	nop
 80097c4:	bf00      	nop
 80097c6:	e7fd      	b.n	80097c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097cc:	1e5a      	subs	r2, r3, #1
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097da:	429a      	cmp	r2, r3
 80097dc:	d02c      	beq.n	8009838 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d128      	bne.n	8009838 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	3304      	adds	r3, #4
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fe fb2e 	bl	8007e4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009808:	4b0f      	ldr	r3, [pc, #60]	@ (8009848 <xTaskPriorityDisinherit+0xd8>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	429a      	cmp	r2, r3
 800980e:	d903      	bls.n	8009818 <xTaskPriorityDisinherit+0xa8>
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009814:	4a0c      	ldr	r2, [pc, #48]	@ (8009848 <xTaskPriorityDisinherit+0xd8>)
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800981c:	4613      	mov	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4a09      	ldr	r2, [pc, #36]	@ (800984c <xTaskPriorityDisinherit+0xdc>)
 8009826:	441a      	add	r2, r3
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	3304      	adds	r3, #4
 800982c:	4619      	mov	r1, r3
 800982e:	4610      	mov	r0, r2
 8009830:	f7fe faaf 	bl	8007d92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009834:	2301      	movs	r3, #1
 8009836:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009838:	697b      	ldr	r3, [r7, #20]
	}
 800983a:	4618      	mov	r0, r3
 800983c:	3718      	adds	r7, #24
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	20000a88 	.word	0x20000a88
 8009848:	20000f64 	.word	0x20000f64
 800984c:	20000a8c 	.word	0x20000a8c

08009850 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800985a:	4b21      	ldr	r3, [pc, #132]	@ (80098e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009860:	4b20      	ldr	r3, [pc, #128]	@ (80098e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3304      	adds	r3, #4
 8009866:	4618      	mov	r0, r3
 8009868:	f7fe faf0 	bl	8007e4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009872:	d10a      	bne.n	800988a <prvAddCurrentTaskToDelayedList+0x3a>
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d007      	beq.n	800988a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800987a:	4b1a      	ldr	r3, [pc, #104]	@ (80098e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3304      	adds	r3, #4
 8009880:	4619      	mov	r1, r3
 8009882:	4819      	ldr	r0, [pc, #100]	@ (80098e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009884:	f7fe fa85 	bl	8007d92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009888:	e026      	b.n	80098d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4413      	add	r3, r2
 8009890:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009892:	4b14      	ldr	r3, [pc, #80]	@ (80098e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68ba      	ldr	r2, [r7, #8]
 8009898:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d209      	bcs.n	80098b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098a2:	4b12      	ldr	r3, [pc, #72]	@ (80098ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	4b0f      	ldr	r3, [pc, #60]	@ (80098e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3304      	adds	r3, #4
 80098ac:	4619      	mov	r1, r3
 80098ae:	4610      	mov	r0, r2
 80098b0:	f7fe fa93 	bl	8007dda <vListInsert>
}
 80098b4:	e010      	b.n	80098d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098b6:	4b0e      	ldr	r3, [pc, #56]	@ (80098f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	4b0a      	ldr	r3, [pc, #40]	@ (80098e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3304      	adds	r3, #4
 80098c0:	4619      	mov	r1, r3
 80098c2:	4610      	mov	r0, r2
 80098c4:	f7fe fa89 	bl	8007dda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098c8:	4b0a      	ldr	r3, [pc, #40]	@ (80098f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d202      	bcs.n	80098d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80098d2:	4a08      	ldr	r2, [pc, #32]	@ (80098f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	6013      	str	r3, [r2, #0]
}
 80098d8:	bf00      	nop
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	20000f60 	.word	0x20000f60
 80098e4:	20000a88 	.word	0x20000a88
 80098e8:	20000f48 	.word	0x20000f48
 80098ec:	20000f18 	.word	0x20000f18
 80098f0:	20000f14 	.word	0x20000f14
 80098f4:	20000f7c 	.word	0x20000f7c

080098f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b08a      	sub	sp, #40	@ 0x28
 80098fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80098fe:	2300      	movs	r3, #0
 8009900:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009902:	f000 fb13 	bl	8009f2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009906:	4b1d      	ldr	r3, [pc, #116]	@ (800997c <xTimerCreateTimerTask+0x84>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d021      	beq.n	8009952 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800990e:	2300      	movs	r3, #0
 8009910:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009912:	2300      	movs	r3, #0
 8009914:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009916:	1d3a      	adds	r2, r7, #4
 8009918:	f107 0108 	add.w	r1, r7, #8
 800991c:	f107 030c 	add.w	r3, r7, #12
 8009920:	4618      	mov	r0, r3
 8009922:	f7fe f9ef 	bl	8007d04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009926:	6879      	ldr	r1, [r7, #4]
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	9202      	str	r2, [sp, #8]
 800992e:	9301      	str	r3, [sp, #4]
 8009930:	2302      	movs	r3, #2
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	2300      	movs	r3, #0
 8009936:	460a      	mov	r2, r1
 8009938:	4911      	ldr	r1, [pc, #68]	@ (8009980 <xTimerCreateTimerTask+0x88>)
 800993a:	4812      	ldr	r0, [pc, #72]	@ (8009984 <xTimerCreateTimerTask+0x8c>)
 800993c:	f7ff f8a2 	bl	8008a84 <xTaskCreateStatic>
 8009940:	4603      	mov	r3, r0
 8009942:	4a11      	ldr	r2, [pc, #68]	@ (8009988 <xTimerCreateTimerTask+0x90>)
 8009944:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009946:	4b10      	ldr	r3, [pc, #64]	@ (8009988 <xTimerCreateTimerTask+0x90>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800994e:	2301      	movs	r3, #1
 8009950:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10b      	bne.n	8009970 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995c:	f383 8811 	msr	BASEPRI, r3
 8009960:	f3bf 8f6f 	isb	sy
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	613b      	str	r3, [r7, #16]
}
 800996a:	bf00      	nop
 800996c:	bf00      	nop
 800996e:	e7fd      	b.n	800996c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009970:	697b      	ldr	r3, [r7, #20]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3718      	adds	r7, #24
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	20000fb8 	.word	0x20000fb8
 8009980:	0800aa60 	.word	0x0800aa60
 8009984:	08009ac5 	.word	0x08009ac5
 8009988:	20000fbc 	.word	0x20000fbc

0800998c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b08a      	sub	sp, #40	@ 0x28
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
 8009998:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800999a:	2300      	movs	r3, #0
 800999c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10b      	bne.n	80099bc <xTimerGenericCommand+0x30>
	__asm volatile
 80099a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	623b      	str	r3, [r7, #32]
}
 80099b6:	bf00      	nop
 80099b8:	bf00      	nop
 80099ba:	e7fd      	b.n	80099b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80099bc:	4b19      	ldr	r3, [pc, #100]	@ (8009a24 <xTimerGenericCommand+0x98>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d02a      	beq.n	8009a1a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	2b05      	cmp	r3, #5
 80099d4:	dc18      	bgt.n	8009a08 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80099d6:	f7ff fead 	bl	8009734 <xTaskGetSchedulerState>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d109      	bne.n	80099f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80099e0:	4b10      	ldr	r3, [pc, #64]	@ (8009a24 <xTimerGenericCommand+0x98>)
 80099e2:	6818      	ldr	r0, [r3, #0]
 80099e4:	f107 0110 	add.w	r1, r7, #16
 80099e8:	2300      	movs	r3, #0
 80099ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099ec:	f7fe fc0c 	bl	8008208 <xQueueGenericSend>
 80099f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80099f2:	e012      	b.n	8009a1a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80099f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009a24 <xTimerGenericCommand+0x98>)
 80099f6:	6818      	ldr	r0, [r3, #0]
 80099f8:	f107 0110 	add.w	r1, r7, #16
 80099fc:	2300      	movs	r3, #0
 80099fe:	2200      	movs	r2, #0
 8009a00:	f7fe fc02 	bl	8008208 <xQueueGenericSend>
 8009a04:	6278      	str	r0, [r7, #36]	@ 0x24
 8009a06:	e008      	b.n	8009a1a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a08:	4b06      	ldr	r3, [pc, #24]	@ (8009a24 <xTimerGenericCommand+0x98>)
 8009a0a:	6818      	ldr	r0, [r3, #0]
 8009a0c:	f107 0110 	add.w	r1, r7, #16
 8009a10:	2300      	movs	r3, #0
 8009a12:	683a      	ldr	r2, [r7, #0]
 8009a14:	f7fe fcfa 	bl	800840c <xQueueGenericSendFromISR>
 8009a18:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3728      	adds	r7, #40	@ 0x28
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	20000fb8 	.word	0x20000fb8

08009a28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b088      	sub	sp, #32
 8009a2c:	af02      	add	r7, sp, #8
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a32:	4b23      	ldr	r3, [pc, #140]	@ (8009ac0 <prvProcessExpiredTimer+0x98>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	3304      	adds	r3, #4
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7fe fa03 	bl	8007e4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a4c:	f003 0304 	and.w	r3, r3, #4
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d023      	beq.n	8009a9c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	699a      	ldr	r2, [r3, #24]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	18d1      	adds	r1, r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	6978      	ldr	r0, [r7, #20]
 8009a62:	f000 f8d5 	bl	8009c10 <prvInsertTimerInActiveList>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d020      	beq.n	8009aae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	2300      	movs	r3, #0
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	2100      	movs	r1, #0
 8009a76:	6978      	ldr	r0, [r7, #20]
 8009a78:	f7ff ff88 	bl	800998c <xTimerGenericCommand>
 8009a7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d114      	bne.n	8009aae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a88:	f383 8811 	msr	BASEPRI, r3
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	60fb      	str	r3, [r7, #12]
}
 8009a96:	bf00      	nop
 8009a98:	bf00      	nop
 8009a9a:	e7fd      	b.n	8009a98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009aa2:	f023 0301 	bic.w	r3, r3, #1
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	6978      	ldr	r0, [r7, #20]
 8009ab4:	4798      	blx	r3
}
 8009ab6:	bf00      	nop
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	20000fb0 	.word	0x20000fb0

08009ac4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009acc:	f107 0308 	add.w	r3, r7, #8
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f000 f859 	bl	8009b88 <prvGetNextExpireTime>
 8009ad6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	4619      	mov	r1, r3
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f000 f805 	bl	8009aec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009ae2:	f000 f8d7 	bl	8009c94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ae6:	bf00      	nop
 8009ae8:	e7f0      	b.n	8009acc <prvTimerTask+0x8>
	...

08009aec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009af6:	f7ff fa29 	bl	8008f4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009afa:	f107 0308 	add.w	r3, r7, #8
 8009afe:	4618      	mov	r0, r3
 8009b00:	f000 f866 	bl	8009bd0 <prvSampleTimeNow>
 8009b04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d130      	bne.n	8009b6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10a      	bne.n	8009b28 <prvProcessTimerOrBlockTask+0x3c>
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d806      	bhi.n	8009b28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b1a:	f7ff fa25 	bl	8008f68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b1e:	68f9      	ldr	r1, [r7, #12]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7ff ff81 	bl	8009a28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b26:	e024      	b.n	8009b72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d008      	beq.n	8009b40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b2e:	4b13      	ldr	r3, [pc, #76]	@ (8009b7c <prvProcessTimerOrBlockTask+0x90>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d101      	bne.n	8009b3c <prvProcessTimerOrBlockTask+0x50>
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e000      	b.n	8009b3e <prvProcessTimerOrBlockTask+0x52>
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b40:	4b0f      	ldr	r3, [pc, #60]	@ (8009b80 <prvProcessTimerOrBlockTask+0x94>)
 8009b42:	6818      	ldr	r0, [r3, #0]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	f7fe ff65 	bl	8008a1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b52:	f7ff fa09 	bl	8008f68 <xTaskResumeAll>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10a      	bne.n	8009b72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009b5c:	4b09      	ldr	r3, [pc, #36]	@ (8009b84 <prvProcessTimerOrBlockTask+0x98>)
 8009b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	f3bf 8f6f 	isb	sy
}
 8009b6c:	e001      	b.n	8009b72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009b6e:	f7ff f9fb 	bl	8008f68 <xTaskResumeAll>
}
 8009b72:	bf00      	nop
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20000fb4 	.word	0x20000fb4
 8009b80:	20000fb8 	.word	0x20000fb8
 8009b84:	e000ed04 	.word	0xe000ed04

08009b88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b90:	4b0e      	ldr	r3, [pc, #56]	@ (8009bcc <prvGetNextExpireTime+0x44>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d101      	bne.n	8009b9e <prvGetNextExpireTime+0x16>
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	e000      	b.n	8009ba0 <prvGetNextExpireTime+0x18>
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d105      	bne.n	8009bb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bac:	4b07      	ldr	r3, [pc, #28]	@ (8009bcc <prvGetNextExpireTime+0x44>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	60fb      	str	r3, [r7, #12]
 8009bb6:	e001      	b.n	8009bbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3714      	adds	r7, #20
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	20000fb0 	.word	0x20000fb0

08009bd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009bd8:	f7ff fa64 	bl	80090a4 <xTaskGetTickCount>
 8009bdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009bde:	4b0b      	ldr	r3, [pc, #44]	@ (8009c0c <prvSampleTimeNow+0x3c>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d205      	bcs.n	8009bf4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009be8:	f000 f93a 	bl	8009e60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	e002      	b.n	8009bfa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009bfa:	4a04      	ldr	r2, [pc, #16]	@ (8009c0c <prvSampleTimeNow+0x3c>)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c00:	68fb      	ldr	r3, [r7, #12]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20000fc0 	.word	0x20000fc0

08009c10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
 8009c1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	68ba      	ldr	r2, [r7, #8]
 8009c26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d812      	bhi.n	8009c5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	1ad2      	subs	r2, r2, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d302      	bcc.n	8009c4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009c44:	2301      	movs	r3, #1
 8009c46:	617b      	str	r3, [r7, #20]
 8009c48:	e01b      	b.n	8009c82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c4a:	4b10      	ldr	r3, [pc, #64]	@ (8009c8c <prvInsertTimerInActiveList+0x7c>)
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	3304      	adds	r3, #4
 8009c52:	4619      	mov	r1, r3
 8009c54:	4610      	mov	r0, r2
 8009c56:	f7fe f8c0 	bl	8007dda <vListInsert>
 8009c5a:	e012      	b.n	8009c82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d206      	bcs.n	8009c72 <prvInsertTimerInActiveList+0x62>
 8009c64:	68ba      	ldr	r2, [r7, #8]
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d302      	bcc.n	8009c72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	617b      	str	r3, [r7, #20]
 8009c70:	e007      	b.n	8009c82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c72:	4b07      	ldr	r3, [pc, #28]	@ (8009c90 <prvInsertTimerInActiveList+0x80>)
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	3304      	adds	r3, #4
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	f7fe f8ac 	bl	8007dda <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009c82:	697b      	ldr	r3, [r7, #20]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3718      	adds	r7, #24
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	20000fb4 	.word	0x20000fb4
 8009c90:	20000fb0 	.word	0x20000fb0

08009c94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b08e      	sub	sp, #56	@ 0x38
 8009c98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c9a:	e0ce      	b.n	8009e3a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	da19      	bge.n	8009cd6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009ca2:	1d3b      	adds	r3, r7, #4
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10b      	bne.n	8009cc6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb2:	f383 8811 	msr	BASEPRI, r3
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	61fb      	str	r3, [r7, #28]
}
 8009cc0:	bf00      	nop
 8009cc2:	bf00      	nop
 8009cc4:	e7fd      	b.n	8009cc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ccc:	6850      	ldr	r0, [r2, #4]
 8009cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cd0:	6892      	ldr	r2, [r2, #8]
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f2c0 80ae 	blt.w	8009e3a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce4:	695b      	ldr	r3, [r3, #20]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d004      	beq.n	8009cf4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cec:	3304      	adds	r3, #4
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fe f8ac 	bl	8007e4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009cf4:	463b      	mov	r3, r7
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7ff ff6a 	bl	8009bd0 <prvSampleTimeNow>
 8009cfc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b09      	cmp	r3, #9
 8009d02:	f200 8097 	bhi.w	8009e34 <prvProcessReceivedCommands+0x1a0>
 8009d06:	a201      	add	r2, pc, #4	@ (adr r2, 8009d0c <prvProcessReceivedCommands+0x78>)
 8009d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0c:	08009d35 	.word	0x08009d35
 8009d10:	08009d35 	.word	0x08009d35
 8009d14:	08009d35 	.word	0x08009d35
 8009d18:	08009dab 	.word	0x08009dab
 8009d1c:	08009dbf 	.word	0x08009dbf
 8009d20:	08009e0b 	.word	0x08009e0b
 8009d24:	08009d35 	.word	0x08009d35
 8009d28:	08009d35 	.word	0x08009d35
 8009d2c:	08009dab 	.word	0x08009dab
 8009d30:	08009dbf 	.word	0x08009dbf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d3a:	f043 0301 	orr.w	r3, r3, #1
 8009d3e:	b2da      	uxtb	r2, r3
 8009d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	18d1      	adds	r1, r2, r3
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d54:	f7ff ff5c 	bl	8009c10 <prvInsertTimerInActiveList>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d06c      	beq.n	8009e38 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d6c:	f003 0304 	and.w	r3, r3, #4
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d061      	beq.n	8009e38 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	441a      	add	r2, r3
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	2300      	movs	r3, #0
 8009d82:	2100      	movs	r1, #0
 8009d84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d86:	f7ff fe01 	bl	800998c <xTimerGenericCommand>
 8009d8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d152      	bne.n	8009e38 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	61bb      	str	r3, [r7, #24]
}
 8009da4:	bf00      	nop
 8009da6:	bf00      	nop
 8009da8:	e7fd      	b.n	8009da6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009db0:	f023 0301 	bic.w	r3, r3, #1
 8009db4:	b2da      	uxtb	r2, r3
 8009db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009dbc:	e03d      	b.n	8009e3a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009dc4:	f043 0301 	orr.w	r3, r3, #1
 8009dc8:	b2da      	uxtb	r2, r3
 8009dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009dd0:	68ba      	ldr	r2, [r7, #8]
 8009dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d10b      	bne.n	8009df6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	617b      	str	r3, [r7, #20]
}
 8009df0:	bf00      	nop
 8009df2:	bf00      	nop
 8009df4:	e7fd      	b.n	8009df2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df8:	699a      	ldr	r2, [r3, #24]
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfc:	18d1      	adds	r1, r2, r3
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e04:	f7ff ff04 	bl	8009c10 <prvInsertTimerInActiveList>
					break;
 8009e08:	e017      	b.n	8009e3a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e10:	f003 0302 	and.w	r3, r3, #2
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d103      	bne.n	8009e20 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009e18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e1a:	f000 fbe5 	bl	800a5e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e1e:	e00c      	b.n	8009e3a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e26:	f023 0301 	bic.w	r3, r3, #1
 8009e2a:	b2da      	uxtb	r2, r3
 8009e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009e32:	e002      	b.n	8009e3a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009e34:	bf00      	nop
 8009e36:	e000      	b.n	8009e3a <prvProcessReceivedCommands+0x1a6>
					break;
 8009e38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e3a:	4b08      	ldr	r3, [pc, #32]	@ (8009e5c <prvProcessReceivedCommands+0x1c8>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	1d39      	adds	r1, r7, #4
 8009e40:	2200      	movs	r2, #0
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fe fb80 	bl	8008548 <xQueueReceive>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	f47f af26 	bne.w	8009c9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009e50:	bf00      	nop
 8009e52:	bf00      	nop
 8009e54:	3730      	adds	r7, #48	@ 0x30
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	20000fb8 	.word	0x20000fb8

08009e60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b088      	sub	sp, #32
 8009e64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e66:	e049      	b.n	8009efc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e68:	4b2e      	ldr	r3, [pc, #184]	@ (8009f24 <prvSwitchTimerLists+0xc4>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e72:	4b2c      	ldr	r3, [pc, #176]	@ (8009f24 <prvSwitchTimerLists+0xc4>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3304      	adds	r3, #4
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fd ffe3 	bl	8007e4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6a1b      	ldr	r3, [r3, #32]
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e94:	f003 0304 	and.w	r3, r3, #4
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d02f      	beq.n	8009efc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d90e      	bls.n	8009ecc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009eba:	4b1a      	ldr	r3, [pc, #104]	@ (8009f24 <prvSwitchTimerLists+0xc4>)
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	f7fd ff88 	bl	8007dda <vListInsert>
 8009eca:	e017      	b.n	8009efc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ecc:	2300      	movs	r3, #0
 8009ece:	9300      	str	r3, [sp, #0]
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f7ff fd58 	bl	800998c <xTimerGenericCommand>
 8009edc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10b      	bne.n	8009efc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee8:	f383 8811 	msr	BASEPRI, r3
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	603b      	str	r3, [r7, #0]
}
 8009ef6:	bf00      	nop
 8009ef8:	bf00      	nop
 8009efa:	e7fd      	b.n	8009ef8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009efc:	4b09      	ldr	r3, [pc, #36]	@ (8009f24 <prvSwitchTimerLists+0xc4>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1b0      	bne.n	8009e68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f06:	4b07      	ldr	r3, [pc, #28]	@ (8009f24 <prvSwitchTimerLists+0xc4>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f0c:	4b06      	ldr	r3, [pc, #24]	@ (8009f28 <prvSwitchTimerLists+0xc8>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a04      	ldr	r2, [pc, #16]	@ (8009f24 <prvSwitchTimerLists+0xc4>)
 8009f12:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f14:	4a04      	ldr	r2, [pc, #16]	@ (8009f28 <prvSwitchTimerLists+0xc8>)
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	6013      	str	r3, [r2, #0]
}
 8009f1a:	bf00      	nop
 8009f1c:	3718      	adds	r7, #24
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	20000fb0 	.word	0x20000fb0
 8009f28:	20000fb4 	.word	0x20000fb4

08009f2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f32:	f000 f969 	bl	800a208 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f36:	4b15      	ldr	r3, [pc, #84]	@ (8009f8c <prvCheckForValidListAndQueue+0x60>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d120      	bne.n	8009f80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f3e:	4814      	ldr	r0, [pc, #80]	@ (8009f90 <prvCheckForValidListAndQueue+0x64>)
 8009f40:	f7fd fefa 	bl	8007d38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f44:	4813      	ldr	r0, [pc, #76]	@ (8009f94 <prvCheckForValidListAndQueue+0x68>)
 8009f46:	f7fd fef7 	bl	8007d38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f4a:	4b13      	ldr	r3, [pc, #76]	@ (8009f98 <prvCheckForValidListAndQueue+0x6c>)
 8009f4c:	4a10      	ldr	r2, [pc, #64]	@ (8009f90 <prvCheckForValidListAndQueue+0x64>)
 8009f4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f50:	4b12      	ldr	r3, [pc, #72]	@ (8009f9c <prvCheckForValidListAndQueue+0x70>)
 8009f52:	4a10      	ldr	r2, [pc, #64]	@ (8009f94 <prvCheckForValidListAndQueue+0x68>)
 8009f54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f56:	2300      	movs	r3, #0
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	4b11      	ldr	r3, [pc, #68]	@ (8009fa0 <prvCheckForValidListAndQueue+0x74>)
 8009f5c:	4a11      	ldr	r2, [pc, #68]	@ (8009fa4 <prvCheckForValidListAndQueue+0x78>)
 8009f5e:	2110      	movs	r1, #16
 8009f60:	200a      	movs	r0, #10
 8009f62:	f7fe f807 	bl	8007f74 <xQueueGenericCreateStatic>
 8009f66:	4603      	mov	r3, r0
 8009f68:	4a08      	ldr	r2, [pc, #32]	@ (8009f8c <prvCheckForValidListAndQueue+0x60>)
 8009f6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009f6c:	4b07      	ldr	r3, [pc, #28]	@ (8009f8c <prvCheckForValidListAndQueue+0x60>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d005      	beq.n	8009f80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009f74:	4b05      	ldr	r3, [pc, #20]	@ (8009f8c <prvCheckForValidListAndQueue+0x60>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	490b      	ldr	r1, [pc, #44]	@ (8009fa8 <prvCheckForValidListAndQueue+0x7c>)
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fe fcfa 	bl	8008974 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f80:	f000 f974 	bl	800a26c <vPortExitCritical>
}
 8009f84:	bf00      	nop
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	20000fb8 	.word	0x20000fb8
 8009f90:	20000f88 	.word	0x20000f88
 8009f94:	20000f9c 	.word	0x20000f9c
 8009f98:	20000fb0 	.word	0x20000fb0
 8009f9c:	20000fb4 	.word	0x20000fb4
 8009fa0:	20001064 	.word	0x20001064
 8009fa4:	20000fc4 	.word	0x20000fc4
 8009fa8:	0800aa68 	.word	0x0800aa68

08009fac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	3b04      	subs	r3, #4
 8009fbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	3b04      	subs	r3, #4
 8009fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	f023 0201 	bic.w	r2, r3, #1
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	3b04      	subs	r3, #4
 8009fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009fdc:	4a0c      	ldr	r2, [pc, #48]	@ (800a010 <pxPortInitialiseStack+0x64>)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3b14      	subs	r3, #20
 8009fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3b04      	subs	r3, #4
 8009ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f06f 0202 	mvn.w	r2, #2
 8009ffa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3b20      	subs	r3, #32
 800a000:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a002:	68fb      	ldr	r3, [r7, #12]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr
 800a010:	0800a015 	.word	0x0800a015

0800a014 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a01e:	4b13      	ldr	r3, [pc, #76]	@ (800a06c <prvTaskExitError+0x58>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a026:	d00b      	beq.n	800a040 <prvTaskExitError+0x2c>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	60fb      	str	r3, [r7, #12]
}
 800a03a:	bf00      	nop
 800a03c:	bf00      	nop
 800a03e:	e7fd      	b.n	800a03c <prvTaskExitError+0x28>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	60bb      	str	r3, [r7, #8]
}
 800a052:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a054:	bf00      	nop
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d0fc      	beq.n	800a056 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a05c:	bf00      	nop
 800a05e:	bf00      	nop
 800a060:	3714      	adds	r7, #20
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	2000000c 	.word	0x2000000c

0800a070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a070:	4b07      	ldr	r3, [pc, #28]	@ (800a090 <pxCurrentTCBConst2>)
 800a072:	6819      	ldr	r1, [r3, #0]
 800a074:	6808      	ldr	r0, [r1, #0]
 800a076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07a:	f380 8809 	msr	PSP, r0
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f04f 0000 	mov.w	r0, #0
 800a086:	f380 8811 	msr	BASEPRI, r0
 800a08a:	4770      	bx	lr
 800a08c:	f3af 8000 	nop.w

0800a090 <pxCurrentTCBConst2>:
 800a090:	20000a88 	.word	0x20000a88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a094:	bf00      	nop
 800a096:	bf00      	nop

0800a098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a098:	4808      	ldr	r0, [pc, #32]	@ (800a0bc <prvPortStartFirstTask+0x24>)
 800a09a:	6800      	ldr	r0, [r0, #0]
 800a09c:	6800      	ldr	r0, [r0, #0]
 800a09e:	f380 8808 	msr	MSP, r0
 800a0a2:	f04f 0000 	mov.w	r0, #0
 800a0a6:	f380 8814 	msr	CONTROL, r0
 800a0aa:	b662      	cpsie	i
 800a0ac:	b661      	cpsie	f
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	df00      	svc	0
 800a0b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0ba:	bf00      	nop
 800a0bc:	e000ed08 	.word	0xe000ed08

0800a0c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a0c6:	4b47      	ldr	r3, [pc, #284]	@ (800a1e4 <xPortStartScheduler+0x124>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a47      	ldr	r2, [pc, #284]	@ (800a1e8 <xPortStartScheduler+0x128>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d10b      	bne.n	800a0e8 <xPortStartScheduler+0x28>
	__asm volatile
 800a0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	613b      	str	r3, [r7, #16]
}
 800a0e2:	bf00      	nop
 800a0e4:	bf00      	nop
 800a0e6:	e7fd      	b.n	800a0e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a0e8:	4b3e      	ldr	r3, [pc, #248]	@ (800a1e4 <xPortStartScheduler+0x124>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a3f      	ldr	r2, [pc, #252]	@ (800a1ec <xPortStartScheduler+0x12c>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d10b      	bne.n	800a10a <xPortStartScheduler+0x4a>
	__asm volatile
 800a0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	60fb      	str	r3, [r7, #12]
}
 800a104:	bf00      	nop
 800a106:	bf00      	nop
 800a108:	e7fd      	b.n	800a106 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a10a:	4b39      	ldr	r3, [pc, #228]	@ (800a1f0 <xPortStartScheduler+0x130>)
 800a10c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	b2db      	uxtb	r3, r3
 800a114:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	22ff      	movs	r2, #255	@ 0xff
 800a11a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	b2db      	uxtb	r3, r3
 800a122:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a124:	78fb      	ldrb	r3, [r7, #3]
 800a126:	b2db      	uxtb	r3, r3
 800a128:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a12c:	b2da      	uxtb	r2, r3
 800a12e:	4b31      	ldr	r3, [pc, #196]	@ (800a1f4 <xPortStartScheduler+0x134>)
 800a130:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a132:	4b31      	ldr	r3, [pc, #196]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a134:	2207      	movs	r2, #7
 800a136:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a138:	e009      	b.n	800a14e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a13a:	4b2f      	ldr	r3, [pc, #188]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	3b01      	subs	r3, #1
 800a140:	4a2d      	ldr	r2, [pc, #180]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a142:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a144:	78fb      	ldrb	r3, [r7, #3]
 800a146:	b2db      	uxtb	r3, r3
 800a148:	005b      	lsls	r3, r3, #1
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a14e:	78fb      	ldrb	r3, [r7, #3]
 800a150:	b2db      	uxtb	r3, r3
 800a152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a156:	2b80      	cmp	r3, #128	@ 0x80
 800a158:	d0ef      	beq.n	800a13a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a15a:	4b27      	ldr	r3, [pc, #156]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f1c3 0307 	rsb	r3, r3, #7
 800a162:	2b04      	cmp	r3, #4
 800a164:	d00b      	beq.n	800a17e <xPortStartScheduler+0xbe>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	60bb      	str	r3, [r7, #8]
}
 800a178:	bf00      	nop
 800a17a:	bf00      	nop
 800a17c:	e7fd      	b.n	800a17a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a17e:	4b1e      	ldr	r3, [pc, #120]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	021b      	lsls	r3, r3, #8
 800a184:	4a1c      	ldr	r2, [pc, #112]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a186:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a188:	4b1b      	ldr	r3, [pc, #108]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a190:	4a19      	ldr	r2, [pc, #100]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a192:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	b2da      	uxtb	r2, r3
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a19c:	4b17      	ldr	r3, [pc, #92]	@ (800a1fc <xPortStartScheduler+0x13c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a16      	ldr	r2, [pc, #88]	@ (800a1fc <xPortStartScheduler+0x13c>)
 800a1a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a1a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1a8:	4b14      	ldr	r3, [pc, #80]	@ (800a1fc <xPortStartScheduler+0x13c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a13      	ldr	r2, [pc, #76]	@ (800a1fc <xPortStartScheduler+0x13c>)
 800a1ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a1b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1b4:	f000 f8da 	bl	800a36c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1b8:	4b11      	ldr	r3, [pc, #68]	@ (800a200 <xPortStartScheduler+0x140>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1be:	f000 f8f9 	bl	800a3b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1c2:	4b10      	ldr	r3, [pc, #64]	@ (800a204 <xPortStartScheduler+0x144>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a0f      	ldr	r2, [pc, #60]	@ (800a204 <xPortStartScheduler+0x144>)
 800a1c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a1cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a1ce:	f7ff ff63 	bl	800a098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a1d2:	f7ff f831 	bl	8009238 <vTaskSwitchContext>
	prvTaskExitError();
 800a1d6:	f7ff ff1d 	bl	800a014 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3718      	adds	r7, #24
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	e000ed00 	.word	0xe000ed00
 800a1e8:	410fc271 	.word	0x410fc271
 800a1ec:	410fc270 	.word	0x410fc270
 800a1f0:	e000e400 	.word	0xe000e400
 800a1f4:	200010b4 	.word	0x200010b4
 800a1f8:	200010b8 	.word	0x200010b8
 800a1fc:	e000ed20 	.word	0xe000ed20
 800a200:	2000000c 	.word	0x2000000c
 800a204:	e000ef34 	.word	0xe000ef34

0800a208 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	607b      	str	r3, [r7, #4]
}
 800a220:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a222:	4b10      	ldr	r3, [pc, #64]	@ (800a264 <vPortEnterCritical+0x5c>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	3301      	adds	r3, #1
 800a228:	4a0e      	ldr	r2, [pc, #56]	@ (800a264 <vPortEnterCritical+0x5c>)
 800a22a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a22c:	4b0d      	ldr	r3, [pc, #52]	@ (800a264 <vPortEnterCritical+0x5c>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d110      	bne.n	800a256 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a234:	4b0c      	ldr	r3, [pc, #48]	@ (800a268 <vPortEnterCritical+0x60>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00b      	beq.n	800a256 <vPortEnterCritical+0x4e>
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	603b      	str	r3, [r7, #0]
}
 800a250:	bf00      	nop
 800a252:	bf00      	nop
 800a254:	e7fd      	b.n	800a252 <vPortEnterCritical+0x4a>
	}
}
 800a256:	bf00      	nop
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	2000000c 	.word	0x2000000c
 800a268:	e000ed04 	.word	0xe000ed04

0800a26c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a272:	4b12      	ldr	r3, [pc, #72]	@ (800a2bc <vPortExitCritical+0x50>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10b      	bne.n	800a292 <vPortExitCritical+0x26>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	607b      	str	r3, [r7, #4]
}
 800a28c:	bf00      	nop
 800a28e:	bf00      	nop
 800a290:	e7fd      	b.n	800a28e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a292:	4b0a      	ldr	r3, [pc, #40]	@ (800a2bc <vPortExitCritical+0x50>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	3b01      	subs	r3, #1
 800a298:	4a08      	ldr	r2, [pc, #32]	@ (800a2bc <vPortExitCritical+0x50>)
 800a29a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a29c:	4b07      	ldr	r3, [pc, #28]	@ (800a2bc <vPortExitCritical+0x50>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d105      	bne.n	800a2b0 <vPortExitCritical+0x44>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	f383 8811 	msr	BASEPRI, r3
}
 800a2ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	2000000c 	.word	0x2000000c

0800a2c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a2c0:	f3ef 8009 	mrs	r0, PSP
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	4b15      	ldr	r3, [pc, #84]	@ (800a320 <pxCurrentTCBConst>)
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	f01e 0f10 	tst.w	lr, #16
 800a2d0:	bf08      	it	eq
 800a2d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a2d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2da:	6010      	str	r0, [r2, #0]
 800a2dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a2e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a2e4:	f380 8811 	msr	BASEPRI, r0
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f7fe ffa2 	bl	8009238 <vTaskSwitchContext>
 800a2f4:	f04f 0000 	mov.w	r0, #0
 800a2f8:	f380 8811 	msr	BASEPRI, r0
 800a2fc:	bc09      	pop	{r0, r3}
 800a2fe:	6819      	ldr	r1, [r3, #0]
 800a300:	6808      	ldr	r0, [r1, #0]
 800a302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a306:	f01e 0f10 	tst.w	lr, #16
 800a30a:	bf08      	it	eq
 800a30c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a310:	f380 8809 	msr	PSP, r0
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	f3af 8000 	nop.w

0800a320 <pxCurrentTCBConst>:
 800a320:	20000a88 	.word	0x20000a88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop

0800a328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	607b      	str	r3, [r7, #4]
}
 800a340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a342:	f7fe febf 	bl	80090c4 <xTaskIncrementTick>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d003      	beq.n	800a354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a34c:	4b06      	ldr	r3, [pc, #24]	@ (800a368 <xPortSysTickHandler+0x40>)
 800a34e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	2300      	movs	r3, #0
 800a356:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	f383 8811 	msr	BASEPRI, r3
}
 800a35e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a360:	bf00      	nop
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	e000ed04 	.word	0xe000ed04

0800a36c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a36c:	b480      	push	{r7}
 800a36e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a370:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a0 <vPortSetupTimerInterrupt+0x34>)
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a376:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a4 <vPortSetupTimerInterrupt+0x38>)
 800a378:	2200      	movs	r2, #0
 800a37a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a37c:	4b0a      	ldr	r3, [pc, #40]	@ (800a3a8 <vPortSetupTimerInterrupt+0x3c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a0a      	ldr	r2, [pc, #40]	@ (800a3ac <vPortSetupTimerInterrupt+0x40>)
 800a382:	fba2 2303 	umull	r2, r3, r2, r3
 800a386:	099b      	lsrs	r3, r3, #6
 800a388:	4a09      	ldr	r2, [pc, #36]	@ (800a3b0 <vPortSetupTimerInterrupt+0x44>)
 800a38a:	3b01      	subs	r3, #1
 800a38c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a38e:	4b04      	ldr	r3, [pc, #16]	@ (800a3a0 <vPortSetupTimerInterrupt+0x34>)
 800a390:	2207      	movs	r2, #7
 800a392:	601a      	str	r2, [r3, #0]
}
 800a394:	bf00      	nop
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	e000e010 	.word	0xe000e010
 800a3a4:	e000e018 	.word	0xe000e018
 800a3a8:	20000000 	.word	0x20000000
 800a3ac:	10624dd3 	.word	0x10624dd3
 800a3b0:	e000e014 	.word	0xe000e014

0800a3b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a3c4 <vPortEnableVFP+0x10>
 800a3b8:	6801      	ldr	r1, [r0, #0]
 800a3ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a3be:	6001      	str	r1, [r0, #0]
 800a3c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a3c2:	bf00      	nop
 800a3c4:	e000ed88 	.word	0xe000ed88

0800a3c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a3ce:	f3ef 8305 	mrs	r3, IPSR
 800a3d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2b0f      	cmp	r3, #15
 800a3d8:	d915      	bls.n	800a406 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a3da:	4a18      	ldr	r2, [pc, #96]	@ (800a43c <vPortValidateInterruptPriority+0x74>)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	4413      	add	r3, r2
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a3e4:	4b16      	ldr	r3, [pc, #88]	@ (800a440 <vPortValidateInterruptPriority+0x78>)
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	7afa      	ldrb	r2, [r7, #11]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d20b      	bcs.n	800a406 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	607b      	str	r3, [r7, #4]
}
 800a400:	bf00      	nop
 800a402:	bf00      	nop
 800a404:	e7fd      	b.n	800a402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a406:	4b0f      	ldr	r3, [pc, #60]	@ (800a444 <vPortValidateInterruptPriority+0x7c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a40e:	4b0e      	ldr	r3, [pc, #56]	@ (800a448 <vPortValidateInterruptPriority+0x80>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	429a      	cmp	r2, r3
 800a414:	d90b      	bls.n	800a42e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	603b      	str	r3, [r7, #0]
}
 800a428:	bf00      	nop
 800a42a:	bf00      	nop
 800a42c:	e7fd      	b.n	800a42a <vPortValidateInterruptPriority+0x62>
	}
 800a42e:	bf00      	nop
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	e000e3f0 	.word	0xe000e3f0
 800a440:	200010b4 	.word	0x200010b4
 800a444:	e000ed0c 	.word	0xe000ed0c
 800a448:	200010b8 	.word	0x200010b8

0800a44c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b08a      	sub	sp, #40	@ 0x28
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a454:	2300      	movs	r3, #0
 800a456:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a458:	f7fe fd78 	bl	8008f4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a45c:	4b5c      	ldr	r3, [pc, #368]	@ (800a5d0 <pvPortMalloc+0x184>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d101      	bne.n	800a468 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a464:	f000 f924 	bl	800a6b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a468:	4b5a      	ldr	r3, [pc, #360]	@ (800a5d4 <pvPortMalloc+0x188>)
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4013      	ands	r3, r2
 800a470:	2b00      	cmp	r3, #0
 800a472:	f040 8095 	bne.w	800a5a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d01e      	beq.n	800a4ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a47c:	2208      	movs	r2, #8
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4413      	add	r3, r2
 800a482:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f003 0307 	and.w	r3, r3, #7
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d015      	beq.n	800a4ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f023 0307 	bic.w	r3, r3, #7
 800a494:	3308      	adds	r3, #8
 800a496:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f003 0307 	and.w	r3, r3, #7
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d00b      	beq.n	800a4ba <pvPortMalloc+0x6e>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	617b      	str	r3, [r7, #20]
}
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop
 800a4b8:	e7fd      	b.n	800a4b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d06f      	beq.n	800a5a0 <pvPortMalloc+0x154>
 800a4c0:	4b45      	ldr	r3, [pc, #276]	@ (800a5d8 <pvPortMalloc+0x18c>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d86a      	bhi.n	800a5a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a4ca:	4b44      	ldr	r3, [pc, #272]	@ (800a5dc <pvPortMalloc+0x190>)
 800a4cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a4ce:	4b43      	ldr	r3, [pc, #268]	@ (800a5dc <pvPortMalloc+0x190>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4d4:	e004      	b.n	800a4e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d903      	bls.n	800a4f2 <pvPortMalloc+0xa6>
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1f1      	bne.n	800a4d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a4f2:	4b37      	ldr	r3, [pc, #220]	@ (800a5d0 <pvPortMalloc+0x184>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d051      	beq.n	800a5a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a4fc:	6a3b      	ldr	r3, [r7, #32]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2208      	movs	r2, #8
 800a502:	4413      	add	r3, r2
 800a504:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	6a3b      	ldr	r3, [r7, #32]
 800a50c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a510:	685a      	ldr	r2, [r3, #4]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	1ad2      	subs	r2, r2, r3
 800a516:	2308      	movs	r3, #8
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d920      	bls.n	800a560 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a51e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4413      	add	r3, r2
 800a524:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	f003 0307 	and.w	r3, r3, #7
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00b      	beq.n	800a548 <pvPortMalloc+0xfc>
	__asm volatile
 800a530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a534:	f383 8811 	msr	BASEPRI, r3
 800a538:	f3bf 8f6f 	isb	sy
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	613b      	str	r3, [r7, #16]
}
 800a542:	bf00      	nop
 800a544:	bf00      	nop
 800a546:	e7fd      	b.n	800a544 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	1ad2      	subs	r2, r2, r3
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a55a:	69b8      	ldr	r0, [r7, #24]
 800a55c:	f000 f90a 	bl	800a774 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a560:	4b1d      	ldr	r3, [pc, #116]	@ (800a5d8 <pvPortMalloc+0x18c>)
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	4a1b      	ldr	r2, [pc, #108]	@ (800a5d8 <pvPortMalloc+0x18c>)
 800a56c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a56e:	4b1a      	ldr	r3, [pc, #104]	@ (800a5d8 <pvPortMalloc+0x18c>)
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	4b1b      	ldr	r3, [pc, #108]	@ (800a5e0 <pvPortMalloc+0x194>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	429a      	cmp	r2, r3
 800a578:	d203      	bcs.n	800a582 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a57a:	4b17      	ldr	r3, [pc, #92]	@ (800a5d8 <pvPortMalloc+0x18c>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a18      	ldr	r2, [pc, #96]	@ (800a5e0 <pvPortMalloc+0x194>)
 800a580:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a584:	685a      	ldr	r2, [r3, #4]
 800a586:	4b13      	ldr	r3, [pc, #76]	@ (800a5d4 <pvPortMalloc+0x188>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	431a      	orrs	r2, r3
 800a58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a592:	2200      	movs	r2, #0
 800a594:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a596:	4b13      	ldr	r3, [pc, #76]	@ (800a5e4 <pvPortMalloc+0x198>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	3301      	adds	r3, #1
 800a59c:	4a11      	ldr	r2, [pc, #68]	@ (800a5e4 <pvPortMalloc+0x198>)
 800a59e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5a0:	f7fe fce2 	bl	8008f68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	f003 0307 	and.w	r3, r3, #7
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00b      	beq.n	800a5c6 <pvPortMalloc+0x17a>
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	60fb      	str	r3, [r7, #12]
}
 800a5c0:	bf00      	nop
 800a5c2:	bf00      	nop
 800a5c4:	e7fd      	b.n	800a5c2 <pvPortMalloc+0x176>
	return pvReturn;
 800a5c6:	69fb      	ldr	r3, [r7, #28]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3728      	adds	r7, #40	@ 0x28
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	20001c7c 	.word	0x20001c7c
 800a5d4:	20001c90 	.word	0x20001c90
 800a5d8:	20001c80 	.word	0x20001c80
 800a5dc:	20001c74 	.word	0x20001c74
 800a5e0:	20001c84 	.word	0x20001c84
 800a5e4:	20001c88 	.word	0x20001c88

0800a5e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d04f      	beq.n	800a69a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a5fa:	2308      	movs	r3, #8
 800a5fc:	425b      	negs	r3, r3
 800a5fe:	697a      	ldr	r2, [r7, #20]
 800a600:	4413      	add	r3, r2
 800a602:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	4b25      	ldr	r3, [pc, #148]	@ (800a6a4 <vPortFree+0xbc>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4013      	ands	r3, r2
 800a612:	2b00      	cmp	r3, #0
 800a614:	d10b      	bne.n	800a62e <vPortFree+0x46>
	__asm volatile
 800a616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61a:	f383 8811 	msr	BASEPRI, r3
 800a61e:	f3bf 8f6f 	isb	sy
 800a622:	f3bf 8f4f 	dsb	sy
 800a626:	60fb      	str	r3, [r7, #12]
}
 800a628:	bf00      	nop
 800a62a:	bf00      	nop
 800a62c:	e7fd      	b.n	800a62a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00b      	beq.n	800a64e <vPortFree+0x66>
	__asm volatile
 800a636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	60bb      	str	r3, [r7, #8]
}
 800a648:	bf00      	nop
 800a64a:	bf00      	nop
 800a64c:	e7fd      	b.n	800a64a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	685a      	ldr	r2, [r3, #4]
 800a652:	4b14      	ldr	r3, [pc, #80]	@ (800a6a4 <vPortFree+0xbc>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4013      	ands	r3, r2
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d01e      	beq.n	800a69a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d11a      	bne.n	800a69a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	4b0e      	ldr	r3, [pc, #56]	@ (800a6a4 <vPortFree+0xbc>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	43db      	mvns	r3, r3
 800a66e:	401a      	ands	r2, r3
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a674:	f7fe fc6a 	bl	8008f4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	4b0a      	ldr	r3, [pc, #40]	@ (800a6a8 <vPortFree+0xc0>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4413      	add	r3, r2
 800a682:	4a09      	ldr	r2, [pc, #36]	@ (800a6a8 <vPortFree+0xc0>)
 800a684:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a686:	6938      	ldr	r0, [r7, #16]
 800a688:	f000 f874 	bl	800a774 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a68c:	4b07      	ldr	r3, [pc, #28]	@ (800a6ac <vPortFree+0xc4>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	3301      	adds	r3, #1
 800a692:	4a06      	ldr	r2, [pc, #24]	@ (800a6ac <vPortFree+0xc4>)
 800a694:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a696:	f7fe fc67 	bl	8008f68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a69a:	bf00      	nop
 800a69c:	3718      	adds	r7, #24
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20001c90 	.word	0x20001c90
 800a6a8:	20001c80 	.word	0x20001c80
 800a6ac:	20001c8c 	.word	0x20001c8c

0800a6b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6b6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a6ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6bc:	4b27      	ldr	r3, [pc, #156]	@ (800a75c <prvHeapInit+0xac>)
 800a6be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f003 0307 	and.w	r3, r3, #7
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00c      	beq.n	800a6e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	3307      	adds	r3, #7
 800a6ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f023 0307 	bic.w	r3, r3, #7
 800a6d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a6d8:	68ba      	ldr	r2, [r7, #8]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	4a1f      	ldr	r2, [pc, #124]	@ (800a75c <prvHeapInit+0xac>)
 800a6e0:	4413      	add	r3, r2
 800a6e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a760 <prvHeapInit+0xb0>)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a6ee:	4b1c      	ldr	r3, [pc, #112]	@ (800a760 <prvHeapInit+0xb0>)
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a6fc:	2208      	movs	r2, #8
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	1a9b      	subs	r3, r3, r2
 800a702:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f023 0307 	bic.w	r3, r3, #7
 800a70a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	4a15      	ldr	r2, [pc, #84]	@ (800a764 <prvHeapInit+0xb4>)
 800a710:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a712:	4b14      	ldr	r3, [pc, #80]	@ (800a764 <prvHeapInit+0xb4>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2200      	movs	r2, #0
 800a718:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a71a:	4b12      	ldr	r3, [pc, #72]	@ (800a764 <prvHeapInit+0xb4>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2200      	movs	r2, #0
 800a720:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	1ad2      	subs	r2, r2, r3
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a730:	4b0c      	ldr	r3, [pc, #48]	@ (800a764 <prvHeapInit+0xb4>)
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	4a0a      	ldr	r2, [pc, #40]	@ (800a768 <prvHeapInit+0xb8>)
 800a73e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	4a09      	ldr	r2, [pc, #36]	@ (800a76c <prvHeapInit+0xbc>)
 800a746:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a748:	4b09      	ldr	r3, [pc, #36]	@ (800a770 <prvHeapInit+0xc0>)
 800a74a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a74e:	601a      	str	r2, [r3, #0]
}
 800a750:	bf00      	nop
 800a752:	3714      	adds	r7, #20
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr
 800a75c:	200010bc 	.word	0x200010bc
 800a760:	20001c74 	.word	0x20001c74
 800a764:	20001c7c 	.word	0x20001c7c
 800a768:	20001c84 	.word	0x20001c84
 800a76c:	20001c80 	.word	0x20001c80
 800a770:	20001c90 	.word	0x20001c90

0800a774 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a77c:	4b28      	ldr	r3, [pc, #160]	@ (800a820 <prvInsertBlockIntoFreeList+0xac>)
 800a77e:	60fb      	str	r3, [r7, #12]
 800a780:	e002      	b.n	800a788 <prvInsertBlockIntoFreeList+0x14>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	60fb      	str	r3, [r7, #12]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d8f7      	bhi.n	800a782 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	4413      	add	r3, r2
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d108      	bne.n	800a7b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	685a      	ldr	r2, [r3, #4]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	441a      	add	r2, r3
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	441a      	add	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d118      	bne.n	800a7fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	4b15      	ldr	r3, [pc, #84]	@ (800a824 <prvInsertBlockIntoFreeList+0xb0>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d00d      	beq.n	800a7f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	685a      	ldr	r2, [r3, #4]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	441a      	add	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	601a      	str	r2, [r3, #0]
 800a7f0:	e008      	b.n	800a804 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a7f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a824 <prvInsertBlockIntoFreeList+0xb0>)
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	601a      	str	r2, [r3, #0]
 800a7fa:	e003      	b.n	800a804 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d002      	beq.n	800a812 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a812:	bf00      	nop
 800a814:	3714      	adds	r7, #20
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	20001c74 	.word	0x20001c74
 800a824:	20001c7c 	.word	0x20001c7c

0800a828 <memset>:
 800a828:	4402      	add	r2, r0
 800a82a:	4603      	mov	r3, r0
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d100      	bne.n	800a832 <memset+0xa>
 800a830:	4770      	bx	lr
 800a832:	f803 1b01 	strb.w	r1, [r3], #1
 800a836:	e7f9      	b.n	800a82c <memset+0x4>

0800a838 <_reclaim_reent>:
 800a838:	4b29      	ldr	r3, [pc, #164]	@ (800a8e0 <_reclaim_reent+0xa8>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4283      	cmp	r3, r0
 800a83e:	b570      	push	{r4, r5, r6, lr}
 800a840:	4604      	mov	r4, r0
 800a842:	d04b      	beq.n	800a8dc <_reclaim_reent+0xa4>
 800a844:	69c3      	ldr	r3, [r0, #28]
 800a846:	b1ab      	cbz	r3, 800a874 <_reclaim_reent+0x3c>
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	b16b      	cbz	r3, 800a868 <_reclaim_reent+0x30>
 800a84c:	2500      	movs	r5, #0
 800a84e:	69e3      	ldr	r3, [r4, #28]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	5959      	ldr	r1, [r3, r5]
 800a854:	2900      	cmp	r1, #0
 800a856:	d13b      	bne.n	800a8d0 <_reclaim_reent+0x98>
 800a858:	3504      	adds	r5, #4
 800a85a:	2d80      	cmp	r5, #128	@ 0x80
 800a85c:	d1f7      	bne.n	800a84e <_reclaim_reent+0x16>
 800a85e:	69e3      	ldr	r3, [r4, #28]
 800a860:	4620      	mov	r0, r4
 800a862:	68d9      	ldr	r1, [r3, #12]
 800a864:	f000 f872 	bl	800a94c <_free_r>
 800a868:	69e3      	ldr	r3, [r4, #28]
 800a86a:	6819      	ldr	r1, [r3, #0]
 800a86c:	b111      	cbz	r1, 800a874 <_reclaim_reent+0x3c>
 800a86e:	4620      	mov	r0, r4
 800a870:	f000 f86c 	bl	800a94c <_free_r>
 800a874:	6961      	ldr	r1, [r4, #20]
 800a876:	b111      	cbz	r1, 800a87e <_reclaim_reent+0x46>
 800a878:	4620      	mov	r0, r4
 800a87a:	f000 f867 	bl	800a94c <_free_r>
 800a87e:	69e1      	ldr	r1, [r4, #28]
 800a880:	b111      	cbz	r1, 800a888 <_reclaim_reent+0x50>
 800a882:	4620      	mov	r0, r4
 800a884:	f000 f862 	bl	800a94c <_free_r>
 800a888:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a88a:	b111      	cbz	r1, 800a892 <_reclaim_reent+0x5a>
 800a88c:	4620      	mov	r0, r4
 800a88e:	f000 f85d 	bl	800a94c <_free_r>
 800a892:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a894:	b111      	cbz	r1, 800a89c <_reclaim_reent+0x64>
 800a896:	4620      	mov	r0, r4
 800a898:	f000 f858 	bl	800a94c <_free_r>
 800a89c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a89e:	b111      	cbz	r1, 800a8a6 <_reclaim_reent+0x6e>
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f000 f853 	bl	800a94c <_free_r>
 800a8a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a8a8:	b111      	cbz	r1, 800a8b0 <_reclaim_reent+0x78>
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f000 f84e 	bl	800a94c <_free_r>
 800a8b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a8b2:	b111      	cbz	r1, 800a8ba <_reclaim_reent+0x82>
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f000 f849 	bl	800a94c <_free_r>
 800a8ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a8bc:	b111      	cbz	r1, 800a8c4 <_reclaim_reent+0x8c>
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f000 f844 	bl	800a94c <_free_r>
 800a8c4:	6a23      	ldr	r3, [r4, #32]
 800a8c6:	b14b      	cbz	r3, 800a8dc <_reclaim_reent+0xa4>
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8ce:	4718      	bx	r3
 800a8d0:	680e      	ldr	r6, [r1, #0]
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	f000 f83a 	bl	800a94c <_free_r>
 800a8d8:	4631      	mov	r1, r6
 800a8da:	e7bb      	b.n	800a854 <_reclaim_reent+0x1c>
 800a8dc:	bd70      	pop	{r4, r5, r6, pc}
 800a8de:	bf00      	nop
 800a8e0:	20000010 	.word	0x20000010

0800a8e4 <__libc_init_array>:
 800a8e4:	b570      	push	{r4, r5, r6, lr}
 800a8e6:	4d0d      	ldr	r5, [pc, #52]	@ (800a91c <__libc_init_array+0x38>)
 800a8e8:	4c0d      	ldr	r4, [pc, #52]	@ (800a920 <__libc_init_array+0x3c>)
 800a8ea:	1b64      	subs	r4, r4, r5
 800a8ec:	10a4      	asrs	r4, r4, #2
 800a8ee:	2600      	movs	r6, #0
 800a8f0:	42a6      	cmp	r6, r4
 800a8f2:	d109      	bne.n	800a908 <__libc_init_array+0x24>
 800a8f4:	4d0b      	ldr	r5, [pc, #44]	@ (800a924 <__libc_init_array+0x40>)
 800a8f6:	4c0c      	ldr	r4, [pc, #48]	@ (800a928 <__libc_init_array+0x44>)
 800a8f8:	f000 f87e 	bl	800a9f8 <_init>
 800a8fc:	1b64      	subs	r4, r4, r5
 800a8fe:	10a4      	asrs	r4, r4, #2
 800a900:	2600      	movs	r6, #0
 800a902:	42a6      	cmp	r6, r4
 800a904:	d105      	bne.n	800a912 <__libc_init_array+0x2e>
 800a906:	bd70      	pop	{r4, r5, r6, pc}
 800a908:	f855 3b04 	ldr.w	r3, [r5], #4
 800a90c:	4798      	blx	r3
 800a90e:	3601      	adds	r6, #1
 800a910:	e7ee      	b.n	800a8f0 <__libc_init_array+0xc>
 800a912:	f855 3b04 	ldr.w	r3, [r5], #4
 800a916:	4798      	blx	r3
 800a918:	3601      	adds	r6, #1
 800a91a:	e7f2      	b.n	800a902 <__libc_init_array+0x1e>
 800a91c:	0800ab60 	.word	0x0800ab60
 800a920:	0800ab60 	.word	0x0800ab60
 800a924:	0800ab60 	.word	0x0800ab60
 800a928:	0800ab64 	.word	0x0800ab64

0800a92c <__retarget_lock_acquire_recursive>:
 800a92c:	4770      	bx	lr

0800a92e <__retarget_lock_release_recursive>:
 800a92e:	4770      	bx	lr

0800a930 <memcpy>:
 800a930:	440a      	add	r2, r1
 800a932:	4291      	cmp	r1, r2
 800a934:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a938:	d100      	bne.n	800a93c <memcpy+0xc>
 800a93a:	4770      	bx	lr
 800a93c:	b510      	push	{r4, lr}
 800a93e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a942:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a946:	4291      	cmp	r1, r2
 800a948:	d1f9      	bne.n	800a93e <memcpy+0xe>
 800a94a:	bd10      	pop	{r4, pc}

0800a94c <_free_r>:
 800a94c:	b538      	push	{r3, r4, r5, lr}
 800a94e:	4605      	mov	r5, r0
 800a950:	2900      	cmp	r1, #0
 800a952:	d041      	beq.n	800a9d8 <_free_r+0x8c>
 800a954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a958:	1f0c      	subs	r4, r1, #4
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	bfb8      	it	lt
 800a95e:	18e4      	addlt	r4, r4, r3
 800a960:	f000 f83e 	bl	800a9e0 <__malloc_lock>
 800a964:	4a1d      	ldr	r2, [pc, #116]	@ (800a9dc <_free_r+0x90>)
 800a966:	6813      	ldr	r3, [r2, #0]
 800a968:	b933      	cbnz	r3, 800a978 <_free_r+0x2c>
 800a96a:	6063      	str	r3, [r4, #4]
 800a96c:	6014      	str	r4, [r2, #0]
 800a96e:	4628      	mov	r0, r5
 800a970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a974:	f000 b83a 	b.w	800a9ec <__malloc_unlock>
 800a978:	42a3      	cmp	r3, r4
 800a97a:	d908      	bls.n	800a98e <_free_r+0x42>
 800a97c:	6820      	ldr	r0, [r4, #0]
 800a97e:	1821      	adds	r1, r4, r0
 800a980:	428b      	cmp	r3, r1
 800a982:	bf01      	itttt	eq
 800a984:	6819      	ldreq	r1, [r3, #0]
 800a986:	685b      	ldreq	r3, [r3, #4]
 800a988:	1809      	addeq	r1, r1, r0
 800a98a:	6021      	streq	r1, [r4, #0]
 800a98c:	e7ed      	b.n	800a96a <_free_r+0x1e>
 800a98e:	461a      	mov	r2, r3
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	b10b      	cbz	r3, 800a998 <_free_r+0x4c>
 800a994:	42a3      	cmp	r3, r4
 800a996:	d9fa      	bls.n	800a98e <_free_r+0x42>
 800a998:	6811      	ldr	r1, [r2, #0]
 800a99a:	1850      	adds	r0, r2, r1
 800a99c:	42a0      	cmp	r0, r4
 800a99e:	d10b      	bne.n	800a9b8 <_free_r+0x6c>
 800a9a0:	6820      	ldr	r0, [r4, #0]
 800a9a2:	4401      	add	r1, r0
 800a9a4:	1850      	adds	r0, r2, r1
 800a9a6:	4283      	cmp	r3, r0
 800a9a8:	6011      	str	r1, [r2, #0]
 800a9aa:	d1e0      	bne.n	800a96e <_free_r+0x22>
 800a9ac:	6818      	ldr	r0, [r3, #0]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	6053      	str	r3, [r2, #4]
 800a9b2:	4408      	add	r0, r1
 800a9b4:	6010      	str	r0, [r2, #0]
 800a9b6:	e7da      	b.n	800a96e <_free_r+0x22>
 800a9b8:	d902      	bls.n	800a9c0 <_free_r+0x74>
 800a9ba:	230c      	movs	r3, #12
 800a9bc:	602b      	str	r3, [r5, #0]
 800a9be:	e7d6      	b.n	800a96e <_free_r+0x22>
 800a9c0:	6820      	ldr	r0, [r4, #0]
 800a9c2:	1821      	adds	r1, r4, r0
 800a9c4:	428b      	cmp	r3, r1
 800a9c6:	bf04      	itt	eq
 800a9c8:	6819      	ldreq	r1, [r3, #0]
 800a9ca:	685b      	ldreq	r3, [r3, #4]
 800a9cc:	6063      	str	r3, [r4, #4]
 800a9ce:	bf04      	itt	eq
 800a9d0:	1809      	addeq	r1, r1, r0
 800a9d2:	6021      	streq	r1, [r4, #0]
 800a9d4:	6054      	str	r4, [r2, #4]
 800a9d6:	e7ca      	b.n	800a96e <_free_r+0x22>
 800a9d8:	bd38      	pop	{r3, r4, r5, pc}
 800a9da:	bf00      	nop
 800a9dc:	20001dd0 	.word	0x20001dd0

0800a9e0 <__malloc_lock>:
 800a9e0:	4801      	ldr	r0, [pc, #4]	@ (800a9e8 <__malloc_lock+0x8>)
 800a9e2:	f7ff bfa3 	b.w	800a92c <__retarget_lock_acquire_recursive>
 800a9e6:	bf00      	nop
 800a9e8:	20001dcc 	.word	0x20001dcc

0800a9ec <__malloc_unlock>:
 800a9ec:	4801      	ldr	r0, [pc, #4]	@ (800a9f4 <__malloc_unlock+0x8>)
 800a9ee:	f7ff bf9e 	b.w	800a92e <__retarget_lock_release_recursive>
 800a9f2:	bf00      	nop
 800a9f4:	20001dcc 	.word	0x20001dcc

0800a9f8 <_init>:
 800a9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fa:	bf00      	nop
 800a9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9fe:	bc08      	pop	{r3}
 800aa00:	469e      	mov	lr, r3
 800aa02:	4770      	bx	lr

0800aa04 <_fini>:
 800aa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa06:	bf00      	nop
 800aa08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa0a:	bc08      	pop	{r3}
 800aa0c:	469e      	mov	lr, r3
 800aa0e:	4770      	bx	lr
