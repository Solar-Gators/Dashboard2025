
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6e8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  0800c898  0800c898  0000d898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf84  0800cf84  0000e060  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf84  0800cf84  0000df84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf8c  0800cf8c  0000e060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cf8c  0800cf8c  0000df8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800cf94  0800cf94  0000df94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800cf9c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029b4  20000060  0800cffc  0000e060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a14  0800cffc  0000ea14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029c41  00000000  00000000  0000e090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052f1  00000000  00000000  00037cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021e0  00000000  00000000  0003cfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a6f  00000000  00000000  0003f1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f095  00000000  00000000  00040c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028301  00000000  00000000  0006fcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001263fe  00000000  00000000  00097fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001be3ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094dc  00000000  00000000  001be3f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001c78cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c880 	.word	0x0800c880

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	0800c880 	.word	0x0800c880

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <_ZN14DashboardState5resetEv>:
#include "DashboardState.hpp"

void DashboardState::reset() {
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
    lightState = LIGHTS_NONE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
    oldLightState = LIGHTS_NONE;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	705a      	strb	r2, [r3, #1]

    outputPortState = 0;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2200      	movs	r2, #0
 80004f8:	709a      	strb	r2, [r3, #2]
    hornState = 0;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	70da      	strb	r2, [r3, #3]
    fanState = 0;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2200      	movs	r2, #0
 8000504:	711a      	strb	r2, [r3, #4]
    headlightState = 0;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2200      	movs	r2, #0
 800050a:	715a      	strb	r2, [r3, #5]
    pttState = 0;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2200      	movs	r2, #0
 8000510:	719a      	strb	r2, [r3, #6]
    displayState = 0;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2200      	movs	r2, #0
 8000516:	71da      	strb	r2, [r3, #7]

    bmsStatus = 0;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2200      	movs	r2, #0
 800051c:	72da      	strb	r2, [r3, #11]
    mcStatus = 0;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2200      	movs	r2, #0
 8000522:	731a      	strb	r2, [r3, #12]
    arrayStatus = 0;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	735a      	strb	r2, [r3, #13]

    old_bmsStatus = 0;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	739a      	strb	r2, [r3, #14]
    old_mcStatus = 0;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	73da      	strb	r2, [r3, #15]
    old_arrayStatus = 0;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	741a      	strb	r2, [r3, #16]

    uart_rx = 0;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	745a      	strb	r2, [r3, #17]
    old_uart_rx = 0;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	749a      	strb	r2, [r3, #18]
    updateRequested = 0;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2200      	movs	r2, #0
 800054c:	74da      	strb	r2, [r3, #19]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <_ZN14DashboardState14updateFromUARTEv>:

void DashboardState::updateFromUART() {
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
    // uart data for lights (blinkers)
    if (uart_rx & BUTTON_HAZARD)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	7c5b      	ldrb	r3, [r3, #17]
 8000566:	f003 0304 	and.w	r3, r3, #4
 800056a:	2b00      	cmp	r3, #0
 800056c:	d003      	beq.n	8000576 <_ZN14DashboardState14updateFromUARTEv+0x1c>
        lightState = LIGHTS_HAZARD;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2203      	movs	r2, #3
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	e01c      	b.n	80005b0 <_ZN14DashboardState14updateFromUARTEv+0x56>
    else if (uart_rx & BUTTON_LEFT_TURN)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	7c5b      	ldrb	r3, [r3, #17]
 800057a:	f003 0308 	and.w	r3, r3, #8
 800057e:	2b00      	cmp	r3, #0
 8000580:	d003      	beq.n	800058a <_ZN14DashboardState14updateFromUARTEv+0x30>
        lightState = LIGHTS_LEFT;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
 8000588:	e012      	b.n	80005b0 <_ZN14DashboardState14updateFromUARTEv+0x56>
    else if (uart_rx & BUTTON_RIGHT_TURN)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	7c5b      	ldrb	r3, [r3, #17]
 800058e:	b25b      	sxtb	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	da03      	bge.n	800059c <_ZN14DashboardState14updateFromUARTEv+0x42>
        lightState = LIGHTS_RIGHT;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2202      	movs	r2, #2
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	e009      	b.n	80005b0 <_ZN14DashboardState14updateFromUARTEv+0x56>
    else {
        lightState = LIGHTS_NONE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
        outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	789b      	ldrb	r3, [r3, #2]
 80005a6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	709a      	strb	r2, [r3, #2]
    }

    // if headlight should be on  
    if (uart_rx & BUTTON_HEADLIGHTS) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	7c5b      	ldrb	r3, [r3, #17]
 80005b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00a      	beq.n	80005d2 <_ZN14DashboardState14updateFromUARTEv+0x78>
        outputPortState |= (OUTPUT_R_HEAD_CTRL | OUTPUT_L_HEAD_CTRL);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	789b      	ldrb	r3, [r3, #2]
 80005c0:	f043 030c 	orr.w	r3, r3, #12
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	709a      	strb	r2, [r3, #2]
        headlightState = 1;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2201      	movs	r2, #1
 80005ce:	715a      	strb	r2, [r3, #5]
 80005d0:	e009      	b.n	80005e6 <_ZN14DashboardState14updateFromUARTEv+0x8c>
    }
    else  {
        outputPortState &= ~(OUTPUT_R_HEAD_CTRL | OUTPUT_L_HEAD_CTRL);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	789b      	ldrb	r3, [r3, #2]
 80005d6:	f023 030c 	bic.w	r3, r3, #12
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	709a      	strb	r2, [r3, #2]
        headlightState = 0;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	715a      	strb	r2, [r3, #5]
    }

    // if horn should be on
    if (uart_rx & BUTTON_HORN) {
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	7c5b      	ldrb	r3, [r3, #17]
 80005ea:	f003 0320 	and.w	r3, r3, #32
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d00a      	beq.n	8000608 <_ZN14DashboardState14updateFromUARTEv+0xae>
        outputPortState |= OUTPUT_HORN_CTRL;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	789b      	ldrb	r3, [r3, #2]
 80005f6:	f043 0302 	orr.w	r3, r3, #2
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	709a      	strb	r2, [r3, #2]
        hornState = 1;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2201      	movs	r2, #1
 8000604:	70da      	strb	r2, [r3, #3]
 8000606:	e009      	b.n	800061c <_ZN14DashboardState14updateFromUARTEv+0xc2>
    }
    else {
        outputPortState &= ~OUTPUT_HORN_CTRL;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	789b      	ldrb	r3, [r3, #2]
 800060c:	f023 0302 	bic.w	r3, r3, #2
 8000610:	b2da      	uxtb	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	709a      	strb	r2, [r3, #2]
        hornState = 0;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2200      	movs	r2, #0
 800061a:	70da      	strb	r2, [r3, #3]
    }

    // if fan should be on
    if (uart_rx & BUTTON_FAN) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	7c5b      	ldrb	r3, [r3, #17]
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00a      	beq.n	800063e <_ZN14DashboardState14updateFromUARTEv+0xe4>
        outputPortState |= OUTPUT_FAN_CTRL;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	b2da      	uxtb	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	709a      	strb	r2, [r3, #2]
        fanState = 1;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2201      	movs	r2, #1
 800063a:	711a      	strb	r2, [r3, #4]
 800063c:	e009      	b.n	8000652 <_ZN14DashboardState14updateFromUARTEv+0xf8>
    }
    else {
        outputPortState &= ~OUTPUT_FAN_CTRL;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	789b      	ldrb	r3, [r3, #2]
 8000642:	f023 0301 	bic.w	r3, r3, #1
 8000646:	b2da      	uxtb	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	709a      	strb	r2, [r3, #2]
        fanState = 0;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	711a      	strb	r2, [r3, #4]
    }

    // if PTT should be on
    if (uart_rx & BUTTON_PTT) {
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	7c5b      	ldrb	r3, [r3, #17]
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	2b00      	cmp	r3, #0
 800065c:	d003      	beq.n	8000666 <_ZN14DashboardState14updateFromUARTEv+0x10c>
        pttState = 1;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2201      	movs	r2, #1
 8000662:	719a      	strb	r2, [r3, #6]
 8000664:	e002      	b.n	800066c <_ZN14DashboardState14updateFromUARTEv+0x112>
    }
    else {
        pttState = 0;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2200      	movs	r2, #0
 800066a:	719a      	strb	r2, [r3, #6]
    }

    // TODO: do something with displayState cause this isn't setup to go anywhere
    if (uart_rx & BUTTON_DISPLAY) {
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	7c5b      	ldrb	r3, [r3, #17]
 8000670:	f003 0302 	and.w	r3, r3, #2
 8000674:	2b00      	cmp	r3, #0
 8000676:	d003      	beq.n	8000680 <_ZN14DashboardState14updateFromUARTEv+0x126>
        displayState = 1;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2201      	movs	r2, #1
 800067c:	71da      	strb	r2, [r3, #7]
    }
    else {
        displayState = 0;
    }

}
 800067e:	e002      	b.n	8000686 <_ZN14DashboardState14updateFromUARTEv+0x12c>
        displayState = 0;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2200      	movs	r2, #0
 8000684:	71da      	strb	r2, [r3, #7]
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>:

HAL_StatusTypeDef DashboardState::writeToPort(TCAL9538RSVR &U7) {
 8000692:	b580      	push	{r7, lr}
 8000694:	b084      	sub	sp, #16
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
	uint8_t inverted = ~outputPortState;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	789b      	ldrb	r3, [r3, #2]
 80006a0:	43db      	mvns	r3, r3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	73fb      	strb	r3, [r7, #15]
    return TCAL9538RSVR_SetOutput(&U7, &inverted); // write to output port
 80006a6:	f107 030f 	add.w	r3, r7, #15
 80006aa:	4619      	mov	r1, r3
 80006ac:	6838      	ldr	r0, [r7, #0]
 80006ae:	f002 fc80 	bl	8002fb2 <TCAL9538RSVR_SetOutput>
 80006b2:	4603      	mov	r3, r0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <_ZN14DashboardState11blinkLightsEv>:

void DashboardState::blinkLights() {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    switch (lightState) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b03      	cmp	r3, #3
 80006ca:	d82b      	bhi.n	8000724 <_ZN14DashboardState11blinkLightsEv+0x68>
 80006cc:	a201      	add	r2, pc, #4	@ (adr r2, 80006d4 <_ZN14DashboardState11blinkLightsEv+0x18>)
 80006ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d2:	bf00      	nop
 80006d4:	08000715 	.word	0x08000715
 80006d8:	080006f5 	.word	0x080006f5
 80006dc:	08000705 	.word	0x08000705
 80006e0:	080006e5 	.word	0x080006e5
        case LIGHTS_HAZARD:
            outputPortState ^= (OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	709a      	strb	r2, [r3, #2]
            break;
 80006f2:	e017      	b.n	8000724 <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_LEFT:
            outputPortState ^= OUTPUT_FL_LIGHT_CTRL;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	789b      	ldrb	r3, [r3, #2]
 80006f8:	f083 0320 	eor.w	r3, r3, #32
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	709a      	strb	r2, [r3, #2]
            break;
 8000702:	e00f      	b.n	8000724 <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_RIGHT:
            outputPortState ^= OUTPUT_FR_LIGHT_CTRL;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	789b      	ldrb	r3, [r3, #2]
 8000708:	f083 0310 	eor.w	r3, r3, #16
 800070c:	b2da      	uxtb	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	709a      	strb	r2, [r3, #2]
            break;
 8000712:	e007      	b.n	8000724 <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_NONE:
            outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	789b      	ldrb	r3, [r3, #2]
 8000718:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800071c:	b2da      	uxtb	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	709a      	strb	r2, [r3, #2]
            break;
 8000722:	bf00      	nop
    }
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <CPP_UserSetup>:

DashboardState dashboardState; // Dashboard state object

ILI9341 screen(320, 240);

void CPP_UserSetup(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af02      	add	r7, sp, #8
    // Make sure that timer priorities are configured correctly
    HAL_Delay(10);
 8000736:	200a      	movs	r0, #10
 8000738:	f002 fce6 	bl	8003108 <HAL_Delay>

    dma_flag = 0;
 800073c:	4b5b      	ldr	r3, [pc, #364]	@ (80008ac <CPP_UserSetup+0x17c>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
    cc_enable = 0;
 8000742:	4b5b      	ldr	r3, [pc, #364]	@ (80008b0 <CPP_UserSetup+0x180>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]

	dashboardState.reset(); // reset dashboard state
 8000748:	485a      	ldr	r0, [pc, #360]	@ (80008b4 <CPP_UserSetup+0x184>)
 800074a:	f7ff fec9 	bl	80004e0 <_ZN14DashboardState5resetEv>

    if (TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0xFF, 0x00) != HAL_OK) { Error_Handler(); } // inputs
 800074e:	2300      	movs	r3, #0
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	23ff      	movs	r3, #255	@ 0xff
 8000754:	2202      	movs	r2, #2
 8000756:	4958      	ldr	r1, [pc, #352]	@ (80008b8 <CPP_UserSetup+0x188>)
 8000758:	4858      	ldr	r0, [pc, #352]	@ (80008bc <CPP_UserSetup+0x18c>)
 800075a:	f002 fb6d 	bl	8002e38 <TCAL9538RSVR_INIT>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	bf14      	ite	ne
 8000764:	2301      	movne	r3, #1
 8000766:	2300      	moveq	r3, #0
 8000768:	b2db      	uxtb	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <CPP_UserSetup+0x42>
 800076e:	f001 f903 	bl	8001978 <Error_Handler>
    //if (TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b00111111, 0b11000000) != HAL_OK) { Error_Handler(); }
    if (TCAL9538RSVR_INIT(&U7, &hi2c4, 0x00, 0b00000000, 0b00000000) != HAL_OK) { Error_Handler(); } // output
 8000772:	2300      	movs	r3, #0
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2300      	movs	r3, #0
 8000778:	2200      	movs	r2, #0
 800077a:	494f      	ldr	r1, [pc, #316]	@ (80008b8 <CPP_UserSetup+0x188>)
 800077c:	4850      	ldr	r0, [pc, #320]	@ (80008c0 <CPP_UserSetup+0x190>)
 800077e:	f002 fb5b 	bl	8002e38 <TCAL9538RSVR_INIT>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	bf14      	ite	ne
 8000788:	2301      	movne	r3, #1
 800078a:	2300      	moveq	r3, #0
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <CPP_UserSetup+0x66>
 8000792:	f001 f8f1 	bl	8001978 <Error_Handler>

    // set outputs to low to start
	if (dashboardState.writeToPort(U7) != HAL_OK) { Error_Handler(); }
 8000796:	494a      	ldr	r1, [pc, #296]	@ (80008c0 <CPP_UserSetup+0x190>)
 8000798:	4846      	ldr	r0, [pc, #280]	@ (80008b4 <CPP_UserSetup+0x184>)
 800079a:	f7ff ff7a 	bl	8000692 <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	bf14      	ite	ne
 80007a4:	2301      	movne	r3, #1
 80007a6:	2300      	moveq	r3, #0
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <CPP_UserSetup+0x82>
 80007ae:	f001 f8e3 	bl	8001978 <Error_Handler>

	// Set up UART4 for receiving data from the steering wheel
	HAL_UART_Receive_IT(&huart4, &dashboardState.uart_rx, 1); // enable uart interrupt
 80007b2:	2201      	movs	r2, #1
 80007b4:	4943      	ldr	r1, [pc, #268]	@ (80008c4 <CPP_UserSetup+0x194>)
 80007b6:	4844      	ldr	r0, [pc, #272]	@ (80008c8 <CPP_UserSetup+0x198>)
 80007b8:	f007 fcec 	bl	8008194 <HAL_UART_Receive_IT>

    screen.Init();
 80007bc:	4843      	ldr	r0, [pc, #268]	@ (80008cc <CPP_UserSetup+0x19c>)
 80007be:	f001 fc95 	bl	80020ec <_ZN7ILI93414InitEv>
    screen.SetRotation(3);
 80007c2:	2103      	movs	r1, #3
 80007c4:	4841      	ldr	r0, [pc, #260]	@ (80008cc <CPP_UserSetup+0x19c>)
 80007c6:	f002 f81b 	bl	8002800 <_ZN7ILI934111SetRotationEh>
    screen.ClearScreen(RGB565_WHITE);
 80007ca:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80007ce:	483f      	ldr	r0, [pc, #252]	@ (80008cc <CPP_UserSetup+0x19c>)
 80007d0:	f001 ff4b 	bl	800266a <_ZN7ILI934111ClearScreenEt>

    uint16_t x_text = 70;
 80007d4:	2346      	movs	r3, #70	@ 0x46
 80007d6:	81fb      	strh	r3, [r7, #14]
    uint16_t y_text = 10;
 80007d8:	230a      	movs	r3, #10
 80007da:	81bb      	strh	r3, [r7, #12]
    const char* str1 = "UF Solar Gators :)\0";
 80007dc:	4b3c      	ldr	r3, [pc, #240]	@ (80008d0 <CPP_UserSetup+0x1a0>)
 80007de:	60bb      	str	r3, [r7, #8]
    screen.SetTextSize(2);
 80007e0:	2102      	movs	r1, #2
 80007e2:	483a      	ldr	r0, [pc, #232]	@ (80008cc <CPP_UserSetup+0x19c>)
 80007e4:	f002 f878 	bl	80028d8 <_ZN7ILI934111SetTextSizeEh>
    screen.DrawText(x_text, y_text, str1, RGB565_BLACK);
 80007e8:	89ba      	ldrh	r2, [r7, #12]
 80007ea:	89f9      	ldrh	r1, [r7, #14]
 80007ec:	2300      	movs	r3, #0
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4836      	ldr	r0, [pc, #216]	@ (80008cc <CPP_UserSetup+0x19c>)
 80007f4:	f002 f99c 	bl	8002b30 <_ZN7ILI93418DrawTextEttPKct>

    x_text = 55;
 80007f8:	2337      	movs	r3, #55	@ 0x37
 80007fa:	81fb      	strh	r3, [r7, #14]
    y_text = 170;
 80007fc:	23aa      	movs	r3, #170	@ 0xaa
 80007fe:	81bb      	strh	r3, [r7, #12]
    const char* str2 = "BMS    MC    Array\0";
 8000800:	4b34      	ldr	r3, [pc, #208]	@ (80008d4 <CPP_UserSetup+0x1a4>)
 8000802:	607b      	str	r3, [r7, #4]

    screen.SetTextSize(2);
 8000804:	2102      	movs	r1, #2
 8000806:	4831      	ldr	r0, [pc, #196]	@ (80008cc <CPP_UserSetup+0x19c>)
 8000808:	f002 f866 	bl	80028d8 <_ZN7ILI934111SetTextSizeEh>
    screen.DrawText(x_text, y_text, str2, RGB565_BLACK);
 800080c:	89ba      	ldrh	r2, [r7, #12]
 800080e:	89f9      	ldrh	r1, [r7, #14]
 8000810:	2300      	movs	r3, #0
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	482d      	ldr	r0, [pc, #180]	@ (80008cc <CPP_UserSetup+0x19c>)
 8000818:	f002 f98a 	bl	8002b30 <_ZN7ILI93418DrawTextEttPKct>

    screen.FillCircle(70, 210, 10, RGB565_RED);
 800081c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	230a      	movs	r3, #10
 8000824:	22d2      	movs	r2, #210	@ 0xd2
 8000826:	2146      	movs	r1, #70	@ 0x46
 8000828:	4828      	ldr	r0, [pc, #160]	@ (80008cc <CPP_UserSetup+0x19c>)
 800082a:	f002 fa5f 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(150, 210, 10, RGB565_RED);
 800082e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	230a      	movs	r3, #10
 8000836:	22d2      	movs	r2, #210	@ 0xd2
 8000838:	2196      	movs	r1, #150	@ 0x96
 800083a:	4824      	ldr	r0, [pc, #144]	@ (80008cc <CPP_UserSetup+0x19c>)
 800083c:	f002 fa56 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(235, 210, 10, RGB565_RED);
 8000840:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	230a      	movs	r3, #10
 8000848:	22d2      	movs	r2, #210	@ 0xd2
 800084a:	21eb      	movs	r1, #235	@ 0xeb
 800084c:	481f      	ldr	r0, [pc, #124]	@ (80008cc <CPP_UserSetup+0x19c>)
 800084e:	f002 fa4d 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>

	// temp to help debug  
	const char* str3 = "HedLit Horn  Fan\0";
 8000852:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <CPP_UserSetup+0x1a8>)
 8000854:	603b      	str	r3, [r7, #0]
    screen.SetTextSize(2);
 8000856:	2102      	movs	r1, #2
 8000858:	481c      	ldr	r0, [pc, #112]	@ (80008cc <CPP_UserSetup+0x19c>)
 800085a:	f002 f83d 	bl	80028d8 <_ZN7ILI934111SetTextSizeEh>
    screen.DrawText(55, 80, str3, RGB565_BLACK);  // Labels above the circles
 800085e:	2300      	movs	r3, #0
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	2250      	movs	r2, #80	@ 0x50
 8000866:	2137      	movs	r1, #55	@ 0x37
 8000868:	4818      	ldr	r0, [pc, #96]	@ (80008cc <CPP_UserSetup+0x19c>)
 800086a:	f002 f961 	bl	8002b30 <_ZN7ILI93418DrawTextEttPKct>

    screen.FillCircle(70, 120, 10, RGB565_RED);   // Headlights
 800086e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	230a      	movs	r3, #10
 8000876:	2278      	movs	r2, #120	@ 0x78
 8000878:	2146      	movs	r1, #70	@ 0x46
 800087a:	4814      	ldr	r0, [pc, #80]	@ (80008cc <CPP_UserSetup+0x19c>)
 800087c:	f002 fa36 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(150, 120, 10, RGB565_RED);  // Horn
 8000880:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	230a      	movs	r3, #10
 8000888:	2278      	movs	r2, #120	@ 0x78
 800088a:	2196      	movs	r1, #150	@ 0x96
 800088c:	480f      	ldr	r0, [pc, #60]	@ (80008cc <CPP_UserSetup+0x19c>)
 800088e:	f002 fa2d 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(235, 120, 10, RGB565_RED);  // Fan
 8000892:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	230a      	movs	r3, #10
 800089a:	2278      	movs	r2, #120	@ 0x78
 800089c:	21eb      	movs	r1, #235	@ 0xeb
 800089e:	480b      	ldr	r0, [pc, #44]	@ (80008cc <CPP_UserSetup+0x19c>)
 80008a0:	f002 fa24 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200000a8 	.word	0x200000a8
 80008b0:	200000a9 	.word	0x200000a9
 80008b4:	200000ac 	.word	0x200000ac
 80008b8:	20000234 	.word	0x20000234
 80008bc:	2000007c 	.word	0x2000007c
 80008c0:	2000008c 	.word	0x2000008c
 80008c4:	200000bd 	.word	0x200000bd
 80008c8:	20000288 	.word	0x20000288
 80008cc:	200000c0 	.word	0x200000c0
 80008d0:	0800c898 	.word	0x0800c898
 80008d4:	0800c8ac 	.word	0x0800c8ac
 80008d8:	0800c8c0 	.word	0x0800c8c0

080008dc <_Z11StartTask01Pv>:


void StartTask01(void *argument)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_UART_Receive(&huart4, UART4_rxBuffer, 1, HAL_MAX_DELAY);
	  HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 80008e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ec:	f004 ff4a 	bl	8005784 <HAL_GPIO_TogglePin>
    osDelay(500);
 80008f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008f4:	f009 f880 	bl	80099f8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 80008f8:	bf00      	nop
 80008fa:	e7f3      	b.n	80008e4 <_Z11StartTask01Pv+0x8>

080008fc <_Z11StartTask02Pv>:
  }
  /* USER CODE END 5 */
}

void StartTask02(void *argument)
{
 80008fc:	b5b0      	push	{r4, r5, r7, lr}
 80008fe:	b092      	sub	sp, #72	@ 0x48
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

	uint16_t adc_var_avg = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	int HAL_CAN_BUSY = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	643b      	str	r3, [r7, #64]	@ 0x40
	uint64_t messages_sent = 0;
 800090e:	f04f 0200 	mov.w	r2, #0
 8000912:	f04f 0300 	mov.w	r3, #0
 8000916:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	static uint8_t update_cc = 0;

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = { 0 };
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x0; // 11 bit Identifier
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000932:	2308      	movs	r3, #8
 8000934:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxData[0] = 1;
 8000936:	2301      	movs	r3, #1
 8000938:	743b      	strb	r3, [r7, #16]
	uint8_t adc_data[2];



  	  // Transmit over CAN
  	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	f107 0210 	add.w	r2, r7, #16
 8000942:	f107 0118 	add.w	r1, r7, #24
 8000946:	4848      	ldr	r0, [pc, #288]	@ (8000a68 <_Z11StartTask02Pv+0x16c>)
 8000948:	f004 f915 	bl	8004b76 <HAL_CAN_AddTxMessage>


  for (;;)
  {

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 800094c:	220a      	movs	r2, #10
 800094e:	4947      	ldr	r1, [pc, #284]	@ (8000a6c <_Z11StartTask02Pv+0x170>)
 8000950:	4847      	ldr	r0, [pc, #284]	@ (8000a70 <_Z11StartTask02Pv+0x174>)
 8000952:	f002 ff87 	bl	8003864 <HAL_ADC_Start_DMA>
	// Start ADC with DMA
	while (!(dma_flag));
 8000956:	bf00      	nop
 8000958:	4b46      	ldr	r3, [pc, #280]	@ (8000a74 <_Z11StartTask02Pv+0x178>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	bf0c      	ite	eq
 8000962:	2301      	moveq	r3, #1
 8000964:	2300      	movne	r3, #0
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1f5      	bne.n	8000958 <_Z11StartTask02Pv+0x5c>

	// Stop ADC with DMA
	HAL_ADC_Stop_DMA(&hadc1);
 800096c:	4840      	ldr	r0, [pc, #256]	@ (8000a70 <_Z11StartTask02Pv+0x174>)
 800096e:	f003 f835 	bl	80039dc <HAL_ADC_Stop_DMA>
	dma_flag = 0;
 8000972:	4b40      	ldr	r3, [pc, #256]	@ (8000a74 <_Z11StartTask02Pv+0x178>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
	adc_var_avg = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	// Copy ADC buffer and compute average
	for (int i = 0; i < ADC_BUF_LEN; i++)
 800097e:	2300      	movs	r3, #0
 8000980:	637b      	str	r3, [r7, #52]	@ 0x34
 8000982:	e00b      	b.n	800099c <_Z11StartTask02Pv+0xa0>
	{
		adc_var_avg += adc_buf[i];
 8000984:	4a39      	ldr	r2, [pc, #228]	@ (8000a6c <_Z11StartTask02Pv+0x170>)
 8000986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000988:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800098c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000990:	4413      	add	r3, r2
 8000992:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	for (int i = 0; i < ADC_BUF_LEN; i++)
 8000996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000998:	3301      	adds	r3, #1
 800099a:	637b      	str	r3, [r7, #52]	@ 0x34
 800099c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800099e:	2b09      	cmp	r3, #9
 80009a0:	ddf0      	ble.n	8000984 <_Z11StartTask02Pv+0x88>
	}
	adc_var_avg /= ADC_BUF_LEN;
 80009a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009a6:	4a34      	ldr	r2, [pc, #208]	@ (8000a78 <_Z11StartTask02Pv+0x17c>)
 80009a8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ac:	08db      	lsrs	r3, r3, #3
 80009ae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46


	adc_data[0] = adc_var_avg & 0xFF;
 80009b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	723b      	strb	r3, [r7, #8]
	adc_data[1] = (adc_var_avg >> 8) & 0x0F;
 80009ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009be:	0a1b      	lsrs	r3, r3, #8
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	f003 030f 	and.w	r3, r3, #15
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	727b      	strb	r3, [r7, #9]

	if (cc_enable)
 80009cc:	4b2b      	ldr	r3, [pc, #172]	@ (8000a7c <_Z11StartTask02Pv+0x180>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d00b      	beq.n	80009ec <_Z11StartTask02Pv+0xf0>
	{
		if (update_cc)
 80009d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a80 <_Z11StartTask02Pv+0x184>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d00e      	beq.n	80009fa <_Z11StartTask02Pv+0xfe>
		{
			TxData[5] = adc_data[0];
 80009dc:	7a3b      	ldrb	r3, [r7, #8]
 80009de:	757b      	strb	r3, [r7, #21]
			TxData[6] = adc_data[1];
 80009e0:	7a7b      	ldrb	r3, [r7, #9]
 80009e2:	75bb      	strb	r3, [r7, #22]
			update_cc = 0;
 80009e4:	4b26      	ldr	r3, [pc, #152]	@ (8000a80 <_Z11StartTask02Pv+0x184>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
 80009ea:	e006      	b.n	80009fa <_Z11StartTask02Pv+0xfe>
		}
	}
	else
	{
		TxData[5] = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	757b      	strb	r3, [r7, #21]
		TxData[6] = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	75bb      	strb	r3, [r7, #22]
		update_cc = 1;
 80009f4:	4b22      	ldr	r3, [pc, #136]	@ (8000a80 <_Z11StartTask02Pv+0x184>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
	}


	TxData[0] = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	743b      	strb	r3, [r7, #16]
	TxData[1] = adc_data[0];
 80009fe:	7a3b      	ldrb	r3, [r7, #8]
 8000a00:	747b      	strb	r3, [r7, #17]
	TxData[2] = adc_data[1];
 8000a02:	7a7b      	ldrb	r3, [r7, #9]
 8000a04:	74bb      	strb	r3, [r7, #18]
	//Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
    // Wait until the ADC DMA completes
	  // Send CAN messages
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8000a06:	bf00      	nop
 8000a08:	4817      	ldr	r0, [pc, #92]	@ (8000a68 <_Z11StartTask02Pv+0x16c>)
 8000a0a:	f004 f984 	bl	8004d16 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	bf0c      	ite	eq
 8000a14:	2301      	moveq	r3, #1
 8000a16:	2300      	movne	r3, #0
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1f4      	bne.n	8000a08 <_Z11StartTask02Pv+0x10c>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	f107 0210 	add.w	r2, r7, #16
 8000a26:	f107 0118 	add.w	r1, r7, #24
 8000a2a:	480f      	ldr	r0, [pc, #60]	@ (8000a68 <_Z11StartTask02Pv+0x16c>)
 8000a2c:	f004 f8a3 	bl	8004b76 <HAL_CAN_AddTxMessage>
 8000a30:	4603      	mov	r3, r0
 8000a32:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	  messages_sent++;
 8000a36:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000a3a:	1c54      	adds	r4, r2, #1
 8000a3c:	f143 0500 	adc.w	r5, r3, #0
 8000a40:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
	  if (status == HAL_ERROR)
 8000a44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d102      	bne.n	8000a52 <_Z11StartTask02Pv+0x156>
	  {
		  Error_Handler();
 8000a4c:	f000 ff94 	bl	8001978 <Error_Handler>
 8000a50:	e006      	b.n	8000a60 <_Z11StartTask02Pv+0x164>
	  }
	  else if (status == HAL_BUSY)
 8000a52:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d102      	bne.n	8000a60 <_Z11StartTask02Pv+0x164>
	  {
		  HAL_CAN_BUSY++;
 8000a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	643b      	str	r3, [r7, #64]	@ 0x40
	  }
    osDelay(20);
 8000a60:	2014      	movs	r0, #20
 8000a62:	f008 ffc9 	bl	80099f8 <osDelay>
  }
 8000a66:	e771      	b.n	800094c <_Z11StartTask02Pv+0x50>
 8000a68:	200001e4 	.word	0x200001e4
 8000a6c:	20000094 	.word	0x20000094
 8000a70:	20000134 	.word	0x20000134
 8000a74:	200000a8 	.word	0x200000a8
 8000a78:	cccccccd 	.word	0xcccccccd
 8000a7c:	200000a9 	.word	0x200000a9
 8000a80:	20000130 	.word	0x20000130

08000a84 <_Z11StartTask03Pv>:
  /* USER CODE END StartTask02 */
}

void StartTask03(void *argument)
{
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b090      	sub	sp, #64	@ 0x40
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */

	int debounce_count = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int HAL_CAN_BUSY = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint64_t messages_sent = 0;
 8000a94:	f04f 0200 	mov.w	r2, #0
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox = { 0 };
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = 0x7FF; // 11 bit Identifier !!Change!!
 8000ab0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ab4:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000aba:	2308      	movs	r3, #8
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
	TxData[0] = 1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	733b      	strb	r3, [r7, #12]

	Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8000b84 <_Z11StartTask03Pv+0x100>)
 8000ac8:	492f      	ldr	r1, [pc, #188]	@ (8000b88 <_Z11StartTask03Pv+0x104>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f9fe 	bl	8000ecc <_Z19Update_CAN_Message1PhS_S_>

	/* Infinite loop */
	for(;;)
	{
	  // Read TCAL Input and update flags
	  if (GPIO_Interrupt_Triggered)
 8000ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b8c <_Z11StartTask03Pv+0x108>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d022      	beq.n	8000b1e <_Z11StartTask03Pv+0x9a>
	  {
		  if (debounce_count++ <= 2) {continue;}
 8000ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	bfd4      	ite	le
 8000ae2:	2301      	movle	r3, #1
 8000ae4:	2300      	movgt	r3, #0
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d149      	bne.n	8000b80 <_Z11StartTask03Pv+0xfc>
		  if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK){ Error_Handler(); }
 8000aec:	4828      	ldr	r0, [pc, #160]	@ (8000b90 <_Z11StartTask03Pv+0x10c>)
 8000aee:	f002 fa29 	bl	8002f44 <TCAL9538RSVR_HandleInterrupt>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	bf14      	ite	ne
 8000af8:	2301      	movne	r3, #1
 8000afa:	2300      	moveq	r3, #0
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <_Z11StartTask03Pv+0x82>
 8000b02:	f000 ff39 	bl	8001978 <Error_Handler>
		  //if (TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK){ Error_Handler(); }


		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000b84 <_Z11StartTask03Pv+0x100>)
 8000b0c:	491e      	ldr	r1, [pc, #120]	@ (8000b88 <_Z11StartTask03Pv+0x104>)
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f9dc 	bl	8000ecc <_Z19Update_CAN_Message1PhS_S_>
		  GPIO_Interrupt_Triggered = 0;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	@ (8000b8c <_Z11StartTask03Pv+0x108>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
		  debounce_count = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  }

	  // Send CAN messages
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8000b1e:	bf00      	nop
 8000b20:	481c      	ldr	r0, [pc, #112]	@ (8000b94 <_Z11StartTask03Pv+0x110>)
 8000b22:	f004 f8f8 	bl	8004d16 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	bf0c      	ite	eq
 8000b2c:	2301      	moveq	r3, #1
 8000b2e:	2300      	movne	r3, #0
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1f4      	bne.n	8000b20 <_Z11StartTask03Pv+0x9c>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	f107 020c 	add.w	r2, r7, #12
 8000b3e:	f107 0114 	add.w	r1, r7, #20
 8000b42:	4814      	ldr	r0, [pc, #80]	@ (8000b94 <_Z11StartTask03Pv+0x110>)
 8000b44:	f004 f817 	bl	8004b76 <HAL_CAN_AddTxMessage>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  messages_sent++;
 8000b4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000b52:	1c54      	adds	r4, r2, #1
 8000b54:	f143 0500 	adc.w	r5, r3, #0
 8000b58:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	  if (status == HAL_ERROR)
 8000b5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d102      	bne.n	8000b6a <_Z11StartTask03Pv+0xe6>
	  {
		  Error_Handler();
 8000b64:	f000 ff08 	bl	8001978 <Error_Handler>
 8000b68:	e006      	b.n	8000b78 <_Z11StartTask03Pv+0xf4>
	  }
	  else if (status == HAL_BUSY)
 8000b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d102      	bne.n	8000b78 <_Z11StartTask03Pv+0xf4>
	  {
		  HAL_CAN_BUSY++;
 8000b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b74:	3301      	adds	r3, #1
 8000b76:	63bb      	str	r3, [r7, #56]	@ 0x38
	  }
	  osDelay(50);
 8000b78:	2032      	movs	r0, #50	@ 0x32
 8000b7a:	f008 ff3d 	bl	80099f8 <osDelay>
 8000b7e:	e7a7      	b.n	8000ad0 <_Z11StartTask03Pv+0x4c>
		  if (debounce_count++ <= 2) {continue;}
 8000b80:	bf00      	nop
  }
 8000b82:	e7a5      	b.n	8000ad0 <_Z11StartTask03Pv+0x4c>
 8000b84:	20000089 	.word	0x20000089
 8000b88:	20000081 	.word	0x20000081
 8000b8c:	200000aa 	.word	0x200000aa
 8000b90:	2000007c 	.word	0x2000007c
 8000b94:	200001e4 	.word	0x200001e4

08000b98 <_Z11StartTask04Pv>:
  /* USER CODE END StartTask03 */
}


void StartTask04(void *argument)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */

  uint32_t lastBlinkTime = HAL_GetTick();
 8000ba0:	f002 faa6 	bl	80030f0 <HAL_GetTick>
 8000ba4:	6178      	str	r0, [r7, #20]
  const uint32_t blinkInterval = 500;
 8000ba6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000baa:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  for(;;)
  {

    uint32_t currentTick = HAL_GetTick();
 8000bac:	f002 faa0 	bl	80030f0 <HAL_GetTick>
 8000bb0:	60f8      	str	r0, [r7, #12]

    if (currentTick - lastBlinkTime > blinkInterval)
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000bbc:	d908      	bls.n	8000bd0 <_Z11StartTask04Pv+0x38>
    {
      	lastBlinkTime = currentTick;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	617b      	str	r3, [r7, #20]
		// enter critical section because we do read-modify-write operations in that function
		DASHBOARD_CRITICAL(
 8000bc2:	f00b fa59 	bl	800c078 <vPortEnterCritical>
 8000bc6:	4812      	ldr	r0, [pc, #72]	@ (8000c10 <_Z11StartTask04Pv+0x78>)
 8000bc8:	f7ff fd78 	bl	80006bc <_ZN14DashboardState11blinkLightsEv>
 8000bcc:	f00b fa86 	bl	800c0dc <vPortExitCritical>
			dashboardState.blinkLights()
	  	);
	}

	if (dashboardState.updateRequested) {
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <_Z11StartTask04Pv+0x78>)
 8000bd2:	7cdb      	ldrb	r3, [r3, #19]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d009      	beq.n	8000bec <_Z11StartTask04Pv+0x54>
		// enter critical section because we do read-modify-write operations in that function
		DASHBOARD_CRITICAL(
 8000bd8:	f00b fa4e 	bl	800c078 <vPortEnterCritical>
 8000bdc:	480c      	ldr	r0, [pc, #48]	@ (8000c10 <_Z11StartTask04Pv+0x78>)
 8000bde:	f7ff fcbc 	bl	800055a <_ZN14DashboardState14updateFromUARTEv>
 8000be2:	f00b fa7b 	bl	800c0dc <vPortExitCritical>
			dashboardState.updateFromUART()
		);
		dashboardState.updateRequested = 0; // reset update requested flag
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <_Z11StartTask04Pv+0x78>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	74da      	strb	r2, [r3, #19]
	}

	if (dashboardState.writeToPort(U7) != HAL_OK) { Error_Handler(); } // write to output port
 8000bec:	4909      	ldr	r1, [pc, #36]	@ (8000c14 <_Z11StartTask04Pv+0x7c>)
 8000bee:	4808      	ldr	r0, [pc, #32]	@ (8000c10 <_Z11StartTask04Pv+0x78>)
 8000bf0:	f7ff fd4f 	bl	8000692 <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf14      	ite	ne
 8000bfa:	2301      	movne	r3, #1
 8000bfc:	2300      	moveq	r3, #0
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <_Z11StartTask04Pv+0x70>
 8000c04:	f000 feb8 	bl	8001978 <Error_Handler>

    osDelay(100);
 8000c08:	2064      	movs	r0, #100	@ 0x64
 8000c0a:	f008 fef5 	bl	80099f8 <osDelay>
  }
 8000c0e:	e7cd      	b.n	8000bac <_Z11StartTask04Pv+0x14>
 8000c10:	200000ac 	.word	0x200000ac
 8000c14:	2000008c 	.word	0x2000008c

08000c18 <_Z11StartTask05Pv>:
  /* USER CODE END StartTask04 */
}


void StartTask05(void *argument)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af02      	add	r7, sp, #8
 8000c1e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask05 */
	uint16_t color;
	bool lightStateChanged = false;
 8000c20:	2300      	movs	r3, #0
 8000c22:	757b      	strb	r3, [r7, #21]
	bool bmsStatusChanged = false;
 8000c24:	2300      	movs	r3, #0
 8000c26:	753b      	strb	r3, [r7, #20]
	bool mcStatusChanged = false;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	74fb      	strb	r3, [r7, #19]
	bool arrayStatusChanged = false;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	74bb      	strb	r3, [r7, #18]
	bool hornStateChanged = false;
 8000c30:	2300      	movs	r3, #0
 8000c32:	747b      	strb	r3, [r7, #17]
	bool fanStateChanged = false;
 8000c34:	2300      	movs	r3, #0
 8000c36:	743b      	strb	r3, [r7, #16]
	bool headlightStateChanged = false;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	DASHBOARD_CRITICAL( // critical region for all of these read-read operations that are not atomic
 8000c3c:	f00b fa1c 	bl	800c078 <vPortEnterCritical>
 8000c40:	4ba0      	ldr	r3, [pc, #640]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000c42:	785a      	ldrb	r2, [r3, #1]
 8000c44:	4b9f      	ldr	r3, [pc, #636]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	bf14      	ite	ne
 8000c4c:	2301      	movne	r3, #1
 8000c4e:	2300      	moveq	r3, #0
 8000c50:	757b      	strb	r3, [r7, #21]
 8000c52:	4b9c      	ldr	r3, [pc, #624]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000c54:	7b9a      	ldrb	r2, [r3, #14]
 8000c56:	4b9b      	ldr	r3, [pc, #620]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000c58:	7adb      	ldrb	r3, [r3, #11]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	bf14      	ite	ne
 8000c5e:	2301      	movne	r3, #1
 8000c60:	2300      	moveq	r3, #0
 8000c62:	753b      	strb	r3, [r7, #20]
 8000c64:	4b97      	ldr	r3, [pc, #604]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000c66:	7bda      	ldrb	r2, [r3, #15]
 8000c68:	4b96      	ldr	r3, [pc, #600]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000c6a:	7b1b      	ldrb	r3, [r3, #12]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	bf14      	ite	ne
 8000c70:	2301      	movne	r3, #1
 8000c72:	2300      	moveq	r3, #0
 8000c74:	74fb      	strb	r3, [r7, #19]
 8000c76:	4b93      	ldr	r3, [pc, #588]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000c78:	7c1a      	ldrb	r2, [r3, #16]
 8000c7a:	4b92      	ldr	r3, [pc, #584]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000c7c:	7b5b      	ldrb	r3, [r3, #13]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	bf14      	ite	ne
 8000c82:	2301      	movne	r3, #1
 8000c84:	2300      	moveq	r3, #0
 8000c86:	74bb      	strb	r3, [r7, #18]
 8000c88:	4b8e      	ldr	r3, [pc, #568]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000c8a:	7a1a      	ldrb	r2, [r3, #8]
 8000c8c:	4b8d      	ldr	r3, [pc, #564]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000c8e:	78db      	ldrb	r3, [r3, #3]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	bf14      	ite	ne
 8000c94:	2301      	movne	r3, #1
 8000c96:	2300      	moveq	r3, #0
 8000c98:	747b      	strb	r3, [r7, #17]
 8000c9a:	4b8a      	ldr	r3, [pc, #552]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000c9c:	7a5a      	ldrb	r2, [r3, #9]
 8000c9e:	4b89      	ldr	r3, [pc, #548]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000ca0:	791b      	ldrb	r3, [r3, #4]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	bf14      	ite	ne
 8000ca6:	2301      	movne	r3, #1
 8000ca8:	2300      	moveq	r3, #0
 8000caa:	743b      	strb	r3, [r7, #16]
 8000cac:	4b85      	ldr	r3, [pc, #532]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000cae:	7a9a      	ldrb	r2, [r3, #10]
 8000cb0:	4b84      	ldr	r3, [pc, #528]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000cb2:	795b      	ldrb	r3, [r3, #5]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	bf14      	ite	ne
 8000cb8:	2301      	movne	r3, #1
 8000cba:	2300      	moveq	r3, #0
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	4b81      	ldr	r3, [pc, #516]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	4b80      	ldr	r3, [pc, #512]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000cc4:	705a      	strb	r2, [r3, #1]
 8000cc6:	4b7f      	ldr	r3, [pc, #508]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000cc8:	7ada      	ldrb	r2, [r3, #11]
 8000cca:	4b7e      	ldr	r3, [pc, #504]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000ccc:	739a      	strb	r2, [r3, #14]
 8000cce:	4b7d      	ldr	r3, [pc, #500]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000cd0:	7b1a      	ldrb	r2, [r3, #12]
 8000cd2:	4b7c      	ldr	r3, [pc, #496]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000cd4:	73da      	strb	r2, [r3, #15]
 8000cd6:	4b7b      	ldr	r3, [pc, #492]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000cd8:	7b5a      	ldrb	r2, [r3, #13]
 8000cda:	4b7a      	ldr	r3, [pc, #488]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000cdc:	741a      	strb	r2, [r3, #16]
 8000cde:	4b79      	ldr	r3, [pc, #484]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000ce0:	78da      	ldrb	r2, [r3, #3]
 8000ce2:	4b78      	ldr	r3, [pc, #480]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000ce4:	721a      	strb	r2, [r3, #8]
 8000ce6:	4b77      	ldr	r3, [pc, #476]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000ce8:	791a      	ldrb	r2, [r3, #4]
 8000cea:	4b76      	ldr	r3, [pc, #472]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000cec:	725a      	strb	r2, [r3, #9]
 8000cee:	4b75      	ldr	r3, [pc, #468]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000cf0:	795a      	ldrb	r2, [r3, #5]
 8000cf2:	4b74      	ldr	r3, [pc, #464]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000cf4:	729a      	strb	r2, [r3, #10]
 8000cf6:	f00b f9f1 	bl	800c0dc <vPortExitCritical>
		dashboardState.oldHornState = dashboardState.hornState;
		dashboardState.oldFanState = dashboardState.fanState;
		dashboardState.oldHeadlightState = dashboardState.headlightState;
	); // end critical section

	if(lightStateChanged){
 8000cfa:	7d7b      	ldrb	r3, [r7, #21]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d06e      	beq.n	8000dde <_Z11StartTask05Pv+0x1c6>
		HAL_Delay(1);
 8000d00:	2001      	movs	r0, #1
 8000d02:	f002 fa01 	bl	8003108 <HAL_Delay>
		if(dashboardState.lightState == LIGHTS_LEFT){
 8000d06:	4b6f      	ldr	r3, [pc, #444]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d116      	bne.n	8000d3c <_Z11StartTask05Pv+0x124>
			color = RGB565_GREEN;
 8000d0e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000d12:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(20, 20, 10, color);
 8000d14:	8afb      	ldrh	r3, [r7, #22]
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	230a      	movs	r3, #10
 8000d1a:	2214      	movs	r2, #20
 8000d1c:	2114      	movs	r1, #20
 8000d1e:	486a      	ldr	r0, [pc, #424]	@ (8000ec8 <_Z11StartTask05Pv+0x2b0>)
 8000d20:	f001 ffe4 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_WHITE;
 8000d24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d28:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(300, 20, 10, color);
 8000d2a:	8afb      	ldrh	r3, [r7, #22]
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	230a      	movs	r3, #10
 8000d30:	2214      	movs	r2, #20
 8000d32:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000d36:	4864      	ldr	r0, [pc, #400]	@ (8000ec8 <_Z11StartTask05Pv+0x2b0>)
 8000d38:	f001 ffd8 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>
		}
		if(dashboardState.lightState == LIGHTS_RIGHT){
 8000d3c:	4b61      	ldr	r3, [pc, #388]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d116      	bne.n	8000d72 <_Z11StartTask05Pv+0x15a>
			color = RGB565_WHITE;
 8000d44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d48:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(20, 20, 10, color);
 8000d4a:	8afb      	ldrh	r3, [r7, #22]
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	230a      	movs	r3, #10
 8000d50:	2214      	movs	r2, #20
 8000d52:	2114      	movs	r1, #20
 8000d54:	485c      	ldr	r0, [pc, #368]	@ (8000ec8 <_Z11StartTask05Pv+0x2b0>)
 8000d56:	f001 ffc9 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_GREEN;
 8000d5a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000d5e:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(300, 20, 10, color);
 8000d60:	8afb      	ldrh	r3, [r7, #22]
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	230a      	movs	r3, #10
 8000d66:	2214      	movs	r2, #20
 8000d68:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000d6c:	4856      	ldr	r0, [pc, #344]	@ (8000ec8 <_Z11StartTask05Pv+0x2b0>)
 8000d6e:	f001 ffbd 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>
		}
		if(dashboardState.lightState == LIGHTS_HAZARD){
 8000d72:	4b54      	ldr	r3, [pc, #336]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d116      	bne.n	8000da8 <_Z11StartTask05Pv+0x190>
			color = RGB565_GREEN;
 8000d7a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000d7e:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(20, 20, 10, color);
 8000d80:	8afb      	ldrh	r3, [r7, #22]
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	230a      	movs	r3, #10
 8000d86:	2214      	movs	r2, #20
 8000d88:	2114      	movs	r1, #20
 8000d8a:	484f      	ldr	r0, [pc, #316]	@ (8000ec8 <_Z11StartTask05Pv+0x2b0>)
 8000d8c:	f001 ffae 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_GREEN;
 8000d90:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000d94:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(300, 20, 10, color);
 8000d96:	8afb      	ldrh	r3, [r7, #22]
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	230a      	movs	r3, #10
 8000d9c:	2214      	movs	r2, #20
 8000d9e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000da2:	4849      	ldr	r0, [pc, #292]	@ (8000ec8 <_Z11StartTask05Pv+0x2b0>)
 8000da4:	f001 ffa2 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>
		}
		if(dashboardState.lightState == LIGHTS_NONE){
 8000da8:	4b46      	ldr	r3, [pc, #280]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d116      	bne.n	8000dde <_Z11StartTask05Pv+0x1c6>

			color = RGB565_WHITE;
 8000db0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000db4:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(20, 20, 10, color);
 8000db6:	8afb      	ldrh	r3, [r7, #22]
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	230a      	movs	r3, #10
 8000dbc:	2214      	movs	r2, #20
 8000dbe:	2114      	movs	r1, #20
 8000dc0:	4841      	ldr	r0, [pc, #260]	@ (8000ec8 <_Z11StartTask05Pv+0x2b0>)
 8000dc2:	f001 ff93 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_WHITE;
 8000dc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dca:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(300, 20, 10, color);
 8000dcc:	8afb      	ldrh	r3, [r7, #22]
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	230a      	movs	r3, #10
 8000dd2:	2214      	movs	r2, #20
 8000dd4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000dd8:	483b      	ldr	r0, [pc, #236]	@ (8000ec8 <_Z11StartTask05Pv+0x2b0>)
 8000dda:	f001 ff87 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>
		}
	}
	if(bmsStatusChanged){
 8000dde:	7d3b      	ldrb	r3, [r7, #20]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d007      	beq.n	8000df4 <_Z11StartTask05Pv+0x1dc>
		if (dashboardState.bmsStatus == 1) color == RGB565_GREEN;
		else color == RGB565_GREEN;
		screen.FillCircle(70, 210, 10, color);
 8000de4:	8afb      	ldrh	r3, [r7, #22]
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	230a      	movs	r3, #10
 8000dea:	22d2      	movs	r2, #210	@ 0xd2
 8000dec:	2146      	movs	r1, #70	@ 0x46
 8000dee:	4836      	ldr	r0, [pc, #216]	@ (8000ec8 <_Z11StartTask05Pv+0x2b0>)
 8000df0:	f001 ff7c 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>
	}
	if(mcStatusChanged){
 8000df4:	7cfb      	ldrb	r3, [r7, #19]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d00b      	beq.n	8000e12 <_Z11StartTask05Pv+0x1fa>
		if (dashboardState.mcStatus == 1) color == RGB565_GREEN;
		else color == RGB565_GREEN;
		screen.FillCircle(150, 210, 10, color);
 8000dfa:	8afb      	ldrh	r3, [r7, #22]
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	230a      	movs	r3, #10
 8000e00:	22d2      	movs	r2, #210	@ 0xd2
 8000e02:	2196      	movs	r1, #150	@ 0x96
 8000e04:	4830      	ldr	r0, [pc, #192]	@ (8000ec8 <_Z11StartTask05Pv+0x2b0>)
 8000e06:	f001 ff71 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>
		dashboardState.old_mcStatus = dashboardState.mcStatus;
 8000e0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000e0c:	7b1a      	ldrb	r2, [r3, #12]
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000e10:	73da      	strb	r2, [r3, #15]
	}
	if(arrayStatusChanged){
 8000e12:	7cbb      	ldrb	r3, [r7, #18]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00b      	beq.n	8000e30 <_Z11StartTask05Pv+0x218>
		if (dashboardState.arrayStatus == 1) color == RGB565_GREEN;
		else color == RGB565_GREEN;
		screen.FillCircle(235, 210, 10, color);
 8000e18:	8afb      	ldrh	r3, [r7, #22]
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	22d2      	movs	r2, #210	@ 0xd2
 8000e20:	21eb      	movs	r1, #235	@ 0xeb
 8000e22:	4829      	ldr	r0, [pc, #164]	@ (8000ec8 <_Z11StartTask05Pv+0x2b0>)
 8000e24:	f001 ff62 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>
		dashboardState.old_arrayStatus = dashboardState.arrayStatus;
 8000e28:	4b26      	ldr	r3, [pc, #152]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000e2a:	7b5a      	ldrb	r2, [r3, #13]
 8000e2c:	4b25      	ldr	r3, [pc, #148]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000e2e:	741a      	strb	r2, [r3, #16]
	}

	// temp debug stuff
	if (dashboardState.hornState)
 8000e30:	4b24      	ldr	r3, [pc, #144]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000e32:	78db      	ldrb	r3, [r3, #3]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d009      	beq.n	8000e4c <_Z11StartTask05Pv+0x234>
		screen.FillCircle(150, 120, 10, RGB565_GREEN);
 8000e38:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	230a      	movs	r3, #10
 8000e40:	2278      	movs	r2, #120	@ 0x78
 8000e42:	2196      	movs	r1, #150	@ 0x96
 8000e44:	4820      	ldr	r0, [pc, #128]	@ (8000ec8 <_Z11StartTask05Pv+0x2b0>)
 8000e46:	f001 ff51 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>
 8000e4a:	e008      	b.n	8000e5e <_Z11StartTask05Pv+0x246>
	else
		screen.FillCircle(150, 120, 10, RGB565_RED);
 8000e4c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	230a      	movs	r3, #10
 8000e54:	2278      	movs	r2, #120	@ 0x78
 8000e56:	2196      	movs	r1, #150	@ 0x96
 8000e58:	481b      	ldr	r0, [pc, #108]	@ (8000ec8 <_Z11StartTask05Pv+0x2b0>)
 8000e5a:	f001 ff47 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>

	if (dashboardState.fanState)
 8000e5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000e60:	791b      	ldrb	r3, [r3, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d009      	beq.n	8000e7a <_Z11StartTask05Pv+0x262>
		screen.FillCircle(235, 120, 10, RGB565_GREEN);
 8000e66:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	230a      	movs	r3, #10
 8000e6e:	2278      	movs	r2, #120	@ 0x78
 8000e70:	21eb      	movs	r1, #235	@ 0xeb
 8000e72:	4815      	ldr	r0, [pc, #84]	@ (8000ec8 <_Z11StartTask05Pv+0x2b0>)
 8000e74:	f001 ff3a 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>
 8000e78:	e008      	b.n	8000e8c <_Z11StartTask05Pv+0x274>
	else	
		screen.FillCircle(235, 120, 10, RGB565_RED);
 8000e7a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	230a      	movs	r3, #10
 8000e82:	2278      	movs	r2, #120	@ 0x78
 8000e84:	21eb      	movs	r1, #235	@ 0xeb
 8000e86:	4810      	ldr	r0, [pc, #64]	@ (8000ec8 <_Z11StartTask05Pv+0x2b0>)
 8000e88:	f001 ff30 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>

	if (dashboardState.headlightState)
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <_Z11StartTask05Pv+0x2ac>)
 8000e8e:	795b      	ldrb	r3, [r3, #5]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d009      	beq.n	8000ea8 <_Z11StartTask05Pv+0x290>
		screen.FillCircle(70, 120, 10, RGB565_GREEN);
 8000e94:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	230a      	movs	r3, #10
 8000e9c:	2278      	movs	r2, #120	@ 0x78
 8000e9e:	2146      	movs	r1, #70	@ 0x46
 8000ea0:	4809      	ldr	r0, [pc, #36]	@ (8000ec8 <_Z11StartTask05Pv+0x2b0>)
 8000ea2:	f001 ff23 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>
 8000ea6:	e008      	b.n	8000eba <_Z11StartTask05Pv+0x2a2>
	else
		screen.FillCircle(70, 120, 10, RGB565_RED);
 8000ea8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	230a      	movs	r3, #10
 8000eb0:	2278      	movs	r2, #120	@ 0x78
 8000eb2:	2146      	movs	r1, #70	@ 0x46
 8000eb4:	4804      	ldr	r0, [pc, #16]	@ (8000ec8 <_Z11StartTask05Pv+0x2b0>)
 8000eb6:	f001 ff19 	bl	8002cec <_ZN7ILI934110FillCircleEtttt>

    osDelay(100);
 8000eba:	2064      	movs	r0, #100	@ 0x64
 8000ebc:	f008 fd9c 	bl	80099f8 <osDelay>
	DASHBOARD_CRITICAL( // critical region for all of these read-read operations that are not atomic
 8000ec0:	e6bc      	b.n	8000c3c <_Z11StartTask05Pv+0x24>
 8000ec2:	bf00      	nop
 8000ec4:	200000ac 	.word	0x200000ac
 8000ec8:	200000c0 	.word	0x200000c0

08000ecc <_Z19Update_CAN_Message1PhS_S_>:
  /* USER CODE END StartTask05 */
}


void Update_CAN_Message1(uint8_t flags[8], uint8_t* Input1, uint8_t* Input2)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]

	static uint8_t prev_input1 = 0;
	static uint8_t prev_input2 = 0;


	flags[3] = 0;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	3303      	adds	r3, #3
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
	flags[4] = 0;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]


	// Detect rising edges for each flag
	uint8_t risingEdges_flag1 = (~prev_input1) & *Input1;
 8000ee8:	4b90      	ldr	r3, [pc, #576]	@ (800112c <_Z19Update_CAN_Message1PhS_S_+0x260>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	b25a      	sxtb	r2, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b25b      	sxtb	r3, r3
 8000ef8:	4013      	ands	r3, r2
 8000efa:	b25b      	sxtb	r3, r3
 8000efc:	75fb      	strb	r3, [r7, #23]
	uint8_t risingEdges_flag2 = (~prev_input2) & *Input2;
 8000efe:	4b8c      	ldr	r3, [pc, #560]	@ (8001130 <_Z19Update_CAN_Message1PhS_S_+0x264>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	b25a      	sxtb	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	4013      	ands	r3, r2
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	75bb      	strb	r3, [r7, #22]


	flags[1] ^= CHECK_BIT(risingEdges_flag2, 4) << 0; // Main
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3301      	adds	r3, #1
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b25a      	sxtb	r2, r3
 8000f1c:	7dbb      	ldrb	r3, [r7, #22]
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	bf14      	ite	ne
 8000f26:	2301      	movne	r3, #1
 8000f28:	2300      	moveq	r3, #0
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	4053      	eors	r3, r2
 8000f30:	b25a      	sxtb	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	3301      	adds	r3, #1
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 5) << 1; // Break
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b25a      	sxtb	r2, r3
 8000f42:	7dbb      	ldrb	r3, [r7, #22]
 8000f44:	111b      	asrs	r3, r3, #4
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	b25b      	sxtb	r3, r3
 8000f4e:	4053      	eors	r3, r2
 8000f50:	b25a      	sxtb	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3301      	adds	r3, #1
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 0) << 2; // Mode
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b25a      	sxtb	r2, r3
 8000f62:	7dbb      	ldrb	r3, [r7, #22]
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	b25b      	sxtb	r3, r3
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	4053      	eors	r3, r2
 8000f70:	b25a      	sxtb	r2, r3
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	3301      	adds	r3, #1
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 5) << 3; // MC
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b25a      	sxtb	r2, r3
 8000f82:	7dfb      	ldrb	r3, [r7, #23]
 8000f84:	109b      	asrs	r3, r3, #2
 8000f86:	b25b      	sxtb	r3, r3
 8000f88:	f003 0308 	and.w	r3, r3, #8
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	4053      	eors	r3, r2
 8000f90:	b25a      	sxtb	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3301      	adds	r3, #1
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 6) << 4; // Array
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b25a      	sxtb	r2, r3
 8000fa2:	7dfb      	ldrb	r3, [r7, #23]
 8000fa4:	109b      	asrs	r3, r3, #2
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	f003 0310 	and.w	r3, r3, #16
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	4053      	eors	r3, r2
 8000fb0:	b25a      	sxtb	r2, r3
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 4) << 5; // Extra 1
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b25a      	sxtb	r2, r3
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	f003 0320 	and.w	r3, r3, #32
 8000fcc:	b25b      	sxtb	r3, r3
 8000fce:	4053      	eors	r3, r2
 8000fd0:	b25a      	sxtb	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	701a      	strb	r2, [r3, #0]
	if (dashboardState.hornState) // Horn
 8000fda:	4b56      	ldr	r3, [pc, #344]	@ (8001134 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8000fdc:	78db      	ldrb	r3, [r3, #3]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d009      	beq.n	8000ff6 <_Z19Update_CAN_Message1PhS_S_+0x12a>
		flags[1] |= (1 << 6);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	781a      	ldrb	r2, [r3, #0]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3301      	adds	r3, #1
 8000fec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e008      	b.n	8001008 <_Z19Update_CAN_Message1PhS_S_+0x13c>
	else
		flags[1] &= ~(1 << 6);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	781a      	ldrb	r2, [r3, #0]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3301      	adds	r3, #1
 8001000:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	701a      	strb	r2, [r3, #0]
	if (dashboardState.pttState) // PTT (Push to Talk)
 8001008:	4b4a      	ldr	r3, [pc, #296]	@ (8001134 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 800100a:	799b      	ldrb	r3, [r3, #6]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d009      	beq.n	8001024 <_Z19Update_CAN_Message1PhS_S_+0x158>
		flags[1] |= (1 << 7);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3301      	adds	r3, #1
 8001014:	781a      	ldrb	r2, [r3, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	3301      	adds	r3, #1
 800101a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	701a      	strb	r2, [r3, #0]
 8001022:	e008      	b.n	8001036 <_Z19Update_CAN_Message1PhS_S_+0x16a>
	else
		flags[1] &= ~(1 << 7);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	781a      	ldrb	r2, [r3, #0]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	3301      	adds	r3, #1
 800102e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	701a      	strb	r2, [r3, #0]
	/*
		NOTE:
			currently sending state of turn signal, turn signal on or off
			if wanting to send actual control of turn signal light, need to send outputPortState variable instead of lightState	
	*/
	if (dashboardState.lightState == LIGHTS_HAZARD) // Blinkers
 8001036:	4b3f      	ldr	r3, [pc, #252]	@ (8001134 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b03      	cmp	r3, #3
 800103c:	d109      	bne.n	8001052 <_Z19Update_CAN_Message1PhS_S_+0x186>
		flags[2] |= (1 << 0);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3302      	adds	r3, #2
 8001042:	781a      	ldrb	r2, [r3, #0]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3302      	adds	r3, #2
 8001048:	f042 0201 	orr.w	r2, r2, #1
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	e008      	b.n	8001064 <_Z19Update_CAN_Message1PhS_S_+0x198>
	else
		flags[2] &= ~(1 << 0);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3302      	adds	r3, #2
 8001056:	781a      	ldrb	r2, [r3, #0]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3302      	adds	r3, #2
 800105c:	f022 0201 	bic.w	r2, r2, #1
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	701a      	strb	r2, [r3, #0]
	if (dashboardState.lightState == LIGHTS_LEFT) // Left Turn
 8001064:	4b33      	ldr	r3, [pc, #204]	@ (8001134 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d109      	bne.n	8001080 <_Z19Update_CAN_Message1PhS_S_+0x1b4>
		flags[2] |= (1 << 1);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	3302      	adds	r3, #2
 8001070:	781a      	ldrb	r2, [r3, #0]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3302      	adds	r3, #2
 8001076:	f042 0202 	orr.w	r2, r2, #2
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	e008      	b.n	8001092 <_Z19Update_CAN_Message1PhS_S_+0x1c6>
	else
		flags[2] &= ~(1 << 1);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3302      	adds	r3, #2
 8001084:	781a      	ldrb	r2, [r3, #0]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3302      	adds	r3, #2
 800108a:	f022 0202 	bic.w	r2, r2, #2
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	701a      	strb	r2, [r3, #0]
	if (dashboardState.lightState == LIGHTS_RIGHT) // Right Turn
 8001092:	4b28      	ldr	r3, [pc, #160]	@ (8001134 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d109      	bne.n	80010ae <_Z19Update_CAN_Message1PhS_S_+0x1e2>
		flags[2] |= (1 << 2);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3302      	adds	r3, #2
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3302      	adds	r3, #2
 80010a4:	f042 0204 	orr.w	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	e008      	b.n	80010c0 <_Z19Update_CAN_Message1PhS_S_+0x1f4>
	else
		flags[2] &= ~(1 << 2);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3302      	adds	r3, #2
 80010b2:	781a      	ldrb	r2, [r3, #0]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3302      	adds	r3, #2
 80010b8:	f022 0204 	bic.w	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	701a      	strb	r2, [r3, #0]
	if (dashboardState.headlightState) // Headlights
 80010c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 80010c2:	795b      	ldrb	r3, [r3, #5]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d009      	beq.n	80010dc <_Z19Update_CAN_Message1PhS_S_+0x210>
		flags[2] |= (1 << 3);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	3302      	adds	r3, #2
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	3302      	adds	r3, #2
 80010d2:	f042 0208 	orr.w	r2, r2, #8
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	e008      	b.n	80010ee <_Z19Update_CAN_Message1PhS_S_+0x222>
	else
		flags[2] &= ~(1 << 3);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	3302      	adds	r3, #2
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3302      	adds	r3, #2
 80010e6:	f022 0208 	bic.w	r2, r2, #8
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	701a      	strb	r2, [r3, #0]

	cc_enable ^= CHECK_BIT(risingEdges_flag2, 1);
 80010ee:	7dbb      	ldrb	r3, [r7, #22]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bf14      	ite	ne
 80010f8:	2301      	movne	r3, #1
 80010fa:	2300      	moveq	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	b25a      	sxtb	r2, r3
 8001100:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b25b      	sxtb	r3, r3
 8001106:	4053      	eors	r3, r2
 8001108:	b25b      	sxtb	r3, r3
 800110a:	b2da      	uxtb	r2, r3
 800110c:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 800110e:	701a      	strb	r2, [r3, #0]

	prev_input1 = *Input1;
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <_Z19Update_CAN_Message1PhS_S_+0x260>)
 8001116:	701a      	strb	r2, [r3, #0]
	prev_input2 = *Input2;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	781a      	ldrb	r2, [r3, #0]
 800111c:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <_Z19Update_CAN_Message1PhS_S_+0x264>)
 800111e:	701a      	strb	r2, [r3, #0]

}
 8001120:	bf00      	nop
 8001122:	371c      	adds	r7, #28
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	20000131 	.word	0x20000131
 8001130:	20000132 	.word	0x20000132
 8001134:	200000ac 	.word	0x200000ac
 8001138:	200000a9 	.word	0x200000a9

0800113c <HAL_UART_RxCpltCallback>:
	 * lock in val (turn on off)
	 *
	 * */
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0c      	ldr	r2, [pc, #48]	@ (800117c <HAL_UART_RxCpltCallback+0x40>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d10c      	bne.n	8001168 <HAL_UART_RxCpltCallback+0x2c>
  	{
		if (dashboardState.uart_rx != dashboardState.old_uart_rx)
 800114e:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <HAL_UART_RxCpltCallback+0x44>)
 8001150:	7c5a      	ldrb	r2, [r3, #17]
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <HAL_UART_RxCpltCallback+0x44>)
 8001154:	7c9b      	ldrb	r3, [r3, #18]
 8001156:	429a      	cmp	r2, r3
 8001158:	d006      	beq.n	8001168 <HAL_UART_RxCpltCallback+0x2c>
		{
			dashboardState.updateRequested = 1; // set flag to update dashboard state
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <HAL_UART_RxCpltCallback+0x44>)
 800115c:	2201      	movs	r2, #1
 800115e:	74da      	strb	r2, [r3, #19]
			dashboardState.old_uart_rx = dashboardState.uart_rx;
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <HAL_UART_RxCpltCallback+0x44>)
 8001162:	7c5a      	ldrb	r2, [r3, #17]
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_UART_RxCpltCallback+0x44>)
 8001166:	749a      	strb	r2, [r3, #18]
		}
	}
	HAL_UART_Receive_IT(&huart4, &dashboardState.uart_rx, 1);
 8001168:	2201      	movs	r2, #1
 800116a:	4906      	ldr	r1, [pc, #24]	@ (8001184 <HAL_UART_RxCpltCallback+0x48>)
 800116c:	4806      	ldr	r0, [pc, #24]	@ (8001188 <HAL_UART_RxCpltCallback+0x4c>)
 800116e:	f007 f811 	bl	8008194 <HAL_UART_Receive_IT>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40004c00 	.word	0x40004c00
 8001180:	200000ac 	.word	0x200000ac
 8001184:	200000bd 	.word	0x200000bd
 8001188:	20000288 	.word	0x20000288

0800118c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	dma_flag = 1;
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	200000a8 	.word	0x200000a8

080011ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Triggered = 1;
 80011b6:	4b04      	ldr	r3, [pc, #16]	@ (80011c8 <HAL_GPIO_EXTI_Callback+0x1c>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	200000aa 	.word	0x200000aa

080011cc <_Z41__static_initialization_and_destruction_0ii>:
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d10a      	bne.n	80011f2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d105      	bne.n	80011f2 <_Z41__static_initialization_and_destruction_0ii+0x26>
ILI9341 screen(320, 240);
 80011e6:	22f0      	movs	r2, #240	@ 0xf0
 80011e8:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80011ec:	4808      	ldr	r0, [pc, #32]	@ (8001210 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80011ee:	f000 fec3 	bl	8001f78 <_ZN7ILI9341C1Ess>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d107      	bne.n	8001208 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011fe:	4293      	cmp	r3, r2
 8001200:	d102      	bne.n	8001208 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001202:	4803      	ldr	r0, [pc, #12]	@ (8001210 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001204:	f000 ff52 	bl	80020ac <_ZN7ILI9341D1Ev>
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200000c0 	.word	0x200000c0

08001214 <_GLOBAL__sub_I_U5>:
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
 8001218:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff ffd5 	bl	80011cc <_Z41__static_initialization_and_destruction_0ii>
 8001222:	bd80      	pop	{r7, pc}

08001224 <_GLOBAL__sub_D_U5>:
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
 8001228:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff ffcd 	bl	80011cc <_Z41__static_initialization_and_destruction_0ii>
 8001232:	bd80      	pop	{r7, pc}

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001238:	f001 ff2d 	bl	8003096 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123c:	f000 f86e 	bl	800131c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001240:	f000 fafa 	bl	8001838 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001244:	f000 fada 	bl	80017fc <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8001248:	f000 f8be 	bl	80013c8 <_ZL12MX_ADC1_Initv>
  MX_I2C4_Init();
 800124c:	f000 fa54 	bl	80016f8 <_ZL12MX_I2C4_Initv>
  MX_CAN1_Init();
 8001250:	f000 f9de 	bl	8001610 <_ZL12MX_CAN1_Initv>
  MX_CAN2_Init();
 8001254:	f000 fa16 	bl	8001684 <_ZL12MX_CAN2_Initv>
  MX_UART4_Init();
 8001258:	f000 fa9c 	bl	8001794 <_ZL13MX_UART4_Initv>
  /* USER CODE BEGIN 2 */
  CPP_UserSetup();
 800125c:	f7ff fa68 	bl	8000730 <CPP_UserSetup>

  HAL_CAN_Start(&hcan1);
 8001260:	481c      	ldr	r0, [pc, #112]	@ (80012d4 <main+0xa0>)
 8001262:	f003 fc44 	bl	8004aee <HAL_CAN_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001266:	f008 faeb 	bl	8009840 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_Mutex */
  CAN_MutexHandle = osSemaphoreNew(1, 1, &CAN_Mutex_attributes);
 800126a:	4a1b      	ldr	r2, [pc, #108]	@ (80012d8 <main+0xa4>)
 800126c:	2101      	movs	r1, #1
 800126e:	2001      	movs	r0, #1
 8001270:	f008 fbdd 	bl	8009a2e <osSemaphoreNew>
 8001274:	4603      	mov	r3, r0
 8001276:	4a19      	ldr	r2, [pc, #100]	@ (80012dc <main+0xa8>)
 8001278:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
 800127a:	4a19      	ldr	r2, [pc, #100]	@ (80012e0 <main+0xac>)
 800127c:	2100      	movs	r1, #0
 800127e:	4819      	ldr	r0, [pc, #100]	@ (80012e4 <main+0xb0>)
 8001280:	f008 fb28 	bl	80098d4 <osThreadNew>
 8001284:	4603      	mov	r3, r0
 8001286:	4a18      	ldr	r2, [pc, #96]	@ (80012e8 <main+0xb4>)
 8001288:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 800128a:	4a18      	ldr	r2, [pc, #96]	@ (80012ec <main+0xb8>)
 800128c:	2100      	movs	r1, #0
 800128e:	4818      	ldr	r0, [pc, #96]	@ (80012f0 <main+0xbc>)
 8001290:	f008 fb20 	bl	80098d4 <osThreadNew>
 8001294:	4603      	mov	r3, r0
 8001296:	4a17      	ldr	r2, [pc, #92]	@ (80012f4 <main+0xc0>)
 8001298:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 800129a:	4a17      	ldr	r2, [pc, #92]	@ (80012f8 <main+0xc4>)
 800129c:	2100      	movs	r1, #0
 800129e:	4817      	ldr	r0, [pc, #92]	@ (80012fc <main+0xc8>)
 80012a0:	f008 fb18 	bl	80098d4 <osThreadNew>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a16      	ldr	r2, [pc, #88]	@ (8001300 <main+0xcc>)
 80012a8:	6013      	str	r3, [r2, #0]

  /* creation of Outputs_Control */
  Outputs_ControlHandle = osThreadNew(StartTask04, NULL, &Outputs_Control_attributes);
 80012aa:	4a16      	ldr	r2, [pc, #88]	@ (8001304 <main+0xd0>)
 80012ac:	2100      	movs	r1, #0
 80012ae:	4816      	ldr	r0, [pc, #88]	@ (8001308 <main+0xd4>)
 80012b0:	f008 fb10 	bl	80098d4 <osThreadNew>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4a15      	ldr	r2, [pc, #84]	@ (800130c <main+0xd8>)
 80012b8:	6013      	str	r3, [r2, #0]


  ScreenControlHandle = osThreadNew(StartTask05, NULL, &ScreenControl_attributes);
 80012ba:	4a15      	ldr	r2, [pc, #84]	@ (8001310 <main+0xdc>)
 80012bc:	2100      	movs	r1, #0
 80012be:	4815      	ldr	r0, [pc, #84]	@ (8001314 <main+0xe0>)
 80012c0:	f008 fb08 	bl	80098d4 <osThreadNew>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4a14      	ldr	r2, [pc, #80]	@ (8001318 <main+0xe4>)
 80012c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012ca:	f008 fadd 	bl	8009888 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ce:	bf00      	nop
 80012d0:	e7fd      	b.n	80012ce <main+0x9a>
 80012d2:	bf00      	nop
 80012d4:	200001e4 	.word	0x200001e4
 80012d8:	0800c9f8 	.word	0x0800c9f8
 80012dc:	20000324 	.word	0x20000324
 80012e0:	0800c944 	.word	0x0800c944
 80012e4:	080008dd 	.word	0x080008dd
 80012e8:	20000310 	.word	0x20000310
 80012ec:	0800c968 	.word	0x0800c968
 80012f0:	080008fd 	.word	0x080008fd
 80012f4:	20000314 	.word	0x20000314
 80012f8:	0800c98c 	.word	0x0800c98c
 80012fc:	08000a85 	.word	0x08000a85
 8001300:	20000318 	.word	0x20000318
 8001304:	0800c9b0 	.word	0x0800c9b0
 8001308:	08000b99 	.word	0x08000b99
 800130c:	2000031c 	.word	0x2000031c
 8001310:	0800c9d4 	.word	0x0800c9d4
 8001314:	08000c19 	.word	0x08000c19
 8001318:	20000320 	.word	0x20000320

0800131c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b096      	sub	sp, #88	@ 0x58
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	2244      	movs	r2, #68	@ 0x44
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f00b f9cc 	bl	800c6c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800133e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001342:	f005 f883 	bl	800644c <HAL_PWREx_ControlVoltageScaling>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	bf14      	ite	ne
 800134c:	2301      	movne	r3, #1
 800134e:	2300      	moveq	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001356:	f000 fb0f 	bl	8001978 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800135a:	2310      	movs	r3, #16
 800135c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800135e:	2301      	movs	r3, #1
 8001360:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001366:	2360      	movs	r3, #96	@ 0x60
 8001368:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800136a:	2300      	movs	r3, #0
 800136c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4618      	mov	r0, r3
 8001374:	f005 f8c0 	bl	80064f8 <HAL_RCC_OscConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	bf14      	ite	ne
 800137e:	2301      	movne	r3, #1
 8001380:	2300      	moveq	r3, #0
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001388:	f000 faf6 	bl	8001978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138c:	230f      	movs	r3, #15
 800138e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f005 fcc1 	bl	8006d2c <HAL_RCC_ClockConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bf14      	ite	ne
 80013b0:	2301      	movne	r3, #1
 80013b2:	2300      	moveq	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80013ba:	f000 fadd 	bl	8001978 <Error_Handler>
  }
}
 80013be:	bf00      	nop
 80013c0:	3758      	adds	r7, #88	@ 0x58
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	@ 0x28
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013ea:	4b86      	ldr	r3, [pc, #536]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 80013ec:	4a86      	ldr	r2, [pc, #536]	@ (8001608 <_ZL12MX_ADC1_Initv+0x240>)
 80013ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013f0:	4b84      	ldr	r3, [pc, #528]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013f6:	4b83      	ldr	r3, [pc, #524]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013fc:	4b81      	ldr	r3, [pc, #516]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001402:	4b80      	ldr	r3, [pc, #512]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 8001404:	2201      	movs	r2, #1
 8001406:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001408:	4b7e      	ldr	r3, [pc, #504]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 800140a:	2208      	movs	r2, #8
 800140c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800140e:	4b7d      	ldr	r3, [pc, #500]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 8001410:	2200      	movs	r2, #0
 8001412:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001414:	4b7b      	ldr	r3, [pc, #492]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 8001416:	2201      	movs	r2, #1
 8001418:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 800141a:	4b7a      	ldr	r3, [pc, #488]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 800141c:	220a      	movs	r2, #10
 800141e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001420:	4b78      	ldr	r3, [pc, #480]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001428:	4b76      	ldr	r3, [pc, #472]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 800142a:	2200      	movs	r2, #0
 800142c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800142e:	4b75      	ldr	r3, [pc, #468]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 8001430:	2200      	movs	r2, #0
 8001432:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001434:	4b73      	ldr	r3, [pc, #460]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800143c:	4b71      	ldr	r3, [pc, #452]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 800143e:	2200      	movs	r2, #0
 8001440:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001442:	4b70      	ldr	r3, [pc, #448]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800144a:	486e      	ldr	r0, [pc, #440]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 800144c:	f002 f8b6 	bl	80035bc <HAL_ADC_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	bf14      	ite	ne
 8001456:	2301      	movne	r3, #1
 8001458:	2300      	moveq	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8001460:	f000 fa8a 	bl	8001978 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	4865      	ldr	r0, [pc, #404]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 8001470:	f003 f992 	bl	8004798 <HAL_ADCEx_MultiModeConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	bf14      	ite	ne
 800147a:	2301      	movne	r3, #1
 800147c:	2300      	moveq	r3, #0
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8001484:	f000 fa78 	bl	8001978 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001488:	4b60      	ldr	r3, [pc, #384]	@ (800160c <_ZL12MX_ADC1_Initv+0x244>)
 800148a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800148c:	2306      	movs	r3, #6
 800148e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001494:	237f      	movs	r3, #127	@ 0x7f
 8001496:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001498:	2304      	movs	r3, #4
 800149a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4857      	ldr	r0, [pc, #348]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 80014a6:	f002 fb0f 	bl	8003ac8 <HAL_ADC_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf14      	ite	ne
 80014b0:	2301      	movne	r3, #1
 80014b2:	2300      	moveq	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 80014ba:	f000 fa5d 	bl	8001978 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014be:	230c      	movs	r3, #12
 80014c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	4619      	mov	r1, r3
 80014c6:	484f      	ldr	r0, [pc, #316]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 80014c8:	f002 fafe 	bl	8003ac8 <HAL_ADC_ConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	bf14      	ite	ne
 80014d2:	2301      	movne	r3, #1
 80014d4:	2300      	moveq	r3, #0
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <_ZL12MX_ADC1_Initv+0x118>
  {
    Error_Handler();
 80014dc:	f000 fa4c 	bl	8001978 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014e0:	2312      	movs	r3, #18
 80014e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	4619      	mov	r1, r3
 80014e8:	4846      	ldr	r0, [pc, #280]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 80014ea:	f002 faed 	bl	8003ac8 <HAL_ADC_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	bf14      	ite	ne
 80014f4:	2301      	movne	r3, #1
 80014f6:	2300      	moveq	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <_ZL12MX_ADC1_Initv+0x13a>
  {
    Error_Handler();
 80014fe:	f000 fa3b 	bl	8001978 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001502:	2318      	movs	r3, #24
 8001504:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	4619      	mov	r1, r3
 800150a:	483e      	ldr	r0, [pc, #248]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 800150c:	f002 fadc 	bl	8003ac8 <HAL_ADC_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	bf14      	ite	ne
 8001516:	2301      	movne	r3, #1
 8001518:	2300      	moveq	r3, #0
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <_ZL12MX_ADC1_Initv+0x15c>
  {
    Error_Handler();
 8001520:	f000 fa2a 	bl	8001978 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001524:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001528:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4835      	ldr	r0, [pc, #212]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 8001530:	f002 faca 	bl	8003ac8 <HAL_ADC_ConfigChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	bf14      	ite	ne
 800153a:	2301      	movne	r3, #1
 800153c:	2300      	moveq	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <_ZL12MX_ADC1_Initv+0x180>
  {
    Error_Handler();
 8001544:	f000 fa18 	bl	8001978 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001548:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800154c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4619      	mov	r1, r3
 8001552:	482c      	ldr	r0, [pc, #176]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 8001554:	f002 fab8 	bl	8003ac8 <HAL_ADC_ConfigChannel>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	bf14      	ite	ne
 800155e:	2301      	movne	r3, #1
 8001560:	2300      	moveq	r3, #0
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <_ZL12MX_ADC1_Initv+0x1a4>
  {
    Error_Handler();
 8001568:	f000 fa06 	bl	8001978 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800156c:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8001570:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	4619      	mov	r1, r3
 8001576:	4823      	ldr	r0, [pc, #140]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 8001578:	f002 faa6 	bl	8003ac8 <HAL_ADC_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	bf14      	ite	ne
 8001582:	2301      	movne	r3, #1
 8001584:	2300      	moveq	r3, #0
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <_ZL12MX_ADC1_Initv+0x1c8>
  {
    Error_Handler();
 800158c:	f000 f9f4 	bl	8001978 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001590:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001594:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4619      	mov	r1, r3
 800159a:	481a      	ldr	r0, [pc, #104]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 800159c:	f002 fa94 	bl	8003ac8 <HAL_ADC_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	bf14      	ite	ne
 80015a6:	2301      	movne	r3, #1
 80015a8:	2300      	moveq	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <_ZL12MX_ADC1_Initv+0x1ec>
  {
    Error_Handler();
 80015b0:	f000 f9e2 	bl	8001978 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80015b4:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80015b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	4811      	ldr	r0, [pc, #68]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 80015c0:	f002 fa82 	bl	8003ac8 <HAL_ADC_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bf14      	ite	ne
 80015ca:	2301      	movne	r3, #1
 80015cc:	2300      	moveq	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <_ZL12MX_ADC1_Initv+0x210>
  {
    Error_Handler();
 80015d4:	f000 f9d0 	bl	8001978 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80015d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4808      	ldr	r0, [pc, #32]	@ (8001604 <_ZL12MX_ADC1_Initv+0x23c>)
 80015e4:	f002 fa70 	bl	8003ac8 <HAL_ADC_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	bf14      	ite	ne
 80015ee:	2301      	movne	r3, #1
 80015f0:	2300      	moveq	r3, #0
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <_ZL12MX_ADC1_Initv+0x234>
  {
    Error_Handler();
 80015f8:	f000 f9be 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	3728      	adds	r7, #40	@ 0x28
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000134 	.word	0x20000134
 8001608:	50040000 	.word	0x50040000
 800160c:	04300002 	.word	0x04300002

08001610 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001614:	4b19      	ldr	r3, [pc, #100]	@ (800167c <_ZL12MX_CAN1_Initv+0x6c>)
 8001616:	4a1a      	ldr	r2, [pc, #104]	@ (8001680 <_ZL12MX_CAN1_Initv+0x70>)
 8001618:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800161a:	4b18      	ldr	r3, [pc, #96]	@ (800167c <_ZL12MX_CAN1_Initv+0x6c>)
 800161c:	2202      	movs	r2, #2
 800161e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001620:	4b16      	ldr	r3, [pc, #88]	@ (800167c <_ZL12MX_CAN1_Initv+0x6c>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <_ZL12MX_CAN1_Initv+0x6c>)
 8001628:	2200      	movs	r2, #0
 800162a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800162c:	4b13      	ldr	r3, [pc, #76]	@ (800167c <_ZL12MX_CAN1_Initv+0x6c>)
 800162e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001632:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001634:	4b11      	ldr	r3, [pc, #68]	@ (800167c <_ZL12MX_CAN1_Initv+0x6c>)
 8001636:	2200      	movs	r2, #0
 8001638:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <_ZL12MX_CAN1_Initv+0x6c>)
 800163c:	2200      	movs	r2, #0
 800163e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001640:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <_ZL12MX_CAN1_Initv+0x6c>)
 8001642:	2200      	movs	r2, #0
 8001644:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001646:	4b0d      	ldr	r3, [pc, #52]	@ (800167c <_ZL12MX_CAN1_Initv+0x6c>)
 8001648:	2200      	movs	r2, #0
 800164a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800164c:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <_ZL12MX_CAN1_Initv+0x6c>)
 800164e:	2200      	movs	r2, #0
 8001650:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001652:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <_ZL12MX_CAN1_Initv+0x6c>)
 8001654:	2200      	movs	r2, #0
 8001656:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <_ZL12MX_CAN1_Initv+0x6c>)
 800165a:	2200      	movs	r2, #0
 800165c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800165e:	4807      	ldr	r0, [pc, #28]	@ (800167c <_ZL12MX_CAN1_Initv+0x6c>)
 8001660:	f003 f94a 	bl	80048f8 <HAL_CAN_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 8001674:	f000 f980 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200001e4 	.word	0x200001e4
 8001680:	40006400 	.word	0x40006400

08001684 <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001688:	4b19      	ldr	r3, [pc, #100]	@ (80016f0 <_ZL12MX_CAN2_Initv+0x6c>)
 800168a:	4a1a      	ldr	r2, [pc, #104]	@ (80016f4 <_ZL12MX_CAN2_Initv+0x70>)
 800168c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 800168e:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <_ZL12MX_CAN2_Initv+0x6c>)
 8001690:	2202      	movs	r2, #2
 8001692:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001694:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <_ZL12MX_CAN2_Initv+0x6c>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <_ZL12MX_CAN2_Initv+0x6c>)
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80016a0:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <_ZL12MX_CAN2_Initv+0x6c>)
 80016a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016a6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016a8:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <_ZL12MX_CAN2_Initv+0x6c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80016ae:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <_ZL12MX_CAN2_Initv+0x6c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80016b4:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <_ZL12MX_CAN2_Initv+0x6c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80016ba:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <_ZL12MX_CAN2_Initv+0x6c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80016c0:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <_ZL12MX_CAN2_Initv+0x6c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80016c6:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <_ZL12MX_CAN2_Initv+0x6c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80016cc:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <_ZL12MX_CAN2_Initv+0x6c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80016d2:	4807      	ldr	r0, [pc, #28]	@ (80016f0 <_ZL12MX_CAN2_Initv+0x6c>)
 80016d4:	f003 f910 	bl	80048f8 <HAL_CAN_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	bf14      	ite	ne
 80016de:	2301      	movne	r3, #1
 80016e0:	2300      	moveq	r3, #0
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <_ZL12MX_CAN2_Initv+0x68>
  {
    Error_Handler();
 80016e8:	f000 f946 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2000020c 	.word	0x2000020c
 80016f4:	40006800 	.word	0x40006800

080016f8 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80016fc:	4b22      	ldr	r3, [pc, #136]	@ (8001788 <_ZL12MX_I2C4_Initv+0x90>)
 80016fe:	4a23      	ldr	r2, [pc, #140]	@ (800178c <_ZL12MX_I2C4_Initv+0x94>)
 8001700:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 8001702:	4b21      	ldr	r3, [pc, #132]	@ (8001788 <_ZL12MX_I2C4_Initv+0x90>)
 8001704:	4a22      	ldr	r2, [pc, #136]	@ (8001790 <_ZL12MX_I2C4_Initv+0x98>)
 8001706:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001708:	4b1f      	ldr	r3, [pc, #124]	@ (8001788 <_ZL12MX_I2C4_Initv+0x90>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800170e:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <_ZL12MX_I2C4_Initv+0x90>)
 8001710:	2201      	movs	r2, #1
 8001712:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001714:	4b1c      	ldr	r3, [pc, #112]	@ (8001788 <_ZL12MX_I2C4_Initv+0x90>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800171a:	4b1b      	ldr	r3, [pc, #108]	@ (8001788 <_ZL12MX_I2C4_Initv+0x90>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001720:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <_ZL12MX_I2C4_Initv+0x90>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001726:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <_ZL12MX_I2C4_Initv+0x90>)
 8001728:	2200      	movs	r2, #0
 800172a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172c:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <_ZL12MX_I2C4_Initv+0x90>)
 800172e:	2200      	movs	r2, #0
 8001730:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001732:	4815      	ldr	r0, [pc, #84]	@ (8001788 <_ZL12MX_I2C4_Initv+0x90>)
 8001734:	f004 f858 	bl	80057e8 <HAL_I2C_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	bf14      	ite	ne
 800173e:	2301      	movne	r3, #1
 8001740:	2300      	moveq	r3, #0
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8001748:	f000 f916 	bl	8001978 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800174c:	2100      	movs	r1, #0
 800174e:	480e      	ldr	r0, [pc, #56]	@ (8001788 <_ZL12MX_I2C4_Initv+0x90>)
 8001750:	f004 fdd6 	bl	8006300 <HAL_I2CEx_ConfigAnalogFilter>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf14      	ite	ne
 800175a:	2301      	movne	r3, #1
 800175c:	2300      	moveq	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 8001764:	f000 f908 	bl	8001978 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001768:	2100      	movs	r1, #0
 800176a:	4807      	ldr	r0, [pc, #28]	@ (8001788 <_ZL12MX_I2C4_Initv+0x90>)
 800176c:	f004 fe13 	bl	8006396 <HAL_I2CEx_ConfigDigitalFilter>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	bf14      	ite	ne
 8001776:	2301      	movne	r3, #1
 8001778:	2300      	moveq	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 8001780:	f000 f8fa 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000234 	.word	0x20000234
 800178c:	40008400 	.word	0x40008400
 8001790:	00100d14 	.word	0x00100d14

08001794 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001798:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <_ZL13MX_UART4_Initv+0x60>)
 800179a:	4a17      	ldr	r2, [pc, #92]	@ (80017f8 <_ZL13MX_UART4_Initv+0x64>)
 800179c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800179e:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <_ZL13MX_UART4_Initv+0x60>)
 80017a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <_ZL13MX_UART4_Initv+0x60>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <_ZL13MX_UART4_Initv+0x60>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <_ZL13MX_UART4_Initv+0x60>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <_ZL13MX_UART4_Initv+0x60>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b0d      	ldr	r3, [pc, #52]	@ (80017f4 <_ZL13MX_UART4_Initv+0x60>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <_ZL13MX_UART4_Initv+0x60>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ca:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <_ZL13MX_UART4_Initv+0x60>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d0:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <_ZL13MX_UART4_Initv+0x60>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80017d6:	4807      	ldr	r0, [pc, #28]	@ (80017f4 <_ZL13MX_UART4_Initv+0x60>)
 80017d8:	f006 fc8e 	bl	80080f8 <HAL_UART_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 80017ec:	f000 f8c4 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000288 	.word	0x20000288
 80017f8:	40004c00 	.word	0x40004c00

080017fc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001802:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <_ZL11MX_DMA_Initv+0x38>)
 8001804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001806:	4a0b      	ldr	r2, [pc, #44]	@ (8001834 <_ZL11MX_DMA_Initv+0x38>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6493      	str	r3, [r2, #72]	@ 0x48
 800180e:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <_ZL11MX_DMA_Initv+0x38>)
 8001810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2105      	movs	r1, #5
 800181e:	200b      	movs	r0, #11
 8001820:	f003 fb66 	bl	8004ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001824:	200b      	movs	r0, #11
 8001826:	f003 fb7f 	bl	8004f28 <HAL_NVIC_EnableIRQ>

}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000

08001838 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184e:	4b3e      	ldr	r3, [pc, #248]	@ (8001948 <_ZL12MX_GPIO_Initv+0x110>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	4a3d      	ldr	r2, [pc, #244]	@ (8001948 <_ZL12MX_GPIO_Initv+0x110>)
 8001854:	f043 0304 	orr.w	r3, r3, #4
 8001858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800185a:	4b3b      	ldr	r3, [pc, #236]	@ (8001948 <_ZL12MX_GPIO_Initv+0x110>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	4b38      	ldr	r3, [pc, #224]	@ (8001948 <_ZL12MX_GPIO_Initv+0x110>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	4a37      	ldr	r2, [pc, #220]	@ (8001948 <_ZL12MX_GPIO_Initv+0x110>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001872:	4b35      	ldr	r3, [pc, #212]	@ (8001948 <_ZL12MX_GPIO_Initv+0x110>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	4b32      	ldr	r3, [pc, #200]	@ (8001948 <_ZL12MX_GPIO_Initv+0x110>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001882:	4a31      	ldr	r2, [pc, #196]	@ (8001948 <_ZL12MX_GPIO_Initv+0x110>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800188a:	4b2f      	ldr	r3, [pc, #188]	@ (8001948 <_ZL12MX_GPIO_Initv+0x110>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001896:	2200      	movs	r2, #0
 8001898:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800189c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a0:	f003 ff58 	bl	8005754 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |OK_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Backlight_PWM_GPIO_Port, Backlight_PWM_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2110      	movs	r1, #16
 80018a8:	4828      	ldr	r0, [pc, #160]	@ (800194c <_ZL12MX_GPIO_Initv+0x114>)
 80018aa:	f003 ff53 	bl	8005754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C_D_Pin|WR_Pin|RD_Pin|Parallel_CS_Pin
 80018ae:	2200      	movs	r2, #0
 80018b0:	f241 0117 	movw	r1, #4119	@ 0x1017
 80018b4:	4826      	ldr	r0, [pc, #152]	@ (8001950 <_ZL12MX_GPIO_Initv+0x118>)
 80018b6:	f003 ff4d 	bl	8005754 <HAL_GPIO_WritePin>
                          |D_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Alert1_Pin */
  GPIO_InitStruct.Pin = Alert1_Pin;
 80018ba:	2304      	movs	r3, #4
 80018bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alert1_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	4619      	mov	r1, r3
 80018ce:	481f      	ldr	r0, [pc, #124]	@ (800194c <_ZL12MX_GPIO_Initv+0x114>)
 80018d0:	f003 fdae 	bl	8005430 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin
                           OK_LED_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80018d4:	f240 13ff 	movw	r3, #511	@ 0x1ff
 80018d8:	60fb      	str	r3, [r7, #12]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |OK_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	4619      	mov	r1, r3
 80018ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f0:	f003 fd9e 	bl	8005430 <HAL_GPIO_Init>

  /*Configure GPIO pin : Backlight_PWM_Pin */
  GPIO_InitStruct.Pin = Backlight_PWM_Pin;
 80018f4:	2310      	movs	r3, #16
 80018f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Backlight_PWM_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	4619      	mov	r1, r3
 800190a:	4810      	ldr	r0, [pc, #64]	@ (800194c <_ZL12MX_GPIO_Initv+0x114>)
 800190c:	f003 fd90 	bl	8005430 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_D_Pin WR_Pin RD_Pin Parallel_CS_Pin
                           D_C_Pin */
  GPIO_InitStruct.Pin = C_D_Pin|WR_Pin|RD_Pin|Parallel_CS_Pin
 8001910:	f241 0317 	movw	r3, #4119	@ 0x1017
 8001914:	60fb      	str	r3, [r7, #12]
                          |D_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001916:	2301      	movs	r3, #1
 8001918:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	4619      	mov	r1, r3
 8001928:	4809      	ldr	r0, [pc, #36]	@ (8001950 <_ZL12MX_GPIO_Initv+0x118>)
 800192a:	f003 fd81 	bl	8005430 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2105      	movs	r1, #5
 8001932:	2008      	movs	r0, #8
 8001934:	f003 fadc 	bl	8004ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001938:	2008      	movs	r0, #8
 800193a:	f003 faf5 	bl	8004f28 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800193e:	bf00      	nop
 8001940:	3720      	adds	r7, #32
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	48000800 	.word	0x48000800
 8001950:	48000400 	.word	0x48000400

08001954 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a04      	ldr	r2, [pc, #16]	@ (8001974 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d101      	bne.n	800196a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001966:	f001 fbaf 	bl	80030c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40000400 	.word	0x40000400

08001978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800197c:	b672      	cpsid	i
}
 800197e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <Error_Handler+0x8>

08001984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <HAL_MspInit+0x4c>)
 800198c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800198e:	4a10      	ldr	r2, [pc, #64]	@ (80019d0 <HAL_MspInit+0x4c>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6613      	str	r3, [r2, #96]	@ 0x60
 8001996:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <HAL_MspInit+0x4c>)
 8001998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <HAL_MspInit+0x4c>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a6:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <HAL_MspInit+0x4c>)
 80019a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ae:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <HAL_MspInit+0x4c>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	210f      	movs	r1, #15
 80019be:	f06f 0001 	mvn.w	r0, #1
 80019c2:	f003 fa95 	bl	8004ef0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000

080019d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b0ac      	sub	sp, #176	@ 0xb0
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	228c      	movs	r2, #140	@ 0x8c
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f00a fe67 	bl	800c6c8 <memset>
  if(hadc->Instance==ADC1)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a35      	ldr	r2, [pc, #212]	@ (8001ad4 <HAL_ADC_MspInit+0x100>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d163      	bne.n	8001acc <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a04:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a08:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001a0a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001a0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a12:	f107 0310 	add.w	r3, r7, #16
 8001a16:	4618      	mov	r0, r3
 8001a18:	f005 fbde 	bl	80071d8 <HAL_RCCEx_PeriphCLKConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001a22:	f7ff ffa9 	bl	8001978 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a26:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad8 <HAL_ADC_MspInit+0x104>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2a:	4a2b      	ldr	r2, [pc, #172]	@ (8001ad8 <HAL_ADC_MspInit+0x104>)
 8001a2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a32:	4b29      	ldr	r3, [pc, #164]	@ (8001ad8 <HAL_ADC_MspInit+0x104>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <HAL_ADC_MspInit+0x104>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a42:	4a25      	ldr	r2, [pc, #148]	@ (8001ad8 <HAL_ADC_MspInit+0x104>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a4a:	4b23      	ldr	r3, [pc, #140]	@ (8001ad8 <HAL_ADC_MspInit+0x104>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a68:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	481b      	ldr	r0, [pc, #108]	@ (8001adc <HAL_ADC_MspInit+0x108>)
 8001a70:	f003 fcde 	bl	8005430 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <HAL_ADC_MspInit+0x10c>)
 8001a76:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae4 <HAL_ADC_MspInit+0x110>)
 8001a78:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001a7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ae0 <HAL_ADC_MspInit+0x10c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a80:	4b17      	ldr	r3, [pc, #92]	@ (8001ae0 <HAL_ADC_MspInit+0x10c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a86:	4b16      	ldr	r3, [pc, #88]	@ (8001ae0 <HAL_ADC_MspInit+0x10c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ae0 <HAL_ADC_MspInit+0x10c>)
 8001a8e:	2280      	movs	r2, #128	@ 0x80
 8001a90:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a92:	4b13      	ldr	r3, [pc, #76]	@ (8001ae0 <HAL_ADC_MspInit+0x10c>)
 8001a94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a98:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <HAL_ADC_MspInit+0x10c>)
 8001a9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aa0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <HAL_ADC_MspInit+0x10c>)
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <HAL_ADC_MspInit+0x10c>)
 8001aaa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ab0:	480b      	ldr	r0, [pc, #44]	@ (8001ae0 <HAL_ADC_MspInit+0x10c>)
 8001ab2:	f003 fa47 	bl	8004f44 <HAL_DMA_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 8001abc:	f7ff ff5c 	bl	8001978 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a07      	ldr	r2, [pc, #28]	@ (8001ae0 <HAL_ADC_MspInit+0x10c>)
 8001ac4:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ac6:	4a06      	ldr	r2, [pc, #24]	@ (8001ae0 <HAL_ADC_MspInit+0x10c>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001acc:	bf00      	nop
 8001ace:	37b0      	adds	r7, #176	@ 0xb0
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	50040000 	.word	0x50040000
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	48000800 	.word	0x48000800
 8001ae0:	2000019c 	.word	0x2000019c
 8001ae4:	40020008 	.word	0x40020008

08001ae8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08c      	sub	sp, #48	@ 0x30
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a4e      	ldr	r2, [pc, #312]	@ (8001c40 <HAL_CAN_MspInit+0x158>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d143      	bne.n	8001b92 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001b0a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c44 <HAL_CAN_MspInit+0x15c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	4a4c      	ldr	r2, [pc, #304]	@ (8001c44 <HAL_CAN_MspInit+0x15c>)
 8001b12:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001b14:	4b4b      	ldr	r3, [pc, #300]	@ (8001c44 <HAL_CAN_MspInit+0x15c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d10b      	bne.n	8001b34 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001b1c:	4b4a      	ldr	r3, [pc, #296]	@ (8001c48 <HAL_CAN_MspInit+0x160>)
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b20:	4a49      	ldr	r2, [pc, #292]	@ (8001c48 <HAL_CAN_MspInit+0x160>)
 8001b22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b28:	4b47      	ldr	r3, [pc, #284]	@ (8001c48 <HAL_CAN_MspInit+0x160>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b34:	4b44      	ldr	r3, [pc, #272]	@ (8001c48 <HAL_CAN_MspInit+0x160>)
 8001b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b38:	4a43      	ldr	r2, [pc, #268]	@ (8001c48 <HAL_CAN_MspInit+0x160>)
 8001b3a:	f043 0302 	orr.w	r3, r3, #2
 8001b3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b40:	4b41      	ldr	r3, [pc, #260]	@ (8001c48 <HAL_CAN_MspInit+0x160>)
 8001b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b5e:	2309      	movs	r3, #9
 8001b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	4619      	mov	r1, r3
 8001b68:	4838      	ldr	r0, [pc, #224]	@ (8001c4c <HAL_CAN_MspInit+0x164>)
 8001b6a:	f003 fc61 	bl	8005430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b80:	2309      	movs	r3, #9
 8001b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4830      	ldr	r0, [pc, #192]	@ (8001c4c <HAL_CAN_MspInit+0x164>)
 8001b8c:	f003 fc50 	bl	8005430 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001b90:	e051      	b.n	8001c36 <HAL_CAN_MspInit+0x14e>
  else if(hcan->Instance==CAN2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a2e      	ldr	r2, [pc, #184]	@ (8001c50 <HAL_CAN_MspInit+0x168>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d14c      	bne.n	8001c36 <HAL_CAN_MspInit+0x14e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c48 <HAL_CAN_MspInit+0x160>)
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba0:	4a29      	ldr	r2, [pc, #164]	@ (8001c48 <HAL_CAN_MspInit+0x160>)
 8001ba2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ba6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ba8:	4b27      	ldr	r3, [pc, #156]	@ (8001c48 <HAL_CAN_MspInit+0x160>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001bb4:	4b23      	ldr	r3, [pc, #140]	@ (8001c44 <HAL_CAN_MspInit+0x15c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	4a22      	ldr	r2, [pc, #136]	@ (8001c44 <HAL_CAN_MspInit+0x15c>)
 8001bbc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001bbe:	4b21      	ldr	r3, [pc, #132]	@ (8001c44 <HAL_CAN_MspInit+0x15c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d10b      	bne.n	8001bde <HAL_CAN_MspInit+0xf6>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001bc6:	4b20      	ldr	r3, [pc, #128]	@ (8001c48 <HAL_CAN_MspInit+0x160>)
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bca:	4a1f      	ldr	r2, [pc, #124]	@ (8001c48 <HAL_CAN_MspInit+0x160>)
 8001bcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c48 <HAL_CAN_MspInit+0x160>)
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bde:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <HAL_CAN_MspInit+0x160>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be2:	4a19      	ldr	r2, [pc, #100]	@ (8001c48 <HAL_CAN_MspInit+0x160>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bea:	4b17      	ldr	r3, [pc, #92]	@ (8001c48 <HAL_CAN_MspInit+0x160>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bf6:	2320      	movs	r3, #32
 8001bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8001c06:	2303      	movs	r3, #3
 8001c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	480e      	ldr	r0, [pc, #56]	@ (8001c4c <HAL_CAN_MspInit+0x164>)
 8001c12:	f003 fc0d 	bl	8005430 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c16:	2340      	movs	r3, #64	@ 0x40
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8001c26:	2308      	movs	r3, #8
 8001c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4806      	ldr	r0, [pc, #24]	@ (8001c4c <HAL_CAN_MspInit+0x164>)
 8001c32:	f003 fbfd 	bl	8005430 <HAL_GPIO_Init>
}
 8001c36:	bf00      	nop
 8001c38:	3730      	adds	r7, #48	@ 0x30
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40006400 	.word	0x40006400
 8001c44:	20000328 	.word	0x20000328
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	48000400 	.word	0x48000400
 8001c50:	40006800 	.word	0x40006800

08001c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b0ac      	sub	sp, #176	@ 0xb0
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c6c:	f107 0310 	add.w	r3, r7, #16
 8001c70:	228c      	movs	r2, #140	@ 0x8c
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f00a fd27 	bl	800c6c8 <memset>
  if(hi2c->Instance==I2C4)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a22      	ldr	r2, [pc, #136]	@ (8001d08 <HAL_I2C_MspInit+0xb4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d13c      	bne.n	8001cfe <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001c84:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c88:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c8e:	f107 0310 	add.w	r3, r7, #16
 8001c92:	4618      	mov	r0, r3
 8001c94:	f005 faa0 	bl	80071d8 <HAL_RCCEx_PeriphCLKConfig>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c9e:	f7ff fe6b 	bl	8001978 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d0c <HAL_I2C_MspInit+0xb8>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca6:	4a19      	ldr	r2, [pc, #100]	@ (8001d0c <HAL_I2C_MspInit+0xb8>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cae:	4b17      	ldr	r3, [pc, #92]	@ (8001d0c <HAL_I2C_MspInit+0xb8>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001cbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc2:	2312      	movs	r3, #18
 8001cc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cda:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480b      	ldr	r0, [pc, #44]	@ (8001d10 <HAL_I2C_MspInit+0xbc>)
 8001ce2:	f003 fba5 	bl	8005430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <HAL_I2C_MspInit+0xb8>)
 8001ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cea:	4a08      	ldr	r2, [pc, #32]	@ (8001d0c <HAL_I2C_MspInit+0xb8>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001cf2:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <HAL_I2C_MspInit+0xb8>)
 8001cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8001cfe:	bf00      	nop
 8001d00:	37b0      	adds	r7, #176	@ 0xb0
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40008400 	.word	0x40008400
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	48000400 	.word	0x48000400

08001d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b0ac      	sub	sp, #176	@ 0xb0
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	228c      	movs	r2, #140	@ 0x8c
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f00a fcc7 	bl	800c6c8 <memset>
  if(huart->Instance==UART4)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a25      	ldr	r2, [pc, #148]	@ (8001dd4 <HAL_UART_MspInit+0xc0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d143      	bne.n	8001dcc <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001d44:	2308      	movs	r3, #8
 8001d46:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	4618      	mov	r0, r3
 8001d52:	f005 fa41 	bl	80071d8 <HAL_RCCEx_PeriphCLKConfig>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d5c:	f7ff fe0c 	bl	8001978 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d60:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd8 <HAL_UART_MspInit+0xc4>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d64:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd8 <HAL_UART_MspInit+0xc4>)
 8001d66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001d6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <HAL_UART_MspInit+0xc4>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d78:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <HAL_UART_MspInit+0xc4>)
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7c:	4a16      	ldr	r2, [pc, #88]	@ (8001dd8 <HAL_UART_MspInit+0xc4>)
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d84:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <HAL_UART_MspInit+0xc4>)
 8001d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d90:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da4:	2303      	movs	r3, #3
 8001da6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001daa:	2308      	movs	r3, #8
 8001dac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001db4:	4619      	mov	r1, r3
 8001db6:	4809      	ldr	r0, [pc, #36]	@ (8001ddc <HAL_UART_MspInit+0xc8>)
 8001db8:	f003 fb3a 	bl	8005430 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2105      	movs	r1, #5
 8001dc0:	2034      	movs	r0, #52	@ 0x34
 8001dc2:	f003 f895 	bl	8004ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001dc6:	2034      	movs	r0, #52	@ 0x34
 8001dc8:	f003 f8ae 	bl	8004f28 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8001dcc:	bf00      	nop
 8001dce:	37b0      	adds	r7, #176	@ 0xb0
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40004c00 	.word	0x40004c00
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	48000800 	.word	0x48000800

08001de0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08e      	sub	sp, #56	@ 0x38
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001dee:	4b34      	ldr	r3, [pc, #208]	@ (8001ec0 <HAL_InitTick+0xe0>)
 8001df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df2:	4a33      	ldr	r2, [pc, #204]	@ (8001ec0 <HAL_InitTick+0xe0>)
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dfa:	4b31      	ldr	r3, [pc, #196]	@ (8001ec0 <HAL_InitTick+0xe0>)
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e06:	f107 0210 	add.w	r2, r7, #16
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f005 f94f 	bl	80070b4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d103      	bne.n	8001e28 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e20:	f005 f91c 	bl	800705c <HAL_RCC_GetPCLK1Freq>
 8001e24:	6378      	str	r0, [r7, #52]	@ 0x34
 8001e26:	e004      	b.n	8001e32 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e28:	f005 f918 	bl	800705c <HAL_RCC_GetPCLK1Freq>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e34:	4a23      	ldr	r2, [pc, #140]	@ (8001ec4 <HAL_InitTick+0xe4>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	0c9b      	lsrs	r3, r3, #18
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001e40:	4b21      	ldr	r3, [pc, #132]	@ (8001ec8 <HAL_InitTick+0xe8>)
 8001e42:	4a22      	ldr	r2, [pc, #136]	@ (8001ecc <HAL_InitTick+0xec>)
 8001e44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001e46:	4b20      	ldr	r3, [pc, #128]	@ (8001ec8 <HAL_InitTick+0xe8>)
 8001e48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e4c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ec8 <HAL_InitTick+0xe8>)
 8001e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e52:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001e54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <HAL_InitTick+0xe8>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <HAL_InitTick+0xe8>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e60:	4b19      	ldr	r3, [pc, #100]	@ (8001ec8 <HAL_InitTick+0xe8>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001e66:	4818      	ldr	r0, [pc, #96]	@ (8001ec8 <HAL_InitTick+0xe8>)
 8001e68:	f005 fe80 	bl	8007b6c <HAL_TIM_Base_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001e72:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d11b      	bne.n	8001eb2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001e7a:	4813      	ldr	r0, [pc, #76]	@ (8001ec8 <HAL_InitTick+0xe8>)
 8001e7c:	f005 fed8 	bl	8007c30 <HAL_TIM_Base_Start_IT>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001e86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d111      	bne.n	8001eb2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e8e:	201d      	movs	r0, #29
 8001e90:	f003 f84a 	bl	8004f28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b0f      	cmp	r3, #15
 8001e98:	d808      	bhi.n	8001eac <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	201d      	movs	r0, #29
 8001ea0:	f003 f826 	bl	8004ef0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <HAL_InitTick+0xf0>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e002      	b.n	8001eb2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001eb2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3738      	adds	r7, #56	@ 0x38
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	431bde83 	.word	0x431bde83
 8001ec8:	2000032c 	.word	0x2000032c
 8001ecc:	40000400 	.word	0x40000400
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <NMI_Handler+0x4>

08001edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <HardFault_Handler+0x4>

08001ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <MemManage_Handler+0x4>

08001eec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <BusFault_Handler+0x4>

08001ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <UsageFault_Handler+0x4>

08001efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alert1_Pin);
 8001f0e:	2004      	movs	r0, #4
 8001f10:	f003 fc52 	bl	80057b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f1c:	4802      	ldr	r0, [pc, #8]	@ (8001f28 <DMA1_Channel1_IRQHandler+0x10>)
 8001f1e:	f003 f9a8 	bl	8005272 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000019c 	.word	0x2000019c

08001f2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f30:	4802      	ldr	r0, [pc, #8]	@ (8001f3c <TIM3_IRQHandler+0x10>)
 8001f32:	f005 feed 	bl	8007d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	2000032c 	.word	0x2000032c

08001f40 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001f44:	4802      	ldr	r0, [pc, #8]	@ (8001f50 <UART4_IRQHandler+0x10>)
 8001f46:	f006 f971 	bl	800822c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000288 	.word	0x20000288

08001f54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <SystemInit+0x20>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f5e:	4a05      	ldr	r2, [pc, #20]	@ (8001f74 <SystemInit+0x20>)
 8001f60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <_ZN7ILI9341C1Ess>:
/**
  * @brief   Constructor for ILI9341 class
  * @param   w: width of LCD
  * @param   h: height of LCD
  */
ILI9341::ILI9341(int16_t w, int16_t h):WIDTH(w),HEIGHT(h)
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
 8001f84:	4613      	mov	r3, r2
 8001f86:	803b      	strh	r3, [r7, #0]
 8001f88:	4a45      	ldr	r2, [pc, #276]	@ (80020a0 <_ZN7ILI9341C1Ess+0x128>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	887a      	ldrh	r2, [r7, #2]
 8001f92:	809a      	strh	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	883a      	ldrh	r2, [r7, #0]
 8001f98:	80da      	strh	r2, [r3, #6]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	81da      	strh	r2, [r3, #14]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	821a      	strh	r2, [r3, #16]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001fac:	621a      	str	r2, [r3, #32]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001fb4:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001fbc:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001fcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001fd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001fdc:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001fe4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2204      	movs	r2, #4
 8001fea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a2c      	ldr	r2, [pc, #176]	@ (80020a4 <_ZN7ILI9341C1Ess+0x12c>)
 8001ff2:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a29      	ldr	r2, [pc, #164]	@ (80020a4 <_ZN7ILI9341C1Ess+0x12c>)
 8002000:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a25      	ldr	r2, [pc, #148]	@ (80020a4 <_ZN7ILI9341C1Ess+0x12c>)
 800200e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002016:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a21      	ldr	r2, [pc, #132]	@ (80020a4 <_ZN7ILI9341C1Ess+0x12c>)
 800201e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2220      	movs	r2, #32
 8002024:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a1f      	ldr	r2, [pc, #124]	@ (80020a8 <_ZN7ILI9341C1Ess+0x130>)
 800202c:	665a      	str	r2, [r3, #100]	@ 0x64
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2210      	movs	r2, #16
 8002032:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a1b      	ldr	r2, [pc, #108]	@ (80020a8 <_ZN7ILI9341C1Ess+0x130>)
 800203a:	66da      	str	r2, [r3, #108]	@ 0x6c
{
  text_size_ = 1;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	819a      	strh	r2, [r3, #12]
  width_ = WIDTH;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	811a      	strh	r2, [r3, #8]
  height_ = HEIGHT;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	815a      	strh	r2, [r3, #10]
  rotation = 0;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	771a      	strb	r2, [r3, #28]
  cursor_y = cursor_x = 0;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	825a      	strh	r2, [r3, #18]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	829a      	strh	r2, [r3, #20]
  textsize_x = textsize_y = 1;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	76da      	strb	r2, [r3, #27]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7eda      	ldrb	r2, [r3, #27]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	769a      	strb	r2, [r3, #26]
  textcolor = textbgcolor = 0xFFFF;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002080:	831a      	strh	r2, [r3, #24]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	8b1a      	ldrh	r2, [r3, #24]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	82da      	strh	r2, [r3, #22]
  wrap = true;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	775a      	strb	r2, [r3, #29]
}
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	0800cf7c 	.word	0x0800cf7c
 80020a4:	48000400 	.word	0x48000400
 80020a8:	48000800 	.word	0x48000800

080020ac <_ZN7ILI9341D1Ev>:

ILI9341::~ILI9341()
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	4a04      	ldr	r2, [pc, #16]	@ (80020c8 <_ZN7ILI9341D1Ev+0x1c>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	601a      	str	r2, [r3, #0]
{
  // TODO Auto-generated destructor stub
}
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	0800cf7c 	.word	0x0800cf7c

080020cc <_ZN7ILI9341D0Ev>:
ILI9341::~ILI9341()
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
}
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ffe9 	bl	80020ac <_ZN7ILI9341D1Ev>
 80020da:	2170      	movs	r1, #112	@ 0x70
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f00a fadb 	bl	800c698 <_ZdlPvj>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_ZN7ILI93414InitEv>:

/**
  * @brief  Initialize the LCD.
  */
void ILI9341::Init()
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	6078      	str	r0, [r7, #4]
  // Write all control signals high
  HAL_GPIO_WritePin(Backlight_PWM_GPIO_Port_, Backlight_PWM_Pin_, GPIO_PIN_SET);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80020fe:	2201      	movs	r2, #1
 8002100:	4619      	mov	r1, r3
 8002102:	f003 fb27 	bl	8005754 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002110:	2201      	movs	r2, #1
 8002112:	4619      	mov	r1, r3
 8002114:	f003 fb1e 	bl	8005754 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002122:	2201      	movs	r2, #1
 8002124:	4619      	mov	r1, r3
 8002126:	f003 fb15 	bl	8005754 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002134:	2201      	movs	r2, #1
 8002136:	4619      	mov	r1, r3
 8002138:	f003 fb0c 	bl	8005754 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_READ_GPIO_Port_, LCD_READ_Pin_, GPIO_PIN_SET);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002146:	2201      	movs	r2, #1
 8002148:	4619      	mov	r1, r3
 800214a:	f003 fb03 	bl	8005754 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002158:	2201      	movs	r2, #1
 800215a:	4619      	mov	r1, r3
 800215c:	f003 fafa 	bl	8005754 <HAL_GPIO_WritePin>

  // Hold reset pin
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_RESET);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800216a:	2200      	movs	r2, #0
 800216c:	4619      	mov	r1, r3
 800216e:	f003 faf1 	bl	8005754 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8002172:	200a      	movs	r0, #10
 8002174:	f000 ffc8 	bl	8003108 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002182:	2201      	movs	r2, #1
 8002184:	4619      	mov	r1, r3
 8002186:	f003 fae5 	bl	8005754 <HAL_GPIO_WritePin>

  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002194:	2200      	movs	r2, #0
 8002196:	4619      	mov	r1, r3
 8002198:	f003 fadc 	bl	8005754 <HAL_GPIO_WritePin>

  // Soft reset the LCD
  TransmitCmd(ILI9341_SWRESET);
 800219c:	2101      	movs	r1, #1
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f8c4 	bl	800232c <_ZN7ILI934111TransmitCmdEh>
  Transmit8bitData(0x00);
 80021a4:	2100      	movs	r1, #0
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f8d8 	bl	800235c <_ZN7ILI934116Transmit8bitDataEh>
  HAL_Delay(50);
 80021ac:	2032      	movs	r0, #50	@ 0x32
 80021ae:	f000 ffab 	bl	8003108 <HAL_Delay>


  uint8_t cmd, x, numArgs;
  const uint8_t *addr = initcmd;
 80021b2:	4b27      	ldr	r3, [pc, #156]	@ (8002250 <_ZN7ILI93414InitEv+0x164>)
 80021b4:	613b      	str	r3, [r7, #16]
  while((cmd = *(addr++)) > 0)
 80021b6:	e027      	b.n	8002208 <_ZN7ILI93414InitEv+0x11c>
  {
    x = *(addr++);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	613a      	str	r2, [r7, #16]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	73bb      	strb	r3, [r7, #14]
    numArgs = x & 0x7F;
 80021c2:	7bbb      	ldrb	r3, [r7, #14]
 80021c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021c8:	75fb      	strb	r3, [r7, #23]
    TransmitCmd(cmd);
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	4619      	mov	r1, r3
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f8ac 	bl	800232c <_ZN7ILI934111TransmitCmdEh>
    while(numArgs--)
 80021d4:	e007      	b.n	80021e6 <_ZN7ILI93414InitEv+0xfa>
    {
      Transmit8bitData(*(addr++));
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	613a      	str	r2, [r7, #16]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	4619      	mov	r1, r3
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f8bb 	bl	800235c <_ZN7ILI934116Transmit8bitDataEh>
    while(numArgs--)
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
 80021e8:	1e5a      	subs	r2, r3, #1
 80021ea:	75fa      	strb	r2, [r7, #23]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf14      	ite	ne
 80021f0:	2301      	movne	r3, #1
 80021f2:	2300      	moveq	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1ed      	bne.n	80021d6 <_ZN7ILI93414InitEv+0xea>
    }
    if(x & 0x80)
 80021fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	da02      	bge.n	8002208 <_ZN7ILI93414InitEv+0x11c>
    {
      HAL_Delay(150);
 8002202:	2096      	movs	r0, #150	@ 0x96
 8002204:	f000 ff80 	bl	8003108 <HAL_Delay>
  while((cmd = *(addr++)) > 0)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	613a      	str	r2, [r7, #16]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	2b00      	cmp	r3, #0
 8002216:	bf14      	ite	ne
 8002218:	2301      	movne	r3, #1
 800221a:	2300      	moveq	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1ca      	bne.n	80021b8 <_ZN7ILI93414InitEv+0xcc>
    }
  }

  SetWindow(0, 0, width_-1, height_-1);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002234:	b29b      	uxth	r3, r3
 8002236:	3b01      	subs	r3, #1
 8002238:	b29b      	uxth	r3, r3
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f8f0 	bl	8002428 <_ZN7ILI93419SetWindowEtttt>
}
 8002248:	bf00      	nop
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	0800cf50 	.word	0x0800cf50

08002254 <_ZN7ILI93415WriteEh>:

/**
  * @brief  Write data to LCD bus.
  */
inline void ILI9341::Write(uint8_t data)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
  // Put data on Bus
#if UI_USE_HAL
  HAL_GPIO_WritePin(LCD_DATA0_GPIO_Port_, LCD_DATA0_Pin_, static_cast<GPIO_PinState>(data & 0x01U) );
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	b2db      	uxtb	r3, r3
 800226c:	461a      	mov	r2, r3
 800226e:	2101      	movs	r1, #1
 8002270:	f003 fa70 	bl	8005754 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA1_GPIO_Port_, LCD_DATA1_Pin_, static_cast<GPIO_PinState>(data & 0x02U) );
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	b2db      	uxtb	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	2102      	movs	r1, #2
 8002284:	f003 fa66 	bl	8005754 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA2_GPIO_Port_, LCD_DATA2_Pin_, static_cast<GPIO_PinState>(data & 0x04U) );
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	b2db      	uxtb	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	2104      	movs	r1, #4
 8002298:	f003 fa5c 	bl	8005754 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA3_GPIO_Port_, LCD_DATA3_Pin_, static_cast<GPIO_PinState>(data & 0x08U) );
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	2108      	movs	r1, #8
 80022ac:	f003 fa52 	bl	8005754 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA4_GPIO_Port_, LCD_DATA4_Pin_, static_cast<GPIO_PinState>(data & 0x10U) );
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	461a      	mov	r2, r3
 80022be:	2110      	movs	r1, #16
 80022c0:	f003 fa48 	bl	8005754 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA5_GPIO_Port_, LCD_DATA5_Pin_, static_cast<GPIO_PinState>(data & 0x20U) );
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	2120      	movs	r1, #32
 80022d4:	f003 fa3e 	bl	8005754 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA6_GPIO_Port_, LCD_DATA6_Pin_, static_cast<GPIO_PinState>(data & 0x40U) );
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	2140      	movs	r1, #64	@ 0x40
 80022e8:	f003 fa34 	bl	8005754 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA7_GPIO_Port_, LCD_DATA7_Pin_, static_cast<GPIO_PinState>(data & 0x80U) );
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a18      	ldr	r0, [r3, #32]
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	2180      	movs	r1, #128	@ 0x80
 80022fc:	f003 fa2a 	bl	8005754 <HAL_GPIO_WritePin>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800230a:	2200      	movs	r2, #0
 800230c:	4619      	mov	r1, r3
 800230e:	f003 fa21 	bl	8005754 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800231c:	2201      	movs	r2, #1
 800231e:	4619      	mov	r1, r3
 8002320:	f003 fa18 	bl	8005754 <HAL_GPIO_WritePin>
  // Pulse Write
  LCD_WRITE_GPIO_Port_->BSRR = LCD_WRITE_Pin_; // changed from brr to bsrr... ok?
  LCD_WRITE_GPIO_Port_->BSRR = (uint32_t)LCD_WRITE_Pin_ << 16U;
#endif

}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <_ZN7ILI934111TransmitCmdEh>:
/**
  * @brief  Sends 8-bit command to LCD.
  * @param  cmd: 8-bit command to be sent.
  */
void ILI9341::TransmitCmd(uint8_t cmd)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
  // D/C -> LOW
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_RESET);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002342:	2200      	movs	r2, #0
 8002344:	4619      	mov	r1, r3
 8002346:	f003 fa05 	bl	8005754 <HAL_GPIO_WritePin>

  Write(cmd);
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	4619      	mov	r1, r3
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ff80 	bl	8002254 <_ZN7ILI93415WriteEh>

  // TODO: Can this line be removed?
  // D/C -> HIGH
  // HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <_ZN7ILI934116Transmit8bitDataEh>:
/**
  * @brief  Sends 8-bit data to LCD.
  * @param  data: 8-bit data to be sent.
  */
void ILI9341::Transmit8bitData(uint8_t data)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	70fb      	strb	r3, [r7, #3]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002372:	2201      	movs	r2, #1
 8002374:	4619      	mov	r1, r3
 8002376:	f003 f9ed 	bl	8005754 <HAL_GPIO_WritePin>

  Write(data);
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	4619      	mov	r1, r3
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff ff68 	bl	8002254 <_ZN7ILI93415WriteEh>
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <_ZN7ILI934117Transmit16bitDataEt>:
/**
  * @brief  Sends 16-bit data to LCD.
  * @param  data: 16-bit data to be sent to LCD.
  */
void ILI9341::Transmit16bitData(uint16_t data)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	807b      	strh	r3, [r7, #2]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023a2:	2201      	movs	r2, #1
 80023a4:	4619      	mov	r1, r3
 80023a6:	f003 f9d5 	bl	8005754 <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 8));
 80023aa:	887b      	ldrh	r3, [r7, #2]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	4619      	mov	r1, r3
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff4d 	bl	8002254 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0));
 80023ba:	887b      	ldrh	r3, [r7, #2]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4619      	mov	r1, r3
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ff47 	bl	8002254 <_ZN7ILI93415WriteEh>

}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <_ZN7ILI934117Transmit32bitDataEm>:
/**
  * @brief  Sends 32-bit data to LCD.
  * @param  data: 32-bit data to be sent to LCD.
  */
void ILI9341::Transmit32bitData(uint32_t data)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023e2:	2201      	movs	r2, #1
 80023e4:	4619      	mov	r1, r3
 80023e6:	f003 f9b5 	bl	8005754 <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 24));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	0e1b      	lsrs	r3, r3, #24
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	4619      	mov	r1, r3
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ff2e 	bl	8002254 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 16));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	0c1b      	lsrs	r3, r3, #16
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	4619      	mov	r1, r3
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff ff27 	bl	8002254 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 8 ));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	b2db      	uxtb	r3, r3
 800240c:	4619      	mov	r1, r3
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ff20 	bl	8002254 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0 ));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	4619      	mov	r1, r3
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ff1a 	bl	8002254 <_ZN7ILI93415WriteEh>

}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_ZN7ILI93419SetWindowEtttt>:
  * @param  xe: x end coordinate. xe > xs.
  * @param  ye: y end coordinate. ye > ys.
  * @retval ILI9341_SUCCESS or ILI9341_ERROR.
  */
char ILI9341::SetWindow (uint16_t xs, uint16_t ys, uint16_t xe, uint16_t ye)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	4608      	mov	r0, r1
 8002432:	4611      	mov	r1, r2
 8002434:	461a      	mov	r2, r3
 8002436:	4603      	mov	r3, r0
 8002438:	817b      	strh	r3, [r7, #10]
 800243a:	460b      	mov	r3, r1
 800243c:	813b      	strh	r3, [r7, #8]
 800243e:	4613      	mov	r3, r2
 8002440:	80fb      	strh	r3, [r7, #6]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800244c:	2200      	movs	r2, #0
 800244e:	4619      	mov	r1, r3
 8002450:	f003 f980 	bl	8005754 <HAL_GPIO_WritePin>

  // check if coordinates is out of range
  // TODO: Use >=, <= instead of >, < for width_ and height_?
  if ((xs > xe) || (xe > width_) ||
 8002454:	897a      	ldrh	r2, [r7, #10]
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	429a      	cmp	r2, r3
 800245a:	d80f      	bhi.n	800247c <_ZN7ILI93419SetWindowEtttt+0x54>
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002464:	4293      	cmp	r3, r2
 8002466:	dc09      	bgt.n	800247c <_ZN7ILI93419SetWindowEtttt+0x54>
 8002468:	893a      	ldrh	r2, [r7, #8]
 800246a:	8b3b      	ldrh	r3, [r7, #24]
 800246c:	429a      	cmp	r2, r3
 800246e:	d805      	bhi.n	800247c <_ZN7ILI93419SetWindowEtttt+0x54>
      (ys > ye) || (ye > height_))
 8002470:	8b3b      	ldrh	r3, [r7, #24]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002478:	4293      	cmp	r3, r2
 800247a:	dd01      	ble.n	8002480 <_ZN7ILI93419SetWindowEtttt+0x58>
  {
    // out of range
    return ILI9341_ERROR;
 800247c:	2300      	movs	r3, #0
 800247e:	e021      	b.n	80024c4 <_ZN7ILI93419SetWindowEtttt+0x9c>
  }

  // set column
  TransmitCmd(ILI9341_CASET);
 8002480:	212a      	movs	r1, #42	@ 0x2a
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f7ff ff52 	bl	800232c <_ZN7ILI934111TransmitCmdEh>
  // set column -> set column
  Transmit32bitData(((uint32_t) xs << 16) | xe);
 8002488:	897b      	ldrh	r3, [r7, #10]
 800248a:	041a      	lsls	r2, r3, #16
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	4313      	orrs	r3, r2
 8002490:	4619      	mov	r1, r3
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7ff ff9b 	bl	80023ce <_ZN7ILI934117Transmit32bitDataEm>
  // set page
  TransmitCmd(ILI9341_PASET);
 8002498:	212b      	movs	r1, #43	@ 0x2b
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f7ff ff46 	bl	800232c <_ZN7ILI934111TransmitCmdEh>
  // set page -> high byte first
  Transmit32bitData(((uint32_t) ys << 16) | ye);
 80024a0:	893b      	ldrh	r3, [r7, #8]
 80024a2:	041a      	lsls	r2, r3, #16
 80024a4:	8b3b      	ldrh	r3, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f7ff ff8f 	bl	80023ce <_ZN7ILI934117Transmit32bitDataEm>

  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80024ba:	2201      	movs	r2, #1
 80024bc:	4619      	mov	r1, r3
 80024be:	f003 f949 	bl	8005754 <HAL_GPIO_WritePin>
  // success
  return ILI9341_SUCCESS;
 80024c2:	2301      	movs	r3, #1
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <_ZN7ILI93419DrawPixelEttt>:
  * @param  y: y coordinate.
  * @param  color: 16-bit color.
  * @retval ILI9341_SUCCESS or ILI9341_ERROR.
  */
char ILI9341::DrawPixel (uint16_t x, uint16_t y, uint16_t color)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	4608      	mov	r0, r1
 80024d6:	4611      	mov	r1, r2
 80024d8:	461a      	mov	r2, r3
 80024da:	4603      	mov	r3, r0
 80024dc:	817b      	strh	r3, [r7, #10]
 80024de:	460b      	mov	r3, r1
 80024e0:	813b      	strh	r3, [r7, #8]
 80024e2:	4613      	mov	r3, r2
 80024e4:	80fb      	strh	r3, [r7, #6]
  // check dimension
  if ((x > width_) || (y > height_)) {
 80024e6:	897b      	ldrh	r3, [r7, #10]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80024ee:	4293      	cmp	r3, r2
 80024f0:	dc05      	bgt.n	80024fe <_ZN7ILI93419DrawPixelEttt+0x32>
 80024f2:	893b      	ldrh	r3, [r7, #8]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80024fa:	4293      	cmp	r3, r2
 80024fc:	dd01      	ble.n	8002502 <_ZN7ILI93419DrawPixelEttt+0x36>
    // error
    return ILI9341_ERROR;
 80024fe:	2300      	movs	r3, #0
 8002500:	e00f      	b.n	8002522 <_ZN7ILI93419DrawPixelEttt+0x56>
  }
  // set window
  SetWindow(x, y, x, y);
 8002502:	8978      	ldrh	r0, [r7, #10]
 8002504:	893a      	ldrh	r2, [r7, #8]
 8002506:	8979      	ldrh	r1, [r7, #10]
 8002508:	893b      	ldrh	r3, [r7, #8]
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	4603      	mov	r3, r0
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f7ff ff8a 	bl	8002428 <_ZN7ILI93419SetWindowEtttt>
  // draw pixel by 565 mode
  SendColor565(color, 1);
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	2201      	movs	r2, #1
 8002518:	4619      	mov	r1, r3
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f805 	bl	800252a <_ZN7ILI934112SendColor565Etm>
  // success
  return ILI9341_SUCCESS;
 8002520:	2301      	movs	r3, #1
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_ZN7ILI934112SendColor565Etm>:

void ILI9341::SendColor565(uint16_t color, uint32_t count)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	460b      	mov	r3, r1
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	817b      	strh	r3, [r7, #10]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002542:	2200      	movs	r2, #0
 8002544:	4619      	mov	r1, r3
 8002546:	f003 f905 	bl	8005754 <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 800254a:	212c      	movs	r1, #44	@ 0x2c
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f7ff feed 	bl	800232c <_ZN7ILI934111TransmitCmdEh>
  // counter
  while (count--) {
 8002552:	e004      	b.n	800255e <_ZN7ILI934112SendColor565Etm+0x34>
    // write color - first colors byte
    Transmit16bitData(color);
 8002554:	897b      	ldrh	r3, [r7, #10]
 8002556:	4619      	mov	r1, r3
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f7ff ff17 	bl	800238c <_ZN7ILI934117Transmit16bitDataEt>
  while (count--) {
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	1e5a      	subs	r2, r3, #1
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <_ZN7ILI934112SendColor565Etm+0x2a>
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800257c:	2201      	movs	r2, #1
 800257e:	4619      	mov	r1, r3
 8002580:	f003 f8e8 	bl	8005754 <HAL_GPIO_WritePin>
}
 8002584:	bf00      	nop
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <_ZN7ILI93415FloodEtm>:

void ILI9341::Flood(uint16_t color, uint32_t count)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	460b      	mov	r3, r1
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	817b      	strh	r3, [r7, #10]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80025a4:	2200      	movs	r2, #0
 80025a6:	4619      	mov	r1, r3
 80025a8:	f003 f8d4 	bl	8005754 <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 80025ac:	212c      	movs	r1, #44	@ 0x2c
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f7ff febc 	bl	800232c <_ZN7ILI934111TransmitCmdEh>
  // counter
  // Upper and lower are the same
  if( (color & 0xFF) == (color >> 8))
 80025b4:	897b      	ldrh	r3, [r7, #10]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	897a      	ldrh	r2, [r7, #10]
 80025ba:	0a12      	lsrs	r2, r2, #8
 80025bc:	b292      	uxth	r2, r2
 80025be:	4293      	cmp	r3, r2
 80025c0:	d13c      	bne.n	800263c <_ZN7ILI93415FloodEtm+0xb0>
  {
    count--;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	607b      	str	r3, [r7, #4]
    Transmit16bitData(color);
 80025c8:	897b      	ldrh	r3, [r7, #10]
 80025ca:	4619      	mov	r1, r3
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f7ff fedd 	bl	800238c <_ZN7ILI934117Transmit16bitDataEt>
    while(count--)
 80025d2:	e023      	b.n	800261c <_ZN7ILI93415FloodEtm+0x90>
    {
#if UI_USE_HAL
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80025de:	2200      	movs	r2, #0
 80025e0:	4619      	mov	r1, r3
 80025e2:	f003 f8b7 	bl	8005754 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80025f0:	2201      	movs	r2, #1
 80025f2:	4619      	mov	r1, r3
 80025f4:	f003 f8ae 	bl	8005754 <HAL_GPIO_WritePin>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002602:	2200      	movs	r2, #0
 8002604:	4619      	mov	r1, r3
 8002606:	f003 f8a5 	bl	8005754 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002614:	2201      	movs	r2, #1
 8002616:	4619      	mov	r1, r3
 8002618:	f003 f89c 	bl	8005754 <HAL_GPIO_WritePin>
    while(count--)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	1e5a      	subs	r2, r3, #1
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	bf14      	ite	ne
 8002626:	2301      	movne	r3, #1
 8002628:	2300      	moveq	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1d1      	bne.n	80025d4 <_ZN7ILI93415FloodEtm+0x48>
 8002630:	e00e      	b.n	8002650 <_ZN7ILI93415FloodEtm+0xc4>
  }
  else
  {
    while (count--)
    {
      Transmit16bitData(color);
 8002632:	897b      	ldrh	r3, [r7, #10]
 8002634:	4619      	mov	r1, r3
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff fea8 	bl	800238c <_ZN7ILI934117Transmit16bitDataEt>
    while (count--)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	1e5a      	subs	r2, r3, #1
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	bf14      	ite	ne
 8002646:	2301      	movne	r3, #1
 8002648:	2300      	moveq	r3, #0
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f0      	bne.n	8002632 <_ZN7ILI93415FloodEtm+0xa6>
    }
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800265a:	2201      	movs	r2, #1
 800265c:	4619      	mov	r1, r3
 800265e:	f003 f879 	bl	8005754 <HAL_GPIO_WritePin>
}
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <_ZN7ILI934111ClearScreenEt>:

void ILI9341::ClearScreen(uint16_t color)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af02      	add	r7, sp, #8
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	460b      	mov	r3, r1
 8002674:	807b      	strh	r3, [r7, #2]
  // set whole window
  SetWindow(0, 0, width_, height_);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800267c:	b29a      	uxth	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002684:	b29b      	uxth	r3, r3
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	4613      	mov	r3, r2
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff feca 	bl	8002428 <_ZN7ILI93419SetWindowEtttt>
  // draw individual pixels
  Flood(color, ILI9341_CACHE_MEM);
 8002694:	887b      	ldrh	r3, [r7, #2]
 8002696:	f44f 3296 	mov.w	r2, #76800	@ 0x12c00
 800269a:	4619      	mov	r1, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ff75 	bl	800258c <_ZN7ILI93415FloodEtm>
  // Update background color
  textbgcolor = color;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	887a      	ldrh	r2, [r7, #2]
 80026a6:	831a      	strh	r2, [r3, #24]
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <_ZN7ILI934113DrawFastHLineEtttt>:

void ILI9341::DrawFastHLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	4608      	mov	r0, r1
 80026ba:	4611      	mov	r1, r2
 80026bc:	461a      	mov	r2, r3
 80026be:	4603      	mov	r3, r0
 80026c0:	817b      	strh	r3, [r7, #10]
 80026c2:	460b      	mov	r3, r1
 80026c4:	813b      	strh	r3, [r7, #8]
 80026c6:	4613      	mov	r3, r2
 80026c8:	80fb      	strh	r3, [r7, #6]
  int16_t x2;

  // Initial off-screen clipping
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 80026ca:	88fb      	ldrh	r3, [r7, #6]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d016      	beq.n	80026fe <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
 80026d0:	893b      	ldrh	r3, [r7, #8]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80026d8:	4293      	cmp	r3, r2
 80026da:	da10      	bge.n	80026fe <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
 80026dc:	897b      	ldrh	r3, [r7, #10]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80026e4:	4293      	cmp	r3, r2
 80026e6:	da0a      	bge.n	80026fe <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
      ((x2 = (x + length - 1)) < 0))
 80026e8:	897a      	ldrh	r2, [r7, #10]
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	4413      	add	r3, r2
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	82fb      	strh	r3, [r7, #22]
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 80026f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	da01      	bge.n	8002702 <_ZN7ILI934113DrawFastHLineEtttt+0x52>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <_ZN7ILI934113DrawFastHLineEtttt+0x54>
 8002702:	2300      	movs	r3, #0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d123      	bne.n	8002750 <_ZN7ILI934113DrawFastHLineEtttt+0xa0>

  if (x < 0) { // Clip left
    length += x;
    x = 0;
  }
  if (x2 >= width_) { // Clip right
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800270e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002712:	429a      	cmp	r2, r3
 8002714:	db0c      	blt.n	8002730 <_ZN7ILI934113DrawFastHLineEtttt+0x80>
    x2 = width_ - 1;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29b      	uxth	r3, r3
 8002722:	82fb      	strh	r3, [r7, #22]
    length = x2 - x + 1;
 8002724:	8afa      	ldrh	r2, [r7, #22]
 8002726:	897b      	ldrh	r3, [r7, #10]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	b29b      	uxth	r3, r3
 800272c:	3301      	adds	r3, #1
 800272e:	80fb      	strh	r3, [r7, #6]
  }

  SetWindow(x, y, x2, y);
 8002730:	8af8      	ldrh	r0, [r7, #22]
 8002732:	893a      	ldrh	r2, [r7, #8]
 8002734:	8979      	ldrh	r1, [r7, #10]
 8002736:	893b      	ldrh	r3, [r7, #8]
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	4603      	mov	r3, r0
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f7ff fe73 	bl	8002428 <_ZN7ILI93419SetWindowEtttt>
  Flood(color, length);
 8002742:	88fa      	ldrh	r2, [r7, #6]
 8002744:	8c3b      	ldrh	r3, [r7, #32]
 8002746:	4619      	mov	r1, r3
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7ff ff1f 	bl	800258c <_ZN7ILI93415FloodEtm>
 800274e:	e000      	b.n	8002752 <_ZN7ILI934113DrawFastHLineEtttt+0xa2>
    return;
 8002750:	bf00      	nop
}
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_ZN7ILI934113DrawFastVLineEtttt>:

void ILI9341::DrawFastVLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af02      	add	r7, sp, #8
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	4608      	mov	r0, r1
 8002762:	4611      	mov	r1, r2
 8002764:	461a      	mov	r2, r3
 8002766:	4603      	mov	r3, r0
 8002768:	817b      	strh	r3, [r7, #10]
 800276a:	460b      	mov	r3, r1
 800276c:	813b      	strh	r3, [r7, #8]
 800276e:	4613      	mov	r3, r2
 8002770:	80fb      	strh	r3, [r7, #6]
  int16_t y2;

  // Initial off-screen clipping
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d016      	beq.n	80027a6 <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
 8002778:	897b      	ldrh	r3, [r7, #10]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002780:	4293      	cmp	r3, r2
 8002782:	da10      	bge.n	80027a6 <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
 8002784:	893b      	ldrh	r3, [r7, #8]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800278c:	4293      	cmp	r3, r2
 800278e:	da0a      	bge.n	80027a6 <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
      ((y2 = (y + length - 1)) < 0))
 8002790:	893a      	ldrh	r2, [r7, #8]
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	4413      	add	r3, r2
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29b      	uxth	r3, r3
 800279c:	82fb      	strh	r3, [r7, #22]
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 800279e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	da01      	bge.n	80027aa <_ZN7ILI934113DrawFastVLineEtttt+0x52>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <_ZN7ILI934113DrawFastVLineEtttt+0x54>
 80027aa:	2300      	movs	r3, #0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d123      	bne.n	80027f8 <_ZN7ILI934113DrawFastVLineEtttt+0xa0>
    return;
  if (y < 0) { // Clip top
    length += y;
    y = 0;
  }
  if (y2 >= height_) { // Clip bottom
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80027b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	db0c      	blt.n	80027d8 <_ZN7ILI934113DrawFastVLineEtttt+0x80>
    y2 = height_ - 1;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	82fb      	strh	r3, [r7, #22]
    length = y2 - y + 1;
 80027cc:	8afa      	ldrh	r2, [r7, #22]
 80027ce:	893b      	ldrh	r3, [r7, #8]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3301      	adds	r3, #1
 80027d6:	80fb      	strh	r3, [r7, #6]
  }

  SetWindow(x, y, x, y2);
 80027d8:	8afb      	ldrh	r3, [r7, #22]
 80027da:	8978      	ldrh	r0, [r7, #10]
 80027dc:	893a      	ldrh	r2, [r7, #8]
 80027de:	8979      	ldrh	r1, [r7, #10]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	4603      	mov	r3, r0
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7ff fe1f 	bl	8002428 <_ZN7ILI93419SetWindowEtttt>
  Flood(color, length);
 80027ea:	88fa      	ldrh	r2, [r7, #6]
 80027ec:	8c3b      	ldrh	r3, [r7, #32]
 80027ee:	4619      	mov	r1, r3
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f7ff fecb 	bl	800258c <_ZN7ILI93415FloodEtm>
 80027f6:	e000      	b.n	80027fa <_ZN7ILI934113DrawFastVLineEtttt+0xa2>
    return;
 80027f8:	bf00      	nop
}
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <_ZN7ILI934111SetRotationEh>:

void ILI9341::SetRotation(uint8_t x) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af02      	add	r7, sp, #8
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	70fb      	strb	r3, [r7, #3]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002816:	2200      	movs	r2, #0
 8002818:	4619      	mov	r1, r3
 800281a:	f002 ff9b 	bl	8005754 <HAL_GPIO_WritePin>
  rotation = x % 4; // can't be higher than 3
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	b2da      	uxtb	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	771a      	strb	r2, [r3, #28]
  switch (rotation) {
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7f1b      	ldrb	r3, [r3, #28]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d832      	bhi.n	8002898 <_ZN7ILI934111SetRotationEh+0x98>
 8002832:	a201      	add	r2, pc, #4	@ (adr r2, 8002838 <_ZN7ILI934111SetRotationEh+0x38>)
 8002834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002838:	08002849 	.word	0x08002849
 800283c:	0800285d 	.word	0x0800285d
 8002840:	08002871 	.word	0x08002871
 8002844:	08002885 	.word	0x08002885
  case 0:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8002848:	2348      	movs	r3, #72	@ 0x48
 800284a:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTWIDTH;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	22f0      	movs	r2, #240	@ 0xf0
 8002850:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002858:	815a      	strh	r2, [r3, #10]
    break;
 800285a:	e01d      	b.n	8002898 <_ZN7ILI934111SetRotationEh+0x98>
  case 1:
    x = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 800285c:	2328      	movs	r3, #40	@ 0x28
 800285e:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTHEIGHT;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002866:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	22f0      	movs	r2, #240	@ 0xf0
 800286c:	815a      	strh	r2, [r3, #10]
    break;
 800286e:	e013      	b.n	8002898 <_ZN7ILI934111SetRotationEh+0x98>
  case 2:
    x = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8002870:	2388      	movs	r3, #136	@ 0x88
 8002872:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTWIDTH;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	22f0      	movs	r2, #240	@ 0xf0
 8002878:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002880:	815a      	strh	r2, [r3, #10]
    break;
 8002882:	e009      	b.n	8002898 <_ZN7ILI934111SetRotationEh+0x98>
  case 3:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8002884:	23e8      	movs	r3, #232	@ 0xe8
 8002886:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTHEIGHT;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800288e:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	22f0      	movs	r2, #240	@ 0xf0
 8002894:	815a      	strh	r2, [r3, #10]
    break;
 8002896:	bf00      	nop
  }
  TransmitCmd(ILI9341_MADCTL); // MADCTL
 8002898:	2136      	movs	r1, #54	@ 0x36
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff fd46 	bl	800232c <_ZN7ILI934111TransmitCmdEh>
  Transmit8bitData(x);
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	4619      	mov	r1, r3
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff fd59 	bl	800235c <_ZN7ILI934116Transmit8bitDataEh>
  // For 9341, init default full-screen address window:
  SetWindow(0, 0, width_ - 1, height_ - 1); // CS_IDLE happens here
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	2200      	movs	r2, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff fdac 	bl	8002428 <_ZN7ILI93419SetWindowEtttt>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <_ZN7ILI934111SetTextSizeEh>:

void ILI9341::SetTextSize(uint8_t size)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	70fb      	strb	r3, [r7, #3]
  text_size_ = size;
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	b21a      	sxth	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	819a      	strh	r2, [r3, #12]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_ZN7ILI93418DrawCharEsshth>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint8_t size)
{
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b089      	sub	sp, #36	@ 0x24
 80028fc:	af04      	add	r7, sp, #16
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	4608      	mov	r0, r1
 8002902:	4611      	mov	r1, r2
 8002904:	461a      	mov	r2, r3
 8002906:	4603      	mov	r3, r0
 8002908:	817b      	strh	r3, [r7, #10]
 800290a:	460b      	mov	r3, r1
 800290c:	813b      	strh	r3, [r7, #8]
 800290e:	4613      	mov	r3, r2
 8002910:	71fb      	strb	r3, [r7, #7]
  DrawChar(x, y, c, color, textbgcolor, size, size);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8b1b      	ldrh	r3, [r3, #24]
 8002916:	79fc      	ldrb	r4, [r7, #7]
 8002918:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 800291c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002920:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002924:	9203      	str	r2, [sp, #12]
 8002926:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800292a:	9202      	str	r2, [sp, #8]
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	8c3b      	ldrh	r3, [r7, #32]
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	4623      	mov	r3, r4
 8002934:	4602      	mov	r2, r0
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f804 	bl	8002944 <_ZN7ILI93418DrawCharEsshtthh>
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	bd90      	pop	{r4, r7, pc}

08002944 <_ZN7ILI93418DrawCharEsshtthh>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint16_t bg, uint8_t size_x,
    uint8_t size_y)
{
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	b089      	sub	sp, #36	@ 0x24
 8002948:	af02      	add	r7, sp, #8
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	4608      	mov	r0, r1
 800294e:	4611      	mov	r1, r2
 8002950:	461a      	mov	r2, r3
 8002952:	4603      	mov	r3, r0
 8002954:	817b      	strh	r3, [r7, #10]
 8002956:	460b      	mov	r3, r1
 8002958:	813b      	strh	r3, [r7, #8]
 800295a:	4613      	mov	r3, r2
 800295c:	71fb      	strb	r3, [r7, #7]
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 800295e:	2300      	movs	r3, #0
 8002960:	75fb      	strb	r3, [r7, #23]
 8002962:	e0a8      	b.n	8002ab6 <_ZN7ILI93418DrawCharEsshtthh+0x172>
      uint8_t line = font[c * 5 + i];
 8002964:	79fa      	ldrb	r2, [r7, #7]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	441a      	add	r2, r3
 800296c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002970:	4413      	add	r3, r2
 8002972:	4a6e      	ldr	r2, [pc, #440]	@ (8002b2c <_ZN7ILI93418DrawCharEsshtthh+0x1e8>)
 8002974:	5cd3      	ldrb	r3, [r2, r3]
 8002976:	75bb      	strb	r3, [r7, #22]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8002978:	2300      	movs	r3, #0
 800297a:	757b      	strb	r3, [r7, #21]
 800297c:	e090      	b.n	8002aa0 <_ZN7ILI93418DrawCharEsshtthh+0x15c>
        if (line & 1) {
 800297e:	7dbb      	ldrb	r3, [r7, #22]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d03f      	beq.n	8002a08 <_ZN7ILI93418DrawCharEsshtthh+0xc4>
          if (size_x == 1 && size_y == 1)
 8002988:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800298c:	2b01      	cmp	r3, #1
 800298e:	d114      	bne.n	80029ba <_ZN7ILI93418DrawCharEsshtthh+0x76>
 8002990:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002994:	2b01      	cmp	r3, #1
 8002996:	d110      	bne.n	80029ba <_ZN7ILI93418DrawCharEsshtthh+0x76>
            DrawPixel(x + i, y + j, color);
 8002998:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800299c:	b29a      	uxth	r2, r3
 800299e:	897b      	ldrh	r3, [r7, #10]
 80029a0:	4413      	add	r3, r2
 80029a2:	b299      	uxth	r1, r3
 80029a4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	893b      	ldrh	r3, [r7, #8]
 80029ac:	4413      	add	r3, r2
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f7ff fd8a 	bl	80024cc <_ZN7ILI93419DrawPixelEttt>
 80029b8:	e069      	b.n	8002a8e <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 80029ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029be:	b29a      	uxth	r2, r3
 80029c0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	fb12 f303 	smulbb	r3, r2, r3
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	897b      	ldrh	r3, [r7, #10]
 80029ce:	4413      	add	r3, r2
 80029d0:	b299      	uxth	r1, r3
 80029d2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80029dc:	b29b      	uxth	r3, r3
 80029de:	fb12 f303 	smulbb	r3, r2, r3
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	893b      	ldrh	r3, [r7, #8]
 80029e6:	4413      	add	r3, r2
 80029e8:	b298      	uxth	r0, r3
 80029ea:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80029ee:	b29c      	uxth	r4, r3
 80029f0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80029f8:	9201      	str	r2, [sp, #4]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	4623      	mov	r3, r4
 80029fe:	4602      	mov	r2, r0
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f8fa 	bl	8002bfa <_ZN7ILI93418FillRectEttttt>
 8002a06:	e042      	b.n	8002a8e <_ZN7ILI93418DrawCharEsshtthh+0x14a>
                          color);
        } else if (bg != color) {
 8002a08:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002a0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d03e      	beq.n	8002a8e <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          if (size_x == 1 && size_y == 1)
 8002a10:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d114      	bne.n	8002a42 <_ZN7ILI93418DrawCharEsshtthh+0xfe>
 8002a18:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d110      	bne.n	8002a42 <_ZN7ILI93418DrawCharEsshtthh+0xfe>
            DrawPixel(x + i, y + j, bg);
 8002a20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	897b      	ldrh	r3, [r7, #10]
 8002a28:	4413      	add	r3, r2
 8002a2a:	b299      	uxth	r1, r3
 8002a2c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	893b      	ldrh	r3, [r7, #8]
 8002a34:	4413      	add	r3, r2
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7ff fd46 	bl	80024cc <_ZN7ILI93419DrawPixelEttt>
 8002a40:	e025      	b.n	8002a8e <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8002a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	fb12 f303 	smulbb	r3, r2, r3
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	897b      	ldrh	r3, [r7, #10]
 8002a56:	4413      	add	r3, r2
 8002a58:	b299      	uxth	r1, r3
 8002a5a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	fb12 f303 	smulbb	r3, r2, r3
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	893b      	ldrh	r3, [r7, #8]
 8002a6e:	4413      	add	r3, r2
 8002a70:	b298      	uxth	r0, r3
 8002a72:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002a76:	b29c      	uxth	r4, r3
 8002a78:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002a80:	9201      	str	r2, [sp, #4]
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	4623      	mov	r3, r4
 8002a86:	4602      	mov	r2, r0
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f8b6 	bl	8002bfa <_ZN7ILI93418FillRectEttttt>
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8002a8e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	757b      	strb	r3, [r7, #21]
 8002a9a:	7dbb      	ldrb	r3, [r7, #22]
 8002a9c:	085b      	lsrs	r3, r3, #1
 8002a9e:	75bb      	strb	r3, [r7, #22]
 8002aa0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002aa4:	2b07      	cmp	r3, #7
 8002aa6:	f77f af6a 	ble.w	800297e <_ZN7ILI93418DrawCharEsshtthh+0x3a>
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8002aaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	75fb      	strb	r3, [r7, #23]
 8002ab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	f77f af52 	ble.w	8002964 <_ZN7ILI93418DrawCharEsshtthh+0x20>
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
 8002ac0:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002ac2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d02d      	beq.n	8002b24 <_ZN7ILI93418DrawCharEsshtthh+0x1e0>
      if (size_x == 1 && size_y == 1)
 8002ac8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d10e      	bne.n	8002aee <_ZN7ILI93418DrawCharEsshtthh+0x1aa>
 8002ad0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d10a      	bne.n	8002aee <_ZN7ILI93418DrawCharEsshtthh+0x1aa>
        DrawFastVLine(x + 5, y, 8, bg);
 8002ad8:	897b      	ldrh	r3, [r7, #10]
 8002ada:	3305      	adds	r3, #5
 8002adc:	b299      	uxth	r1, r3
 8002ade:	893a      	ldrh	r2, [r7, #8]
 8002ae0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2308      	movs	r3, #8
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f7ff fe36 	bl	8002758 <_ZN7ILI934113DrawFastVLineEtttt>
      else
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    }
}
 8002aec:	e01a      	b.n	8002b24 <_ZN7ILI93418DrawCharEsshtthh+0x1e0>
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8002aee:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	0092      	lsls	r2, r2, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	897b      	ldrh	r3, [r7, #10]
 8002afe:	4413      	add	r3, r2
 8002b00:	b299      	uxth	r1, r3
 8002b02:	8938      	ldrh	r0, [r7, #8]
 8002b04:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002b08:	b29c      	uxth	r4, r3
 8002b0a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002b16:	9201      	str	r2, [sp, #4]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	4623      	mov	r3, r4
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f86b 	bl	8002bfa <_ZN7ILI93418FillRectEttttt>
}
 8002b24:	bf00      	nop
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd90      	pop	{r4, r7, pc}
 8002b2c:	0800ca50 	.word	0x0800ca50

08002b30 <_ZN7ILI93418DrawTextEttPKct>:

void ILI9341::DrawText(uint16_t x, uint16_t y, const char *str, uint16_t color)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	817b      	strh	r3, [r7, #10]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	813b      	strh	r3, [r7, #8]
  // NOTE: Characters are 6x8 (wxh)
    uint8_t TempChar;

    /* Set area back to span the entire LCD */
    SetWindow(0, 0, width_ - 1, height_ - 1);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2100      	movs	r1, #0
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f7ff fc60 	bl	8002428 <_ZN7ILI93419SetWindowEtttt>
    do
    {
        TempChar = *str++;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	75fb      	strb	r3, [r7, #23]
        DrawChar( x, y, TempChar, color, text_size_);
 8002b72:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002b76:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	7df8      	ldrb	r0, [r7, #23]
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	8c3b      	ldrh	r3, [r7, #32]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f7ff feb3 	bl	80028f8 <_ZN7ILI93418DrawCharEsshth>
        if( x < width_ - 1 - 8)
 8002b92:	897a      	ldrh	r2, [r7, #10]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002b9a:	3b09      	subs	r3, #9
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	da0c      	bge.n	8002bba <_ZN7ILI93418DrawTextEttPKct+0x8a>
        {
            x += (6 * text_size_);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	0052      	lsls	r2, r2, #1
 8002bac:	4413      	add	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	897b      	ldrh	r3, [r7, #10]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	817b      	strh	r3, [r7, #10]
 8002bb8:	e016      	b.n	8002be8 <_ZN7ILI93418DrawTextEttPKct+0xb8>
        }
        else if ( y < height_ - 1 - 16)
 8002bba:	893a      	ldrh	r2, [r7, #8]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002bc2:	3b11      	subs	r3, #17
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	da0b      	bge.n	8002be0 <_ZN7ILI93418DrawTextEttPKct+0xb0>
        {
            x = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	817b      	strh	r3, [r7, #10]
            y += (8 * text_size_);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	893b      	ldrh	r3, [r7, #8]
 8002bda:	4413      	add	r3, r2
 8002bdc:	813b      	strh	r3, [r7, #8]
 8002bde:	e003      	b.n	8002be8 <_ZN7ILI93418DrawTextEttPKct+0xb8>
        }
        else
        {
            x = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	817b      	strh	r3, [r7, #10]
            y = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	813b      	strh	r3, [r7, #8]
        }
    }
    while ( *str != 0 );
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1bb      	bne.n	8002b68 <_ZN7ILI93418DrawTextEttPKct+0x38>
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <_ZN7ILI93418FillRectEttttt>:
  DrawFastVLine(x, y, h, color);
  DrawFastVLine(x + w - 1, y, h, color);
}

void ILI9341::FillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b088      	sub	sp, #32
 8002bfe:	af02      	add	r7, sp, #8
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	4608      	mov	r0, r1
 8002c04:	4611      	mov	r1, r2
 8002c06:	461a      	mov	r2, r3
 8002c08:	4603      	mov	r3, r0
 8002c0a:	817b      	strh	r3, [r7, #10]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	813b      	strh	r3, [r7, #8]
 8002c10:	4613      	mov	r3, r2
 8002c12:	80fb      	strh	r3, [r7, #6]
  int16_t x2, y2;

  // Initial off-screen clipping
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d024      	beq.n	8002c64 <_ZN7ILI93418FillRectEttttt+0x6a>
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 8002c1a:	8c3b      	ldrh	r3, [r7, #32]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d021      	beq.n	8002c64 <_ZN7ILI93418FillRectEttttt+0x6a>
 8002c20:	897b      	ldrh	r3, [r7, #10]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	da1b      	bge.n	8002c64 <_ZN7ILI93418FillRectEttttt+0x6a>
 8002c2c:	893b      	ldrh	r3, [r7, #8]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002c34:	4293      	cmp	r3, r2
 8002c36:	da15      	bge.n	8002c64 <_ZN7ILI93418FillRectEttttt+0x6a>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8002c38:	897a      	ldrh	r2, [r7, #10]
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	82fb      	strh	r3, [r7, #22]
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 8002c46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	db0a      	blt.n	8002c64 <_ZN7ILI93418FillRectEttttt+0x6a>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8002c4e:	893a      	ldrh	r2, [r7, #8]
 8002c50:	8c3b      	ldrh	r3, [r7, #32]
 8002c52:	4413      	add	r3, r2
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	82bb      	strh	r3, [r7, #20]
 8002c5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	da01      	bge.n	8002c68 <_ZN7ILI93418FillRectEttttt+0x6e>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <_ZN7ILI93418FillRectEttttt+0x70>
 8002c68:	2300      	movs	r3, #0
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d13a      	bne.n	8002ce4 <_ZN7ILI93418FillRectEttttt+0xea>
  }
  if (y1 < 0) { // Clip top
    h += y1;
    y1 = 0;
  }
  if (x2 >= width_) { // Clip right
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	db0c      	blt.n	8002c96 <_ZN7ILI93418FillRectEttttt+0x9c>
    x2 = width_ - 1;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	82fb      	strh	r3, [r7, #22]
    w = x2 - x1 + 1;
 8002c8a:	8afa      	ldrh	r2, [r7, #22]
 8002c8c:	897b      	ldrh	r3, [r7, #10]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3301      	adds	r3, #1
 8002c94:	80fb      	strh	r3, [r7, #6]
  }
  if (y2 >= height_) { // Clip bottom
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002c9c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	db0c      	blt.n	8002cbe <_ZN7ILI93418FillRectEttttt+0xc4>
    y2 = height_ - 1;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	82bb      	strh	r3, [r7, #20]
    h = y2 - y1 + 1;
 8002cb2:	8aba      	ldrh	r2, [r7, #20]
 8002cb4:	893b      	ldrh	r3, [r7, #8]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3301      	adds	r3, #1
 8002cbc:	843b      	strh	r3, [r7, #32]
  }

  SetWindow(x1, y1, x2, y2);
 8002cbe:	8af8      	ldrh	r0, [r7, #22]
 8002cc0:	8abb      	ldrh	r3, [r7, #20]
 8002cc2:	893a      	ldrh	r2, [r7, #8]
 8002cc4:	8979      	ldrh	r1, [r7, #10]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	4603      	mov	r3, r0
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f7ff fbac 	bl	8002428 <_ZN7ILI93419SetWindowEtttt>
  Flood(color, (uint32_t)w * (uint32_t)h);
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	8c3a      	ldrh	r2, [r7, #32]
 8002cd4:	fb03 f202 	mul.w	r2, r3, r2
 8002cd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002cda:	4619      	mov	r1, r3
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7ff fc55 	bl	800258c <_ZN7ILI93415FloodEtm>
 8002ce2:	e000      	b.n	8002ce6 <_ZN7ILI93418FillRectEttttt+0xec>
    return;
 8002ce4:	bf00      	nop
}
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_ZN7ILI934110FillCircleEtttt>:
void ILI9341::FillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	817b      	strh	r3, [r7, #10]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	813b      	strh	r3, [r7, #8]
 8002d02:	4613      	mov	r3, r2
 8002d04:	80fb      	strh	r3, [r7, #6]
    int16_t x = 0, y = r;
 8002d06:	2300      	movs	r3, #0
 8002d08:	82fb      	strh	r3, [r7, #22]
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	82bb      	strh	r3, [r7, #20]
    int16_t d = 1 - r;
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	f1c3 0301 	rsb	r3, r3, #1
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	827b      	strh	r3, [r7, #18]

    // Draw initial center line
    DrawFastHLine(x0 - r, y0, 2 * r + 1, color);
 8002d18:	897a      	ldrh	r2, [r7, #10]
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	b299      	uxth	r1, r3
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3301      	adds	r3, #1
 8002d28:	b298      	uxth	r0, r3
 8002d2a:	893a      	ldrh	r2, [r7, #8]
 8002d2c:	8c3b      	ldrh	r3, [r7, #32]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	4603      	mov	r3, r0
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f7ff fcbc 	bl	80026b0 <_ZN7ILI934113DrawFastHLineEtttt>

    while (y >= x) {
 8002d38:	e073      	b.n	8002e22 <_ZN7ILI934110FillCircleEtttt+0x136>
        // Draw horizontal spans
        DrawFastHLine(x0 - x, y0 + y, 2 * x + 1, color);
 8002d3a:	8afb      	ldrh	r3, [r7, #22]
 8002d3c:	897a      	ldrh	r2, [r7, #10]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	b299      	uxth	r1, r3
 8002d42:	8aba      	ldrh	r2, [r7, #20]
 8002d44:	893b      	ldrh	r3, [r7, #8]
 8002d46:	4413      	add	r3, r2
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	8afb      	ldrh	r3, [r7, #22]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3301      	adds	r3, #1
 8002d52:	b298      	uxth	r0, r3
 8002d54:	8c3b      	ldrh	r3, [r7, #32]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	4603      	mov	r3, r0
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f7ff fca8 	bl	80026b0 <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - x, y0 - y, 2 * x + 1, color);
 8002d60:	8afb      	ldrh	r3, [r7, #22]
 8002d62:	897a      	ldrh	r2, [r7, #10]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	b299      	uxth	r1, r3
 8002d68:	8abb      	ldrh	r3, [r7, #20]
 8002d6a:	893a      	ldrh	r2, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	8afb      	ldrh	r3, [r7, #22]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	b298      	uxth	r0, r3
 8002d7a:	8c3b      	ldrh	r3, [r7, #32]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	4603      	mov	r3, r0
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f7ff fc95 	bl	80026b0 <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - y, y0 + x, 2 * y + 1, color);
 8002d86:	8abb      	ldrh	r3, [r7, #20]
 8002d88:	897a      	ldrh	r2, [r7, #10]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	b299      	uxth	r1, r3
 8002d8e:	8afa      	ldrh	r2, [r7, #22]
 8002d90:	893b      	ldrh	r3, [r7, #8]
 8002d92:	4413      	add	r3, r2
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	8abb      	ldrh	r3, [r7, #20]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	b298      	uxth	r0, r3
 8002da0:	8c3b      	ldrh	r3, [r7, #32]
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	4603      	mov	r3, r0
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f7ff fc82 	bl	80026b0 <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - y, y0 - x, 2 * y + 1, color);
 8002dac:	8abb      	ldrh	r3, [r7, #20]
 8002dae:	897a      	ldrh	r2, [r7, #10]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	b299      	uxth	r1, r3
 8002db4:	8afb      	ldrh	r3, [r7, #22]
 8002db6:	893a      	ldrh	r2, [r7, #8]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	8abb      	ldrh	r3, [r7, #20]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	b298      	uxth	r0, r3
 8002dc6:	8c3b      	ldrh	r3, [r7, #32]
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	4603      	mov	r3, r0
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff fc6f 	bl	80026b0 <_ZN7ILI934113DrawFastHLineEtttt>

        x++;
 8002dd2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	82fb      	strh	r3, [r7, #22]
        if (d < 0) {
 8002dde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	da09      	bge.n	8002dfa <_ZN7ILI934110FillCircleEtttt+0x10e>
            d += 2 * x + 1;
 8002de6:	8afb      	ldrh	r3, [r7, #22]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	8a7b      	ldrh	r3, [r7, #18]
 8002dee:	4413      	add	r3, r2
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3301      	adds	r3, #1
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	827b      	strh	r3, [r7, #18]
 8002df8:	e013      	b.n	8002e22 <_ZN7ILI934110FillCircleEtttt+0x136>
        } else {
            y--;
 8002dfa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	82bb      	strh	r3, [r7, #20]
            d += 2 * (x - y) + 1;
 8002e06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	8a7b      	ldrh	r3, [r7, #18]
 8002e18:	4413      	add	r3, r2
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	827b      	strh	r3, [r7, #18]
    while (y >= x) {
 8002e22:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002e26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	da85      	bge.n	8002d3a <_ZN7ILI934110FillCircleEtttt+0x4e>
        }
    }
}
 8002e2e:	bf00      	nop
 8002e30:	bf00      	nop
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <TCAL9538RSVR_INIT>:
*/



uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	4611      	mov	r1, r2
 8002e44:	461a      	mov	r2, r3
 8002e46:	460b      	mov	r3, r1
 8002e48:	71fb      	strb	r3, [r7, #7]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;
	dev->input = direction_bitMask;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	79ba      	ldrb	r2, [r7, #6]
 8002e56:	719a      	strb	r2, [r3, #6]


    dev->i2cHandle = i2cHandle;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress<<1);
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	b25b      	sxtb	r3, r3
 8002e72:	f063 031f 	orn	r3, r3, #31
 8002e76:	b25b      	sxtb	r3, r3
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	711a      	strb	r2, [r3, #4]
    uint8_t hold_bitMask = direction_bitMask;
 8002e7e:	79bb      	ldrb	r3, [r7, #6]
 8002e80:	757b      	strb	r3, [r7, #21]

    status = TCAL9538RSVR_SetDirection(dev, &hold_bitMask);
 8002e82:	f107 0315 	add.w	r3, r7, #21
 8002e86:	4619      	mov	r1, r3
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f83b 	bl	8002f04 <TCAL9538RSVR_SetDirection>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8002e92:	7dbb      	ldrb	r3, [r7, #22]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf14      	ite	ne
 8002e98:	2301      	movne	r3, #1
 8002e9a:	2300      	moveq	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	75fb      	strb	r3, [r7, #23]

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 8002ea6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f838 	bl	8002f22 <TCAL9538RSVR_SetInterrupts>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8002eb6:	7dbb      	ldrb	r3, [r7, #22]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	75fb      	strb	r3, [r7, #23]

    // if all pins are inputs, invert all pins
    if (direction_bitMask == 0xFF) {
 8002eca:	79bb      	ldrb	r3, [r7, #6]
 8002ecc:	2bff      	cmp	r3, #255	@ 0xff
 8002ece:	d114      	bne.n	8002efa <TCAL9538RSVR_INIT+0xc2>
        uint8_t full = 0xFF;
 8002ed0:	23ff      	movs	r3, #255	@ 0xff
 8002ed2:	753b      	strb	r3, [r7, #20]
        status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_INVERSION, &full);
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2102      	movs	r1, #2
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f894 	bl	800300a <TCAL9538RSVR_WriteRegister>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	75bb      	strb	r3, [r7, #22]
        errNum += (status != HAL_OK);
 8002ee6:	7dbb      	ldrb	r3, [r7, #22]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf14      	ite	ne
 8002eec:	2301      	movne	r3, #1
 8002eee:	2300      	moveq	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	7dfb      	ldrb	r3, [r7, #23]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	75fb      	strb	r3, [r7, #23]
    }
    

    return (errNum);
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t* bitMask)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, bitMask);
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	2103      	movs	r1, #3
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f879 	bl	800300a <TCAL9538RSVR_WriteRegister>
 8002f18:	4603      	mov	r3, r0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 8002f2e:	1cfb      	adds	r3, r7, #3
 8002f30:	461a      	mov	r2, r3
 8002f32:	2145      	movs	r1, #69	@ 0x45
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f868 	bl	800300a <TCAL9538RSVR_WriteRegister>
 8002f3a:	4603      	mov	r3, r0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	737b      	strb	r3, [r7, #13]


    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 8002f54:	f107 030d 	add.w	r3, r7, #13
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2146      	movs	r1, #70	@ 0x46
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f837 	bl	8002fd0 <TCAL9538RSVR_ReadRegister>
 8002f62:	4603      	mov	r3, r0
 8002f64:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 8002f66:	7bbb      	ldrb	r3, [r7, #14]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	4413      	add	r3, r2
 8002f78:	73fb      	strb	r3, [r7, #15]

    // Read updated input values
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3305      	adds	r3, #5
 8002f7e:	4619      	mov	r1, r3
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f807 	bl	8002f94 <TCAL9538RSVR_ReadInput>
 8002f86:	4603      	mov	r3, r0
 8002f88:	73bb      	strb	r3, [r7, #14]


    return (errNum);
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <TCAL9538RSVR_ReadInput>:




HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f814 	bl	8002fd0 <TCAL9538RSVR_ReadRegister>
 8002fa8:	4603      	mov	r3, r0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <TCAL9538RSVR_SetOutput>:
HAL_StatusTypeDef TCAL9538RSVR_SetOutput(TCAL9538RSVR* dev, uint8_t *data)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f822 	bl	800300a <TCAL9538RSVR_WriteRegister>
 8002fc6:	4603      	mov	r3, r0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <TCAL9538RSVR_ReadRegister>:

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af04      	add	r7, sp, #16
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	791b      	ldrb	r3, [r3, #4]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	7afb      	ldrb	r3, [r7, #11]
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff0:	9302      	str	r3, [sp, #8]
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f002 fda4 	bl	8005b48 <HAL_I2C_Mem_Read>
 8003000:	4603      	mov	r3, r0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b088      	sub	sp, #32
 800300e:	af04      	add	r7, sp, #16
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	460b      	mov	r3, r1
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Write(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6818      	ldr	r0, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	791b      	ldrb	r3, [r3, #4]
 8003020:	4619      	mov	r1, r3
 8003022:	7afb      	ldrb	r3, [r7, #11]
 8003024:	b29a      	uxth	r2, r3
 8003026:	f04f 33ff 	mov.w	r3, #4294967295
 800302a:	9302      	str	r3, [sp, #8]
 800302c:	2301      	movs	r3, #1
 800302e:	9301      	str	r3, [sp, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	2301      	movs	r3, #1
 8003036:	f002 fc73 	bl	8005920 <HAL_I2C_Mem_Write>
 800303a:	4603      	mov	r3, r0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003044:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800307c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003048:	f7fe ff84 	bl	8001f54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800304c:	480c      	ldr	r0, [pc, #48]	@ (8003080 <LoopForever+0x6>)
  ldr r1, =_edata
 800304e:	490d      	ldr	r1, [pc, #52]	@ (8003084 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003050:	4a0d      	ldr	r2, [pc, #52]	@ (8003088 <LoopForever+0xe>)
  movs r3, #0
 8003052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003054:	e002      	b.n	800305c <LoopCopyDataInit>

08003056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800305a:	3304      	adds	r3, #4

0800305c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800305c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800305e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003060:	d3f9      	bcc.n	8003056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003062:	4a0a      	ldr	r2, [pc, #40]	@ (800308c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003064:	4c0a      	ldr	r4, [pc, #40]	@ (8003090 <LoopForever+0x16>)
  movs r3, #0
 8003066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003068:	e001      	b.n	800306e <LoopFillZerobss>

0800306a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800306a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800306c:	3204      	adds	r2, #4

0800306e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800306e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003070:	d3fb      	bcc.n	800306a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003072:	f009 fb87 	bl	800c784 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003076:	f7fe f8dd 	bl	8001234 <main>

0800307a <LoopForever>:

LoopForever:
    b LoopForever
 800307a:	e7fe      	b.n	800307a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800307c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003084:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003088:	0800cf9c 	.word	0x0800cf9c
  ldr r2, =_sbss
 800308c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003090:	20002a14 	.word	0x20002a14

08003094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003094:	e7fe      	b.n	8003094 <ADC1_2_IRQHandler>

08003096 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a0:	2003      	movs	r0, #3
 80030a2:	f001 ff1a 	bl	8004eda <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030a6:	200f      	movs	r0, #15
 80030a8:	f7fe fe9a 	bl	8001de0 <HAL_InitTick>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	71fb      	strb	r3, [r7, #7]
 80030b6:	e001      	b.n	80030bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030b8:	f7fe fc64 	bl	8001984 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030bc:	79fb      	ldrb	r3, [r7, #7]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030cc:	4b06      	ldr	r3, [pc, #24]	@ (80030e8 <HAL_IncTick+0x20>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <HAL_IncTick+0x24>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4413      	add	r3, r2
 80030d8:	4a04      	ldr	r2, [pc, #16]	@ (80030ec <HAL_IncTick+0x24>)
 80030da:	6013      	str	r3, [r2, #0]
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20000008 	.word	0x20000008
 80030ec:	20000378 	.word	0x20000378

080030f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return uwTick;
 80030f4:	4b03      	ldr	r3, [pc, #12]	@ (8003104 <HAL_GetTick+0x14>)
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000378 	.word	0x20000378

08003108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003110:	f7ff ffee 	bl	80030f0 <HAL_GetTick>
 8003114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d005      	beq.n	800312e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003122:	4b0a      	ldr	r3, [pc, #40]	@ (800314c <HAL_Delay+0x44>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800312e:	bf00      	nop
 8003130:	f7ff ffde 	bl	80030f0 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	429a      	cmp	r2, r3
 800313e:	d8f7      	bhi.n	8003130 <HAL_Delay+0x28>
  {
  }
}
 8003140:	bf00      	nop
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000008 	.word	0x20000008

08003150 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	609a      	str	r2, [r3, #8]
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	609a      	str	r2, [r3, #8]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3360      	adds	r3, #96	@ 0x60
 80031ca:	461a      	mov	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	4b08      	ldr	r3, [pc, #32]	@ (80031fc <LL_ADC_SetOffset+0x44>)
 80031da:	4013      	ands	r3, r2
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80031f0:	bf00      	nop
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	03fff000 	.word	0x03fff000

08003200 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3360      	adds	r3, #96	@ 0x60
 800320e:	461a      	mov	r2, r3
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003220:	4618      	mov	r0, r3
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3360      	adds	r3, #96	@ 0x60
 800323c:	461a      	mov	r2, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	431a      	orrs	r2, r3
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003256:	bf00      	nop
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	615a      	str	r2, [r3, #20]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b087      	sub	sp, #28
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	3330      	adds	r3, #48	@ 0x30
 80032be:	461a      	mov	r2, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	4413      	add	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	211f      	movs	r1, #31
 80032da:	fa01 f303 	lsl.w	r3, r1, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	401a      	ands	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	0e9b      	lsrs	r3, r3, #26
 80032e6:	f003 011f 	and.w	r1, r3, #31
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	431a      	orrs	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032fa:	bf00      	nop
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003306:	b480      	push	{r7}
 8003308:	b087      	sub	sp, #28
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3314      	adds	r3, #20
 8003316:	461a      	mov	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	0e5b      	lsrs	r3, r3, #25
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	4413      	add	r3, r2
 8003324:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	0d1b      	lsrs	r3, r3, #20
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	2107      	movs	r1, #7
 8003334:	fa01 f303 	lsl.w	r3, r1, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	401a      	ands	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	0d1b      	lsrs	r3, r3, #20
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	431a      	orrs	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003350:	bf00      	nop
 8003352:	371c      	adds	r7, #28
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003374:	43db      	mvns	r3, r3
 8003376:	401a      	ands	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f003 0318 	and.w	r3, r3, #24
 800337e:	4908      	ldr	r1, [pc, #32]	@ (80033a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003380:	40d9      	lsrs	r1, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	400b      	ands	r3, r1
 8003386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338a:	431a      	orrs	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003392:	bf00      	nop
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	0007ffff 	.word	0x0007ffff

080033a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 031f 	and.w	r3, r3, #31
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80033d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6093      	str	r3, [r2, #8]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033f8:	d101      	bne.n	80033fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800341c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003420:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003444:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003448:	d101      	bne.n	800344e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800346c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003470:	f043 0201 	orr.w	r2, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003494:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003498:	f043 0202 	orr.w	r2, r3, #2
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <LL_ADC_IsEnabled+0x18>
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <LL_ADC_IsEnabled+0x1a>
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d101      	bne.n	80034ea <LL_ADC_IsDisableOngoing+0x18>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <LL_ADC_IsDisableOngoing+0x1a>
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003508:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800350c:	f043 0204 	orr.w	r2, r3, #4
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003530:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003534:	f043 0210 	orr.w	r2, r3, #16
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b04      	cmp	r3, #4
 800355a:	d101      	bne.n	8003560 <LL_ADC_REG_IsConversionOngoing+0x18>
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800357e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003582:	f043 0220 	orr.w	r2, r3, #32
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d101      	bne.n	80035ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035bc:	b590      	push	{r4, r7, lr}
 80035be:	b089      	sub	sp, #36	@ 0x24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e133      	b.n	800383e <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d109      	bne.n	80035f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7fe f9f5 	bl	80019d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff fef1 	bl	80033e4 <LL_ADC_IsDeepPowerDownEnabled>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d004      	beq.n	8003612 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff fed7 	bl	80033c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff ff0c 	bl	8003434 <LL_ADC_IsInternalRegulatorEnabled>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d115      	bne.n	800364e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fef0 	bl	800340c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800362c:	4b86      	ldr	r3, [pc, #536]	@ (8003848 <HAL_ADC_Init+0x28c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	099b      	lsrs	r3, r3, #6
 8003632:	4a86      	ldr	r2, [pc, #536]	@ (800384c <HAL_ADC_Init+0x290>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	099b      	lsrs	r3, r3, #6
 800363a:	3301      	adds	r3, #1
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003640:	e002      	b.n	8003648 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3b01      	subs	r3, #1
 8003646:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f9      	bne.n	8003642 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff feee 	bl	8003434 <LL_ADC_IsInternalRegulatorEnabled>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10d      	bne.n	800367a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003662:	f043 0210 	orr.w	r2, r3, #16
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366e:	f043 0201 	orr.w	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff ff62 	bl	8003548 <LL_ADC_REG_IsConversionOngoing>
 8003684:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b00      	cmp	r3, #0
 8003690:	f040 80cc 	bne.w	800382c <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2b00      	cmp	r3, #0
 8003698:	f040 80c8 	bne.w	800382c <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80036a4:	f043 0202 	orr.w	r2, r3, #2
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fefb 	bl	80034ac <LL_ADC_IsEnabled>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d115      	bne.n	80036e8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036bc:	4864      	ldr	r0, [pc, #400]	@ (8003850 <HAL_ADC_Init+0x294>)
 80036be:	f7ff fef5 	bl	80034ac <LL_ADC_IsEnabled>
 80036c2:	4604      	mov	r4, r0
 80036c4:	4863      	ldr	r0, [pc, #396]	@ (8003854 <HAL_ADC_Init+0x298>)
 80036c6:	f7ff fef1 	bl	80034ac <LL_ADC_IsEnabled>
 80036ca:	4603      	mov	r3, r0
 80036cc:	431c      	orrs	r4, r3
 80036ce:	4862      	ldr	r0, [pc, #392]	@ (8003858 <HAL_ADC_Init+0x29c>)
 80036d0:	f7ff feec 	bl	80034ac <LL_ADC_IsEnabled>
 80036d4:	4603      	mov	r3, r0
 80036d6:	4323      	orrs	r3, r4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4619      	mov	r1, r3
 80036e2:	485e      	ldr	r0, [pc, #376]	@ (800385c <HAL_ADC_Init+0x2a0>)
 80036e4:	f7ff fd34 	bl	8003150 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	7e5b      	ldrb	r3, [r3, #25]
 80036ec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036f2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80036f8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80036fe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003706:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d106      	bne.n	8003724 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371a:	3b01      	subs	r3, #1
 800371c:	045b      	lsls	r3, r3, #17
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003728:	2b00      	cmp	r3, #0
 800372a:	d009      	beq.n	8003740 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003730:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003738:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	4b46      	ldr	r3, [pc, #280]	@ (8003860 <HAL_ADC_Init+0x2a4>)
 8003748:	4013      	ands	r3, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	69b9      	ldr	r1, [r7, #24]
 8003750:	430b      	orrs	r3, r1
 8003752:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff1c 	bl	8003596 <LL_ADC_INJ_IsConversionOngoing>
 800375e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d140      	bne.n	80037e8 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d13d      	bne.n	80037e8 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	7e1b      	ldrb	r3, [r3, #24]
 8003774:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003776:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800377e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800378e:	f023 0306 	bic.w	r3, r3, #6
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	69b9      	ldr	r1, [r7, #24]
 8003798:	430b      	orrs	r3, r1
 800379a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d118      	bne.n	80037d8 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80037b0:	f023 0304 	bic.w	r3, r3, #4
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80037bc:	4311      	orrs	r1, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80037c2:	4311      	orrs	r1, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80037c8:	430a      	orrs	r2, r1
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	611a      	str	r2, [r3, #16]
 80037d6:	e007      	b.n	80037e8 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d10c      	bne.n	800380a <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f6:	f023 010f 	bic.w	r1, r3, #15
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	1e5a      	subs	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	631a      	str	r2, [r3, #48]	@ 0x30
 8003808:	e007      	b.n	800381a <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 020f 	bic.w	r2, r2, #15
 8003818:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381e:	f023 0303 	bic.w	r3, r3, #3
 8003822:	f043 0201 	orr.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	659a      	str	r2, [r3, #88]	@ 0x58
 800382a:	e007      	b.n	800383c <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003830:	f043 0210 	orr.w	r2, r3, #16
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800383c:	7ffb      	ldrb	r3, [r7, #31]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3724      	adds	r7, #36	@ 0x24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd90      	pop	{r4, r7, pc}
 8003846:	bf00      	nop
 8003848:	20000000 	.word	0x20000000
 800384c:	053e2d63 	.word	0x053e2d63
 8003850:	50040000 	.word	0x50040000
 8003854:	50040100 	.word	0x50040100
 8003858:	50040200 	.word	0x50040200
 800385c:	50040300 	.word	0x50040300
 8003860:	fff0c007 	.word	0xfff0c007

08003864 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003870:	4853      	ldr	r0, [pc, #332]	@ (80039c0 <HAL_ADC_Start_DMA+0x15c>)
 8003872:	f7ff fd97 	bl	80033a4 <LL_ADC_GetMultimode>
 8003876:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fe63 	bl	8003548 <LL_ADC_REG_IsConversionOngoing>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	f040 8093 	bne.w	80039b0 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_ADC_Start_DMA+0x34>
 8003894:	2302      	movs	r3, #2
 8003896:	e08e      	b.n	80039b6 <HAL_ADC_Start_DMA+0x152>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a47      	ldr	r2, [pc, #284]	@ (80039c4 <HAL_ADC_Start_DMA+0x160>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d008      	beq.n	80038bc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	2b05      	cmp	r3, #5
 80038b4:	d002      	beq.n	80038bc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b09      	cmp	r3, #9
 80038ba:	d172      	bne.n	80039a2 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fdcb 	bl	8004458 <ADC_Enable>
 80038c2:	4603      	mov	r3, r0
 80038c4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d165      	bne.n	8003998 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a38      	ldr	r2, [pc, #224]	@ (80039c8 <HAL_ADC_Start_DMA+0x164>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d002      	beq.n	80038f0 <HAL_ADC_Start_DMA+0x8c>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	e000      	b.n	80038f2 <HAL_ADC_Start_DMA+0x8e>
 80038f0:	4b36      	ldr	r3, [pc, #216]	@ (80039cc <HAL_ADC_Start_DMA+0x168>)
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d002      	beq.n	8003900 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d105      	bne.n	800390c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003904:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003910:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d006      	beq.n	8003926 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391c:	f023 0206 	bic.w	r2, r3, #6
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003924:	e002      	b.n	800392c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003930:	4a27      	ldr	r2, [pc, #156]	@ (80039d0 <HAL_ADC_Start_DMA+0x16c>)
 8003932:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003938:	4a26      	ldr	r2, [pc, #152]	@ (80039d4 <HAL_ADC_Start_DMA+0x170>)
 800393a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003940:	4a25      	ldr	r2, [pc, #148]	@ (80039d8 <HAL_ADC_Start_DMA+0x174>)
 8003942:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	221c      	movs	r2, #28
 800394a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0210 	orr.w	r2, r2, #16
 8003962:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3340      	adds	r3, #64	@ 0x40
 800397e:	4619      	mov	r1, r3
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f001 fb96 	bl	80050b4 <HAL_DMA_Start_IT>
 8003988:	4603      	mov	r3, r0
 800398a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fdb1 	bl	80034f8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003996:	e00d      	b.n	80039b4 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 80039a0:	e008      	b.n	80039b4 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80039ae:	e001      	b.n	80039b4 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039b0:	2302      	movs	r3, #2
 80039b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	50040300 	.word	0x50040300
 80039c4:	50040200 	.word	0x50040200
 80039c8:	50040100 	.word	0x50040100
 80039cc:	50040000 	.word	0x50040000
 80039d0:	08004623 	.word	0x08004623
 80039d4:	080046fb 	.word	0x080046fb
 80039d8:	08004717 	.word	0x08004717

080039dc <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_ADC_Stop_DMA+0x16>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e051      	b.n	8003a96 <HAL_ADC_Stop_DMA+0xba>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80039fa:	2103      	movs	r1, #3
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fc6f 	bl	80042e0 <ADC_ConversionStop>
 8003a02:	4603      	mov	r3, r0
 8003a04:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d13f      	bne.n	8003a8c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0201 	bic.w	r2, r2, #1
 8003a1a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a20:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d10f      	bne.n	8003a4a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 fba0 	bl	8005174 <HAL_DMA_Abort>
 8003a34:	4603      	mov	r3, r0
 8003a36:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0210 	bic.w	r2, r2, #16
 8003a58:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d105      	bne.n	8003a6c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 fd7f 	bl	8004564 <ADC_Disable>
 8003a66:	4603      	mov	r3, r0
 8003a68:	73fb      	strb	r3, [r7, #15]
 8003a6a:	e002      	b.n	8003a72 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fd79 	bl	8004564 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d109      	bne.n	8003a8c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a80:	f023 0301 	bic.w	r3, r3, #1
 8003a84:	f043 0201 	orr.w	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
	...

08003ac8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b0b6      	sub	sp, #216	@ 0xd8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x22>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e3e3      	b.n	80042b2 <HAL_ADC_ConfigChannel+0x7ea>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff fd26 	bl	8003548 <LL_ADC_REG_IsConversionOngoing>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f040 83c4 	bne.w	800428c <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b05      	cmp	r3, #5
 8003b12:	d824      	bhi.n	8003b5e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	3b02      	subs	r3, #2
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d81b      	bhi.n	8003b56 <HAL_ADC_ConfigChannel+0x8e>
 8003b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b24 <HAL_ADC_ConfigChannel+0x5c>)
 8003b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b24:	08003b35 	.word	0x08003b35
 8003b28:	08003b3d 	.word	0x08003b3d
 8003b2c:	08003b45 	.word	0x08003b45
 8003b30:	08003b4d 	.word	0x08003b4d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003b34:	230c      	movs	r3, #12
 8003b36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003b3a:	e010      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003b3c:	2312      	movs	r3, #18
 8003b3e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003b42:	e00c      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003b44:	2318      	movs	r3, #24
 8003b46:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003b4a:	e008      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003b4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003b54:	e003      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003b56:	2306      	movs	r3, #6
 8003b58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003b5c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003b6c:	f7ff fb9f 	bl	80032ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff fce7 	bl	8003548 <LL_ADC_REG_IsConversionOngoing>
 8003b7a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff fd07 	bl	8003596 <LL_ADC_INJ_IsConversionOngoing>
 8003b88:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f040 81bf 	bne.w	8003f14 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f040 81ba 	bne.w	8003f14 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ba8:	d10f      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	f7ff fba6 	bl	8003306 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff fb4d 	bl	8003262 <LL_ADC_SetSamplingTimeCommonConfig>
 8003bc8:	e00e      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	6819      	ldr	r1, [r3, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f7ff fb95 	bl	8003306 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2100      	movs	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff fb3d 	bl	8003262 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	695a      	ldr	r2, [r3, #20]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	08db      	lsrs	r3, r3, #3
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d00a      	beq.n	8003c20 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6919      	ldr	r1, [r3, #16]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c1a:	f7ff facd 	bl	80031b8 <LL_ADC_SetOffset>
 8003c1e:	e179      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff faea 	bl	8003200 <LL_ADC_GetOffsetChannel>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10a      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x184>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fadf 	bl	8003200 <LL_ADC_GetOffsetChannel>
 8003c42:	4603      	mov	r3, r0
 8003c44:	0e9b      	lsrs	r3, r3, #26
 8003c46:	f003 021f 	and.w	r2, r3, #31
 8003c4a:	e01e      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1c2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fad4 	bl	8003200 <LL_ADC_GetOffsetChannel>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003c7a:	2320      	movs	r3, #32
 8003c7c:	e004      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003c7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c82:	fab3 f383 	clz	r3, r3
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d105      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x1da>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	0e9b      	lsrs	r3, r3, #26
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	e018      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x20c>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003cb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003cba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003cbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003cc6:	2320      	movs	r3, #32
 8003cc8:	e004      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003cca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003cce:	fab3 f383 	clz	r3, r3
 8003cd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d106      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff faa3 	bl	800322c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2101      	movs	r1, #1
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff fa87 	bl	8003200 <LL_ADC_GetOffsetChannel>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x24a>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2101      	movs	r1, #1
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff fa7c 	bl	8003200 <LL_ADC_GetOffsetChannel>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	0e9b      	lsrs	r3, r3, #26
 8003d0c:	f003 021f 	and.w	r2, r3, #31
 8003d10:	e01e      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x288>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2101      	movs	r1, #1
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff fa71 	bl	8003200 <LL_ADC_GetOffsetChannel>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d28:	fa93 f3a3 	rbit	r3, r3
 8003d2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003d38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003d40:	2320      	movs	r3, #32
 8003d42:	e004      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003d44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d48:	fab3 f383 	clz	r3, r3
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d105      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x2a0>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	0e9b      	lsrs	r3, r3, #26
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	e018      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x2d2>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d74:	fa93 f3a3 	rbit	r3, r3
 8003d78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003d7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	e004      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d94:	fab3 f383 	clz	r3, r3
 8003d98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d106      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2200      	movs	r2, #0
 8003da4:	2101      	movs	r1, #1
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fa40 	bl	800322c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2102      	movs	r1, #2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fa24 	bl	8003200 <LL_ADC_GetOffsetChannel>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x310>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fa19 	bl	8003200 <LL_ADC_GetOffsetChannel>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	0e9b      	lsrs	r3, r3, #26
 8003dd2:	f003 021f 	and.w	r2, r3, #31
 8003dd6:	e01e      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x34e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2102      	movs	r1, #2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff fa0e 	bl	8003200 <LL_ADC_GetOffsetChannel>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dee:	fa93 f3a3 	rbit	r3, r3
 8003df2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003dfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003e06:	2320      	movs	r3, #32
 8003e08:	e004      	b.n	8003e14 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e0e:	fab3 f383 	clz	r3, r3
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d105      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x366>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	0e9b      	lsrs	r3, r3, #26
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	e014      	b.n	8003e58 <HAL_ADC_ConfigChannel+0x390>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e36:	fa93 f3a3 	rbit	r3, r3
 8003e3a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003e3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003e42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003e4a:	2320      	movs	r3, #32
 8003e4c:	e004      	b.n	8003e58 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003e4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e52:	fab3 f383 	clz	r3, r3
 8003e56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d106      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2200      	movs	r2, #0
 8003e62:	2102      	movs	r1, #2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff f9e1 	bl	800322c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2103      	movs	r1, #3
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff f9c5 	bl	8003200 <LL_ADC_GetOffsetChannel>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <HAL_ADC_ConfigChannel+0x3ce>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2103      	movs	r1, #3
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff f9ba 	bl	8003200 <LL_ADC_GetOffsetChannel>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	0e9b      	lsrs	r3, r3, #26
 8003e90:	f003 021f 	and.w	r2, r3, #31
 8003e94:	e017      	b.n	8003ec6 <HAL_ADC_ConfigChannel+0x3fe>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2103      	movs	r1, #3
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff f9af 	bl	8003200 <LL_ADC_GetOffsetChannel>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ea8:	fa93 f3a3 	rbit	r3, r3
 8003eac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003eae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eb0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003eb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003eb8:	2320      	movs	r3, #32
 8003eba:	e003      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003ebc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ebe:	fab3 f383 	clz	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d105      	bne.n	8003ede <HAL_ADC_ConfigChannel+0x416>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	0e9b      	lsrs	r3, r3, #26
 8003ed8:	f003 031f 	and.w	r3, r3, #31
 8003edc:	e011      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x43a>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ee6:	fa93 f3a3 	rbit	r3, r3
 8003eea:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003eec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003eee:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003ef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003ef6:	2320      	movs	r3, #32
 8003ef8:	e003      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003efa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003efc:	fab3 f383 	clz	r3, r3
 8003f00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d106      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2103      	movs	r1, #3
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff f98c 	bl	800322c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff fac7 	bl	80034ac <LL_ADC_IsEnabled>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 813f 	bne.w	80041a4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6819      	ldr	r1, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	461a      	mov	r2, r3
 8003f34:	f7ff fa12 	bl	800335c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4a8e      	ldr	r2, [pc, #568]	@ (8004178 <HAL_ADC_ConfigChannel+0x6b0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	f040 8130 	bne.w	80041a4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10b      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x4a4>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	0e9b      	lsrs	r3, r3, #26
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2b09      	cmp	r3, #9
 8003f62:	bf94      	ite	ls
 8003f64:	2301      	movls	r3, #1
 8003f66:	2300      	movhi	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	e019      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x4d8>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f74:	fa93 f3a3 	rbit	r3, r3
 8003f78:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003f7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003f84:	2320      	movs	r3, #32
 8003f86:	e003      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003f88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f8a:	fab3 f383 	clz	r3, r3
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	3301      	adds	r3, #1
 8003f92:	f003 031f 	and.w	r3, r3, #31
 8003f96:	2b09      	cmp	r3, #9
 8003f98:	bf94      	ite	ls
 8003f9a:	2301      	movls	r3, #1
 8003f9c:	2300      	movhi	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d079      	beq.n	8004098 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d107      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x4f8>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	0e9b      	lsrs	r3, r3, #26
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	069b      	lsls	r3, r3, #26
 8003fba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fbe:	e015      	b.n	8003fec <HAL_ADC_ConfigChannel+0x524>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fc8:	fa93 f3a3 	rbit	r3, r3
 8003fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003fce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fd0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003fd8:	2320      	movs	r3, #32
 8003fda:	e003      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003fdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fde:	fab3 f383 	clz	r3, r3
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	069b      	lsls	r3, r3, #26
 8003fe8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d109      	bne.n	800400c <HAL_ADC_ConfigChannel+0x544>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	0e9b      	lsrs	r3, r3, #26
 8003ffe:	3301      	adds	r3, #1
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	2101      	movs	r1, #1
 8004006:	fa01 f303 	lsl.w	r3, r1, r3
 800400a:	e017      	b.n	800403c <HAL_ADC_ConfigChannel+0x574>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004014:	fa93 f3a3 	rbit	r3, r3
 8004018:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800401a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800401c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800401e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004024:	2320      	movs	r3, #32
 8004026:	e003      	b.n	8004030 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800402a:	fab3 f383 	clz	r3, r3
 800402e:	b2db      	uxtb	r3, r3
 8004030:	3301      	adds	r3, #1
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	2101      	movs	r1, #1
 8004038:	fa01 f303 	lsl.w	r3, r1, r3
 800403c:	ea42 0103 	orr.w	r1, r2, r3
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x59a>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	0e9b      	lsrs	r3, r3, #26
 8004052:	3301      	adds	r3, #1
 8004054:	f003 021f 	and.w	r2, r3, #31
 8004058:	4613      	mov	r3, r2
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	4413      	add	r3, r2
 800405e:	051b      	lsls	r3, r3, #20
 8004060:	e018      	b.n	8004094 <HAL_ADC_ConfigChannel+0x5cc>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406a:	fa93 f3a3 	rbit	r3, r3
 800406e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004072:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800407a:	2320      	movs	r3, #32
 800407c:	e003      	b.n	8004086 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800407e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004080:	fab3 f383 	clz	r3, r3
 8004084:	b2db      	uxtb	r3, r3
 8004086:	3301      	adds	r3, #1
 8004088:	f003 021f 	and.w	r2, r3, #31
 800408c:	4613      	mov	r3, r2
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	4413      	add	r3, r2
 8004092:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004094:	430b      	orrs	r3, r1
 8004096:	e080      	b.n	800419a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d107      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x5ec>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	0e9b      	lsrs	r3, r3, #26
 80040aa:	3301      	adds	r3, #1
 80040ac:	069b      	lsls	r3, r3, #26
 80040ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040b2:	e015      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x618>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040bc:	fa93 f3a3 	rbit	r3, r3
 80040c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80040c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80040cc:	2320      	movs	r3, #32
 80040ce:	e003      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80040d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d2:	fab3 f383 	clz	r3, r3
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	3301      	adds	r3, #1
 80040da:	069b      	lsls	r3, r3, #26
 80040dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d109      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x638>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	0e9b      	lsrs	r3, r3, #26
 80040f2:	3301      	adds	r3, #1
 80040f4:	f003 031f 	and.w	r3, r3, #31
 80040f8:	2101      	movs	r1, #1
 80040fa:	fa01 f303 	lsl.w	r3, r1, r3
 80040fe:	e017      	b.n	8004130 <HAL_ADC_ConfigChannel+0x668>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	fa93 f3a3 	rbit	r3, r3
 800410c:	61bb      	str	r3, [r7, #24]
  return result;
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004118:	2320      	movs	r3, #32
 800411a:	e003      	b.n	8004124 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	fab3 f383 	clz	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	3301      	adds	r3, #1
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	2101      	movs	r1, #1
 800412c:	fa01 f303 	lsl.w	r3, r1, r3
 8004130:	ea42 0103 	orr.w	r1, r2, r3
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10d      	bne.n	800415c <HAL_ADC_ConfigChannel+0x694>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	0e9b      	lsrs	r3, r3, #26
 8004146:	3301      	adds	r3, #1
 8004148:	f003 021f 	and.w	r2, r3, #31
 800414c:	4613      	mov	r3, r2
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	4413      	add	r3, r2
 8004152:	3b1e      	subs	r3, #30
 8004154:	051b      	lsls	r3, r3, #20
 8004156:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800415a:	e01d      	b.n	8004198 <HAL_ADC_ConfigChannel+0x6d0>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	fa93 f3a3 	rbit	r3, r3
 8004168:	60fb      	str	r3, [r7, #12]
  return result;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d103      	bne.n	800417c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004174:	2320      	movs	r3, #32
 8004176:	e005      	b.n	8004184 <HAL_ADC_ConfigChannel+0x6bc>
 8004178:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	fab3 f383 	clz	r3, r3
 8004182:	b2db      	uxtb	r3, r3
 8004184:	3301      	adds	r3, #1
 8004186:	f003 021f 	and.w	r2, r3, #31
 800418a:	4613      	mov	r3, r2
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	4413      	add	r3, r2
 8004190:	3b1e      	subs	r3, #30
 8004192:	051b      	lsls	r3, r3, #20
 8004194:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004198:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800419e:	4619      	mov	r1, r3
 80041a0:	f7ff f8b1 	bl	8003306 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	4b44      	ldr	r3, [pc, #272]	@ (80042bc <HAL_ADC_ConfigChannel+0x7f4>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d07a      	beq.n	80042a6 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041b0:	4843      	ldr	r0, [pc, #268]	@ (80042c0 <HAL_ADC_ConfigChannel+0x7f8>)
 80041b2:	f7fe fff3 	bl	800319c <LL_ADC_GetCommonPathInternalCh>
 80041b6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a41      	ldr	r2, [pc, #260]	@ (80042c4 <HAL_ADC_ConfigChannel+0x7fc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d12c      	bne.n	800421e <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d126      	bne.n	800421e <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a3c      	ldr	r2, [pc, #240]	@ (80042c8 <HAL_ADC_ConfigChannel+0x800>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d004      	beq.n	80041e4 <HAL_ADC_ConfigChannel+0x71c>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a3b      	ldr	r2, [pc, #236]	@ (80042cc <HAL_ADC_ConfigChannel+0x804>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d15d      	bne.n	80042a0 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041ec:	4619      	mov	r1, r3
 80041ee:	4834      	ldr	r0, [pc, #208]	@ (80042c0 <HAL_ADC_ConfigChannel+0x7f8>)
 80041f0:	f7fe ffc1 	bl	8003176 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041f4:	4b36      	ldr	r3, [pc, #216]	@ (80042d0 <HAL_ADC_ConfigChannel+0x808>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	099b      	lsrs	r3, r3, #6
 80041fa:	4a36      	ldr	r2, [pc, #216]	@ (80042d4 <HAL_ADC_ConfigChannel+0x80c>)
 80041fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004200:	099b      	lsrs	r3, r3, #6
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	4613      	mov	r3, r2
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	4413      	add	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800420e:	e002      	b.n	8004216 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	3b01      	subs	r3, #1
 8004214:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f9      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800421c:	e040      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a2d      	ldr	r2, [pc, #180]	@ (80042d8 <HAL_ADC_ConfigChannel+0x810>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d118      	bne.n	800425a <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004228:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800422c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d112      	bne.n	800425a <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a23      	ldr	r2, [pc, #140]	@ (80042c8 <HAL_ADC_ConfigChannel+0x800>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <HAL_ADC_ConfigChannel+0x780>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a22      	ldr	r2, [pc, #136]	@ (80042cc <HAL_ADC_ConfigChannel+0x804>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d12d      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004248:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800424c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004250:	4619      	mov	r1, r3
 8004252:	481b      	ldr	r0, [pc, #108]	@ (80042c0 <HAL_ADC_ConfigChannel+0x7f8>)
 8004254:	f7fe ff8f 	bl	8003176 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004258:	e024      	b.n	80042a4 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1f      	ldr	r2, [pc, #124]	@ (80042dc <HAL_ADC_ConfigChannel+0x814>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d120      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004264:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004268:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d11a      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a14      	ldr	r2, [pc, #80]	@ (80042c8 <HAL_ADC_ConfigChannel+0x800>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d115      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800427a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800427e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004282:	4619      	mov	r1, r3
 8004284:	480e      	ldr	r0, [pc, #56]	@ (80042c0 <HAL_ADC_ConfigChannel+0x7f8>)
 8004286:	f7fe ff76 	bl	8003176 <LL_ADC_SetCommonPathInternalCh>
 800428a:	e00c      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004290:	f043 0220 	orr.w	r2, r3, #32
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800429e:	e002      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042a0:	bf00      	nop
 80042a2:	e000      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80042ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	37d8      	adds	r7, #216	@ 0xd8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	80080000 	.word	0x80080000
 80042c0:	50040300 	.word	0x50040300
 80042c4:	c7520000 	.word	0xc7520000
 80042c8:	50040000 	.word	0x50040000
 80042cc:	50040200 	.word	0x50040200
 80042d0:	20000000 	.word	0x20000000
 80042d4:	053e2d63 	.word	0x053e2d63
 80042d8:	cb840000 	.word	0xcb840000
 80042dc:	80000001 	.word	0x80000001

080042e0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff f926 	bl	8003548 <LL_ADC_REG_IsConversionOngoing>
 80042fc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff f947 	bl	8003596 <LL_ADC_INJ_IsConversionOngoing>
 8004308:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d103      	bne.n	8004318 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 8098 	beq.w	8004448 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d02a      	beq.n	800437c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	7e5b      	ldrb	r3, [r3, #25]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d126      	bne.n	800437c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	7e1b      	ldrb	r3, [r3, #24]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d122      	bne.n	800437c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004336:	2301      	movs	r3, #1
 8004338:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800433a:	e014      	b.n	8004366 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	4a45      	ldr	r2, [pc, #276]	@ (8004454 <ADC_ConversionStop+0x174>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d90d      	bls.n	8004360 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004348:	f043 0210 	orr.w	r2, r3, #16
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004354:	f043 0201 	orr.w	r2, r3, #1
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e074      	b.n	800444a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	3301      	adds	r3, #1
 8004364:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004370:	2b40      	cmp	r3, #64	@ 0x40
 8004372:	d1e3      	bne.n	800433c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2240      	movs	r2, #64	@ 0x40
 800437a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d014      	beq.n	80043ac <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff f8de 	bl	8003548 <LL_ADC_REG_IsConversionOngoing>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00c      	beq.n	80043ac <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff f89b 	bl	80034d2 <LL_ADC_IsDisableOngoing>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d104      	bne.n	80043ac <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff f8ba 	bl	8003520 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d014      	beq.n	80043dc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff f8ed 	bl	8003596 <LL_ADC_INJ_IsConversionOngoing>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00c      	beq.n	80043dc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff f883 	bl	80034d2 <LL_ADC_IsDisableOngoing>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d104      	bne.n	80043dc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff f8c9 	bl	800356e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d005      	beq.n	80043ee <ADC_ConversionStop+0x10e>
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d105      	bne.n	80043f4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80043e8:	230c      	movs	r3, #12
 80043ea:	617b      	str	r3, [r7, #20]
        break;
 80043ec:	e005      	b.n	80043fa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80043ee:	2308      	movs	r3, #8
 80043f0:	617b      	str	r3, [r7, #20]
        break;
 80043f2:	e002      	b.n	80043fa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80043f4:	2304      	movs	r3, #4
 80043f6:	617b      	str	r3, [r7, #20]
        break;
 80043f8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80043fa:	f7fe fe79 	bl	80030f0 <HAL_GetTick>
 80043fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004400:	e01b      	b.n	800443a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004402:	f7fe fe75 	bl	80030f0 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b05      	cmp	r3, #5
 800440e:	d914      	bls.n	800443a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00d      	beq.n	800443a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004422:	f043 0210 	orr.w	r2, r3, #16
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800442e:	f043 0201 	orr.w	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e007      	b.n	800444a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1dc      	bne.n	8004402 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	a33fffff 	.word	0xa33fffff

08004458 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004460:	2300      	movs	r3, #0
 8004462:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff f81f 	bl	80034ac <LL_ADC_IsEnabled>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d169      	bne.n	8004548 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	4b36      	ldr	r3, [pc, #216]	@ (8004554 <ADC_Enable+0xfc>)
 800447c:	4013      	ands	r3, r2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00d      	beq.n	800449e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004486:	f043 0210 	orr.w	r2, r3, #16
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004492:	f043 0201 	orr.w	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e055      	b.n	800454a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fe ffda 	bl	800345c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80044a8:	482b      	ldr	r0, [pc, #172]	@ (8004558 <ADC_Enable+0x100>)
 80044aa:	f7fe fe77 	bl	800319c <LL_ADC_GetCommonPathInternalCh>
 80044ae:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80044b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d013      	beq.n	80044e0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044b8:	4b28      	ldr	r3, [pc, #160]	@ (800455c <ADC_Enable+0x104>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	099b      	lsrs	r3, r3, #6
 80044be:	4a28      	ldr	r2, [pc, #160]	@ (8004560 <ADC_Enable+0x108>)
 80044c0:	fba2 2303 	umull	r2, r3, r2, r3
 80044c4:	099b      	lsrs	r3, r3, #6
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	4613      	mov	r3, r2
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80044d2:	e002      	b.n	80044da <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f9      	bne.n	80044d4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044e0:	f7fe fe06 	bl	80030f0 <HAL_GetTick>
 80044e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044e6:	e028      	b.n	800453a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fe ffdd 	bl	80034ac <LL_ADC_IsEnabled>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d104      	bne.n	8004502 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe ffad 	bl	800345c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004502:	f7fe fdf5 	bl	80030f0 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d914      	bls.n	800453a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b01      	cmp	r3, #1
 800451c:	d00d      	beq.n	800453a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004522:	f043 0210 	orr.w	r2, r3, #16
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452e:	f043 0201 	orr.w	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e007      	b.n	800454a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b01      	cmp	r3, #1
 8004546:	d1cf      	bne.n	80044e8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	8000003f 	.word	0x8000003f
 8004558:	50040300 	.word	0x50040300
 800455c:	20000000 	.word	0x20000000
 8004560:	053e2d63 	.word	0x053e2d63

08004564 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe ffae 	bl	80034d2 <LL_ADC_IsDisableOngoing>
 8004576:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe ff95 	bl	80034ac <LL_ADC_IsEnabled>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d047      	beq.n	8004618 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d144      	bne.n	8004618 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 030d 	and.w	r3, r3, #13
 8004598:	2b01      	cmp	r3, #1
 800459a:	d10c      	bne.n	80045b6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fe ff6f 	bl	8003484 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2203      	movs	r2, #3
 80045ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045ae:	f7fe fd9f 	bl	80030f0 <HAL_GetTick>
 80045b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045b4:	e029      	b.n	800460a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ba:	f043 0210 	orr.w	r2, r3, #16
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c6:	f043 0201 	orr.w	r2, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e023      	b.n	800461a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045d2:	f7fe fd8d 	bl	80030f0 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d914      	bls.n	800460a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00d      	beq.n	800460a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f2:	f043 0210 	orr.w	r2, r3, #16
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fe:	f043 0201 	orr.w	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e007      	b.n	800461a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1dc      	bne.n	80045d2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b084      	sub	sp, #16
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004634:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004638:	2b00      	cmp	r3, #0
 800463a:	d14b      	bne.n	80046d4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004640:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d021      	beq.n	800469a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe fe14 	bl	8003288 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d032      	beq.n	80046cc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d12b      	bne.n	80046cc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004678:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004684:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d11f      	bne.n	80046cc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004690:	f043 0201 	orr.w	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	659a      	str	r2, [r3, #88]	@ 0x58
 8004698:	e018      	b.n	80046cc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d111      	bne.n	80046cc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d105      	bne.n	80046cc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c4:	f043 0201 	orr.w	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f7fc fd5d 	bl	800118c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046d2:	e00e      	b.n	80046f2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d8:	f003 0310 	and.w	r3, r3, #16
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f7ff f9e6 	bl	8003ab2 <HAL_ADC_ErrorCallback>
}
 80046e6:	e004      	b.n	80046f2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	4798      	blx	r3
}
 80046f2:	bf00      	nop
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004706:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f7ff f9c8 	bl	8003a9e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004722:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004728:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004734:	f043 0204 	orr.w	r2, r3, #4
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f7ff f9b8 	bl	8003ab2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004742:	bf00      	nop
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <LL_ADC_IsEnabled>:
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <LL_ADC_IsEnabled+0x18>
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <LL_ADC_IsEnabled+0x1a>
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <LL_ADC_REG_IsConversionOngoing>:
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b04      	cmp	r3, #4
 8004782:	d101      	bne.n	8004788 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004798:	b590      	push	{r4, r7, lr}
 800479a:	b0a1      	sub	sp, #132	@ 0x84
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e093      	b.n	80048de <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80047be:	2300      	movs	r3, #0
 80047c0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80047c2:	2300      	movs	r3, #0
 80047c4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a47      	ldr	r2, [pc, #284]	@ (80048e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d102      	bne.n	80047d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80047d0:	4b46      	ldr	r3, [pc, #280]	@ (80048ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	e001      	b.n	80047da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10b      	bne.n	80047f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e4:	f043 0220 	orr.w	r2, r3, #32
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e072      	b.n	80048de <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff ffb8 	bl	8004770 <LL_ADC_REG_IsConversionOngoing>
 8004800:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff ffb2 	bl	8004770 <LL_ADC_REG_IsConversionOngoing>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d154      	bne.n	80048bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004812:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004814:	2b00      	cmp	r3, #0
 8004816:	d151      	bne.n	80048bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004818:	4b35      	ldr	r3, [pc, #212]	@ (80048f0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800481a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d02c      	beq.n	800487e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004824:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	6859      	ldr	r1, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004836:	035b      	lsls	r3, r3, #13
 8004838:	430b      	orrs	r3, r1
 800483a:	431a      	orrs	r2, r3
 800483c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800483e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004840:	4829      	ldr	r0, [pc, #164]	@ (80048e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004842:	f7ff ff82 	bl	800474a <LL_ADC_IsEnabled>
 8004846:	4604      	mov	r4, r0
 8004848:	4828      	ldr	r0, [pc, #160]	@ (80048ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800484a:	f7ff ff7e 	bl	800474a <LL_ADC_IsEnabled>
 800484e:	4603      	mov	r3, r0
 8004850:	431c      	orrs	r4, r3
 8004852:	4828      	ldr	r0, [pc, #160]	@ (80048f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004854:	f7ff ff79 	bl	800474a <LL_ADC_IsEnabled>
 8004858:	4603      	mov	r3, r0
 800485a:	4323      	orrs	r3, r4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d137      	bne.n	80048d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004860:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004868:	f023 030f 	bic.w	r3, r3, #15
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	6811      	ldr	r1, [r2, #0]
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	6892      	ldr	r2, [r2, #8]
 8004874:	430a      	orrs	r2, r1
 8004876:	431a      	orrs	r2, r3
 8004878:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800487a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800487c:	e028      	b.n	80048d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800487e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004886:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004888:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800488a:	4817      	ldr	r0, [pc, #92]	@ (80048e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800488c:	f7ff ff5d 	bl	800474a <LL_ADC_IsEnabled>
 8004890:	4604      	mov	r4, r0
 8004892:	4816      	ldr	r0, [pc, #88]	@ (80048ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004894:	f7ff ff59 	bl	800474a <LL_ADC_IsEnabled>
 8004898:	4603      	mov	r3, r0
 800489a:	431c      	orrs	r4, r3
 800489c:	4815      	ldr	r0, [pc, #84]	@ (80048f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800489e:	f7ff ff54 	bl	800474a <LL_ADC_IsEnabled>
 80048a2:	4603      	mov	r3, r0
 80048a4:	4323      	orrs	r3, r4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d112      	bne.n	80048d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80048aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80048b2:	f023 030f 	bic.w	r3, r3, #15
 80048b6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80048b8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048ba:	e009      	b.n	80048d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c0:	f043 0220 	orr.w	r2, r3, #32
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80048ce:	e000      	b.n	80048d2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80048da:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3784      	adds	r7, #132	@ 0x84
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd90      	pop	{r4, r7, pc}
 80048e6:	bf00      	nop
 80048e8:	50040000 	.word	0x50040000
 80048ec:	50040100 	.word	0x50040100
 80048f0:	50040300 	.word	0x50040300
 80048f4:	50040200 	.word	0x50040200

080048f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e0ed      	b.n	8004ae6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fd f8e6 	bl	8001ae8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800492c:	f7fe fbe0 	bl	80030f0 <HAL_GetTick>
 8004930:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004932:	e012      	b.n	800495a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004934:	f7fe fbdc 	bl	80030f0 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b0a      	cmp	r3, #10
 8004940:	d90b      	bls.n	800495a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004946:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2205      	movs	r2, #5
 8004952:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e0c5      	b.n	8004ae6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0e5      	beq.n	8004934 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0202 	bic.w	r2, r2, #2
 8004976:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004978:	f7fe fbba 	bl	80030f0 <HAL_GetTick>
 800497c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800497e:	e012      	b.n	80049a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004980:	f7fe fbb6 	bl	80030f0 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b0a      	cmp	r3, #10
 800498c:	d90b      	bls.n	80049a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2205      	movs	r2, #5
 800499e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e09f      	b.n	8004ae6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e5      	bne.n	8004980 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	7e1b      	ldrb	r3, [r3, #24]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d108      	bne.n	80049ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	e007      	b.n	80049de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	7e5b      	ldrb	r3, [r3, #25]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d108      	bne.n	80049f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	e007      	b.n	8004a08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	7e9b      	ldrb	r3, [r3, #26]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d108      	bne.n	8004a22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0220 	orr.w	r2, r2, #32
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	e007      	b.n	8004a32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0220 	bic.w	r2, r2, #32
 8004a30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	7edb      	ldrb	r3, [r3, #27]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d108      	bne.n	8004a4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0210 	bic.w	r2, r2, #16
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	e007      	b.n	8004a5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0210 	orr.w	r2, r2, #16
 8004a5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	7f1b      	ldrb	r3, [r3, #28]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d108      	bne.n	8004a76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0208 	orr.w	r2, r2, #8
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	e007      	b.n	8004a86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0208 	bic.w	r2, r2, #8
 8004a84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	7f5b      	ldrb	r3, [r3, #29]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d108      	bne.n	8004aa0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0204 	orr.w	r2, r2, #4
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	e007      	b.n	8004ab0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0204 	bic.w	r2, r2, #4
 8004aae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	ea42 0103 	orr.w	r1, r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	1e5a      	subs	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d12e      	bne.n	8004b60 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2202      	movs	r2, #2
 8004b06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0201 	bic.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b1a:	f7fe fae9 	bl	80030f0 <HAL_GetTick>
 8004b1e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004b20:	e012      	b.n	8004b48 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b22:	f7fe fae5 	bl	80030f0 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b0a      	cmp	r3, #10
 8004b2e:	d90b      	bls.n	8004b48 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b34:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2205      	movs	r2, #5
 8004b40:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e012      	b.n	8004b6e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1e5      	bne.n	8004b22 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	e006      	b.n	8004b6e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
  }
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b089      	sub	sp, #36	@ 0x24
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
 8004b82:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b94:	7ffb      	ldrb	r3, [r7, #31]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d003      	beq.n	8004ba2 <HAL_CAN_AddTxMessage+0x2c>
 8004b9a:	7ffb      	ldrb	r3, [r7, #31]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	f040 80ad 	bne.w	8004cfc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d105      	bne.n	8004bc2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8095 	beq.w	8004cec <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	0e1b      	lsrs	r3, r3, #24
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004bcc:	2201      	movs	r2, #1
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	409a      	lsls	r2, r3
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10d      	bne.n	8004bfa <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004be8:	68f9      	ldr	r1, [r7, #12]
 8004bea:	6809      	ldr	r1, [r1, #0]
 8004bec:	431a      	orrs	r2, r3
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	3318      	adds	r3, #24
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	440b      	add	r3, r1
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	e00f      	b.n	8004c1a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004c04:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004c0a:	68f9      	ldr	r1, [r7, #12]
 8004c0c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004c0e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	3318      	adds	r3, #24
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	440b      	add	r3, r1
 8004c18:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6819      	ldr	r1, [r3, #0]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	691a      	ldr	r2, [r3, #16]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	3318      	adds	r3, #24
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	440b      	add	r3, r1
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	7d1b      	ldrb	r3, [r3, #20]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d111      	bne.n	8004c5a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	3318      	adds	r3, #24
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	4413      	add	r3, r2
 8004c42:	3304      	adds	r3, #4
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	6811      	ldr	r1, [r2, #0]
 8004c4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	3318      	adds	r3, #24
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	440b      	add	r3, r1
 8004c56:	3304      	adds	r3, #4
 8004c58:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3307      	adds	r3, #7
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	061a      	lsls	r2, r3, #24
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3306      	adds	r3, #6
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	041b      	lsls	r3, r3, #16
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3305      	adds	r3, #5
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	4313      	orrs	r3, r2
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	3204      	adds	r2, #4
 8004c7a:	7812      	ldrb	r2, [r2, #0]
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	6811      	ldr	r1, [r2, #0]
 8004c82:	ea43 0200 	orr.w	r2, r3, r0
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	440b      	add	r3, r1
 8004c8c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004c90:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3303      	adds	r3, #3
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	061a      	lsls	r2, r3, #24
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3302      	adds	r3, #2
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	041b      	lsls	r3, r3, #16
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	4313      	orrs	r3, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	7812      	ldrb	r2, [r2, #0]
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	6811      	ldr	r1, [r2, #0]
 8004cb8:	ea43 0200 	orr.w	r2, r3, r0
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	440b      	add	r3, r1
 8004cc2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004cc6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	3318      	adds	r3, #24
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	4413      	add	r3, r2
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	6811      	ldr	r1, [r2, #0]
 8004cda:	f043 0201 	orr.w	r2, r3, #1
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	3318      	adds	r3, #24
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	440b      	add	r3, r1
 8004ce6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e00e      	b.n	8004d0a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e006      	b.n	8004d0a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d00:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
  }
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3724      	adds	r7, #36	@ 0x24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b085      	sub	sp, #20
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d28:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004d2a:	7afb      	ldrb	r3, [r7, #11]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d002      	beq.n	8004d36 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004d30:	7afb      	ldrb	r3, [r7, #11]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d11d      	bne.n	8004d72 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	3301      	adds	r3, #1
 8004d48:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004d72:	68fb      	ldr	r3, [r7, #12]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d90:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004da8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004db2:	4a04      	ldr	r2, [pc, #16]	@ (8004dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	60d3      	str	r3, [r2, #12]
}
 8004db8:	bf00      	nop
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	e000ed00 	.word	0xe000ed00

08004dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dcc:	4b04      	ldr	r3, [pc, #16]	@ (8004de0 <__NVIC_GetPriorityGrouping+0x18>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	0a1b      	lsrs	r3, r3, #8
 8004dd2:	f003 0307 	and.w	r3, r3, #7
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	e000ed00 	.word	0xe000ed00

08004de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	4603      	mov	r3, r0
 8004dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	db0b      	blt.n	8004e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004df6:	79fb      	ldrb	r3, [r7, #7]
 8004df8:	f003 021f 	and.w	r2, r3, #31
 8004dfc:	4907      	ldr	r1, [pc, #28]	@ (8004e1c <__NVIC_EnableIRQ+0x38>)
 8004dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	2001      	movs	r0, #1
 8004e06:	fa00 f202 	lsl.w	r2, r0, r2
 8004e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	e000e100 	.word	0xe000e100

08004e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	6039      	str	r1, [r7, #0]
 8004e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	db0a      	blt.n	8004e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	490c      	ldr	r1, [pc, #48]	@ (8004e6c <__NVIC_SetPriority+0x4c>)
 8004e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e3e:	0112      	lsls	r2, r2, #4
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	440b      	add	r3, r1
 8004e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e48:	e00a      	b.n	8004e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	4908      	ldr	r1, [pc, #32]	@ (8004e70 <__NVIC_SetPriority+0x50>)
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	3b04      	subs	r3, #4
 8004e58:	0112      	lsls	r2, r2, #4
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	761a      	strb	r2, [r3, #24]
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	e000e100 	.word	0xe000e100
 8004e70:	e000ed00 	.word	0xe000ed00

08004e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b089      	sub	sp, #36	@ 0x24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f1c3 0307 	rsb	r3, r3, #7
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	bf28      	it	cs
 8004e92:	2304      	movcs	r3, #4
 8004e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	2b06      	cmp	r3, #6
 8004e9c:	d902      	bls.n	8004ea4 <NVIC_EncodePriority+0x30>
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	3b03      	subs	r3, #3
 8004ea2:	e000      	b.n	8004ea6 <NVIC_EncodePriority+0x32>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	43da      	mvns	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	401a      	ands	r2, r3
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec6:	43d9      	mvns	r1, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ecc:	4313      	orrs	r3, r2
         );
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3724      	adds	r7, #36	@ 0x24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff ff4c 	bl	8004d80 <__NVIC_SetPriorityGrouping>
}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f02:	f7ff ff61 	bl	8004dc8 <__NVIC_GetPriorityGrouping>
 8004f06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	6978      	ldr	r0, [r7, #20]
 8004f0e:	f7ff ffb1 	bl	8004e74 <NVIC_EncodePriority>
 8004f12:	4602      	mov	r2, r0
 8004f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f18:	4611      	mov	r1, r2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff ff80 	bl	8004e20 <__NVIC_SetPriority>
}
 8004f20:	bf00      	nop
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff ff54 	bl	8004de4 <__NVIC_EnableIRQ>
}
 8004f3c:	bf00      	nop
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e098      	b.n	8005088 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	4b4d      	ldr	r3, [pc, #308]	@ (8005094 <HAL_DMA_Init+0x150>)
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d80f      	bhi.n	8004f82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	4b4b      	ldr	r3, [pc, #300]	@ (8005098 <HAL_DMA_Init+0x154>)
 8004f6a:	4413      	add	r3, r2
 8004f6c:	4a4b      	ldr	r2, [pc, #300]	@ (800509c <HAL_DMA_Init+0x158>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	091b      	lsrs	r3, r3, #4
 8004f74:	009a      	lsls	r2, r3, #2
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a48      	ldr	r2, [pc, #288]	@ (80050a0 <HAL_DMA_Init+0x15c>)
 8004f7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f80:	e00e      	b.n	8004fa0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	4b46      	ldr	r3, [pc, #280]	@ (80050a4 <HAL_DMA_Init+0x160>)
 8004f8a:	4413      	add	r3, r2
 8004f8c:	4a43      	ldr	r2, [pc, #268]	@ (800509c <HAL_DMA_Init+0x158>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	091b      	lsrs	r3, r3, #4
 8004f94:	009a      	lsls	r2, r3, #2
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a42      	ldr	r2, [pc, #264]	@ (80050a8 <HAL_DMA_Init+0x164>)
 8004f9e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ffa:	d039      	beq.n	8005070 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005000:	4a27      	ldr	r2, [pc, #156]	@ (80050a0 <HAL_DMA_Init+0x15c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d11a      	bne.n	800503c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005006:	4b29      	ldr	r3, [pc, #164]	@ (80050ac <HAL_DMA_Init+0x168>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500e:	f003 031c 	and.w	r3, r3, #28
 8005012:	210f      	movs	r1, #15
 8005014:	fa01 f303 	lsl.w	r3, r1, r3
 8005018:	43db      	mvns	r3, r3
 800501a:	4924      	ldr	r1, [pc, #144]	@ (80050ac <HAL_DMA_Init+0x168>)
 800501c:	4013      	ands	r3, r2
 800501e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005020:	4b22      	ldr	r3, [pc, #136]	@ (80050ac <HAL_DMA_Init+0x168>)
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6859      	ldr	r1, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502c:	f003 031c 	and.w	r3, r3, #28
 8005030:	fa01 f303 	lsl.w	r3, r1, r3
 8005034:	491d      	ldr	r1, [pc, #116]	@ (80050ac <HAL_DMA_Init+0x168>)
 8005036:	4313      	orrs	r3, r2
 8005038:	600b      	str	r3, [r1, #0]
 800503a:	e019      	b.n	8005070 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800503c:	4b1c      	ldr	r3, [pc, #112]	@ (80050b0 <HAL_DMA_Init+0x16c>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005044:	f003 031c 	and.w	r3, r3, #28
 8005048:	210f      	movs	r1, #15
 800504a:	fa01 f303 	lsl.w	r3, r1, r3
 800504e:	43db      	mvns	r3, r3
 8005050:	4917      	ldr	r1, [pc, #92]	@ (80050b0 <HAL_DMA_Init+0x16c>)
 8005052:	4013      	ands	r3, r2
 8005054:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005056:	4b16      	ldr	r3, [pc, #88]	@ (80050b0 <HAL_DMA_Init+0x16c>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6859      	ldr	r1, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005062:	f003 031c 	and.w	r3, r3, #28
 8005066:	fa01 f303 	lsl.w	r3, r1, r3
 800506a:	4911      	ldr	r1, [pc, #68]	@ (80050b0 <HAL_DMA_Init+0x16c>)
 800506c:	4313      	orrs	r3, r2
 800506e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	40020407 	.word	0x40020407
 8005098:	bffdfff8 	.word	0xbffdfff8
 800509c:	cccccccd 	.word	0xcccccccd
 80050a0:	40020000 	.word	0x40020000
 80050a4:	bffdfbf8 	.word	0xbffdfbf8
 80050a8:	40020400 	.word	0x40020400
 80050ac:	400200a8 	.word	0x400200a8
 80050b0:	400204a8 	.word	0x400204a8

080050b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d101      	bne.n	80050d4 <HAL_DMA_Start_IT+0x20>
 80050d0:	2302      	movs	r3, #2
 80050d2:	e04b      	b.n	800516c <HAL_DMA_Start_IT+0xb8>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d13a      	bne.n	800515e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0201 	bic.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f95f 	bl	80053d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005116:	2b00      	cmp	r3, #0
 8005118:	d008      	beq.n	800512c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 020e 	orr.w	r2, r2, #14
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	e00f      	b.n	800514c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0204 	bic.w	r2, r2, #4
 800513a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 020a 	orr.w	r2, r2, #10
 800514a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0201 	orr.w	r2, r2, #1
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	e005      	b.n	800516a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005166:	2302      	movs	r3, #2
 8005168:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800516a:	7dfb      	ldrb	r3, [r7, #23]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d008      	beq.n	800519e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2204      	movs	r2, #4
 8005190:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e022      	b.n	80051e4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 020e 	bic.w	r2, r2, #14
 80051ac:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0201 	bic.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c2:	f003 021c 	and.w	r2, r3, #28
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ca:	2101      	movs	r1, #1
 80051cc:	fa01 f202 	lsl.w	r2, r1, r2
 80051d0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d005      	beq.n	8005214 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2204      	movs	r2, #4
 800520c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	73fb      	strb	r3, [r7, #15]
 8005212:	e029      	b.n	8005268 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 020e 	bic.w	r2, r2, #14
 8005222:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0201 	bic.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005238:	f003 021c 	and.w	r2, r3, #28
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005240:	2101      	movs	r1, #1
 8005242:	fa01 f202 	lsl.w	r2, r1, r2
 8005246:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	4798      	blx	r3
    }
  }
  return status;
 8005268:	7bfb      	ldrb	r3, [r7, #15]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528e:	f003 031c 	and.w	r3, r3, #28
 8005292:	2204      	movs	r2, #4
 8005294:	409a      	lsls	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4013      	ands	r3, r2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d026      	beq.n	80052ec <HAL_DMA_IRQHandler+0x7a>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d021      	beq.n	80052ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d107      	bne.n	80052c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0204 	bic.w	r2, r2, #4
 80052c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ca:	f003 021c 	and.w	r2, r3, #28
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d2:	2104      	movs	r1, #4
 80052d4:	fa01 f202 	lsl.w	r2, r1, r2
 80052d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d071      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80052ea:	e06c      	b.n	80053c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f0:	f003 031c 	and.w	r3, r3, #28
 80052f4:	2202      	movs	r2, #2
 80052f6:	409a      	lsls	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d02e      	beq.n	800535e <HAL_DMA_IRQHandler+0xec>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d029      	beq.n	800535e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10b      	bne.n	8005330 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 020a 	bic.w	r2, r2, #10
 8005326:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005334:	f003 021c 	and.w	r2, r3, #28
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533c:	2102      	movs	r1, #2
 800533e:	fa01 f202 	lsl.w	r2, r1, r2
 8005342:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005350:	2b00      	cmp	r3, #0
 8005352:	d038      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800535c:	e033      	b.n	80053c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005362:	f003 031c 	and.w	r3, r3, #28
 8005366:	2208      	movs	r2, #8
 8005368:	409a      	lsls	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4013      	ands	r3, r2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d02a      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x156>
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d025      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 020e 	bic.w	r2, r2, #14
 800538a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005390:	f003 021c 	and.w	r2, r3, #28
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005398:	2101      	movs	r1, #1
 800539a:	fa01 f202 	lsl.w	r2, r1, r2
 800539e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d004      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
}
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e2:	f003 021c 	and.w	r2, r3, #28
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ea:	2101      	movs	r1, #1
 80053ec:	fa01 f202 	lsl.w	r2, r1, r2
 80053f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b10      	cmp	r3, #16
 8005400:	d108      	bne.n	8005414 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005412:	e007      	b.n	8005424 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	60da      	str	r2, [r3, #12]
}
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800543e:	e166      	b.n	800570e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	2101      	movs	r1, #1
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	fa01 f303 	lsl.w	r3, r1, r3
 800544c:	4013      	ands	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 8158 	beq.w	8005708 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	2b01      	cmp	r3, #1
 8005462:	d005      	beq.n	8005470 <HAL_GPIO_Init+0x40>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d130      	bne.n	80054d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	2203      	movs	r2, #3
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	43db      	mvns	r3, r3
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4013      	ands	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054a6:	2201      	movs	r2, #1
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43db      	mvns	r3, r3
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4013      	ands	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	091b      	lsrs	r3, r3, #4
 80054bc:	f003 0201 	and.w	r2, r3, #1
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d017      	beq.n	800550e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	2203      	movs	r2, #3
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	43db      	mvns	r3, r3
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4013      	ands	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d123      	bne.n	8005562 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	08da      	lsrs	r2, r3, #3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3208      	adds	r2, #8
 8005522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005526:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	220f      	movs	r2, #15
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	43db      	mvns	r3, r3
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4013      	ands	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	08da      	lsrs	r2, r3, #3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3208      	adds	r2, #8
 800555c:	6939      	ldr	r1, [r7, #16]
 800555e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	2203      	movs	r2, #3
 800556e:	fa02 f303 	lsl.w	r3, r2, r3
 8005572:	43db      	mvns	r3, r3
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4013      	ands	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f003 0203 	and.w	r2, r3, #3
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 80b2 	beq.w	8005708 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055a4:	4b61      	ldr	r3, [pc, #388]	@ (800572c <HAL_GPIO_Init+0x2fc>)
 80055a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a8:	4a60      	ldr	r2, [pc, #384]	@ (800572c <HAL_GPIO_Init+0x2fc>)
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80055b0:	4b5e      	ldr	r3, [pc, #376]	@ (800572c <HAL_GPIO_Init+0x2fc>)
 80055b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	60bb      	str	r3, [r7, #8]
 80055ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80055bc:	4a5c      	ldr	r2, [pc, #368]	@ (8005730 <HAL_GPIO_Init+0x300>)
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	089b      	lsrs	r3, r3, #2
 80055c2:	3302      	adds	r3, #2
 80055c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f003 0303 	and.w	r3, r3, #3
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	220f      	movs	r2, #15
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	43db      	mvns	r3, r3
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4013      	ands	r3, r2
 80055de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80055e6:	d02b      	beq.n	8005640 <HAL_GPIO_Init+0x210>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a52      	ldr	r2, [pc, #328]	@ (8005734 <HAL_GPIO_Init+0x304>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d025      	beq.n	800563c <HAL_GPIO_Init+0x20c>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a51      	ldr	r2, [pc, #324]	@ (8005738 <HAL_GPIO_Init+0x308>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d01f      	beq.n	8005638 <HAL_GPIO_Init+0x208>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a50      	ldr	r2, [pc, #320]	@ (800573c <HAL_GPIO_Init+0x30c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d019      	beq.n	8005634 <HAL_GPIO_Init+0x204>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a4f      	ldr	r2, [pc, #316]	@ (8005740 <HAL_GPIO_Init+0x310>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d013      	beq.n	8005630 <HAL_GPIO_Init+0x200>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a4e      	ldr	r2, [pc, #312]	@ (8005744 <HAL_GPIO_Init+0x314>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00d      	beq.n	800562c <HAL_GPIO_Init+0x1fc>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a4d      	ldr	r2, [pc, #308]	@ (8005748 <HAL_GPIO_Init+0x318>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d007      	beq.n	8005628 <HAL_GPIO_Init+0x1f8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a4c      	ldr	r2, [pc, #304]	@ (800574c <HAL_GPIO_Init+0x31c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d101      	bne.n	8005624 <HAL_GPIO_Init+0x1f4>
 8005620:	2307      	movs	r3, #7
 8005622:	e00e      	b.n	8005642 <HAL_GPIO_Init+0x212>
 8005624:	2308      	movs	r3, #8
 8005626:	e00c      	b.n	8005642 <HAL_GPIO_Init+0x212>
 8005628:	2306      	movs	r3, #6
 800562a:	e00a      	b.n	8005642 <HAL_GPIO_Init+0x212>
 800562c:	2305      	movs	r3, #5
 800562e:	e008      	b.n	8005642 <HAL_GPIO_Init+0x212>
 8005630:	2304      	movs	r3, #4
 8005632:	e006      	b.n	8005642 <HAL_GPIO_Init+0x212>
 8005634:	2303      	movs	r3, #3
 8005636:	e004      	b.n	8005642 <HAL_GPIO_Init+0x212>
 8005638:	2302      	movs	r3, #2
 800563a:	e002      	b.n	8005642 <HAL_GPIO_Init+0x212>
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <HAL_GPIO_Init+0x212>
 8005640:	2300      	movs	r3, #0
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	f002 0203 	and.w	r2, r2, #3
 8005648:	0092      	lsls	r2, r2, #2
 800564a:	4093      	lsls	r3, r2
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	4313      	orrs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005652:	4937      	ldr	r1, [pc, #220]	@ (8005730 <HAL_GPIO_Init+0x300>)
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	089b      	lsrs	r3, r3, #2
 8005658:	3302      	adds	r3, #2
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005660:	4b3b      	ldr	r3, [pc, #236]	@ (8005750 <HAL_GPIO_Init+0x320>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	43db      	mvns	r3, r3
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	4013      	ands	r3, r2
 800566e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4313      	orrs	r3, r2
 8005682:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005684:	4a32      	ldr	r2, [pc, #200]	@ (8005750 <HAL_GPIO_Init+0x320>)
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800568a:	4b31      	ldr	r3, [pc, #196]	@ (8005750 <HAL_GPIO_Init+0x320>)
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	43db      	mvns	r3, r3
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4013      	ands	r3, r2
 8005698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80056ae:	4a28      	ldr	r2, [pc, #160]	@ (8005750 <HAL_GPIO_Init+0x320>)
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80056b4:	4b26      	ldr	r3, [pc, #152]	@ (8005750 <HAL_GPIO_Init+0x320>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	43db      	mvns	r3, r3
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4013      	ands	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005750 <HAL_GPIO_Init+0x320>)
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80056de:	4b1c      	ldr	r3, [pc, #112]	@ (8005750 <HAL_GPIO_Init+0x320>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	43db      	mvns	r3, r3
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4013      	ands	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005702:	4a13      	ldr	r2, [pc, #76]	@ (8005750 <HAL_GPIO_Init+0x320>)
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	3301      	adds	r3, #1
 800570c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	fa22 f303 	lsr.w	r3, r2, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	f47f ae91 	bne.w	8005440 <HAL_GPIO_Init+0x10>
  }
}
 800571e:	bf00      	nop
 8005720:	bf00      	nop
 8005722:	371c      	adds	r7, #28
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	40021000 	.word	0x40021000
 8005730:	40010000 	.word	0x40010000
 8005734:	48000400 	.word	0x48000400
 8005738:	48000800 	.word	0x48000800
 800573c:	48000c00 	.word	0x48000c00
 8005740:	48001000 	.word	0x48001000
 8005744:	48001400 	.word	0x48001400
 8005748:	48001800 	.word	0x48001800
 800574c:	48001c00 	.word	0x48001c00
 8005750:	40010400 	.word	0x40010400

08005754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	807b      	strh	r3, [r7, #2]
 8005760:	4613      	mov	r3, r2
 8005762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005764:	787b      	ldrb	r3, [r7, #1]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800576a:	887a      	ldrh	r2, [r7, #2]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005770:	e002      	b.n	8005778 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005772:	887a      	ldrh	r2, [r7, #2]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005796:	887a      	ldrh	r2, [r7, #2]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4013      	ands	r3, r2
 800579c:	041a      	lsls	r2, r3, #16
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	43d9      	mvns	r1, r3
 80057a2:	887b      	ldrh	r3, [r7, #2]
 80057a4:	400b      	ands	r3, r1
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	619a      	str	r2, [r3, #24]
}
 80057ac:	bf00      	nop
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80057c2:	4b08      	ldr	r3, [pc, #32]	@ (80057e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057c4:	695a      	ldr	r2, [r3, #20]
 80057c6:	88fb      	ldrh	r3, [r7, #6]
 80057c8:	4013      	ands	r3, r2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d006      	beq.n	80057dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057ce:	4a05      	ldr	r2, [pc, #20]	@ (80057e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057d0:	88fb      	ldrh	r3, [r7, #6]
 80057d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057d4:	88fb      	ldrh	r3, [r7, #6]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fb fce8 	bl	80011ac <HAL_GPIO_EXTI_Callback>
  }
}
 80057dc:	bf00      	nop
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40010400 	.word	0x40010400

080057e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e08d      	b.n	8005916 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7fc fa20 	bl	8001c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2224      	movs	r2, #36	@ 0x24
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0201 	bic.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005838:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005848:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d107      	bne.n	8005862 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800585e:	609a      	str	r2, [r3, #8]
 8005860:	e006      	b.n	8005870 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800586e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	2b02      	cmp	r3, #2
 8005876:	d108      	bne.n	800588a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005886:	605a      	str	r2, [r3, #4]
 8005888:	e007      	b.n	800589a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005898:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6812      	ldr	r2, [r2, #0]
 80058a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80058a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691a      	ldr	r2, [r3, #16]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	69d9      	ldr	r1, [r3, #28]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1a      	ldr	r2, [r3, #32]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0201 	orr.w	r2, r2, #1
 80058f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2220      	movs	r2, #32
 8005902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af02      	add	r7, sp, #8
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	4608      	mov	r0, r1
 800592a:	4611      	mov	r1, r2
 800592c:	461a      	mov	r2, r3
 800592e:	4603      	mov	r3, r0
 8005930:	817b      	strh	r3, [r7, #10]
 8005932:	460b      	mov	r3, r1
 8005934:	813b      	strh	r3, [r7, #8]
 8005936:	4613      	mov	r3, r2
 8005938:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b20      	cmp	r3, #32
 8005944:	f040 80f9 	bne.w	8005b3a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <HAL_I2C_Mem_Write+0x34>
 800594e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005950:	2b00      	cmp	r3, #0
 8005952:	d105      	bne.n	8005960 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800595a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e0ed      	b.n	8005b3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_I2C_Mem_Write+0x4e>
 800596a:	2302      	movs	r3, #2
 800596c:	e0e6      	b.n	8005b3c <HAL_I2C_Mem_Write+0x21c>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005976:	f7fd fbbb 	bl	80030f0 <HAL_GetTick>
 800597a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	2319      	movs	r3, #25
 8005982:	2201      	movs	r2, #1
 8005984:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 fac3 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e0d1      	b.n	8005b3c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2221      	movs	r2, #33	@ 0x21
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2240      	movs	r2, #64	@ 0x40
 80059a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a3a      	ldr	r2, [r7, #32]
 80059b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80059b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059c0:	88f8      	ldrh	r0, [r7, #6]
 80059c2:	893a      	ldrh	r2, [r7, #8]
 80059c4:	8979      	ldrh	r1, [r7, #10]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	9301      	str	r3, [sp, #4]
 80059ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	4603      	mov	r3, r0
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 f9d3 	bl	8005d7c <I2C_RequestMemoryWrite>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d005      	beq.n	80059e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e0a9      	b.n	8005b3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2bff      	cmp	r3, #255	@ 0xff
 80059f0:	d90e      	bls.n	8005a10 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	22ff      	movs	r2, #255	@ 0xff
 80059f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	8979      	ldrh	r1, [r7, #10]
 8005a00:	2300      	movs	r3, #0
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 fc47 	bl	800629c <I2C_TransferConfig>
 8005a0e:	e00f      	b.n	8005a30 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	8979      	ldrh	r1, [r7, #10]
 8005a22:	2300      	movs	r3, #0
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 fc36 	bl	800629c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 fac6 	bl	8005fc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e07b      	b.n	8005b3c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a48:	781a      	ldrb	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d034      	beq.n	8005ae8 <HAL_I2C_Mem_Write+0x1c8>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d130      	bne.n	8005ae8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2180      	movs	r1, #128	@ 0x80
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 fa3f 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e04d      	b.n	8005b3c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2bff      	cmp	r3, #255	@ 0xff
 8005aa8:	d90e      	bls.n	8005ac8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	22ff      	movs	r2, #255	@ 0xff
 8005aae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	8979      	ldrh	r1, [r7, #10]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 fbeb 	bl	800629c <I2C_TransferConfig>
 8005ac6:	e00f      	b.n	8005ae8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	8979      	ldrh	r1, [r7, #10]
 8005ada:	2300      	movs	r3, #0
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 fbda 	bl	800629c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d19e      	bne.n	8005a30 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 faac 	bl	8006054 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e01a      	b.n	8005b3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6859      	ldr	r1, [r3, #4]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	4b0a      	ldr	r3, [pc, #40]	@ (8005b44 <HAL_I2C_Mem_Write+0x224>)
 8005b1a:	400b      	ands	r3, r1
 8005b1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	e000      	b.n	8005b3c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005b3a:	2302      	movs	r3, #2
  }
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	fe00e800 	.word	0xfe00e800

08005b48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b088      	sub	sp, #32
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	4608      	mov	r0, r1
 8005b52:	4611      	mov	r1, r2
 8005b54:	461a      	mov	r2, r3
 8005b56:	4603      	mov	r3, r0
 8005b58:	817b      	strh	r3, [r7, #10]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	813b      	strh	r3, [r7, #8]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	f040 80fd 	bne.w	8005d6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_I2C_Mem_Read+0x34>
 8005b76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d105      	bne.n	8005b88 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b82:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e0f1      	b.n	8005d6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_I2C_Mem_Read+0x4e>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e0ea      	b.n	8005d6c <HAL_I2C_Mem_Read+0x224>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b9e:	f7fd faa7 	bl	80030f0 <HAL_GetTick>
 8005ba2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	2319      	movs	r3, #25
 8005baa:	2201      	movs	r2, #1
 8005bac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 f9af 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e0d5      	b.n	8005d6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2222      	movs	r2, #34	@ 0x22
 8005bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2240      	movs	r2, #64	@ 0x40
 8005bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a3a      	ldr	r2, [r7, #32]
 8005bda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005be0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005be8:	88f8      	ldrh	r0, [r7, #6]
 8005bea:	893a      	ldrh	r2, [r7, #8]
 8005bec:	8979      	ldrh	r1, [r7, #10]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	9301      	str	r3, [sp, #4]
 8005bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f913 	bl	8005e24 <I2C_RequestMemoryRead>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0ad      	b.n	8005d6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2bff      	cmp	r3, #255	@ 0xff
 8005c18:	d90e      	bls.n	8005c38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	8979      	ldrh	r1, [r7, #10]
 8005c28:	4b52      	ldr	r3, [pc, #328]	@ (8005d74 <HAL_I2C_Mem_Read+0x22c>)
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 fb33 	bl	800629c <I2C_TransferConfig>
 8005c36:	e00f      	b.n	8005c58 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	8979      	ldrh	r1, [r7, #10]
 8005c4a:	4b4a      	ldr	r3, [pc, #296]	@ (8005d74 <HAL_I2C_Mem_Read+0x22c>)
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 fb22 	bl	800629c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2104      	movs	r1, #4
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 f956 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e07c      	b.n	8005d6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d034      	beq.n	8005d18 <HAL_I2C_Mem_Read+0x1d0>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d130      	bne.n	8005d18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2180      	movs	r1, #128	@ 0x80
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 f927 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e04d      	b.n	8005d6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	2bff      	cmp	r3, #255	@ 0xff
 8005cd8:	d90e      	bls.n	8005cf8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	8979      	ldrh	r1, [r7, #10]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 fad3 	bl	800629c <I2C_TransferConfig>
 8005cf6:	e00f      	b.n	8005d18 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	8979      	ldrh	r1, [r7, #10]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 fac2 	bl	800629c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d19a      	bne.n	8005c58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 f994 	bl	8006054 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e01a      	b.n	8005d6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6859      	ldr	r1, [r3, #4]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	4b0b      	ldr	r3, [pc, #44]	@ (8005d78 <HAL_I2C_Mem_Read+0x230>)
 8005d4a:	400b      	ands	r3, r1
 8005d4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	e000      	b.n	8005d6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005d6a:	2302      	movs	r3, #2
  }
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	80002400 	.word	0x80002400
 8005d78:	fe00e800 	.word	0xfe00e800

08005d7c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	4608      	mov	r0, r1
 8005d86:	4611      	mov	r1, r2
 8005d88:	461a      	mov	r2, r3
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	817b      	strh	r3, [r7, #10]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	813b      	strh	r3, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005d96:	88fb      	ldrh	r3, [r7, #6]
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	8979      	ldrh	r1, [r7, #10]
 8005d9c:	4b20      	ldr	r3, [pc, #128]	@ (8005e20 <I2C_RequestMemoryWrite+0xa4>)
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 fa79 	bl	800629c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	69b9      	ldr	r1, [r7, #24]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f909 	bl	8005fc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e02c      	b.n	8005e18 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d105      	bne.n	8005dd0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dc4:	893b      	ldrh	r3, [r7, #8]
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	629a      	str	r2, [r3, #40]	@ 0x28
 8005dce:	e015      	b.n	8005dfc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005dd0:	893b      	ldrh	r3, [r7, #8]
 8005dd2:	0a1b      	lsrs	r3, r3, #8
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dde:	69fa      	ldr	r2, [r7, #28]
 8005de0:	69b9      	ldr	r1, [r7, #24]
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 f8ef 	bl	8005fc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e012      	b.n	8005e18 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005df2:	893b      	ldrh	r3, [r7, #8]
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	2200      	movs	r2, #0
 8005e04:	2180      	movs	r1, #128	@ 0x80
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 f884 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	80002000 	.word	0x80002000

08005e24 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	4611      	mov	r1, r2
 8005e30:	461a      	mov	r2, r3
 8005e32:	4603      	mov	r3, r0
 8005e34:	817b      	strh	r3, [r7, #10]
 8005e36:	460b      	mov	r3, r1
 8005e38:	813b      	strh	r3, [r7, #8]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005e3e:	88fb      	ldrh	r3, [r7, #6]
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	8979      	ldrh	r1, [r7, #10]
 8005e44:	4b20      	ldr	r3, [pc, #128]	@ (8005ec8 <I2C_RequestMemoryRead+0xa4>)
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	2300      	movs	r3, #0
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 fa26 	bl	800629c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	69b9      	ldr	r1, [r7, #24]
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 f8b6 	bl	8005fc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e02c      	b.n	8005ebe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e64:	88fb      	ldrh	r3, [r7, #6]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d105      	bne.n	8005e76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e6a:	893b      	ldrh	r3, [r7, #8]
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e74:	e015      	b.n	8005ea2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e76:	893b      	ldrh	r3, [r7, #8]
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	69b9      	ldr	r1, [r7, #24]
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f89c 	bl	8005fc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e012      	b.n	8005ebe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e98:	893b      	ldrh	r3, [r7, #8]
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	2140      	movs	r1, #64	@ 0x40
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f831 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	80002000 	.word	0x80002000

08005ecc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d103      	bne.n	8005eea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d007      	beq.n	8005f08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	619a      	str	r2, [r3, #24]
  }
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	4613      	mov	r3, r2
 8005f22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f24:	e03b      	b.n	8005f9e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 f8d6 	bl	80060dc <I2C_IsErrorOccurred>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e041      	b.n	8005fbe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f40:	d02d      	beq.n	8005f9e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f42:	f7fd f8d5 	bl	80030f0 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d302      	bcc.n	8005f58 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d122      	bne.n	8005f9e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	4013      	ands	r3, r2
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	bf0c      	ite	eq
 8005f68:	2301      	moveq	r3, #1
 8005f6a:	2300      	movne	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	461a      	mov	r2, r3
 8005f70:	79fb      	ldrb	r3, [r7, #7]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d113      	bne.n	8005f9e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7a:	f043 0220 	orr.w	r2, r3, #32
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e00f      	b.n	8005fbe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	699a      	ldr	r2, [r3, #24]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	bf0c      	ite	eq
 8005fae:	2301      	moveq	r3, #1
 8005fb0:	2300      	movne	r3, #0
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d0b4      	beq.n	8005f26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005fd2:	e033      	b.n	800603c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	68b9      	ldr	r1, [r7, #8]
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f87f 	bl	80060dc <I2C_IsErrorOccurred>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e031      	b.n	800604c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fee:	d025      	beq.n	800603c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff0:	f7fd f87e 	bl	80030f0 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d302      	bcc.n	8006006 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d11a      	bne.n	800603c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b02      	cmp	r3, #2
 8006012:	d013      	beq.n	800603c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006018:	f043 0220 	orr.w	r2, r3, #32
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e007      	b.n	800604c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b02      	cmp	r3, #2
 8006048:	d1c4      	bne.n	8005fd4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006060:	e02f      	b.n	80060c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 f838 	bl	80060dc <I2C_IsErrorOccurred>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e02d      	b.n	80060d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006076:	f7fd f83b 	bl	80030f0 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	429a      	cmp	r2, r3
 8006084:	d302      	bcc.n	800608c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d11a      	bne.n	80060c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b20      	cmp	r3, #32
 8006098:	d013      	beq.n	80060c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609e:	f043 0220 	orr.w	r2, r3, #32
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e007      	b.n	80060d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	f003 0320 	and.w	r3, r3, #32
 80060cc:	2b20      	cmp	r3, #32
 80060ce:	d1c8      	bne.n	8006062 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08a      	sub	sp, #40	@ 0x28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	f003 0310 	and.w	r3, r3, #16
 8006104:	2b00      	cmp	r3, #0
 8006106:	d068      	beq.n	80061da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2210      	movs	r2, #16
 800610e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006110:	e049      	b.n	80061a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006118:	d045      	beq.n	80061a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800611a:	f7fc ffe9 	bl	80030f0 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	429a      	cmp	r2, r3
 8006128:	d302      	bcc.n	8006130 <I2C_IsErrorOccurred+0x54>
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d13a      	bne.n	80061a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800613a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006142:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800614e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006152:	d121      	bne.n	8006198 <I2C_IsErrorOccurred+0xbc>
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800615a:	d01d      	beq.n	8006198 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800615c:	7cfb      	ldrb	r3, [r7, #19]
 800615e:	2b20      	cmp	r3, #32
 8006160:	d01a      	beq.n	8006198 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006170:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006172:	f7fc ffbd 	bl	80030f0 <HAL_GetTick>
 8006176:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006178:	e00e      	b.n	8006198 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800617a:	f7fc ffb9 	bl	80030f0 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b19      	cmp	r3, #25
 8006186:	d907      	bls.n	8006198 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	f043 0320 	orr.w	r3, r3, #32
 800618e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006196:	e006      	b.n	80061a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	d1e9      	bne.n	800617a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d003      	beq.n	80061bc <I2C_IsErrorOccurred+0xe0>
 80061b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d0aa      	beq.n	8006112 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80061bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d103      	bne.n	80061cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2220      	movs	r2, #32
 80061ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	f043 0304 	orr.w	r3, r3, #4
 80061d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00b      	beq.n	8006204 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00b      	beq.n	8006226 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	f043 0308 	orr.w	r3, r3, #8
 8006214:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800621e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00b      	beq.n	8006248 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	f043 0302 	orr.w	r3, r3, #2
 8006236:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006240:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800624c:	2b00      	cmp	r3, #0
 800624e:	d01c      	beq.n	800628a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f7ff fe3b 	bl	8005ecc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6859      	ldr	r1, [r3, #4]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	4b0d      	ldr	r3, [pc, #52]	@ (8006298 <I2C_IsErrorOccurred+0x1bc>)
 8006262:	400b      	ands	r3, r1
 8006264:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	431a      	orrs	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800628a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800628e:	4618      	mov	r0, r3
 8006290:	3728      	adds	r7, #40	@ 0x28
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	fe00e800 	.word	0xfe00e800

0800629c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	607b      	str	r3, [r7, #4]
 80062a6:	460b      	mov	r3, r1
 80062a8:	817b      	strh	r3, [r7, #10]
 80062aa:	4613      	mov	r3, r2
 80062ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062ae:	897b      	ldrh	r3, [r7, #10]
 80062b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80062b4:	7a7b      	ldrb	r3, [r7, #9]
 80062b6:	041b      	lsls	r3, r3, #16
 80062b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	0d5b      	lsrs	r3, r3, #21
 80062d6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80062da:	4b08      	ldr	r3, [pc, #32]	@ (80062fc <I2C_TransferConfig+0x60>)
 80062dc:	430b      	orrs	r3, r1
 80062de:	43db      	mvns	r3, r3
 80062e0:	ea02 0103 	and.w	r1, r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	03ff63ff 	.word	0x03ff63ff

08006300 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b20      	cmp	r3, #32
 8006314:	d138      	bne.n	8006388 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006320:	2302      	movs	r3, #2
 8006322:	e032      	b.n	800638a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2224      	movs	r2, #36	@ 0x24
 8006330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0201 	bic.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006352:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6819      	ldr	r1, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0201 	orr.w	r2, r2, #1
 8006372:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	e000      	b.n	800638a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006388:	2302      	movs	r3, #2
  }
}
 800638a:	4618      	mov	r0, r3
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006396:	b480      	push	{r7}
 8006398:	b085      	sub	sp, #20
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d139      	bne.n	8006420 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d101      	bne.n	80063ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80063b6:	2302      	movs	r3, #2
 80063b8:	e033      	b.n	8006422 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2224      	movs	r2, #36	@ 0x24
 80063c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0201 	bic.w	r2, r2, #1
 80063d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80063e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	021b      	lsls	r3, r3, #8
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0201 	orr.w	r2, r2, #1
 800640a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2220      	movs	r2, #32
 8006410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	e000      	b.n	8006422 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006420:	2302      	movs	r3, #2
  }
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
	...

08006430 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006434:	4b04      	ldr	r3, [pc, #16]	@ (8006448 <HAL_PWREx_GetVoltageRange+0x18>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800643c:	4618      	mov	r0, r3
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40007000 	.word	0x40007000

0800644c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800645a:	d130      	bne.n	80064be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800645c:	4b23      	ldr	r3, [pc, #140]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006468:	d038      	beq.n	80064dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800646a:	4b20      	ldr	r3, [pc, #128]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006472:	4a1e      	ldr	r2, [pc, #120]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006474:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006478:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800647a:	4b1d      	ldr	r3, [pc, #116]	@ (80064f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2232      	movs	r2, #50	@ 0x32
 8006480:	fb02 f303 	mul.w	r3, r2, r3
 8006484:	4a1b      	ldr	r2, [pc, #108]	@ (80064f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006486:	fba2 2303 	umull	r2, r3, r2, r3
 800648a:	0c9b      	lsrs	r3, r3, #18
 800648c:	3301      	adds	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006490:	e002      	b.n	8006498 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3b01      	subs	r3, #1
 8006496:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006498:	4b14      	ldr	r3, [pc, #80]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064a4:	d102      	bne.n	80064ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1f2      	bne.n	8006492 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80064ac:	4b0f      	ldr	r3, [pc, #60]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064b8:	d110      	bne.n	80064dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e00f      	b.n	80064de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80064be:	4b0b      	ldr	r3, [pc, #44]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80064c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ca:	d007      	beq.n	80064dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80064cc:	4b07      	ldr	r3, [pc, #28]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80064d4:	4a05      	ldr	r2, [pc, #20]	@ (80064ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80064da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	40007000 	.word	0x40007000
 80064f0:	20000000 	.word	0x20000000
 80064f4:	431bde83 	.word	0x431bde83

080064f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d102      	bne.n	800650c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	f000 bc08 	b.w	8006d1c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800650c:	4b96      	ldr	r3, [pc, #600]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f003 030c 	and.w	r3, r3, #12
 8006514:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006516:	4b94      	ldr	r3, [pc, #592]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f003 0303 	and.w	r3, r3, #3
 800651e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 80e4 	beq.w	80066f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d007      	beq.n	8006544 <HAL_RCC_OscConfig+0x4c>
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	2b0c      	cmp	r3, #12
 8006538:	f040 808b 	bne.w	8006652 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2b01      	cmp	r3, #1
 8006540:	f040 8087 	bne.w	8006652 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006544:	4b88      	ldr	r3, [pc, #544]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d005      	beq.n	800655c <HAL_RCC_OscConfig+0x64>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e3df      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a1a      	ldr	r2, [r3, #32]
 8006560:	4b81      	ldr	r3, [pc, #516]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b00      	cmp	r3, #0
 800656a:	d004      	beq.n	8006576 <HAL_RCC_OscConfig+0x7e>
 800656c:	4b7e      	ldr	r3, [pc, #504]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006574:	e005      	b.n	8006582 <HAL_RCC_OscConfig+0x8a>
 8006576:	4b7c      	ldr	r3, [pc, #496]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 8006578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800657c:	091b      	lsrs	r3, r3, #4
 800657e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006582:	4293      	cmp	r3, r2
 8006584:	d223      	bcs.n	80065ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fdc4 	bl	8007118 <RCC_SetFlashLatencyFromMSIRange>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e3c0      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800659a:	4b73      	ldr	r3, [pc, #460]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a72      	ldr	r2, [pc, #456]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 80065a0:	f043 0308 	orr.w	r3, r3, #8
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	4b70      	ldr	r3, [pc, #448]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	496d      	ldr	r1, [pc, #436]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065b8:	4b6b      	ldr	r3, [pc, #428]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	4968      	ldr	r1, [pc, #416]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	604b      	str	r3, [r1, #4]
 80065cc:	e025      	b.n	800661a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065ce:	4b66      	ldr	r3, [pc, #408]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a65      	ldr	r2, [pc, #404]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 80065d4:	f043 0308 	orr.w	r3, r3, #8
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	4b63      	ldr	r3, [pc, #396]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	4960      	ldr	r1, [pc, #384]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065ec:	4b5e      	ldr	r3, [pc, #376]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	495b      	ldr	r1, [pc, #364]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fd84 	bl	8007118 <RCC_SetFlashLatencyFromMSIRange>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e380      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800661a:	f000 fc87 	bl	8006f2c <HAL_RCC_GetSysClockFreq>
 800661e:	4602      	mov	r2, r0
 8006620:	4b51      	ldr	r3, [pc, #324]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	091b      	lsrs	r3, r3, #4
 8006626:	f003 030f 	and.w	r3, r3, #15
 800662a:	4950      	ldr	r1, [pc, #320]	@ (800676c <HAL_RCC_OscConfig+0x274>)
 800662c:	5ccb      	ldrb	r3, [r1, r3]
 800662e:	f003 031f 	and.w	r3, r3, #31
 8006632:	fa22 f303 	lsr.w	r3, r2, r3
 8006636:	4a4e      	ldr	r2, [pc, #312]	@ (8006770 <HAL_RCC_OscConfig+0x278>)
 8006638:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800663a:	4b4e      	ldr	r3, [pc, #312]	@ (8006774 <HAL_RCC_OscConfig+0x27c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f7fb fbce 	bl	8001de0 <HAL_InitTick>
 8006644:	4603      	mov	r3, r0
 8006646:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d052      	beq.n	80066f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800664e:	7bfb      	ldrb	r3, [r7, #15]
 8006650:	e364      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d032      	beq.n	80066c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800665a:	4b43      	ldr	r3, [pc, #268]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a42      	ldr	r2, [pc, #264]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 8006660:	f043 0301 	orr.w	r3, r3, #1
 8006664:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006666:	f7fc fd43 	bl	80030f0 <HAL_GetTick>
 800666a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800666c:	e008      	b.n	8006680 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800666e:	f7fc fd3f 	bl	80030f0 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d901      	bls.n	8006680 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e34d      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006680:	4b39      	ldr	r3, [pc, #228]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0f0      	beq.n	800666e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800668c:	4b36      	ldr	r3, [pc, #216]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a35      	ldr	r2, [pc, #212]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 8006692:	f043 0308 	orr.w	r3, r3, #8
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	4b33      	ldr	r3, [pc, #204]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	4930      	ldr	r1, [pc, #192]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	021b      	lsls	r3, r3, #8
 80066b8:	492b      	ldr	r1, [pc, #172]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	604b      	str	r3, [r1, #4]
 80066be:	e01a      	b.n	80066f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80066c0:	4b29      	ldr	r3, [pc, #164]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a28      	ldr	r2, [pc, #160]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 80066c6:	f023 0301 	bic.w	r3, r3, #1
 80066ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066cc:	f7fc fd10 	bl	80030f0 <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066d4:	f7fc fd0c 	bl	80030f0 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e31a      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80066e6:	4b20      	ldr	r3, [pc, #128]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f0      	bne.n	80066d4 <HAL_RCC_OscConfig+0x1dc>
 80066f2:	e000      	b.n	80066f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80066f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d073      	beq.n	80067ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b08      	cmp	r3, #8
 8006706:	d005      	beq.n	8006714 <HAL_RCC_OscConfig+0x21c>
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	2b0c      	cmp	r3, #12
 800670c:	d10e      	bne.n	800672c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b03      	cmp	r3, #3
 8006712:	d10b      	bne.n	800672c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006714:	4b14      	ldr	r3, [pc, #80]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d063      	beq.n	80067e8 <HAL_RCC_OscConfig+0x2f0>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d15f      	bne.n	80067e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e2f7      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006734:	d106      	bne.n	8006744 <HAL_RCC_OscConfig+0x24c>
 8006736:	4b0c      	ldr	r3, [pc, #48]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a0b      	ldr	r2, [pc, #44]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 800673c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	e025      	b.n	8006790 <HAL_RCC_OscConfig+0x298>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800674c:	d114      	bne.n	8006778 <HAL_RCC_OscConfig+0x280>
 800674e:	4b06      	ldr	r3, [pc, #24]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a05      	ldr	r2, [pc, #20]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 8006754:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	4b03      	ldr	r3, [pc, #12]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a02      	ldr	r2, [pc, #8]	@ (8006768 <HAL_RCC_OscConfig+0x270>)
 8006760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006764:	6013      	str	r3, [r2, #0]
 8006766:	e013      	b.n	8006790 <HAL_RCC_OscConfig+0x298>
 8006768:	40021000 	.word	0x40021000
 800676c:	0800ca08 	.word	0x0800ca08
 8006770:	20000000 	.word	0x20000000
 8006774:	20000004 	.word	0x20000004
 8006778:	4ba0      	ldr	r3, [pc, #640]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a9f      	ldr	r2, [pc, #636]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 800677e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006782:	6013      	str	r3, [r2, #0]
 8006784:	4b9d      	ldr	r3, [pc, #628]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a9c      	ldr	r2, [pc, #624]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 800678a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800678e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d013      	beq.n	80067c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006798:	f7fc fcaa 	bl	80030f0 <HAL_GetTick>
 800679c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800679e:	e008      	b.n	80067b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067a0:	f7fc fca6 	bl	80030f0 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b64      	cmp	r3, #100	@ 0x64
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e2b4      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067b2:	4b92      	ldr	r3, [pc, #584]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0f0      	beq.n	80067a0 <HAL_RCC_OscConfig+0x2a8>
 80067be:	e014      	b.n	80067ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c0:	f7fc fc96 	bl	80030f0 <HAL_GetTick>
 80067c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067c8:	f7fc fc92 	bl	80030f0 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b64      	cmp	r3, #100	@ 0x64
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e2a0      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067da:	4b88      	ldr	r3, [pc, #544]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f0      	bne.n	80067c8 <HAL_RCC_OscConfig+0x2d0>
 80067e6:	e000      	b.n	80067ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d060      	beq.n	80068b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	2b04      	cmp	r3, #4
 80067fa:	d005      	beq.n	8006808 <HAL_RCC_OscConfig+0x310>
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	2b0c      	cmp	r3, #12
 8006800:	d119      	bne.n	8006836 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	2b02      	cmp	r3, #2
 8006806:	d116      	bne.n	8006836 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006808:	4b7c      	ldr	r3, [pc, #496]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <HAL_RCC_OscConfig+0x328>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e27d      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006820:	4b76      	ldr	r3, [pc, #472]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	061b      	lsls	r3, r3, #24
 800682e:	4973      	ldr	r1, [pc, #460]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 8006830:	4313      	orrs	r3, r2
 8006832:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006834:	e040      	b.n	80068b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d023      	beq.n	8006886 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800683e:	4b6f      	ldr	r3, [pc, #444]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a6e      	ldr	r2, [pc, #440]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 8006844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800684a:	f7fc fc51 	bl	80030f0 <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006850:	e008      	b.n	8006864 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006852:	f7fc fc4d 	bl	80030f0 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d901      	bls.n	8006864 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e25b      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006864:	4b65      	ldr	r3, [pc, #404]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0f0      	beq.n	8006852 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006870:	4b62      	ldr	r3, [pc, #392]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	061b      	lsls	r3, r3, #24
 800687e:	495f      	ldr	r1, [pc, #380]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 8006880:	4313      	orrs	r3, r2
 8006882:	604b      	str	r3, [r1, #4]
 8006884:	e018      	b.n	80068b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006886:	4b5d      	ldr	r3, [pc, #372]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a5c      	ldr	r2, [pc, #368]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 800688c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006892:	f7fc fc2d 	bl	80030f0 <HAL_GetTick>
 8006896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006898:	e008      	b.n	80068ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800689a:	f7fc fc29 	bl	80030f0 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d901      	bls.n	80068ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e237      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068ac:	4b53      	ldr	r3, [pc, #332]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1f0      	bne.n	800689a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d03c      	beq.n	800693e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01c      	beq.n	8006906 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068cc:	4b4b      	ldr	r3, [pc, #300]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 80068ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068d2:	4a4a      	ldr	r2, [pc, #296]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 80068d4:	f043 0301 	orr.w	r3, r3, #1
 80068d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068dc:	f7fc fc08 	bl	80030f0 <HAL_GetTick>
 80068e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068e2:	e008      	b.n	80068f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068e4:	f7fc fc04 	bl	80030f0 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e212      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068f6:	4b41      	ldr	r3, [pc, #260]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 80068f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0ef      	beq.n	80068e4 <HAL_RCC_OscConfig+0x3ec>
 8006904:	e01b      	b.n	800693e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006906:	4b3d      	ldr	r3, [pc, #244]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 8006908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800690c:	4a3b      	ldr	r2, [pc, #236]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 800690e:	f023 0301 	bic.w	r3, r3, #1
 8006912:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006916:	f7fc fbeb 	bl	80030f0 <HAL_GetTick>
 800691a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800691c:	e008      	b.n	8006930 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800691e:	f7fc fbe7 	bl	80030f0 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d901      	bls.n	8006930 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e1f5      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006930:	4b32      	ldr	r3, [pc, #200]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 8006932:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1ef      	bne.n	800691e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0304 	and.w	r3, r3, #4
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 80a6 	beq.w	8006a98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800694c:	2300      	movs	r3, #0
 800694e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006950:	4b2a      	ldr	r3, [pc, #168]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 8006952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10d      	bne.n	8006978 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800695c:	4b27      	ldr	r3, [pc, #156]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 800695e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006960:	4a26      	ldr	r2, [pc, #152]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 8006962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006966:	6593      	str	r3, [r2, #88]	@ 0x58
 8006968:	4b24      	ldr	r3, [pc, #144]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 800696a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800696c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006970:	60bb      	str	r3, [r7, #8]
 8006972:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006974:	2301      	movs	r3, #1
 8006976:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006978:	4b21      	ldr	r3, [pc, #132]	@ (8006a00 <HAL_RCC_OscConfig+0x508>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006980:	2b00      	cmp	r3, #0
 8006982:	d118      	bne.n	80069b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006984:	4b1e      	ldr	r3, [pc, #120]	@ (8006a00 <HAL_RCC_OscConfig+0x508>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a1d      	ldr	r2, [pc, #116]	@ (8006a00 <HAL_RCC_OscConfig+0x508>)
 800698a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800698e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006990:	f7fc fbae 	bl	80030f0 <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006998:	f7fc fbaa 	bl	80030f0 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e1b8      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069aa:	4b15      	ldr	r3, [pc, #84]	@ (8006a00 <HAL_RCC_OscConfig+0x508>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0f0      	beq.n	8006998 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d108      	bne.n	80069d0 <HAL_RCC_OscConfig+0x4d8>
 80069be:	4b0f      	ldr	r3, [pc, #60]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 80069c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c4:	4a0d      	ldr	r2, [pc, #52]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 80069c6:	f043 0301 	orr.w	r3, r3, #1
 80069ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80069ce:	e029      	b.n	8006a24 <HAL_RCC_OscConfig+0x52c>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	2b05      	cmp	r3, #5
 80069d6:	d115      	bne.n	8006a04 <HAL_RCC_OscConfig+0x50c>
 80069d8:	4b08      	ldr	r3, [pc, #32]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 80069da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069de:	4a07      	ldr	r2, [pc, #28]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 80069e0:	f043 0304 	orr.w	r3, r3, #4
 80069e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80069e8:	4b04      	ldr	r3, [pc, #16]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 80069ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ee:	4a03      	ldr	r2, [pc, #12]	@ (80069fc <HAL_RCC_OscConfig+0x504>)
 80069f0:	f043 0301 	orr.w	r3, r3, #1
 80069f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80069f8:	e014      	b.n	8006a24 <HAL_RCC_OscConfig+0x52c>
 80069fa:	bf00      	nop
 80069fc:	40021000 	.word	0x40021000
 8006a00:	40007000 	.word	0x40007000
 8006a04:	4b9d      	ldr	r3, [pc, #628]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a0a:	4a9c      	ldr	r2, [pc, #624]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006a0c:	f023 0301 	bic.w	r3, r3, #1
 8006a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a14:	4b99      	ldr	r3, [pc, #612]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a1a:	4a98      	ldr	r2, [pc, #608]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006a1c:	f023 0304 	bic.w	r3, r3, #4
 8006a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d016      	beq.n	8006a5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a2c:	f7fc fb60 	bl	80030f0 <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a32:	e00a      	b.n	8006a4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a34:	f7fc fb5c 	bl	80030f0 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e168      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a4a:	4b8c      	ldr	r3, [pc, #560]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0ed      	beq.n	8006a34 <HAL_RCC_OscConfig+0x53c>
 8006a58:	e015      	b.n	8006a86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a5a:	f7fc fb49 	bl	80030f0 <HAL_GetTick>
 8006a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a60:	e00a      	b.n	8006a78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a62:	f7fc fb45 	bl	80030f0 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d901      	bls.n	8006a78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e151      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a78:	4b80      	ldr	r3, [pc, #512]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1ed      	bne.n	8006a62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a86:	7ffb      	ldrb	r3, [r7, #31]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d105      	bne.n	8006a98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a8c:	4b7b      	ldr	r3, [pc, #492]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a90:	4a7a      	ldr	r2, [pc, #488]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a96:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0320 	and.w	r3, r3, #32
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d03c      	beq.n	8006b1e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d01c      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006aac:	4b73      	ldr	r3, [pc, #460]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ab2:	4a72      	ldr	r2, [pc, #456]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006ab4:	f043 0301 	orr.w	r3, r3, #1
 8006ab8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006abc:	f7fc fb18 	bl	80030f0 <HAL_GetTick>
 8006ac0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ac2:	e008      	b.n	8006ad6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ac4:	f7fc fb14 	bl	80030f0 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e122      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ad6:	4b69      	ldr	r3, [pc, #420]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006ad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0ef      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x5cc>
 8006ae4:	e01b      	b.n	8006b1e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ae6:	4b65      	ldr	r3, [pc, #404]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006aec:	4a63      	ldr	r2, [pc, #396]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006aee:	f023 0301 	bic.w	r3, r3, #1
 8006af2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006af6:	f7fc fafb 	bl	80030f0 <HAL_GetTick>
 8006afa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006afc:	e008      	b.n	8006b10 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006afe:	f7fc faf7 	bl	80030f0 <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d901      	bls.n	8006b10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e105      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b10:	4b5a      	ldr	r3, [pc, #360]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006b12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1ef      	bne.n	8006afe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 80f9 	beq.w	8006d1a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	f040 80cf 	bne.w	8006cd0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006b32:	4b52      	ldr	r3, [pc, #328]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f003 0203 	and.w	r2, r3, #3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d12c      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b50:	3b01      	subs	r3, #1
 8006b52:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d123      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b62:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d11b      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b72:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d113      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b82:	085b      	lsrs	r3, r3, #1
 8006b84:	3b01      	subs	r3, #1
 8006b86:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d109      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b96:	085b      	lsrs	r3, r3, #1
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d071      	beq.n	8006c84 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2b0c      	cmp	r3, #12
 8006ba4:	d068      	beq.n	8006c78 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006ba6:	4b35      	ldr	r3, [pc, #212]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d105      	bne.n	8006bbe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006bb2:	4b32      	ldr	r3, [pc, #200]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e0ac      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a2d      	ldr	r2, [pc, #180]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006bc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bcc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006bce:	f7fc fa8f 	bl	80030f0 <HAL_GetTick>
 8006bd2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bd4:	e008      	b.n	8006be8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bd6:	f7fc fa8b 	bl	80030f0 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d901      	bls.n	8006be8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e099      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006be8:	4b24      	ldr	r3, [pc, #144]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1f0      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bf4:	4b21      	ldr	r3, [pc, #132]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006bf6:	68da      	ldr	r2, [r3, #12]
 8006bf8:	4b21      	ldr	r3, [pc, #132]	@ (8006c80 <HAL_RCC_OscConfig+0x788>)
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006c04:	3a01      	subs	r2, #1
 8006c06:	0112      	lsls	r2, r2, #4
 8006c08:	4311      	orrs	r1, r2
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006c0e:	0212      	lsls	r2, r2, #8
 8006c10:	4311      	orrs	r1, r2
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006c16:	0852      	lsrs	r2, r2, #1
 8006c18:	3a01      	subs	r2, #1
 8006c1a:	0552      	lsls	r2, r2, #21
 8006c1c:	4311      	orrs	r1, r2
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006c22:	0852      	lsrs	r2, r2, #1
 8006c24:	3a01      	subs	r2, #1
 8006c26:	0652      	lsls	r2, r2, #25
 8006c28:	4311      	orrs	r1, r2
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006c2e:	06d2      	lsls	r2, r2, #27
 8006c30:	430a      	orrs	r2, r1
 8006c32:	4912      	ldr	r1, [pc, #72]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006c38:	4b10      	ldr	r3, [pc, #64]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a0f      	ldr	r2, [pc, #60]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006c3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c44:	4b0d      	ldr	r3, [pc, #52]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	4a0c      	ldr	r2, [pc, #48]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006c4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c50:	f7fc fa4e 	bl	80030f0 <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c58:	f7fc fa4a 	bl	80030f0 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e058      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c6a:	4b04      	ldr	r3, [pc, #16]	@ (8006c7c <HAL_RCC_OscConfig+0x784>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0f0      	beq.n	8006c58 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c76:	e050      	b.n	8006d1a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e04f      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
 8006c7c:	40021000 	.word	0x40021000
 8006c80:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c84:	4b27      	ldr	r3, [pc, #156]	@ (8006d24 <HAL_RCC_OscConfig+0x82c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d144      	bne.n	8006d1a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006c90:	4b24      	ldr	r3, [pc, #144]	@ (8006d24 <HAL_RCC_OscConfig+0x82c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a23      	ldr	r2, [pc, #140]	@ (8006d24 <HAL_RCC_OscConfig+0x82c>)
 8006c96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c9c:	4b21      	ldr	r3, [pc, #132]	@ (8006d24 <HAL_RCC_OscConfig+0x82c>)
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	4a20      	ldr	r2, [pc, #128]	@ (8006d24 <HAL_RCC_OscConfig+0x82c>)
 8006ca2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ca6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ca8:	f7fc fa22 	bl	80030f0 <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cae:	e008      	b.n	8006cc2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cb0:	f7fc fa1e 	bl	80030f0 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e02c      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cc2:	4b18      	ldr	r3, [pc, #96]	@ (8006d24 <HAL_RCC_OscConfig+0x82c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0f0      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x7b8>
 8006cce:	e024      	b.n	8006d1a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	2b0c      	cmp	r3, #12
 8006cd4:	d01f      	beq.n	8006d16 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cd6:	4b13      	ldr	r3, [pc, #76]	@ (8006d24 <HAL_RCC_OscConfig+0x82c>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a12      	ldr	r2, [pc, #72]	@ (8006d24 <HAL_RCC_OscConfig+0x82c>)
 8006cdc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce2:	f7fc fa05 	bl	80030f0 <HAL_GetTick>
 8006ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ce8:	e008      	b.n	8006cfc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cea:	f7fc fa01 	bl	80030f0 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d901      	bls.n	8006cfc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e00f      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cfc:	4b09      	ldr	r3, [pc, #36]	@ (8006d24 <HAL_RCC_OscConfig+0x82c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1f0      	bne.n	8006cea <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006d08:	4b06      	ldr	r3, [pc, #24]	@ (8006d24 <HAL_RCC_OscConfig+0x82c>)
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	4905      	ldr	r1, [pc, #20]	@ (8006d24 <HAL_RCC_OscConfig+0x82c>)
 8006d0e:	4b06      	ldr	r3, [pc, #24]	@ (8006d28 <HAL_RCC_OscConfig+0x830>)
 8006d10:	4013      	ands	r3, r2
 8006d12:	60cb      	str	r3, [r1, #12]
 8006d14:	e001      	b.n	8006d1a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e000      	b.n	8006d1c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3720      	adds	r7, #32
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	40021000 	.word	0x40021000
 8006d28:	feeefffc 	.word	0xfeeefffc

08006d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e0e7      	b.n	8006f10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d40:	4b75      	ldr	r3, [pc, #468]	@ (8006f18 <HAL_RCC_ClockConfig+0x1ec>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0307 	and.w	r3, r3, #7
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d910      	bls.n	8006d70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d4e:	4b72      	ldr	r3, [pc, #456]	@ (8006f18 <HAL_RCC_ClockConfig+0x1ec>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f023 0207 	bic.w	r2, r3, #7
 8006d56:	4970      	ldr	r1, [pc, #448]	@ (8006f18 <HAL_RCC_ClockConfig+0x1ec>)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d5e:	4b6e      	ldr	r3, [pc, #440]	@ (8006f18 <HAL_RCC_ClockConfig+0x1ec>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d001      	beq.n	8006d70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e0cf      	b.n	8006f10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d010      	beq.n	8006d9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	4b66      	ldr	r3, [pc, #408]	@ (8006f1c <HAL_RCC_ClockConfig+0x1f0>)
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d908      	bls.n	8006d9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d8c:	4b63      	ldr	r3, [pc, #396]	@ (8006f1c <HAL_RCC_ClockConfig+0x1f0>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	4960      	ldr	r1, [pc, #384]	@ (8006f1c <HAL_RCC_ClockConfig+0x1f0>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d04c      	beq.n	8006e44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d107      	bne.n	8006dc2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006db2:	4b5a      	ldr	r3, [pc, #360]	@ (8006f1c <HAL_RCC_ClockConfig+0x1f0>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d121      	bne.n	8006e02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e0a6      	b.n	8006f10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d107      	bne.n	8006dda <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dca:	4b54      	ldr	r3, [pc, #336]	@ (8006f1c <HAL_RCC_ClockConfig+0x1f0>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d115      	bne.n	8006e02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e09a      	b.n	8006f10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d107      	bne.n	8006df2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006de2:	4b4e      	ldr	r3, [pc, #312]	@ (8006f1c <HAL_RCC_ClockConfig+0x1f0>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d109      	bne.n	8006e02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e08e      	b.n	8006f10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006df2:	4b4a      	ldr	r3, [pc, #296]	@ (8006f1c <HAL_RCC_ClockConfig+0x1f0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e086      	b.n	8006f10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e02:	4b46      	ldr	r3, [pc, #280]	@ (8006f1c <HAL_RCC_ClockConfig+0x1f0>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f023 0203 	bic.w	r2, r3, #3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	4943      	ldr	r1, [pc, #268]	@ (8006f1c <HAL_RCC_ClockConfig+0x1f0>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e14:	f7fc f96c 	bl	80030f0 <HAL_GetTick>
 8006e18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e1a:	e00a      	b.n	8006e32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e1c:	f7fc f968 	bl	80030f0 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e06e      	b.n	8006f10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e32:	4b3a      	ldr	r3, [pc, #232]	@ (8006f1c <HAL_RCC_ClockConfig+0x1f0>)
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f003 020c 	and.w	r2, r3, #12
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d1eb      	bne.n	8006e1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d010      	beq.n	8006e72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689a      	ldr	r2, [r3, #8]
 8006e54:	4b31      	ldr	r3, [pc, #196]	@ (8006f1c <HAL_RCC_ClockConfig+0x1f0>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d208      	bcs.n	8006e72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e60:	4b2e      	ldr	r3, [pc, #184]	@ (8006f1c <HAL_RCC_ClockConfig+0x1f0>)
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	492b      	ldr	r1, [pc, #172]	@ (8006f1c <HAL_RCC_ClockConfig+0x1f0>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e72:	4b29      	ldr	r3, [pc, #164]	@ (8006f18 <HAL_RCC_ClockConfig+0x1ec>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d210      	bcs.n	8006ea2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e80:	4b25      	ldr	r3, [pc, #148]	@ (8006f18 <HAL_RCC_ClockConfig+0x1ec>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f023 0207 	bic.w	r2, r3, #7
 8006e88:	4923      	ldr	r1, [pc, #140]	@ (8006f18 <HAL_RCC_ClockConfig+0x1ec>)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e90:	4b21      	ldr	r3, [pc, #132]	@ (8006f18 <HAL_RCC_ClockConfig+0x1ec>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d001      	beq.n	8006ea2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e036      	b.n	8006f10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0304 	and.w	r3, r3, #4
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d008      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006eae:	4b1b      	ldr	r3, [pc, #108]	@ (8006f1c <HAL_RCC_ClockConfig+0x1f0>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	4918      	ldr	r1, [pc, #96]	@ (8006f1c <HAL_RCC_ClockConfig+0x1f0>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d009      	beq.n	8006ee0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ecc:	4b13      	ldr	r3, [pc, #76]	@ (8006f1c <HAL_RCC_ClockConfig+0x1f0>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	4910      	ldr	r1, [pc, #64]	@ (8006f1c <HAL_RCC_ClockConfig+0x1f0>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ee0:	f000 f824 	bl	8006f2c <HAL_RCC_GetSysClockFreq>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8006f1c <HAL_RCC_ClockConfig+0x1f0>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	091b      	lsrs	r3, r3, #4
 8006eec:	f003 030f 	and.w	r3, r3, #15
 8006ef0:	490b      	ldr	r1, [pc, #44]	@ (8006f20 <HAL_RCC_ClockConfig+0x1f4>)
 8006ef2:	5ccb      	ldrb	r3, [r1, r3]
 8006ef4:	f003 031f 	and.w	r3, r3, #31
 8006ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8006efc:	4a09      	ldr	r2, [pc, #36]	@ (8006f24 <HAL_RCC_ClockConfig+0x1f8>)
 8006efe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006f00:	4b09      	ldr	r3, [pc, #36]	@ (8006f28 <HAL_RCC_ClockConfig+0x1fc>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fa ff6b 	bl	8001de0 <HAL_InitTick>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8006f0e:	7afb      	ldrb	r3, [r7, #11]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	40022000 	.word	0x40022000
 8006f1c:	40021000 	.word	0x40021000
 8006f20:	0800ca08 	.word	0x0800ca08
 8006f24:	20000000 	.word	0x20000000
 8006f28:	20000004 	.word	0x20000004

08006f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b089      	sub	sp, #36	@ 0x24
 8006f30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	61fb      	str	r3, [r7, #28]
 8006f36:	2300      	movs	r3, #0
 8006f38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8007034 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f003 030c 	and.w	r3, r3, #12
 8006f42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f44:	4b3b      	ldr	r3, [pc, #236]	@ (8007034 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	f003 0303 	and.w	r3, r3, #3
 8006f4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <HAL_RCC_GetSysClockFreq+0x34>
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	2b0c      	cmp	r3, #12
 8006f58:	d121      	bne.n	8006f9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d11e      	bne.n	8006f9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006f60:	4b34      	ldr	r3, [pc, #208]	@ (8007034 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0308 	and.w	r3, r3, #8
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d107      	bne.n	8006f7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006f6c:	4b31      	ldr	r3, [pc, #196]	@ (8007034 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f72:	0a1b      	lsrs	r3, r3, #8
 8006f74:	f003 030f 	and.w	r3, r3, #15
 8006f78:	61fb      	str	r3, [r7, #28]
 8006f7a:	e005      	b.n	8006f88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8007034 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	091b      	lsrs	r3, r3, #4
 8006f82:	f003 030f 	and.w	r3, r3, #15
 8006f86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006f88:	4a2b      	ldr	r2, [pc, #172]	@ (8007038 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10d      	bne.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f9c:	e00a      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d102      	bne.n	8006faa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006fa4:	4b25      	ldr	r3, [pc, #148]	@ (800703c <HAL_RCC_GetSysClockFreq+0x110>)
 8006fa6:	61bb      	str	r3, [r7, #24]
 8006fa8:	e004      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d101      	bne.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006fb0:	4b23      	ldr	r3, [pc, #140]	@ (8007040 <HAL_RCC_GetSysClockFreq+0x114>)
 8006fb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	2b0c      	cmp	r3, #12
 8006fb8:	d134      	bne.n	8007024 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006fba:	4b1e      	ldr	r3, [pc, #120]	@ (8007034 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f003 0303 	and.w	r3, r3, #3
 8006fc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d003      	beq.n	8006fd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d003      	beq.n	8006fd8 <HAL_RCC_GetSysClockFreq+0xac>
 8006fd0:	e005      	b.n	8006fde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800703c <HAL_RCC_GetSysClockFreq+0x110>)
 8006fd4:	617b      	str	r3, [r7, #20]
      break;
 8006fd6:	e005      	b.n	8006fe4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006fd8:	4b19      	ldr	r3, [pc, #100]	@ (8007040 <HAL_RCC_GetSysClockFreq+0x114>)
 8006fda:	617b      	str	r3, [r7, #20]
      break;
 8006fdc:	e002      	b.n	8006fe4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	617b      	str	r3, [r7, #20]
      break;
 8006fe2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006fe4:	4b13      	ldr	r3, [pc, #76]	@ (8007034 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	091b      	lsrs	r3, r3, #4
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	3301      	adds	r3, #1
 8006ff0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006ff2:	4b10      	ldr	r3, [pc, #64]	@ (8007034 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	0a1b      	lsrs	r3, r3, #8
 8006ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	fb03 f202 	mul.w	r2, r3, r2
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	fbb2 f3f3 	udiv	r3, r2, r3
 8007008:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800700a:	4b0a      	ldr	r3, [pc, #40]	@ (8007034 <HAL_RCC_GetSysClockFreq+0x108>)
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	0e5b      	lsrs	r3, r3, #25
 8007010:	f003 0303 	and.w	r3, r3, #3
 8007014:	3301      	adds	r3, #1
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007022:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007024:	69bb      	ldr	r3, [r7, #24]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3724      	adds	r7, #36	@ 0x24
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	40021000 	.word	0x40021000
 8007038:	0800ca20 	.word	0x0800ca20
 800703c:	00f42400 	.word	0x00f42400
 8007040:	007a1200 	.word	0x007a1200

08007044 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007044:	b480      	push	{r7}
 8007046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007048:	4b03      	ldr	r3, [pc, #12]	@ (8007058 <HAL_RCC_GetHCLKFreq+0x14>)
 800704a:	681b      	ldr	r3, [r3, #0]
}
 800704c:	4618      	mov	r0, r3
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	20000000 	.word	0x20000000

0800705c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007060:	f7ff fff0 	bl	8007044 <HAL_RCC_GetHCLKFreq>
 8007064:	4602      	mov	r2, r0
 8007066:	4b06      	ldr	r3, [pc, #24]	@ (8007080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	0a1b      	lsrs	r3, r3, #8
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	4904      	ldr	r1, [pc, #16]	@ (8007084 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007072:	5ccb      	ldrb	r3, [r1, r3]
 8007074:	f003 031f 	and.w	r3, r3, #31
 8007078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800707c:	4618      	mov	r0, r3
 800707e:	bd80      	pop	{r7, pc}
 8007080:	40021000 	.word	0x40021000
 8007084:	0800ca18 	.word	0x0800ca18

08007088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800708c:	f7ff ffda 	bl	8007044 <HAL_RCC_GetHCLKFreq>
 8007090:	4602      	mov	r2, r0
 8007092:	4b06      	ldr	r3, [pc, #24]	@ (80070ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	0adb      	lsrs	r3, r3, #11
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	4904      	ldr	r1, [pc, #16]	@ (80070b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800709e:	5ccb      	ldrb	r3, [r1, r3]
 80070a0:	f003 031f 	and.w	r3, r3, #31
 80070a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	40021000 	.word	0x40021000
 80070b0:	0800ca18 	.word	0x0800ca18

080070b4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	220f      	movs	r2, #15
 80070c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80070c4:	4b12      	ldr	r3, [pc, #72]	@ (8007110 <HAL_RCC_GetClockConfig+0x5c>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f003 0203 	and.w	r2, r3, #3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80070d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007110 <HAL_RCC_GetClockConfig+0x5c>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80070dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007110 <HAL_RCC_GetClockConfig+0x5c>)
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80070e8:	4b09      	ldr	r3, [pc, #36]	@ (8007110 <HAL_RCC_GetClockConfig+0x5c>)
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	08db      	lsrs	r3, r3, #3
 80070ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80070f6:	4b07      	ldr	r3, [pc, #28]	@ (8007114 <HAL_RCC_GetClockConfig+0x60>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0207 	and.w	r2, r3, #7
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	601a      	str	r2, [r3, #0]
}
 8007102:	bf00      	nop
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40021000 	.word	0x40021000
 8007114:	40022000 	.word	0x40022000

08007118 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007120:	2300      	movs	r3, #0
 8007122:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007124:	4b2a      	ldr	r3, [pc, #168]	@ (80071d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007128:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007130:	f7ff f97e 	bl	8006430 <HAL_PWREx_GetVoltageRange>
 8007134:	6178      	str	r0, [r7, #20]
 8007136:	e014      	b.n	8007162 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007138:	4b25      	ldr	r3, [pc, #148]	@ (80071d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800713a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800713c:	4a24      	ldr	r2, [pc, #144]	@ (80071d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800713e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007142:	6593      	str	r3, [r2, #88]	@ 0x58
 8007144:	4b22      	ldr	r3, [pc, #136]	@ (80071d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007150:	f7ff f96e 	bl	8006430 <HAL_PWREx_GetVoltageRange>
 8007154:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007156:	4b1e      	ldr	r3, [pc, #120]	@ (80071d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800715a:	4a1d      	ldr	r2, [pc, #116]	@ (80071d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800715c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007160:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007168:	d10b      	bne.n	8007182 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b80      	cmp	r3, #128	@ 0x80
 800716e:	d919      	bls.n	80071a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2ba0      	cmp	r3, #160	@ 0xa0
 8007174:	d902      	bls.n	800717c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007176:	2302      	movs	r3, #2
 8007178:	613b      	str	r3, [r7, #16]
 800717a:	e013      	b.n	80071a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800717c:	2301      	movs	r3, #1
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	e010      	b.n	80071a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b80      	cmp	r3, #128	@ 0x80
 8007186:	d902      	bls.n	800718e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007188:	2303      	movs	r3, #3
 800718a:	613b      	str	r3, [r7, #16]
 800718c:	e00a      	b.n	80071a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b80      	cmp	r3, #128	@ 0x80
 8007192:	d102      	bne.n	800719a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007194:	2302      	movs	r3, #2
 8007196:	613b      	str	r3, [r7, #16]
 8007198:	e004      	b.n	80071a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b70      	cmp	r3, #112	@ 0x70
 800719e:	d101      	bne.n	80071a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80071a0:	2301      	movs	r3, #1
 80071a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80071a4:	4b0b      	ldr	r3, [pc, #44]	@ (80071d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f023 0207 	bic.w	r2, r3, #7
 80071ac:	4909      	ldr	r1, [pc, #36]	@ (80071d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80071b4:	4b07      	ldr	r3, [pc, #28]	@ (80071d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d001      	beq.n	80071c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e000      	b.n	80071c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	40021000 	.word	0x40021000
 80071d4:	40022000 	.word	0x40022000

080071d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80071e0:	2300      	movs	r3, #0
 80071e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80071e4:	2300      	movs	r3, #0
 80071e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d041      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80071fc:	d02a      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80071fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007202:	d824      	bhi.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007204:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007208:	d008      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800720a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800720e:	d81e      	bhi.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00a      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007214:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007218:	d010      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800721a:	e018      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800721c:	4b86      	ldr	r3, [pc, #536]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	4a85      	ldr	r2, [pc, #532]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007226:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007228:	e015      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3304      	adds	r3, #4
 800722e:	2100      	movs	r1, #0
 8007230:	4618      	mov	r0, r3
 8007232:	f000 facd 	bl	80077d0 <RCCEx_PLLSAI1_Config>
 8007236:	4603      	mov	r3, r0
 8007238:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800723a:	e00c      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3320      	adds	r3, #32
 8007240:	2100      	movs	r1, #0
 8007242:	4618      	mov	r0, r3
 8007244:	f000 fbb6 	bl	80079b4 <RCCEx_PLLSAI2_Config>
 8007248:	4603      	mov	r3, r0
 800724a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800724c:	e003      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	74fb      	strb	r3, [r7, #19]
      break;
 8007252:	e000      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007256:	7cfb      	ldrb	r3, [r7, #19]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10b      	bne.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800725c:	4b76      	ldr	r3, [pc, #472]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800725e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007262:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800726a:	4973      	ldr	r1, [pc, #460]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800726c:	4313      	orrs	r3, r2
 800726e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007272:	e001      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007274:	7cfb      	ldrb	r3, [r7, #19]
 8007276:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d041      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007288:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800728c:	d02a      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800728e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007292:	d824      	bhi.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007294:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007298:	d008      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800729a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800729e:	d81e      	bhi.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00a      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80072a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072a8:	d010      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80072aa:	e018      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80072ac:	4b62      	ldr	r3, [pc, #392]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	4a61      	ldr	r2, [pc, #388]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80072b8:	e015      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	3304      	adds	r3, #4
 80072be:	2100      	movs	r1, #0
 80072c0:	4618      	mov	r0, r3
 80072c2:	f000 fa85 	bl	80077d0 <RCCEx_PLLSAI1_Config>
 80072c6:	4603      	mov	r3, r0
 80072c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80072ca:	e00c      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	3320      	adds	r3, #32
 80072d0:	2100      	movs	r1, #0
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fb6e 	bl	80079b4 <RCCEx_PLLSAI2_Config>
 80072d8:	4603      	mov	r3, r0
 80072da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80072dc:	e003      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	74fb      	strb	r3, [r7, #19]
      break;
 80072e2:	e000      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80072e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072e6:	7cfb      	ldrb	r3, [r7, #19]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10b      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80072ec:	4b52      	ldr	r3, [pc, #328]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072fa:	494f      	ldr	r1, [pc, #316]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007302:	e001      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007304:	7cfb      	ldrb	r3, [r7, #19]
 8007306:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 80a0 	beq.w	8007456 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007316:	2300      	movs	r3, #0
 8007318:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800731a:	4b47      	ldr	r3, [pc, #284]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800731c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800731e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007326:	2301      	movs	r3, #1
 8007328:	e000      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800732a:	2300      	movs	r3, #0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00d      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007330:	4b41      	ldr	r3, [pc, #260]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007334:	4a40      	ldr	r2, [pc, #256]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800733a:	6593      	str	r3, [r2, #88]	@ 0x58
 800733c:	4b3e      	ldr	r3, [pc, #248]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800733e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007344:	60bb      	str	r3, [r7, #8]
 8007346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007348:	2301      	movs	r3, #1
 800734a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800734c:	4b3b      	ldr	r3, [pc, #236]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a3a      	ldr	r2, [pc, #232]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007356:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007358:	f7fb feca 	bl	80030f0 <HAL_GetTick>
 800735c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800735e:	e009      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007360:	f7fb fec6 	bl	80030f0 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b02      	cmp	r3, #2
 800736c:	d902      	bls.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	74fb      	strb	r3, [r7, #19]
        break;
 8007372:	e005      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007374:	4b31      	ldr	r3, [pc, #196]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0ef      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007380:	7cfb      	ldrb	r3, [r7, #19]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d15c      	bne.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007386:	4b2c      	ldr	r3, [pc, #176]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800738c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007390:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d01f      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d019      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073a4:	4b24      	ldr	r3, [pc, #144]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073b0:	4b21      	ldr	r3, [pc, #132]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073b6:	4a20      	ldr	r2, [pc, #128]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073c6:	4a1c      	ldr	r2, [pc, #112]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80073d0:	4a19      	ldr	r2, [pc, #100]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d016      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e2:	f7fb fe85 	bl	80030f0 <HAL_GetTick>
 80073e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073e8:	e00b      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ea:	f7fb fe81 	bl	80030f0 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d902      	bls.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	74fb      	strb	r3, [r7, #19]
            break;
 8007400:	e006      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007402:	4b0d      	ldr	r3, [pc, #52]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0ec      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007410:	7cfb      	ldrb	r3, [r7, #19]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10c      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007416:	4b08      	ldr	r3, [pc, #32]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800741c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007426:	4904      	ldr	r1, [pc, #16]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007428:	4313      	orrs	r3, r2
 800742a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800742e:	e009      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007430:	7cfb      	ldrb	r3, [r7, #19]
 8007432:	74bb      	strb	r3, [r7, #18]
 8007434:	e006      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007436:	bf00      	nop
 8007438:	40021000 	.word	0x40021000
 800743c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007440:	7cfb      	ldrb	r3, [r7, #19]
 8007442:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007444:	7c7b      	ldrb	r3, [r7, #17]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d105      	bne.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800744a:	4ba6      	ldr	r3, [pc, #664]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800744c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800744e:	4aa5      	ldr	r2, [pc, #660]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007454:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00a      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007462:	4ba0      	ldr	r3, [pc, #640]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007468:	f023 0203 	bic.w	r2, r3, #3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007470:	499c      	ldr	r1, [pc, #624]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007472:	4313      	orrs	r3, r2
 8007474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0302 	and.w	r3, r3, #2
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00a      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007484:	4b97      	ldr	r3, [pc, #604]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800748a:	f023 020c 	bic.w	r2, r3, #12
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007492:	4994      	ldr	r1, [pc, #592]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007494:	4313      	orrs	r3, r2
 8007496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0304 	and.w	r3, r3, #4
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074a6:	4b8f      	ldr	r3, [pc, #572]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b4:	498b      	ldr	r1, [pc, #556]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0308 	and.w	r3, r3, #8
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00a      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074c8:	4b86      	ldr	r3, [pc, #536]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d6:	4983      	ldr	r1, [pc, #524]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0310 	and.w	r3, r3, #16
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80074ea:	4b7e      	ldr	r3, [pc, #504]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074f8:	497a      	ldr	r1, [pc, #488]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0320 	and.w	r3, r3, #32
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00a      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800750c:	4b75      	ldr	r3, [pc, #468]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800750e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007512:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800751a:	4972      	ldr	r1, [pc, #456]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800751c:	4313      	orrs	r3, r2
 800751e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800752e:	4b6d      	ldr	r3, [pc, #436]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007534:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800753c:	4969      	ldr	r1, [pc, #420]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800753e:	4313      	orrs	r3, r2
 8007540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00a      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007550:	4b64      	ldr	r3, [pc, #400]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007556:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800755e:	4961      	ldr	r1, [pc, #388]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007560:	4313      	orrs	r3, r2
 8007562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00a      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007572:	4b5c      	ldr	r3, [pc, #368]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007578:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007580:	4958      	ldr	r1, [pc, #352]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007582:	4313      	orrs	r3, r2
 8007584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00a      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007594:	4b53      	ldr	r3, [pc, #332]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800759a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075a2:	4950      	ldr	r1, [pc, #320]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00a      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075b6:	4b4b      	ldr	r3, [pc, #300]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075c4:	4947      	ldr	r1, [pc, #284]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00a      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075d8:	4b42      	ldr	r3, [pc, #264]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075de:	f023 0203 	bic.w	r2, r3, #3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075e6:	493f      	ldr	r1, [pc, #252]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d028      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075fa:	4b3a      	ldr	r3, [pc, #232]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007600:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007608:	4936      	ldr	r1, [pc, #216]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800760a:	4313      	orrs	r3, r2
 800760c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007614:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007618:	d106      	bne.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800761a:	4b32      	ldr	r3, [pc, #200]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	4a31      	ldr	r2, [pc, #196]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007620:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007624:	60d3      	str	r3, [r2, #12]
 8007626:	e011      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800762c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007630:	d10c      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	3304      	adds	r3, #4
 8007636:	2101      	movs	r1, #1
 8007638:	4618      	mov	r0, r3
 800763a:	f000 f8c9 	bl	80077d0 <RCCEx_PLLSAI1_Config>
 800763e:	4603      	mov	r3, r0
 8007640:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007642:	7cfb      	ldrb	r3, [r7, #19]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8007648:	7cfb      	ldrb	r3, [r7, #19]
 800764a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d028      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007658:	4b22      	ldr	r3, [pc, #136]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800765a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800765e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007666:	491f      	ldr	r1, [pc, #124]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007668:	4313      	orrs	r3, r2
 800766a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007672:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007676:	d106      	bne.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007678:	4b1a      	ldr	r3, [pc, #104]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	4a19      	ldr	r2, [pc, #100]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800767e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007682:	60d3      	str	r3, [r2, #12]
 8007684:	e011      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800768a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800768e:	d10c      	bne.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3304      	adds	r3, #4
 8007694:	2101      	movs	r1, #1
 8007696:	4618      	mov	r0, r3
 8007698:	f000 f89a 	bl	80077d0 <RCCEx_PLLSAI1_Config>
 800769c:	4603      	mov	r3, r0
 800769e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80076a0:	7cfb      	ldrb	r3, [r7, #19]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80076a6:	7cfb      	ldrb	r3, [r7, #19]
 80076a8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d02a      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076b6:	4b0b      	ldr	r3, [pc, #44]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076c4:	4907      	ldr	r1, [pc, #28]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076d4:	d108      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076d6:	4b03      	ldr	r3, [pc, #12]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	4a02      	ldr	r2, [pc, #8]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076e0:	60d3      	str	r3, [r2, #12]
 80076e2:	e013      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x534>
 80076e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076f0:	d10c      	bne.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	3304      	adds	r3, #4
 80076f6:	2101      	movs	r1, #1
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 f869 	bl	80077d0 <RCCEx_PLLSAI1_Config>
 80076fe:	4603      	mov	r3, r0
 8007700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007702:	7cfb      	ldrb	r3, [r7, #19]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8007708:	7cfb      	ldrb	r3, [r7, #19]
 800770a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d02f      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007718:	4b2c      	ldr	r3, [pc, #176]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800771a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800771e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007726:	4929      	ldr	r1, [pc, #164]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007728:	4313      	orrs	r3, r2
 800772a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007732:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007736:	d10d      	bne.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3304      	adds	r3, #4
 800773c:	2102      	movs	r1, #2
 800773e:	4618      	mov	r0, r3
 8007740:	f000 f846 	bl	80077d0 <RCCEx_PLLSAI1_Config>
 8007744:	4603      	mov	r3, r0
 8007746:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007748:	7cfb      	ldrb	r3, [r7, #19]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d014      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800774e:	7cfb      	ldrb	r3, [r7, #19]
 8007750:	74bb      	strb	r3, [r7, #18]
 8007752:	e011      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007758:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800775c:	d10c      	bne.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3320      	adds	r3, #32
 8007762:	2102      	movs	r1, #2
 8007764:	4618      	mov	r0, r3
 8007766:	f000 f925 	bl	80079b4 <RCCEx_PLLSAI2_Config>
 800776a:	4603      	mov	r3, r0
 800776c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800776e:	7cfb      	ldrb	r3, [r7, #19]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8007774:	7cfb      	ldrb	r3, [r7, #19]
 8007776:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00b      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007784:	4b11      	ldr	r3, [pc, #68]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800778a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007794:	490d      	ldr	r1, [pc, #52]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007796:	4313      	orrs	r3, r2
 8007798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00b      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80077a8:	4b08      	ldr	r3, [pc, #32]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80077aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077b8:	4904      	ldr	r1, [pc, #16]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80077c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	40021000 	.word	0x40021000

080077d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80077de:	4b74      	ldr	r3, [pc, #464]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d018      	beq.n	800781c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80077ea:	4b71      	ldr	r3, [pc, #452]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f003 0203 	and.w	r2, r3, #3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d10d      	bne.n	8007816 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
       ||
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d009      	beq.n	8007816 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007802:	4b6b      	ldr	r3, [pc, #428]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	091b      	lsrs	r3, r3, #4
 8007808:	f003 0307 	and.w	r3, r3, #7
 800780c:	1c5a      	adds	r2, r3, #1
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
       ||
 8007812:	429a      	cmp	r2, r3
 8007814:	d047      	beq.n	80078a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	73fb      	strb	r3, [r7, #15]
 800781a:	e044      	b.n	80078a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b03      	cmp	r3, #3
 8007822:	d018      	beq.n	8007856 <RCCEx_PLLSAI1_Config+0x86>
 8007824:	2b03      	cmp	r3, #3
 8007826:	d825      	bhi.n	8007874 <RCCEx_PLLSAI1_Config+0xa4>
 8007828:	2b01      	cmp	r3, #1
 800782a:	d002      	beq.n	8007832 <RCCEx_PLLSAI1_Config+0x62>
 800782c:	2b02      	cmp	r3, #2
 800782e:	d009      	beq.n	8007844 <RCCEx_PLLSAI1_Config+0x74>
 8007830:	e020      	b.n	8007874 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007832:	4b5f      	ldr	r3, [pc, #380]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d11d      	bne.n	800787a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007842:	e01a      	b.n	800787a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007844:	4b5a      	ldr	r3, [pc, #360]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800784c:	2b00      	cmp	r3, #0
 800784e:	d116      	bne.n	800787e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007854:	e013      	b.n	800787e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007856:	4b56      	ldr	r3, [pc, #344]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10f      	bne.n	8007882 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007862:	4b53      	ldr	r3, [pc, #332]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d109      	bne.n	8007882 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007872:	e006      	b.n	8007882 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	73fb      	strb	r3, [r7, #15]
      break;
 8007878:	e004      	b.n	8007884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800787a:	bf00      	nop
 800787c:	e002      	b.n	8007884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800787e:	bf00      	nop
 8007880:	e000      	b.n	8007884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007882:	bf00      	nop
    }

    if(status == HAL_OK)
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10d      	bne.n	80078a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800788a:	4b49      	ldr	r3, [pc, #292]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6819      	ldr	r1, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	3b01      	subs	r3, #1
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	430b      	orrs	r3, r1
 80078a0:	4943      	ldr	r1, [pc, #268]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d17c      	bne.n	80079a6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80078ac:	4b40      	ldr	r3, [pc, #256]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a3f      	ldr	r2, [pc, #252]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80078b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078b8:	f7fb fc1a 	bl	80030f0 <HAL_GetTick>
 80078bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80078be:	e009      	b.n	80078d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078c0:	f7fb fc16 	bl	80030f0 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d902      	bls.n	80078d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	73fb      	strb	r3, [r7, #15]
        break;
 80078d2:	e005      	b.n	80078e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80078d4:	4b36      	ldr	r3, [pc, #216]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1ef      	bne.n	80078c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d15f      	bne.n	80079a6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d110      	bne.n	800790e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80078ec:	4b30      	ldr	r3, [pc, #192]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80078f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	6892      	ldr	r2, [r2, #8]
 80078fc:	0211      	lsls	r1, r2, #8
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	68d2      	ldr	r2, [r2, #12]
 8007902:	06d2      	lsls	r2, r2, #27
 8007904:	430a      	orrs	r2, r1
 8007906:	492a      	ldr	r1, [pc, #168]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007908:	4313      	orrs	r3, r2
 800790a:	610b      	str	r3, [r1, #16]
 800790c:	e027      	b.n	800795e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d112      	bne.n	800793a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007914:	4b26      	ldr	r3, [pc, #152]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800791c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6892      	ldr	r2, [r2, #8]
 8007924:	0211      	lsls	r1, r2, #8
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	6912      	ldr	r2, [r2, #16]
 800792a:	0852      	lsrs	r2, r2, #1
 800792c:	3a01      	subs	r2, #1
 800792e:	0552      	lsls	r2, r2, #21
 8007930:	430a      	orrs	r2, r1
 8007932:	491f      	ldr	r1, [pc, #124]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007934:	4313      	orrs	r3, r2
 8007936:	610b      	str	r3, [r1, #16]
 8007938:	e011      	b.n	800795e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800793a:	4b1d      	ldr	r3, [pc, #116]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007942:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	6892      	ldr	r2, [r2, #8]
 800794a:	0211      	lsls	r1, r2, #8
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	6952      	ldr	r2, [r2, #20]
 8007950:	0852      	lsrs	r2, r2, #1
 8007952:	3a01      	subs	r2, #1
 8007954:	0652      	lsls	r2, r2, #25
 8007956:	430a      	orrs	r2, r1
 8007958:	4915      	ldr	r1, [pc, #84]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800795a:	4313      	orrs	r3, r2
 800795c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800795e:	4b14      	ldr	r3, [pc, #80]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a13      	ldr	r2, [pc, #76]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007964:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007968:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800796a:	f7fb fbc1 	bl	80030f0 <HAL_GetTick>
 800796e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007970:	e009      	b.n	8007986 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007972:	f7fb fbbd 	bl	80030f0 <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	2b02      	cmp	r3, #2
 800797e:	d902      	bls.n	8007986 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	73fb      	strb	r3, [r7, #15]
          break;
 8007984:	e005      	b.n	8007992 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007986:	4b0a      	ldr	r3, [pc, #40]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0ef      	beq.n	8007972 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007992:	7bfb      	ldrb	r3, [r7, #15]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d106      	bne.n	80079a6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007998:	4b05      	ldr	r3, [pc, #20]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800799a:	691a      	ldr	r2, [r3, #16]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	4903      	ldr	r1, [pc, #12]	@ (80079b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	40021000 	.word	0x40021000

080079b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80079c2:	4b69      	ldr	r3, [pc, #420]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	f003 0303 	and.w	r3, r3, #3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d018      	beq.n	8007a00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80079ce:	4b66      	ldr	r3, [pc, #408]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	f003 0203 	and.w	r2, r3, #3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d10d      	bne.n	80079fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
       ||
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d009      	beq.n	80079fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80079e6:	4b60      	ldr	r3, [pc, #384]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	091b      	lsrs	r3, r3, #4
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
       ||
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d047      	beq.n	8007a8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	73fb      	strb	r3, [r7, #15]
 80079fe:	e044      	b.n	8007a8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	d018      	beq.n	8007a3a <RCCEx_PLLSAI2_Config+0x86>
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d825      	bhi.n	8007a58 <RCCEx_PLLSAI2_Config+0xa4>
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d002      	beq.n	8007a16 <RCCEx_PLLSAI2_Config+0x62>
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d009      	beq.n	8007a28 <RCCEx_PLLSAI2_Config+0x74>
 8007a14:	e020      	b.n	8007a58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a16:	4b54      	ldr	r3, [pc, #336]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d11d      	bne.n	8007a5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a26:	e01a      	b.n	8007a5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a28:	4b4f      	ldr	r3, [pc, #316]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d116      	bne.n	8007a62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a38:	e013      	b.n	8007a62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10f      	bne.n	8007a66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007a46:	4b48      	ldr	r3, [pc, #288]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d109      	bne.n	8007a66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a56:	e006      	b.n	8007a66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a5c:	e004      	b.n	8007a68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007a5e:	bf00      	nop
 8007a60:	e002      	b.n	8007a68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007a62:	bf00      	nop
 8007a64:	e000      	b.n	8007a68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007a66:	bf00      	nop
    }

    if(status == HAL_OK)
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10d      	bne.n	8007a8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6819      	ldr	r1, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	011b      	lsls	r3, r3, #4
 8007a82:	430b      	orrs	r3, r1
 8007a84:	4938      	ldr	r1, [pc, #224]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d166      	bne.n	8007b5e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007a90:	4b35      	ldr	r3, [pc, #212]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a34      	ldr	r2, [pc, #208]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a9c:	f7fb fb28 	bl	80030f0 <HAL_GetTick>
 8007aa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007aa2:	e009      	b.n	8007ab8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007aa4:	f7fb fb24 	bl	80030f0 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d902      	bls.n	8007ab8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	73fb      	strb	r3, [r7, #15]
        break;
 8007ab6:	e005      	b.n	8007ac4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1ef      	bne.n	8007aa4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d149      	bne.n	8007b5e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d110      	bne.n	8007af2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007ad0:	4b25      	ldr	r3, [pc, #148]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007ad8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	6892      	ldr	r2, [r2, #8]
 8007ae0:	0211      	lsls	r1, r2, #8
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	68d2      	ldr	r2, [r2, #12]
 8007ae6:	06d2      	lsls	r2, r2, #27
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	491f      	ldr	r1, [pc, #124]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	614b      	str	r3, [r1, #20]
 8007af0:	e011      	b.n	8007b16 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007af2:	4b1d      	ldr	r3, [pc, #116]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007afa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	6892      	ldr	r2, [r2, #8]
 8007b02:	0211      	lsls	r1, r2, #8
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	6912      	ldr	r2, [r2, #16]
 8007b08:	0852      	lsrs	r2, r2, #1
 8007b0a:	3a01      	subs	r2, #1
 8007b0c:	0652      	lsls	r2, r2, #25
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	4915      	ldr	r1, [pc, #84]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007b16:	4b14      	ldr	r3, [pc, #80]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a13      	ldr	r2, [pc, #76]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b20:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b22:	f7fb fae5 	bl	80030f0 <HAL_GetTick>
 8007b26:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007b28:	e009      	b.n	8007b3e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007b2a:	f7fb fae1 	bl	80030f0 <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d902      	bls.n	8007b3e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	73fb      	strb	r3, [r7, #15]
          break;
 8007b3c:	e005      	b.n	8007b4a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d0ef      	beq.n	8007b2a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d106      	bne.n	8007b5e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007b50:	4b05      	ldr	r3, [pc, #20]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b52:	695a      	ldr	r2, [r3, #20]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	4903      	ldr	r1, [pc, #12]	@ (8007b68 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	40021000 	.word	0x40021000

08007b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e049      	b.n	8007c12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d106      	bne.n	8007b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f841 	bl	8007c1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	4619      	mov	r1, r3
 8007baa:	4610      	mov	r0, r2
 8007bac:	f000 f9e0 	bl	8007f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007c22:	bf00      	nop
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
	...

08007c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d001      	beq.n	8007c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e04f      	b.n	8007ce8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0201 	orr.w	r2, r2, #1
 8007c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a23      	ldr	r2, [pc, #140]	@ (8007cf4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d01d      	beq.n	8007ca6 <HAL_TIM_Base_Start_IT+0x76>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c72:	d018      	beq.n	8007ca6 <HAL_TIM_Base_Start_IT+0x76>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a1f      	ldr	r2, [pc, #124]	@ (8007cf8 <HAL_TIM_Base_Start_IT+0xc8>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d013      	beq.n	8007ca6 <HAL_TIM_Base_Start_IT+0x76>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a1e      	ldr	r2, [pc, #120]	@ (8007cfc <HAL_TIM_Base_Start_IT+0xcc>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d00e      	beq.n	8007ca6 <HAL_TIM_Base_Start_IT+0x76>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8007d00 <HAL_TIM_Base_Start_IT+0xd0>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d009      	beq.n	8007ca6 <HAL_TIM_Base_Start_IT+0x76>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a1b      	ldr	r2, [pc, #108]	@ (8007d04 <HAL_TIM_Base_Start_IT+0xd4>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d004      	beq.n	8007ca6 <HAL_TIM_Base_Start_IT+0x76>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a19      	ldr	r2, [pc, #100]	@ (8007d08 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d115      	bne.n	8007cd2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689a      	ldr	r2, [r3, #8]
 8007cac:	4b17      	ldr	r3, [pc, #92]	@ (8007d0c <HAL_TIM_Base_Start_IT+0xdc>)
 8007cae:	4013      	ands	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b06      	cmp	r3, #6
 8007cb6:	d015      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0xb4>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cbe:	d011      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f042 0201 	orr.w	r2, r2, #1
 8007cce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd0:	e008      	b.n	8007ce4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f042 0201 	orr.w	r2, r2, #1
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	e000      	b.n	8007ce6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	40012c00 	.word	0x40012c00
 8007cf8:	40000400 	.word	0x40000400
 8007cfc:	40000800 	.word	0x40000800
 8007d00:	40000c00 	.word	0x40000c00
 8007d04:	40013400 	.word	0x40013400
 8007d08:	40014000 	.word	0x40014000
 8007d0c:	00010007 	.word	0x00010007

08007d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d020      	beq.n	8007d74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f003 0302 	and.w	r3, r3, #2
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d01b      	beq.n	8007d74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f06f 0202 	mvn.w	r2, #2
 8007d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	f003 0303 	and.w	r3, r3, #3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d003      	beq.n	8007d62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f8e9 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007d60:	e005      	b.n	8007d6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f8db 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f8ec 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	f003 0304 	and.w	r3, r3, #4
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d020      	beq.n	8007dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f003 0304 	and.w	r3, r3, #4
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d01b      	beq.n	8007dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f06f 0204 	mvn.w	r2, #4
 8007d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2202      	movs	r2, #2
 8007d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f8c3 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007dac:	e005      	b.n	8007dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f8b5 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f8c6 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	f003 0308 	and.w	r3, r3, #8
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d020      	beq.n	8007e0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f003 0308 	and.w	r3, r3, #8
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d01b      	beq.n	8007e0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f06f 0208 	mvn.w	r2, #8
 8007ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2204      	movs	r2, #4
 8007de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	69db      	ldr	r3, [r3, #28]
 8007dea:	f003 0303 	and.w	r3, r3, #3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f89d 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007df8:	e005      	b.n	8007e06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f88f 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f8a0 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f003 0310 	and.w	r3, r3, #16
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d020      	beq.n	8007e58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f003 0310 	and.w	r3, r3, #16
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d01b      	beq.n	8007e58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f06f 0210 	mvn.w	r2, #16
 8007e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2208      	movs	r2, #8
 8007e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	69db      	ldr	r3, [r3, #28]
 8007e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f877 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007e44:	e005      	b.n	8007e52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f869 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f87a 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00c      	beq.n	8007e7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d007      	beq.n	8007e7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f06f 0201 	mvn.w	r2, #1
 8007e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7f9 fd6c 	bl	8001954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d104      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00c      	beq.n	8007eaa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d007      	beq.n	8007eaa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f913 	bl	80080d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00c      	beq.n	8007ece <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d007      	beq.n	8007ece <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f90b 	bl	80080e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00c      	beq.n	8007ef2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d007      	beq.n	8007ef2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f834 	bl	8007f5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f003 0320 	and.w	r3, r3, #32
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00c      	beq.n	8007f16 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d007      	beq.n	8007f16 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f06f 0220 	mvn.w	r2, #32
 8007f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f8d3 	bl	80080bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f16:	bf00      	nop
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b083      	sub	sp, #12
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f4e:	bf00      	nop
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
	...

08007f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a46      	ldr	r2, [pc, #280]	@ (800809c <TIM_Base_SetConfig+0x12c>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d013      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f8e:	d00f      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a43      	ldr	r2, [pc, #268]	@ (80080a0 <TIM_Base_SetConfig+0x130>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d00b      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a42      	ldr	r2, [pc, #264]	@ (80080a4 <TIM_Base_SetConfig+0x134>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d007      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a41      	ldr	r2, [pc, #260]	@ (80080a8 <TIM_Base_SetConfig+0x138>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d003      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a40      	ldr	r2, [pc, #256]	@ (80080ac <TIM_Base_SetConfig+0x13c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d108      	bne.n	8007fc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a35      	ldr	r2, [pc, #212]	@ (800809c <TIM_Base_SetConfig+0x12c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d01f      	beq.n	800800a <TIM_Base_SetConfig+0x9a>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fd0:	d01b      	beq.n	800800a <TIM_Base_SetConfig+0x9a>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a32      	ldr	r2, [pc, #200]	@ (80080a0 <TIM_Base_SetConfig+0x130>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d017      	beq.n	800800a <TIM_Base_SetConfig+0x9a>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a31      	ldr	r2, [pc, #196]	@ (80080a4 <TIM_Base_SetConfig+0x134>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d013      	beq.n	800800a <TIM_Base_SetConfig+0x9a>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a30      	ldr	r2, [pc, #192]	@ (80080a8 <TIM_Base_SetConfig+0x138>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00f      	beq.n	800800a <TIM_Base_SetConfig+0x9a>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a2f      	ldr	r2, [pc, #188]	@ (80080ac <TIM_Base_SetConfig+0x13c>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d00b      	beq.n	800800a <TIM_Base_SetConfig+0x9a>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80080b0 <TIM_Base_SetConfig+0x140>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d007      	beq.n	800800a <TIM_Base_SetConfig+0x9a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a2d      	ldr	r2, [pc, #180]	@ (80080b4 <TIM_Base_SetConfig+0x144>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d003      	beq.n	800800a <TIM_Base_SetConfig+0x9a>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a2c      	ldr	r2, [pc, #176]	@ (80080b8 <TIM_Base_SetConfig+0x148>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d108      	bne.n	800801c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	4313      	orrs	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a16      	ldr	r2, [pc, #88]	@ (800809c <TIM_Base_SetConfig+0x12c>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d00f      	beq.n	8008068 <TIM_Base_SetConfig+0xf8>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a18      	ldr	r2, [pc, #96]	@ (80080ac <TIM_Base_SetConfig+0x13c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d00b      	beq.n	8008068 <TIM_Base_SetConfig+0xf8>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a17      	ldr	r2, [pc, #92]	@ (80080b0 <TIM_Base_SetConfig+0x140>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d007      	beq.n	8008068 <TIM_Base_SetConfig+0xf8>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a16      	ldr	r2, [pc, #88]	@ (80080b4 <TIM_Base_SetConfig+0x144>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d003      	beq.n	8008068 <TIM_Base_SetConfig+0xf8>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a15      	ldr	r2, [pc, #84]	@ (80080b8 <TIM_Base_SetConfig+0x148>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d103      	bne.n	8008070 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	691a      	ldr	r2, [r3, #16]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	2b01      	cmp	r3, #1
 8008080:	d105      	bne.n	800808e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	f023 0201 	bic.w	r2, r3, #1
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	611a      	str	r2, [r3, #16]
  }
}
 800808e:	bf00      	nop
 8008090:	3714      	adds	r7, #20
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	40012c00 	.word	0x40012c00
 80080a0:	40000400 	.word	0x40000400
 80080a4:	40000800 	.word	0x40000800
 80080a8:	40000c00 	.word	0x40000c00
 80080ac:	40013400 	.word	0x40013400
 80080b0:	40014000 	.word	0x40014000
 80080b4:	40014400 	.word	0x40014400
 80080b8:	40014800 	.word	0x40014800

080080bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e040      	b.n	800818c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800810e:	2b00      	cmp	r3, #0
 8008110:	d106      	bne.n	8008120 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7f9 fdfa 	bl	8001d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2224      	movs	r2, #36	@ 0x24
 8008124:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f022 0201 	bic.w	r2, r2, #1
 8008134:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fe52 	bl	8008de8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fb97 	bl	8008878 <UART_SetConfig>
 800814a:	4603      	mov	r3, r0
 800814c:	2b01      	cmp	r3, #1
 800814e:	d101      	bne.n	8008154 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e01b      	b.n	800818c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008162:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689a      	ldr	r2, [r3, #8]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008172:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f042 0201 	orr.w	r2, r2, #1
 8008182:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fed1 	bl	8008f2c <UART_CheckIdleState>
 800818a:	4603      	mov	r3, r0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08a      	sub	sp, #40	@ 0x28
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	4613      	mov	r3, r2
 80081a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081a8:	2b20      	cmp	r3, #32
 80081aa:	d137      	bne.n	800821c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <HAL_UART_Receive_IT+0x24>
 80081b2:	88fb      	ldrh	r3, [r7, #6]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e030      	b.n	800821e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a18      	ldr	r2, [pc, #96]	@ (8008228 <HAL_UART_Receive_IT+0x94>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d01f      	beq.n	800820c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d018      	beq.n	800820c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	e853 3f00 	ldrex	r3, [r3]
 80081e6:	613b      	str	r3, [r7, #16]
   return(result);
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	461a      	mov	r2, r3
 80081f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f8:	623b      	str	r3, [r7, #32]
 80081fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fc:	69f9      	ldr	r1, [r7, #28]
 80081fe:	6a3a      	ldr	r2, [r7, #32]
 8008200:	e841 2300 	strex	r3, r2, [r1]
 8008204:	61bb      	str	r3, [r7, #24]
   return(result);
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1e6      	bne.n	80081da <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800820c:	88fb      	ldrh	r3, [r7, #6]
 800820e:	461a      	mov	r2, r3
 8008210:	68b9      	ldr	r1, [r7, #8]
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f000 ffa0 	bl	8009158 <UART_Start_Receive_IT>
 8008218:	4603      	mov	r3, r0
 800821a:	e000      	b.n	800821e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800821c:	2302      	movs	r3, #2
  }
}
 800821e:	4618      	mov	r0, r3
 8008220:	3728      	adds	r7, #40	@ 0x28
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	40008000 	.word	0x40008000

0800822c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b0ba      	sub	sp, #232	@ 0xe8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008252:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008256:	f640 030f 	movw	r3, #2063	@ 0x80f
 800825a:	4013      	ands	r3, r2
 800825c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008260:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008264:	2b00      	cmp	r3, #0
 8008266:	d115      	bne.n	8008294 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800826c:	f003 0320 	and.w	r3, r3, #32
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00f      	beq.n	8008294 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008278:	f003 0320 	and.w	r3, r3, #32
 800827c:	2b00      	cmp	r3, #0
 800827e:	d009      	beq.n	8008294 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 82ca 	beq.w	800881e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	4798      	blx	r3
      }
      return;
 8008292:	e2c4      	b.n	800881e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 8117 	beq.w	80084cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800829e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d106      	bne.n	80082b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80082aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80082ae:	4b85      	ldr	r3, [pc, #532]	@ (80084c4 <HAL_UART_IRQHandler+0x298>)
 80082b0:	4013      	ands	r3, r2
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 810a 	beq.w	80084cc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d011      	beq.n	80082e8 <HAL_UART_IRQHandler+0xbc>
 80082c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00b      	beq.n	80082e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2201      	movs	r2, #1
 80082d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082de:	f043 0201 	orr.w	r2, r3, #1
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082ec:	f003 0302 	and.w	r3, r3, #2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d011      	beq.n	8008318 <HAL_UART_IRQHandler+0xec>
 80082f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00b      	beq.n	8008318 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2202      	movs	r2, #2
 8008306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800830e:	f043 0204 	orr.w	r2, r3, #4
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b00      	cmp	r3, #0
 8008322:	d011      	beq.n	8008348 <HAL_UART_IRQHandler+0x11c>
 8008324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008328:	f003 0301 	and.w	r3, r3, #1
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00b      	beq.n	8008348 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2204      	movs	r2, #4
 8008336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800833e:	f043 0202 	orr.w	r2, r3, #2
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800834c:	f003 0308 	and.w	r3, r3, #8
 8008350:	2b00      	cmp	r3, #0
 8008352:	d017      	beq.n	8008384 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b00      	cmp	r3, #0
 800835e:	d105      	bne.n	800836c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008364:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00b      	beq.n	8008384 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2208      	movs	r2, #8
 8008372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800837a:	f043 0208 	orr.w	r2, r3, #8
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800838c:	2b00      	cmp	r3, #0
 800838e:	d012      	beq.n	80083b6 <HAL_UART_IRQHandler+0x18a>
 8008390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008394:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00c      	beq.n	80083b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80083a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083ac:	f043 0220 	orr.w	r2, r3, #32
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 8230 	beq.w	8008822 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80083c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083c6:	f003 0320 	and.w	r3, r3, #32
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00d      	beq.n	80083ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80083ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083d2:	f003 0320 	and.w	r3, r3, #32
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d007      	beq.n	80083ea <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083fe:	2b40      	cmp	r3, #64	@ 0x40
 8008400:	d005      	beq.n	800840e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008406:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800840a:	2b00      	cmp	r3, #0
 800840c:	d04f      	beq.n	80084ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 ff68 	bl	80092e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800841e:	2b40      	cmp	r3, #64	@ 0x40
 8008420:	d141      	bne.n	80084a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3308      	adds	r3, #8
 8008428:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008438:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800843c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008440:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3308      	adds	r3, #8
 800844a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800844e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008452:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008456:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800845a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800845e:	e841 2300 	strex	r3, r2, [r1]
 8008462:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1d9      	bne.n	8008422 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008472:	2b00      	cmp	r3, #0
 8008474:	d013      	beq.n	800849e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800847a:	4a13      	ldr	r2, [pc, #76]	@ (80084c8 <HAL_UART_IRQHandler+0x29c>)
 800847c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008482:	4618      	mov	r0, r3
 8008484:	f7fc feb4 	bl	80051f0 <HAL_DMA_Abort_IT>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d017      	beq.n	80084be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008498:	4610      	mov	r0, r2
 800849a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800849c:	e00f      	b.n	80084be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f9d4 	bl	800884c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084a4:	e00b      	b.n	80084be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f9d0 	bl	800884c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ac:	e007      	b.n	80084be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f9cc 	bl	800884c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80084bc:	e1b1      	b.n	8008822 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084be:	bf00      	nop
    return;
 80084c0:	e1af      	b.n	8008822 <HAL_UART_IRQHandler+0x5f6>
 80084c2:	bf00      	nop
 80084c4:	04000120 	.word	0x04000120
 80084c8:	080093ad 	.word	0x080093ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	f040 816a 	bne.w	80087aa <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80084d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084da:	f003 0310 	and.w	r3, r3, #16
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f000 8163 	beq.w	80087aa <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80084e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084e8:	f003 0310 	and.w	r3, r3, #16
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 815c 	beq.w	80087aa <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2210      	movs	r2, #16
 80084f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008504:	2b40      	cmp	r3, #64	@ 0x40
 8008506:	f040 80d4 	bne.w	80086b2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008516:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 80ad 	beq.w	800867a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800852a:	429a      	cmp	r2, r3
 800852c:	f080 80a5 	bcs.w	800867a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008536:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0320 	and.w	r3, r3, #32
 8008546:	2b00      	cmp	r3, #0
 8008548:	f040 8086 	bne.w	8008658 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008558:	e853 3f00 	ldrex	r3, [r3]
 800855c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008560:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008568:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	461a      	mov	r2, r3
 8008572:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008576:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800857a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008582:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800858e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1da      	bne.n	800854c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3308      	adds	r3, #8
 800859c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80085a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80085a8:	f023 0301 	bic.w	r3, r3, #1
 80085ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	3308      	adds	r3, #8
 80085b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80085ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80085be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80085c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80085c6:	e841 2300 	strex	r3, r2, [r1]
 80085ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80085cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1e1      	bne.n	8008596 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3308      	adds	r3, #8
 80085d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80085e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3308      	adds	r3, #8
 80085f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80085f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80085f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80085fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80085fe:	e841 2300 	strex	r3, r2, [r1]
 8008602:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008604:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1e3      	bne.n	80085d2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2220      	movs	r2, #32
 800860e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008628:	f023 0310 	bic.w	r3, r3, #16
 800862c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	461a      	mov	r2, r3
 8008636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800863a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800863c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008640:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008642:	e841 2300 	strex	r3, r2, [r1]
 8008646:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1e4      	bne.n	8008618 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008652:	4618      	mov	r0, r3
 8008654:	f7fc fd8e 	bl	8005174 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2202      	movs	r2, #2
 800865c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800866a:	b29b      	uxth	r3, r3
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	b29b      	uxth	r3, r3
 8008670:	4619      	mov	r1, r3
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f8f4 	bl	8008860 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008678:	e0d5      	b.n	8008826 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008680:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008684:	429a      	cmp	r2, r3
 8008686:	f040 80ce 	bne.w	8008826 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0320 	and.w	r3, r3, #32
 8008696:	2b20      	cmp	r3, #32
 8008698:	f040 80c5 	bne.w	8008826 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2202      	movs	r2, #2
 80086a0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f8d8 	bl	8008860 <HAL_UARTEx_RxEventCallback>
      return;
 80086b0:	e0b9      	b.n	8008826 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80086be:	b29b      	uxth	r3, r3
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 80ab 	beq.w	800882a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80086d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 80a6 	beq.w	800882a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e6:	e853 3f00 	ldrex	r3, [r3]
 80086ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008700:	647b      	str	r3, [r7, #68]	@ 0x44
 8008702:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008704:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008706:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008708:	e841 2300 	strex	r3, r2, [r1]
 800870c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800870e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e4      	bne.n	80086de <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3308      	adds	r3, #8
 800871a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871e:	e853 3f00 	ldrex	r3, [r3]
 8008722:	623b      	str	r3, [r7, #32]
   return(result);
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	f023 0301 	bic.w	r3, r3, #1
 800872a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3308      	adds	r3, #8
 8008734:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008738:	633a      	str	r2, [r7, #48]	@ 0x30
 800873a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800873e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008740:	e841 2300 	strex	r3, r2, [r1]
 8008744:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1e3      	bne.n	8008714 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2220      	movs	r2, #32
 8008750:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	e853 3f00 	ldrex	r3, [r3]
 800876c:	60fb      	str	r3, [r7, #12]
   return(result);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f023 0310 	bic.w	r3, r3, #16
 8008774:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	461a      	mov	r2, r3
 800877e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008782:	61fb      	str	r3, [r7, #28]
 8008784:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008786:	69b9      	ldr	r1, [r7, #24]
 8008788:	69fa      	ldr	r2, [r7, #28]
 800878a:	e841 2300 	strex	r3, r2, [r1]
 800878e:	617b      	str	r3, [r7, #20]
   return(result);
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1e4      	bne.n	8008760 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2202      	movs	r2, #2
 800879a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800879c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f85c 	bl	8008860 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087a8:	e03f      	b.n	800882a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80087aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00e      	beq.n	80087d4 <HAL_UART_IRQHandler+0x5a8>
 80087b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d008      	beq.n	80087d4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80087ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 ffe9 	bl	80097a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087d2:	e02d      	b.n	8008830 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80087d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00e      	beq.n	80087fe <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80087e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d008      	beq.n	80087fe <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d01c      	beq.n	800882e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	4798      	blx	r3
    }
    return;
 80087fc:	e017      	b.n	800882e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80087fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008806:	2b00      	cmp	r3, #0
 8008808:	d012      	beq.n	8008830 <HAL_UART_IRQHandler+0x604>
 800880a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800880e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00c      	beq.n	8008830 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fdde 	bl	80093d8 <UART_EndTransmit_IT>
    return;
 800881c:	e008      	b.n	8008830 <HAL_UART_IRQHandler+0x604>
      return;
 800881e:	bf00      	nop
 8008820:	e006      	b.n	8008830 <HAL_UART_IRQHandler+0x604>
    return;
 8008822:	bf00      	nop
 8008824:	e004      	b.n	8008830 <HAL_UART_IRQHandler+0x604>
      return;
 8008826:	bf00      	nop
 8008828:	e002      	b.n	8008830 <HAL_UART_IRQHandler+0x604>
      return;
 800882a:	bf00      	nop
 800882c:	e000      	b.n	8008830 <HAL_UART_IRQHandler+0x604>
    return;
 800882e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008830:	37e8      	adds	r7, #232	@ 0xe8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop

08008838 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800887c:	b08a      	sub	sp, #40	@ 0x28
 800887e:	af00      	add	r7, sp, #0
 8008880:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	689a      	ldr	r2, [r3, #8]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	431a      	orrs	r2, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	431a      	orrs	r2, r3
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	69db      	ldr	r3, [r3, #28]
 800889c:	4313      	orrs	r3, r2
 800889e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	4ba4      	ldr	r3, [pc, #656]	@ (8008b38 <UART_SetConfig+0x2c0>)
 80088a8:	4013      	ands	r3, r2
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	6812      	ldr	r2, [r2, #0]
 80088ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80088b0:	430b      	orrs	r3, r1
 80088b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	68da      	ldr	r2, [r3, #12]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	430a      	orrs	r2, r1
 80088c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a99      	ldr	r2, [pc, #612]	@ (8008b3c <UART_SetConfig+0x2c4>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d004      	beq.n	80088e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088e0:	4313      	orrs	r3, r2
 80088e2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088f4:	430a      	orrs	r2, r1
 80088f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a90      	ldr	r2, [pc, #576]	@ (8008b40 <UART_SetConfig+0x2c8>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d126      	bne.n	8008950 <UART_SetConfig+0xd8>
 8008902:	4b90      	ldr	r3, [pc, #576]	@ (8008b44 <UART_SetConfig+0x2cc>)
 8008904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008908:	f003 0303 	and.w	r3, r3, #3
 800890c:	2b03      	cmp	r3, #3
 800890e:	d81b      	bhi.n	8008948 <UART_SetConfig+0xd0>
 8008910:	a201      	add	r2, pc, #4	@ (adr r2, 8008918 <UART_SetConfig+0xa0>)
 8008912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008916:	bf00      	nop
 8008918:	08008929 	.word	0x08008929
 800891c:	08008939 	.word	0x08008939
 8008920:	08008931 	.word	0x08008931
 8008924:	08008941 	.word	0x08008941
 8008928:	2301      	movs	r3, #1
 800892a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800892e:	e116      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008930:	2302      	movs	r3, #2
 8008932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008936:	e112      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008938:	2304      	movs	r3, #4
 800893a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800893e:	e10e      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008940:	2308      	movs	r3, #8
 8008942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008946:	e10a      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008948:	2310      	movs	r3, #16
 800894a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800894e:	e106      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a7c      	ldr	r2, [pc, #496]	@ (8008b48 <UART_SetConfig+0x2d0>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d138      	bne.n	80089cc <UART_SetConfig+0x154>
 800895a:	4b7a      	ldr	r3, [pc, #488]	@ (8008b44 <UART_SetConfig+0x2cc>)
 800895c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008960:	f003 030c 	and.w	r3, r3, #12
 8008964:	2b0c      	cmp	r3, #12
 8008966:	d82d      	bhi.n	80089c4 <UART_SetConfig+0x14c>
 8008968:	a201      	add	r2, pc, #4	@ (adr r2, 8008970 <UART_SetConfig+0xf8>)
 800896a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896e:	bf00      	nop
 8008970:	080089a5 	.word	0x080089a5
 8008974:	080089c5 	.word	0x080089c5
 8008978:	080089c5 	.word	0x080089c5
 800897c:	080089c5 	.word	0x080089c5
 8008980:	080089b5 	.word	0x080089b5
 8008984:	080089c5 	.word	0x080089c5
 8008988:	080089c5 	.word	0x080089c5
 800898c:	080089c5 	.word	0x080089c5
 8008990:	080089ad 	.word	0x080089ad
 8008994:	080089c5 	.word	0x080089c5
 8008998:	080089c5 	.word	0x080089c5
 800899c:	080089c5 	.word	0x080089c5
 80089a0:	080089bd 	.word	0x080089bd
 80089a4:	2300      	movs	r3, #0
 80089a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089aa:	e0d8      	b.n	8008b5e <UART_SetConfig+0x2e6>
 80089ac:	2302      	movs	r3, #2
 80089ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089b2:	e0d4      	b.n	8008b5e <UART_SetConfig+0x2e6>
 80089b4:	2304      	movs	r3, #4
 80089b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089ba:	e0d0      	b.n	8008b5e <UART_SetConfig+0x2e6>
 80089bc:	2308      	movs	r3, #8
 80089be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089c2:	e0cc      	b.n	8008b5e <UART_SetConfig+0x2e6>
 80089c4:	2310      	movs	r3, #16
 80089c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089ca:	e0c8      	b.n	8008b5e <UART_SetConfig+0x2e6>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a5e      	ldr	r2, [pc, #376]	@ (8008b4c <UART_SetConfig+0x2d4>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d125      	bne.n	8008a22 <UART_SetConfig+0x1aa>
 80089d6:	4b5b      	ldr	r3, [pc, #364]	@ (8008b44 <UART_SetConfig+0x2cc>)
 80089d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80089e0:	2b30      	cmp	r3, #48	@ 0x30
 80089e2:	d016      	beq.n	8008a12 <UART_SetConfig+0x19a>
 80089e4:	2b30      	cmp	r3, #48	@ 0x30
 80089e6:	d818      	bhi.n	8008a1a <UART_SetConfig+0x1a2>
 80089e8:	2b20      	cmp	r3, #32
 80089ea:	d00a      	beq.n	8008a02 <UART_SetConfig+0x18a>
 80089ec:	2b20      	cmp	r3, #32
 80089ee:	d814      	bhi.n	8008a1a <UART_SetConfig+0x1a2>
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <UART_SetConfig+0x182>
 80089f4:	2b10      	cmp	r3, #16
 80089f6:	d008      	beq.n	8008a0a <UART_SetConfig+0x192>
 80089f8:	e00f      	b.n	8008a1a <UART_SetConfig+0x1a2>
 80089fa:	2300      	movs	r3, #0
 80089fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a00:	e0ad      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008a02:	2302      	movs	r3, #2
 8008a04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a08:	e0a9      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008a0a:	2304      	movs	r3, #4
 8008a0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a10:	e0a5      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008a12:	2308      	movs	r3, #8
 8008a14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a18:	e0a1      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008a1a:	2310      	movs	r3, #16
 8008a1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a20:	e09d      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a4a      	ldr	r2, [pc, #296]	@ (8008b50 <UART_SetConfig+0x2d8>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d125      	bne.n	8008a78 <UART_SetConfig+0x200>
 8008a2c:	4b45      	ldr	r3, [pc, #276]	@ (8008b44 <UART_SetConfig+0x2cc>)
 8008a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008a36:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a38:	d016      	beq.n	8008a68 <UART_SetConfig+0x1f0>
 8008a3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a3c:	d818      	bhi.n	8008a70 <UART_SetConfig+0x1f8>
 8008a3e:	2b80      	cmp	r3, #128	@ 0x80
 8008a40:	d00a      	beq.n	8008a58 <UART_SetConfig+0x1e0>
 8008a42:	2b80      	cmp	r3, #128	@ 0x80
 8008a44:	d814      	bhi.n	8008a70 <UART_SetConfig+0x1f8>
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <UART_SetConfig+0x1d8>
 8008a4a:	2b40      	cmp	r3, #64	@ 0x40
 8008a4c:	d008      	beq.n	8008a60 <UART_SetConfig+0x1e8>
 8008a4e:	e00f      	b.n	8008a70 <UART_SetConfig+0x1f8>
 8008a50:	2300      	movs	r3, #0
 8008a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a56:	e082      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008a58:	2302      	movs	r3, #2
 8008a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a5e:	e07e      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008a60:	2304      	movs	r3, #4
 8008a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a66:	e07a      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008a68:	2308      	movs	r3, #8
 8008a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a6e:	e076      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008a70:	2310      	movs	r3, #16
 8008a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a76:	e072      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a35      	ldr	r2, [pc, #212]	@ (8008b54 <UART_SetConfig+0x2dc>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d12a      	bne.n	8008ad8 <UART_SetConfig+0x260>
 8008a82:	4b30      	ldr	r3, [pc, #192]	@ (8008b44 <UART_SetConfig+0x2cc>)
 8008a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a90:	d01a      	beq.n	8008ac8 <UART_SetConfig+0x250>
 8008a92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a96:	d81b      	bhi.n	8008ad0 <UART_SetConfig+0x258>
 8008a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a9c:	d00c      	beq.n	8008ab8 <UART_SetConfig+0x240>
 8008a9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008aa2:	d815      	bhi.n	8008ad0 <UART_SetConfig+0x258>
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <UART_SetConfig+0x238>
 8008aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008aac:	d008      	beq.n	8008ac0 <UART_SetConfig+0x248>
 8008aae:	e00f      	b.n	8008ad0 <UART_SetConfig+0x258>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ab6:	e052      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008ab8:	2302      	movs	r3, #2
 8008aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008abe:	e04e      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008ac0:	2304      	movs	r3, #4
 8008ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ac6:	e04a      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008ac8:	2308      	movs	r3, #8
 8008aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ace:	e046      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008ad0:	2310      	movs	r3, #16
 8008ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ad6:	e042      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a17      	ldr	r2, [pc, #92]	@ (8008b3c <UART_SetConfig+0x2c4>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d13a      	bne.n	8008b58 <UART_SetConfig+0x2e0>
 8008ae2:	4b18      	ldr	r3, [pc, #96]	@ (8008b44 <UART_SetConfig+0x2cc>)
 8008ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ae8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008aec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008af0:	d01a      	beq.n	8008b28 <UART_SetConfig+0x2b0>
 8008af2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008af6:	d81b      	bhi.n	8008b30 <UART_SetConfig+0x2b8>
 8008af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008afc:	d00c      	beq.n	8008b18 <UART_SetConfig+0x2a0>
 8008afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b02:	d815      	bhi.n	8008b30 <UART_SetConfig+0x2b8>
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d003      	beq.n	8008b10 <UART_SetConfig+0x298>
 8008b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b0c:	d008      	beq.n	8008b20 <UART_SetConfig+0x2a8>
 8008b0e:	e00f      	b.n	8008b30 <UART_SetConfig+0x2b8>
 8008b10:	2300      	movs	r3, #0
 8008b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b16:	e022      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008b18:	2302      	movs	r3, #2
 8008b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b1e:	e01e      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008b20:	2304      	movs	r3, #4
 8008b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b26:	e01a      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008b28:	2308      	movs	r3, #8
 8008b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b2e:	e016      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008b30:	2310      	movs	r3, #16
 8008b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b36:	e012      	b.n	8008b5e <UART_SetConfig+0x2e6>
 8008b38:	efff69f3 	.word	0xefff69f3
 8008b3c:	40008000 	.word	0x40008000
 8008b40:	40013800 	.word	0x40013800
 8008b44:	40021000 	.word	0x40021000
 8008b48:	40004400 	.word	0x40004400
 8008b4c:	40004800 	.word	0x40004800
 8008b50:	40004c00 	.word	0x40004c00
 8008b54:	40005000 	.word	0x40005000
 8008b58:	2310      	movs	r3, #16
 8008b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a9f      	ldr	r2, [pc, #636]	@ (8008de0 <UART_SetConfig+0x568>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d17a      	bne.n	8008c5e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008b6c:	2b08      	cmp	r3, #8
 8008b6e:	d824      	bhi.n	8008bba <UART_SetConfig+0x342>
 8008b70:	a201      	add	r2, pc, #4	@ (adr r2, 8008b78 <UART_SetConfig+0x300>)
 8008b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b76:	bf00      	nop
 8008b78:	08008b9d 	.word	0x08008b9d
 8008b7c:	08008bbb 	.word	0x08008bbb
 8008b80:	08008ba5 	.word	0x08008ba5
 8008b84:	08008bbb 	.word	0x08008bbb
 8008b88:	08008bab 	.word	0x08008bab
 8008b8c:	08008bbb 	.word	0x08008bbb
 8008b90:	08008bbb 	.word	0x08008bbb
 8008b94:	08008bbb 	.word	0x08008bbb
 8008b98:	08008bb3 	.word	0x08008bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b9c:	f7fe fa5e 	bl	800705c <HAL_RCC_GetPCLK1Freq>
 8008ba0:	61f8      	str	r0, [r7, #28]
        break;
 8008ba2:	e010      	b.n	8008bc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ba4:	4b8f      	ldr	r3, [pc, #572]	@ (8008de4 <UART_SetConfig+0x56c>)
 8008ba6:	61fb      	str	r3, [r7, #28]
        break;
 8008ba8:	e00d      	b.n	8008bc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008baa:	f7fe f9bf 	bl	8006f2c <HAL_RCC_GetSysClockFreq>
 8008bae:	61f8      	str	r0, [r7, #28]
        break;
 8008bb0:	e009      	b.n	8008bc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bb6:	61fb      	str	r3, [r7, #28]
        break;
 8008bb8:	e005      	b.n	8008bc6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008bc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 80fb 	beq.w	8008dc4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	005b      	lsls	r3, r3, #1
 8008bd6:	4413      	add	r3, r2
 8008bd8:	69fa      	ldr	r2, [r7, #28]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d305      	bcc.n	8008bea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008be4:	69fa      	ldr	r2, [r7, #28]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d903      	bls.n	8008bf2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008bf0:	e0e8      	b.n	8008dc4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	461c      	mov	r4, r3
 8008bf8:	4615      	mov	r5, r2
 8008bfa:	f04f 0200 	mov.w	r2, #0
 8008bfe:	f04f 0300 	mov.w	r3, #0
 8008c02:	022b      	lsls	r3, r5, #8
 8008c04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008c08:	0222      	lsls	r2, r4, #8
 8008c0a:	68f9      	ldr	r1, [r7, #12]
 8008c0c:	6849      	ldr	r1, [r1, #4]
 8008c0e:	0849      	lsrs	r1, r1, #1
 8008c10:	2000      	movs	r0, #0
 8008c12:	4688      	mov	r8, r1
 8008c14:	4681      	mov	r9, r0
 8008c16:	eb12 0a08 	adds.w	sl, r2, r8
 8008c1a:	eb43 0b09 	adc.w	fp, r3, r9
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	603b      	str	r3, [r7, #0]
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c2c:	4650      	mov	r0, sl
 8008c2e:	4659      	mov	r1, fp
 8008c30:	f7f7 fade 	bl	80001f0 <__aeabi_uldivmod>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4613      	mov	r3, r2
 8008c3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c42:	d308      	bcc.n	8008c56 <UART_SetConfig+0x3de>
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c4a:	d204      	bcs.n	8008c56 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	69ba      	ldr	r2, [r7, #24]
 8008c52:	60da      	str	r2, [r3, #12]
 8008c54:	e0b6      	b.n	8008dc4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008c5c:	e0b2      	b.n	8008dc4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c66:	d15e      	bne.n	8008d26 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008c68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008c6c:	2b08      	cmp	r3, #8
 8008c6e:	d828      	bhi.n	8008cc2 <UART_SetConfig+0x44a>
 8008c70:	a201      	add	r2, pc, #4	@ (adr r2, 8008c78 <UART_SetConfig+0x400>)
 8008c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c76:	bf00      	nop
 8008c78:	08008c9d 	.word	0x08008c9d
 8008c7c:	08008ca5 	.word	0x08008ca5
 8008c80:	08008cad 	.word	0x08008cad
 8008c84:	08008cc3 	.word	0x08008cc3
 8008c88:	08008cb3 	.word	0x08008cb3
 8008c8c:	08008cc3 	.word	0x08008cc3
 8008c90:	08008cc3 	.word	0x08008cc3
 8008c94:	08008cc3 	.word	0x08008cc3
 8008c98:	08008cbb 	.word	0x08008cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c9c:	f7fe f9de 	bl	800705c <HAL_RCC_GetPCLK1Freq>
 8008ca0:	61f8      	str	r0, [r7, #28]
        break;
 8008ca2:	e014      	b.n	8008cce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ca4:	f7fe f9f0 	bl	8007088 <HAL_RCC_GetPCLK2Freq>
 8008ca8:	61f8      	str	r0, [r7, #28]
        break;
 8008caa:	e010      	b.n	8008cce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cac:	4b4d      	ldr	r3, [pc, #308]	@ (8008de4 <UART_SetConfig+0x56c>)
 8008cae:	61fb      	str	r3, [r7, #28]
        break;
 8008cb0:	e00d      	b.n	8008cce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cb2:	f7fe f93b 	bl	8006f2c <HAL_RCC_GetSysClockFreq>
 8008cb6:	61f8      	str	r0, [r7, #28]
        break;
 8008cb8:	e009      	b.n	8008cce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cbe:	61fb      	str	r3, [r7, #28]
        break;
 8008cc0:	e005      	b.n	8008cce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008ccc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d077      	beq.n	8008dc4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	005a      	lsls	r2, r3, #1
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	085b      	lsrs	r3, r3, #1
 8008cde:	441a      	add	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	2b0f      	cmp	r3, #15
 8008cee:	d916      	bls.n	8008d1e <UART_SetConfig+0x4a6>
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cf6:	d212      	bcs.n	8008d1e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	f023 030f 	bic.w	r3, r3, #15
 8008d00:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	085b      	lsrs	r3, r3, #1
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	f003 0307 	and.w	r3, r3, #7
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	8afb      	ldrh	r3, [r7, #22]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	8afa      	ldrh	r2, [r7, #22]
 8008d1a:	60da      	str	r2, [r3, #12]
 8008d1c:	e052      	b.n	8008dc4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008d24:	e04e      	b.n	8008dc4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008d2a:	2b08      	cmp	r3, #8
 8008d2c:	d827      	bhi.n	8008d7e <UART_SetConfig+0x506>
 8008d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d34 <UART_SetConfig+0x4bc>)
 8008d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d34:	08008d59 	.word	0x08008d59
 8008d38:	08008d61 	.word	0x08008d61
 8008d3c:	08008d69 	.word	0x08008d69
 8008d40:	08008d7f 	.word	0x08008d7f
 8008d44:	08008d6f 	.word	0x08008d6f
 8008d48:	08008d7f 	.word	0x08008d7f
 8008d4c:	08008d7f 	.word	0x08008d7f
 8008d50:	08008d7f 	.word	0x08008d7f
 8008d54:	08008d77 	.word	0x08008d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d58:	f7fe f980 	bl	800705c <HAL_RCC_GetPCLK1Freq>
 8008d5c:	61f8      	str	r0, [r7, #28]
        break;
 8008d5e:	e014      	b.n	8008d8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d60:	f7fe f992 	bl	8007088 <HAL_RCC_GetPCLK2Freq>
 8008d64:	61f8      	str	r0, [r7, #28]
        break;
 8008d66:	e010      	b.n	8008d8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d68:	4b1e      	ldr	r3, [pc, #120]	@ (8008de4 <UART_SetConfig+0x56c>)
 8008d6a:	61fb      	str	r3, [r7, #28]
        break;
 8008d6c:	e00d      	b.n	8008d8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d6e:	f7fe f8dd 	bl	8006f2c <HAL_RCC_GetSysClockFreq>
 8008d72:	61f8      	str	r0, [r7, #28]
        break;
 8008d74:	e009      	b.n	8008d8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d7a:	61fb      	str	r3, [r7, #28]
        break;
 8008d7c:	e005      	b.n	8008d8a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008d88:	bf00      	nop
    }

    if (pclk != 0U)
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d019      	beq.n	8008dc4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	085a      	lsrs	r2, r3, #1
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	441a      	add	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008da2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	2b0f      	cmp	r3, #15
 8008da8:	d909      	bls.n	8008dbe <UART_SetConfig+0x546>
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008db0:	d205      	bcs.n	8008dbe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	60da      	str	r2, [r3, #12]
 8008dbc:	e002      	b.n	8008dc4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008dd0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3728      	adds	r7, #40	@ 0x28
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dde:	bf00      	nop
 8008de0:	40008000 	.word	0x40008000
 8008de4:	00f42400 	.word	0x00f42400

08008de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df4:	f003 0308 	and.w	r3, r3, #8
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00a      	beq.n	8008e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00a      	beq.n	8008e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	430a      	orrs	r2, r1
 8008e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e38:	f003 0302 	and.w	r3, r3, #2
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00a      	beq.n	8008e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	430a      	orrs	r2, r1
 8008e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e5a:	f003 0304 	and.w	r3, r3, #4
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00a      	beq.n	8008e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	430a      	orrs	r2, r1
 8008e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7c:	f003 0310 	and.w	r3, r3, #16
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00a      	beq.n	8008e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	430a      	orrs	r2, r1
 8008e98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9e:	f003 0320 	and.w	r3, r3, #32
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00a      	beq.n	8008ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	430a      	orrs	r2, r1
 8008eba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d01a      	beq.n	8008efe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	430a      	orrs	r2, r1
 8008edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ee6:	d10a      	bne.n	8008efe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	430a      	orrs	r2, r1
 8008efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00a      	beq.n	8008f20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	605a      	str	r2, [r3, #4]
  }
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b098      	sub	sp, #96	@ 0x60
 8008f30:	af02      	add	r7, sp, #8
 8008f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f3c:	f7fa f8d8 	bl	80030f0 <HAL_GetTick>
 8008f40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0308 	and.w	r3, r3, #8
 8008f4c:	2b08      	cmp	r3, #8
 8008f4e:	d12e      	bne.n	8008fae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f88c 	bl	800907c <UART_WaitOnFlagUntilTimeout>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d021      	beq.n	8008fae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f72:	e853 3f00 	ldrex	r3, [r3]
 8008f76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	461a      	mov	r2, r3
 8008f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f90:	e841 2300 	strex	r3, r2, [r1]
 8008f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e6      	bne.n	8008f6a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e062      	b.n	8009074 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	d149      	bne.n	8009050 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f856 	bl	800907c <UART_WaitOnFlagUntilTimeout>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d03c      	beq.n	8009050 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fde:	e853 3f00 	ldrex	r3, [r3]
 8008fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ff4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ffc:	e841 2300 	strex	r3, r2, [r1]
 8009000:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1e6      	bne.n	8008fd6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	3308      	adds	r3, #8
 800900e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	e853 3f00 	ldrex	r3, [r3]
 8009016:	60fb      	str	r3, [r7, #12]
   return(result);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f023 0301 	bic.w	r3, r3, #1
 800901e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3308      	adds	r3, #8
 8009026:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009028:	61fa      	str	r2, [r7, #28]
 800902a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902c:	69b9      	ldr	r1, [r7, #24]
 800902e:	69fa      	ldr	r2, [r7, #28]
 8009030:	e841 2300 	strex	r3, r2, [r1]
 8009034:	617b      	str	r3, [r7, #20]
   return(result);
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1e5      	bne.n	8009008 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2220      	movs	r2, #32
 8009040:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e011      	b.n	8009074 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2220      	movs	r2, #32
 8009054:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2220      	movs	r2, #32
 800905a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3758      	adds	r7, #88	@ 0x58
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	603b      	str	r3, [r7, #0]
 8009088:	4613      	mov	r3, r2
 800908a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800908c:	e04f      	b.n	800912e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009094:	d04b      	beq.n	800912e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009096:	f7fa f82b 	bl	80030f0 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	69ba      	ldr	r2, [r7, #24]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d302      	bcc.n	80090ac <UART_WaitOnFlagUntilTimeout+0x30>
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e04e      	b.n	800914e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0304 	and.w	r3, r3, #4
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d037      	beq.n	800912e <UART_WaitOnFlagUntilTimeout+0xb2>
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	2b80      	cmp	r3, #128	@ 0x80
 80090c2:	d034      	beq.n	800912e <UART_WaitOnFlagUntilTimeout+0xb2>
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2b40      	cmp	r3, #64	@ 0x40
 80090c8:	d031      	beq.n	800912e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	f003 0308 	and.w	r3, r3, #8
 80090d4:	2b08      	cmp	r3, #8
 80090d6:	d110      	bne.n	80090fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2208      	movs	r2, #8
 80090de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 f8ff 	bl	80092e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2208      	movs	r2, #8
 80090ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e029      	b.n	800914e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	69db      	ldr	r3, [r3, #28]
 8009100:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009108:	d111      	bne.n	800912e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 f8e5 	bl	80092e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2220      	movs	r2, #32
 800911e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e00f      	b.n	800914e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	69da      	ldr	r2, [r3, #28]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	4013      	ands	r3, r2
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	429a      	cmp	r2, r3
 800913c:	bf0c      	ite	eq
 800913e:	2301      	moveq	r3, #1
 8009140:	2300      	movne	r3, #0
 8009142:	b2db      	uxtb	r3, r3
 8009144:	461a      	mov	r2, r3
 8009146:	79fb      	ldrb	r3, [r7, #7]
 8009148:	429a      	cmp	r2, r3
 800914a:	d0a0      	beq.n	800908e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
	...

08009158 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009158:	b480      	push	{r7}
 800915a:	b097      	sub	sp, #92	@ 0x5c
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	4613      	mov	r3, r2
 8009164:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	88fa      	ldrh	r2, [r7, #6]
 8009170:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	88fa      	ldrh	r2, [r7, #6]
 8009178:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800918a:	d10e      	bne.n	80091aa <UART_Start_Receive_IT+0x52>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d105      	bne.n	80091a0 <UART_Start_Receive_IT+0x48>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800919a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800919e:	e02d      	b.n	80091fc <UART_Start_Receive_IT+0xa4>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	22ff      	movs	r2, #255	@ 0xff
 80091a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80091a8:	e028      	b.n	80091fc <UART_Start_Receive_IT+0xa4>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10d      	bne.n	80091ce <UART_Start_Receive_IT+0x76>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d104      	bne.n	80091c4 <UART_Start_Receive_IT+0x6c>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	22ff      	movs	r2, #255	@ 0xff
 80091be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80091c2:	e01b      	b.n	80091fc <UART_Start_Receive_IT+0xa4>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	227f      	movs	r2, #127	@ 0x7f
 80091c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80091cc:	e016      	b.n	80091fc <UART_Start_Receive_IT+0xa4>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091d6:	d10d      	bne.n	80091f4 <UART_Start_Receive_IT+0x9c>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d104      	bne.n	80091ea <UART_Start_Receive_IT+0x92>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	227f      	movs	r2, #127	@ 0x7f
 80091e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80091e8:	e008      	b.n	80091fc <UART_Start_Receive_IT+0xa4>
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	223f      	movs	r2, #63	@ 0x3f
 80091ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80091f2:	e003      	b.n	80091fc <UART_Start_Receive_IT+0xa4>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2222      	movs	r2, #34	@ 0x22
 8009208:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3308      	adds	r3, #8
 8009212:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009216:	e853 3f00 	ldrex	r3, [r3]
 800921a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800921c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921e:	f043 0301 	orr.w	r3, r3, #1
 8009222:	657b      	str	r3, [r7, #84]	@ 0x54
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	3308      	adds	r3, #8
 800922a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800922c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800922e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009230:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009232:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009234:	e841 2300 	strex	r3, r2, [r1]
 8009238:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800923a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1e5      	bne.n	800920c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009248:	d107      	bne.n	800925a <UART_Start_Receive_IT+0x102>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d103      	bne.n	800925a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	4a21      	ldr	r2, [pc, #132]	@ (80092dc <UART_Start_Receive_IT+0x184>)
 8009256:	669a      	str	r2, [r3, #104]	@ 0x68
 8009258:	e002      	b.n	8009260 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	4a20      	ldr	r2, [pc, #128]	@ (80092e0 <UART_Start_Receive_IT+0x188>)
 800925e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d019      	beq.n	800929c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009270:	e853 3f00 	ldrex	r3, [r3]
 8009274:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009278:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800927c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	461a      	mov	r2, r3
 8009284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009286:	637b      	str	r3, [r7, #52]	@ 0x34
 8009288:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800928c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800928e:	e841 2300 	strex	r3, r2, [r1]
 8009292:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1e6      	bne.n	8009268 <UART_Start_Receive_IT+0x110>
 800929a:	e018      	b.n	80092ce <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	e853 3f00 	ldrex	r3, [r3]
 80092a8:	613b      	str	r3, [r7, #16]
   return(result);
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	f043 0320 	orr.w	r3, r3, #32
 80092b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092ba:	623b      	str	r3, [r7, #32]
 80092bc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092be:	69f9      	ldr	r1, [r7, #28]
 80092c0:	6a3a      	ldr	r2, [r7, #32]
 80092c2:	e841 2300 	strex	r3, r2, [r1]
 80092c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1e6      	bne.n	800929c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	375c      	adds	r7, #92	@ 0x5c
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	080095e9 	.word	0x080095e9
 80092e0:	0800942d 	.word	0x0800942d

080092e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b095      	sub	sp, #84	@ 0x54
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f4:	e853 3f00 	ldrex	r3, [r3]
 80092f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80092fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009300:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	461a      	mov	r2, r3
 8009308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800930a:	643b      	str	r3, [r7, #64]	@ 0x40
 800930c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009310:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009312:	e841 2300 	strex	r3, r2, [r1]
 8009316:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1e6      	bne.n	80092ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3308      	adds	r3, #8
 8009324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	e853 3f00 	ldrex	r3, [r3]
 800932c:	61fb      	str	r3, [r7, #28]
   return(result);
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	f023 0301 	bic.w	r3, r3, #1
 8009334:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	3308      	adds	r3, #8
 800933c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800933e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009340:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009342:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009344:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009346:	e841 2300 	strex	r3, r2, [r1]
 800934a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800934c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1e5      	bne.n	800931e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009356:	2b01      	cmp	r3, #1
 8009358:	d118      	bne.n	800938c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	e853 3f00 	ldrex	r3, [r3]
 8009366:	60bb      	str	r3, [r7, #8]
   return(result);
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	f023 0310 	bic.w	r3, r3, #16
 800936e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	461a      	mov	r2, r3
 8009376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009378:	61bb      	str	r3, [r7, #24]
 800937a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937c:	6979      	ldr	r1, [r7, #20]
 800937e:	69ba      	ldr	r2, [r7, #24]
 8009380:	e841 2300 	strex	r3, r2, [r1]
 8009384:	613b      	str	r3, [r7, #16]
   return(result);
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1e6      	bne.n	800935a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2220      	movs	r2, #32
 8009390:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80093a0:	bf00      	nop
 80093a2:	3754      	adds	r7, #84	@ 0x54
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f7ff fa3e 	bl	800884c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093d0:	bf00      	nop
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b088      	sub	sp, #32
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	e853 3f00 	ldrex	r3, [r3]
 80093ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093f4:	61fb      	str	r3, [r7, #28]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	461a      	mov	r2, r3
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	61bb      	str	r3, [r7, #24]
 8009400:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009402:	6979      	ldr	r1, [r7, #20]
 8009404:	69ba      	ldr	r2, [r7, #24]
 8009406:	e841 2300 	strex	r3, r2, [r1]
 800940a:	613b      	str	r3, [r7, #16]
   return(result);
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1e6      	bne.n	80093e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2220      	movs	r2, #32
 8009416:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff fa0a 	bl	8008838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009424:	bf00      	nop
 8009426:	3720      	adds	r7, #32
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b09c      	sub	sp, #112	@ 0x70
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800943a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009444:	2b22      	cmp	r3, #34	@ 0x22
 8009446:	f040 80be 	bne.w	80095c6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009450:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009454:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009458:	b2d9      	uxtb	r1, r3
 800945a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800945e:	b2da      	uxtb	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009464:	400a      	ands	r2, r1
 8009466:	b2d2      	uxtb	r2, r2
 8009468:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800946e:	1c5a      	adds	r2, r3, #1
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800947a:	b29b      	uxth	r3, r3
 800947c:	3b01      	subs	r3, #1
 800947e:	b29a      	uxth	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800948c:	b29b      	uxth	r3, r3
 800948e:	2b00      	cmp	r3, #0
 8009490:	f040 80a3 	bne.w	80095da <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800949c:	e853 3f00 	ldrex	r3, [r3]
 80094a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	461a      	mov	r2, r3
 80094b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094ba:	e841 2300 	strex	r3, r2, [r1]
 80094be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1e6      	bne.n	8009494 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3308      	adds	r3, #8
 80094cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d0:	e853 3f00 	ldrex	r3, [r3]
 80094d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d8:	f023 0301 	bic.w	r3, r3, #1
 80094dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3308      	adds	r3, #8
 80094e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80094e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80094e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094ee:	e841 2300 	strex	r3, r2, [r1]
 80094f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1e5      	bne.n	80094c6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a34      	ldr	r2, [pc, #208]	@ (80095e4 <UART_RxISR_8BIT+0x1b8>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d01f      	beq.n	8009558 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009522:	2b00      	cmp	r3, #0
 8009524:	d018      	beq.n	8009558 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952e:	e853 3f00 	ldrex	r3, [r3]
 8009532:	623b      	str	r3, [r7, #32]
   return(result);
 8009534:	6a3b      	ldr	r3, [r7, #32]
 8009536:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800953a:	663b      	str	r3, [r7, #96]	@ 0x60
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	461a      	mov	r2, r3
 8009542:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009544:	633b      	str	r3, [r7, #48]	@ 0x30
 8009546:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009548:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800954a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800954c:	e841 2300 	strex	r3, r2, [r1]
 8009550:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1e6      	bne.n	8009526 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800955c:	2b01      	cmp	r3, #1
 800955e:	d12e      	bne.n	80095be <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	e853 3f00 	ldrex	r3, [r3]
 8009572:	60fb      	str	r3, [r7, #12]
   return(result);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f023 0310 	bic.w	r3, r3, #16
 800957a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	461a      	mov	r2, r3
 8009582:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009584:	61fb      	str	r3, [r7, #28]
 8009586:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009588:	69b9      	ldr	r1, [r7, #24]
 800958a:	69fa      	ldr	r2, [r7, #28]
 800958c:	e841 2300 	strex	r3, r2, [r1]
 8009590:	617b      	str	r3, [r7, #20]
   return(result);
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1e6      	bne.n	8009566 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	69db      	ldr	r3, [r3, #28]
 800959e:	f003 0310 	and.w	r3, r3, #16
 80095a2:	2b10      	cmp	r3, #16
 80095a4:	d103      	bne.n	80095ae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2210      	movs	r2, #16
 80095ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7ff f952 	bl	8008860 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095bc:	e00d      	b.n	80095da <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f7f7 fdbc 	bl	800113c <HAL_UART_RxCpltCallback>
}
 80095c4:	e009      	b.n	80095da <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	8b1b      	ldrh	r3, [r3, #24]
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f042 0208 	orr.w	r2, r2, #8
 80095d6:	b292      	uxth	r2, r2
 80095d8:	831a      	strh	r2, [r3, #24]
}
 80095da:	bf00      	nop
 80095dc:	3770      	adds	r7, #112	@ 0x70
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	40008000 	.word	0x40008000

080095e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b09c      	sub	sp, #112	@ 0x70
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095f6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009600:	2b22      	cmp	r3, #34	@ 0x22
 8009602:	f040 80be 	bne.w	8009782 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800960c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009614:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009616:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800961a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800961e:	4013      	ands	r3, r2
 8009620:	b29a      	uxth	r2, r3
 8009622:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009624:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800962a:	1c9a      	adds	r2, r3, #2
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009636:	b29b      	uxth	r3, r3
 8009638:	3b01      	subs	r3, #1
 800963a:	b29a      	uxth	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009648:	b29b      	uxth	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	f040 80a3 	bne.w	8009796 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009658:	e853 3f00 	ldrex	r3, [r3]
 800965c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800965e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009660:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009664:	667b      	str	r3, [r7, #100]	@ 0x64
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800966e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009670:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009672:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009674:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009676:	e841 2300 	strex	r3, r2, [r1]
 800967a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800967c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1e6      	bne.n	8009650 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3308      	adds	r3, #8
 8009688:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800968c:	e853 3f00 	ldrex	r3, [r3]
 8009690:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009694:	f023 0301 	bic.w	r3, r3, #1
 8009698:	663b      	str	r3, [r7, #96]	@ 0x60
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3308      	adds	r3, #8
 80096a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80096a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80096a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096aa:	e841 2300 	strex	r3, r2, [r1]
 80096ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1e5      	bne.n	8009682 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2220      	movs	r2, #32
 80096ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a34      	ldr	r2, [pc, #208]	@ (80097a0 <UART_RxISR_16BIT+0x1b8>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d01f      	beq.n	8009714 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d018      	beq.n	8009714 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e8:	6a3b      	ldr	r3, [r7, #32]
 80096ea:	e853 3f00 	ldrex	r3, [r3]
 80096ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80096f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	461a      	mov	r2, r3
 80096fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009702:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009704:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009706:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009708:	e841 2300 	strex	r3, r2, [r1]
 800970c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800970e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1e6      	bne.n	80096e2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009718:	2b01      	cmp	r3, #1
 800971a:	d12e      	bne.n	800977a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	e853 3f00 	ldrex	r3, [r3]
 800972e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	f023 0310 	bic.w	r3, r3, #16
 8009736:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	461a      	mov	r2, r3
 800973e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009740:	61bb      	str	r3, [r7, #24]
 8009742:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009744:	6979      	ldr	r1, [r7, #20]
 8009746:	69ba      	ldr	r2, [r7, #24]
 8009748:	e841 2300 	strex	r3, r2, [r1]
 800974c:	613b      	str	r3, [r7, #16]
   return(result);
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e6      	bne.n	8009722 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	69db      	ldr	r3, [r3, #28]
 800975a:	f003 0310 	and.w	r3, r3, #16
 800975e:	2b10      	cmp	r3, #16
 8009760:	d103      	bne.n	800976a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2210      	movs	r2, #16
 8009768:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009770:	4619      	mov	r1, r3
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7ff f874 	bl	8008860 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009778:	e00d      	b.n	8009796 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7f7 fcde 	bl	800113c <HAL_UART_RxCpltCallback>
}
 8009780:	e009      	b.n	8009796 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	8b1b      	ldrh	r3, [r3, #24]
 8009788:	b29a      	uxth	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f042 0208 	orr.w	r2, r2, #8
 8009792:	b292      	uxth	r2, r2
 8009794:	831a      	strh	r2, [r3, #24]
}
 8009796:	bf00      	nop
 8009798:	3770      	adds	r7, #112	@ 0x70
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	40008000 	.word	0x40008000

080097a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80097ac:	bf00      	nop
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <__NVIC_SetPriority>:
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	4603      	mov	r3, r0
 80097c0:	6039      	str	r1, [r7, #0]
 80097c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80097c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	db0a      	blt.n	80097e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	490c      	ldr	r1, [pc, #48]	@ (8009804 <__NVIC_SetPriority+0x4c>)
 80097d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097d6:	0112      	lsls	r2, r2, #4
 80097d8:	b2d2      	uxtb	r2, r2
 80097da:	440b      	add	r3, r1
 80097dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80097e0:	e00a      	b.n	80097f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	4908      	ldr	r1, [pc, #32]	@ (8009808 <__NVIC_SetPriority+0x50>)
 80097e8:	79fb      	ldrb	r3, [r7, #7]
 80097ea:	f003 030f 	and.w	r3, r3, #15
 80097ee:	3b04      	subs	r3, #4
 80097f0:	0112      	lsls	r2, r2, #4
 80097f2:	b2d2      	uxtb	r2, r2
 80097f4:	440b      	add	r3, r1
 80097f6:	761a      	strb	r2, [r3, #24]
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr
 8009804:	e000e100 	.word	0xe000e100
 8009808:	e000ed00 	.word	0xe000ed00

0800980c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800980c:	b580      	push	{r7, lr}
 800980e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009810:	4b05      	ldr	r3, [pc, #20]	@ (8009828 <SysTick_Handler+0x1c>)
 8009812:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009814:	f001 fec6 	bl	800b5a4 <xTaskGetSchedulerState>
 8009818:	4603      	mov	r3, r0
 800981a:	2b01      	cmp	r3, #1
 800981c:	d001      	beq.n	8009822 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800981e:	f002 fcbb 	bl	800c198 <xPortSysTickHandler>
  }
}
 8009822:	bf00      	nop
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	e000e010 	.word	0xe000e010

0800982c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800982c:	b580      	push	{r7, lr}
 800982e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009830:	2100      	movs	r1, #0
 8009832:	f06f 0004 	mvn.w	r0, #4
 8009836:	f7ff ffbf 	bl	80097b8 <__NVIC_SetPriority>
#endif
}
 800983a:	bf00      	nop
 800983c:	bd80      	pop	{r7, pc}
	...

08009840 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009846:	f3ef 8305 	mrs	r3, IPSR
 800984a:	603b      	str	r3, [r7, #0]
  return(result);
 800984c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800984e:	2b00      	cmp	r3, #0
 8009850:	d003      	beq.n	800985a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009852:	f06f 0305 	mvn.w	r3, #5
 8009856:	607b      	str	r3, [r7, #4]
 8009858:	e00c      	b.n	8009874 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800985a:	4b0a      	ldr	r3, [pc, #40]	@ (8009884 <osKernelInitialize+0x44>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d105      	bne.n	800986e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009862:	4b08      	ldr	r3, [pc, #32]	@ (8009884 <osKernelInitialize+0x44>)
 8009864:	2201      	movs	r2, #1
 8009866:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009868:	2300      	movs	r3, #0
 800986a:	607b      	str	r3, [r7, #4]
 800986c:	e002      	b.n	8009874 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800986e:	f04f 33ff 	mov.w	r3, #4294967295
 8009872:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009874:	687b      	ldr	r3, [r7, #4]
}
 8009876:	4618      	mov	r0, r3
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	2000037c 	.word	0x2000037c

08009888 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800988e:	f3ef 8305 	mrs	r3, IPSR
 8009892:	603b      	str	r3, [r7, #0]
  return(result);
 8009894:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800989a:	f06f 0305 	mvn.w	r3, #5
 800989e:	607b      	str	r3, [r7, #4]
 80098a0:	e010      	b.n	80098c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80098a2:	4b0b      	ldr	r3, [pc, #44]	@ (80098d0 <osKernelStart+0x48>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d109      	bne.n	80098be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80098aa:	f7ff ffbf 	bl	800982c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80098ae:	4b08      	ldr	r3, [pc, #32]	@ (80098d0 <osKernelStart+0x48>)
 80098b0:	2202      	movs	r2, #2
 80098b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80098b4:	f001 fa12 	bl	800acdc <vTaskStartScheduler>
      stat = osOK;
 80098b8:	2300      	movs	r3, #0
 80098ba:	607b      	str	r3, [r7, #4]
 80098bc:	e002      	b.n	80098c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80098be:	f04f 33ff 	mov.w	r3, #4294967295
 80098c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80098c4:	687b      	ldr	r3, [r7, #4]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	2000037c 	.word	0x2000037c

080098d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b08e      	sub	sp, #56	@ 0x38
 80098d8:	af04      	add	r7, sp, #16
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80098e0:	2300      	movs	r3, #0
 80098e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098e4:	f3ef 8305 	mrs	r3, IPSR
 80098e8:	617b      	str	r3, [r7, #20]
  return(result);
 80098ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d17e      	bne.n	80099ee <osThreadNew+0x11a>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d07b      	beq.n	80099ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80098f6:	2380      	movs	r3, #128	@ 0x80
 80098f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80098fa:	2318      	movs	r3, #24
 80098fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80098fe:	2300      	movs	r3, #0
 8009900:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009902:	f04f 33ff 	mov.w	r3, #4294967295
 8009906:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d045      	beq.n	800999a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d002      	beq.n	800991c <osThreadNew+0x48>
        name = attr->name;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d008      	beq.n	8009942 <osThreadNew+0x6e>
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	2b38      	cmp	r3, #56	@ 0x38
 8009934:	d805      	bhi.n	8009942 <osThreadNew+0x6e>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <osThreadNew+0x72>
        return (NULL);
 8009942:	2300      	movs	r3, #0
 8009944:	e054      	b.n	80099f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	695b      	ldr	r3, [r3, #20]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d003      	beq.n	8009956 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	089b      	lsrs	r3, r3, #2
 8009954:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00e      	beq.n	800997c <osThreadNew+0xa8>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	2ba7      	cmp	r3, #167	@ 0xa7
 8009964:	d90a      	bls.n	800997c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800996a:	2b00      	cmp	r3, #0
 800996c:	d006      	beq.n	800997c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d002      	beq.n	800997c <osThreadNew+0xa8>
        mem = 1;
 8009976:	2301      	movs	r3, #1
 8009978:	61bb      	str	r3, [r7, #24]
 800997a:	e010      	b.n	800999e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10c      	bne.n	800999e <osThreadNew+0xca>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d108      	bne.n	800999e <osThreadNew+0xca>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d104      	bne.n	800999e <osThreadNew+0xca>
          mem = 0;
 8009994:	2300      	movs	r3, #0
 8009996:	61bb      	str	r3, [r7, #24]
 8009998:	e001      	b.n	800999e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800999a:	2300      	movs	r3, #0
 800999c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d110      	bne.n	80099c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80099ac:	9202      	str	r2, [sp, #8]
 80099ae:	9301      	str	r3, [sp, #4]
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	9300      	str	r3, [sp, #0]
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	6a3a      	ldr	r2, [r7, #32]
 80099b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f000 ff9a 	bl	800a8f4 <xTaskCreateStatic>
 80099c0:	4603      	mov	r3, r0
 80099c2:	613b      	str	r3, [r7, #16]
 80099c4:	e013      	b.n	80099ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d110      	bne.n	80099ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	f107 0310 	add.w	r3, r7, #16
 80099d4:	9301      	str	r3, [sp, #4]
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	9300      	str	r3, [sp, #0]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f000 ffe8 	bl	800a9b4 <xTaskCreate>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d001      	beq.n	80099ee <osThreadNew+0x11a>
            hTask = NULL;
 80099ea:	2300      	movs	r3, #0
 80099ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80099ee:	693b      	ldr	r3, [r7, #16]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3728      	adds	r7, #40	@ 0x28
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a00:	f3ef 8305 	mrs	r3, IPSR
 8009a04:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a06:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d003      	beq.n	8009a14 <osDelay+0x1c>
    stat = osErrorISR;
 8009a0c:	f06f 0305 	mvn.w	r3, #5
 8009a10:	60fb      	str	r3, [r7, #12]
 8009a12:	e007      	b.n	8009a24 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009a14:	2300      	movs	r3, #0
 8009a16:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d002      	beq.n	8009a24 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f001 f926 	bl	800ac70 <vTaskDelay>
    }
  }

  return (stat);
 8009a24:	68fb      	ldr	r3, [r7, #12]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b08a      	sub	sp, #40	@ 0x28
 8009a32:	af02      	add	r7, sp, #8
 8009a34:	60f8      	str	r0, [r7, #12]
 8009a36:	60b9      	str	r1, [r7, #8]
 8009a38:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a3e:	f3ef 8305 	mrs	r3, IPSR
 8009a42:	613b      	str	r3, [r7, #16]
  return(result);
 8009a44:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d175      	bne.n	8009b36 <osSemaphoreNew+0x108>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d072      	beq.n	8009b36 <osSemaphoreNew+0x108>
 8009a50:	68ba      	ldr	r2, [r7, #8]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d86e      	bhi.n	8009b36 <osSemaphoreNew+0x108>
    mem = -1;
 8009a58:	f04f 33ff 	mov.w	r3, #4294967295
 8009a5c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d015      	beq.n	8009a90 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d006      	beq.n	8009a7a <osSemaphoreNew+0x4c>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	2b4f      	cmp	r3, #79	@ 0x4f
 8009a72:	d902      	bls.n	8009a7a <osSemaphoreNew+0x4c>
        mem = 1;
 8009a74:	2301      	movs	r3, #1
 8009a76:	61bb      	str	r3, [r7, #24]
 8009a78:	e00c      	b.n	8009a94 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d108      	bne.n	8009a94 <osSemaphoreNew+0x66>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d104      	bne.n	8009a94 <osSemaphoreNew+0x66>
          mem = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	61bb      	str	r3, [r7, #24]
 8009a8e:	e001      	b.n	8009a94 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009a90:	2300      	movs	r3, #0
 8009a92:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9a:	d04c      	beq.n	8009b36 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d128      	bne.n	8009af4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d10a      	bne.n	8009abe <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	2203      	movs	r2, #3
 8009aae:	9200      	str	r2, [sp, #0]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	2001      	movs	r0, #1
 8009ab6:	f000 f995 	bl	8009de4 <xQueueGenericCreateStatic>
 8009aba:	61f8      	str	r0, [r7, #28]
 8009abc:	e005      	b.n	8009aca <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009abe:	2203      	movs	r2, #3
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	2001      	movs	r0, #1
 8009ac4:	f000 fa0b 	bl	8009ede <xQueueGenericCreate>
 8009ac8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d022      	beq.n	8009b16 <osSemaphoreNew+0xe8>
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d01f      	beq.n	8009b16 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	2200      	movs	r2, #0
 8009ada:	2100      	movs	r1, #0
 8009adc:	69f8      	ldr	r0, [r7, #28]
 8009ade:	f000 facb 	bl	800a078 <xQueueGenericSend>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d016      	beq.n	8009b16 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009ae8:	69f8      	ldr	r0, [r7, #28]
 8009aea:	f000 fd47 	bl	800a57c <vQueueDelete>
            hSemaphore = NULL;
 8009aee:	2300      	movs	r3, #0
 8009af0:	61fb      	str	r3, [r7, #28]
 8009af2:	e010      	b.n	8009b16 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d108      	bne.n	8009b0c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	461a      	mov	r2, r3
 8009b00:	68b9      	ldr	r1, [r7, #8]
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f000 fa49 	bl	8009f9a <xQueueCreateCountingSemaphoreStatic>
 8009b08:	61f8      	str	r0, [r7, #28]
 8009b0a:	e004      	b.n	8009b16 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009b0c:	68b9      	ldr	r1, [r7, #8]
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f000 fa7c 	bl	800a00c <xQueueCreateCountingSemaphore>
 8009b14:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00c      	beq.n	8009b36 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d003      	beq.n	8009b2a <osSemaphoreNew+0xfc>
          name = attr->name;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	617b      	str	r3, [r7, #20]
 8009b28:	e001      	b.n	8009b2e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009b2e:	6979      	ldr	r1, [r7, #20]
 8009b30:	69f8      	ldr	r0, [r7, #28]
 8009b32:	f000 fe57 	bl	800a7e4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009b36:	69fb      	ldr	r3, [r7, #28]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3720      	adds	r7, #32
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	4a07      	ldr	r2, [pc, #28]	@ (8009b6c <vApplicationGetIdleTaskMemory+0x2c>)
 8009b50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	4a06      	ldr	r2, [pc, #24]	@ (8009b70 <vApplicationGetIdleTaskMemory+0x30>)
 8009b56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2280      	movs	r2, #128	@ 0x80
 8009b5c:	601a      	str	r2, [r3, #0]
}
 8009b5e:	bf00      	nop
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	20000380 	.word	0x20000380
 8009b70:	20000428 	.word	0x20000428

08009b74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4a07      	ldr	r2, [pc, #28]	@ (8009ba0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009b84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	4a06      	ldr	r2, [pc, #24]	@ (8009ba4 <vApplicationGetTimerTaskMemory+0x30>)
 8009b8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b92:	601a      	str	r2, [r3, #0]
}
 8009b94:	bf00      	nop
 8009b96:	3714      	adds	r7, #20
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr
 8009ba0:	20000628 	.word	0x20000628
 8009ba4:	200006d0 	.word	0x200006d0

08009ba8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f103 0208 	add.w	r2, r3, #8
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f103 0208 	add.w	r2, r3, #8
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f103 0208 	add.w	r2, r3, #8
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009bf6:	bf00      	nop
 8009bf8:	370c      	adds	r7, #12
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c02:	b480      	push	{r7}
 8009c04:	b085      	sub	sp, #20
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	689a      	ldr	r2, [r3, #8]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	1c5a      	adds	r2, r3, #1
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	601a      	str	r2, [r3, #0]
}
 8009c3e:	bf00      	nop
 8009c40:	3714      	adds	r7, #20
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c4a:	b480      	push	{r7}
 8009c4c:	b085      	sub	sp, #20
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c60:	d103      	bne.n	8009c6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	60fb      	str	r3, [r7, #12]
 8009c68:	e00c      	b.n	8009c84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	3308      	adds	r3, #8
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	e002      	b.n	8009c78 <vListInsert+0x2e>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	60fb      	str	r3, [r7, #12]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d2f6      	bcs.n	8009c72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	1c5a      	adds	r2, r3, #1
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	601a      	str	r2, [r3, #0]
}
 8009cb0:	bf00      	nop
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	6892      	ldr	r2, [r2, #8]
 8009cd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	6852      	ldr	r2, [r2, #4]
 8009cdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d103      	bne.n	8009cf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	689a      	ldr	r2, [r3, #8]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	1e5a      	subs	r2, r3, #1
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10b      	bne.n	8009d3c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009d36:	bf00      	nop
 8009d38:	bf00      	nop
 8009d3a:	e7fd      	b.n	8009d38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d3c:	f002 f99c 	bl	800c078 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d48:	68f9      	ldr	r1, [r7, #12]
 8009d4a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009d4c:	fb01 f303 	mul.w	r3, r1, r3
 8009d50:	441a      	add	r2, r3
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	68f9      	ldr	r1, [r7, #12]
 8009d70:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009d72:	fb01 f303 	mul.w	r3, r1, r3
 8009d76:	441a      	add	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	22ff      	movs	r2, #255	@ 0xff
 8009d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	22ff      	movs	r2, #255	@ 0xff
 8009d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d114      	bne.n	8009dbc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d01a      	beq.n	8009dd0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	3310      	adds	r3, #16
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f001 fa3a 	bl	800b218 <xTaskRemoveFromEventList>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d012      	beq.n	8009dd0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009daa:	4b0d      	ldr	r3, [pc, #52]	@ (8009de0 <xQueueGenericReset+0xd0>)
 8009dac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009db0:	601a      	str	r2, [r3, #0]
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	e009      	b.n	8009dd0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3310      	adds	r3, #16
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7ff fef1 	bl	8009ba8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	3324      	adds	r3, #36	@ 0x24
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7ff feec 	bl	8009ba8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009dd0:	f002 f984 	bl	800c0dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009dd4:	2301      	movs	r3, #1
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	e000ed04 	.word	0xe000ed04

08009de4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b08e      	sub	sp, #56	@ 0x38
 8009de8:	af02      	add	r7, sp, #8
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
 8009df0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10b      	bne.n	8009e10 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dfc:	f383 8811 	msr	BASEPRI, r3
 8009e00:	f3bf 8f6f 	isb	sy
 8009e04:	f3bf 8f4f 	dsb	sy
 8009e08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009e0a:	bf00      	nop
 8009e0c:	bf00      	nop
 8009e0e:	e7fd      	b.n	8009e0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10b      	bne.n	8009e2e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e28:	bf00      	nop
 8009e2a:	bf00      	nop
 8009e2c:	e7fd      	b.n	8009e2a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d002      	beq.n	8009e3a <xQueueGenericCreateStatic+0x56>
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <xQueueGenericCreateStatic+0x5a>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e000      	b.n	8009e40 <xQueueGenericCreateStatic+0x5c>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10b      	bne.n	8009e5c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e48:	f383 8811 	msr	BASEPRI, r3
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	623b      	str	r3, [r7, #32]
}
 8009e56:	bf00      	nop
 8009e58:	bf00      	nop
 8009e5a:	e7fd      	b.n	8009e58 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d102      	bne.n	8009e68 <xQueueGenericCreateStatic+0x84>
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d101      	bne.n	8009e6c <xQueueGenericCreateStatic+0x88>
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e000      	b.n	8009e6e <xQueueGenericCreateStatic+0x8a>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d10b      	bne.n	8009e8a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e76:	f383 8811 	msr	BASEPRI, r3
 8009e7a:	f3bf 8f6f 	isb	sy
 8009e7e:	f3bf 8f4f 	dsb	sy
 8009e82:	61fb      	str	r3, [r7, #28]
}
 8009e84:	bf00      	nop
 8009e86:	bf00      	nop
 8009e88:	e7fd      	b.n	8009e86 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e8a:	2350      	movs	r3, #80	@ 0x50
 8009e8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	2b50      	cmp	r3, #80	@ 0x50
 8009e92:	d00b      	beq.n	8009eac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	61bb      	str	r3, [r7, #24]
}
 8009ea6:	bf00      	nop
 8009ea8:	bf00      	nop
 8009eaa:	e7fd      	b.n	8009ea8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009eac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00d      	beq.n	8009ed4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ec0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	68b9      	ldr	r1, [r7, #8]
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f000 f840 	bl	8009f54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3730      	adds	r7, #48	@ 0x30
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b08a      	sub	sp, #40	@ 0x28
 8009ee2:	af02      	add	r7, sp, #8
 8009ee4:	60f8      	str	r0, [r7, #12]
 8009ee6:	60b9      	str	r1, [r7, #8]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d10b      	bne.n	8009f0a <xQueueGenericCreate+0x2c>
	__asm volatile
 8009ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	613b      	str	r3, [r7, #16]
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop
 8009f08:	e7fd      	b.n	8009f06 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	68ba      	ldr	r2, [r7, #8]
 8009f0e:	fb02 f303 	mul.w	r3, r2, r3
 8009f12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	3350      	adds	r3, #80	@ 0x50
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f002 f9cf 	bl	800c2bc <pvPortMalloc>
 8009f1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d011      	beq.n	8009f4a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	3350      	adds	r3, #80	@ 0x50
 8009f2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f38:	79fa      	ldrb	r2, [r7, #7]
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	4613      	mov	r3, r2
 8009f40:	697a      	ldr	r2, [r7, #20]
 8009f42:	68b9      	ldr	r1, [r7, #8]
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f000 f805 	bl	8009f54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f4a:	69bb      	ldr	r3, [r7, #24]
	}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3720      	adds	r7, #32
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d103      	bne.n	8009f70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	69ba      	ldr	r2, [r7, #24]
 8009f6c:	601a      	str	r2, [r3, #0]
 8009f6e:	e002      	b.n	8009f76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f82:	2101      	movs	r1, #1
 8009f84:	69b8      	ldr	r0, [r7, #24]
 8009f86:	f7ff fec3 	bl	8009d10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	78fa      	ldrb	r2, [r7, #3]
 8009f8e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f92:	bf00      	nop
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b08a      	sub	sp, #40	@ 0x28
 8009f9e:	af02      	add	r7, sp, #8
 8009fa0:	60f8      	str	r0, [r7, #12]
 8009fa2:	60b9      	str	r1, [r7, #8]
 8009fa4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10b      	bne.n	8009fc4 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8009fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb0:	f383 8811 	msr	BASEPRI, r3
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	61bb      	str	r3, [r7, #24]
}
 8009fbe:	bf00      	nop
 8009fc0:	bf00      	nop
 8009fc2:	e7fd      	b.n	8009fc0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d90b      	bls.n	8009fe4 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	617b      	str	r3, [r7, #20]
}
 8009fde:	bf00      	nop
 8009fe0:	bf00      	nop
 8009fe2:	e7fd      	b.n	8009fe0 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	9300      	str	r3, [sp, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	2100      	movs	r1, #0
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f7ff fef8 	bl	8009de4 <xQueueGenericCreateStatic>
 8009ff4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d002      	beq.n	800a002 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	68ba      	ldr	r2, [r7, #8]
 800a000:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a002:	69fb      	ldr	r3, [r7, #28]
	}
 800a004:	4618      	mov	r0, r3
 800a006:	3720      	adds	r7, #32
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b086      	sub	sp, #24
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10b      	bne.n	800a034 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	613b      	str	r3, [r7, #16]
}
 800a02e:	bf00      	nop
 800a030:	bf00      	nop
 800a032:	e7fd      	b.n	800a030 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d90b      	bls.n	800a054 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a040:	f383 8811 	msr	BASEPRI, r3
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	60fb      	str	r3, [r7, #12]
}
 800a04e:	bf00      	nop
 800a050:	bf00      	nop
 800a052:	e7fd      	b.n	800a050 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a054:	2202      	movs	r2, #2
 800a056:	2100      	movs	r1, #0
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f7ff ff40 	bl	8009ede <xQueueGenericCreate>
 800a05e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d002      	beq.n	800a06c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	683a      	ldr	r2, [r7, #0]
 800a06a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a06c:	697b      	ldr	r3, [r7, #20]
	}
 800a06e:	4618      	mov	r0, r3
 800a070:	3718      	adds	r7, #24
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
	...

0800a078 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b08e      	sub	sp, #56	@ 0x38
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
 800a084:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a086:	2300      	movs	r3, #0
 800a088:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10b      	bne.n	800a0ac <xQueueGenericSend+0x34>
	__asm volatile
 800a094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a098:	f383 8811 	msr	BASEPRI, r3
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a0a6:	bf00      	nop
 800a0a8:	bf00      	nop
 800a0aa:	e7fd      	b.n	800a0a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d103      	bne.n	800a0ba <xQueueGenericSend+0x42>
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d101      	bne.n	800a0be <xQueueGenericSend+0x46>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	e000      	b.n	800a0c0 <xQueueGenericSend+0x48>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10b      	bne.n	800a0dc <xQueueGenericSend+0x64>
	__asm volatile
 800a0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c8:	f383 8811 	msr	BASEPRI, r3
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	f3bf 8f4f 	dsb	sy
 800a0d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a0d6:	bf00      	nop
 800a0d8:	bf00      	nop
 800a0da:	e7fd      	b.n	800a0d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d103      	bne.n	800a0ea <xQueueGenericSend+0x72>
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d101      	bne.n	800a0ee <xQueueGenericSend+0x76>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e000      	b.n	800a0f0 <xQueueGenericSend+0x78>
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10b      	bne.n	800a10c <xQueueGenericSend+0x94>
	__asm volatile
 800a0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	623b      	str	r3, [r7, #32]
}
 800a106:	bf00      	nop
 800a108:	bf00      	nop
 800a10a:	e7fd      	b.n	800a108 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a10c:	f001 fa4a 	bl	800b5a4 <xTaskGetSchedulerState>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d102      	bne.n	800a11c <xQueueGenericSend+0xa4>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d101      	bne.n	800a120 <xQueueGenericSend+0xa8>
 800a11c:	2301      	movs	r3, #1
 800a11e:	e000      	b.n	800a122 <xQueueGenericSend+0xaa>
 800a120:	2300      	movs	r3, #0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10b      	bne.n	800a13e <xQueueGenericSend+0xc6>
	__asm volatile
 800a126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a12a:	f383 8811 	msr	BASEPRI, r3
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	f3bf 8f4f 	dsb	sy
 800a136:	61fb      	str	r3, [r7, #28]
}
 800a138:	bf00      	nop
 800a13a:	bf00      	nop
 800a13c:	e7fd      	b.n	800a13a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a13e:	f001 ff9b 	bl	800c078 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a144:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d302      	bcc.n	800a154 <xQueueGenericSend+0xdc>
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	2b02      	cmp	r3, #2
 800a152:	d129      	bne.n	800a1a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a154:	683a      	ldr	r2, [r7, #0]
 800a156:	68b9      	ldr	r1, [r7, #8]
 800a158:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a15a:	f000 fa33 	bl	800a5c4 <prvCopyDataToQueue>
 800a15e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a164:	2b00      	cmp	r3, #0
 800a166:	d010      	beq.n	800a18a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16a:	3324      	adds	r3, #36	@ 0x24
 800a16c:	4618      	mov	r0, r3
 800a16e:	f001 f853 	bl	800b218 <xTaskRemoveFromEventList>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d013      	beq.n	800a1a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a178:	4b3f      	ldr	r3, [pc, #252]	@ (800a278 <xQueueGenericSend+0x200>)
 800a17a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a17e:	601a      	str	r2, [r3, #0]
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	e00a      	b.n	800a1a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a18a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d007      	beq.n	800a1a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a190:	4b39      	ldr	r3, [pc, #228]	@ (800a278 <xQueueGenericSend+0x200>)
 800a192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a196:	601a      	str	r2, [r3, #0]
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a1a0:	f001 ff9c 	bl	800c0dc <vPortExitCritical>
				return pdPASS;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e063      	b.n	800a270 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d103      	bne.n	800a1b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1ae:	f001 ff95 	bl	800c0dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	e05c      	b.n	800a270 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d106      	bne.n	800a1ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1bc:	f107 0314 	add.w	r3, r7, #20
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f001 f88d 	bl	800b2e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1ca:	f001 ff87 	bl	800c0dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1ce:	f000 fdf5 	bl	800adbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1d2:	f001 ff51 	bl	800c078 <vPortEnterCritical>
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a1dc:	b25b      	sxtb	r3, r3
 800a1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e2:	d103      	bne.n	800a1ec <xQueueGenericSend+0x174>
 800a1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a1f2:	b25b      	sxtb	r3, r3
 800a1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f8:	d103      	bne.n	800a202 <xQueueGenericSend+0x18a>
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a202:	f001 ff6b 	bl	800c0dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a206:	1d3a      	adds	r2, r7, #4
 800a208:	f107 0314 	add.w	r3, r7, #20
 800a20c:	4611      	mov	r1, r2
 800a20e:	4618      	mov	r0, r3
 800a210:	f001 f87c 	bl	800b30c <xTaskCheckForTimeOut>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d124      	bne.n	800a264 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a21a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a21c:	f000 faca 	bl	800a7b4 <prvIsQueueFull>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d018      	beq.n	800a258 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a228:	3310      	adds	r3, #16
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	4611      	mov	r1, r2
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 ffa0 	bl	800b174 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a234:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a236:	f000 fa55 	bl	800a6e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a23a:	f000 fdcd 	bl	800add8 <xTaskResumeAll>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	f47f af7c 	bne.w	800a13e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a246:	4b0c      	ldr	r3, [pc, #48]	@ (800a278 <xQueueGenericSend+0x200>)
 800a248:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a24c:	601a      	str	r2, [r3, #0]
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	e772      	b.n	800a13e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a258:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a25a:	f000 fa43 	bl	800a6e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a25e:	f000 fdbb 	bl	800add8 <xTaskResumeAll>
 800a262:	e76c      	b.n	800a13e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a264:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a266:	f000 fa3d 	bl	800a6e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a26a:	f000 fdb5 	bl	800add8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a26e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a270:	4618      	mov	r0, r3
 800a272:	3738      	adds	r7, #56	@ 0x38
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	e000ed04 	.word	0xe000ed04

0800a27c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b090      	sub	sp, #64	@ 0x40
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	607a      	str	r2, [r7, #4]
 800a288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10b      	bne.n	800a2ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a298:	f383 8811 	msr	BASEPRI, r3
 800a29c:	f3bf 8f6f 	isb	sy
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a2a6:	bf00      	nop
 800a2a8:	bf00      	nop
 800a2aa:	e7fd      	b.n	800a2a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d103      	bne.n	800a2ba <xQueueGenericSendFromISR+0x3e>
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <xQueueGenericSendFromISR+0x42>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e000      	b.n	800a2c0 <xQueueGenericSendFromISR+0x44>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10b      	bne.n	800a2dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c8:	f383 8811 	msr	BASEPRI, r3
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a2d6:	bf00      	nop
 800a2d8:	bf00      	nop
 800a2da:	e7fd      	b.n	800a2d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d103      	bne.n	800a2ea <xQueueGenericSendFromISR+0x6e>
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d101      	bne.n	800a2ee <xQueueGenericSendFromISR+0x72>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e000      	b.n	800a2f0 <xQueueGenericSendFromISR+0x74>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10b      	bne.n	800a30c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a2f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f8:	f383 8811 	msr	BASEPRI, r3
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	623b      	str	r3, [r7, #32]
}
 800a306:	bf00      	nop
 800a308:	bf00      	nop
 800a30a:	e7fd      	b.n	800a308 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a30c:	f001 ff94 	bl	800c238 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a310:	f3ef 8211 	mrs	r2, BASEPRI
 800a314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	61fa      	str	r2, [r7, #28]
 800a326:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a328:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a32a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a334:	429a      	cmp	r2, r3
 800a336:	d302      	bcc.n	800a33e <xQueueGenericSendFromISR+0xc2>
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d12f      	bne.n	800a39e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a340:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a344:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a34a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a34c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	68b9      	ldr	r1, [r7, #8]
 800a352:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a354:	f000 f936 	bl	800a5c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a358:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a360:	d112      	bne.n	800a388 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a366:	2b00      	cmp	r3, #0
 800a368:	d016      	beq.n	800a398 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a36a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a36c:	3324      	adds	r3, #36	@ 0x24
 800a36e:	4618      	mov	r0, r3
 800a370:	f000 ff52 	bl	800b218 <xTaskRemoveFromEventList>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00e      	beq.n	800a398 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00b      	beq.n	800a398 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	e007      	b.n	800a398 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a388:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a38c:	3301      	adds	r3, #1
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	b25a      	sxtb	r2, r3
 800a392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a398:	2301      	movs	r3, #1
 800a39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a39c:	e001      	b.n	800a3a2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a3ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3740      	adds	r7, #64	@ 0x40
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b08c      	sub	sp, #48	@ 0x30
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10b      	bne.n	800a3ea <xQueueReceive+0x32>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	623b      	str	r3, [r7, #32]
}
 800a3e4:	bf00      	nop
 800a3e6:	bf00      	nop
 800a3e8:	e7fd      	b.n	800a3e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d103      	bne.n	800a3f8 <xQueueReceive+0x40>
 800a3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <xQueueReceive+0x44>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e000      	b.n	800a3fe <xQueueReceive+0x46>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d10b      	bne.n	800a41a <xQueueReceive+0x62>
	__asm volatile
 800a402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a406:	f383 8811 	msr	BASEPRI, r3
 800a40a:	f3bf 8f6f 	isb	sy
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	61fb      	str	r3, [r7, #28]
}
 800a414:	bf00      	nop
 800a416:	bf00      	nop
 800a418:	e7fd      	b.n	800a416 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a41a:	f001 f8c3 	bl	800b5a4 <xTaskGetSchedulerState>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d102      	bne.n	800a42a <xQueueReceive+0x72>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d101      	bne.n	800a42e <xQueueReceive+0x76>
 800a42a:	2301      	movs	r3, #1
 800a42c:	e000      	b.n	800a430 <xQueueReceive+0x78>
 800a42e:	2300      	movs	r3, #0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10b      	bne.n	800a44c <xQueueReceive+0x94>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	61bb      	str	r3, [r7, #24]
}
 800a446:	bf00      	nop
 800a448:	bf00      	nop
 800a44a:	e7fd      	b.n	800a448 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a44c:	f001 fe14 	bl	800c078 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a454:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d01f      	beq.n	800a49c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a45c:	68b9      	ldr	r1, [r7, #8]
 800a45e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a460:	f000 f91a 	bl	800a698 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a466:	1e5a      	subs	r2, r3, #1
 800a468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00f      	beq.n	800a494 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a476:	3310      	adds	r3, #16
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 fecd 	bl	800b218 <xTaskRemoveFromEventList>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d007      	beq.n	800a494 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a484:	4b3c      	ldr	r3, [pc, #240]	@ (800a578 <xQueueReceive+0x1c0>)
 800a486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a48a:	601a      	str	r2, [r3, #0]
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a494:	f001 fe22 	bl	800c0dc <vPortExitCritical>
				return pdPASS;
 800a498:	2301      	movs	r3, #1
 800a49a:	e069      	b.n	800a570 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d103      	bne.n	800a4aa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4a2:	f001 fe1b 	bl	800c0dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	e062      	b.n	800a570 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d106      	bne.n	800a4be <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4b0:	f107 0310 	add.w	r3, r7, #16
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f000 ff13 	bl	800b2e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4be:	f001 fe0d 	bl	800c0dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4c2:	f000 fc7b 	bl	800adbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4c6:	f001 fdd7 	bl	800c078 <vPortEnterCritical>
 800a4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4d0:	b25b      	sxtb	r3, r3
 800a4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d6:	d103      	bne.n	800a4e0 <xQueueReceive+0x128>
 800a4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4e6:	b25b      	sxtb	r3, r3
 800a4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ec:	d103      	bne.n	800a4f6 <xQueueReceive+0x13e>
 800a4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4f6:	f001 fdf1 	bl	800c0dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4fa:	1d3a      	adds	r2, r7, #4
 800a4fc:	f107 0310 	add.w	r3, r7, #16
 800a500:	4611      	mov	r1, r2
 800a502:	4618      	mov	r0, r3
 800a504:	f000 ff02 	bl	800b30c <xTaskCheckForTimeOut>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d123      	bne.n	800a556 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a50e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a510:	f000 f93a 	bl	800a788 <prvIsQueueEmpty>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d017      	beq.n	800a54a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a51c:	3324      	adds	r3, #36	@ 0x24
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	4611      	mov	r1, r2
 800a522:	4618      	mov	r0, r3
 800a524:	f000 fe26 	bl	800b174 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a528:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a52a:	f000 f8db 	bl	800a6e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a52e:	f000 fc53 	bl	800add8 <xTaskResumeAll>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d189      	bne.n	800a44c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a538:	4b0f      	ldr	r3, [pc, #60]	@ (800a578 <xQueueReceive+0x1c0>)
 800a53a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a53e:	601a      	str	r2, [r3, #0]
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	e780      	b.n	800a44c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a54a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a54c:	f000 f8ca 	bl	800a6e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a550:	f000 fc42 	bl	800add8 <xTaskResumeAll>
 800a554:	e77a      	b.n	800a44c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a556:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a558:	f000 f8c4 	bl	800a6e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a55c:	f000 fc3c 	bl	800add8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a560:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a562:	f000 f911 	bl	800a788 <prvIsQueueEmpty>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f43f af6f 	beq.w	800a44c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a56e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a570:	4618      	mov	r0, r3
 800a572:	3730      	adds	r7, #48	@ 0x30
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	e000ed04 	.word	0xe000ed04

0800a57c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d10b      	bne.n	800a5a6 <vQueueDelete+0x2a>
	__asm volatile
 800a58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	60bb      	str	r3, [r7, #8]
}
 800a5a0:	bf00      	nop
 800a5a2:	bf00      	nop
 800a5a4:	e7fd      	b.n	800a5a2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f000 f946 	bl	800a838 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d102      	bne.n	800a5bc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f001 ff4e 	bl	800c458 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a5bc:	bf00      	nop
 800a5be:	3710      	adds	r7, #16
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10d      	bne.n	800a5fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d14d      	bne.n	800a686 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f000 fff6 	bl	800b5e0 <xTaskPriorityDisinherit>
 800a5f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	609a      	str	r2, [r3, #8]
 800a5fc:	e043      	b.n	800a686 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d119      	bne.n	800a638 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6858      	ldr	r0, [r3, #4]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a60c:	461a      	mov	r2, r3
 800a60e:	68b9      	ldr	r1, [r7, #8]
 800a610:	f002 f8de 	bl	800c7d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a61c:	441a      	add	r2, r3
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	685a      	ldr	r2, [r3, #4]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d32b      	bcc.n	800a686 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	605a      	str	r2, [r3, #4]
 800a636:	e026      	b.n	800a686 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	68d8      	ldr	r0, [r3, #12]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a640:	461a      	mov	r2, r3
 800a642:	68b9      	ldr	r1, [r7, #8]
 800a644:	f002 f8c4 	bl	800c7d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	68da      	ldr	r2, [r3, #12]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a650:	425b      	negs	r3, r3
 800a652:	441a      	add	r2, r3
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	68da      	ldr	r2, [r3, #12]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	429a      	cmp	r2, r3
 800a662:	d207      	bcs.n	800a674 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	689a      	ldr	r2, [r3, #8]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a66c:	425b      	negs	r3, r3
 800a66e:	441a      	add	r2, r3
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b02      	cmp	r3, #2
 800a678:	d105      	bne.n	800a686 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d002      	beq.n	800a686 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	3b01      	subs	r3, #1
 800a684:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	1c5a      	adds	r2, r3, #1
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a68e:	697b      	ldr	r3, [r7, #20]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3718      	adds	r7, #24
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d018      	beq.n	800a6dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	68da      	ldr	r2, [r3, #12]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6b2:	441a      	add	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	68da      	ldr	r2, [r3, #12]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d303      	bcc.n	800a6cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	68d9      	ldr	r1, [r3, #12]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	6838      	ldr	r0, [r7, #0]
 800a6d8:	f002 f87a 	bl	800c7d0 <memcpy>
	}
}
 800a6dc:	bf00      	nop
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a6ec:	f001 fcc4 	bl	800c078 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6f8:	e011      	b.n	800a71e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d012      	beq.n	800a728 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	3324      	adds	r3, #36	@ 0x24
 800a706:	4618      	mov	r0, r3
 800a708:	f000 fd86 	bl	800b218 <xTaskRemoveFromEventList>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d001      	beq.n	800a716 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a712:	f000 fe5f 	bl	800b3d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a716:	7bfb      	ldrb	r3, [r7, #15]
 800a718:	3b01      	subs	r3, #1
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a71e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a722:	2b00      	cmp	r3, #0
 800a724:	dce9      	bgt.n	800a6fa <prvUnlockQueue+0x16>
 800a726:	e000      	b.n	800a72a <prvUnlockQueue+0x46>
					break;
 800a728:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	22ff      	movs	r2, #255	@ 0xff
 800a72e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a732:	f001 fcd3 	bl	800c0dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a736:	f001 fc9f 	bl	800c078 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a740:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a742:	e011      	b.n	800a768 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d012      	beq.n	800a772 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	3310      	adds	r3, #16
 800a750:	4618      	mov	r0, r3
 800a752:	f000 fd61 	bl	800b218 <xTaskRemoveFromEventList>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d001      	beq.n	800a760 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a75c:	f000 fe3a 	bl	800b3d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a760:	7bbb      	ldrb	r3, [r7, #14]
 800a762:	3b01      	subs	r3, #1
 800a764:	b2db      	uxtb	r3, r3
 800a766:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	dce9      	bgt.n	800a744 <prvUnlockQueue+0x60>
 800a770:	e000      	b.n	800a774 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a772:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	22ff      	movs	r2, #255	@ 0xff
 800a778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a77c:	f001 fcae 	bl	800c0dc <vPortExitCritical>
}
 800a780:	bf00      	nop
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a790:	f001 fc72 	bl	800c078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d102      	bne.n	800a7a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a79c:	2301      	movs	r3, #1
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	e001      	b.n	800a7a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7a6:	f001 fc99 	bl	800c0dc <vPortExitCritical>

	return xReturn;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7bc:	f001 fc5c 	bl	800c078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d102      	bne.n	800a7d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	60fb      	str	r3, [r7, #12]
 800a7d0:	e001      	b.n	800a7d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7d6:	f001 fc81 	bl	800c0dc <vPortExitCritical>

	return xReturn;
 800a7da:	68fb      	ldr	r3, [r7, #12]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60fb      	str	r3, [r7, #12]
 800a7f2:	e014      	b.n	800a81e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a7f4:	4a0f      	ldr	r2, [pc, #60]	@ (800a834 <vQueueAddToRegistry+0x50>)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d10b      	bne.n	800a818 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a800:	490c      	ldr	r1, [pc, #48]	@ (800a834 <vQueueAddToRegistry+0x50>)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	683a      	ldr	r2, [r7, #0]
 800a806:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a80a:	4a0a      	ldr	r2, [pc, #40]	@ (800a834 <vQueueAddToRegistry+0x50>)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	00db      	lsls	r3, r3, #3
 800a810:	4413      	add	r3, r2
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a816:	e006      	b.n	800a826 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	3301      	adds	r3, #1
 800a81c:	60fb      	str	r3, [r7, #12]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2b07      	cmp	r3, #7
 800a822:	d9e7      	bls.n	800a7f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a824:	bf00      	nop
 800a826:	bf00      	nop
 800a828:	3714      	adds	r7, #20
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	20000ad0 	.word	0x20000ad0

0800a838 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a840:	2300      	movs	r3, #0
 800a842:	60fb      	str	r3, [r7, #12]
 800a844:	e016      	b.n	800a874 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a846:	4a10      	ldr	r2, [pc, #64]	@ (800a888 <vQueueUnregisterQueue+0x50>)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	00db      	lsls	r3, r3, #3
 800a84c:	4413      	add	r3, r2
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	429a      	cmp	r2, r3
 800a854:	d10b      	bne.n	800a86e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a856:	4a0c      	ldr	r2, [pc, #48]	@ (800a888 <vQueueUnregisterQueue+0x50>)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2100      	movs	r1, #0
 800a85c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a860:	4a09      	ldr	r2, [pc, #36]	@ (800a888 <vQueueUnregisterQueue+0x50>)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	00db      	lsls	r3, r3, #3
 800a866:	4413      	add	r3, r2
 800a868:	2200      	movs	r2, #0
 800a86a:	605a      	str	r2, [r3, #4]
				break;
 800a86c:	e006      	b.n	800a87c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	3301      	adds	r3, #1
 800a872:	60fb      	str	r3, [r7, #12]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2b07      	cmp	r3, #7
 800a878:	d9e5      	bls.n	800a846 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a87a:	bf00      	nop
 800a87c:	bf00      	nop
 800a87e:	3714      	adds	r7, #20
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	20000ad0 	.word	0x20000ad0

0800a88c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a89c:	f001 fbec 	bl	800c078 <vPortEnterCritical>
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8a6:	b25b      	sxtb	r3, r3
 800a8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ac:	d103      	bne.n	800a8b6 <vQueueWaitForMessageRestricted+0x2a>
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8bc:	b25b      	sxtb	r3, r3
 800a8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c2:	d103      	bne.n	800a8cc <vQueueWaitForMessageRestricted+0x40>
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8cc:	f001 fc06 	bl	800c0dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d106      	bne.n	800a8e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	3324      	adds	r3, #36	@ 0x24
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	68b9      	ldr	r1, [r7, #8]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f000 fc6d 	bl	800b1c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a8e6:	6978      	ldr	r0, [r7, #20]
 800a8e8:	f7ff fefc 	bl	800a6e4 <prvUnlockQueue>
	}
 800a8ec:	bf00      	nop
 800a8ee:	3718      	adds	r7, #24
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b08e      	sub	sp, #56	@ 0x38
 800a8f8:	af04      	add	r7, sp, #16
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
 800a900:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10b      	bne.n	800a920 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	623b      	str	r3, [r7, #32]
}
 800a91a:	bf00      	nop
 800a91c:	bf00      	nop
 800a91e:	e7fd      	b.n	800a91c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a922:	2b00      	cmp	r3, #0
 800a924:	d10b      	bne.n	800a93e <xTaskCreateStatic+0x4a>
	__asm volatile
 800a926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	61fb      	str	r3, [r7, #28]
}
 800a938:	bf00      	nop
 800a93a:	bf00      	nop
 800a93c:	e7fd      	b.n	800a93a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a93e:	23a8      	movs	r3, #168	@ 0xa8
 800a940:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	2ba8      	cmp	r3, #168	@ 0xa8
 800a946:	d00b      	beq.n	800a960 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94c:	f383 8811 	msr	BASEPRI, r3
 800a950:	f3bf 8f6f 	isb	sy
 800a954:	f3bf 8f4f 	dsb	sy
 800a958:	61bb      	str	r3, [r7, #24]
}
 800a95a:	bf00      	nop
 800a95c:	bf00      	nop
 800a95e:	e7fd      	b.n	800a95c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a960:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a964:	2b00      	cmp	r3, #0
 800a966:	d01e      	beq.n	800a9a6 <xTaskCreateStatic+0xb2>
 800a968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d01b      	beq.n	800a9a6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a970:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a974:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a976:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97a:	2202      	movs	r2, #2
 800a97c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a980:	2300      	movs	r3, #0
 800a982:	9303      	str	r3, [sp, #12]
 800a984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a986:	9302      	str	r3, [sp, #8]
 800a988:	f107 0314 	add.w	r3, r7, #20
 800a98c:	9301      	str	r3, [sp, #4]
 800a98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	68b9      	ldr	r1, [r7, #8]
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f000 f851 	bl	800aa40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a99e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a9a0:	f000 f8f6 	bl	800ab90 <prvAddNewTaskToReadyList>
 800a9a4:	e001      	b.n	800a9aa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a9aa:	697b      	ldr	r3, [r7, #20]
	}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3728      	adds	r7, #40	@ 0x28
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b08c      	sub	sp, #48	@ 0x30
 800a9b8:	af04      	add	r7, sp, #16
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	603b      	str	r3, [r7, #0]
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a9c4:	88fb      	ldrh	r3, [r7, #6]
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f001 fc77 	bl	800c2bc <pvPortMalloc>
 800a9ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00e      	beq.n	800a9f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a9d6:	20a8      	movs	r0, #168	@ 0xa8
 800a9d8:	f001 fc70 	bl	800c2bc <pvPortMalloc>
 800a9dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d003      	beq.n	800a9ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	631a      	str	r2, [r3, #48]	@ 0x30
 800a9ea:	e005      	b.n	800a9f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a9ec:	6978      	ldr	r0, [r7, #20]
 800a9ee:	f001 fd33 	bl	800c458 <vPortFree>
 800a9f2:	e001      	b.n	800a9f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d017      	beq.n	800aa2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa06:	88fa      	ldrh	r2, [r7, #6]
 800aa08:	2300      	movs	r3, #0
 800aa0a:	9303      	str	r3, [sp, #12]
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	9302      	str	r3, [sp, #8]
 800aa10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa12:	9301      	str	r3, [sp, #4]
 800aa14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	68b9      	ldr	r1, [r7, #8]
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 f80f 	bl	800aa40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa22:	69f8      	ldr	r0, [r7, #28]
 800aa24:	f000 f8b4 	bl	800ab90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	61bb      	str	r3, [r7, #24]
 800aa2c:	e002      	b.n	800aa34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa2e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa34:	69bb      	ldr	r3, [r7, #24]
	}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3720      	adds	r7, #32
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
	...

0800aa40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b088      	sub	sp, #32
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
 800aa4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa50:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	461a      	mov	r2, r3
 800aa58:	21a5      	movs	r1, #165	@ 0xa5
 800aa5a:	f001 fe35 	bl	800c6c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	4413      	add	r3, r2
 800aa6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	f023 0307 	bic.w	r3, r3, #7
 800aa76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	f003 0307 	and.w	r3, r3, #7
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00b      	beq.n	800aa9a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800aa82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	617b      	str	r3, [r7, #20]
}
 800aa94:	bf00      	nop
 800aa96:	bf00      	nop
 800aa98:	e7fd      	b.n	800aa96 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d01f      	beq.n	800aae0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	61fb      	str	r3, [r7, #28]
 800aaa4:	e012      	b.n	800aacc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	4413      	add	r3, r2
 800aaac:	7819      	ldrb	r1, [r3, #0]
 800aaae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	4413      	add	r3, r2
 800aab4:	3334      	adds	r3, #52	@ 0x34
 800aab6:	460a      	mov	r2, r1
 800aab8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aaba:	68ba      	ldr	r2, [r7, #8]
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	4413      	add	r3, r2
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d006      	beq.n	800aad4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	3301      	adds	r3, #1
 800aaca:	61fb      	str	r3, [r7, #28]
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	2b0f      	cmp	r3, #15
 800aad0:	d9e9      	bls.n	800aaa6 <prvInitialiseNewTask+0x66>
 800aad2:	e000      	b.n	800aad6 <prvInitialiseNewTask+0x96>
			{
				break;
 800aad4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aade:	e003      	b.n	800aae8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaea:	2b37      	cmp	r3, #55	@ 0x37
 800aaec:	d901      	bls.n	800aaf2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aaee:	2337      	movs	r3, #55	@ 0x37
 800aaf0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aaf6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aafc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab00:	2200      	movs	r2, #0
 800ab02:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab06:	3304      	adds	r3, #4
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7ff f86d 	bl	8009be8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab10:	3318      	adds	r3, #24
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7ff f868 	bl	8009be8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ab24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab2c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab30:	2200      	movs	r2, #0
 800ab32:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab40:	3354      	adds	r3, #84	@ 0x54
 800ab42:	224c      	movs	r2, #76	@ 0x4c
 800ab44:	2100      	movs	r1, #0
 800ab46:	4618      	mov	r0, r3
 800ab48:	f001 fdbe 	bl	800c6c8 <memset>
 800ab4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab4e:	4a0d      	ldr	r2, [pc, #52]	@ (800ab84 <prvInitialiseNewTask+0x144>)
 800ab50:	659a      	str	r2, [r3, #88]	@ 0x58
 800ab52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab54:	4a0c      	ldr	r2, [pc, #48]	@ (800ab88 <prvInitialiseNewTask+0x148>)
 800ab56:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ab58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5a:	4a0c      	ldr	r2, [pc, #48]	@ (800ab8c <prvInitialiseNewTask+0x14c>)
 800ab5c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab5e:	683a      	ldr	r2, [r7, #0]
 800ab60:	68f9      	ldr	r1, [r7, #12]
 800ab62:	69b8      	ldr	r0, [r7, #24]
 800ab64:	f001 f95a 	bl	800be1c <pxPortInitialiseStack>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab7a:	bf00      	nop
 800ab7c:	3720      	adds	r7, #32
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	200028d8 	.word	0x200028d8
 800ab88:	20002940 	.word	0x20002940
 800ab8c:	200029a8 	.word	0x200029a8

0800ab90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab98:	f001 fa6e 	bl	800c078 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab9c:	4b2d      	ldr	r3, [pc, #180]	@ (800ac54 <prvAddNewTaskToReadyList+0xc4>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	3301      	adds	r3, #1
 800aba2:	4a2c      	ldr	r2, [pc, #176]	@ (800ac54 <prvAddNewTaskToReadyList+0xc4>)
 800aba4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aba6:	4b2c      	ldr	r3, [pc, #176]	@ (800ac58 <prvAddNewTaskToReadyList+0xc8>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d109      	bne.n	800abc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800abae:	4a2a      	ldr	r2, [pc, #168]	@ (800ac58 <prvAddNewTaskToReadyList+0xc8>)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800abb4:	4b27      	ldr	r3, [pc, #156]	@ (800ac54 <prvAddNewTaskToReadyList+0xc4>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d110      	bne.n	800abde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800abbc:	f000 fc2e 	bl	800b41c <prvInitialiseTaskLists>
 800abc0:	e00d      	b.n	800abde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800abc2:	4b26      	ldr	r3, [pc, #152]	@ (800ac5c <prvAddNewTaskToReadyList+0xcc>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d109      	bne.n	800abde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800abca:	4b23      	ldr	r3, [pc, #140]	@ (800ac58 <prvAddNewTaskToReadyList+0xc8>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d802      	bhi.n	800abde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800abd8:	4a1f      	ldr	r2, [pc, #124]	@ (800ac58 <prvAddNewTaskToReadyList+0xc8>)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800abde:	4b20      	ldr	r3, [pc, #128]	@ (800ac60 <prvAddNewTaskToReadyList+0xd0>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3301      	adds	r3, #1
 800abe4:	4a1e      	ldr	r2, [pc, #120]	@ (800ac60 <prvAddNewTaskToReadyList+0xd0>)
 800abe6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800abe8:	4b1d      	ldr	r3, [pc, #116]	@ (800ac60 <prvAddNewTaskToReadyList+0xd0>)
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abf4:	4b1b      	ldr	r3, [pc, #108]	@ (800ac64 <prvAddNewTaskToReadyList+0xd4>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d903      	bls.n	800ac04 <prvAddNewTaskToReadyList+0x74>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac00:	4a18      	ldr	r2, [pc, #96]	@ (800ac64 <prvAddNewTaskToReadyList+0xd4>)
 800ac02:	6013      	str	r3, [r2, #0]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac08:	4613      	mov	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4a15      	ldr	r2, [pc, #84]	@ (800ac68 <prvAddNewTaskToReadyList+0xd8>)
 800ac12:	441a      	add	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	3304      	adds	r3, #4
 800ac18:	4619      	mov	r1, r3
 800ac1a:	4610      	mov	r0, r2
 800ac1c:	f7fe fff1 	bl	8009c02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac20:	f001 fa5c 	bl	800c0dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac24:	4b0d      	ldr	r3, [pc, #52]	@ (800ac5c <prvAddNewTaskToReadyList+0xcc>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00e      	beq.n	800ac4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac58 <prvAddNewTaskToReadyList+0xc8>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d207      	bcs.n	800ac4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac3a:	4b0c      	ldr	r3, [pc, #48]	@ (800ac6c <prvAddNewTaskToReadyList+0xdc>)
 800ac3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac40:	601a      	str	r2, [r3, #0]
 800ac42:	f3bf 8f4f 	dsb	sy
 800ac46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac4a:	bf00      	nop
 800ac4c:	3708      	adds	r7, #8
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	20000fe4 	.word	0x20000fe4
 800ac58:	20000b10 	.word	0x20000b10
 800ac5c:	20000ff0 	.word	0x20000ff0
 800ac60:	20001000 	.word	0x20001000
 800ac64:	20000fec 	.word	0x20000fec
 800ac68:	20000b14 	.word	0x20000b14
 800ac6c:	e000ed04 	.word	0xe000ed04

0800ac70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d018      	beq.n	800acb4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac82:	4b14      	ldr	r3, [pc, #80]	@ (800acd4 <vTaskDelay+0x64>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00b      	beq.n	800aca2 <vTaskDelay+0x32>
	__asm volatile
 800ac8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	60bb      	str	r3, [r7, #8]
}
 800ac9c:	bf00      	nop
 800ac9e:	bf00      	nop
 800aca0:	e7fd      	b.n	800ac9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aca2:	f000 f88b 	bl	800adbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aca6:	2100      	movs	r1, #0
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fd09 	bl	800b6c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800acae:	f000 f893 	bl	800add8 <xTaskResumeAll>
 800acb2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d107      	bne.n	800acca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800acba:	4b07      	ldr	r3, [pc, #28]	@ (800acd8 <vTaskDelay+0x68>)
 800acbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acc0:	601a      	str	r2, [r3, #0]
 800acc2:	f3bf 8f4f 	dsb	sy
 800acc6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800acca:	bf00      	nop
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	2000100c 	.word	0x2000100c
 800acd8:	e000ed04 	.word	0xe000ed04

0800acdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b08a      	sub	sp, #40	@ 0x28
 800ace0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ace2:	2300      	movs	r3, #0
 800ace4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ace6:	2300      	movs	r3, #0
 800ace8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800acea:	463a      	mov	r2, r7
 800acec:	1d39      	adds	r1, r7, #4
 800acee:	f107 0308 	add.w	r3, r7, #8
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fe ff24 	bl	8009b40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800acf8:	6839      	ldr	r1, [r7, #0]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	9202      	str	r2, [sp, #8]
 800ad00:	9301      	str	r3, [sp, #4]
 800ad02:	2300      	movs	r3, #0
 800ad04:	9300      	str	r3, [sp, #0]
 800ad06:	2300      	movs	r3, #0
 800ad08:	460a      	mov	r2, r1
 800ad0a:	4924      	ldr	r1, [pc, #144]	@ (800ad9c <vTaskStartScheduler+0xc0>)
 800ad0c:	4824      	ldr	r0, [pc, #144]	@ (800ada0 <vTaskStartScheduler+0xc4>)
 800ad0e:	f7ff fdf1 	bl	800a8f4 <xTaskCreateStatic>
 800ad12:	4603      	mov	r3, r0
 800ad14:	4a23      	ldr	r2, [pc, #140]	@ (800ada4 <vTaskStartScheduler+0xc8>)
 800ad16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ad18:	4b22      	ldr	r3, [pc, #136]	@ (800ada4 <vTaskStartScheduler+0xc8>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d002      	beq.n	800ad26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ad20:	2301      	movs	r3, #1
 800ad22:	617b      	str	r3, [r7, #20]
 800ad24:	e001      	b.n	800ad2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ad26:	2300      	movs	r3, #0
 800ad28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d102      	bne.n	800ad36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ad30:	f000 fd1a 	bl	800b768 <xTimerCreateTimerTask>
 800ad34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d11b      	bne.n	800ad74 <vTaskStartScheduler+0x98>
	__asm volatile
 800ad3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad40:	f383 8811 	msr	BASEPRI, r3
 800ad44:	f3bf 8f6f 	isb	sy
 800ad48:	f3bf 8f4f 	dsb	sy
 800ad4c:	613b      	str	r3, [r7, #16]
}
 800ad4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad50:	4b15      	ldr	r3, [pc, #84]	@ (800ada8 <vTaskStartScheduler+0xcc>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	3354      	adds	r3, #84	@ 0x54
 800ad56:	4a15      	ldr	r2, [pc, #84]	@ (800adac <vTaskStartScheduler+0xd0>)
 800ad58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ad5a:	4b15      	ldr	r3, [pc, #84]	@ (800adb0 <vTaskStartScheduler+0xd4>)
 800ad5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad62:	4b14      	ldr	r3, [pc, #80]	@ (800adb4 <vTaskStartScheduler+0xd8>)
 800ad64:	2201      	movs	r2, #1
 800ad66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad68:	4b13      	ldr	r3, [pc, #76]	@ (800adb8 <vTaskStartScheduler+0xdc>)
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad6e:	f001 f8df 	bl	800bf30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad72:	e00f      	b.n	800ad94 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad7a:	d10b      	bne.n	800ad94 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ad7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad80:	f383 8811 	msr	BASEPRI, r3
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	60fb      	str	r3, [r7, #12]
}
 800ad8e:	bf00      	nop
 800ad90:	bf00      	nop
 800ad92:	e7fd      	b.n	800ad90 <vTaskStartScheduler+0xb4>
}
 800ad94:	bf00      	nop
 800ad96:	3718      	adds	r7, #24
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	0800c92c 	.word	0x0800c92c
 800ada0:	0800b3ed 	.word	0x0800b3ed
 800ada4:	20001008 	.word	0x20001008
 800ada8:	20000b10 	.word	0x20000b10
 800adac:	20000010 	.word	0x20000010
 800adb0:	20001004 	.word	0x20001004
 800adb4:	20000ff0 	.word	0x20000ff0
 800adb8:	20000fe8 	.word	0x20000fe8

0800adbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800adbc:	b480      	push	{r7}
 800adbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800adc0:	4b04      	ldr	r3, [pc, #16]	@ (800add4 <vTaskSuspendAll+0x18>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	3301      	adds	r3, #1
 800adc6:	4a03      	ldr	r2, [pc, #12]	@ (800add4 <vTaskSuspendAll+0x18>)
 800adc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800adca:	bf00      	nop
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr
 800add4:	2000100c 	.word	0x2000100c

0800add8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800adde:	2300      	movs	r3, #0
 800ade0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ade2:	2300      	movs	r3, #0
 800ade4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ade6:	4b42      	ldr	r3, [pc, #264]	@ (800aef0 <xTaskResumeAll+0x118>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d10b      	bne.n	800ae06 <xTaskResumeAll+0x2e>
	__asm volatile
 800adee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	603b      	str	r3, [r7, #0]
}
 800ae00:	bf00      	nop
 800ae02:	bf00      	nop
 800ae04:	e7fd      	b.n	800ae02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae06:	f001 f937 	bl	800c078 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae0a:	4b39      	ldr	r3, [pc, #228]	@ (800aef0 <xTaskResumeAll+0x118>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	4a37      	ldr	r2, [pc, #220]	@ (800aef0 <xTaskResumeAll+0x118>)
 800ae12:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae14:	4b36      	ldr	r3, [pc, #216]	@ (800aef0 <xTaskResumeAll+0x118>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d162      	bne.n	800aee2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae1c:	4b35      	ldr	r3, [pc, #212]	@ (800aef4 <xTaskResumeAll+0x11c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d05e      	beq.n	800aee2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae24:	e02f      	b.n	800ae86 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae26:	4b34      	ldr	r3, [pc, #208]	@ (800aef8 <xTaskResumeAll+0x120>)
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	3318      	adds	r3, #24
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7fe ff42 	bl	8009cbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	3304      	adds	r3, #4
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7fe ff3d 	bl	8009cbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae46:	4b2d      	ldr	r3, [pc, #180]	@ (800aefc <xTaskResumeAll+0x124>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d903      	bls.n	800ae56 <xTaskResumeAll+0x7e>
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae52:	4a2a      	ldr	r2, [pc, #168]	@ (800aefc <xTaskResumeAll+0x124>)
 800ae54:	6013      	str	r3, [r2, #0]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	4413      	add	r3, r2
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4a27      	ldr	r2, [pc, #156]	@ (800af00 <xTaskResumeAll+0x128>)
 800ae64:	441a      	add	r2, r3
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	3304      	adds	r3, #4
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	f7fe fec8 	bl	8009c02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae76:	4b23      	ldr	r3, [pc, #140]	@ (800af04 <xTaskResumeAll+0x12c>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d302      	bcc.n	800ae86 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ae80:	4b21      	ldr	r3, [pc, #132]	@ (800af08 <xTaskResumeAll+0x130>)
 800ae82:	2201      	movs	r2, #1
 800ae84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae86:	4b1c      	ldr	r3, [pc, #112]	@ (800aef8 <xTaskResumeAll+0x120>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1cb      	bne.n	800ae26 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d001      	beq.n	800ae98 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae94:	f000 fb66 	bl	800b564 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ae98:	4b1c      	ldr	r3, [pc, #112]	@ (800af0c <xTaskResumeAll+0x134>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d010      	beq.n	800aec6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aea4:	f000 f846 	bl	800af34 <xTaskIncrementTick>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d002      	beq.n	800aeb4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800aeae:	4b16      	ldr	r3, [pc, #88]	@ (800af08 <xTaskResumeAll+0x130>)
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d1f1      	bne.n	800aea4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800aec0:	4b12      	ldr	r3, [pc, #72]	@ (800af0c <xTaskResumeAll+0x134>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aec6:	4b10      	ldr	r3, [pc, #64]	@ (800af08 <xTaskResumeAll+0x130>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d009      	beq.n	800aee2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aece:	2301      	movs	r3, #1
 800aed0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aed2:	4b0f      	ldr	r3, [pc, #60]	@ (800af10 <xTaskResumeAll+0x138>)
 800aed4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	f3bf 8f4f 	dsb	sy
 800aede:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aee2:	f001 f8fb 	bl	800c0dc <vPortExitCritical>

	return xAlreadyYielded;
 800aee6:	68bb      	ldr	r3, [r7, #8]
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3710      	adds	r7, #16
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	2000100c 	.word	0x2000100c
 800aef4:	20000fe4 	.word	0x20000fe4
 800aef8:	20000fa4 	.word	0x20000fa4
 800aefc:	20000fec 	.word	0x20000fec
 800af00:	20000b14 	.word	0x20000b14
 800af04:	20000b10 	.word	0x20000b10
 800af08:	20000ff8 	.word	0x20000ff8
 800af0c:	20000ff4 	.word	0x20000ff4
 800af10:	e000ed04 	.word	0xe000ed04

0800af14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800af1a:	4b05      	ldr	r3, [pc, #20]	@ (800af30 <xTaskGetTickCount+0x1c>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800af20:	687b      	ldr	r3, [r7, #4]
}
 800af22:	4618      	mov	r0, r3
 800af24:	370c      	adds	r7, #12
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	20000fe8 	.word	0x20000fe8

0800af34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800af3a:	2300      	movs	r3, #0
 800af3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af3e:	4b4f      	ldr	r3, [pc, #316]	@ (800b07c <xTaskIncrementTick+0x148>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	f040 8090 	bne.w	800b068 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800af48:	4b4d      	ldr	r3, [pc, #308]	@ (800b080 <xTaskIncrementTick+0x14c>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	3301      	adds	r3, #1
 800af4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800af50:	4a4b      	ldr	r2, [pc, #300]	@ (800b080 <xTaskIncrementTick+0x14c>)
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d121      	bne.n	800afa0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800af5c:	4b49      	ldr	r3, [pc, #292]	@ (800b084 <xTaskIncrementTick+0x150>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00b      	beq.n	800af7e <xTaskIncrementTick+0x4a>
	__asm volatile
 800af66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af6a:	f383 8811 	msr	BASEPRI, r3
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	f3bf 8f4f 	dsb	sy
 800af76:	603b      	str	r3, [r7, #0]
}
 800af78:	bf00      	nop
 800af7a:	bf00      	nop
 800af7c:	e7fd      	b.n	800af7a <xTaskIncrementTick+0x46>
 800af7e:	4b41      	ldr	r3, [pc, #260]	@ (800b084 <xTaskIncrementTick+0x150>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	60fb      	str	r3, [r7, #12]
 800af84:	4b40      	ldr	r3, [pc, #256]	@ (800b088 <xTaskIncrementTick+0x154>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a3e      	ldr	r2, [pc, #248]	@ (800b084 <xTaskIncrementTick+0x150>)
 800af8a:	6013      	str	r3, [r2, #0]
 800af8c:	4a3e      	ldr	r2, [pc, #248]	@ (800b088 <xTaskIncrementTick+0x154>)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6013      	str	r3, [r2, #0]
 800af92:	4b3e      	ldr	r3, [pc, #248]	@ (800b08c <xTaskIncrementTick+0x158>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	3301      	adds	r3, #1
 800af98:	4a3c      	ldr	r2, [pc, #240]	@ (800b08c <xTaskIncrementTick+0x158>)
 800af9a:	6013      	str	r3, [r2, #0]
 800af9c:	f000 fae2 	bl	800b564 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800afa0:	4b3b      	ldr	r3, [pc, #236]	@ (800b090 <xTaskIncrementTick+0x15c>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	693a      	ldr	r2, [r7, #16]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d349      	bcc.n	800b03e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afaa:	4b36      	ldr	r3, [pc, #216]	@ (800b084 <xTaskIncrementTick+0x150>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d104      	bne.n	800afbe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afb4:	4b36      	ldr	r3, [pc, #216]	@ (800b090 <xTaskIncrementTick+0x15c>)
 800afb6:	f04f 32ff 	mov.w	r2, #4294967295
 800afba:	601a      	str	r2, [r3, #0]
					break;
 800afbc:	e03f      	b.n	800b03e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afbe:	4b31      	ldr	r3, [pc, #196]	@ (800b084 <xTaskIncrementTick+0x150>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d203      	bcs.n	800afde <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800afd6:	4a2e      	ldr	r2, [pc, #184]	@ (800b090 <xTaskIncrementTick+0x15c>)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800afdc:	e02f      	b.n	800b03e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	3304      	adds	r3, #4
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7fe fe6a 	bl	8009cbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afec:	2b00      	cmp	r3, #0
 800afee:	d004      	beq.n	800affa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	3318      	adds	r3, #24
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7fe fe61 	bl	8009cbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800affe:	4b25      	ldr	r3, [pc, #148]	@ (800b094 <xTaskIncrementTick+0x160>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	429a      	cmp	r2, r3
 800b004:	d903      	bls.n	800b00e <xTaskIncrementTick+0xda>
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b00a:	4a22      	ldr	r2, [pc, #136]	@ (800b094 <xTaskIncrementTick+0x160>)
 800b00c:	6013      	str	r3, [r2, #0]
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b012:	4613      	mov	r3, r2
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4413      	add	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	4a1f      	ldr	r2, [pc, #124]	@ (800b098 <xTaskIncrementTick+0x164>)
 800b01c:	441a      	add	r2, r3
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	3304      	adds	r3, #4
 800b022:	4619      	mov	r1, r3
 800b024:	4610      	mov	r0, r2
 800b026:	f7fe fdec 	bl	8009c02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b02e:	4b1b      	ldr	r3, [pc, #108]	@ (800b09c <xTaskIncrementTick+0x168>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b034:	429a      	cmp	r2, r3
 800b036:	d3b8      	bcc.n	800afaa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b038:	2301      	movs	r3, #1
 800b03a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b03c:	e7b5      	b.n	800afaa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b03e:	4b17      	ldr	r3, [pc, #92]	@ (800b09c <xTaskIncrementTick+0x168>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b044:	4914      	ldr	r1, [pc, #80]	@ (800b098 <xTaskIncrementTick+0x164>)
 800b046:	4613      	mov	r3, r2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4413      	add	r3, r2
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	440b      	add	r3, r1
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d901      	bls.n	800b05a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b056:	2301      	movs	r3, #1
 800b058:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b05a:	4b11      	ldr	r3, [pc, #68]	@ (800b0a0 <xTaskIncrementTick+0x16c>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d007      	beq.n	800b072 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b062:	2301      	movs	r3, #1
 800b064:	617b      	str	r3, [r7, #20]
 800b066:	e004      	b.n	800b072 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b068:	4b0e      	ldr	r3, [pc, #56]	@ (800b0a4 <xTaskIncrementTick+0x170>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	3301      	adds	r3, #1
 800b06e:	4a0d      	ldr	r2, [pc, #52]	@ (800b0a4 <xTaskIncrementTick+0x170>)
 800b070:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b072:	697b      	ldr	r3, [r7, #20]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3718      	adds	r7, #24
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	2000100c 	.word	0x2000100c
 800b080:	20000fe8 	.word	0x20000fe8
 800b084:	20000f9c 	.word	0x20000f9c
 800b088:	20000fa0 	.word	0x20000fa0
 800b08c:	20000ffc 	.word	0x20000ffc
 800b090:	20001004 	.word	0x20001004
 800b094:	20000fec 	.word	0x20000fec
 800b098:	20000b14 	.word	0x20000b14
 800b09c:	20000b10 	.word	0x20000b10
 800b0a0:	20000ff8 	.word	0x20000ff8
 800b0a4:	20000ff4 	.word	0x20000ff4

0800b0a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b0ae:	4b2b      	ldr	r3, [pc, #172]	@ (800b15c <vTaskSwitchContext+0xb4>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d003      	beq.n	800b0be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b0b6:	4b2a      	ldr	r3, [pc, #168]	@ (800b160 <vTaskSwitchContext+0xb8>)
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b0bc:	e047      	b.n	800b14e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b0be:	4b28      	ldr	r3, [pc, #160]	@ (800b160 <vTaskSwitchContext+0xb8>)
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0c4:	4b27      	ldr	r3, [pc, #156]	@ (800b164 <vTaskSwitchContext+0xbc>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	60fb      	str	r3, [r7, #12]
 800b0ca:	e011      	b.n	800b0f0 <vTaskSwitchContext+0x48>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d10b      	bne.n	800b0ea <vTaskSwitchContext+0x42>
	__asm volatile
 800b0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d6:	f383 8811 	msr	BASEPRI, r3
 800b0da:	f3bf 8f6f 	isb	sy
 800b0de:	f3bf 8f4f 	dsb	sy
 800b0e2:	607b      	str	r3, [r7, #4]
}
 800b0e4:	bf00      	nop
 800b0e6:	bf00      	nop
 800b0e8:	e7fd      	b.n	800b0e6 <vTaskSwitchContext+0x3e>
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	60fb      	str	r3, [r7, #12]
 800b0f0:	491d      	ldr	r1, [pc, #116]	@ (800b168 <vTaskSwitchContext+0xc0>)
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	4613      	mov	r3, r2
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4413      	add	r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	440b      	add	r3, r1
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d0e3      	beq.n	800b0cc <vTaskSwitchContext+0x24>
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4613      	mov	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4413      	add	r3, r2
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	4a16      	ldr	r2, [pc, #88]	@ (800b168 <vTaskSwitchContext+0xc0>)
 800b110:	4413      	add	r3, r2
 800b112:	60bb      	str	r3, [r7, #8]
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	685a      	ldr	r2, [r3, #4]
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	605a      	str	r2, [r3, #4]
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	685a      	ldr	r2, [r3, #4]
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	3308      	adds	r3, #8
 800b126:	429a      	cmp	r2, r3
 800b128:	d104      	bne.n	800b134 <vTaskSwitchContext+0x8c>
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	685a      	ldr	r2, [r3, #4]
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	605a      	str	r2, [r3, #4]
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	4a0c      	ldr	r2, [pc, #48]	@ (800b16c <vTaskSwitchContext+0xc4>)
 800b13c:	6013      	str	r3, [r2, #0]
 800b13e:	4a09      	ldr	r2, [pc, #36]	@ (800b164 <vTaskSwitchContext+0xbc>)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b144:	4b09      	ldr	r3, [pc, #36]	@ (800b16c <vTaskSwitchContext+0xc4>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	3354      	adds	r3, #84	@ 0x54
 800b14a:	4a09      	ldr	r2, [pc, #36]	@ (800b170 <vTaskSwitchContext+0xc8>)
 800b14c:	6013      	str	r3, [r2, #0]
}
 800b14e:	bf00      	nop
 800b150:	3714      	adds	r7, #20
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	2000100c 	.word	0x2000100c
 800b160:	20000ff8 	.word	0x20000ff8
 800b164:	20000fec 	.word	0x20000fec
 800b168:	20000b14 	.word	0x20000b14
 800b16c:	20000b10 	.word	0x20000b10
 800b170:	20000010 	.word	0x20000010

0800b174 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10b      	bne.n	800b19c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b188:	f383 8811 	msr	BASEPRI, r3
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	60fb      	str	r3, [r7, #12]
}
 800b196:	bf00      	nop
 800b198:	bf00      	nop
 800b19a:	e7fd      	b.n	800b198 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b19c:	4b07      	ldr	r3, [pc, #28]	@ (800b1bc <vTaskPlaceOnEventList+0x48>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	3318      	adds	r3, #24
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f7fe fd50 	bl	8009c4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b1aa:	2101      	movs	r1, #1
 800b1ac:	6838      	ldr	r0, [r7, #0]
 800b1ae:	f000 fa87 	bl	800b6c0 <prvAddCurrentTaskToDelayedList>
}
 800b1b2:	bf00      	nop
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	20000b10 	.word	0x20000b10

0800b1c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b086      	sub	sp, #24
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d10b      	bne.n	800b1ea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1d6:	f383 8811 	msr	BASEPRI, r3
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	617b      	str	r3, [r7, #20]
}
 800b1e4:	bf00      	nop
 800b1e6:	bf00      	nop
 800b1e8:	e7fd      	b.n	800b1e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1ea:	4b0a      	ldr	r3, [pc, #40]	@ (800b214 <vTaskPlaceOnEventListRestricted+0x54>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	3318      	adds	r3, #24
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f7fe fd05 	bl	8009c02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d002      	beq.n	800b204 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b1fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b202:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b204:	6879      	ldr	r1, [r7, #4]
 800b206:	68b8      	ldr	r0, [r7, #8]
 800b208:	f000 fa5a 	bl	800b6c0 <prvAddCurrentTaskToDelayedList>
	}
 800b20c:	bf00      	nop
 800b20e:	3718      	adds	r7, #24
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	20000b10 	.word	0x20000b10

0800b218 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b086      	sub	sp, #24
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d10b      	bne.n	800b246 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	60fb      	str	r3, [r7, #12]
}
 800b240:	bf00      	nop
 800b242:	bf00      	nop
 800b244:	e7fd      	b.n	800b242 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	3318      	adds	r3, #24
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7fe fd36 	bl	8009cbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b250:	4b1d      	ldr	r3, [pc, #116]	@ (800b2c8 <xTaskRemoveFromEventList+0xb0>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d11d      	bne.n	800b294 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	3304      	adds	r3, #4
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7fe fd2d 	bl	8009cbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b266:	4b19      	ldr	r3, [pc, #100]	@ (800b2cc <xTaskRemoveFromEventList+0xb4>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d903      	bls.n	800b276 <xTaskRemoveFromEventList+0x5e>
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b272:	4a16      	ldr	r2, [pc, #88]	@ (800b2cc <xTaskRemoveFromEventList+0xb4>)
 800b274:	6013      	str	r3, [r2, #0]
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b27a:	4613      	mov	r3, r2
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	4413      	add	r3, r2
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	4a13      	ldr	r2, [pc, #76]	@ (800b2d0 <xTaskRemoveFromEventList+0xb8>)
 800b284:	441a      	add	r2, r3
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	3304      	adds	r3, #4
 800b28a:	4619      	mov	r1, r3
 800b28c:	4610      	mov	r0, r2
 800b28e:	f7fe fcb8 	bl	8009c02 <vListInsertEnd>
 800b292:	e005      	b.n	800b2a0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	3318      	adds	r3, #24
 800b298:	4619      	mov	r1, r3
 800b29a:	480e      	ldr	r0, [pc, #56]	@ (800b2d4 <xTaskRemoveFromEventList+0xbc>)
 800b29c:	f7fe fcb1 	bl	8009c02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b2d8 <xTaskRemoveFromEventList+0xc0>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d905      	bls.n	800b2ba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b2b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b2dc <xTaskRemoveFromEventList+0xc4>)
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	601a      	str	r2, [r3, #0]
 800b2b8:	e001      	b.n	800b2be <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b2be:	697b      	ldr	r3, [r7, #20]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3718      	adds	r7, #24
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	2000100c 	.word	0x2000100c
 800b2cc:	20000fec 	.word	0x20000fec
 800b2d0:	20000b14 	.word	0x20000b14
 800b2d4:	20000fa4 	.word	0x20000fa4
 800b2d8:	20000b10 	.word	0x20000b10
 800b2dc:	20000ff8 	.word	0x20000ff8

0800b2e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b2e8:	4b06      	ldr	r3, [pc, #24]	@ (800b304 <vTaskInternalSetTimeOutState+0x24>)
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b2f0:	4b05      	ldr	r3, [pc, #20]	@ (800b308 <vTaskInternalSetTimeOutState+0x28>)
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	605a      	str	r2, [r3, #4]
}
 800b2f8:	bf00      	nop
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr
 800b304:	20000ffc 	.word	0x20000ffc
 800b308:	20000fe8 	.word	0x20000fe8

0800b30c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b088      	sub	sp, #32
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d10b      	bne.n	800b334 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b320:	f383 8811 	msr	BASEPRI, r3
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	613b      	str	r3, [r7, #16]
}
 800b32e:	bf00      	nop
 800b330:	bf00      	nop
 800b332:	e7fd      	b.n	800b330 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d10b      	bne.n	800b352 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b33e:	f383 8811 	msr	BASEPRI, r3
 800b342:	f3bf 8f6f 	isb	sy
 800b346:	f3bf 8f4f 	dsb	sy
 800b34a:	60fb      	str	r3, [r7, #12]
}
 800b34c:	bf00      	nop
 800b34e:	bf00      	nop
 800b350:	e7fd      	b.n	800b34e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b352:	f000 fe91 	bl	800c078 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b356:	4b1d      	ldr	r3, [pc, #116]	@ (800b3cc <xTaskCheckForTimeOut+0xc0>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	69ba      	ldr	r2, [r7, #24]
 800b362:	1ad3      	subs	r3, r2, r3
 800b364:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b36e:	d102      	bne.n	800b376 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b370:	2300      	movs	r3, #0
 800b372:	61fb      	str	r3, [r7, #28]
 800b374:	e023      	b.n	800b3be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	4b15      	ldr	r3, [pc, #84]	@ (800b3d0 <xTaskCheckForTimeOut+0xc4>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d007      	beq.n	800b392 <xTaskCheckForTimeOut+0x86>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	69ba      	ldr	r2, [r7, #24]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d302      	bcc.n	800b392 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b38c:	2301      	movs	r3, #1
 800b38e:	61fb      	str	r3, [r7, #28]
 800b390:	e015      	b.n	800b3be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	697a      	ldr	r2, [r7, #20]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d20b      	bcs.n	800b3b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	1ad2      	subs	r2, r2, r3
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f7ff ff99 	bl	800b2e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	61fb      	str	r3, [r7, #28]
 800b3b2:	e004      	b.n	800b3be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b3be:	f000 fe8d 	bl	800c0dc <vPortExitCritical>

	return xReturn;
 800b3c2:	69fb      	ldr	r3, [r7, #28]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3720      	adds	r7, #32
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	20000fe8 	.word	0x20000fe8
 800b3d0:	20000ffc 	.word	0x20000ffc

0800b3d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b3d8:	4b03      	ldr	r3, [pc, #12]	@ (800b3e8 <vTaskMissedYield+0x14>)
 800b3da:	2201      	movs	r2, #1
 800b3dc:	601a      	str	r2, [r3, #0]
}
 800b3de:	bf00      	nop
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr
 800b3e8:	20000ff8 	.word	0x20000ff8

0800b3ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b3f4:	f000 f852 	bl	800b49c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b3f8:	4b06      	ldr	r3, [pc, #24]	@ (800b414 <prvIdleTask+0x28>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d9f9      	bls.n	800b3f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b400:	4b05      	ldr	r3, [pc, #20]	@ (800b418 <prvIdleTask+0x2c>)
 800b402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b406:	601a      	str	r2, [r3, #0]
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b410:	e7f0      	b.n	800b3f4 <prvIdleTask+0x8>
 800b412:	bf00      	nop
 800b414:	20000b14 	.word	0x20000b14
 800b418:	e000ed04 	.word	0xe000ed04

0800b41c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b422:	2300      	movs	r3, #0
 800b424:	607b      	str	r3, [r7, #4]
 800b426:	e00c      	b.n	800b442 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	4613      	mov	r3, r2
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	4413      	add	r3, r2
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	4a12      	ldr	r2, [pc, #72]	@ (800b47c <prvInitialiseTaskLists+0x60>)
 800b434:	4413      	add	r3, r2
 800b436:	4618      	mov	r0, r3
 800b438:	f7fe fbb6 	bl	8009ba8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	3301      	adds	r3, #1
 800b440:	607b      	str	r3, [r7, #4]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2b37      	cmp	r3, #55	@ 0x37
 800b446:	d9ef      	bls.n	800b428 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b448:	480d      	ldr	r0, [pc, #52]	@ (800b480 <prvInitialiseTaskLists+0x64>)
 800b44a:	f7fe fbad 	bl	8009ba8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b44e:	480d      	ldr	r0, [pc, #52]	@ (800b484 <prvInitialiseTaskLists+0x68>)
 800b450:	f7fe fbaa 	bl	8009ba8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b454:	480c      	ldr	r0, [pc, #48]	@ (800b488 <prvInitialiseTaskLists+0x6c>)
 800b456:	f7fe fba7 	bl	8009ba8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b45a:	480c      	ldr	r0, [pc, #48]	@ (800b48c <prvInitialiseTaskLists+0x70>)
 800b45c:	f7fe fba4 	bl	8009ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b460:	480b      	ldr	r0, [pc, #44]	@ (800b490 <prvInitialiseTaskLists+0x74>)
 800b462:	f7fe fba1 	bl	8009ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b466:	4b0b      	ldr	r3, [pc, #44]	@ (800b494 <prvInitialiseTaskLists+0x78>)
 800b468:	4a05      	ldr	r2, [pc, #20]	@ (800b480 <prvInitialiseTaskLists+0x64>)
 800b46a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b46c:	4b0a      	ldr	r3, [pc, #40]	@ (800b498 <prvInitialiseTaskLists+0x7c>)
 800b46e:	4a05      	ldr	r2, [pc, #20]	@ (800b484 <prvInitialiseTaskLists+0x68>)
 800b470:	601a      	str	r2, [r3, #0]
}
 800b472:	bf00      	nop
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	20000b14 	.word	0x20000b14
 800b480:	20000f74 	.word	0x20000f74
 800b484:	20000f88 	.word	0x20000f88
 800b488:	20000fa4 	.word	0x20000fa4
 800b48c:	20000fb8 	.word	0x20000fb8
 800b490:	20000fd0 	.word	0x20000fd0
 800b494:	20000f9c 	.word	0x20000f9c
 800b498:	20000fa0 	.word	0x20000fa0

0800b49c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4a2:	e019      	b.n	800b4d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b4a4:	f000 fde8 	bl	800c078 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4a8:	4b10      	ldr	r3, [pc, #64]	@ (800b4ec <prvCheckTasksWaitingTermination+0x50>)
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	68db      	ldr	r3, [r3, #12]
 800b4ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	3304      	adds	r3, #4
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7fe fc01 	bl	8009cbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b4ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b4f0 <prvCheckTasksWaitingTermination+0x54>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	4a0b      	ldr	r2, [pc, #44]	@ (800b4f0 <prvCheckTasksWaitingTermination+0x54>)
 800b4c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b4c4:	4b0b      	ldr	r3, [pc, #44]	@ (800b4f4 <prvCheckTasksWaitingTermination+0x58>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	3b01      	subs	r3, #1
 800b4ca:	4a0a      	ldr	r2, [pc, #40]	@ (800b4f4 <prvCheckTasksWaitingTermination+0x58>)
 800b4cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b4ce:	f000 fe05 	bl	800c0dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 f810 	bl	800b4f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4d8:	4b06      	ldr	r3, [pc, #24]	@ (800b4f4 <prvCheckTasksWaitingTermination+0x58>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d1e1      	bne.n	800b4a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b4e0:	bf00      	nop
 800b4e2:	bf00      	nop
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	20000fb8 	.word	0x20000fb8
 800b4f0:	20000fe4 	.word	0x20000fe4
 800b4f4:	20000fcc 	.word	0x20000fcc

0800b4f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	3354      	adds	r3, #84	@ 0x54
 800b504:	4618      	mov	r0, r3
 800b506:	f001 f8e7 	bl	800c6d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b510:	2b00      	cmp	r3, #0
 800b512:	d108      	bne.n	800b526 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b518:	4618      	mov	r0, r3
 800b51a:	f000 ff9d 	bl	800c458 <vPortFree>
				vPortFree( pxTCB );
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 ff9a 	bl	800c458 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b524:	e019      	b.n	800b55a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d103      	bne.n	800b538 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 ff91 	bl	800c458 <vPortFree>
	}
 800b536:	e010      	b.n	800b55a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b53e:	2b02      	cmp	r3, #2
 800b540:	d00b      	beq.n	800b55a <prvDeleteTCB+0x62>
	__asm volatile
 800b542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b546:	f383 8811 	msr	BASEPRI, r3
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	60fb      	str	r3, [r7, #12]
}
 800b554:	bf00      	nop
 800b556:	bf00      	nop
 800b558:	e7fd      	b.n	800b556 <prvDeleteTCB+0x5e>
	}
 800b55a:	bf00      	nop
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
	...

0800b564 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b56a:	4b0c      	ldr	r3, [pc, #48]	@ (800b59c <prvResetNextTaskUnblockTime+0x38>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d104      	bne.n	800b57e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b574:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a0 <prvResetNextTaskUnblockTime+0x3c>)
 800b576:	f04f 32ff 	mov.w	r2, #4294967295
 800b57a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b57c:	e008      	b.n	800b590 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b57e:	4b07      	ldr	r3, [pc, #28]	@ (800b59c <prvResetNextTaskUnblockTime+0x38>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	4a04      	ldr	r2, [pc, #16]	@ (800b5a0 <prvResetNextTaskUnblockTime+0x3c>)
 800b58e:	6013      	str	r3, [r2, #0]
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr
 800b59c:	20000f9c 	.word	0x20000f9c
 800b5a0:	20001004 	.word	0x20001004

0800b5a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b5aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b5d8 <xTaskGetSchedulerState+0x34>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d102      	bne.n	800b5b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	607b      	str	r3, [r7, #4]
 800b5b6:	e008      	b.n	800b5ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5b8:	4b08      	ldr	r3, [pc, #32]	@ (800b5dc <xTaskGetSchedulerState+0x38>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d102      	bne.n	800b5c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b5c0:	2302      	movs	r3, #2
 800b5c2:	607b      	str	r3, [r7, #4]
 800b5c4:	e001      	b.n	800b5ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b5ca:	687b      	ldr	r3, [r7, #4]
	}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr
 800b5d8:	20000ff0 	.word	0x20000ff0
 800b5dc:	2000100c 	.word	0x2000100c

0800b5e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b086      	sub	sp, #24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d058      	beq.n	800b6a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b5f6:	4b2f      	ldr	r3, [pc, #188]	@ (800b6b4 <xTaskPriorityDisinherit+0xd4>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	693a      	ldr	r2, [r7, #16]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d00b      	beq.n	800b618 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b604:	f383 8811 	msr	BASEPRI, r3
 800b608:	f3bf 8f6f 	isb	sy
 800b60c:	f3bf 8f4f 	dsb	sy
 800b610:	60fb      	str	r3, [r7, #12]
}
 800b612:	bf00      	nop
 800b614:	bf00      	nop
 800b616:	e7fd      	b.n	800b614 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d10b      	bne.n	800b638 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b624:	f383 8811 	msr	BASEPRI, r3
 800b628:	f3bf 8f6f 	isb	sy
 800b62c:	f3bf 8f4f 	dsb	sy
 800b630:	60bb      	str	r3, [r7, #8]
}
 800b632:	bf00      	nop
 800b634:	bf00      	nop
 800b636:	e7fd      	b.n	800b634 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b63c:	1e5a      	subs	r2, r3, #1
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d02c      	beq.n	800b6a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b652:	2b00      	cmp	r3, #0
 800b654:	d128      	bne.n	800b6a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	3304      	adds	r3, #4
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7fe fb2e 	bl	8009cbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b66c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b678:	4b0f      	ldr	r3, [pc, #60]	@ (800b6b8 <xTaskPriorityDisinherit+0xd8>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d903      	bls.n	800b688 <xTaskPriorityDisinherit+0xa8>
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b684:	4a0c      	ldr	r2, [pc, #48]	@ (800b6b8 <xTaskPriorityDisinherit+0xd8>)
 800b686:	6013      	str	r3, [r2, #0]
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b68c:	4613      	mov	r3, r2
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	4413      	add	r3, r2
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	4a09      	ldr	r2, [pc, #36]	@ (800b6bc <xTaskPriorityDisinherit+0xdc>)
 800b696:	441a      	add	r2, r3
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	3304      	adds	r3, #4
 800b69c:	4619      	mov	r1, r3
 800b69e:	4610      	mov	r0, r2
 800b6a0:	f7fe faaf 	bl	8009c02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b6a8:	697b      	ldr	r3, [r7, #20]
	}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3718      	adds	r7, #24
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20000b10 	.word	0x20000b10
 800b6b8:	20000fec 	.word	0x20000fec
 800b6bc:	20000b14 	.word	0x20000b14

0800b6c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b6ca:	4b21      	ldr	r3, [pc, #132]	@ (800b750 <prvAddCurrentTaskToDelayedList+0x90>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6d0:	4b20      	ldr	r3, [pc, #128]	@ (800b754 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7fe faf0 	bl	8009cbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e2:	d10a      	bne.n	800b6fa <prvAddCurrentTaskToDelayedList+0x3a>
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d007      	beq.n	800b6fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6ea:	4b1a      	ldr	r3, [pc, #104]	@ (800b754 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	3304      	adds	r3, #4
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	4819      	ldr	r0, [pc, #100]	@ (800b758 <prvAddCurrentTaskToDelayedList+0x98>)
 800b6f4:	f7fe fa85 	bl	8009c02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b6f8:	e026      	b.n	800b748 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4413      	add	r3, r2
 800b700:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b702:	4b14      	ldr	r3, [pc, #80]	@ (800b754 <prvAddCurrentTaskToDelayedList+0x94>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b70a:	68ba      	ldr	r2, [r7, #8]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d209      	bcs.n	800b726 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b712:	4b12      	ldr	r3, [pc, #72]	@ (800b75c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	4b0f      	ldr	r3, [pc, #60]	@ (800b754 <prvAddCurrentTaskToDelayedList+0x94>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	3304      	adds	r3, #4
 800b71c:	4619      	mov	r1, r3
 800b71e:	4610      	mov	r0, r2
 800b720:	f7fe fa93 	bl	8009c4a <vListInsert>
}
 800b724:	e010      	b.n	800b748 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b726:	4b0e      	ldr	r3, [pc, #56]	@ (800b760 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	4b0a      	ldr	r3, [pc, #40]	@ (800b754 <prvAddCurrentTaskToDelayedList+0x94>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	3304      	adds	r3, #4
 800b730:	4619      	mov	r1, r3
 800b732:	4610      	mov	r0, r2
 800b734:	f7fe fa89 	bl	8009c4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b738:	4b0a      	ldr	r3, [pc, #40]	@ (800b764 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	68ba      	ldr	r2, [r7, #8]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d202      	bcs.n	800b748 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b742:	4a08      	ldr	r2, [pc, #32]	@ (800b764 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	6013      	str	r3, [r2, #0]
}
 800b748:	bf00      	nop
 800b74a:	3710      	adds	r7, #16
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	20000fe8 	.word	0x20000fe8
 800b754:	20000b10 	.word	0x20000b10
 800b758:	20000fd0 	.word	0x20000fd0
 800b75c:	20000fa0 	.word	0x20000fa0
 800b760:	20000f9c 	.word	0x20000f9c
 800b764:	20001004 	.word	0x20001004

0800b768 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b08a      	sub	sp, #40	@ 0x28
 800b76c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b76e:	2300      	movs	r3, #0
 800b770:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b772:	f000 fb13 	bl	800bd9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b776:	4b1d      	ldr	r3, [pc, #116]	@ (800b7ec <xTimerCreateTimerTask+0x84>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d021      	beq.n	800b7c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b77e:	2300      	movs	r3, #0
 800b780:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b782:	2300      	movs	r3, #0
 800b784:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b786:	1d3a      	adds	r2, r7, #4
 800b788:	f107 0108 	add.w	r1, r7, #8
 800b78c:	f107 030c 	add.w	r3, r7, #12
 800b790:	4618      	mov	r0, r3
 800b792:	f7fe f9ef 	bl	8009b74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b796:	6879      	ldr	r1, [r7, #4]
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	68fa      	ldr	r2, [r7, #12]
 800b79c:	9202      	str	r2, [sp, #8]
 800b79e:	9301      	str	r3, [sp, #4]
 800b7a0:	2302      	movs	r3, #2
 800b7a2:	9300      	str	r3, [sp, #0]
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	460a      	mov	r2, r1
 800b7a8:	4911      	ldr	r1, [pc, #68]	@ (800b7f0 <xTimerCreateTimerTask+0x88>)
 800b7aa:	4812      	ldr	r0, [pc, #72]	@ (800b7f4 <xTimerCreateTimerTask+0x8c>)
 800b7ac:	f7ff f8a2 	bl	800a8f4 <xTaskCreateStatic>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	4a11      	ldr	r2, [pc, #68]	@ (800b7f8 <xTimerCreateTimerTask+0x90>)
 800b7b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b7b6:	4b10      	ldr	r3, [pc, #64]	@ (800b7f8 <xTimerCreateTimerTask+0x90>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d001      	beq.n	800b7c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10b      	bne.n	800b7e0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7cc:	f383 8811 	msr	BASEPRI, r3
 800b7d0:	f3bf 8f6f 	isb	sy
 800b7d4:	f3bf 8f4f 	dsb	sy
 800b7d8:	613b      	str	r3, [r7, #16]
}
 800b7da:	bf00      	nop
 800b7dc:	bf00      	nop
 800b7de:	e7fd      	b.n	800b7dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b7e0:	697b      	ldr	r3, [r7, #20]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3718      	adds	r7, #24
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	20001040 	.word	0x20001040
 800b7f0:	0800c934 	.word	0x0800c934
 800b7f4:	0800b935 	.word	0x0800b935
 800b7f8:	20001044 	.word	0x20001044

0800b7fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b08a      	sub	sp, #40	@ 0x28
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
 800b808:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b80a:	2300      	movs	r3, #0
 800b80c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d10b      	bne.n	800b82c <xTimerGenericCommand+0x30>
	__asm volatile
 800b814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b818:	f383 8811 	msr	BASEPRI, r3
 800b81c:	f3bf 8f6f 	isb	sy
 800b820:	f3bf 8f4f 	dsb	sy
 800b824:	623b      	str	r3, [r7, #32]
}
 800b826:	bf00      	nop
 800b828:	bf00      	nop
 800b82a:	e7fd      	b.n	800b828 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b82c:	4b19      	ldr	r3, [pc, #100]	@ (800b894 <xTimerGenericCommand+0x98>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d02a      	beq.n	800b88a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2b05      	cmp	r3, #5
 800b844:	dc18      	bgt.n	800b878 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b846:	f7ff fead 	bl	800b5a4 <xTaskGetSchedulerState>
 800b84a:	4603      	mov	r3, r0
 800b84c:	2b02      	cmp	r3, #2
 800b84e:	d109      	bne.n	800b864 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b850:	4b10      	ldr	r3, [pc, #64]	@ (800b894 <xTimerGenericCommand+0x98>)
 800b852:	6818      	ldr	r0, [r3, #0]
 800b854:	f107 0110 	add.w	r1, r7, #16
 800b858:	2300      	movs	r3, #0
 800b85a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b85c:	f7fe fc0c 	bl	800a078 <xQueueGenericSend>
 800b860:	6278      	str	r0, [r7, #36]	@ 0x24
 800b862:	e012      	b.n	800b88a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b864:	4b0b      	ldr	r3, [pc, #44]	@ (800b894 <xTimerGenericCommand+0x98>)
 800b866:	6818      	ldr	r0, [r3, #0]
 800b868:	f107 0110 	add.w	r1, r7, #16
 800b86c:	2300      	movs	r3, #0
 800b86e:	2200      	movs	r2, #0
 800b870:	f7fe fc02 	bl	800a078 <xQueueGenericSend>
 800b874:	6278      	str	r0, [r7, #36]	@ 0x24
 800b876:	e008      	b.n	800b88a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b878:	4b06      	ldr	r3, [pc, #24]	@ (800b894 <xTimerGenericCommand+0x98>)
 800b87a:	6818      	ldr	r0, [r3, #0]
 800b87c:	f107 0110 	add.w	r1, r7, #16
 800b880:	2300      	movs	r3, #0
 800b882:	683a      	ldr	r2, [r7, #0]
 800b884:	f7fe fcfa 	bl	800a27c <xQueueGenericSendFromISR>
 800b888:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3728      	adds	r7, #40	@ 0x28
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	20001040 	.word	0x20001040

0800b898 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b088      	sub	sp, #32
 800b89c:	af02      	add	r7, sp, #8
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8a2:	4b23      	ldr	r3, [pc, #140]	@ (800b930 <prvProcessExpiredTimer+0x98>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	3304      	adds	r3, #4
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7fe fa03 	bl	8009cbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b8bc:	f003 0304 	and.w	r3, r3, #4
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d023      	beq.n	800b90c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	699a      	ldr	r2, [r3, #24]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	18d1      	adds	r1, r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	6978      	ldr	r0, [r7, #20]
 800b8d2:	f000 f8d5 	bl	800ba80 <prvInsertTimerInActiveList>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d020      	beq.n	800b91e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8dc:	2300      	movs	r3, #0
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	6978      	ldr	r0, [r7, #20]
 800b8e8:	f7ff ff88 	bl	800b7fc <xTimerGenericCommand>
 800b8ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d114      	bne.n	800b91e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	60fb      	str	r3, [r7, #12]
}
 800b906:	bf00      	nop
 800b908:	bf00      	nop
 800b90a:	e7fd      	b.n	800b908 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b912:	f023 0301 	bic.w	r3, r3, #1
 800b916:	b2da      	uxtb	r2, r3
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	6a1b      	ldr	r3, [r3, #32]
 800b922:	6978      	ldr	r0, [r7, #20]
 800b924:	4798      	blx	r3
}
 800b926:	bf00      	nop
 800b928:	3718      	adds	r7, #24
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	20001038 	.word	0x20001038

0800b934 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b93c:	f107 0308 	add.w	r3, r7, #8
 800b940:	4618      	mov	r0, r3
 800b942:	f000 f859 	bl	800b9f8 <prvGetNextExpireTime>
 800b946:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	4619      	mov	r1, r3
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f000 f805 	bl	800b95c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b952:	f000 f8d7 	bl	800bb04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b956:	bf00      	nop
 800b958:	e7f0      	b.n	800b93c <prvTimerTask+0x8>
	...

0800b95c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b966:	f7ff fa29 	bl	800adbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b96a:	f107 0308 	add.w	r3, r7, #8
 800b96e:	4618      	mov	r0, r3
 800b970:	f000 f866 	bl	800ba40 <prvSampleTimeNow>
 800b974:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d130      	bne.n	800b9de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d10a      	bne.n	800b998 <prvProcessTimerOrBlockTask+0x3c>
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	429a      	cmp	r2, r3
 800b988:	d806      	bhi.n	800b998 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b98a:	f7ff fa25 	bl	800add8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b98e:	68f9      	ldr	r1, [r7, #12]
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f7ff ff81 	bl	800b898 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b996:	e024      	b.n	800b9e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d008      	beq.n	800b9b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b99e:	4b13      	ldr	r3, [pc, #76]	@ (800b9ec <prvProcessTimerOrBlockTask+0x90>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d101      	bne.n	800b9ac <prvProcessTimerOrBlockTask+0x50>
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e000      	b.n	800b9ae <prvProcessTimerOrBlockTask+0x52>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b9b0:	4b0f      	ldr	r3, [pc, #60]	@ (800b9f0 <prvProcessTimerOrBlockTask+0x94>)
 800b9b2:	6818      	ldr	r0, [r3, #0]
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	1ad3      	subs	r3, r2, r3
 800b9ba:	683a      	ldr	r2, [r7, #0]
 800b9bc:	4619      	mov	r1, r3
 800b9be:	f7fe ff65 	bl	800a88c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b9c2:	f7ff fa09 	bl	800add8 <xTaskResumeAll>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10a      	bne.n	800b9e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b9cc:	4b09      	ldr	r3, [pc, #36]	@ (800b9f4 <prvProcessTimerOrBlockTask+0x98>)
 800b9ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9d2:	601a      	str	r2, [r3, #0]
 800b9d4:	f3bf 8f4f 	dsb	sy
 800b9d8:	f3bf 8f6f 	isb	sy
}
 800b9dc:	e001      	b.n	800b9e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b9de:	f7ff f9fb 	bl	800add8 <xTaskResumeAll>
}
 800b9e2:	bf00      	nop
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	2000103c 	.word	0x2000103c
 800b9f0:	20001040 	.word	0x20001040
 800b9f4:	e000ed04 	.word	0xe000ed04

0800b9f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ba00:	4b0e      	ldr	r3, [pc, #56]	@ (800ba3c <prvGetNextExpireTime+0x44>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <prvGetNextExpireTime+0x16>
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	e000      	b.n	800ba10 <prvGetNextExpireTime+0x18>
 800ba0e:	2200      	movs	r2, #0
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d105      	bne.n	800ba28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba1c:	4b07      	ldr	r3, [pc, #28]	@ (800ba3c <prvGetNextExpireTime+0x44>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	60fb      	str	r3, [r7, #12]
 800ba26:	e001      	b.n	800ba2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3714      	adds	r7, #20
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	20001038 	.word	0x20001038

0800ba40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ba48:	f7ff fa64 	bl	800af14 <xTaskGetTickCount>
 800ba4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ba4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ba7c <prvSampleTimeNow+0x3c>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d205      	bcs.n	800ba64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ba58:	f000 f93a 	bl	800bcd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	601a      	str	r2, [r3, #0]
 800ba62:	e002      	b.n	800ba6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ba6a:	4a04      	ldr	r2, [pc, #16]	@ (800ba7c <prvSampleTimeNow+0x3c>)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ba70:	68fb      	ldr	r3, [r7, #12]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3710      	adds	r7, #16
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	20001048 	.word	0x20001048

0800ba80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	607a      	str	r2, [r7, #4]
 800ba8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	68ba      	ldr	r2, [r7, #8]
 800ba96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d812      	bhi.n	800bacc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	1ad2      	subs	r2, r2, r3
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	699b      	ldr	r3, [r3, #24]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d302      	bcc.n	800baba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bab4:	2301      	movs	r3, #1
 800bab6:	617b      	str	r3, [r7, #20]
 800bab8:	e01b      	b.n	800baf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800baba:	4b10      	ldr	r3, [pc, #64]	@ (800bafc <prvInsertTimerInActiveList+0x7c>)
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	3304      	adds	r3, #4
 800bac2:	4619      	mov	r1, r3
 800bac4:	4610      	mov	r0, r2
 800bac6:	f7fe f8c0 	bl	8009c4a <vListInsert>
 800baca:	e012      	b.n	800baf2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d206      	bcs.n	800bae2 <prvInsertTimerInActiveList+0x62>
 800bad4:	68ba      	ldr	r2, [r7, #8]
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d302      	bcc.n	800bae2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800badc:	2301      	movs	r3, #1
 800bade:	617b      	str	r3, [r7, #20]
 800bae0:	e007      	b.n	800baf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bae2:	4b07      	ldr	r3, [pc, #28]	@ (800bb00 <prvInsertTimerInActiveList+0x80>)
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	3304      	adds	r3, #4
 800baea:	4619      	mov	r1, r3
 800baec:	4610      	mov	r0, r2
 800baee:	f7fe f8ac 	bl	8009c4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800baf2:	697b      	ldr	r3, [r7, #20]
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3718      	adds	r7, #24
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	2000103c 	.word	0x2000103c
 800bb00:	20001038 	.word	0x20001038

0800bb04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b08e      	sub	sp, #56	@ 0x38
 800bb08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb0a:	e0ce      	b.n	800bcaa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	da19      	bge.n	800bb46 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bb12:	1d3b      	adds	r3, r7, #4
 800bb14:	3304      	adds	r3, #4
 800bb16:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10b      	bne.n	800bb36 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb22:	f383 8811 	msr	BASEPRI, r3
 800bb26:	f3bf 8f6f 	isb	sy
 800bb2a:	f3bf 8f4f 	dsb	sy
 800bb2e:	61fb      	str	r3, [r7, #28]
}
 800bb30:	bf00      	nop
 800bb32:	bf00      	nop
 800bb34:	e7fd      	b.n	800bb32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bb36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb3c:	6850      	ldr	r0, [r2, #4]
 800bb3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb40:	6892      	ldr	r2, [r2, #8]
 800bb42:	4611      	mov	r1, r2
 800bb44:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f2c0 80ae 	blt.w	800bcaa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bb52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb54:	695b      	ldr	r3, [r3, #20]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d004      	beq.n	800bb64 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb5c:	3304      	adds	r3, #4
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7fe f8ac 	bl	8009cbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb64:	463b      	mov	r3, r7
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7ff ff6a 	bl	800ba40 <prvSampleTimeNow>
 800bb6c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2b09      	cmp	r3, #9
 800bb72:	f200 8097 	bhi.w	800bca4 <prvProcessReceivedCommands+0x1a0>
 800bb76:	a201      	add	r2, pc, #4	@ (adr r2, 800bb7c <prvProcessReceivedCommands+0x78>)
 800bb78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb7c:	0800bba5 	.word	0x0800bba5
 800bb80:	0800bba5 	.word	0x0800bba5
 800bb84:	0800bba5 	.word	0x0800bba5
 800bb88:	0800bc1b 	.word	0x0800bc1b
 800bb8c:	0800bc2f 	.word	0x0800bc2f
 800bb90:	0800bc7b 	.word	0x0800bc7b
 800bb94:	0800bba5 	.word	0x0800bba5
 800bb98:	0800bba5 	.word	0x0800bba5
 800bb9c:	0800bc1b 	.word	0x0800bc1b
 800bba0:	0800bc2f 	.word	0x0800bc2f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbaa:	f043 0301 	orr.w	r3, r3, #1
 800bbae:	b2da      	uxtb	r2, r3
 800bbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bbb6:	68ba      	ldr	r2, [r7, #8]
 800bbb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbba:	699b      	ldr	r3, [r3, #24]
 800bbbc:	18d1      	adds	r1, r2, r3
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbc4:	f7ff ff5c 	bl	800ba80 <prvInsertTimerInActiveList>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d06c      	beq.n	800bca8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbdc:	f003 0304 	and.w	r3, r3, #4
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d061      	beq.n	800bca8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe8:	699b      	ldr	r3, [r3, #24]
 800bbea:	441a      	add	r2, r3
 800bbec:	2300      	movs	r3, #0
 800bbee:	9300      	str	r3, [sp, #0]
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	2100      	movs	r1, #0
 800bbf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbf6:	f7ff fe01 	bl	800b7fc <xTimerGenericCommand>
 800bbfa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bbfc:	6a3b      	ldr	r3, [r7, #32]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d152      	bne.n	800bca8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bc02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc06:	f383 8811 	msr	BASEPRI, r3
 800bc0a:	f3bf 8f6f 	isb	sy
 800bc0e:	f3bf 8f4f 	dsb	sy
 800bc12:	61bb      	str	r3, [r7, #24]
}
 800bc14:	bf00      	nop
 800bc16:	bf00      	nop
 800bc18:	e7fd      	b.n	800bc16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc20:	f023 0301 	bic.w	r3, r3, #1
 800bc24:	b2da      	uxtb	r2, r3
 800bc26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bc2c:	e03d      	b.n	800bcaa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc34:	f043 0301 	orr.w	r3, r3, #1
 800bc38:	b2da      	uxtb	r2, r3
 800bc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bc40:	68ba      	ldr	r2, [r7, #8]
 800bc42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc44:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bc46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc48:	699b      	ldr	r3, [r3, #24]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10b      	bne.n	800bc66 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bc4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc52:	f383 8811 	msr	BASEPRI, r3
 800bc56:	f3bf 8f6f 	isb	sy
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	617b      	str	r3, [r7, #20]
}
 800bc60:	bf00      	nop
 800bc62:	bf00      	nop
 800bc64:	e7fd      	b.n	800bc62 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bc66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc68:	699a      	ldr	r2, [r3, #24]
 800bc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6c:	18d1      	adds	r1, r2, r3
 800bc6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc74:	f7ff ff04 	bl	800ba80 <prvInsertTimerInActiveList>
					break;
 800bc78:	e017      	b.n	800bcaa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bc7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc80:	f003 0302 	and.w	r3, r3, #2
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d103      	bne.n	800bc90 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bc88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc8a:	f000 fbe5 	bl	800c458 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bc8e:	e00c      	b.n	800bcaa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc96:	f023 0301 	bic.w	r3, r3, #1
 800bc9a:	b2da      	uxtb	r2, r3
 800bc9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bca2:	e002      	b.n	800bcaa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bca4:	bf00      	nop
 800bca6:	e000      	b.n	800bcaa <prvProcessReceivedCommands+0x1a6>
					break;
 800bca8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bcaa:	4b08      	ldr	r3, [pc, #32]	@ (800bccc <prvProcessReceivedCommands+0x1c8>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	1d39      	adds	r1, r7, #4
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7fe fb80 	bl	800a3b8 <xQueueReceive>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f47f af26 	bne.w	800bb0c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bcc0:	bf00      	nop
 800bcc2:	bf00      	nop
 800bcc4:	3730      	adds	r7, #48	@ 0x30
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	20001040 	.word	0x20001040

0800bcd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b088      	sub	sp, #32
 800bcd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bcd6:	e049      	b.n	800bd6c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bcd8:	4b2e      	ldr	r3, [pc, #184]	@ (800bd94 <prvSwitchTimerLists+0xc4>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bce2:	4b2c      	ldr	r3, [pc, #176]	@ (800bd94 <prvSwitchTimerLists+0xc4>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	3304      	adds	r3, #4
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7fd ffe3 	bl	8009cbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6a1b      	ldr	r3, [r3, #32]
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd04:	f003 0304 	and.w	r3, r3, #4
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d02f      	beq.n	800bd6c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	699b      	ldr	r3, [r3, #24]
 800bd10:	693a      	ldr	r2, [r7, #16]
 800bd12:	4413      	add	r3, r2
 800bd14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bd16:	68ba      	ldr	r2, [r7, #8]
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d90e      	bls.n	800bd3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	68ba      	ldr	r2, [r7, #8]
 800bd22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	68fa      	ldr	r2, [r7, #12]
 800bd28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd2a:	4b1a      	ldr	r3, [pc, #104]	@ (800bd94 <prvSwitchTimerLists+0xc4>)
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	3304      	adds	r3, #4
 800bd32:	4619      	mov	r1, r3
 800bd34:	4610      	mov	r0, r2
 800bd36:	f7fd ff88 	bl	8009c4a <vListInsert>
 800bd3a:	e017      	b.n	800bd6c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	9300      	str	r3, [sp, #0]
 800bd40:	2300      	movs	r3, #0
 800bd42:	693a      	ldr	r2, [r7, #16]
 800bd44:	2100      	movs	r1, #0
 800bd46:	68f8      	ldr	r0, [r7, #12]
 800bd48:	f7ff fd58 	bl	800b7fc <xTimerGenericCommand>
 800bd4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d10b      	bne.n	800bd6c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bd54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd58:	f383 8811 	msr	BASEPRI, r3
 800bd5c:	f3bf 8f6f 	isb	sy
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	603b      	str	r3, [r7, #0]
}
 800bd66:	bf00      	nop
 800bd68:	bf00      	nop
 800bd6a:	e7fd      	b.n	800bd68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd6c:	4b09      	ldr	r3, [pc, #36]	@ (800bd94 <prvSwitchTimerLists+0xc4>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1b0      	bne.n	800bcd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bd76:	4b07      	ldr	r3, [pc, #28]	@ (800bd94 <prvSwitchTimerLists+0xc4>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bd7c:	4b06      	ldr	r3, [pc, #24]	@ (800bd98 <prvSwitchTimerLists+0xc8>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a04      	ldr	r2, [pc, #16]	@ (800bd94 <prvSwitchTimerLists+0xc4>)
 800bd82:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bd84:	4a04      	ldr	r2, [pc, #16]	@ (800bd98 <prvSwitchTimerLists+0xc8>)
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	6013      	str	r3, [r2, #0]
}
 800bd8a:	bf00      	nop
 800bd8c:	3718      	adds	r7, #24
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	20001038 	.word	0x20001038
 800bd98:	2000103c 	.word	0x2000103c

0800bd9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bda2:	f000 f969 	bl	800c078 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bda6:	4b15      	ldr	r3, [pc, #84]	@ (800bdfc <prvCheckForValidListAndQueue+0x60>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d120      	bne.n	800bdf0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bdae:	4814      	ldr	r0, [pc, #80]	@ (800be00 <prvCheckForValidListAndQueue+0x64>)
 800bdb0:	f7fd fefa 	bl	8009ba8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bdb4:	4813      	ldr	r0, [pc, #76]	@ (800be04 <prvCheckForValidListAndQueue+0x68>)
 800bdb6:	f7fd fef7 	bl	8009ba8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bdba:	4b13      	ldr	r3, [pc, #76]	@ (800be08 <prvCheckForValidListAndQueue+0x6c>)
 800bdbc:	4a10      	ldr	r2, [pc, #64]	@ (800be00 <prvCheckForValidListAndQueue+0x64>)
 800bdbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bdc0:	4b12      	ldr	r3, [pc, #72]	@ (800be0c <prvCheckForValidListAndQueue+0x70>)
 800bdc2:	4a10      	ldr	r2, [pc, #64]	@ (800be04 <prvCheckForValidListAndQueue+0x68>)
 800bdc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	4b11      	ldr	r3, [pc, #68]	@ (800be10 <prvCheckForValidListAndQueue+0x74>)
 800bdcc:	4a11      	ldr	r2, [pc, #68]	@ (800be14 <prvCheckForValidListAndQueue+0x78>)
 800bdce:	2110      	movs	r1, #16
 800bdd0:	200a      	movs	r0, #10
 800bdd2:	f7fe f807 	bl	8009de4 <xQueueGenericCreateStatic>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	4a08      	ldr	r2, [pc, #32]	@ (800bdfc <prvCheckForValidListAndQueue+0x60>)
 800bdda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bddc:	4b07      	ldr	r3, [pc, #28]	@ (800bdfc <prvCheckForValidListAndQueue+0x60>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d005      	beq.n	800bdf0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bde4:	4b05      	ldr	r3, [pc, #20]	@ (800bdfc <prvCheckForValidListAndQueue+0x60>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	490b      	ldr	r1, [pc, #44]	@ (800be18 <prvCheckForValidListAndQueue+0x7c>)
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7fe fcfa 	bl	800a7e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bdf0:	f000 f974 	bl	800c0dc <vPortExitCritical>
}
 800bdf4:	bf00      	nop
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	20001040 	.word	0x20001040
 800be00:	20001010 	.word	0x20001010
 800be04:	20001024 	.word	0x20001024
 800be08:	20001038 	.word	0x20001038
 800be0c:	2000103c 	.word	0x2000103c
 800be10:	200010ec 	.word	0x200010ec
 800be14:	2000104c 	.word	0x2000104c
 800be18:	0800c93c 	.word	0x0800c93c

0800be1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be1c:	b480      	push	{r7}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	3b04      	subs	r3, #4
 800be2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800be34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	3b04      	subs	r3, #4
 800be3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	f023 0201 	bic.w	r2, r3, #1
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	3b04      	subs	r3, #4
 800be4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be4c:	4a0c      	ldr	r2, [pc, #48]	@ (800be80 <pxPortInitialiseStack+0x64>)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	3b14      	subs	r3, #20
 800be56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	3b04      	subs	r3, #4
 800be62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f06f 0202 	mvn.w	r2, #2
 800be6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	3b20      	subs	r3, #32
 800be70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800be72:	68fb      	ldr	r3, [r7, #12]
}
 800be74:	4618      	mov	r0, r3
 800be76:	3714      	adds	r7, #20
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr
 800be80:	0800be85 	.word	0x0800be85

0800be84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be84:	b480      	push	{r7}
 800be86:	b085      	sub	sp, #20
 800be88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800be8a:	2300      	movs	r3, #0
 800be8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be8e:	4b13      	ldr	r3, [pc, #76]	@ (800bedc <prvTaskExitError+0x58>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be96:	d00b      	beq.n	800beb0 <prvTaskExitError+0x2c>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	60fb      	str	r3, [r7, #12]
}
 800beaa:	bf00      	nop
 800beac:	bf00      	nop
 800beae:	e7fd      	b.n	800beac <prvTaskExitError+0x28>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	60bb      	str	r3, [r7, #8]
}
 800bec2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bec4:	bf00      	nop
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d0fc      	beq.n	800bec6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800becc:	bf00      	nop
 800bece:	bf00      	nop
 800bed0:	3714      	adds	r7, #20
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	2000000c 	.word	0x2000000c

0800bee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bee0:	4b07      	ldr	r3, [pc, #28]	@ (800bf00 <pxCurrentTCBConst2>)
 800bee2:	6819      	ldr	r1, [r3, #0]
 800bee4:	6808      	ldr	r0, [r1, #0]
 800bee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beea:	f380 8809 	msr	PSP, r0
 800beee:	f3bf 8f6f 	isb	sy
 800bef2:	f04f 0000 	mov.w	r0, #0
 800bef6:	f380 8811 	msr	BASEPRI, r0
 800befa:	4770      	bx	lr
 800befc:	f3af 8000 	nop.w

0800bf00 <pxCurrentTCBConst2>:
 800bf00:	20000b10 	.word	0x20000b10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf04:	bf00      	nop
 800bf06:	bf00      	nop

0800bf08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf08:	4808      	ldr	r0, [pc, #32]	@ (800bf2c <prvPortStartFirstTask+0x24>)
 800bf0a:	6800      	ldr	r0, [r0, #0]
 800bf0c:	6800      	ldr	r0, [r0, #0]
 800bf0e:	f380 8808 	msr	MSP, r0
 800bf12:	f04f 0000 	mov.w	r0, #0
 800bf16:	f380 8814 	msr	CONTROL, r0
 800bf1a:	b662      	cpsie	i
 800bf1c:	b661      	cpsie	f
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	df00      	svc	0
 800bf28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf2a:	bf00      	nop
 800bf2c:	e000ed08 	.word	0xe000ed08

0800bf30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bf36:	4b47      	ldr	r3, [pc, #284]	@ (800c054 <xPortStartScheduler+0x124>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a47      	ldr	r2, [pc, #284]	@ (800c058 <xPortStartScheduler+0x128>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d10b      	bne.n	800bf58 <xPortStartScheduler+0x28>
	__asm volatile
 800bf40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	613b      	str	r3, [r7, #16]
}
 800bf52:	bf00      	nop
 800bf54:	bf00      	nop
 800bf56:	e7fd      	b.n	800bf54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bf58:	4b3e      	ldr	r3, [pc, #248]	@ (800c054 <xPortStartScheduler+0x124>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a3f      	ldr	r2, [pc, #252]	@ (800c05c <xPortStartScheduler+0x12c>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d10b      	bne.n	800bf7a <xPortStartScheduler+0x4a>
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	60fb      	str	r3, [r7, #12]
}
 800bf74:	bf00      	nop
 800bf76:	bf00      	nop
 800bf78:	e7fd      	b.n	800bf76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf7a:	4b39      	ldr	r3, [pc, #228]	@ (800c060 <xPortStartScheduler+0x130>)
 800bf7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	22ff      	movs	r2, #255	@ 0xff
 800bf8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf94:	78fb      	ldrb	r3, [r7, #3]
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bf9c:	b2da      	uxtb	r2, r3
 800bf9e:	4b31      	ldr	r3, [pc, #196]	@ (800c064 <xPortStartScheduler+0x134>)
 800bfa0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bfa2:	4b31      	ldr	r3, [pc, #196]	@ (800c068 <xPortStartScheduler+0x138>)
 800bfa4:	2207      	movs	r2, #7
 800bfa6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfa8:	e009      	b.n	800bfbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bfaa:	4b2f      	ldr	r3, [pc, #188]	@ (800c068 <xPortStartScheduler+0x138>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	4a2d      	ldr	r2, [pc, #180]	@ (800c068 <xPortStartScheduler+0x138>)
 800bfb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bfb4:	78fb      	ldrb	r3, [r7, #3]
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfbe:	78fb      	ldrb	r3, [r7, #3]
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfc6:	2b80      	cmp	r3, #128	@ 0x80
 800bfc8:	d0ef      	beq.n	800bfaa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bfca:	4b27      	ldr	r3, [pc, #156]	@ (800c068 <xPortStartScheduler+0x138>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f1c3 0307 	rsb	r3, r3, #7
 800bfd2:	2b04      	cmp	r3, #4
 800bfd4:	d00b      	beq.n	800bfee <xPortStartScheduler+0xbe>
	__asm volatile
 800bfd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfda:	f383 8811 	msr	BASEPRI, r3
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f3bf 8f4f 	dsb	sy
 800bfe6:	60bb      	str	r3, [r7, #8]
}
 800bfe8:	bf00      	nop
 800bfea:	bf00      	nop
 800bfec:	e7fd      	b.n	800bfea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bfee:	4b1e      	ldr	r3, [pc, #120]	@ (800c068 <xPortStartScheduler+0x138>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	021b      	lsls	r3, r3, #8
 800bff4:	4a1c      	ldr	r2, [pc, #112]	@ (800c068 <xPortStartScheduler+0x138>)
 800bff6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bff8:	4b1b      	ldr	r3, [pc, #108]	@ (800c068 <xPortStartScheduler+0x138>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c000:	4a19      	ldr	r2, [pc, #100]	@ (800c068 <xPortStartScheduler+0x138>)
 800c002:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	b2da      	uxtb	r2, r3
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c00c:	4b17      	ldr	r3, [pc, #92]	@ (800c06c <xPortStartScheduler+0x13c>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a16      	ldr	r2, [pc, #88]	@ (800c06c <xPortStartScheduler+0x13c>)
 800c012:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c016:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c018:	4b14      	ldr	r3, [pc, #80]	@ (800c06c <xPortStartScheduler+0x13c>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a13      	ldr	r2, [pc, #76]	@ (800c06c <xPortStartScheduler+0x13c>)
 800c01e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c022:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c024:	f000 f8da 	bl	800c1dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c028:	4b11      	ldr	r3, [pc, #68]	@ (800c070 <xPortStartScheduler+0x140>)
 800c02a:	2200      	movs	r2, #0
 800c02c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c02e:	f000 f8f9 	bl	800c224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c032:	4b10      	ldr	r3, [pc, #64]	@ (800c074 <xPortStartScheduler+0x144>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a0f      	ldr	r2, [pc, #60]	@ (800c074 <xPortStartScheduler+0x144>)
 800c038:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c03c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c03e:	f7ff ff63 	bl	800bf08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c042:	f7ff f831 	bl	800b0a8 <vTaskSwitchContext>
	prvTaskExitError();
 800c046:	f7ff ff1d 	bl	800be84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3718      	adds	r7, #24
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	e000ed00 	.word	0xe000ed00
 800c058:	410fc271 	.word	0x410fc271
 800c05c:	410fc270 	.word	0x410fc270
 800c060:	e000e400 	.word	0xe000e400
 800c064:	2000113c 	.word	0x2000113c
 800c068:	20001140 	.word	0x20001140
 800c06c:	e000ed20 	.word	0xe000ed20
 800c070:	2000000c 	.word	0x2000000c
 800c074:	e000ef34 	.word	0xe000ef34

0800c078 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
	__asm volatile
 800c07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	607b      	str	r3, [r7, #4]
}
 800c090:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c092:	4b10      	ldr	r3, [pc, #64]	@ (800c0d4 <vPortEnterCritical+0x5c>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	3301      	adds	r3, #1
 800c098:	4a0e      	ldr	r2, [pc, #56]	@ (800c0d4 <vPortEnterCritical+0x5c>)
 800c09a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c09c:	4b0d      	ldr	r3, [pc, #52]	@ (800c0d4 <vPortEnterCritical+0x5c>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d110      	bne.n	800c0c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c0d8 <vPortEnterCritical+0x60>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00b      	beq.n	800c0c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b2:	f383 8811 	msr	BASEPRI, r3
 800c0b6:	f3bf 8f6f 	isb	sy
 800c0ba:	f3bf 8f4f 	dsb	sy
 800c0be:	603b      	str	r3, [r7, #0]
}
 800c0c0:	bf00      	nop
 800c0c2:	bf00      	nop
 800c0c4:	e7fd      	b.n	800c0c2 <vPortEnterCritical+0x4a>
	}
}
 800c0c6:	bf00      	nop
 800c0c8:	370c      	adds	r7, #12
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr
 800c0d2:	bf00      	nop
 800c0d4:	2000000c 	.word	0x2000000c
 800c0d8:	e000ed04 	.word	0xe000ed04

0800c0dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c0e2:	4b12      	ldr	r3, [pc, #72]	@ (800c12c <vPortExitCritical+0x50>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d10b      	bne.n	800c102 <vPortExitCritical+0x26>
	__asm volatile
 800c0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ee:	f383 8811 	msr	BASEPRI, r3
 800c0f2:	f3bf 8f6f 	isb	sy
 800c0f6:	f3bf 8f4f 	dsb	sy
 800c0fa:	607b      	str	r3, [r7, #4]
}
 800c0fc:	bf00      	nop
 800c0fe:	bf00      	nop
 800c100:	e7fd      	b.n	800c0fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c102:	4b0a      	ldr	r3, [pc, #40]	@ (800c12c <vPortExitCritical+0x50>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	3b01      	subs	r3, #1
 800c108:	4a08      	ldr	r2, [pc, #32]	@ (800c12c <vPortExitCritical+0x50>)
 800c10a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c10c:	4b07      	ldr	r3, [pc, #28]	@ (800c12c <vPortExitCritical+0x50>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d105      	bne.n	800c120 <vPortExitCritical+0x44>
 800c114:	2300      	movs	r3, #0
 800c116:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	f383 8811 	msr	BASEPRI, r3
}
 800c11e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c120:	bf00      	nop
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr
 800c12c:	2000000c 	.word	0x2000000c

0800c130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c130:	f3ef 8009 	mrs	r0, PSP
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	4b15      	ldr	r3, [pc, #84]	@ (800c190 <pxCurrentTCBConst>)
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	f01e 0f10 	tst.w	lr, #16
 800c140:	bf08      	it	eq
 800c142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14a:	6010      	str	r0, [r2, #0]
 800c14c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c150:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c154:	f380 8811 	msr	BASEPRI, r0
 800c158:	f3bf 8f4f 	dsb	sy
 800c15c:	f3bf 8f6f 	isb	sy
 800c160:	f7fe ffa2 	bl	800b0a8 <vTaskSwitchContext>
 800c164:	f04f 0000 	mov.w	r0, #0
 800c168:	f380 8811 	msr	BASEPRI, r0
 800c16c:	bc09      	pop	{r0, r3}
 800c16e:	6819      	ldr	r1, [r3, #0]
 800c170:	6808      	ldr	r0, [r1, #0]
 800c172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c176:	f01e 0f10 	tst.w	lr, #16
 800c17a:	bf08      	it	eq
 800c17c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c180:	f380 8809 	msr	PSP, r0
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	f3af 8000 	nop.w

0800c190 <pxCurrentTCBConst>:
 800c190:	20000b10 	.word	0x20000b10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c194:	bf00      	nop
 800c196:	bf00      	nop

0800c198 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	607b      	str	r3, [r7, #4]
}
 800c1b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c1b2:	f7fe febf 	bl	800af34 <xTaskIncrementTick>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d003      	beq.n	800c1c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c1bc:	4b06      	ldr	r3, [pc, #24]	@ (800c1d8 <xPortSysTickHandler+0x40>)
 800c1be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1c2:	601a      	str	r2, [r3, #0]
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	f383 8811 	msr	BASEPRI, r3
}
 800c1ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c1d0:	bf00      	nop
 800c1d2:	3708      	adds	r7, #8
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	e000ed04 	.word	0xe000ed04

0800c1dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c1dc:	b480      	push	{r7}
 800c1de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800c210 <vPortSetupTimerInterrupt+0x34>)
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c214 <vPortSetupTimerInterrupt+0x38>)
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c218 <vPortSetupTimerInterrupt+0x3c>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a0a      	ldr	r2, [pc, #40]	@ (800c21c <vPortSetupTimerInterrupt+0x40>)
 800c1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1f6:	099b      	lsrs	r3, r3, #6
 800c1f8:	4a09      	ldr	r2, [pc, #36]	@ (800c220 <vPortSetupTimerInterrupt+0x44>)
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c1fe:	4b04      	ldr	r3, [pc, #16]	@ (800c210 <vPortSetupTimerInterrupt+0x34>)
 800c200:	2207      	movs	r2, #7
 800c202:	601a      	str	r2, [r3, #0]
}
 800c204:	bf00      	nop
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	e000e010 	.word	0xe000e010
 800c214:	e000e018 	.word	0xe000e018
 800c218:	20000000 	.word	0x20000000
 800c21c:	10624dd3 	.word	0x10624dd3
 800c220:	e000e014 	.word	0xe000e014

0800c224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c224:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c234 <vPortEnableVFP+0x10>
 800c228:	6801      	ldr	r1, [r0, #0]
 800c22a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c22e:	6001      	str	r1, [r0, #0]
 800c230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c232:	bf00      	nop
 800c234:	e000ed88 	.word	0xe000ed88

0800c238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c23e:	f3ef 8305 	mrs	r3, IPSR
 800c242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2b0f      	cmp	r3, #15
 800c248:	d915      	bls.n	800c276 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c24a:	4a18      	ldr	r2, [pc, #96]	@ (800c2ac <vPortValidateInterruptPriority+0x74>)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	4413      	add	r3, r2
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c254:	4b16      	ldr	r3, [pc, #88]	@ (800c2b0 <vPortValidateInterruptPriority+0x78>)
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	7afa      	ldrb	r2, [r7, #11]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d20b      	bcs.n	800c276 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c262:	f383 8811 	msr	BASEPRI, r3
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	607b      	str	r3, [r7, #4]
}
 800c270:	bf00      	nop
 800c272:	bf00      	nop
 800c274:	e7fd      	b.n	800c272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c276:	4b0f      	ldr	r3, [pc, #60]	@ (800c2b4 <vPortValidateInterruptPriority+0x7c>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c27e:	4b0e      	ldr	r3, [pc, #56]	@ (800c2b8 <vPortValidateInterruptPriority+0x80>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	429a      	cmp	r2, r3
 800c284:	d90b      	bls.n	800c29e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c28a:	f383 8811 	msr	BASEPRI, r3
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f3bf 8f4f 	dsb	sy
 800c296:	603b      	str	r3, [r7, #0]
}
 800c298:	bf00      	nop
 800c29a:	bf00      	nop
 800c29c:	e7fd      	b.n	800c29a <vPortValidateInterruptPriority+0x62>
	}
 800c29e:	bf00      	nop
 800c2a0:	3714      	adds	r7, #20
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	e000e3f0 	.word	0xe000e3f0
 800c2b0:	2000113c 	.word	0x2000113c
 800c2b4:	e000ed0c 	.word	0xe000ed0c
 800c2b8:	20001140 	.word	0x20001140

0800c2bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b08a      	sub	sp, #40	@ 0x28
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c2c8:	f7fe fd78 	bl	800adbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c2cc:	4b5c      	ldr	r3, [pc, #368]	@ (800c440 <pvPortMalloc+0x184>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d101      	bne.n	800c2d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c2d4:	f000 f924 	bl	800c520 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c2d8:	4b5a      	ldr	r3, [pc, #360]	@ (800c444 <pvPortMalloc+0x188>)
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4013      	ands	r3, r2
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f040 8095 	bne.w	800c410 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d01e      	beq.n	800c32a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c2ec:	2208      	movs	r2, #8
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f003 0307 	and.w	r3, r3, #7
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d015      	beq.n	800c32a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f023 0307 	bic.w	r3, r3, #7
 800c304:	3308      	adds	r3, #8
 800c306:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f003 0307 	and.w	r3, r3, #7
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00b      	beq.n	800c32a <pvPortMalloc+0x6e>
	__asm volatile
 800c312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c316:	f383 8811 	msr	BASEPRI, r3
 800c31a:	f3bf 8f6f 	isb	sy
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	617b      	str	r3, [r7, #20]
}
 800c324:	bf00      	nop
 800c326:	bf00      	nop
 800c328:	e7fd      	b.n	800c326 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d06f      	beq.n	800c410 <pvPortMalloc+0x154>
 800c330:	4b45      	ldr	r3, [pc, #276]	@ (800c448 <pvPortMalloc+0x18c>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	429a      	cmp	r2, r3
 800c338:	d86a      	bhi.n	800c410 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c33a:	4b44      	ldr	r3, [pc, #272]	@ (800c44c <pvPortMalloc+0x190>)
 800c33c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c33e:	4b43      	ldr	r3, [pc, #268]	@ (800c44c <pvPortMalloc+0x190>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c344:	e004      	b.n	800c350 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c348:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	429a      	cmp	r2, r3
 800c358:	d903      	bls.n	800c362 <pvPortMalloc+0xa6>
 800c35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d1f1      	bne.n	800c346 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c362:	4b37      	ldr	r3, [pc, #220]	@ (800c440 <pvPortMalloc+0x184>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c368:	429a      	cmp	r2, r3
 800c36a:	d051      	beq.n	800c410 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c36c:	6a3b      	ldr	r3, [r7, #32]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	2208      	movs	r2, #8
 800c372:	4413      	add	r3, r2
 800c374:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	6a3b      	ldr	r3, [r7, #32]
 800c37c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c380:	685a      	ldr	r2, [r3, #4]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	1ad2      	subs	r2, r2, r3
 800c386:	2308      	movs	r3, #8
 800c388:	005b      	lsls	r3, r3, #1
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d920      	bls.n	800c3d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c38e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4413      	add	r3, r2
 800c394:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	f003 0307 	and.w	r3, r3, #7
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00b      	beq.n	800c3b8 <pvPortMalloc+0xfc>
	__asm volatile
 800c3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	613b      	str	r3, [r7, #16]
}
 800c3b2:	bf00      	nop
 800c3b4:	bf00      	nop
 800c3b6:	e7fd      	b.n	800c3b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ba:	685a      	ldr	r2, [r3, #4]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	1ad2      	subs	r2, r2, r3
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c3ca:	69b8      	ldr	r0, [r7, #24]
 800c3cc:	f000 f90a 	bl	800c5e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c3d0:	4b1d      	ldr	r3, [pc, #116]	@ (800c448 <pvPortMalloc+0x18c>)
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	4a1b      	ldr	r2, [pc, #108]	@ (800c448 <pvPortMalloc+0x18c>)
 800c3dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c3de:	4b1a      	ldr	r3, [pc, #104]	@ (800c448 <pvPortMalloc+0x18c>)
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	4b1b      	ldr	r3, [pc, #108]	@ (800c450 <pvPortMalloc+0x194>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d203      	bcs.n	800c3f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c3ea:	4b17      	ldr	r3, [pc, #92]	@ (800c448 <pvPortMalloc+0x18c>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4a18      	ldr	r2, [pc, #96]	@ (800c450 <pvPortMalloc+0x194>)
 800c3f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f4:	685a      	ldr	r2, [r3, #4]
 800c3f6:	4b13      	ldr	r3, [pc, #76]	@ (800c444 <pvPortMalloc+0x188>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	431a      	orrs	r2, r3
 800c3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c402:	2200      	movs	r2, #0
 800c404:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c406:	4b13      	ldr	r3, [pc, #76]	@ (800c454 <pvPortMalloc+0x198>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	3301      	adds	r3, #1
 800c40c:	4a11      	ldr	r2, [pc, #68]	@ (800c454 <pvPortMalloc+0x198>)
 800c40e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c410:	f7fe fce2 	bl	800add8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	f003 0307 	and.w	r3, r3, #7
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d00b      	beq.n	800c436 <pvPortMalloc+0x17a>
	__asm volatile
 800c41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c422:	f383 8811 	msr	BASEPRI, r3
 800c426:	f3bf 8f6f 	isb	sy
 800c42a:	f3bf 8f4f 	dsb	sy
 800c42e:	60fb      	str	r3, [r7, #12]
}
 800c430:	bf00      	nop
 800c432:	bf00      	nop
 800c434:	e7fd      	b.n	800c432 <pvPortMalloc+0x176>
	return pvReturn;
 800c436:	69fb      	ldr	r3, [r7, #28]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3728      	adds	r7, #40	@ 0x28
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}
 800c440:	200028bc 	.word	0x200028bc
 800c444:	200028d0 	.word	0x200028d0
 800c448:	200028c0 	.word	0x200028c0
 800c44c:	200028b4 	.word	0x200028b4
 800c450:	200028c4 	.word	0x200028c4
 800c454:	200028c8 	.word	0x200028c8

0800c458 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d04f      	beq.n	800c50a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c46a:	2308      	movs	r3, #8
 800c46c:	425b      	negs	r3, r3
 800c46e:	697a      	ldr	r2, [r7, #20]
 800c470:	4413      	add	r3, r2
 800c472:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	685a      	ldr	r2, [r3, #4]
 800c47c:	4b25      	ldr	r3, [pc, #148]	@ (800c514 <vPortFree+0xbc>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4013      	ands	r3, r2
 800c482:	2b00      	cmp	r3, #0
 800c484:	d10b      	bne.n	800c49e <vPortFree+0x46>
	__asm volatile
 800c486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c48a:	f383 8811 	msr	BASEPRI, r3
 800c48e:	f3bf 8f6f 	isb	sy
 800c492:	f3bf 8f4f 	dsb	sy
 800c496:	60fb      	str	r3, [r7, #12]
}
 800c498:	bf00      	nop
 800c49a:	bf00      	nop
 800c49c:	e7fd      	b.n	800c49a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00b      	beq.n	800c4be <vPortFree+0x66>
	__asm volatile
 800c4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4aa:	f383 8811 	msr	BASEPRI, r3
 800c4ae:	f3bf 8f6f 	isb	sy
 800c4b2:	f3bf 8f4f 	dsb	sy
 800c4b6:	60bb      	str	r3, [r7, #8]
}
 800c4b8:	bf00      	nop
 800c4ba:	bf00      	nop
 800c4bc:	e7fd      	b.n	800c4ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	685a      	ldr	r2, [r3, #4]
 800c4c2:	4b14      	ldr	r3, [pc, #80]	@ (800c514 <vPortFree+0xbc>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4013      	ands	r3, r2
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d01e      	beq.n	800c50a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d11a      	bne.n	800c50a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	685a      	ldr	r2, [r3, #4]
 800c4d8:	4b0e      	ldr	r3, [pc, #56]	@ (800c514 <vPortFree+0xbc>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	43db      	mvns	r3, r3
 800c4de:	401a      	ands	r2, r3
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c4e4:	f7fe fc6a 	bl	800adbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	685a      	ldr	r2, [r3, #4]
 800c4ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c518 <vPortFree+0xc0>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	4a09      	ldr	r2, [pc, #36]	@ (800c518 <vPortFree+0xc0>)
 800c4f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c4f6:	6938      	ldr	r0, [r7, #16]
 800c4f8:	f000 f874 	bl	800c5e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c4fc:	4b07      	ldr	r3, [pc, #28]	@ (800c51c <vPortFree+0xc4>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	3301      	adds	r3, #1
 800c502:	4a06      	ldr	r2, [pc, #24]	@ (800c51c <vPortFree+0xc4>)
 800c504:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c506:	f7fe fc67 	bl	800add8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c50a:	bf00      	nop
 800c50c:	3718      	adds	r7, #24
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	200028d0 	.word	0x200028d0
 800c518:	200028c0 	.word	0x200028c0
 800c51c:	200028cc 	.word	0x200028cc

0800c520 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c526:	f241 7370 	movw	r3, #6000	@ 0x1770
 800c52a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c52c:	4b27      	ldr	r3, [pc, #156]	@ (800c5cc <prvHeapInit+0xac>)
 800c52e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f003 0307 	and.w	r3, r3, #7
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00c      	beq.n	800c554 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	3307      	adds	r3, #7
 800c53e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f023 0307 	bic.w	r3, r3, #7
 800c546:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	1ad3      	subs	r3, r2, r3
 800c54e:	4a1f      	ldr	r2, [pc, #124]	@ (800c5cc <prvHeapInit+0xac>)
 800c550:	4413      	add	r3, r2
 800c552:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c558:	4a1d      	ldr	r2, [pc, #116]	@ (800c5d0 <prvHeapInit+0xb0>)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c55e:	4b1c      	ldr	r3, [pc, #112]	@ (800c5d0 <prvHeapInit+0xb0>)
 800c560:	2200      	movs	r2, #0
 800c562:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	68ba      	ldr	r2, [r7, #8]
 800c568:	4413      	add	r3, r2
 800c56a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c56c:	2208      	movs	r2, #8
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	1a9b      	subs	r3, r3, r2
 800c572:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f023 0307 	bic.w	r3, r3, #7
 800c57a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	4a15      	ldr	r2, [pc, #84]	@ (800c5d4 <prvHeapInit+0xb4>)
 800c580:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c582:	4b14      	ldr	r3, [pc, #80]	@ (800c5d4 <prvHeapInit+0xb4>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2200      	movs	r2, #0
 800c588:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c58a:	4b12      	ldr	r3, [pc, #72]	@ (800c5d4 <prvHeapInit+0xb4>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	2200      	movs	r2, #0
 800c590:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	1ad2      	subs	r2, r2, r3
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c5a0:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d4 <prvHeapInit+0xb4>)
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	4a0a      	ldr	r2, [pc, #40]	@ (800c5d8 <prvHeapInit+0xb8>)
 800c5ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	4a09      	ldr	r2, [pc, #36]	@ (800c5dc <prvHeapInit+0xbc>)
 800c5b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c5b8:	4b09      	ldr	r3, [pc, #36]	@ (800c5e0 <prvHeapInit+0xc0>)
 800c5ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c5be:	601a      	str	r2, [r3, #0]
}
 800c5c0:	bf00      	nop
 800c5c2:	3714      	adds	r7, #20
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr
 800c5cc:	20001144 	.word	0x20001144
 800c5d0:	200028b4 	.word	0x200028b4
 800c5d4:	200028bc 	.word	0x200028bc
 800c5d8:	200028c4 	.word	0x200028c4
 800c5dc:	200028c0 	.word	0x200028c0
 800c5e0:	200028d0 	.word	0x200028d0

0800c5e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c5ec:	4b28      	ldr	r3, [pc, #160]	@ (800c690 <prvInsertBlockIntoFreeList+0xac>)
 800c5ee:	60fb      	str	r3, [r7, #12]
 800c5f0:	e002      	b.n	800c5f8 <prvInsertBlockIntoFreeList+0x14>
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	60fb      	str	r3, [r7, #12]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d8f7      	bhi.n	800c5f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	4413      	add	r3, r2
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	429a      	cmp	r2, r3
 800c612:	d108      	bne.n	800c626 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	685a      	ldr	r2, [r3, #4]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	441a      	add	r2, r3
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	68ba      	ldr	r2, [r7, #8]
 800c630:	441a      	add	r2, r3
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	429a      	cmp	r2, r3
 800c638:	d118      	bne.n	800c66c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	4b15      	ldr	r3, [pc, #84]	@ (800c694 <prvInsertBlockIntoFreeList+0xb0>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	429a      	cmp	r2, r3
 800c644:	d00d      	beq.n	800c662 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	685a      	ldr	r2, [r3, #4]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	441a      	add	r2, r3
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	601a      	str	r2, [r3, #0]
 800c660:	e008      	b.n	800c674 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c662:	4b0c      	ldr	r3, [pc, #48]	@ (800c694 <prvInsertBlockIntoFreeList+0xb0>)
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	601a      	str	r2, [r3, #0]
 800c66a:	e003      	b.n	800c674 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d002      	beq.n	800c682 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c682:	bf00      	nop
 800c684:	3714      	adds	r7, #20
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop
 800c690:	200028b4 	.word	0x200028b4
 800c694:	200028bc 	.word	0x200028bc

0800c698 <_ZdlPvj>:
 800c698:	f000 b800 	b.w	800c69c <_ZdlPv>

0800c69c <_ZdlPv>:
 800c69c:	f000 b800 	b.w	800c6a0 <free>

0800c6a0 <free>:
 800c6a0:	4b02      	ldr	r3, [pc, #8]	@ (800c6ac <free+0xc>)
 800c6a2:	4601      	mov	r1, r0
 800c6a4:	6818      	ldr	r0, [r3, #0]
 800c6a6:	f000 b8a1 	b.w	800c7ec <_free_r>
 800c6aa:	bf00      	nop
 800c6ac:	20000010 	.word	0x20000010

0800c6b0 <__malloc_lock>:
 800c6b0:	4801      	ldr	r0, [pc, #4]	@ (800c6b8 <__malloc_lock+0x8>)
 800c6b2:	f000 b88b 	b.w	800c7cc <__retarget_lock_acquire_recursive>
 800c6b6:	bf00      	nop
 800c6b8:	20002a10 	.word	0x20002a10

0800c6bc <__malloc_unlock>:
 800c6bc:	4801      	ldr	r0, [pc, #4]	@ (800c6c4 <__malloc_unlock+0x8>)
 800c6be:	f000 b886 	b.w	800c7ce <__retarget_lock_release_recursive>
 800c6c2:	bf00      	nop
 800c6c4:	20002a10 	.word	0x20002a10

0800c6c8 <memset>:
 800c6c8:	4402      	add	r2, r0
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d100      	bne.n	800c6d2 <memset+0xa>
 800c6d0:	4770      	bx	lr
 800c6d2:	f803 1b01 	strb.w	r1, [r3], #1
 800c6d6:	e7f9      	b.n	800c6cc <memset+0x4>

0800c6d8 <_reclaim_reent>:
 800c6d8:	4b29      	ldr	r3, [pc, #164]	@ (800c780 <_reclaim_reent+0xa8>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4283      	cmp	r3, r0
 800c6de:	b570      	push	{r4, r5, r6, lr}
 800c6e0:	4604      	mov	r4, r0
 800c6e2:	d04b      	beq.n	800c77c <_reclaim_reent+0xa4>
 800c6e4:	69c3      	ldr	r3, [r0, #28]
 800c6e6:	b1ab      	cbz	r3, 800c714 <_reclaim_reent+0x3c>
 800c6e8:	68db      	ldr	r3, [r3, #12]
 800c6ea:	b16b      	cbz	r3, 800c708 <_reclaim_reent+0x30>
 800c6ec:	2500      	movs	r5, #0
 800c6ee:	69e3      	ldr	r3, [r4, #28]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	5959      	ldr	r1, [r3, r5]
 800c6f4:	2900      	cmp	r1, #0
 800c6f6:	d13b      	bne.n	800c770 <_reclaim_reent+0x98>
 800c6f8:	3504      	adds	r5, #4
 800c6fa:	2d80      	cmp	r5, #128	@ 0x80
 800c6fc:	d1f7      	bne.n	800c6ee <_reclaim_reent+0x16>
 800c6fe:	69e3      	ldr	r3, [r4, #28]
 800c700:	4620      	mov	r0, r4
 800c702:	68d9      	ldr	r1, [r3, #12]
 800c704:	f000 f872 	bl	800c7ec <_free_r>
 800c708:	69e3      	ldr	r3, [r4, #28]
 800c70a:	6819      	ldr	r1, [r3, #0]
 800c70c:	b111      	cbz	r1, 800c714 <_reclaim_reent+0x3c>
 800c70e:	4620      	mov	r0, r4
 800c710:	f000 f86c 	bl	800c7ec <_free_r>
 800c714:	6961      	ldr	r1, [r4, #20]
 800c716:	b111      	cbz	r1, 800c71e <_reclaim_reent+0x46>
 800c718:	4620      	mov	r0, r4
 800c71a:	f000 f867 	bl	800c7ec <_free_r>
 800c71e:	69e1      	ldr	r1, [r4, #28]
 800c720:	b111      	cbz	r1, 800c728 <_reclaim_reent+0x50>
 800c722:	4620      	mov	r0, r4
 800c724:	f000 f862 	bl	800c7ec <_free_r>
 800c728:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c72a:	b111      	cbz	r1, 800c732 <_reclaim_reent+0x5a>
 800c72c:	4620      	mov	r0, r4
 800c72e:	f000 f85d 	bl	800c7ec <_free_r>
 800c732:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c734:	b111      	cbz	r1, 800c73c <_reclaim_reent+0x64>
 800c736:	4620      	mov	r0, r4
 800c738:	f000 f858 	bl	800c7ec <_free_r>
 800c73c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c73e:	b111      	cbz	r1, 800c746 <_reclaim_reent+0x6e>
 800c740:	4620      	mov	r0, r4
 800c742:	f000 f853 	bl	800c7ec <_free_r>
 800c746:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c748:	b111      	cbz	r1, 800c750 <_reclaim_reent+0x78>
 800c74a:	4620      	mov	r0, r4
 800c74c:	f000 f84e 	bl	800c7ec <_free_r>
 800c750:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c752:	b111      	cbz	r1, 800c75a <_reclaim_reent+0x82>
 800c754:	4620      	mov	r0, r4
 800c756:	f000 f849 	bl	800c7ec <_free_r>
 800c75a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c75c:	b111      	cbz	r1, 800c764 <_reclaim_reent+0x8c>
 800c75e:	4620      	mov	r0, r4
 800c760:	f000 f844 	bl	800c7ec <_free_r>
 800c764:	6a23      	ldr	r3, [r4, #32]
 800c766:	b14b      	cbz	r3, 800c77c <_reclaim_reent+0xa4>
 800c768:	4620      	mov	r0, r4
 800c76a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c76e:	4718      	bx	r3
 800c770:	680e      	ldr	r6, [r1, #0]
 800c772:	4620      	mov	r0, r4
 800c774:	f000 f83a 	bl	800c7ec <_free_r>
 800c778:	4631      	mov	r1, r6
 800c77a:	e7bb      	b.n	800c6f4 <_reclaim_reent+0x1c>
 800c77c:	bd70      	pop	{r4, r5, r6, pc}
 800c77e:	bf00      	nop
 800c780:	20000010 	.word	0x20000010

0800c784 <__libc_init_array>:
 800c784:	b570      	push	{r4, r5, r6, lr}
 800c786:	4d0d      	ldr	r5, [pc, #52]	@ (800c7bc <__libc_init_array+0x38>)
 800c788:	4c0d      	ldr	r4, [pc, #52]	@ (800c7c0 <__libc_init_array+0x3c>)
 800c78a:	1b64      	subs	r4, r4, r5
 800c78c:	10a4      	asrs	r4, r4, #2
 800c78e:	2600      	movs	r6, #0
 800c790:	42a6      	cmp	r6, r4
 800c792:	d109      	bne.n	800c7a8 <__libc_init_array+0x24>
 800c794:	4d0b      	ldr	r5, [pc, #44]	@ (800c7c4 <__libc_init_array+0x40>)
 800c796:	4c0c      	ldr	r4, [pc, #48]	@ (800c7c8 <__libc_init_array+0x44>)
 800c798:	f000 f872 	bl	800c880 <_init>
 800c79c:	1b64      	subs	r4, r4, r5
 800c79e:	10a4      	asrs	r4, r4, #2
 800c7a0:	2600      	movs	r6, #0
 800c7a2:	42a6      	cmp	r6, r4
 800c7a4:	d105      	bne.n	800c7b2 <__libc_init_array+0x2e>
 800c7a6:	bd70      	pop	{r4, r5, r6, pc}
 800c7a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7ac:	4798      	blx	r3
 800c7ae:	3601      	adds	r6, #1
 800c7b0:	e7ee      	b.n	800c790 <__libc_init_array+0xc>
 800c7b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7b6:	4798      	blx	r3
 800c7b8:	3601      	adds	r6, #1
 800c7ba:	e7f2      	b.n	800c7a2 <__libc_init_array+0x1e>
 800c7bc:	0800cf8c 	.word	0x0800cf8c
 800c7c0:	0800cf8c 	.word	0x0800cf8c
 800c7c4:	0800cf8c 	.word	0x0800cf8c
 800c7c8:	0800cf94 	.word	0x0800cf94

0800c7cc <__retarget_lock_acquire_recursive>:
 800c7cc:	4770      	bx	lr

0800c7ce <__retarget_lock_release_recursive>:
 800c7ce:	4770      	bx	lr

0800c7d0 <memcpy>:
 800c7d0:	440a      	add	r2, r1
 800c7d2:	4291      	cmp	r1, r2
 800c7d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7d8:	d100      	bne.n	800c7dc <memcpy+0xc>
 800c7da:	4770      	bx	lr
 800c7dc:	b510      	push	{r4, lr}
 800c7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7e6:	4291      	cmp	r1, r2
 800c7e8:	d1f9      	bne.n	800c7de <memcpy+0xe>
 800c7ea:	bd10      	pop	{r4, pc}

0800c7ec <_free_r>:
 800c7ec:	b538      	push	{r3, r4, r5, lr}
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	2900      	cmp	r1, #0
 800c7f2:	d041      	beq.n	800c878 <_free_r+0x8c>
 800c7f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7f8:	1f0c      	subs	r4, r1, #4
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	bfb8      	it	lt
 800c7fe:	18e4      	addlt	r4, r4, r3
 800c800:	f7ff ff56 	bl	800c6b0 <__malloc_lock>
 800c804:	4a1d      	ldr	r2, [pc, #116]	@ (800c87c <_free_r+0x90>)
 800c806:	6813      	ldr	r3, [r2, #0]
 800c808:	b933      	cbnz	r3, 800c818 <_free_r+0x2c>
 800c80a:	6063      	str	r3, [r4, #4]
 800c80c:	6014      	str	r4, [r2, #0]
 800c80e:	4628      	mov	r0, r5
 800c810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c814:	f7ff bf52 	b.w	800c6bc <__malloc_unlock>
 800c818:	42a3      	cmp	r3, r4
 800c81a:	d908      	bls.n	800c82e <_free_r+0x42>
 800c81c:	6820      	ldr	r0, [r4, #0]
 800c81e:	1821      	adds	r1, r4, r0
 800c820:	428b      	cmp	r3, r1
 800c822:	bf01      	itttt	eq
 800c824:	6819      	ldreq	r1, [r3, #0]
 800c826:	685b      	ldreq	r3, [r3, #4]
 800c828:	1809      	addeq	r1, r1, r0
 800c82a:	6021      	streq	r1, [r4, #0]
 800c82c:	e7ed      	b.n	800c80a <_free_r+0x1e>
 800c82e:	461a      	mov	r2, r3
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	b10b      	cbz	r3, 800c838 <_free_r+0x4c>
 800c834:	42a3      	cmp	r3, r4
 800c836:	d9fa      	bls.n	800c82e <_free_r+0x42>
 800c838:	6811      	ldr	r1, [r2, #0]
 800c83a:	1850      	adds	r0, r2, r1
 800c83c:	42a0      	cmp	r0, r4
 800c83e:	d10b      	bne.n	800c858 <_free_r+0x6c>
 800c840:	6820      	ldr	r0, [r4, #0]
 800c842:	4401      	add	r1, r0
 800c844:	1850      	adds	r0, r2, r1
 800c846:	4283      	cmp	r3, r0
 800c848:	6011      	str	r1, [r2, #0]
 800c84a:	d1e0      	bne.n	800c80e <_free_r+0x22>
 800c84c:	6818      	ldr	r0, [r3, #0]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	6053      	str	r3, [r2, #4]
 800c852:	4408      	add	r0, r1
 800c854:	6010      	str	r0, [r2, #0]
 800c856:	e7da      	b.n	800c80e <_free_r+0x22>
 800c858:	d902      	bls.n	800c860 <_free_r+0x74>
 800c85a:	230c      	movs	r3, #12
 800c85c:	602b      	str	r3, [r5, #0]
 800c85e:	e7d6      	b.n	800c80e <_free_r+0x22>
 800c860:	6820      	ldr	r0, [r4, #0]
 800c862:	1821      	adds	r1, r4, r0
 800c864:	428b      	cmp	r3, r1
 800c866:	bf04      	itt	eq
 800c868:	6819      	ldreq	r1, [r3, #0]
 800c86a:	685b      	ldreq	r3, [r3, #4]
 800c86c:	6063      	str	r3, [r4, #4]
 800c86e:	bf04      	itt	eq
 800c870:	1809      	addeq	r1, r1, r0
 800c872:	6021      	streq	r1, [r4, #0]
 800c874:	6054      	str	r4, [r2, #4]
 800c876:	e7ca      	b.n	800c80e <_free_r+0x22>
 800c878:	bd38      	pop	{r3, r4, r5, pc}
 800c87a:	bf00      	nop
 800c87c:	200028d4 	.word	0x200028d4

0800c880 <_init>:
 800c880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c882:	bf00      	nop
 800c884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c886:	bc08      	pop	{r3}
 800c888:	469e      	mov	lr, r3
 800c88a:	4770      	bx	lr

0800c88c <_fini>:
 800c88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88e:	bf00      	nop
 800c890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c892:	bc08      	pop	{r3}
 800c894:	469e      	mov	lr, r3
 800c896:	4770      	bx	lr
