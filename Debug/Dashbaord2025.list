
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c988  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  0800cb38  0800cb38  0000db38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d224  0800d224  0000f060  2**0
                  CONTENTS
  4 .ARM          00000008  0800d224  0800d224  0000e224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d22c  0800d22c  0000f060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d22c  0800d22c  0000e22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800d234  0800d234  0000e234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800d23c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029b8  20000060  0800d29c  0000f060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a18  0800d29c  0000fa18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029f06  00000000  00000000  0000f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000531c  00000000  00000000  00038f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021f0  00000000  00000000  0003e2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a7c  00000000  00000000  000404a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f0ef  00000000  00000000  00041f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000283f6  00000000  00000000  00071013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126756  00000000  00000000  00099409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bfb5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009524  00000000  00000000  001bfba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001c90c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cb20 	.word	0x0800cb20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	0800cb20 	.word	0x0800cb20

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <_ZN14DashboardState5resetEv>:
#include "DashboardState.hpp"

void DashboardState::reset() {
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
    lightState = LIGHTS_NONE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
    oldLightState = LIGHTS_NONE;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	705a      	strb	r2, [r3, #1]

    outputPortState = 0;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2200      	movs	r2, #0
 80004f8:	709a      	strb	r2, [r3, #2]
    hornState = 0;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	70da      	strb	r2, [r3, #3]
    fanState = 0;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2200      	movs	r2, #0
 8000504:	711a      	strb	r2, [r3, #4]
    headlightState = 0;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2200      	movs	r2, #0
 800050a:	715a      	strb	r2, [r3, #5]
    pttState = 0;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2200      	movs	r2, #0
 8000510:	719a      	strb	r2, [r3, #6]
    displayState = 0;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2200      	movs	r2, #0
 8000516:	71da      	strb	r2, [r3, #7]

    bmsStatus = 0;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2200      	movs	r2, #0
 800051c:	72da      	strb	r2, [r3, #11]
    mcStatus = 0;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2200      	movs	r2, #0
 8000522:	731a      	strb	r2, [r3, #12]
    arrayStatus = 0;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	735a      	strb	r2, [r3, #13]

    old_bmsStatus = 0;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	739a      	strb	r2, [r3, #14]
    old_mcStatus = 0;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	73da      	strb	r2, [r3, #15]
    old_arrayStatus = 0;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	741a      	strb	r2, [r3, #16]

    uart_rx = 0;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	745a      	strb	r2, [r3, #17]
    old_uart_rx = 0;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	749a      	strb	r2, [r3, #18]
    updateRequested = 0;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2200      	movs	r2, #0
 800054c:	74da      	strb	r2, [r3, #19]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <_ZN14DashboardState14updateFromUARTEv>:

void DashboardState::updateFromUART() {
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
    // uart data for lights (blinkers)
    if (uart_rx & BUTTON_HAZARD)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	7c5b      	ldrb	r3, [r3, #17]
 8000566:	f003 0304 	and.w	r3, r3, #4
 800056a:	2b00      	cmp	r3, #0
 800056c:	d003      	beq.n	8000576 <_ZN14DashboardState14updateFromUARTEv+0x1c>
        lightState = LIGHTS_HAZARD;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2203      	movs	r2, #3
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	e01c      	b.n	80005b0 <_ZN14DashboardState14updateFromUARTEv+0x56>
    else if (uart_rx & BUTTON_LEFT_TURN)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	7c5b      	ldrb	r3, [r3, #17]
 800057a:	f003 0308 	and.w	r3, r3, #8
 800057e:	2b00      	cmp	r3, #0
 8000580:	d003      	beq.n	800058a <_ZN14DashboardState14updateFromUARTEv+0x30>
        lightState = LIGHTS_LEFT;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
 8000588:	e012      	b.n	80005b0 <_ZN14DashboardState14updateFromUARTEv+0x56>
    else if (uart_rx & BUTTON_RIGHT_TURN)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	7c5b      	ldrb	r3, [r3, #17]
 800058e:	b25b      	sxtb	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	da03      	bge.n	800059c <_ZN14DashboardState14updateFromUARTEv+0x42>
        lightState = LIGHTS_RIGHT;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2202      	movs	r2, #2
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	e009      	b.n	80005b0 <_ZN14DashboardState14updateFromUARTEv+0x56>
    else {
        lightState = LIGHTS_NONE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
        outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	789b      	ldrb	r3, [r3, #2]
 80005a6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	709a      	strb	r2, [r3, #2]
    }

    // if headlight should be on  
    if (uart_rx & BUTTON_HEADLIGHTS) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	7c5b      	ldrb	r3, [r3, #17]
 80005b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00a      	beq.n	80005d2 <_ZN14DashboardState14updateFromUARTEv+0x78>
        outputPortState |= (OUTPUT_R_HEAD_CTRL | OUTPUT_L_HEAD_CTRL);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	789b      	ldrb	r3, [r3, #2]
 80005c0:	f043 030c 	orr.w	r3, r3, #12
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	709a      	strb	r2, [r3, #2]
        headlightState = 1;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2201      	movs	r2, #1
 80005ce:	715a      	strb	r2, [r3, #5]
 80005d0:	e009      	b.n	80005e6 <_ZN14DashboardState14updateFromUARTEv+0x8c>
    }
    else  {
        outputPortState &= ~(OUTPUT_R_HEAD_CTRL | OUTPUT_L_HEAD_CTRL);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	789b      	ldrb	r3, [r3, #2]
 80005d6:	f023 030c 	bic.w	r3, r3, #12
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	709a      	strb	r2, [r3, #2]
        headlightState = 0;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	715a      	strb	r2, [r3, #5]
    }

    // if horn should be on
    if (uart_rx & BUTTON_HORN) {
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	7c5b      	ldrb	r3, [r3, #17]
 80005ea:	f003 0320 	and.w	r3, r3, #32
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d00a      	beq.n	8000608 <_ZN14DashboardState14updateFromUARTEv+0xae>
        outputPortState |= OUTPUT_HORN_CTRL;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	789b      	ldrb	r3, [r3, #2]
 80005f6:	f043 0302 	orr.w	r3, r3, #2
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	709a      	strb	r2, [r3, #2]
        hornState = 1;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2201      	movs	r2, #1
 8000604:	70da      	strb	r2, [r3, #3]
 8000606:	e009      	b.n	800061c <_ZN14DashboardState14updateFromUARTEv+0xc2>
    }
    else {
        outputPortState &= ~OUTPUT_HORN_CTRL;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	789b      	ldrb	r3, [r3, #2]
 800060c:	f023 0302 	bic.w	r3, r3, #2
 8000610:	b2da      	uxtb	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	709a      	strb	r2, [r3, #2]
        hornState = 0;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2200      	movs	r2, #0
 800061a:	70da      	strb	r2, [r3, #3]
    }

    // if fan should be on
    if (uart_rx & BUTTON_FAN) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	7c5b      	ldrb	r3, [r3, #17]
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00a      	beq.n	800063e <_ZN14DashboardState14updateFromUARTEv+0xe4>
        outputPortState |= OUTPUT_FAN_CTRL;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	b2da      	uxtb	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	709a      	strb	r2, [r3, #2]
        fanState = 1;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2201      	movs	r2, #1
 800063a:	711a      	strb	r2, [r3, #4]
 800063c:	e009      	b.n	8000652 <_ZN14DashboardState14updateFromUARTEv+0xf8>
    }
    else {
        outputPortState &= ~OUTPUT_FAN_CTRL;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	789b      	ldrb	r3, [r3, #2]
 8000642:	f023 0301 	bic.w	r3, r3, #1
 8000646:	b2da      	uxtb	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	709a      	strb	r2, [r3, #2]
        fanState = 0;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	711a      	strb	r2, [r3, #4]
    }

    // if PTT should be on
    if (uart_rx & BUTTON_PTT) {
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	7c5b      	ldrb	r3, [r3, #17]
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	2b00      	cmp	r3, #0
 800065c:	d003      	beq.n	8000666 <_ZN14DashboardState14updateFromUARTEv+0x10c>
        pttState = 1;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2201      	movs	r2, #1
 8000662:	719a      	strb	r2, [r3, #6]
 8000664:	e002      	b.n	800066c <_ZN14DashboardState14updateFromUARTEv+0x112>
    }
    else {
        pttState = 0;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2200      	movs	r2, #0
 800066a:	719a      	strb	r2, [r3, #6]
    }

    // TODO: do something with displayState cause this isn't setup to go anywhere
    if (uart_rx & BUTTON_DISPLAY) {
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	7c5b      	ldrb	r3, [r3, #17]
 8000670:	f003 0302 	and.w	r3, r3, #2
 8000674:	2b00      	cmp	r3, #0
 8000676:	d003      	beq.n	8000680 <_ZN14DashboardState14updateFromUARTEv+0x126>
        displayState = 1;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2201      	movs	r2, #1
 800067c:	71da      	strb	r2, [r3, #7]
    }
    else {
        displayState = 0;
    }

}
 800067e:	e002      	b.n	8000686 <_ZN14DashboardState14updateFromUARTEv+0x12c>
        displayState = 0;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2200      	movs	r2, #0
 8000684:	71da      	strb	r2, [r3, #7]
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>:

HAL_StatusTypeDef DashboardState::writeToPort(TCAL9538RSVR &U7) {
 8000692:	b580      	push	{r7, lr}
 8000694:	b084      	sub	sp, #16
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
	uint8_t inverted = ~outputPortState;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	789b      	ldrb	r3, [r3, #2]
 80006a0:	43db      	mvns	r3, r3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	73fb      	strb	r3, [r7, #15]
    return TCAL9538RSVR_SetOutput(&U7, &inverted); // write to output port
 80006a6:	f107 030f 	add.w	r3, r7, #15
 80006aa:	4619      	mov	r1, r3
 80006ac:	6838      	ldr	r0, [r7, #0]
 80006ae:	f002 fcc4 	bl	800303a <TCAL9538RSVR_SetOutput>
 80006b2:	4603      	mov	r3, r0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <_ZN14DashboardState11blinkLightsEv>:

void DashboardState::blinkLights() {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    switch (lightState) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b03      	cmp	r3, #3
 80006ca:	d82b      	bhi.n	8000724 <_ZN14DashboardState11blinkLightsEv+0x68>
 80006cc:	a201      	add	r2, pc, #4	@ (adr r2, 80006d4 <_ZN14DashboardState11blinkLightsEv+0x18>)
 80006ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d2:	bf00      	nop
 80006d4:	08000715 	.word	0x08000715
 80006d8:	080006f5 	.word	0x080006f5
 80006dc:	08000705 	.word	0x08000705
 80006e0:	080006e5 	.word	0x080006e5
        case LIGHTS_HAZARD:
            outputPortState ^= (OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	709a      	strb	r2, [r3, #2]
            break;
 80006f2:	e017      	b.n	8000724 <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_LEFT:
            outputPortState ^= OUTPUT_FL_LIGHT_CTRL;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	789b      	ldrb	r3, [r3, #2]
 80006f8:	f083 0320 	eor.w	r3, r3, #32
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	709a      	strb	r2, [r3, #2]
            break;
 8000702:	e00f      	b.n	8000724 <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_RIGHT:
            outputPortState ^= OUTPUT_FR_LIGHT_CTRL;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	789b      	ldrb	r3, [r3, #2]
 8000708:	f083 0310 	eor.w	r3, r3, #16
 800070c:	b2da      	uxtb	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	709a      	strb	r2, [r3, #2]
            break;
 8000712:	e007      	b.n	8000724 <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_NONE:
            outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	789b      	ldrb	r3, [r3, #2]
 8000718:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800071c:	b2da      	uxtb	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	709a      	strb	r2, [r3, #2]
            break;
 8000722:	bf00      	nop
    }
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <CPP_UserSetup>:

DashboardState dashboardState; // Dashboard state object

ILI9341 screen(320, 240);

void CPP_UserSetup(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af02      	add	r7, sp, #8
    // Make sure that timer priorities are configured correctly
    HAL_Delay(10);
 8000736:	200a      	movs	r0, #10
 8000738:	f002 fd2a 	bl	8003190 <HAL_Delay>

	dashboardState.reset(); // reset dashboard state
 800073c:	4860      	ldr	r0, [pc, #384]	@ (80008c0 <CPP_UserSetup+0x190>)
 800073e:	f7ff fecf 	bl	80004e0 <_ZN14DashboardState5resetEv>

    dma_flag = 0;
 8000742:	4b60      	ldr	r3, [pc, #384]	@ (80008c4 <CPP_UserSetup+0x194>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
    cc_enable = 0;
 8000748:	4b5f      	ldr	r3, [pc, #380]	@ (80008c8 <CPP_UserSetup+0x198>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]

	// -------------------------
	// CAN INIT
	// -------------------------
	Init_CAN_Filter1(hcan1); // set up CAN filter for CAN1
 800074e:	485f      	ldr	r0, [pc, #380]	@ (80008cc <CPP_UserSetup+0x19c>)
 8000750:	f000 fd1a 	bl	8001188 <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef>
	HAL_CAN_Start(&hcan1); // start CAN1
 8000754:	485d      	ldr	r0, [pc, #372]	@ (80008cc <CPP_UserSetup+0x19c>)
 8000756:	f004 faef 	bl	8004d38 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // enable CAN1 RX interrupt
 800075a:	2102      	movs	r1, #2
 800075c:	485b      	ldr	r0, [pc, #364]	@ (80008cc <CPP_UserSetup+0x19c>)
 800075e:	f004 fc34 	bl	8004fca <HAL_CAN_ActivateNotification>

	// -------------------------
	// GPIO EXPANDERS INIT
	// -------------------------

    if (TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0xFF, 0x00) != HAL_OK) { Error_Handler(); } // inputs
 8000762:	2300      	movs	r3, #0
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	23ff      	movs	r3, #255	@ 0xff
 8000768:	2202      	movs	r2, #2
 800076a:	4959      	ldr	r1, [pc, #356]	@ (80008d0 <CPP_UserSetup+0x1a0>)
 800076c:	4859      	ldr	r0, [pc, #356]	@ (80008d4 <CPP_UserSetup+0x1a4>)
 800076e:	f002 fba7 	bl	8002ec0 <TCAL9538RSVR_INIT>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	bf14      	ite	ne
 8000778:	2301      	movne	r3, #1
 800077a:	2300      	moveq	r3, #0
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <CPP_UserSetup+0x56>
 8000782:	f001 f93d 	bl	8001a00 <Error_Handler>
    //if (TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b00111111, 0b11000000) != HAL_OK) { Error_Handler(); }
    if (TCAL9538RSVR_INIT(&U7, &hi2c4, 0x00, 0b00000000, 0b00000000) != HAL_OK) { Error_Handler(); } // output
 8000786:	2300      	movs	r3, #0
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2300      	movs	r3, #0
 800078c:	2200      	movs	r2, #0
 800078e:	4950      	ldr	r1, [pc, #320]	@ (80008d0 <CPP_UserSetup+0x1a0>)
 8000790:	4851      	ldr	r0, [pc, #324]	@ (80008d8 <CPP_UserSetup+0x1a8>)
 8000792:	f002 fb95 	bl	8002ec0 <TCAL9538RSVR_INIT>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	bf14      	ite	ne
 800079c:	2301      	movne	r3, #1
 800079e:	2300      	moveq	r3, #0
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <CPP_UserSetup+0x7a>
 80007a6:	f001 f92b 	bl	8001a00 <Error_Handler>

    // set outputs to low to start
	if (dashboardState.writeToPort(U7) != HAL_OK) { Error_Handler(); }
 80007aa:	494b      	ldr	r1, [pc, #300]	@ (80008d8 <CPP_UserSetup+0x1a8>)
 80007ac:	4844      	ldr	r0, [pc, #272]	@ (80008c0 <CPP_UserSetup+0x190>)
 80007ae:	f7ff ff70 	bl	8000692 <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	bf14      	ite	ne
 80007b8:	2301      	movne	r3, #1
 80007ba:	2300      	moveq	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <CPP_UserSetup+0x96>
 80007c2:	f001 f91d 	bl	8001a00 <Error_Handler>

	// Set up UART4 for receiving data from the steering wheel
	HAL_UART_Receive_IT(&huart4, &dashboardState.uart_rx, 1); // enable uart interrupt
 80007c6:	2201      	movs	r2, #1
 80007c8:	4944      	ldr	r1, [pc, #272]	@ (80008dc <CPP_UserSetup+0x1ac>)
 80007ca:	4845      	ldr	r0, [pc, #276]	@ (80008e0 <CPP_UserSetup+0x1b0>)
 80007cc:	f007 fe2e 	bl	800842c <HAL_UART_Receive_IT>

	// -------------------------
	// SCREEN INIT 
	// -------------------------
	
    screen.Init();
 80007d0:	4844      	ldr	r0, [pc, #272]	@ (80008e4 <CPP_UserSetup+0x1b4>)
 80007d2:	f001 fccf 	bl	8002174 <_ZN7ILI93414InitEv>
    screen.SetRotation(3);
 80007d6:	2103      	movs	r1, #3
 80007d8:	4842      	ldr	r0, [pc, #264]	@ (80008e4 <CPP_UserSetup+0x1b4>)
 80007da:	f002 f855 	bl	8002888 <_ZN7ILI934111SetRotationEh>
    screen.ClearScreen(RGB565_WHITE);
 80007de:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80007e2:	4840      	ldr	r0, [pc, #256]	@ (80008e4 <CPP_UserSetup+0x1b4>)
 80007e4:	f001 ff85 	bl	80026f2 <_ZN7ILI934111ClearScreenEt>

    uint16_t x_text = 70;
 80007e8:	2346      	movs	r3, #70	@ 0x46
 80007ea:	81fb      	strh	r3, [r7, #14]
    uint16_t y_text = 10;
 80007ec:	230a      	movs	r3, #10
 80007ee:	81bb      	strh	r3, [r7, #12]
    const char* str1 = "UF Solar Gators :)\0";
 80007f0:	4b3d      	ldr	r3, [pc, #244]	@ (80008e8 <CPP_UserSetup+0x1b8>)
 80007f2:	60bb      	str	r3, [r7, #8]
    screen.SetTextSize(2);
 80007f4:	2102      	movs	r1, #2
 80007f6:	483b      	ldr	r0, [pc, #236]	@ (80008e4 <CPP_UserSetup+0x1b4>)
 80007f8:	f002 f8b2 	bl	8002960 <_ZN7ILI934111SetTextSizeEh>
    screen.DrawText(x_text, y_text, str1, RGB565_BLACK);
 80007fc:	89ba      	ldrh	r2, [r7, #12]
 80007fe:	89f9      	ldrh	r1, [r7, #14]
 8000800:	2300      	movs	r3, #0
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	4837      	ldr	r0, [pc, #220]	@ (80008e4 <CPP_UserSetup+0x1b4>)
 8000808:	f002 f9d6 	bl	8002bb8 <_ZN7ILI93418DrawTextEttPKct>

    x_text = 55;
 800080c:	2337      	movs	r3, #55	@ 0x37
 800080e:	81fb      	strh	r3, [r7, #14]
    y_text = 170;
 8000810:	23aa      	movs	r3, #170	@ 0xaa
 8000812:	81bb      	strh	r3, [r7, #12]
    const char* str2 = "BMS    MC    Array\0";
 8000814:	4b35      	ldr	r3, [pc, #212]	@ (80008ec <CPP_UserSetup+0x1bc>)
 8000816:	607b      	str	r3, [r7, #4]

    screen.SetTextSize(2);
 8000818:	2102      	movs	r1, #2
 800081a:	4832      	ldr	r0, [pc, #200]	@ (80008e4 <CPP_UserSetup+0x1b4>)
 800081c:	f002 f8a0 	bl	8002960 <_ZN7ILI934111SetTextSizeEh>
    screen.DrawText(x_text, y_text, str2, RGB565_BLACK);
 8000820:	89ba      	ldrh	r2, [r7, #12]
 8000822:	89f9      	ldrh	r1, [r7, #14]
 8000824:	2300      	movs	r3, #0
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	482e      	ldr	r0, [pc, #184]	@ (80008e4 <CPP_UserSetup+0x1b4>)
 800082c:	f002 f9c4 	bl	8002bb8 <_ZN7ILI93418DrawTextEttPKct>

    screen.FillCircle(70, 210, 10, RGB565_RED);
 8000830:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	230a      	movs	r3, #10
 8000838:	22d2      	movs	r2, #210	@ 0xd2
 800083a:	2146      	movs	r1, #70	@ 0x46
 800083c:	4829      	ldr	r0, [pc, #164]	@ (80008e4 <CPP_UserSetup+0x1b4>)
 800083e:	f002 fa99 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(150, 210, 10, RGB565_RED);
 8000842:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	230a      	movs	r3, #10
 800084a:	22d2      	movs	r2, #210	@ 0xd2
 800084c:	2196      	movs	r1, #150	@ 0x96
 800084e:	4825      	ldr	r0, [pc, #148]	@ (80008e4 <CPP_UserSetup+0x1b4>)
 8000850:	f002 fa90 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(235, 210, 10, RGB565_RED);
 8000854:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	230a      	movs	r3, #10
 800085c:	22d2      	movs	r2, #210	@ 0xd2
 800085e:	21eb      	movs	r1, #235	@ 0xeb
 8000860:	4820      	ldr	r0, [pc, #128]	@ (80008e4 <CPP_UserSetup+0x1b4>)
 8000862:	f002 fa87 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>

	// temp to help debug  
	const char* str3 = "HedLit Horn  Fan\0";
 8000866:	4b22      	ldr	r3, [pc, #136]	@ (80008f0 <CPP_UserSetup+0x1c0>)
 8000868:	603b      	str	r3, [r7, #0]
    screen.SetTextSize(2);
 800086a:	2102      	movs	r1, #2
 800086c:	481d      	ldr	r0, [pc, #116]	@ (80008e4 <CPP_UserSetup+0x1b4>)
 800086e:	f002 f877 	bl	8002960 <_ZN7ILI934111SetTextSizeEh>
    screen.DrawText(55, 80, str3, RGB565_BLACK);  // Labels above the circles
 8000872:	2300      	movs	r3, #0
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	2250      	movs	r2, #80	@ 0x50
 800087a:	2137      	movs	r1, #55	@ 0x37
 800087c:	4819      	ldr	r0, [pc, #100]	@ (80008e4 <CPP_UserSetup+0x1b4>)
 800087e:	f002 f99b 	bl	8002bb8 <_ZN7ILI93418DrawTextEttPKct>

    screen.FillCircle(70, 120, 10, RGB565_RED);   // Headlights
 8000882:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	230a      	movs	r3, #10
 800088a:	2278      	movs	r2, #120	@ 0x78
 800088c:	2146      	movs	r1, #70	@ 0x46
 800088e:	4815      	ldr	r0, [pc, #84]	@ (80008e4 <CPP_UserSetup+0x1b4>)
 8000890:	f002 fa70 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(150, 120, 10, RGB565_RED);  // Horn
 8000894:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	230a      	movs	r3, #10
 800089c:	2278      	movs	r2, #120	@ 0x78
 800089e:	2196      	movs	r1, #150	@ 0x96
 80008a0:	4810      	ldr	r0, [pc, #64]	@ (80008e4 <CPP_UserSetup+0x1b4>)
 80008a2:	f002 fa67 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(235, 120, 10, RGB565_RED);  // Fan
 80008a6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	230a      	movs	r3, #10
 80008ae:	2278      	movs	r2, #120	@ 0x78
 80008b0:	21eb      	movs	r1, #235	@ 0xeb
 80008b2:	480c      	ldr	r0, [pc, #48]	@ (80008e4 <CPP_UserSetup+0x1b4>)
 80008b4:	f002 fa5e 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>
}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200000ac 	.word	0x200000ac
 80008c4:	200000a8 	.word	0x200000a8
 80008c8:	200000a9 	.word	0x200000a9
 80008cc:	200001e8 	.word	0x200001e8
 80008d0:	20000238 	.word	0x20000238
 80008d4:	2000007c 	.word	0x2000007c
 80008d8:	2000008c 	.word	0x2000008c
 80008dc:	200000bd 	.word	0x200000bd
 80008e0:	2000028c 	.word	0x2000028c
 80008e4:	200000c4 	.word	0x200000c4
 80008e8:	0800cb38 	.word	0x0800cb38
 80008ec:	0800cb4c 	.word	0x0800cb4c
 80008f0:	0800cb60 	.word	0x0800cb60

080008f4 <_Z11StartTask01Pv>:


void StartTask01(void *argument)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_UART_Receive(&huart4, UART4_rxBuffer, 1, HAL_MAX_DELAY);
	  HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 80008fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000900:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000904:	f005 f88a 	bl	8005a1c <HAL_GPIO_TogglePin>
    osDelay(500);
 8000908:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800090c:	f009 f9c0 	bl	8009c90 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000910:	bf00      	nop
 8000912:	e7f3      	b.n	80008fc <_Z11StartTask01Pv+0x8>

08000914 <_Z11StartTask02Pv>:
  }
  /* USER CODE END 5 */
}

void StartTask02(void *argument)
{
 8000914:	b5b0      	push	{r4, r5, r7, lr}
 8000916:	b092      	sub	sp, #72	@ 0x48
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

	uint16_t adc_var_avg = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	int HAL_CAN_BUSY = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	643b      	str	r3, [r7, #64]	@ 0x40
	uint64_t messages_sent = 0;
 8000926:	f04f 0200 	mov.w	r2, #0
 800092a:	f04f 0300 	mov.w	r3, #0
 800092e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	static uint8_t update_cc = 0;

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = { 0 };
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x0; // 11 bit Identifier
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.DLC = 8; // 8 bytes being transmitted
 800094a:	2308      	movs	r3, #8
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxData[0] = 1;
 800094e:	2301      	movs	r3, #1
 8000950:	743b      	strb	r3, [r7, #16]
	uint8_t adc_data[2];



  	  // Transmit over CAN
  	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	f107 0210 	add.w	r2, r7, #16
 800095a:	f107 0118 	add.w	r1, r7, #24
 800095e:	4848      	ldr	r0, [pc, #288]	@ (8000a80 <_Z11StartTask02Pv+0x16c>)
 8000960:	f004 fa2e 	bl	8004dc0 <HAL_CAN_AddTxMessage>


  for (;;)
  {

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000964:	220a      	movs	r2, #10
 8000966:	4947      	ldr	r1, [pc, #284]	@ (8000a84 <_Z11StartTask02Pv+0x170>)
 8000968:	4847      	ldr	r0, [pc, #284]	@ (8000a88 <_Z11StartTask02Pv+0x174>)
 800096a:	f002 ffbf 	bl	80038ec <HAL_ADC_Start_DMA>
	// Start ADC with DMA
	while (!(dma_flag));
 800096e:	bf00      	nop
 8000970:	4b46      	ldr	r3, [pc, #280]	@ (8000a8c <_Z11StartTask02Pv+0x178>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b00      	cmp	r3, #0
 8000978:	bf0c      	ite	eq
 800097a:	2301      	moveq	r3, #1
 800097c:	2300      	movne	r3, #0
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1f5      	bne.n	8000970 <_Z11StartTask02Pv+0x5c>

	// Stop ADC with DMA
	HAL_ADC_Stop_DMA(&hadc1);
 8000984:	4840      	ldr	r0, [pc, #256]	@ (8000a88 <_Z11StartTask02Pv+0x174>)
 8000986:	f003 f86d 	bl	8003a64 <HAL_ADC_Stop_DMA>
	dma_flag = 0;
 800098a:	4b40      	ldr	r3, [pc, #256]	@ (8000a8c <_Z11StartTask02Pv+0x178>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
	adc_var_avg = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	// Copy ADC buffer and compute average
	for (int i = 0; i < ADC_BUF_LEN; i++)
 8000996:	2300      	movs	r3, #0
 8000998:	637b      	str	r3, [r7, #52]	@ 0x34
 800099a:	e00b      	b.n	80009b4 <_Z11StartTask02Pv+0xa0>
	{
		adc_var_avg += adc_buf[i];
 800099c:	4a39      	ldr	r2, [pc, #228]	@ (8000a84 <_Z11StartTask02Pv+0x170>)
 800099e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009a0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009a8:	4413      	add	r3, r2
 80009aa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	for (int i = 0; i < ADC_BUF_LEN; i++)
 80009ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009b0:	3301      	adds	r3, #1
 80009b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80009b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009b6:	2b09      	cmp	r3, #9
 80009b8:	ddf0      	ble.n	800099c <_Z11StartTask02Pv+0x88>
	}
	adc_var_avg /= ADC_BUF_LEN;
 80009ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009be:	4a34      	ldr	r2, [pc, #208]	@ (8000a90 <_Z11StartTask02Pv+0x17c>)
 80009c0:	fba2 2303 	umull	r2, r3, r2, r3
 80009c4:	08db      	lsrs	r3, r3, #3
 80009c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46


	adc_data[0] = adc_var_avg & 0xFF;
 80009ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	723b      	strb	r3, [r7, #8]
	adc_data[1] = (adc_var_avg >> 8) & 0x0F;
 80009d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009d6:	0a1b      	lsrs	r3, r3, #8
 80009d8:	b29b      	uxth	r3, r3
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	f003 030f 	and.w	r3, r3, #15
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	727b      	strb	r3, [r7, #9]

	if (cc_enable)
 80009e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a94 <_Z11StartTask02Pv+0x180>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d00b      	beq.n	8000a04 <_Z11StartTask02Pv+0xf0>
	{
		if (update_cc)
 80009ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000a98 <_Z11StartTask02Pv+0x184>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d00e      	beq.n	8000a12 <_Z11StartTask02Pv+0xfe>
		{
			TxData[5] = adc_data[0];
 80009f4:	7a3b      	ldrb	r3, [r7, #8]
 80009f6:	757b      	strb	r3, [r7, #21]
			TxData[6] = adc_data[1];
 80009f8:	7a7b      	ldrb	r3, [r7, #9]
 80009fa:	75bb      	strb	r3, [r7, #22]
			update_cc = 0;
 80009fc:	4b26      	ldr	r3, [pc, #152]	@ (8000a98 <_Z11StartTask02Pv+0x184>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
 8000a02:	e006      	b.n	8000a12 <_Z11StartTask02Pv+0xfe>
		}
	}
	else
	{
		TxData[5] = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	757b      	strb	r3, [r7, #21]
		TxData[6] = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	75bb      	strb	r3, [r7, #22]
		update_cc = 1;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	@ (8000a98 <_Z11StartTask02Pv+0x184>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	701a      	strb	r2, [r3, #0]
	}


	TxData[0] = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	743b      	strb	r3, [r7, #16]
	TxData[1] = adc_data[0];
 8000a16:	7a3b      	ldrb	r3, [r7, #8]
 8000a18:	747b      	strb	r3, [r7, #17]
	TxData[2] = adc_data[1];
 8000a1a:	7a7b      	ldrb	r3, [r7, #9]
 8000a1c:	74bb      	strb	r3, [r7, #18]
	//Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
    // Wait until the ADC DMA completes
	  // Send CAN messages
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8000a1e:	bf00      	nop
 8000a20:	4817      	ldr	r0, [pc, #92]	@ (8000a80 <_Z11StartTask02Pv+0x16c>)
 8000a22:	f004 fa9d 	bl	8004f60 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	bf0c      	ite	eq
 8000a2c:	2301      	moveq	r3, #1
 8000a2e:	2300      	movne	r3, #0
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1f4      	bne.n	8000a20 <_Z11StartTask02Pv+0x10c>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	f107 0210 	add.w	r2, r7, #16
 8000a3e:	f107 0118 	add.w	r1, r7, #24
 8000a42:	480f      	ldr	r0, [pc, #60]	@ (8000a80 <_Z11StartTask02Pv+0x16c>)
 8000a44:	f004 f9bc 	bl	8004dc0 <HAL_CAN_AddTxMessage>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	  messages_sent++;
 8000a4e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000a52:	1c54      	adds	r4, r2, #1
 8000a54:	f143 0500 	adc.w	r5, r3, #0
 8000a58:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
	  if (status == HAL_ERROR)
 8000a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d102      	bne.n	8000a6a <_Z11StartTask02Pv+0x156>
	  {
		  Error_Handler();
 8000a64:	f000 ffcc 	bl	8001a00 <Error_Handler>
 8000a68:	e006      	b.n	8000a78 <_Z11StartTask02Pv+0x164>
	  }
	  else if (status == HAL_BUSY)
 8000a6a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d102      	bne.n	8000a78 <_Z11StartTask02Pv+0x164>
	  {
		  HAL_CAN_BUSY++;
 8000a72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a74:	3301      	adds	r3, #1
 8000a76:	643b      	str	r3, [r7, #64]	@ 0x40
	  }
    osDelay(20);
 8000a78:	2014      	movs	r0, #20
 8000a7a:	f009 f909 	bl	8009c90 <osDelay>
  }
 8000a7e:	e771      	b.n	8000964 <_Z11StartTask02Pv+0x50>
 8000a80:	200001e8 	.word	0x200001e8
 8000a84:	20000094 	.word	0x20000094
 8000a88:	20000138 	.word	0x20000138
 8000a8c:	200000a8 	.word	0x200000a8
 8000a90:	cccccccd 	.word	0xcccccccd
 8000a94:	200000a9 	.word	0x200000a9
 8000a98:	20000134 	.word	0x20000134

08000a9c <_Z11StartTask03Pv>:
  /* USER CODE END StartTask02 */
}

void StartTask03(void *argument)
{
 8000a9c:	b5b0      	push	{r4, r5, r7, lr}
 8000a9e:	b090      	sub	sp, #64	@ 0x40
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */

	int debounce_count = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int HAL_CAN_BUSY = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint64_t messages_sent = 0;
 8000aac:	f04f 0200 	mov.w	r2, #0
 8000ab0:	f04f 0300 	mov.w	r3, #0
 8000ab4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox = { 0 };
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = 0x7FF; // 11 bit Identifier !!Change!!
 8000ac8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000acc:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
	TxData[0] = 1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	733b      	strb	r3, [r7, #12]

	Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	4a2f      	ldr	r2, [pc, #188]	@ (8000b9c <_Z11StartTask03Pv+0x100>)
 8000ae0:	492f      	ldr	r1, [pc, #188]	@ (8000ba0 <_Z11StartTask03Pv+0x104>)
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fa18 	bl	8000f18 <_Z19Update_CAN_Message1PhS_S_>

	/* Infinite loop */
	for(;;)
	{
	  // Read TCAL Input and update flags
	  if (GPIO_Interrupt_Triggered)
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba4 <_Z11StartTask03Pv+0x108>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d022      	beq.n	8000b36 <_Z11StartTask03Pv+0x9a>
	  {
		  if (debounce_count++ <= 2) {continue;}
 8000af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	bfd4      	ite	le
 8000afa:	2301      	movle	r3, #1
 8000afc:	2300      	movgt	r3, #0
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d149      	bne.n	8000b98 <_Z11StartTask03Pv+0xfc>
		  if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK){ Error_Handler(); }
 8000b04:	4828      	ldr	r0, [pc, #160]	@ (8000ba8 <_Z11StartTask03Pv+0x10c>)
 8000b06:	f002 fa61 	bl	8002fcc <TCAL9538RSVR_HandleInterrupt>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	bf14      	ite	ne
 8000b10:	2301      	movne	r3, #1
 8000b12:	2300      	moveq	r3, #0
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <_Z11StartTask03Pv+0x82>
 8000b1a:	f000 ff71 	bl	8001a00 <Error_Handler>
		  //if (TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK){ Error_Handler(); }


		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4a1e      	ldr	r2, [pc, #120]	@ (8000b9c <_Z11StartTask03Pv+0x100>)
 8000b24:	491e      	ldr	r1, [pc, #120]	@ (8000ba0 <_Z11StartTask03Pv+0x104>)
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f9f6 	bl	8000f18 <_Z19Update_CAN_Message1PhS_S_>
		  GPIO_Interrupt_Triggered = 0;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <_Z11StartTask03Pv+0x108>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
		  debounce_count = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  }

	  // Send CAN messages
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8000b36:	bf00      	nop
 8000b38:	481c      	ldr	r0, [pc, #112]	@ (8000bac <_Z11StartTask03Pv+0x110>)
 8000b3a:	f004 fa11 	bl	8004f60 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	bf0c      	ite	eq
 8000b44:	2301      	moveq	r3, #1
 8000b46:	2300      	movne	r3, #0
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1f4      	bne.n	8000b38 <_Z11StartTask03Pv+0x9c>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	f107 020c 	add.w	r2, r7, #12
 8000b56:	f107 0114 	add.w	r1, r7, #20
 8000b5a:	4814      	ldr	r0, [pc, #80]	@ (8000bac <_Z11StartTask03Pv+0x110>)
 8000b5c:	f004 f930 	bl	8004dc0 <HAL_CAN_AddTxMessage>
 8000b60:	4603      	mov	r3, r0
 8000b62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  messages_sent++;
 8000b66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000b6a:	1c54      	adds	r4, r2, #1
 8000b6c:	f143 0500 	adc.w	r5, r3, #0
 8000b70:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	  if (status == HAL_ERROR)
 8000b74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d102      	bne.n	8000b82 <_Z11StartTask03Pv+0xe6>
	  {
		  Error_Handler();
 8000b7c:	f000 ff40 	bl	8001a00 <Error_Handler>
 8000b80:	e006      	b.n	8000b90 <_Z11StartTask03Pv+0xf4>
	  }
	  else if (status == HAL_BUSY)
 8000b82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d102      	bne.n	8000b90 <_Z11StartTask03Pv+0xf4>
	  {
		  HAL_CAN_BUSY++;
 8000b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
	  }
	  osDelay(50);
 8000b90:	2032      	movs	r0, #50	@ 0x32
 8000b92:	f009 f87d 	bl	8009c90 <osDelay>
 8000b96:	e7a7      	b.n	8000ae8 <_Z11StartTask03Pv+0x4c>
		  if (debounce_count++ <= 2) {continue;}
 8000b98:	bf00      	nop
  }
 8000b9a:	e7a5      	b.n	8000ae8 <_Z11StartTask03Pv+0x4c>
 8000b9c:	20000089 	.word	0x20000089
 8000ba0:	20000081 	.word	0x20000081
 8000ba4:	200000aa 	.word	0x200000aa
 8000ba8:	2000007c 	.word	0x2000007c
 8000bac:	200001e8 	.word	0x200001e8

08000bb0 <_Z11StartTask04Pv>:
  /* USER CODE END StartTask03 */
}


void StartTask04(void *argument)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */

  uint32_t lastBlinkTime = HAL_GetTick();
 8000bb8:	f002 fade 	bl	8003178 <HAL_GetTick>
 8000bbc:	6178      	str	r0, [r7, #20]
  const uint32_t blinkInterval = 500;
 8000bbe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000bc2:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  for(;;)
  {

    uint32_t currentTick = HAL_GetTick();
 8000bc4:	f002 fad8 	bl	8003178 <HAL_GetTick>
 8000bc8:	60f8      	str	r0, [r7, #12]

    if (currentTick - lastBlinkTime > blinkInterval)
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000bd4:	d908      	bls.n	8000be8 <_Z11StartTask04Pv+0x38>
    {
      	lastBlinkTime = currentTick;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	617b      	str	r3, [r7, #20]
		// enter critical section because we do read-modify-write operations in that function
		DASHBOARD_CRITICAL(
 8000bda:	f00b fb9d 	bl	800c318 <vPortEnterCritical>
 8000bde:	4812      	ldr	r0, [pc, #72]	@ (8000c28 <_Z11StartTask04Pv+0x78>)
 8000be0:	f7ff fd6c 	bl	80006bc <_ZN14DashboardState11blinkLightsEv>
 8000be4:	f00b fbca 	bl	800c37c <vPortExitCritical>
			dashboardState.blinkLights()
	  	);
	}

	if (dashboardState.updateRequested) {
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <_Z11StartTask04Pv+0x78>)
 8000bea:	7cdb      	ldrb	r3, [r3, #19]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d009      	beq.n	8000c04 <_Z11StartTask04Pv+0x54>
		// enter critical section because we do read-modify-write operations in that function
		DASHBOARD_CRITICAL(
 8000bf0:	f00b fb92 	bl	800c318 <vPortEnterCritical>
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <_Z11StartTask04Pv+0x78>)
 8000bf6:	f7ff fcb0 	bl	800055a <_ZN14DashboardState14updateFromUARTEv>
 8000bfa:	f00b fbbf 	bl	800c37c <vPortExitCritical>
			dashboardState.updateFromUART()
		);
		dashboardState.updateRequested = 0; // reset update requested flag
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <_Z11StartTask04Pv+0x78>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	74da      	strb	r2, [r3, #19]
	}

	if (dashboardState.writeToPort(U7) != HAL_OK) { Error_Handler(); } // write to output port
 8000c04:	4909      	ldr	r1, [pc, #36]	@ (8000c2c <_Z11StartTask04Pv+0x7c>)
 8000c06:	4808      	ldr	r0, [pc, #32]	@ (8000c28 <_Z11StartTask04Pv+0x78>)
 8000c08:	f7ff fd43 	bl	8000692 <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bf14      	ite	ne
 8000c12:	2301      	movne	r3, #1
 8000c14:	2300      	moveq	r3, #0
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <_Z11StartTask04Pv+0x70>
 8000c1c:	f000 fef0 	bl	8001a00 <Error_Handler>

    osDelay(50);
 8000c20:	2032      	movs	r0, #50	@ 0x32
 8000c22:	f009 f835 	bl	8009c90 <osDelay>
  }
 8000c26:	e7cd      	b.n	8000bc4 <_Z11StartTask04Pv+0x14>
 8000c28:	200000ac 	.word	0x200000ac
 8000c2c:	2000008c 	.word	0x2000008c

08000c30 <_Z11StartTask05Pv>:
  /* USER CODE END StartTask04 */
}


void StartTask05(void *argument)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask05 */
	uint16_t color;
	bool lightStateChanged = false;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	757b      	strb	r3, [r7, #21]
	bool bmsStatusChanged = false;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	753b      	strb	r3, [r7, #20]
	bool mcStatusChanged = false;
 8000c40:	2300      	movs	r3, #0
 8000c42:	74fb      	strb	r3, [r7, #19]
	bool arrayStatusChanged = false;
 8000c44:	2300      	movs	r3, #0
 8000c46:	74bb      	strb	r3, [r7, #18]
	bool hornStateChanged = false;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	747b      	strb	r3, [r7, #17]
	bool fanStateChanged = false;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	743b      	strb	r3, [r7, #16]
	bool headlightStateChanged = false;
 8000c50:	2300      	movs	r3, #0
 8000c52:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	DASHBOARD_CRITICAL( // critical region for all of these read-read operations that are not atomic
 8000c54:	f00b fb60 	bl	800c318 <vPortEnterCritical>
 8000c58:	4b98      	ldr	r3, [pc, #608]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000c5a:	785a      	ldrb	r2, [r3, #1]
 8000c5c:	4b97      	ldr	r3, [pc, #604]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	bf14      	ite	ne
 8000c64:	2301      	movne	r3, #1
 8000c66:	2300      	moveq	r3, #0
 8000c68:	757b      	strb	r3, [r7, #21]
 8000c6a:	4b94      	ldr	r3, [pc, #592]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000c6c:	7b9a      	ldrb	r2, [r3, #14]
 8000c6e:	4b93      	ldr	r3, [pc, #588]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000c70:	7adb      	ldrb	r3, [r3, #11]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	bf14      	ite	ne
 8000c76:	2301      	movne	r3, #1
 8000c78:	2300      	moveq	r3, #0
 8000c7a:	753b      	strb	r3, [r7, #20]
 8000c7c:	4b8f      	ldr	r3, [pc, #572]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000c7e:	7bda      	ldrb	r2, [r3, #15]
 8000c80:	4b8e      	ldr	r3, [pc, #568]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000c82:	7b1b      	ldrb	r3, [r3, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	bf14      	ite	ne
 8000c88:	2301      	movne	r3, #1
 8000c8a:	2300      	moveq	r3, #0
 8000c8c:	74fb      	strb	r3, [r7, #19]
 8000c8e:	4b8b      	ldr	r3, [pc, #556]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000c90:	7c1a      	ldrb	r2, [r3, #16]
 8000c92:	4b8a      	ldr	r3, [pc, #552]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000c94:	7b5b      	ldrb	r3, [r3, #13]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	bf14      	ite	ne
 8000c9a:	2301      	movne	r3, #1
 8000c9c:	2300      	moveq	r3, #0
 8000c9e:	74bb      	strb	r3, [r7, #18]
 8000ca0:	4b86      	ldr	r3, [pc, #536]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000ca2:	7a1a      	ldrb	r2, [r3, #8]
 8000ca4:	4b85      	ldr	r3, [pc, #532]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000ca6:	78db      	ldrb	r3, [r3, #3]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	bf14      	ite	ne
 8000cac:	2301      	movne	r3, #1
 8000cae:	2300      	moveq	r3, #0
 8000cb0:	747b      	strb	r3, [r7, #17]
 8000cb2:	4b82      	ldr	r3, [pc, #520]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000cb4:	7a5a      	ldrb	r2, [r3, #9]
 8000cb6:	4b81      	ldr	r3, [pc, #516]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000cb8:	791b      	ldrb	r3, [r3, #4]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	bf14      	ite	ne
 8000cbe:	2301      	movne	r3, #1
 8000cc0:	2300      	moveq	r3, #0
 8000cc2:	743b      	strb	r3, [r7, #16]
 8000cc4:	4b7d      	ldr	r3, [pc, #500]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000cc6:	7a9a      	ldrb	r2, [r3, #10]
 8000cc8:	4b7c      	ldr	r3, [pc, #496]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000cca:	795b      	ldrb	r3, [r3, #5]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	bf14      	ite	ne
 8000cd0:	2301      	movne	r3, #1
 8000cd2:	2300      	moveq	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]
 8000cd6:	4b79      	ldr	r3, [pc, #484]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000cd8:	781a      	ldrb	r2, [r3, #0]
 8000cda:	4b78      	ldr	r3, [pc, #480]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000cdc:	705a      	strb	r2, [r3, #1]
 8000cde:	4b77      	ldr	r3, [pc, #476]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000ce0:	7ada      	ldrb	r2, [r3, #11]
 8000ce2:	4b76      	ldr	r3, [pc, #472]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000ce4:	739a      	strb	r2, [r3, #14]
 8000ce6:	4b75      	ldr	r3, [pc, #468]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000ce8:	7b1a      	ldrb	r2, [r3, #12]
 8000cea:	4b74      	ldr	r3, [pc, #464]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000cec:	73da      	strb	r2, [r3, #15]
 8000cee:	4b73      	ldr	r3, [pc, #460]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000cf0:	7b5a      	ldrb	r2, [r3, #13]
 8000cf2:	4b72      	ldr	r3, [pc, #456]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000cf4:	741a      	strb	r2, [r3, #16]
 8000cf6:	4b71      	ldr	r3, [pc, #452]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000cf8:	78da      	ldrb	r2, [r3, #3]
 8000cfa:	4b70      	ldr	r3, [pc, #448]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000cfc:	721a      	strb	r2, [r3, #8]
 8000cfe:	4b6f      	ldr	r3, [pc, #444]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000d00:	791a      	ldrb	r2, [r3, #4]
 8000d02:	4b6e      	ldr	r3, [pc, #440]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000d04:	725a      	strb	r2, [r3, #9]
 8000d06:	4b6d      	ldr	r3, [pc, #436]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000d08:	795a      	ldrb	r2, [r3, #5]
 8000d0a:	4b6c      	ldr	r3, [pc, #432]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000d0c:	729a      	strb	r2, [r3, #10]
 8000d0e:	f00b fb35 	bl	800c37c <vPortExitCritical>
		dashboardState.oldHornState = dashboardState.hornState;
		dashboardState.oldFanState = dashboardState.fanState;
		dashboardState.oldHeadlightState = dashboardState.headlightState;
	); // end critical section

	if(lightStateChanged){
 8000d12:	7d7b      	ldrb	r3, [r7, #21]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d06e      	beq.n	8000df6 <_Z11StartTask05Pv+0x1c6>
		HAL_Delay(1);
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f002 fa39 	bl	8003190 <HAL_Delay>
		if(dashboardState.lightState == LIGHTS_LEFT){
 8000d1e:	4b67      	ldr	r3, [pc, #412]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d116      	bne.n	8000d54 <_Z11StartTask05Pv+0x124>
			color = RGB565_GREEN;
 8000d26:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000d2a:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(20, 20, 10, color);
 8000d2c:	8afb      	ldrh	r3, [r7, #22]
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	230a      	movs	r3, #10
 8000d32:	2214      	movs	r2, #20
 8000d34:	2114      	movs	r1, #20
 8000d36:	4862      	ldr	r0, [pc, #392]	@ (8000ec0 <_Z11StartTask05Pv+0x290>)
 8000d38:	f002 f81c 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_WHITE;
 8000d3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d40:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(300, 20, 10, color);
 8000d42:	8afb      	ldrh	r3, [r7, #22]
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	230a      	movs	r3, #10
 8000d48:	2214      	movs	r2, #20
 8000d4a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000d4e:	485c      	ldr	r0, [pc, #368]	@ (8000ec0 <_Z11StartTask05Pv+0x290>)
 8000d50:	f002 f810 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>
		}
		if(dashboardState.lightState == LIGHTS_RIGHT){
 8000d54:	4b59      	ldr	r3, [pc, #356]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d116      	bne.n	8000d8a <_Z11StartTask05Pv+0x15a>
			color = RGB565_WHITE;
 8000d5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d60:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(20, 20, 10, color);
 8000d62:	8afb      	ldrh	r3, [r7, #22]
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	230a      	movs	r3, #10
 8000d68:	2214      	movs	r2, #20
 8000d6a:	2114      	movs	r1, #20
 8000d6c:	4854      	ldr	r0, [pc, #336]	@ (8000ec0 <_Z11StartTask05Pv+0x290>)
 8000d6e:	f002 f801 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_GREEN;
 8000d72:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000d76:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(300, 20, 10, color);
 8000d78:	8afb      	ldrh	r3, [r7, #22]
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	230a      	movs	r3, #10
 8000d7e:	2214      	movs	r2, #20
 8000d80:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000d84:	484e      	ldr	r0, [pc, #312]	@ (8000ec0 <_Z11StartTask05Pv+0x290>)
 8000d86:	f001 fff5 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>
		}
		if(dashboardState.lightState == LIGHTS_HAZARD){
 8000d8a:	4b4c      	ldr	r3, [pc, #304]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d116      	bne.n	8000dc0 <_Z11StartTask05Pv+0x190>
			color = RGB565_GREEN;
 8000d92:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000d96:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(20, 20, 10, color);
 8000d98:	8afb      	ldrh	r3, [r7, #22]
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	230a      	movs	r3, #10
 8000d9e:	2214      	movs	r2, #20
 8000da0:	2114      	movs	r1, #20
 8000da2:	4847      	ldr	r0, [pc, #284]	@ (8000ec0 <_Z11StartTask05Pv+0x290>)
 8000da4:	f001 ffe6 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_GREEN;
 8000da8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000dac:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(300, 20, 10, color);
 8000dae:	8afb      	ldrh	r3, [r7, #22]
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	230a      	movs	r3, #10
 8000db4:	2214      	movs	r2, #20
 8000db6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000dba:	4841      	ldr	r0, [pc, #260]	@ (8000ec0 <_Z11StartTask05Pv+0x290>)
 8000dbc:	f001 ffda 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>
		}
		if(dashboardState.lightState == LIGHTS_NONE){
 8000dc0:	4b3e      	ldr	r3, [pc, #248]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d116      	bne.n	8000df6 <_Z11StartTask05Pv+0x1c6>

			color = RGB565_WHITE;
 8000dc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dcc:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(20, 20, 10, color);
 8000dce:	8afb      	ldrh	r3, [r7, #22]
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	230a      	movs	r3, #10
 8000dd4:	2214      	movs	r2, #20
 8000dd6:	2114      	movs	r1, #20
 8000dd8:	4839      	ldr	r0, [pc, #228]	@ (8000ec0 <_Z11StartTask05Pv+0x290>)
 8000dda:	f001 ffcb 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_WHITE;
 8000dde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000de2:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(300, 20, 10, color);
 8000de4:	8afb      	ldrh	r3, [r7, #22]
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	230a      	movs	r3, #10
 8000dea:	2214      	movs	r2, #20
 8000dec:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000df0:	4833      	ldr	r0, [pc, #204]	@ (8000ec0 <_Z11StartTask05Pv+0x290>)
 8000df2:	f001 ffbf 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>
		}
	}
	if(bmsStatusChanged){
 8000df6:	7d3b      	ldrb	r3, [r7, #20]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d012      	beq.n	8000e22 <_Z11StartTask05Pv+0x1f2>
		if (dashboardState.bmsStatus) color = RGB565_GREEN;
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000dfe:	7adb      	ldrb	r3, [r3, #11]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <_Z11StartTask05Pv+0x1dc>
 8000e04:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e08:	82fb      	strh	r3, [r7, #22]
 8000e0a:	e002      	b.n	8000e12 <_Z11StartTask05Pv+0x1e2>
		else color = RGB565_RED;
 8000e0c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000e10:	82fb      	strh	r3, [r7, #22]
		screen.FillCircle(70, 210, 10, color);
 8000e12:	8afb      	ldrh	r3, [r7, #22]
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	230a      	movs	r3, #10
 8000e18:	22d2      	movs	r2, #210	@ 0xd2
 8000e1a:	2146      	movs	r1, #70	@ 0x46
 8000e1c:	4828      	ldr	r0, [pc, #160]	@ (8000ec0 <_Z11StartTask05Pv+0x290>)
 8000e1e:	f001 ffa9 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>
	}
	if(mcStatusChanged){
 8000e22:	7cfb      	ldrb	r3, [r7, #19]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d012      	beq.n	8000e4e <_Z11StartTask05Pv+0x21e>
		if (dashboardState.mcStatus) color = RGB565_GREEN;
 8000e28:	4b24      	ldr	r3, [pc, #144]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000e2a:	7b1b      	ldrb	r3, [r3, #12]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <_Z11StartTask05Pv+0x208>
 8000e30:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e34:	82fb      	strh	r3, [r7, #22]
 8000e36:	e002      	b.n	8000e3e <_Z11StartTask05Pv+0x20e>
		else color = RGB565_RED;
 8000e38:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000e3c:	82fb      	strh	r3, [r7, #22]
		screen.FillCircle(150, 210, 10, color);
 8000e3e:	8afb      	ldrh	r3, [r7, #22]
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	230a      	movs	r3, #10
 8000e44:	22d2      	movs	r2, #210	@ 0xd2
 8000e46:	2196      	movs	r1, #150	@ 0x96
 8000e48:	481d      	ldr	r0, [pc, #116]	@ (8000ec0 <_Z11StartTask05Pv+0x290>)
 8000e4a:	f001 ff93 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>
	}
	if(arrayStatusChanged){
 8000e4e:	7cbb      	ldrb	r3, [r7, #18]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d012      	beq.n	8000e7a <_Z11StartTask05Pv+0x24a>
		if (dashboardState.arrayStatus) color = RGB565_GREEN;
 8000e54:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000e56:	7b5b      	ldrb	r3, [r3, #13]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <_Z11StartTask05Pv+0x234>
 8000e5c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e60:	82fb      	strh	r3, [r7, #22]
 8000e62:	e002      	b.n	8000e6a <_Z11StartTask05Pv+0x23a>
		else color = RGB565_RED;
 8000e64:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000e68:	82fb      	strh	r3, [r7, #22]
		screen.FillCircle(235, 210, 10, color);
 8000e6a:	8afb      	ldrh	r3, [r7, #22]
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	230a      	movs	r3, #10
 8000e70:	22d2      	movs	r2, #210	@ 0xd2
 8000e72:	21eb      	movs	r1, #235	@ 0xeb
 8000e74:	4812      	ldr	r0, [pc, #72]	@ (8000ec0 <_Z11StartTask05Pv+0x290>)
 8000e76:	f001 ff7d 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>
	}

	// temp debug stuff
	if (hornStateChanged) {
 8000e7a:	7c7b      	ldrb	r3, [r7, #17]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d012      	beq.n	8000ea6 <_Z11StartTask05Pv+0x276>
		if (dashboardState.hornState) color = RGB565_GREEN;
 8000e80:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000e82:	78db      	ldrb	r3, [r3, #3]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <_Z11StartTask05Pv+0x260>
 8000e88:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e8c:	82fb      	strh	r3, [r7, #22]
 8000e8e:	e002      	b.n	8000e96 <_Z11StartTask05Pv+0x266>
		else color = RGB565_RED;
 8000e90:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000e94:	82fb      	strh	r3, [r7, #22]
		screen.FillCircle(150, 120, 10, color);
 8000e96:	8afb      	ldrh	r3, [r7, #22]
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	230a      	movs	r3, #10
 8000e9c:	2278      	movs	r2, #120	@ 0x78
 8000e9e:	2196      	movs	r1, #150	@ 0x96
 8000ea0:	4807      	ldr	r0, [pc, #28]	@ (8000ec0 <_Z11StartTask05Pv+0x290>)
 8000ea2:	f001 ff67 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>
	}
	if (fanStateChanged) {
 8000ea6:	7c3b      	ldrb	r3, [r7, #16]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d016      	beq.n	8000eda <_Z11StartTask05Pv+0x2aa>
		if (dashboardState.fanState) color = RGB565_GREEN;
 8000eac:	4b03      	ldr	r3, [pc, #12]	@ (8000ebc <_Z11StartTask05Pv+0x28c>)
 8000eae:	791b      	ldrb	r3, [r3, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d007      	beq.n	8000ec4 <_Z11StartTask05Pv+0x294>
 8000eb4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000eb8:	82fb      	strh	r3, [r7, #22]
 8000eba:	e006      	b.n	8000eca <_Z11StartTask05Pv+0x29a>
 8000ebc:	200000ac 	.word	0x200000ac
 8000ec0:	200000c4 	.word	0x200000c4
		else color = RGB565_RED;
 8000ec4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ec8:	82fb      	strh	r3, [r7, #22]
		screen.FillCircle(235, 120, 10, color);
 8000eca:	8afb      	ldrh	r3, [r7, #22]
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	230a      	movs	r3, #10
 8000ed0:	2278      	movs	r2, #120	@ 0x78
 8000ed2:	21eb      	movs	r1, #235	@ 0xeb
 8000ed4:	480e      	ldr	r0, [pc, #56]	@ (8000f10 <_Z11StartTask05Pv+0x2e0>)
 8000ed6:	f001 ff4d 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>
	}
	if (headlightStateChanged) {
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d012      	beq.n	8000f06 <_Z11StartTask05Pv+0x2d6>
		if (dashboardState.headlightState) color = RGB565_GREEN;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <_Z11StartTask05Pv+0x2e4>)
 8000ee2:	795b      	ldrb	r3, [r3, #5]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <_Z11StartTask05Pv+0x2c0>
 8000ee8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000eec:	82fb      	strh	r3, [r7, #22]
 8000eee:	e002      	b.n	8000ef6 <_Z11StartTask05Pv+0x2c6>
		else color = RGB565_RED;
 8000ef0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ef4:	82fb      	strh	r3, [r7, #22]
		screen.FillCircle(70, 120, 10, color);
 8000ef6:	8afb      	ldrh	r3, [r7, #22]
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	230a      	movs	r3, #10
 8000efc:	2278      	movs	r2, #120	@ 0x78
 8000efe:	2146      	movs	r1, #70	@ 0x46
 8000f00:	4803      	ldr	r0, [pc, #12]	@ (8000f10 <_Z11StartTask05Pv+0x2e0>)
 8000f02:	f001 ff37 	bl	8002d74 <_ZN7ILI934110FillCircleEtttt>
	}

    osDelay(100);
 8000f06:	2064      	movs	r0, #100	@ 0x64
 8000f08:	f008 fec2 	bl	8009c90 <osDelay>
	DASHBOARD_CRITICAL( // critical region for all of these read-read operations that are not atomic
 8000f0c:	e6a2      	b.n	8000c54 <_Z11StartTask05Pv+0x24>
 8000f0e:	bf00      	nop
 8000f10:	200000c4 	.word	0x200000c4
 8000f14:	200000ac 	.word	0x200000ac

08000f18 <_Z19Update_CAN_Message1PhS_S_>:
  /* USER CODE END StartTask05 */
}


void Update_CAN_Message1(uint8_t flags[8], uint8_t* Input1, uint8_t* Input2)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]

	static uint8_t prev_input1 = 0;
	static uint8_t prev_input2 = 0;


	flags[3] = 0;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3303      	adds	r3, #3
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
	flags[4] = 0;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3304      	adds	r3, #4
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]


	// Detect rising edges for each flag
	uint8_t risingEdges_flag1 = (~prev_input1) & *Input1;
 8000f34:	4b90      	ldr	r3, [pc, #576]	@ (8001178 <_Z19Update_CAN_Message1PhS_S_+0x260>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	b25a      	sxtb	r2, r3
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	4013      	ands	r3, r2
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	75fb      	strb	r3, [r7, #23]
	uint8_t risingEdges_flag2 = (~prev_input2) & *Input2;
 8000f4a:	4b8c      	ldr	r3, [pc, #560]	@ (800117c <_Z19Update_CAN_Message1PhS_S_+0x264>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	b25a      	sxtb	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	75bb      	strb	r3, [r7, #22]


	flags[1] ^= CHECK_BIT(risingEdges_flag2, 4) << 0; // Main
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3301      	adds	r3, #1
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b25a      	sxtb	r2, r3
 8000f68:	7dbb      	ldrb	r3, [r7, #22]
 8000f6a:	f003 0310 	and.w	r3, r3, #16
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	bf14      	ite	ne
 8000f72:	2301      	movne	r3, #1
 8000f74:	2300      	moveq	r3, #0
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	4053      	eors	r3, r2
 8000f7c:	b25a      	sxtb	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3301      	adds	r3, #1
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 5) << 1; // Break
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b25a      	sxtb	r2, r3
 8000f8e:	7dbb      	ldrb	r3, [r7, #22]
 8000f90:	111b      	asrs	r3, r3, #4
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	4053      	eors	r3, r2
 8000f9c:	b25a      	sxtb	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 0) << 2; // Mode
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b25a      	sxtb	r2, r3
 8000fae:	7dbb      	ldrb	r3, [r7, #22]
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	4053      	eors	r3, r2
 8000fbc:	b25a      	sxtb	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 5) << 3; // MC
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	b25a      	sxtb	r2, r3
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
 8000fd0:	109b      	asrs	r3, r3, #2
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	4053      	eors	r3, r2
 8000fdc:	b25a      	sxtb	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 6) << 4; // Array
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b25a      	sxtb	r2, r3
 8000fee:	7dfb      	ldrb	r3, [r7, #23]
 8000ff0:	109b      	asrs	r3, r3, #2
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	f003 0310 	and.w	r3, r3, #16
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	4053      	eors	r3, r2
 8000ffc:	b25a      	sxtb	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3301      	adds	r3, #1
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 4) << 5; // Extra 1
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b25a      	sxtb	r2, r3
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	b25b      	sxtb	r3, r3
 8001014:	f003 0320 	and.w	r3, r3, #32
 8001018:	b25b      	sxtb	r3, r3
 800101a:	4053      	eors	r3, r2
 800101c:	b25a      	sxtb	r2, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3301      	adds	r3, #1
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	701a      	strb	r2, [r3, #0]
	if (dashboardState.hornState) // Horn
 8001026:	4b56      	ldr	r3, [pc, #344]	@ (8001180 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001028:	78db      	ldrb	r3, [r3, #3]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d009      	beq.n	8001042 <_Z19Update_CAN_Message1PhS_S_+0x12a>
		flags[1] |= (1 << 6);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3301      	adds	r3, #1
 8001032:	781a      	ldrb	r2, [r3, #0]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e008      	b.n	8001054 <_Z19Update_CAN_Message1PhS_S_+0x13c>
	else
		flags[1] &= ~(1 << 6);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3301      	adds	r3, #1
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3301      	adds	r3, #1
 800104c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	701a      	strb	r2, [r3, #0]
	if (dashboardState.pttState) // PTT (Push to Talk)
 8001054:	4b4a      	ldr	r3, [pc, #296]	@ (8001180 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001056:	799b      	ldrb	r3, [r3, #6]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d009      	beq.n	8001070 <_Z19Update_CAN_Message1PhS_S_+0x158>
		flags[1] |= (1 << 7);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3301      	adds	r3, #1
 8001060:	781a      	ldrb	r2, [r3, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3301      	adds	r3, #1
 8001066:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	e008      	b.n	8001082 <_Z19Update_CAN_Message1PhS_S_+0x16a>
	else
		flags[1] &= ~(1 << 7);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3301      	adds	r3, #1
 8001074:	781a      	ldrb	r2, [r3, #0]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3301      	adds	r3, #1
 800107a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	701a      	strb	r2, [r3, #0]
	/*
		NOTE:
			currently sending state of turn signal, turn signal on or off
			if wanting to send actual control of turn signal light, need to send outputPortState variable instead of lightState	
	*/
	if (dashboardState.lightState == LIGHTS_HAZARD) // Blinkers
 8001082:	4b3f      	ldr	r3, [pc, #252]	@ (8001180 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b03      	cmp	r3, #3
 8001088:	d109      	bne.n	800109e <_Z19Update_CAN_Message1PhS_S_+0x186>
		flags[2] |= (1 << 0);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3302      	adds	r3, #2
 800108e:	781a      	ldrb	r2, [r3, #0]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3302      	adds	r3, #2
 8001094:	f042 0201 	orr.w	r2, r2, #1
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	701a      	strb	r2, [r3, #0]
 800109c:	e008      	b.n	80010b0 <_Z19Update_CAN_Message1PhS_S_+0x198>
	else
		flags[2] &= ~(1 << 0);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3302      	adds	r3, #2
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	3302      	adds	r3, #2
 80010a8:	f022 0201 	bic.w	r2, r2, #1
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	701a      	strb	r2, [r3, #0]
	if (dashboardState.lightState == LIGHTS_LEFT) // Left Turn
 80010b0:	4b33      	ldr	r3, [pc, #204]	@ (8001180 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d109      	bne.n	80010cc <_Z19Update_CAN_Message1PhS_S_+0x1b4>
		flags[2] |= (1 << 1);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3302      	adds	r3, #2
 80010bc:	781a      	ldrb	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	3302      	adds	r3, #2
 80010c2:	f042 0202 	orr.w	r2, r2, #2
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	e008      	b.n	80010de <_Z19Update_CAN_Message1PhS_S_+0x1c6>
	else
		flags[2] &= ~(1 << 1);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3302      	adds	r3, #2
 80010d0:	781a      	ldrb	r2, [r3, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3302      	adds	r3, #2
 80010d6:	f022 0202 	bic.w	r2, r2, #2
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	701a      	strb	r2, [r3, #0]
	if (dashboardState.lightState == LIGHTS_RIGHT) // Right Turn
 80010de:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d109      	bne.n	80010fa <_Z19Update_CAN_Message1PhS_S_+0x1e2>
		flags[2] |= (1 << 2);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3302      	adds	r3, #2
 80010ea:	781a      	ldrb	r2, [r3, #0]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3302      	adds	r3, #2
 80010f0:	f042 0204 	orr.w	r2, r2, #4
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	e008      	b.n	800110c <_Z19Update_CAN_Message1PhS_S_+0x1f4>
	else
		flags[2] &= ~(1 << 2);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3302      	adds	r3, #2
 80010fe:	781a      	ldrb	r2, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	3302      	adds	r3, #2
 8001104:	f022 0204 	bic.w	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	701a      	strb	r2, [r3, #0]
	if (dashboardState.headlightState) // Headlights
 800110c:	4b1c      	ldr	r3, [pc, #112]	@ (8001180 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 800110e:	795b      	ldrb	r3, [r3, #5]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d009      	beq.n	8001128 <_Z19Update_CAN_Message1PhS_S_+0x210>
		flags[2] |= (1 << 3);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3302      	adds	r3, #2
 8001118:	781a      	ldrb	r2, [r3, #0]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3302      	adds	r3, #2
 800111e:	f042 0208 	orr.w	r2, r2, #8
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	e008      	b.n	800113a <_Z19Update_CAN_Message1PhS_S_+0x222>
	else
		flags[2] &= ~(1 << 3);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3302      	adds	r3, #2
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	3302      	adds	r3, #2
 8001132:	f022 0208 	bic.w	r2, r2, #8
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	701a      	strb	r2, [r3, #0]

	cc_enable ^= CHECK_BIT(risingEdges_flag2, 1);
 800113a:	7dbb      	ldrb	r3, [r7, #22]
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	bf14      	ite	ne
 8001144:	2301      	movne	r3, #1
 8001146:	2300      	moveq	r3, #0
 8001148:	b2db      	uxtb	r3, r3
 800114a:	b25a      	sxtb	r2, r3
 800114c:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b25b      	sxtb	r3, r3
 8001152:	4053      	eors	r3, r2
 8001154:	b25b      	sxtb	r3, r3
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 800115a:	701a      	strb	r2, [r3, #0]

	prev_input1 = *Input1;
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	781a      	ldrb	r2, [r3, #0]
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <_Z19Update_CAN_Message1PhS_S_+0x260>)
 8001162:	701a      	strb	r2, [r3, #0]
	prev_input2 = *Input2;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	781a      	ldrb	r2, [r3, #0]
 8001168:	4b04      	ldr	r3, [pc, #16]	@ (800117c <_Z19Update_CAN_Message1PhS_S_+0x264>)
 800116a:	701a      	strb	r2, [r3, #0]

}
 800116c:	bf00      	nop
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	20000135 	.word	0x20000135
 800117c:	20000136 	.word	0x20000136
 8001180:	200000ac 	.word	0x200000ac
 8001184:	200000a9 	.word	0x200000a9

08001188 <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef>:
	 *
	 * */
}

void Init_CAN_Filter1(CAN_HandleTypeDef &hcan1)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	@ 0x30
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001190:	2301      	movs	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	@ 0x28
  canfilterconfig.FilterBank = 18;
 8001194:	2312      	movs	r3, #18
 8001196:	61fb      	str	r3, [r7, #28]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800119c:	2301      	movs	r3, #1
 800119e:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011a0:	2301      	movs	r3, #1
 80011a2:	627b      	str	r3, [r7, #36]	@ 0x24
  canfilterconfig.SlaveStartFilterBank = 20;
 80011a4:	2314      	movs	r3, #20
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // CAN ID"S TO ACCEPT GO HERE, 4 ACCEPTED IN LIST MODE
  canfilterconfig.FilterIdHigh = 0xFFF << 5;
 80011a8:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef+0x44>)
 80011aa:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterIdLow = 0xFFF << 5;
 80011ac:	4b07      	ldr	r3, [pc, #28]	@ (80011cc <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef+0x44>)
 80011ae:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMaskIdHigh = 0xFFF << 5;
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef+0x44>)
 80011b2:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterMaskIdLow = 0xFFF << 5;
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef+0x44>)
 80011b6:	617b      	str	r3, [r7, #20]

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	4619      	mov	r1, r3
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f003 fcda 	bl	8004b78 <HAL_CAN_ConfigFilter>
}
 80011c4:	bf00      	nop
 80011c6:	3730      	adds	r7, #48	@ 0x30
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	0001ffe0 	.word	0x0001ffe0

080011d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001210 <HAL_UART_RxCpltCallback+0x40>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d10c      	bne.n	80011fc <HAL_UART_RxCpltCallback+0x2c>
  	{
		if (dashboardState.uart_rx != dashboardState.old_uart_rx)
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_UART_RxCpltCallback+0x44>)
 80011e4:	7c5a      	ldrb	r2, [r3, #17]
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <HAL_UART_RxCpltCallback+0x44>)
 80011e8:	7c9b      	ldrb	r3, [r3, #18]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d006      	beq.n	80011fc <HAL_UART_RxCpltCallback+0x2c>
		{
			dashboardState.updateRequested = 1; // set flag to update dashboard state
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <HAL_UART_RxCpltCallback+0x44>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	74da      	strb	r2, [r3, #19]
			dashboardState.old_uart_rx = dashboardState.uart_rx;
 80011f4:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <HAL_UART_RxCpltCallback+0x44>)
 80011f6:	7c5a      	ldrb	r2, [r3, #17]
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_UART_RxCpltCallback+0x44>)
 80011fa:	749a      	strb	r2, [r3, #18]
		}
	}
	HAL_UART_Receive_IT(&huart4, &dashboardState.uart_rx, 1);
 80011fc:	2201      	movs	r2, #1
 80011fe:	4906      	ldr	r1, [pc, #24]	@ (8001218 <HAL_UART_RxCpltCallback+0x48>)
 8001200:	4806      	ldr	r0, [pc, #24]	@ (800121c <HAL_UART_RxCpltCallback+0x4c>)
 8001202:	f007 f913 	bl	800842c <HAL_UART_Receive_IT>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40004c00 	.word	0x40004c00
 8001214:	200000ac 	.word	0x200000ac
 8001218:	200000bd 	.word	0x200000bd
 800121c:	2000028c 	.word	0x2000028c

08001220 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	dma_flag = 1;
 8001228:	4b04      	ldr	r3, [pc, #16]	@ (800123c <HAL_ADC_ConvCpltCallback+0x1c>)
 800122a:	2201      	movs	r2, #1
 800122c:	701a      	strb	r2, [r3, #0]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200000a8 	.word	0x200000a8

08001240 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Triggered = 1;
 800124a:	4b04      	ldr	r3, [pc, #16]	@ (800125c <HAL_GPIO_EXTI_Callback+0x1c>)
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	200000aa 	.word	0x200000aa

08001260 <_Z41__static_initialization_and_destruction_0ii>:
	// mitsuba motor sends velocity and other data?
	else if (RxHeader.StdId == CAN_ID_MITSUBA_MOTOR)
	{
		// Process message from Mitsuba Motor
	}
}
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d10a      	bne.n	8001286 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001276:	4293      	cmp	r3, r2
 8001278:	d105      	bne.n	8001286 <_Z41__static_initialization_and_destruction_0ii+0x26>
ILI9341 screen(320, 240);
 800127a:	22f0      	movs	r2, #240	@ 0xf0
 800127c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001280:	4808      	ldr	r0, [pc, #32]	@ (80012a4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001282:	f000 febd 	bl	8002000 <_ZN7ILI9341C1Ess>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d107      	bne.n	800129c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001292:	4293      	cmp	r3, r2
 8001294:	d102      	bne.n	800129c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001296:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001298:	f000 ff4c 	bl	8002134 <_ZN7ILI9341D1Ev>
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200000c4 	.word	0x200000c4

080012a8 <_GLOBAL__sub_I_U5>:
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80012b0:	2001      	movs	r0, #1
 80012b2:	f7ff ffd5 	bl	8001260 <_Z41__static_initialization_and_destruction_0ii>
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <_GLOBAL__sub_D_U5>:
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff ffcd 	bl	8001260 <_Z41__static_initialization_and_destruction_0ii>
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012cc:	f001 ff27 	bl	800311e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d0:	f000 f868 	bl	80013a4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d4:	f000 faf4 	bl	80018c0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80012d8:	f000 fad4 	bl	8001884 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 80012dc:	f000 f8b8 	bl	8001450 <_ZL12MX_ADC1_Initv>
  MX_I2C4_Init();
 80012e0:	f000 fa4e 	bl	8001780 <_ZL12MX_I2C4_Initv>
  MX_CAN1_Init();
 80012e4:	f000 f9d8 	bl	8001698 <_ZL12MX_CAN1_Initv>
  MX_CAN2_Init();
 80012e8:	f000 fa10 	bl	800170c <_ZL12MX_CAN2_Initv>
  MX_UART4_Init();
 80012ec:	f000 fa96 	bl	800181c <_ZL13MX_UART4_Initv>
  /* USER CODE BEGIN 2 */
  
  CPP_UserSetup();
 80012f0:	f7ff fa1e 	bl	8000730 <CPP_UserSetup>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012f4:	f008 fbf0 	bl	8009ad8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_Mutex */
  CAN_MutexHandle = osSemaphoreNew(1, 1, &CAN_Mutex_attributes);
 80012f8:	4a19      	ldr	r2, [pc, #100]	@ (8001360 <main+0x98>)
 80012fa:	2101      	movs	r1, #1
 80012fc:	2001      	movs	r0, #1
 80012fe:	f008 fce2 	bl	8009cc6 <osSemaphoreNew>
 8001302:	4603      	mov	r3, r0
 8001304:	4a17      	ldr	r2, [pc, #92]	@ (8001364 <main+0x9c>)
 8001306:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
 8001308:	4a17      	ldr	r2, [pc, #92]	@ (8001368 <main+0xa0>)
 800130a:	2100      	movs	r1, #0
 800130c:	4817      	ldr	r0, [pc, #92]	@ (800136c <main+0xa4>)
 800130e:	f008 fc2d 	bl	8009b6c <osThreadNew>
 8001312:	4603      	mov	r3, r0
 8001314:	4a16      	ldr	r2, [pc, #88]	@ (8001370 <main+0xa8>)
 8001316:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 8001318:	4a16      	ldr	r2, [pc, #88]	@ (8001374 <main+0xac>)
 800131a:	2100      	movs	r1, #0
 800131c:	4816      	ldr	r0, [pc, #88]	@ (8001378 <main+0xb0>)
 800131e:	f008 fc25 	bl	8009b6c <osThreadNew>
 8001322:	4603      	mov	r3, r0
 8001324:	4a15      	ldr	r2, [pc, #84]	@ (800137c <main+0xb4>)
 8001326:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 8001328:	4a15      	ldr	r2, [pc, #84]	@ (8001380 <main+0xb8>)
 800132a:	2100      	movs	r1, #0
 800132c:	4815      	ldr	r0, [pc, #84]	@ (8001384 <main+0xbc>)
 800132e:	f008 fc1d 	bl	8009b6c <osThreadNew>
 8001332:	4603      	mov	r3, r0
 8001334:	4a14      	ldr	r2, [pc, #80]	@ (8001388 <main+0xc0>)
 8001336:	6013      	str	r3, [r2, #0]

  /* creation of Outputs_Control */
  Outputs_ControlHandle = osThreadNew(StartTask04, NULL, &Outputs_Control_attributes);
 8001338:	4a14      	ldr	r2, [pc, #80]	@ (800138c <main+0xc4>)
 800133a:	2100      	movs	r1, #0
 800133c:	4814      	ldr	r0, [pc, #80]	@ (8001390 <main+0xc8>)
 800133e:	f008 fc15 	bl	8009b6c <osThreadNew>
 8001342:	4603      	mov	r3, r0
 8001344:	4a13      	ldr	r2, [pc, #76]	@ (8001394 <main+0xcc>)
 8001346:	6013      	str	r3, [r2, #0]


  ScreenControlHandle = osThreadNew(StartTask05, NULL, &ScreenControl_attributes);
 8001348:	4a13      	ldr	r2, [pc, #76]	@ (8001398 <main+0xd0>)
 800134a:	2100      	movs	r1, #0
 800134c:	4813      	ldr	r0, [pc, #76]	@ (800139c <main+0xd4>)
 800134e:	f008 fc0d 	bl	8009b6c <osThreadNew>
 8001352:	4603      	mov	r3, r0
 8001354:	4a12      	ldr	r2, [pc, #72]	@ (80013a0 <main+0xd8>)
 8001356:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001358:	f008 fbe2 	bl	8009b20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <main+0x94>
 8001360:	0800cc98 	.word	0x0800cc98
 8001364:	20000328 	.word	0x20000328
 8001368:	0800cbe4 	.word	0x0800cbe4
 800136c:	080008f5 	.word	0x080008f5
 8001370:	20000314 	.word	0x20000314
 8001374:	0800cc08 	.word	0x0800cc08
 8001378:	08000915 	.word	0x08000915
 800137c:	20000318 	.word	0x20000318
 8001380:	0800cc2c 	.word	0x0800cc2c
 8001384:	08000a9d 	.word	0x08000a9d
 8001388:	2000031c 	.word	0x2000031c
 800138c:	0800cc50 	.word	0x0800cc50
 8001390:	08000bb1 	.word	0x08000bb1
 8001394:	20000320 	.word	0x20000320
 8001398:	0800cc74 	.word	0x0800cc74
 800139c:	08000c31 	.word	0x08000c31
 80013a0:	20000324 	.word	0x20000324

080013a4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b096      	sub	sp, #88	@ 0x58
 80013a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	2244      	movs	r2, #68	@ 0x44
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00b fad8 	bl	800c968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b8:	463b      	mov	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013ca:	f005 f98b 	bl	80066e4 <HAL_PWREx_ControlVoltageScaling>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	bf14      	ite	ne
 80013d4:	2301      	movne	r3, #1
 80013d6:	2300      	moveq	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80013de:	f000 fb0f 	bl	8001a00 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013e2:	2310      	movs	r3, #16
 80013e4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013e6:	2301      	movs	r3, #1
 80013e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013ee:	2360      	movs	r3, #96	@ 0x60
 80013f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4618      	mov	r0, r3
 80013fc:	f005 f9c8 	bl	8006790 <HAL_RCC_OscConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	bf14      	ite	ne
 8001406:	2301      	movne	r3, #1
 8001408:	2300      	moveq	r3, #0
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001410:	f000 faf6 	bl	8001a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001414:	230f      	movs	r3, #15
 8001416:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f005 fdc9 	bl	8006fc4 <HAL_RCC_ClockConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	bf14      	ite	ne
 8001438:	2301      	movne	r3, #1
 800143a:	2300      	moveq	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001442:	f000 fadd 	bl	8001a00 <Error_Handler>
  }
}
 8001446:	bf00      	nop
 8001448:	3758      	adds	r7, #88	@ 0x58
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	@ 0x28
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001472:	4b86      	ldr	r3, [pc, #536]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 8001474:	4a86      	ldr	r2, [pc, #536]	@ (8001690 <_ZL12MX_ADC1_Initv+0x240>)
 8001476:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001478:	4b84      	ldr	r3, [pc, #528]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 800147a:	2200      	movs	r2, #0
 800147c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800147e:	4b83      	ldr	r3, [pc, #524]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001484:	4b81      	ldr	r3, [pc, #516]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800148a:	4b80      	ldr	r3, [pc, #512]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 800148c:	2201      	movs	r2, #1
 800148e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001490:	4b7e      	ldr	r3, [pc, #504]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 8001492:	2208      	movs	r2, #8
 8001494:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001496:	4b7d      	ldr	r3, [pc, #500]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 8001498:	2200      	movs	r2, #0
 800149a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800149c:	4b7b      	ldr	r3, [pc, #492]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 800149e:	2201      	movs	r2, #1
 80014a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 80014a2:	4b7a      	ldr	r3, [pc, #488]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 80014a4:	220a      	movs	r2, #10
 80014a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014a8:	4b78      	ldr	r3, [pc, #480]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b0:	4b76      	ldr	r3, [pc, #472]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014b6:	4b75      	ldr	r3, [pc, #468]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014bc:	4b73      	ldr	r3, [pc, #460]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014c4:	4b71      	ldr	r3, [pc, #452]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80014ca:	4b70      	ldr	r3, [pc, #448]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014d2:	486e      	ldr	r0, [pc, #440]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 80014d4:	f002 f8b6 	bl	8003644 <HAL_ADC_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	bf14      	ite	ne
 80014de:	2301      	movne	r3, #1
 80014e0:	2300      	moveq	r3, #0
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 80014e8:	f000 fa8a 	bl	8001a00 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	4865      	ldr	r0, [pc, #404]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 80014f8:	f003 f992 	bl	8004820 <HAL_ADCEx_MultiModeConfigChannel>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	bf14      	ite	ne
 8001502:	2301      	movne	r3, #1
 8001504:	2300      	moveq	r3, #0
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 800150c:	f000 fa78 	bl	8001a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001510:	4b60      	ldr	r3, [pc, #384]	@ (8001694 <_ZL12MX_ADC1_Initv+0x244>)
 8001512:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001514:	2306      	movs	r3, #6
 8001516:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800151c:	237f      	movs	r3, #127	@ 0x7f
 800151e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001520:	2304      	movs	r3, #4
 8001522:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	4619      	mov	r1, r3
 800152c:	4857      	ldr	r0, [pc, #348]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 800152e:	f002 fb0f 	bl	8003b50 <HAL_ADC_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	bf14      	ite	ne
 8001538:	2301      	movne	r3, #1
 800153a:	2300      	moveq	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 8001542:	f000 fa5d 	bl	8001a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001546:	230c      	movs	r3, #12
 8001548:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	484f      	ldr	r0, [pc, #316]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 8001550:	f002 fafe 	bl	8003b50 <HAL_ADC_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	bf14      	ite	ne
 800155a:	2301      	movne	r3, #1
 800155c:	2300      	moveq	r3, #0
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <_ZL12MX_ADC1_Initv+0x118>
  {
    Error_Handler();
 8001564:	f000 fa4c 	bl	8001a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001568:	2312      	movs	r3, #18
 800156a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4619      	mov	r1, r3
 8001570:	4846      	ldr	r0, [pc, #280]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 8001572:	f002 faed 	bl	8003b50 <HAL_ADC_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	bf14      	ite	ne
 800157c:	2301      	movne	r3, #1
 800157e:	2300      	moveq	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <_ZL12MX_ADC1_Initv+0x13a>
  {
    Error_Handler();
 8001586:	f000 fa3b 	bl	8001a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800158a:	2318      	movs	r3, #24
 800158c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	4619      	mov	r1, r3
 8001592:	483e      	ldr	r0, [pc, #248]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 8001594:	f002 fadc 	bl	8003b50 <HAL_ADC_ConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	bf14      	ite	ne
 800159e:	2301      	movne	r3, #1
 80015a0:	2300      	moveq	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <_ZL12MX_ADC1_Initv+0x15c>
  {
    Error_Handler();
 80015a8:	f000 fa2a 	bl	8001a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80015ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4835      	ldr	r0, [pc, #212]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 80015b8:	f002 faca 	bl	8003b50 <HAL_ADC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	bf14      	ite	ne
 80015c2:	2301      	movne	r3, #1
 80015c4:	2300      	moveq	r3, #0
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <_ZL12MX_ADC1_Initv+0x180>
  {
    Error_Handler();
 80015cc:	f000 fa18 	bl	8001a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80015d0:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80015d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	482c      	ldr	r0, [pc, #176]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 80015dc:	f002 fab8 	bl	8003b50 <HAL_ADC_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	bf14      	ite	ne
 80015e6:	2301      	movne	r3, #1
 80015e8:	2300      	moveq	r3, #0
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <_ZL12MX_ADC1_Initv+0x1a4>
  {
    Error_Handler();
 80015f0:	f000 fa06 	bl	8001a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80015f4:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80015f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4823      	ldr	r0, [pc, #140]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 8001600:	f002 faa6 	bl	8003b50 <HAL_ADC_ConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	bf14      	ite	ne
 800160a:	2301      	movne	r3, #1
 800160c:	2300      	moveq	r3, #0
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <_ZL12MX_ADC1_Initv+0x1c8>
  {
    Error_Handler();
 8001614:	f000 f9f4 	bl	8001a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001618:	f44f 7389 	mov.w	r3, #274	@ 0x112
 800161c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	481a      	ldr	r0, [pc, #104]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 8001624:	f002 fa94 	bl	8003b50 <HAL_ADC_ConfigChannel>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	bf14      	ite	ne
 800162e:	2301      	movne	r3, #1
 8001630:	2300      	moveq	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <_ZL12MX_ADC1_Initv+0x1ec>
  {
    Error_Handler();
 8001638:	f000 f9e2 	bl	8001a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800163c:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001640:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	4619      	mov	r1, r3
 8001646:	4811      	ldr	r0, [pc, #68]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 8001648:	f002 fa82 	bl	8003b50 <HAL_ADC_ConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	bf14      	ite	ne
 8001652:	2301      	movne	r3, #1
 8001654:	2300      	moveq	r3, #0
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <_ZL12MX_ADC1_Initv+0x210>
  {
    Error_Handler();
 800165c:	f000 f9d0 	bl	8001a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001660:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001664:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4619      	mov	r1, r3
 800166a:	4808      	ldr	r0, [pc, #32]	@ (800168c <_ZL12MX_ADC1_Initv+0x23c>)
 800166c:	f002 fa70 	bl	8003b50 <HAL_ADC_ConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	bf14      	ite	ne
 8001676:	2301      	movne	r3, #1
 8001678:	2300      	moveq	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <_ZL12MX_ADC1_Initv+0x234>
  {
    Error_Handler();
 8001680:	f000 f9be 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	3728      	adds	r7, #40	@ 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000138 	.word	0x20000138
 8001690:	50040000 	.word	0x50040000
 8001694:	04300002 	.word	0x04300002

08001698 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800169c:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <_ZL12MX_CAN1_Initv+0x6c>)
 800169e:	4a1a      	ldr	r2, [pc, #104]	@ (8001708 <_ZL12MX_CAN1_Initv+0x70>)
 80016a0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80016a2:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <_ZL12MX_CAN1_Initv+0x6c>)
 80016a4:	2202      	movs	r2, #2
 80016a6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80016a8:	4b16      	ldr	r3, [pc, #88]	@ (8001704 <_ZL12MX_CAN1_Initv+0x6c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <_ZL12MX_CAN1_Initv+0x6c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80016b4:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <_ZL12MX_CAN1_Initv+0x6c>)
 80016b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016ba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016bc:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <_ZL12MX_CAN1_Initv+0x6c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80016c2:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <_ZL12MX_CAN1_Initv+0x6c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80016c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <_ZL12MX_CAN1_Initv+0x6c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80016ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <_ZL12MX_CAN1_Initv+0x6c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80016d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <_ZL12MX_CAN1_Initv+0x6c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80016da:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <_ZL12MX_CAN1_Initv+0x6c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80016e0:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <_ZL12MX_CAN1_Initv+0x6c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80016e6:	4807      	ldr	r0, [pc, #28]	@ (8001704 <_ZL12MX_CAN1_Initv+0x6c>)
 80016e8:	f003 f94a 	bl	8004980 <HAL_CAN_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bf14      	ite	ne
 80016f2:	2301      	movne	r3, #1
 80016f4:	2300      	moveq	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 80016fc:	f000 f980 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200001e8 	.word	0x200001e8
 8001708:	40006400 	.word	0x40006400

0800170c <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001710:	4b19      	ldr	r3, [pc, #100]	@ (8001778 <_ZL12MX_CAN2_Initv+0x6c>)
 8001712:	4a1a      	ldr	r2, [pc, #104]	@ (800177c <_ZL12MX_CAN2_Initv+0x70>)
 8001714:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8001716:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <_ZL12MX_CAN2_Initv+0x6c>)
 8001718:	2202      	movs	r2, #2
 800171a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800171c:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <_ZL12MX_CAN2_Initv+0x6c>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001722:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <_ZL12MX_CAN2_Initv+0x6c>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001728:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <_ZL12MX_CAN2_Initv+0x6c>)
 800172a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800172e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001730:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <_ZL12MX_CAN2_Initv+0x6c>)
 8001732:	2200      	movs	r2, #0
 8001734:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001736:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <_ZL12MX_CAN2_Initv+0x6c>)
 8001738:	2200      	movs	r2, #0
 800173a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800173c:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <_ZL12MX_CAN2_Initv+0x6c>)
 800173e:	2200      	movs	r2, #0
 8001740:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001742:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <_ZL12MX_CAN2_Initv+0x6c>)
 8001744:	2200      	movs	r2, #0
 8001746:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001748:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <_ZL12MX_CAN2_Initv+0x6c>)
 800174a:	2200      	movs	r2, #0
 800174c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800174e:	4b0a      	ldr	r3, [pc, #40]	@ (8001778 <_ZL12MX_CAN2_Initv+0x6c>)
 8001750:	2200      	movs	r2, #0
 8001752:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001754:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <_ZL12MX_CAN2_Initv+0x6c>)
 8001756:	2200      	movs	r2, #0
 8001758:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800175a:	4807      	ldr	r0, [pc, #28]	@ (8001778 <_ZL12MX_CAN2_Initv+0x6c>)
 800175c:	f003 f910 	bl	8004980 <HAL_CAN_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	bf14      	ite	ne
 8001766:	2301      	movne	r3, #1
 8001768:	2300      	moveq	r3, #0
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <_ZL12MX_CAN2_Initv+0x68>
  {
    Error_Handler();
 8001770:	f000 f946 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000210 	.word	0x20000210
 800177c:	40006800 	.word	0x40006800

08001780 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001784:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <_ZL12MX_I2C4_Initv+0x90>)
 8001786:	4a23      	ldr	r2, [pc, #140]	@ (8001814 <_ZL12MX_I2C4_Initv+0x94>)
 8001788:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 800178a:	4b21      	ldr	r3, [pc, #132]	@ (8001810 <_ZL12MX_I2C4_Initv+0x90>)
 800178c:	4a22      	ldr	r2, [pc, #136]	@ (8001818 <_ZL12MX_I2C4_Initv+0x98>)
 800178e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001790:	4b1f      	ldr	r3, [pc, #124]	@ (8001810 <_ZL12MX_I2C4_Initv+0x90>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001796:	4b1e      	ldr	r3, [pc, #120]	@ (8001810 <_ZL12MX_I2C4_Initv+0x90>)
 8001798:	2201      	movs	r2, #1
 800179a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800179c:	4b1c      	ldr	r3, [pc, #112]	@ (8001810 <_ZL12MX_I2C4_Initv+0x90>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80017a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001810 <_ZL12MX_I2C4_Initv+0x90>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017a8:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <_ZL12MX_I2C4_Initv+0x90>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ae:	4b18      	ldr	r3, [pc, #96]	@ (8001810 <_ZL12MX_I2C4_Initv+0x90>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b4:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <_ZL12MX_I2C4_Initv+0x90>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80017ba:	4815      	ldr	r0, [pc, #84]	@ (8001810 <_ZL12MX_I2C4_Initv+0x90>)
 80017bc:	f004 f960 	bl	8005a80 <HAL_I2C_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	bf14      	ite	ne
 80017c6:	2301      	movne	r3, #1
 80017c8:	2300      	moveq	r3, #0
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 80017d0:	f000 f916 	bl	8001a00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017d4:	2100      	movs	r1, #0
 80017d6:	480e      	ldr	r0, [pc, #56]	@ (8001810 <_ZL12MX_I2C4_Initv+0x90>)
 80017d8:	f004 fede 	bl	8006598 <HAL_I2CEx_ConfigAnalogFilter>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 80017ec:	f000 f908 	bl	8001a00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80017f0:	2100      	movs	r1, #0
 80017f2:	4807      	ldr	r0, [pc, #28]	@ (8001810 <_ZL12MX_I2C4_Initv+0x90>)
 80017f4:	f004 ff1b 	bl	800662e <HAL_I2CEx_ConfigDigitalFilter>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 8001808:	f000 f8fa 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000238 	.word	0x20000238
 8001814:	40008400 	.word	0x40008400
 8001818:	00100d14 	.word	0x00100d14

0800181c <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001820:	4b16      	ldr	r3, [pc, #88]	@ (800187c <_ZL13MX_UART4_Initv+0x60>)
 8001822:	4a17      	ldr	r2, [pc, #92]	@ (8001880 <_ZL13MX_UART4_Initv+0x64>)
 8001824:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001826:	4b15      	ldr	r3, [pc, #84]	@ (800187c <_ZL13MX_UART4_Initv+0x60>)
 8001828:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800182c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800182e:	4b13      	ldr	r3, [pc, #76]	@ (800187c <_ZL13MX_UART4_Initv+0x60>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001834:	4b11      	ldr	r3, [pc, #68]	@ (800187c <_ZL13MX_UART4_Initv+0x60>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800183a:	4b10      	ldr	r3, [pc, #64]	@ (800187c <_ZL13MX_UART4_Initv+0x60>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001840:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <_ZL13MX_UART4_Initv+0x60>)
 8001842:	220c      	movs	r2, #12
 8001844:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001846:	4b0d      	ldr	r3, [pc, #52]	@ (800187c <_ZL13MX_UART4_Initv+0x60>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800184c:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <_ZL13MX_UART4_Initv+0x60>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001852:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <_ZL13MX_UART4_Initv+0x60>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <_ZL13MX_UART4_Initv+0x60>)
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800185e:	4807      	ldr	r0, [pc, #28]	@ (800187c <_ZL13MX_UART4_Initv+0x60>)
 8001860:	f006 fd96 	bl	8008390 <HAL_UART_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	bf14      	ite	ne
 800186a:	2301      	movne	r3, #1
 800186c:	2300      	moveq	r3, #0
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 8001874:	f000 f8c4 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2000028c 	.word	0x2000028c
 8001880:	40004c00 	.word	0x40004c00

08001884 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800188a:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <_ZL11MX_DMA_Initv+0x38>)
 800188c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800188e:	4a0b      	ldr	r2, [pc, #44]	@ (80018bc <_ZL11MX_DMA_Initv+0x38>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6493      	str	r3, [r2, #72]	@ 0x48
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <_ZL11MX_DMA_Initv+0x38>)
 8001898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2105      	movs	r1, #5
 80018a6:	200b      	movs	r0, #11
 80018a8:	f003 fc6e 	bl	8005188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018ac:	200b      	movs	r0, #11
 80018ae:	f003 fc87 	bl	80051c0 <HAL_NVIC_EnableIRQ>

}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000

080018c0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	4b3e      	ldr	r3, [pc, #248]	@ (80019d0 <_ZL12MX_GPIO_Initv+0x110>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018da:	4a3d      	ldr	r2, [pc, #244]	@ (80019d0 <_ZL12MX_GPIO_Initv+0x110>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e2:	4b3b      	ldr	r3, [pc, #236]	@ (80019d0 <_ZL12MX_GPIO_Initv+0x110>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	4b38      	ldr	r3, [pc, #224]	@ (80019d0 <_ZL12MX_GPIO_Initv+0x110>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f2:	4a37      	ldr	r2, [pc, #220]	@ (80019d0 <_ZL12MX_GPIO_Initv+0x110>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018fa:	4b35      	ldr	r3, [pc, #212]	@ (80019d0 <_ZL12MX_GPIO_Initv+0x110>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	4b32      	ldr	r3, [pc, #200]	@ (80019d0 <_ZL12MX_GPIO_Initv+0x110>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190a:	4a31      	ldr	r2, [pc, #196]	@ (80019d0 <_ZL12MX_GPIO_Initv+0x110>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001912:	4b2f      	ldr	r3, [pc, #188]	@ (80019d0 <_ZL12MX_GPIO_Initv+0x110>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800191e:	2200      	movs	r2, #0
 8001920:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001924:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001928:	f004 f860 	bl	80059ec <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |OK_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Backlight_PWM_GPIO_Port, Backlight_PWM_Pin, GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	2110      	movs	r1, #16
 8001930:	4828      	ldr	r0, [pc, #160]	@ (80019d4 <_ZL12MX_GPIO_Initv+0x114>)
 8001932:	f004 f85b 	bl	80059ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C_D_Pin|WR_Pin|RD_Pin|Parallel_CS_Pin
 8001936:	2200      	movs	r2, #0
 8001938:	f241 0117 	movw	r1, #4119	@ 0x1017
 800193c:	4826      	ldr	r0, [pc, #152]	@ (80019d8 <_ZL12MX_GPIO_Initv+0x118>)
 800193e:	f004 f855 	bl	80059ec <HAL_GPIO_WritePin>
                          |D_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Alert1_Pin */
  GPIO_InitStruct.Pin = Alert1_Pin;
 8001942:	2304      	movs	r3, #4
 8001944:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001946:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800194a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800194c:	2301      	movs	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alert1_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	4619      	mov	r1, r3
 8001956:	481f      	ldr	r0, [pc, #124]	@ (80019d4 <_ZL12MX_GPIO_Initv+0x114>)
 8001958:	f003 feb6 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin
                           OK_LED_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800195c:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8001960:	60fb      	str	r3, [r7, #12]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |OK_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	2301      	movs	r3, #1
 8001964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	4619      	mov	r1, r3
 8001974:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001978:	f003 fea6 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Backlight_PWM_Pin */
  GPIO_InitStruct.Pin = Backlight_PWM_Pin;
 800197c:	2310      	movs	r3, #16
 800197e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2301      	movs	r3, #1
 8001982:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Backlight_PWM_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	4619      	mov	r1, r3
 8001992:	4810      	ldr	r0, [pc, #64]	@ (80019d4 <_ZL12MX_GPIO_Initv+0x114>)
 8001994:	f003 fe98 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_D_Pin WR_Pin RD_Pin Parallel_CS_Pin
                           D_C_Pin */
  GPIO_InitStruct.Pin = C_D_Pin|WR_Pin|RD_Pin|Parallel_CS_Pin
 8001998:	f241 0317 	movw	r3, #4119	@ 0x1017
 800199c:	60fb      	str	r3, [r7, #12]
                          |D_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	4619      	mov	r1, r3
 80019b0:	4809      	ldr	r0, [pc, #36]	@ (80019d8 <_ZL12MX_GPIO_Initv+0x118>)
 80019b2:	f003 fe89 	bl	80056c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2105      	movs	r1, #5
 80019ba:	2008      	movs	r0, #8
 80019bc:	f003 fbe4 	bl	8005188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80019c0:	2008      	movs	r0, #8
 80019c2:	f003 fbfd 	bl	80051c0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019c6:	bf00      	nop
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	48000800 	.word	0x48000800
 80019d8:	48000400 	.word	0x48000400

080019dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a04      	ldr	r2, [pc, #16]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d101      	bne.n	80019f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ee:	f001 fbaf 	bl	8003150 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40000400 	.word	0x40000400

08001a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a04:	b672      	cpsid	i
}
 8001a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <Error_Handler+0x8>

08001a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <HAL_MspInit+0x4c>)
 8001a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a16:	4a10      	ldr	r2, [pc, #64]	@ (8001a58 <HAL_MspInit+0x4c>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <HAL_MspInit+0x4c>)
 8001a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a58 <HAL_MspInit+0x4c>)
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a58 <HAL_MspInit+0x4c>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a36:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <HAL_MspInit+0x4c>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	210f      	movs	r1, #15
 8001a46:	f06f 0001 	mvn.w	r0, #1
 8001a4a:	f003 fb9d 	bl	8005188 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000

08001a5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b0ac      	sub	sp, #176	@ 0xb0
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a74:	f107 0310 	add.w	r3, r7, #16
 8001a78:	228c      	movs	r2, #140	@ 0x8c
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f00a ff73 	bl	800c968 <memset>
  if(hadc->Instance==ADC1)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a35      	ldr	r2, [pc, #212]	@ (8001b5c <HAL_ADC_MspInit+0x100>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d163      	bne.n	8001b54 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a90:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001a92:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001a96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f005 fce6 	bl	8007470 <HAL_RCCEx_PeriphCLKConfig>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001aaa:	f7ff ffa9 	bl	8001a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001aae:	4b2c      	ldr	r3, [pc, #176]	@ (8001b60 <HAL_ADC_MspInit+0x104>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab2:	4a2b      	ldr	r2, [pc, #172]	@ (8001b60 <HAL_ADC_MspInit+0x104>)
 8001ab4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aba:	4b29      	ldr	r3, [pc, #164]	@ (8001b60 <HAL_ADC_MspInit+0x104>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac6:	4b26      	ldr	r3, [pc, #152]	@ (8001b60 <HAL_ADC_MspInit+0x104>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aca:	4a25      	ldr	r2, [pc, #148]	@ (8001b60 <HAL_ADC_MspInit+0x104>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad2:	4b23      	ldr	r3, [pc, #140]	@ (8001b60 <HAL_ADC_MspInit+0x104>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001af4:	4619      	mov	r1, r3
 8001af6:	481b      	ldr	r0, [pc, #108]	@ (8001b64 <HAL_ADC_MspInit+0x108>)
 8001af8:	f003 fde6 	bl	80056c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001afc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001afe:	4a1b      	ldr	r2, [pc, #108]	@ (8001b6c <HAL_ADC_MspInit+0x110>)
 8001b00:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001b02:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b08:	4b17      	ldr	r3, [pc, #92]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b0e:	4b16      	ldr	r3, [pc, #88]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b14:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001b16:	2280      	movs	r2, #128	@ 0x80
 8001b18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b1a:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001b1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b22:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001b24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001b30:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001b32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b38:	480b      	ldr	r0, [pc, #44]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001b3a:	f003 fb4f 	bl	80051dc <HAL_DMA_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 8001b44:	f7ff ff5c 	bl	8001a00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a07      	ldr	r2, [pc, #28]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001b4c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b4e:	4a06      	ldr	r2, [pc, #24]	@ (8001b68 <HAL_ADC_MspInit+0x10c>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b54:	bf00      	nop
 8001b56:	37b0      	adds	r7, #176	@ 0xb0
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	50040000 	.word	0x50040000
 8001b60:	40021000 	.word	0x40021000
 8001b64:	48000800 	.word	0x48000800
 8001b68:	200001a0 	.word	0x200001a0
 8001b6c:	40020008 	.word	0x40020008

08001b70 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08c      	sub	sp, #48	@ 0x30
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a4e      	ldr	r2, [pc, #312]	@ (8001cc8 <HAL_CAN_MspInit+0x158>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d143      	bne.n	8001c1a <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001b92:	4b4e      	ldr	r3, [pc, #312]	@ (8001ccc <HAL_CAN_MspInit+0x15c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3301      	adds	r3, #1
 8001b98:	4a4c      	ldr	r2, [pc, #304]	@ (8001ccc <HAL_CAN_MspInit+0x15c>)
 8001b9a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8001ccc <HAL_CAN_MspInit+0x15c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d10b      	bne.n	8001bbc <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001ba4:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd0 <HAL_CAN_MspInit+0x160>)
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba8:	4a49      	ldr	r2, [pc, #292]	@ (8001cd0 <HAL_CAN_MspInit+0x160>)
 8001baa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bae:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bb0:	4b47      	ldr	r3, [pc, #284]	@ (8001cd0 <HAL_CAN_MspInit+0x160>)
 8001bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbc:	4b44      	ldr	r3, [pc, #272]	@ (8001cd0 <HAL_CAN_MspInit+0x160>)
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc0:	4a43      	ldr	r2, [pc, #268]	@ (8001cd0 <HAL_CAN_MspInit+0x160>)
 8001bc2:	f043 0302 	orr.w	r3, r3, #2
 8001bc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc8:	4b41      	ldr	r3, [pc, #260]	@ (8001cd0 <HAL_CAN_MspInit+0x160>)
 8001bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bde:	2301      	movs	r3, #1
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001be6:	2309      	movs	r3, #9
 8001be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4838      	ldr	r0, [pc, #224]	@ (8001cd4 <HAL_CAN_MspInit+0x164>)
 8001bf2:	f003 fd69 	bl	80056c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c04:	2303      	movs	r3, #3
 8001c06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c08:	2309      	movs	r3, #9
 8001c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	4619      	mov	r1, r3
 8001c12:	4830      	ldr	r0, [pc, #192]	@ (8001cd4 <HAL_CAN_MspInit+0x164>)
 8001c14:	f003 fd58 	bl	80056c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001c18:	e051      	b.n	8001cbe <HAL_CAN_MspInit+0x14e>
  else if(hcan->Instance==CAN2)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a2e      	ldr	r2, [pc, #184]	@ (8001cd8 <HAL_CAN_MspInit+0x168>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d14c      	bne.n	8001cbe <HAL_CAN_MspInit+0x14e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001c24:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd0 <HAL_CAN_MspInit+0x160>)
 8001c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c28:	4a29      	ldr	r2, [pc, #164]	@ (8001cd0 <HAL_CAN_MspInit+0x160>)
 8001c2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c30:	4b27      	ldr	r3, [pc, #156]	@ (8001cd0 <HAL_CAN_MspInit+0x160>)
 8001c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c3c:	4b23      	ldr	r3, [pc, #140]	@ (8001ccc <HAL_CAN_MspInit+0x15c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	4a22      	ldr	r2, [pc, #136]	@ (8001ccc <HAL_CAN_MspInit+0x15c>)
 8001c44:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c46:	4b21      	ldr	r3, [pc, #132]	@ (8001ccc <HAL_CAN_MspInit+0x15c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d10b      	bne.n	8001c66 <HAL_CAN_MspInit+0xf6>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c4e:	4b20      	ldr	r3, [pc, #128]	@ (8001cd0 <HAL_CAN_MspInit+0x160>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c52:	4a1f      	ldr	r2, [pc, #124]	@ (8001cd0 <HAL_CAN_MspInit+0x160>)
 8001c54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c58:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd0 <HAL_CAN_MspInit+0x160>)
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd0 <HAL_CAN_MspInit+0x160>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6a:	4a19      	ldr	r2, [pc, #100]	@ (8001cd0 <HAL_CAN_MspInit+0x160>)
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c72:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <HAL_CAN_MspInit+0x160>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c7e:	2320      	movs	r3, #32
 8001c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c86:	2301      	movs	r3, #1
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	4619      	mov	r1, r3
 8001c98:	480e      	ldr	r0, [pc, #56]	@ (8001cd4 <HAL_CAN_MspInit+0x164>)
 8001c9a:	f003 fd15 	bl	80056c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c9e:	2340      	movs	r3, #64	@ 0x40
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8001cae:	2308      	movs	r3, #8
 8001cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4806      	ldr	r0, [pc, #24]	@ (8001cd4 <HAL_CAN_MspInit+0x164>)
 8001cba:	f003 fd05 	bl	80056c8 <HAL_GPIO_Init>
}
 8001cbe:	bf00      	nop
 8001cc0:	3730      	adds	r7, #48	@ 0x30
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40006400 	.word	0x40006400
 8001ccc:	2000032c 	.word	0x2000032c
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	48000400 	.word	0x48000400
 8001cd8:	40006800 	.word	0x40006800

08001cdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b0ac      	sub	sp, #176	@ 0xb0
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	228c      	movs	r2, #140	@ 0x8c
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f00a fe33 	bl	800c968 <memset>
  if(hi2c->Instance==I2C4)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a22      	ldr	r2, [pc, #136]	@ (8001d90 <HAL_I2C_MspInit+0xb4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d13c      	bne.n	8001d86 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001d0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d10:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001d12:	2300      	movs	r3, #0
 8001d14:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d16:	f107 0310 	add.w	r3, r7, #16
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f005 fba8 	bl	8007470 <HAL_RCCEx_PeriphCLKConfig>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d26:	f7ff fe6b 	bl	8001a00 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <HAL_I2C_MspInit+0xb8>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2e:	4a19      	ldr	r2, [pc, #100]	@ (8001d94 <HAL_I2C_MspInit+0xb8>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d36:	4b17      	ldr	r3, [pc, #92]	@ (8001d94 <HAL_I2C_MspInit+0xb8>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d42:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4a:	2312      	movs	r3, #18
 8001d4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d62:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d66:	4619      	mov	r1, r3
 8001d68:	480b      	ldr	r0, [pc, #44]	@ (8001d98 <HAL_I2C_MspInit+0xbc>)
 8001d6a:	f003 fcad 	bl	80056c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001d6e:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <HAL_I2C_MspInit+0xb8>)
 8001d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d72:	4a08      	ldr	r2, [pc, #32]	@ (8001d94 <HAL_I2C_MspInit+0xb8>)
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001d7a:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <HAL_I2C_MspInit+0xb8>)
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8001d86:	bf00      	nop
 8001d88:	37b0      	adds	r7, #176	@ 0xb0
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40008400 	.word	0x40008400
 8001d94:	40021000 	.word	0x40021000
 8001d98:	48000400 	.word	0x48000400

08001d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b0ac      	sub	sp, #176	@ 0xb0
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	228c      	movs	r2, #140	@ 0x8c
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f00a fdd3 	bl	800c968 <memset>
  if(huart->Instance==UART4)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a25      	ldr	r2, [pc, #148]	@ (8001e5c <HAL_UART_MspInit+0xc0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d143      	bne.n	8001e54 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001dcc:	2308      	movs	r3, #8
 8001dce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f005 fb49 	bl	8007470 <HAL_RCCEx_PeriphCLKConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001de4:	f7ff fe0c 	bl	8001a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001de8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e60 <HAL_UART_MspInit+0xc4>)
 8001dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dec:	4a1c      	ldr	r2, [pc, #112]	@ (8001e60 <HAL_UART_MspInit+0xc4>)
 8001dee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001df2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001df4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e60 <HAL_UART_MspInit+0xc4>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e00:	4b17      	ldr	r3, [pc, #92]	@ (8001e60 <HAL_UART_MspInit+0xc4>)
 8001e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e04:	4a16      	ldr	r2, [pc, #88]	@ (8001e60 <HAL_UART_MspInit+0xc4>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e0c:	4b14      	ldr	r3, [pc, #80]	@ (8001e60 <HAL_UART_MspInit+0xc4>)
 8001e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e18:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e32:	2308      	movs	r3, #8
 8001e34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e38:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4809      	ldr	r0, [pc, #36]	@ (8001e64 <HAL_UART_MspInit+0xc8>)
 8001e40:	f003 fc42 	bl	80056c8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2105      	movs	r1, #5
 8001e48:	2034      	movs	r0, #52	@ 0x34
 8001e4a:	f003 f99d 	bl	8005188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001e4e:	2034      	movs	r0, #52	@ 0x34
 8001e50:	f003 f9b6 	bl	80051c0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8001e54:	bf00      	nop
 8001e56:	37b0      	adds	r7, #176	@ 0xb0
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40004c00 	.word	0x40004c00
 8001e60:	40021000 	.word	0x40021000
 8001e64:	48000800 	.word	0x48000800

08001e68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08e      	sub	sp, #56	@ 0x38
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001e76:	4b34      	ldr	r3, [pc, #208]	@ (8001f48 <HAL_InitTick+0xe0>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7a:	4a33      	ldr	r2, [pc, #204]	@ (8001f48 <HAL_InitTick+0xe0>)
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e82:	4b31      	ldr	r3, [pc, #196]	@ (8001f48 <HAL_InitTick+0xe0>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e8e:	f107 0210 	add.w	r2, r7, #16
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f005 fa57 	bl	800734c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d103      	bne.n	8001eb0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ea8:	f005 fa24 	bl	80072f4 <HAL_RCC_GetPCLK1Freq>
 8001eac:	6378      	str	r0, [r7, #52]	@ 0x34
 8001eae:	e004      	b.n	8001eba <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001eb0:	f005 fa20 	bl	80072f4 <HAL_RCC_GetPCLK1Freq>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ebc:	4a23      	ldr	r2, [pc, #140]	@ (8001f4c <HAL_InitTick+0xe4>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	0c9b      	lsrs	r3, r3, #18
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001ec8:	4b21      	ldr	r3, [pc, #132]	@ (8001f50 <HAL_InitTick+0xe8>)
 8001eca:	4a22      	ldr	r2, [pc, #136]	@ (8001f54 <HAL_InitTick+0xec>)
 8001ecc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001ece:	4b20      	ldr	r3, [pc, #128]	@ (8001f50 <HAL_InitTick+0xe8>)
 8001ed0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ed4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001ed6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f50 <HAL_InitTick+0xe8>)
 8001ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eda:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001edc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f50 <HAL_InitTick+0xe8>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <HAL_InitTick+0xe8>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee8:	4b19      	ldr	r3, [pc, #100]	@ (8001f50 <HAL_InitTick+0xe8>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001eee:	4818      	ldr	r0, [pc, #96]	@ (8001f50 <HAL_InitTick+0xe8>)
 8001ef0:	f005 ff88 	bl	8007e04 <HAL_TIM_Base_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001efa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d11b      	bne.n	8001f3a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001f02:	4813      	ldr	r0, [pc, #76]	@ (8001f50 <HAL_InitTick+0xe8>)
 8001f04:	f005 ffe0 	bl	8007ec8 <HAL_TIM_Base_Start_IT>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f0e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d111      	bne.n	8001f3a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f16:	201d      	movs	r0, #29
 8001f18:	f003 f952 	bl	80051c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b0f      	cmp	r3, #15
 8001f20:	d808      	bhi.n	8001f34 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001f22:	2200      	movs	r2, #0
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	201d      	movs	r0, #29
 8001f28:	f003 f92e 	bl	8005188 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f58 <HAL_InitTick+0xf0>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e002      	b.n	8001f3a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f3a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3738      	adds	r7, #56	@ 0x38
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	431bde83 	.word	0x431bde83
 8001f50:	20000330 	.word	0x20000330
 8001f54:	40000400 	.word	0x40000400
 8001f58:	20000004 	.word	0x20000004

08001f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <NMI_Handler+0x4>

08001f64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <HardFault_Handler+0x4>

08001f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <MemManage_Handler+0x4>

08001f74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <BusFault_Handler+0x4>

08001f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <UsageFault_Handler+0x4>

08001f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alert1_Pin);
 8001f96:	2004      	movs	r0, #4
 8001f98:	f003 fd5a 	bl	8005a50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fa4:	4802      	ldr	r0, [pc, #8]	@ (8001fb0 <DMA1_Channel1_IRQHandler+0x10>)
 8001fa6:	f003 fab0 	bl	800550a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200001a0 	.word	0x200001a0

08001fb4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fb8:	4802      	ldr	r0, [pc, #8]	@ (8001fc4 <TIM3_IRQHandler+0x10>)
 8001fba:	f005 fff5 	bl	8007fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000330 	.word	0x20000330

08001fc8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <UART4_IRQHandler+0x10>)
 8001fce:	f006 fa79 	bl	80084c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2000028c 	.word	0x2000028c

08001fdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <SystemInit+0x20>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe6:	4a05      	ldr	r2, [pc, #20]	@ (8001ffc <SystemInit+0x20>)
 8001fe8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <_ZN7ILI9341C1Ess>:
/**
  * @brief   Constructor for ILI9341 class
  * @param   w: width of LCD
  * @param   h: height of LCD
  */
ILI9341::ILI9341(int16_t w, int16_t h):WIDTH(w),HEIGHT(h)
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
 800200c:	4613      	mov	r3, r2
 800200e:	803b      	strh	r3, [r7, #0]
 8002010:	4a45      	ldr	r2, [pc, #276]	@ (8002128 <_ZN7ILI9341C1Ess+0x128>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	887a      	ldrh	r2, [r7, #2]
 800201a:	809a      	strh	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	883a      	ldrh	r2, [r7, #0]
 8002020:	80da      	strh	r2, [r3, #6]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	81da      	strh	r2, [r3, #14]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	821a      	strh	r2, [r3, #16]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002034:	621a      	str	r2, [r3, #32]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800203c:	625a      	str	r2, [r3, #36]	@ 0x24
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002044:	629a      	str	r2, [r3, #40]	@ 0x28
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800204c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002054:	631a      	str	r2, [r3, #48]	@ 0x30
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800205c:	635a      	str	r2, [r3, #52]	@ 0x34
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002064:	639a      	str	r2, [r3, #56]	@ 0x38
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800206c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2204      	movs	r2, #4
 8002072:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2c      	ldr	r2, [pc, #176]	@ (800212c <_ZN7ILI9341C1Ess+0x12c>)
 800207a:	645a      	str	r2, [r3, #68]	@ 0x44
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a29      	ldr	r2, [pc, #164]	@ (800212c <_ZN7ILI9341C1Ess+0x12c>)
 8002088:	64da      	str	r2, [r3, #76]	@ 0x4c
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a25      	ldr	r2, [pc, #148]	@ (800212c <_ZN7ILI9341C1Ess+0x12c>)
 8002096:	655a      	str	r2, [r3, #84]	@ 0x54
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800209e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a21      	ldr	r2, [pc, #132]	@ (800212c <_ZN7ILI9341C1Ess+0x12c>)
 80020a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002130 <_ZN7ILI9341C1Ess+0x130>)
 80020b4:	665a      	str	r2, [r3, #100]	@ 0x64
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2210      	movs	r2, #16
 80020ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002130 <_ZN7ILI9341C1Ess+0x130>)
 80020c2:	66da      	str	r2, [r3, #108]	@ 0x6c
{
  text_size_ = 1;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	819a      	strh	r2, [r3, #12]
  width_ = WIDTH;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	811a      	strh	r2, [r3, #8]
  height_ = HEIGHT;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	815a      	strh	r2, [r3, #10]
  rotation = 0;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	771a      	strb	r2, [r3, #28]
  cursor_y = cursor_x = 0;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	825a      	strh	r2, [r3, #18]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	829a      	strh	r2, [r3, #20]
  textsize_x = textsize_y = 1;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	76da      	strb	r2, [r3, #27]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	7eda      	ldrb	r2, [r3, #27]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	769a      	strb	r2, [r3, #26]
  textcolor = textbgcolor = 0xFFFF;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002108:	831a      	strh	r2, [r3, #24]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	8b1a      	ldrh	r2, [r3, #24]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	82da      	strh	r2, [r3, #22]
  wrap = true;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	775a      	strb	r2, [r3, #29]
}
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	0800d21c 	.word	0x0800d21c
 800212c:	48000400 	.word	0x48000400
 8002130:	48000800 	.word	0x48000800

08002134 <_ZN7ILI9341D1Ev>:

ILI9341::~ILI9341()
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	4a04      	ldr	r2, [pc, #16]	@ (8002150 <_ZN7ILI9341D1Ev+0x1c>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	601a      	str	r2, [r3, #0]
{
  // TODO Auto-generated destructor stub
}
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	0800d21c 	.word	0x0800d21c

08002154 <_ZN7ILI9341D0Ev>:
ILI9341::~ILI9341()
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
}
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff ffe9 	bl	8002134 <_ZN7ILI9341D1Ev>
 8002162:	2170      	movs	r1, #112	@ 0x70
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f00a fbe7 	bl	800c938 <_ZdlPvj>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_ZN7ILI93414InitEv>:

/**
  * @brief  Initialize the LCD.
  */
void ILI9341::Init()
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af02      	add	r7, sp, #8
 800217a:	6078      	str	r0, [r7, #4]
  // Write all control signals high
  HAL_GPIO_WritePin(Backlight_PWM_GPIO_Port_, Backlight_PWM_Pin_, GPIO_PIN_SET);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8002186:	2201      	movs	r2, #1
 8002188:	4619      	mov	r1, r3
 800218a:	f003 fc2f 	bl	80059ec <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002198:	2201      	movs	r2, #1
 800219a:	4619      	mov	r1, r3
 800219c:	f003 fc26 	bl	80059ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021aa:	2201      	movs	r2, #1
 80021ac:	4619      	mov	r1, r3
 80021ae:	f003 fc1d 	bl	80059ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80021bc:	2201      	movs	r2, #1
 80021be:	4619      	mov	r1, r3
 80021c0:	f003 fc14 	bl	80059ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_READ_GPIO_Port_, LCD_READ_Pin_, GPIO_PIN_SET);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80021ce:	2201      	movs	r2, #1
 80021d0:	4619      	mov	r1, r3
 80021d2:	f003 fc0b 	bl	80059ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80021e0:	2201      	movs	r2, #1
 80021e2:	4619      	mov	r1, r3
 80021e4:	f003 fc02 	bl	80059ec <HAL_GPIO_WritePin>

  // Hold reset pin
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_RESET);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80021f2:	2200      	movs	r2, #0
 80021f4:	4619      	mov	r1, r3
 80021f6:	f003 fbf9 	bl	80059ec <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80021fa:	200a      	movs	r0, #10
 80021fc:	f000 ffc8 	bl	8003190 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800220a:	2201      	movs	r2, #1
 800220c:	4619      	mov	r1, r3
 800220e:	f003 fbed 	bl	80059ec <HAL_GPIO_WritePin>

  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800221c:	2200      	movs	r2, #0
 800221e:	4619      	mov	r1, r3
 8002220:	f003 fbe4 	bl	80059ec <HAL_GPIO_WritePin>

  // Soft reset the LCD
  TransmitCmd(ILI9341_SWRESET);
 8002224:	2101      	movs	r1, #1
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f8c4 	bl	80023b4 <_ZN7ILI934111TransmitCmdEh>
  Transmit8bitData(0x00);
 800222c:	2100      	movs	r1, #0
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f8d8 	bl	80023e4 <_ZN7ILI934116Transmit8bitDataEh>
  HAL_Delay(50);
 8002234:	2032      	movs	r0, #50	@ 0x32
 8002236:	f000 ffab 	bl	8003190 <HAL_Delay>


  uint8_t cmd, x, numArgs;
  const uint8_t *addr = initcmd;
 800223a:	4b27      	ldr	r3, [pc, #156]	@ (80022d8 <_ZN7ILI93414InitEv+0x164>)
 800223c:	613b      	str	r3, [r7, #16]
  while((cmd = *(addr++)) > 0)
 800223e:	e027      	b.n	8002290 <_ZN7ILI93414InitEv+0x11c>
  {
    x = *(addr++);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	613a      	str	r2, [r7, #16]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	73bb      	strb	r3, [r7, #14]
    numArgs = x & 0x7F;
 800224a:	7bbb      	ldrb	r3, [r7, #14]
 800224c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002250:	75fb      	strb	r3, [r7, #23]
    TransmitCmd(cmd);
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	4619      	mov	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f8ac 	bl	80023b4 <_ZN7ILI934111TransmitCmdEh>
    while(numArgs--)
 800225c:	e007      	b.n	800226e <_ZN7ILI93414InitEv+0xfa>
    {
      Transmit8bitData(*(addr++));
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	613a      	str	r2, [r7, #16]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	4619      	mov	r1, r3
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f8bb 	bl	80023e4 <_ZN7ILI934116Transmit8bitDataEh>
    while(numArgs--)
 800226e:	7dfb      	ldrb	r3, [r7, #23]
 8002270:	1e5a      	subs	r2, r3, #1
 8002272:	75fa      	strb	r2, [r7, #23]
 8002274:	2b00      	cmp	r3, #0
 8002276:	bf14      	ite	ne
 8002278:	2301      	movne	r3, #1
 800227a:	2300      	moveq	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1ed      	bne.n	800225e <_ZN7ILI93414InitEv+0xea>
    }
    if(x & 0x80)
 8002282:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002286:	2b00      	cmp	r3, #0
 8002288:	da02      	bge.n	8002290 <_ZN7ILI93414InitEv+0x11c>
    {
      HAL_Delay(150);
 800228a:	2096      	movs	r0, #150	@ 0x96
 800228c:	f000 ff80 	bl	8003190 <HAL_Delay>
  while((cmd = *(addr++)) > 0)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	613a      	str	r2, [r7, #16]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	73fb      	strb	r3, [r7, #15]
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1ca      	bne.n	8002240 <_ZN7ILI93414InitEv+0xcc>
    }
  }

  SetWindow(0, 0, width_-1, height_-1);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	4613      	mov	r3, r2
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f8f0 	bl	80024b0 <_ZN7ILI93419SetWindowEtttt>
}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	0800d1f0 	.word	0x0800d1f0

080022dc <_ZN7ILI93415WriteEh>:

/**
  * @brief  Write data to LCD bus.
  */
inline void ILI9341::Write(uint8_t data)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	70fb      	strb	r3, [r7, #3]
  // Put data on Bus
#if UI_USE_HAL
  HAL_GPIO_WritePin(LCD_DATA0_GPIO_Port_, LCD_DATA0_Pin_, static_cast<GPIO_PinState>(data & 0x01U) );
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	2101      	movs	r1, #1
 80022f8:	f003 fb78 	bl	80059ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA1_GPIO_Port_, LCD_DATA1_Pin_, static_cast<GPIO_PinState>(data & 0x02U) );
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	b2db      	uxtb	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	2102      	movs	r1, #2
 800230c:	f003 fb6e 	bl	80059ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA2_GPIO_Port_, LCD_DATA2_Pin_, static_cast<GPIO_PinState>(data & 0x04U) );
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	b2db      	uxtb	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	2104      	movs	r1, #4
 8002320:	f003 fb64 	bl	80059ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA3_GPIO_Port_, LCD_DATA3_Pin_, static_cast<GPIO_PinState>(data & 0x08U) );
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	2108      	movs	r1, #8
 8002334:	f003 fb5a 	bl	80059ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA4_GPIO_Port_, LCD_DATA4_Pin_, static_cast<GPIO_PinState>(data & 0x10U) );
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	2110      	movs	r1, #16
 8002348:	f003 fb50 	bl	80059ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA5_GPIO_Port_, LCD_DATA5_Pin_, static_cast<GPIO_PinState>(data & 0x20U) );
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	2120      	movs	r1, #32
 800235c:	f003 fb46 	bl	80059ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA6_GPIO_Port_, LCD_DATA6_Pin_, static_cast<GPIO_PinState>(data & 0x40U) );
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800236a:	b2db      	uxtb	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	2140      	movs	r1, #64	@ 0x40
 8002370:	f003 fb3c 	bl	80059ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA7_GPIO_Port_, LCD_DATA7_Pin_, static_cast<GPIO_PinState>(data & 0x80U) );
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a18      	ldr	r0, [r3, #32]
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800237e:	b2db      	uxtb	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	2180      	movs	r1, #128	@ 0x80
 8002384:	f003 fb32 	bl	80059ec <HAL_GPIO_WritePin>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002392:	2200      	movs	r2, #0
 8002394:	4619      	mov	r1, r3
 8002396:	f003 fb29 	bl	80059ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80023a4:	2201      	movs	r2, #1
 80023a6:	4619      	mov	r1, r3
 80023a8:	f003 fb20 	bl	80059ec <HAL_GPIO_WritePin>
  // Pulse Write
  LCD_WRITE_GPIO_Port_->BSRR = LCD_WRITE_Pin_; // changed from brr to bsrr... ok?
  LCD_WRITE_GPIO_Port_->BSRR = (uint32_t)LCD_WRITE_Pin_ << 16U;
#endif

}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <_ZN7ILI934111TransmitCmdEh>:
/**
  * @brief  Sends 8-bit command to LCD.
  * @param  cmd: 8-bit command to be sent.
  */
void ILI9341::TransmitCmd(uint8_t cmd)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	70fb      	strb	r3, [r7, #3]
  // D/C -> LOW
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_RESET);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023ca:	2200      	movs	r2, #0
 80023cc:	4619      	mov	r1, r3
 80023ce:	f003 fb0d 	bl	80059ec <HAL_GPIO_WritePin>

  Write(cmd);
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	4619      	mov	r1, r3
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff ff80 	bl	80022dc <_ZN7ILI93415WriteEh>

  // TODO: Can this line be removed?
  // D/C -> HIGH
  // HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <_ZN7ILI934116Transmit8bitDataEh>:
/**
  * @brief  Sends 8-bit data to LCD.
  * @param  data: 8-bit data to be sent.
  */
void ILI9341::Transmit8bitData(uint8_t data)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	70fb      	strb	r3, [r7, #3]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023fa:	2201      	movs	r2, #1
 80023fc:	4619      	mov	r1, r3
 80023fe:	f003 faf5 	bl	80059ec <HAL_GPIO_WritePin>

  Write(data);
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	4619      	mov	r1, r3
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ff68 	bl	80022dc <_ZN7ILI93415WriteEh>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <_ZN7ILI934117Transmit16bitDataEt>:
/**
  * @brief  Sends 16-bit data to LCD.
  * @param  data: 16-bit data to be sent to LCD.
  */
void ILI9341::Transmit16bitData(uint16_t data)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	807b      	strh	r3, [r7, #2]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800242a:	2201      	movs	r2, #1
 800242c:	4619      	mov	r1, r3
 800242e:	f003 fadd 	bl	80059ec <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 8));
 8002432:	887b      	ldrh	r3, [r7, #2]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	b29b      	uxth	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	4619      	mov	r1, r3
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff ff4d 	bl	80022dc <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0));
 8002442:	887b      	ldrh	r3, [r7, #2]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	4619      	mov	r1, r3
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff ff47 	bl	80022dc <_ZN7ILI93415WriteEh>

}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <_ZN7ILI934117Transmit32bitDataEm>:
/**
  * @brief  Sends 32-bit data to LCD.
  * @param  data: 32-bit data to be sent to LCD.
  */
void ILI9341::Transmit32bitData(uint32_t data)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800246a:	2201      	movs	r2, #1
 800246c:	4619      	mov	r1, r3
 800246e:	f003 fabd 	bl	80059ec <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 24));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	0e1b      	lsrs	r3, r3, #24
 8002476:	b2db      	uxtb	r3, r3
 8002478:	4619      	mov	r1, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ff2e 	bl	80022dc <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 16));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	0c1b      	lsrs	r3, r3, #16
 8002484:	b2db      	uxtb	r3, r3
 8002486:	4619      	mov	r1, r3
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ff27 	bl	80022dc <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 8 ));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	b2db      	uxtb	r3, r3
 8002494:	4619      	mov	r1, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ff20 	bl	80022dc <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0 ));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	4619      	mov	r1, r3
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff ff1a 	bl	80022dc <_ZN7ILI93415WriteEh>

}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <_ZN7ILI93419SetWindowEtttt>:
  * @param  xe: x end coordinate. xe > xs.
  * @param  ye: y end coordinate. ye > ys.
  * @retval ILI9341_SUCCESS or ILI9341_ERROR.
  */
char ILI9341::SetWindow (uint16_t xs, uint16_t ys, uint16_t xe, uint16_t ye)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	4608      	mov	r0, r1
 80024ba:	4611      	mov	r1, r2
 80024bc:	461a      	mov	r2, r3
 80024be:	4603      	mov	r3, r0
 80024c0:	817b      	strh	r3, [r7, #10]
 80024c2:	460b      	mov	r3, r1
 80024c4:	813b      	strh	r3, [r7, #8]
 80024c6:	4613      	mov	r3, r2
 80024c8:	80fb      	strh	r3, [r7, #6]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80024d4:	2200      	movs	r2, #0
 80024d6:	4619      	mov	r1, r3
 80024d8:	f003 fa88 	bl	80059ec <HAL_GPIO_WritePin>

  // check if coordinates is out of range
  // TODO: Use >=, <= instead of >, < for width_ and height_?
  if ((xs > xe) || (xe > width_) ||
 80024dc:	897a      	ldrh	r2, [r7, #10]
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d80f      	bhi.n	8002504 <_ZN7ILI93419SetWindowEtttt+0x54>
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80024ec:	4293      	cmp	r3, r2
 80024ee:	dc09      	bgt.n	8002504 <_ZN7ILI93419SetWindowEtttt+0x54>
 80024f0:	893a      	ldrh	r2, [r7, #8]
 80024f2:	8b3b      	ldrh	r3, [r7, #24]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d805      	bhi.n	8002504 <_ZN7ILI93419SetWindowEtttt+0x54>
      (ys > ye) || (ye > height_))
 80024f8:	8b3b      	ldrh	r3, [r7, #24]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002500:	4293      	cmp	r3, r2
 8002502:	dd01      	ble.n	8002508 <_ZN7ILI93419SetWindowEtttt+0x58>
  {
    // out of range
    return ILI9341_ERROR;
 8002504:	2300      	movs	r3, #0
 8002506:	e021      	b.n	800254c <_ZN7ILI93419SetWindowEtttt+0x9c>
  }

  // set column
  TransmitCmd(ILI9341_CASET);
 8002508:	212a      	movs	r1, #42	@ 0x2a
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f7ff ff52 	bl	80023b4 <_ZN7ILI934111TransmitCmdEh>
  // set column -> set column
  Transmit32bitData(((uint32_t) xs << 16) | xe);
 8002510:	897b      	ldrh	r3, [r7, #10]
 8002512:	041a      	lsls	r2, r3, #16
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	4313      	orrs	r3, r2
 8002518:	4619      	mov	r1, r3
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f7ff ff9b 	bl	8002456 <_ZN7ILI934117Transmit32bitDataEm>
  // set page
  TransmitCmd(ILI9341_PASET);
 8002520:	212b      	movs	r1, #43	@ 0x2b
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f7ff ff46 	bl	80023b4 <_ZN7ILI934111TransmitCmdEh>
  // set page -> high byte first
  Transmit32bitData(((uint32_t) ys << 16) | ye);
 8002528:	893b      	ldrh	r3, [r7, #8]
 800252a:	041a      	lsls	r2, r3, #16
 800252c:	8b3b      	ldrh	r3, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	4619      	mov	r1, r3
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f7ff ff8f 	bl	8002456 <_ZN7ILI934117Transmit32bitDataEm>

  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002542:	2201      	movs	r2, #1
 8002544:	4619      	mov	r1, r3
 8002546:	f003 fa51 	bl	80059ec <HAL_GPIO_WritePin>
  // success
  return ILI9341_SUCCESS;
 800254a:	2301      	movs	r3, #1
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <_ZN7ILI93419DrawPixelEttt>:
  * @param  y: y coordinate.
  * @param  color: 16-bit color.
  * @retval ILI9341_SUCCESS or ILI9341_ERROR.
  */
char ILI9341::DrawPixel (uint16_t x, uint16_t y, uint16_t color)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af02      	add	r7, sp, #8
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	4608      	mov	r0, r1
 800255e:	4611      	mov	r1, r2
 8002560:	461a      	mov	r2, r3
 8002562:	4603      	mov	r3, r0
 8002564:	817b      	strh	r3, [r7, #10]
 8002566:	460b      	mov	r3, r1
 8002568:	813b      	strh	r3, [r7, #8]
 800256a:	4613      	mov	r3, r2
 800256c:	80fb      	strh	r3, [r7, #6]
  // check dimension
  if ((x > width_) || (y > height_)) {
 800256e:	897b      	ldrh	r3, [r7, #10]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002576:	4293      	cmp	r3, r2
 8002578:	dc05      	bgt.n	8002586 <_ZN7ILI93419DrawPixelEttt+0x32>
 800257a:	893b      	ldrh	r3, [r7, #8]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002582:	4293      	cmp	r3, r2
 8002584:	dd01      	ble.n	800258a <_ZN7ILI93419DrawPixelEttt+0x36>
    // error
    return ILI9341_ERROR;
 8002586:	2300      	movs	r3, #0
 8002588:	e00f      	b.n	80025aa <_ZN7ILI93419DrawPixelEttt+0x56>
  }
  // set window
  SetWindow(x, y, x, y);
 800258a:	8978      	ldrh	r0, [r7, #10]
 800258c:	893a      	ldrh	r2, [r7, #8]
 800258e:	8979      	ldrh	r1, [r7, #10]
 8002590:	893b      	ldrh	r3, [r7, #8]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	4603      	mov	r3, r0
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f7ff ff8a 	bl	80024b0 <_ZN7ILI93419SetWindowEtttt>
  // draw pixel by 565 mode
  SendColor565(color, 1);
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	2201      	movs	r2, #1
 80025a0:	4619      	mov	r1, r3
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f805 	bl	80025b2 <_ZN7ILI934112SendColor565Etm>
  // success
  return ILI9341_SUCCESS;
 80025a8:	2301      	movs	r3, #1
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <_ZN7ILI934112SendColor565Etm>:

void ILI9341::SendColor565(uint16_t color, uint32_t count)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	460b      	mov	r3, r1
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	817b      	strh	r3, [r7, #10]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80025ca:	2200      	movs	r2, #0
 80025cc:	4619      	mov	r1, r3
 80025ce:	f003 fa0d 	bl	80059ec <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 80025d2:	212c      	movs	r1, #44	@ 0x2c
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7ff feed 	bl	80023b4 <_ZN7ILI934111TransmitCmdEh>
  // counter
  while (count--) {
 80025da:	e004      	b.n	80025e6 <_ZN7ILI934112SendColor565Etm+0x34>
    // write color - first colors byte
    Transmit16bitData(color);
 80025dc:	897b      	ldrh	r3, [r7, #10]
 80025de:	4619      	mov	r1, r3
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f7ff ff17 	bl	8002414 <_ZN7ILI934117Transmit16bitDataEt>
  while (count--) {
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	1e5a      	subs	r2, r3, #1
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf14      	ite	ne
 80025f0:	2301      	movne	r3, #1
 80025f2:	2300      	moveq	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <_ZN7ILI934112SendColor565Etm+0x2a>
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002604:	2201      	movs	r2, #1
 8002606:	4619      	mov	r1, r3
 8002608:	f003 f9f0 	bl	80059ec <HAL_GPIO_WritePin>
}
 800260c:	bf00      	nop
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <_ZN7ILI93415FloodEtm>:

void ILI9341::Flood(uint16_t color, uint32_t count)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	460b      	mov	r3, r1
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	817b      	strh	r3, [r7, #10]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800262c:	2200      	movs	r2, #0
 800262e:	4619      	mov	r1, r3
 8002630:	f003 f9dc 	bl	80059ec <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 8002634:	212c      	movs	r1, #44	@ 0x2c
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff febc 	bl	80023b4 <_ZN7ILI934111TransmitCmdEh>
  // counter
  // Upper and lower are the same
  if( (color & 0xFF) == (color >> 8))
 800263c:	897b      	ldrh	r3, [r7, #10]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	897a      	ldrh	r2, [r7, #10]
 8002642:	0a12      	lsrs	r2, r2, #8
 8002644:	b292      	uxth	r2, r2
 8002646:	4293      	cmp	r3, r2
 8002648:	d13c      	bne.n	80026c4 <_ZN7ILI93415FloodEtm+0xb0>
  {
    count--;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3b01      	subs	r3, #1
 800264e:	607b      	str	r3, [r7, #4]
    Transmit16bitData(color);
 8002650:	897b      	ldrh	r3, [r7, #10]
 8002652:	4619      	mov	r1, r3
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f7ff fedd 	bl	8002414 <_ZN7ILI934117Transmit16bitDataEt>
    while(count--)
 800265a:	e023      	b.n	80026a4 <_ZN7ILI93415FloodEtm+0x90>
    {
#if UI_USE_HAL
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002666:	2200      	movs	r2, #0
 8002668:	4619      	mov	r1, r3
 800266a:	f003 f9bf 	bl	80059ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002678:	2201      	movs	r2, #1
 800267a:	4619      	mov	r1, r3
 800267c:	f003 f9b6 	bl	80059ec <HAL_GPIO_WritePin>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800268a:	2200      	movs	r2, #0
 800268c:	4619      	mov	r1, r3
 800268e:	f003 f9ad 	bl	80059ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800269c:	2201      	movs	r2, #1
 800269e:	4619      	mov	r1, r3
 80026a0:	f003 f9a4 	bl	80059ec <HAL_GPIO_WritePin>
    while(count--)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	1e5a      	subs	r2, r3, #1
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	bf14      	ite	ne
 80026ae:	2301      	movne	r3, #1
 80026b0:	2300      	moveq	r3, #0
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1d1      	bne.n	800265c <_ZN7ILI93415FloodEtm+0x48>
 80026b8:	e00e      	b.n	80026d8 <_ZN7ILI93415FloodEtm+0xc4>
  }
  else
  {
    while (count--)
    {
      Transmit16bitData(color);
 80026ba:	897b      	ldrh	r3, [r7, #10]
 80026bc:	4619      	mov	r1, r3
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f7ff fea8 	bl	8002414 <_ZN7ILI934117Transmit16bitDataEt>
    while (count--)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	1e5a      	subs	r2, r3, #1
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	bf14      	ite	ne
 80026ce:	2301      	movne	r3, #1
 80026d0:	2300      	moveq	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f0      	bne.n	80026ba <_ZN7ILI93415FloodEtm+0xa6>
    }
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80026e2:	2201      	movs	r2, #1
 80026e4:	4619      	mov	r1, r3
 80026e6:	f003 f981 	bl	80059ec <HAL_GPIO_WritePin>
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <_ZN7ILI934111ClearScreenEt>:

void ILI9341::ClearScreen(uint16_t color)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af02      	add	r7, sp, #8
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	460b      	mov	r3, r1
 80026fc:	807b      	strh	r3, [r7, #2]
  // set whole window
  SetWindow(0, 0, width_, height_);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002704:	b29a      	uxth	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800270c:	b29b      	uxth	r3, r3
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	2200      	movs	r2, #0
 8002714:	2100      	movs	r1, #0
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff feca 	bl	80024b0 <_ZN7ILI93419SetWindowEtttt>
  // draw individual pixels
  Flood(color, ILI9341_CACHE_MEM);
 800271c:	887b      	ldrh	r3, [r7, #2]
 800271e:	f44f 3296 	mov.w	r2, #76800	@ 0x12c00
 8002722:	4619      	mov	r1, r3
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ff75 	bl	8002614 <_ZN7ILI93415FloodEtm>
  // Update background color
  textbgcolor = color;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	887a      	ldrh	r2, [r7, #2]
 800272e:	831a      	strh	r2, [r3, #24]
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <_ZN7ILI934113DrawFastHLineEtttt>:

void ILI9341::DrawFastHLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	4608      	mov	r0, r1
 8002742:	4611      	mov	r1, r2
 8002744:	461a      	mov	r2, r3
 8002746:	4603      	mov	r3, r0
 8002748:	817b      	strh	r3, [r7, #10]
 800274a:	460b      	mov	r3, r1
 800274c:	813b      	strh	r3, [r7, #8]
 800274e:	4613      	mov	r3, r2
 8002750:	80fb      	strh	r3, [r7, #6]
  int16_t x2;

  // Initial off-screen clipping
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d016      	beq.n	8002786 <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
 8002758:	893b      	ldrh	r3, [r7, #8]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002760:	4293      	cmp	r3, r2
 8002762:	da10      	bge.n	8002786 <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
 8002764:	897b      	ldrh	r3, [r7, #10]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800276c:	4293      	cmp	r3, r2
 800276e:	da0a      	bge.n	8002786 <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
      ((x2 = (x + length - 1)) < 0))
 8002770:	897a      	ldrh	r2, [r7, #10]
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	4413      	add	r3, r2
 8002776:	b29b      	uxth	r3, r3
 8002778:	3b01      	subs	r3, #1
 800277a:	b29b      	uxth	r3, r3
 800277c:	82fb      	strh	r3, [r7, #22]
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 800277e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002782:	2b00      	cmp	r3, #0
 8002784:	da01      	bge.n	800278a <_ZN7ILI934113DrawFastHLineEtttt+0x52>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <_ZN7ILI934113DrawFastHLineEtttt+0x54>
 800278a:	2300      	movs	r3, #0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d123      	bne.n	80027d8 <_ZN7ILI934113DrawFastHLineEtttt+0xa0>

  if (x < 0) { // Clip left
    length += x;
    x = 0;
  }
  if (x2 >= width_) { // Clip right
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002796:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800279a:	429a      	cmp	r2, r3
 800279c:	db0c      	blt.n	80027b8 <_ZN7ILI934113DrawFastHLineEtttt+0x80>
    x2 = width_ - 1;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	82fb      	strh	r3, [r7, #22]
    length = x2 - x + 1;
 80027ac:	8afa      	ldrh	r2, [r7, #22]
 80027ae:	897b      	ldrh	r3, [r7, #10]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3301      	adds	r3, #1
 80027b6:	80fb      	strh	r3, [r7, #6]
  }

  SetWindow(x, y, x2, y);
 80027b8:	8af8      	ldrh	r0, [r7, #22]
 80027ba:	893a      	ldrh	r2, [r7, #8]
 80027bc:	8979      	ldrh	r1, [r7, #10]
 80027be:	893b      	ldrh	r3, [r7, #8]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	4603      	mov	r3, r0
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7ff fe73 	bl	80024b0 <_ZN7ILI93419SetWindowEtttt>
  Flood(color, length);
 80027ca:	88fa      	ldrh	r2, [r7, #6]
 80027cc:	8c3b      	ldrh	r3, [r7, #32]
 80027ce:	4619      	mov	r1, r3
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f7ff ff1f 	bl	8002614 <_ZN7ILI93415FloodEtm>
 80027d6:	e000      	b.n	80027da <_ZN7ILI934113DrawFastHLineEtttt+0xa2>
    return;
 80027d8:	bf00      	nop
}
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <_ZN7ILI934113DrawFastVLineEtttt>:

void ILI9341::DrawFastVLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	4608      	mov	r0, r1
 80027ea:	4611      	mov	r1, r2
 80027ec:	461a      	mov	r2, r3
 80027ee:	4603      	mov	r3, r0
 80027f0:	817b      	strh	r3, [r7, #10]
 80027f2:	460b      	mov	r3, r1
 80027f4:	813b      	strh	r3, [r7, #8]
 80027f6:	4613      	mov	r3, r2
 80027f8:	80fb      	strh	r3, [r7, #6]
  int16_t y2;

  // Initial off-screen clipping
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d016      	beq.n	800282e <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
 8002800:	897b      	ldrh	r3, [r7, #10]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002808:	4293      	cmp	r3, r2
 800280a:	da10      	bge.n	800282e <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
 800280c:	893b      	ldrh	r3, [r7, #8]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002814:	4293      	cmp	r3, r2
 8002816:	da0a      	bge.n	800282e <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
      ((y2 = (y + length - 1)) < 0))
 8002818:	893a      	ldrh	r2, [r7, #8]
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	4413      	add	r3, r2
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29b      	uxth	r3, r3
 8002824:	82fb      	strh	r3, [r7, #22]
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 8002826:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800282a:	2b00      	cmp	r3, #0
 800282c:	da01      	bge.n	8002832 <_ZN7ILI934113DrawFastVLineEtttt+0x52>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <_ZN7ILI934113DrawFastVLineEtttt+0x54>
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d123      	bne.n	8002880 <_ZN7ILI934113DrawFastVLineEtttt+0xa0>
    return;
  if (y < 0) { // Clip top
    length += y;
    y = 0;
  }
  if (y2 >= height_) { // Clip bottom
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800283e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002842:	429a      	cmp	r2, r3
 8002844:	db0c      	blt.n	8002860 <_ZN7ILI934113DrawFastVLineEtttt+0x80>
    y2 = height_ - 1;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29b      	uxth	r3, r3
 8002852:	82fb      	strh	r3, [r7, #22]
    length = y2 - y + 1;
 8002854:	8afa      	ldrh	r2, [r7, #22]
 8002856:	893b      	ldrh	r3, [r7, #8]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	b29b      	uxth	r3, r3
 800285c:	3301      	adds	r3, #1
 800285e:	80fb      	strh	r3, [r7, #6]
  }

  SetWindow(x, y, x, y2);
 8002860:	8afb      	ldrh	r3, [r7, #22]
 8002862:	8978      	ldrh	r0, [r7, #10]
 8002864:	893a      	ldrh	r2, [r7, #8]
 8002866:	8979      	ldrh	r1, [r7, #10]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	4603      	mov	r3, r0
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff fe1f 	bl	80024b0 <_ZN7ILI93419SetWindowEtttt>
  Flood(color, length);
 8002872:	88fa      	ldrh	r2, [r7, #6]
 8002874:	8c3b      	ldrh	r3, [r7, #32]
 8002876:	4619      	mov	r1, r3
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f7ff fecb 	bl	8002614 <_ZN7ILI93415FloodEtm>
 800287e:	e000      	b.n	8002882 <_ZN7ILI934113DrawFastVLineEtttt+0xa2>
    return;
 8002880:	bf00      	nop
}
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <_ZN7ILI934111SetRotationEh>:

void ILI9341::SetRotation(uint8_t x) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af02      	add	r7, sp, #8
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	70fb      	strb	r3, [r7, #3]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800289e:	2200      	movs	r2, #0
 80028a0:	4619      	mov	r1, r3
 80028a2:	f003 f8a3 	bl	80059ec <HAL_GPIO_WritePin>
  rotation = x % 4; // can't be higher than 3
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	771a      	strb	r2, [r3, #28]
  switch (rotation) {
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	7f1b      	ldrb	r3, [r3, #28]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d832      	bhi.n	8002920 <_ZN7ILI934111SetRotationEh+0x98>
 80028ba:	a201      	add	r2, pc, #4	@ (adr r2, 80028c0 <_ZN7ILI934111SetRotationEh+0x38>)
 80028bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c0:	080028d1 	.word	0x080028d1
 80028c4:	080028e5 	.word	0x080028e5
 80028c8:	080028f9 	.word	0x080028f9
 80028cc:	0800290d 	.word	0x0800290d
  case 0:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 80028d0:	2348      	movs	r3, #72	@ 0x48
 80028d2:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTWIDTH;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	22f0      	movs	r2, #240	@ 0xf0
 80028d8:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80028e0:	815a      	strh	r2, [r3, #10]
    break;
 80028e2:	e01d      	b.n	8002920 <_ZN7ILI934111SetRotationEh+0x98>
  case 1:
    x = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 80028e4:	2328      	movs	r3, #40	@ 0x28
 80028e6:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTHEIGHT;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80028ee:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	22f0      	movs	r2, #240	@ 0xf0
 80028f4:	815a      	strh	r2, [r3, #10]
    break;
 80028f6:	e013      	b.n	8002920 <_ZN7ILI934111SetRotationEh+0x98>
  case 2:
    x = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 80028f8:	2388      	movs	r3, #136	@ 0x88
 80028fa:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTWIDTH;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	22f0      	movs	r2, #240	@ 0xf0
 8002900:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002908:	815a      	strh	r2, [r3, #10]
    break;
 800290a:	e009      	b.n	8002920 <_ZN7ILI934111SetRotationEh+0x98>
  case 3:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 800290c:	23e8      	movs	r3, #232	@ 0xe8
 800290e:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTHEIGHT;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002916:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	22f0      	movs	r2, #240	@ 0xf0
 800291c:	815a      	strh	r2, [r3, #10]
    break;
 800291e:	bf00      	nop
  }
  TransmitCmd(ILI9341_MADCTL); // MADCTL
 8002920:	2136      	movs	r1, #54	@ 0x36
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff fd46 	bl	80023b4 <_ZN7ILI934111TransmitCmdEh>
  Transmit8bitData(x);
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	4619      	mov	r1, r3
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff fd59 	bl	80023e4 <_ZN7ILI934116Transmit8bitDataEh>
  // For 9341, init default full-screen address window:
  SetWindow(0, 0, width_ - 1, height_ - 1); // CS_IDLE happens here
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29b      	uxth	r3, r3
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	4613      	mov	r3, r2
 800294e:	2200      	movs	r2, #0
 8002950:	2100      	movs	r1, #0
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff fdac 	bl	80024b0 <_ZN7ILI93419SetWindowEtttt>
}
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <_ZN7ILI934111SetTextSizeEh>:

void ILI9341::SetTextSize(uint8_t size)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	70fb      	strb	r3, [r7, #3]
  text_size_ = size;
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	b21a      	sxth	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	819a      	strh	r2, [r3, #12]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <_ZN7ILI93418DrawCharEsshth>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint8_t size)
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b089      	sub	sp, #36	@ 0x24
 8002984:	af04      	add	r7, sp, #16
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	4608      	mov	r0, r1
 800298a:	4611      	mov	r1, r2
 800298c:	461a      	mov	r2, r3
 800298e:	4603      	mov	r3, r0
 8002990:	817b      	strh	r3, [r7, #10]
 8002992:	460b      	mov	r3, r1
 8002994:	813b      	strh	r3, [r7, #8]
 8002996:	4613      	mov	r3, r2
 8002998:	71fb      	strb	r3, [r7, #7]
  DrawChar(x, y, c, color, textbgcolor, size, size);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8b1b      	ldrh	r3, [r3, #24]
 800299e:	79fc      	ldrb	r4, [r7, #7]
 80029a0:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80029a4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80029a8:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80029ac:	9203      	str	r2, [sp, #12]
 80029ae:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80029b2:	9202      	str	r2, [sp, #8]
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	8c3b      	ldrh	r3, [r7, #32]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	4623      	mov	r3, r4
 80029bc:	4602      	mov	r2, r0
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f804 	bl	80029cc <_ZN7ILI93418DrawCharEsshtthh>
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd90      	pop	{r4, r7, pc}

080029cc <_ZN7ILI93418DrawCharEsshtthh>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint16_t bg, uint8_t size_x,
    uint8_t size_y)
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b089      	sub	sp, #36	@ 0x24
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	4608      	mov	r0, r1
 80029d6:	4611      	mov	r1, r2
 80029d8:	461a      	mov	r2, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	817b      	strh	r3, [r7, #10]
 80029de:	460b      	mov	r3, r1
 80029e0:	813b      	strh	r3, [r7, #8]
 80029e2:	4613      	mov	r3, r2
 80029e4:	71fb      	strb	r3, [r7, #7]
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 80029e6:	2300      	movs	r3, #0
 80029e8:	75fb      	strb	r3, [r7, #23]
 80029ea:	e0a8      	b.n	8002b3e <_ZN7ILI93418DrawCharEsshtthh+0x172>
      uint8_t line = font[c * 5 + i];
 80029ec:	79fa      	ldrb	r2, [r7, #7]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	441a      	add	r2, r3
 80029f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029f8:	4413      	add	r3, r2
 80029fa:	4a6e      	ldr	r2, [pc, #440]	@ (8002bb4 <_ZN7ILI93418DrawCharEsshtthh+0x1e8>)
 80029fc:	5cd3      	ldrb	r3, [r2, r3]
 80029fe:	75bb      	strb	r3, [r7, #22]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8002a00:	2300      	movs	r3, #0
 8002a02:	757b      	strb	r3, [r7, #21]
 8002a04:	e090      	b.n	8002b28 <_ZN7ILI93418DrawCharEsshtthh+0x15c>
        if (line & 1) {
 8002a06:	7dbb      	ldrb	r3, [r7, #22]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d03f      	beq.n	8002a90 <_ZN7ILI93418DrawCharEsshtthh+0xc4>
          if (size_x == 1 && size_y == 1)
 8002a10:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d114      	bne.n	8002a42 <_ZN7ILI93418DrawCharEsshtthh+0x76>
 8002a18:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d110      	bne.n	8002a42 <_ZN7ILI93418DrawCharEsshtthh+0x76>
            DrawPixel(x + i, y + j, color);
 8002a20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	897b      	ldrh	r3, [r7, #10]
 8002a28:	4413      	add	r3, r2
 8002a2a:	b299      	uxth	r1, r3
 8002a2c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	893b      	ldrh	r3, [r7, #8]
 8002a34:	4413      	add	r3, r2
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7ff fd8a 	bl	8002554 <_ZN7ILI93419DrawPixelEttt>
 8002a40:	e069      	b.n	8002b16 <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 8002a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	fb12 f303 	smulbb	r3, r2, r3
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	897b      	ldrh	r3, [r7, #10]
 8002a56:	4413      	add	r3, r2
 8002a58:	b299      	uxth	r1, r3
 8002a5a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	fb12 f303 	smulbb	r3, r2, r3
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	893b      	ldrh	r3, [r7, #8]
 8002a6e:	4413      	add	r3, r2
 8002a70:	b298      	uxth	r0, r3
 8002a72:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002a76:	b29c      	uxth	r4, r3
 8002a78:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002a80:	9201      	str	r2, [sp, #4]
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	4623      	mov	r3, r4
 8002a86:	4602      	mov	r2, r0
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f8fa 	bl	8002c82 <_ZN7ILI93418FillRectEttttt>
 8002a8e:	e042      	b.n	8002b16 <_ZN7ILI93418DrawCharEsshtthh+0x14a>
                          color);
        } else if (bg != color) {
 8002a90:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002a92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d03e      	beq.n	8002b16 <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          if (size_x == 1 && size_y == 1)
 8002a98:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d114      	bne.n	8002aca <_ZN7ILI93418DrawCharEsshtthh+0xfe>
 8002aa0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d110      	bne.n	8002aca <_ZN7ILI93418DrawCharEsshtthh+0xfe>
            DrawPixel(x + i, y + j, bg);
 8002aa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	897b      	ldrh	r3, [r7, #10]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	b299      	uxth	r1, r3
 8002ab4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	893b      	ldrh	r3, [r7, #8]
 8002abc:	4413      	add	r3, r2
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f7ff fd46 	bl	8002554 <_ZN7ILI93419DrawPixelEttt>
 8002ac8:	e025      	b.n	8002b16 <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8002aca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	fb12 f303 	smulbb	r3, r2, r3
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	897b      	ldrh	r3, [r7, #10]
 8002ade:	4413      	add	r3, r2
 8002ae0:	b299      	uxth	r1, r3
 8002ae2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	fb12 f303 	smulbb	r3, r2, r3
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	893b      	ldrh	r3, [r7, #8]
 8002af6:	4413      	add	r3, r2
 8002af8:	b298      	uxth	r0, r3
 8002afa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002afe:	b29c      	uxth	r4, r3
 8002b00:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002b08:	9201      	str	r2, [sp, #4]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4623      	mov	r3, r4
 8002b0e:	4602      	mov	r2, r0
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f8b6 	bl	8002c82 <_ZN7ILI93418FillRectEttttt>
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8002b16:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	757b      	strb	r3, [r7, #21]
 8002b22:	7dbb      	ldrb	r3, [r7, #22]
 8002b24:	085b      	lsrs	r3, r3, #1
 8002b26:	75bb      	strb	r3, [r7, #22]
 8002b28:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002b2c:	2b07      	cmp	r3, #7
 8002b2e:	f77f af6a 	ble.w	8002a06 <_ZN7ILI93418DrawCharEsshtthh+0x3a>
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8002b32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	75fb      	strb	r3, [r7, #23]
 8002b3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	f77f af52 	ble.w	80029ec <_ZN7ILI93418DrawCharEsshtthh+0x20>
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
 8002b48:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002b4a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d02d      	beq.n	8002bac <_ZN7ILI93418DrawCharEsshtthh+0x1e0>
      if (size_x == 1 && size_y == 1)
 8002b50:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d10e      	bne.n	8002b76 <_ZN7ILI93418DrawCharEsshtthh+0x1aa>
 8002b58:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d10a      	bne.n	8002b76 <_ZN7ILI93418DrawCharEsshtthh+0x1aa>
        DrawFastVLine(x + 5, y, 8, bg);
 8002b60:	897b      	ldrh	r3, [r7, #10]
 8002b62:	3305      	adds	r3, #5
 8002b64:	b299      	uxth	r1, r3
 8002b66:	893a      	ldrh	r2, [r7, #8]
 8002b68:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2308      	movs	r3, #8
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f7ff fe36 	bl	80027e0 <_ZN7ILI934113DrawFastVLineEtttt>
      else
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    }
}
 8002b74:	e01a      	b.n	8002bac <_ZN7ILI93418DrawCharEsshtthh+0x1e0>
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8002b76:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	0092      	lsls	r2, r2, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	897b      	ldrh	r3, [r7, #10]
 8002b86:	4413      	add	r3, r2
 8002b88:	b299      	uxth	r1, r3
 8002b8a:	8938      	ldrh	r0, [r7, #8]
 8002b8c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002b90:	b29c      	uxth	r4, r3
 8002b92:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002b9e:	9201      	str	r2, [sp, #4]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f86b 	bl	8002c82 <_ZN7ILI93418FillRectEttttt>
}
 8002bac:	bf00      	nop
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd90      	pop	{r4, r7, pc}
 8002bb4:	0800ccf0 	.word	0x0800ccf0

08002bb8 <_ZN7ILI93418DrawTextEttPKct>:

void ILI9341::DrawText(uint16_t x, uint16_t y, const char *str, uint16_t color)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	817b      	strh	r3, [r7, #10]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	813b      	strh	r3, [r7, #8]
  // NOTE: Characters are 6x8 (wxh)
    uint8_t TempChar;

    /* Set area back to span the entire LCD */
    SetWindow(0, 0, width_ - 1, height_ - 1);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	4613      	mov	r3, r2
 8002be6:	2200      	movs	r2, #0
 8002be8:	2100      	movs	r1, #0
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f7ff fc60 	bl	80024b0 <_ZN7ILI93419SetWindowEtttt>
    do
    {
        TempChar = *str++;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	75fb      	strb	r3, [r7, #23]
        DrawChar( x, y, TempChar, color, text_size_);
 8002bfa:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002bfe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	7df8      	ldrb	r0, [r7, #23]
 8002c0c:	9301      	str	r3, [sp, #4]
 8002c0e:	8c3b      	ldrh	r3, [r7, #32]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	4603      	mov	r3, r0
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f7ff feb3 	bl	8002980 <_ZN7ILI93418DrawCharEsshth>
        if( x < width_ - 1 - 8)
 8002c1a:	897a      	ldrh	r2, [r7, #10]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c22:	3b09      	subs	r3, #9
 8002c24:	429a      	cmp	r2, r3
 8002c26:	da0c      	bge.n	8002c42 <_ZN7ILI93418DrawTextEttPKct+0x8a>
        {
            x += (6 * text_size_);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	0052      	lsls	r2, r2, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	897b      	ldrh	r3, [r7, #10]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	817b      	strh	r3, [r7, #10]
 8002c40:	e016      	b.n	8002c70 <_ZN7ILI93418DrawTextEttPKct+0xb8>
        }
        else if ( y < height_ - 1 - 16)
 8002c42:	893a      	ldrh	r2, [r7, #8]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002c4a:	3b11      	subs	r3, #17
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	da0b      	bge.n	8002c68 <_ZN7ILI93418DrawTextEttPKct+0xb0>
        {
            x = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	817b      	strh	r3, [r7, #10]
            y += (8 * text_size_);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	893b      	ldrh	r3, [r7, #8]
 8002c62:	4413      	add	r3, r2
 8002c64:	813b      	strh	r3, [r7, #8]
 8002c66:	e003      	b.n	8002c70 <_ZN7ILI93418DrawTextEttPKct+0xb8>
        }
        else
        {
            x = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	817b      	strh	r3, [r7, #10]
            y = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	813b      	strh	r3, [r7, #8]
        }
    }
    while ( *str != 0 );
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1bb      	bne.n	8002bf0 <_ZN7ILI93418DrawTextEttPKct+0x38>
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <_ZN7ILI93418FillRectEttttt>:
  DrawFastVLine(x, y, h, color);
  DrawFastVLine(x + w - 1, y, h, color);
}

void ILI9341::FillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b088      	sub	sp, #32
 8002c86:	af02      	add	r7, sp, #8
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	4608      	mov	r0, r1
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4603      	mov	r3, r0
 8002c92:	817b      	strh	r3, [r7, #10]
 8002c94:	460b      	mov	r3, r1
 8002c96:	813b      	strh	r3, [r7, #8]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	80fb      	strh	r3, [r7, #6]
  int16_t x2, y2;

  // Initial off-screen clipping
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d024      	beq.n	8002cec <_ZN7ILI93418FillRectEttttt+0x6a>
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 8002ca2:	8c3b      	ldrh	r3, [r7, #32]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d021      	beq.n	8002cec <_ZN7ILI93418FillRectEttttt+0x6a>
 8002ca8:	897b      	ldrh	r3, [r7, #10]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	da1b      	bge.n	8002cec <_ZN7ILI93418FillRectEttttt+0x6a>
 8002cb4:	893b      	ldrh	r3, [r7, #8]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	da15      	bge.n	8002cec <_ZN7ILI93418FillRectEttttt+0x6a>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8002cc0:	897a      	ldrh	r2, [r7, #10]
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	82fb      	strh	r3, [r7, #22]
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 8002cce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	db0a      	blt.n	8002cec <_ZN7ILI93418FillRectEttttt+0x6a>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8002cd6:	893a      	ldrh	r2, [r7, #8]
 8002cd8:	8c3b      	ldrh	r3, [r7, #32]
 8002cda:	4413      	add	r3, r2
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	82bb      	strh	r3, [r7, #20]
 8002ce4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	da01      	bge.n	8002cf0 <_ZN7ILI93418FillRectEttttt+0x6e>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <_ZN7ILI93418FillRectEttttt+0x70>
 8002cf0:	2300      	movs	r3, #0
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d13a      	bne.n	8002d6c <_ZN7ILI93418FillRectEttttt+0xea>
  }
  if (y1 < 0) { // Clip top
    h += y1;
    y1 = 0;
  }
  if (x2 >= width_) { // Clip right
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002cfc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	db0c      	blt.n	8002d1e <_ZN7ILI93418FillRectEttttt+0x9c>
    x2 = width_ - 1;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	82fb      	strh	r3, [r7, #22]
    w = x2 - x1 + 1;
 8002d12:	8afa      	ldrh	r2, [r7, #22]
 8002d14:	897b      	ldrh	r3, [r7, #10]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	80fb      	strh	r3, [r7, #6]
  }
  if (y2 >= height_) { // Clip bottom
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d24:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	db0c      	blt.n	8002d46 <_ZN7ILI93418FillRectEttttt+0xc4>
    y2 = height_ - 1;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	82bb      	strh	r3, [r7, #20]
    h = y2 - y1 + 1;
 8002d3a:	8aba      	ldrh	r2, [r7, #20]
 8002d3c:	893b      	ldrh	r3, [r7, #8]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3301      	adds	r3, #1
 8002d44:	843b      	strh	r3, [r7, #32]
  }

  SetWindow(x1, y1, x2, y2);
 8002d46:	8af8      	ldrh	r0, [r7, #22]
 8002d48:	8abb      	ldrh	r3, [r7, #20]
 8002d4a:	893a      	ldrh	r2, [r7, #8]
 8002d4c:	8979      	ldrh	r1, [r7, #10]
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	4603      	mov	r3, r0
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f7ff fbac 	bl	80024b0 <_ZN7ILI93419SetWindowEtttt>
  Flood(color, (uint32_t)w * (uint32_t)h);
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	8c3a      	ldrh	r2, [r7, #32]
 8002d5c:	fb03 f202 	mul.w	r2, r3, r2
 8002d60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d62:	4619      	mov	r1, r3
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f7ff fc55 	bl	8002614 <_ZN7ILI93415FloodEtm>
 8002d6a:	e000      	b.n	8002d6e <_ZN7ILI93418FillRectEttttt+0xec>
    return;
 8002d6c:	bf00      	nop
}
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <_ZN7ILI934110FillCircleEtttt>:
void ILI9341::FillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	4608      	mov	r0, r1
 8002d7e:	4611      	mov	r1, r2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	817b      	strh	r3, [r7, #10]
 8002d86:	460b      	mov	r3, r1
 8002d88:	813b      	strh	r3, [r7, #8]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	80fb      	strh	r3, [r7, #6]
    int16_t x = 0, y = r;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	82fb      	strh	r3, [r7, #22]
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	82bb      	strh	r3, [r7, #20]
    int16_t d = 1 - r;
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	f1c3 0301 	rsb	r3, r3, #1
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	827b      	strh	r3, [r7, #18]

    // Draw initial center line
    DrawFastHLine(x0 - r, y0, 2 * r + 1, color);
 8002da0:	897a      	ldrh	r2, [r7, #10]
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	b299      	uxth	r1, r3
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3301      	adds	r3, #1
 8002db0:	b298      	uxth	r0, r3
 8002db2:	893a      	ldrh	r2, [r7, #8]
 8002db4:	8c3b      	ldrh	r3, [r7, #32]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	4603      	mov	r3, r0
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f7ff fcbc 	bl	8002738 <_ZN7ILI934113DrawFastHLineEtttt>

    while (y >= x) {
 8002dc0:	e073      	b.n	8002eaa <_ZN7ILI934110FillCircleEtttt+0x136>
        // Draw horizontal spans
        DrawFastHLine(x0 - x, y0 + y, 2 * x + 1, color);
 8002dc2:	8afb      	ldrh	r3, [r7, #22]
 8002dc4:	897a      	ldrh	r2, [r7, #10]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	b299      	uxth	r1, r3
 8002dca:	8aba      	ldrh	r2, [r7, #20]
 8002dcc:	893b      	ldrh	r3, [r7, #8]
 8002dce:	4413      	add	r3, r2
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	8afb      	ldrh	r3, [r7, #22]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	b298      	uxth	r0, r3
 8002ddc:	8c3b      	ldrh	r3, [r7, #32]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	4603      	mov	r3, r0
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f7ff fca8 	bl	8002738 <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - x, y0 - y, 2 * x + 1, color);
 8002de8:	8afb      	ldrh	r3, [r7, #22]
 8002dea:	897a      	ldrh	r2, [r7, #10]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	b299      	uxth	r1, r3
 8002df0:	8abb      	ldrh	r3, [r7, #20]
 8002df2:	893a      	ldrh	r2, [r7, #8]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	8afb      	ldrh	r3, [r7, #22]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	b298      	uxth	r0, r3
 8002e02:	8c3b      	ldrh	r3, [r7, #32]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	4603      	mov	r3, r0
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f7ff fc95 	bl	8002738 <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - y, y0 + x, 2 * y + 1, color);
 8002e0e:	8abb      	ldrh	r3, [r7, #20]
 8002e10:	897a      	ldrh	r2, [r7, #10]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	b299      	uxth	r1, r3
 8002e16:	8afa      	ldrh	r2, [r7, #22]
 8002e18:	893b      	ldrh	r3, [r7, #8]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	8abb      	ldrh	r3, [r7, #20]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3301      	adds	r3, #1
 8002e26:	b298      	uxth	r0, r3
 8002e28:	8c3b      	ldrh	r3, [r7, #32]
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f7ff fc82 	bl	8002738 <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - y, y0 - x, 2 * y + 1, color);
 8002e34:	8abb      	ldrh	r3, [r7, #20]
 8002e36:	897a      	ldrh	r2, [r7, #10]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	b299      	uxth	r1, r3
 8002e3c:	8afb      	ldrh	r3, [r7, #22]
 8002e3e:	893a      	ldrh	r2, [r7, #8]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	8abb      	ldrh	r3, [r7, #20]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	b298      	uxth	r0, r3
 8002e4e:	8c3b      	ldrh	r3, [r7, #32]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	4603      	mov	r3, r0
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7ff fc6f 	bl	8002738 <_ZN7ILI934113DrawFastHLineEtttt>

        x++;
 8002e5a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3301      	adds	r3, #1
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	82fb      	strh	r3, [r7, #22]
        if (d < 0) {
 8002e66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	da09      	bge.n	8002e82 <_ZN7ILI934110FillCircleEtttt+0x10e>
            d += 2 * x + 1;
 8002e6e:	8afb      	ldrh	r3, [r7, #22]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	8a7b      	ldrh	r3, [r7, #18]
 8002e76:	4413      	add	r3, r2
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	827b      	strh	r3, [r7, #18]
 8002e80:	e013      	b.n	8002eaa <_ZN7ILI934110FillCircleEtttt+0x136>
        } else {
            y--;
 8002e82:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	82bb      	strh	r3, [r7, #20]
            d += 2 * (x - y) + 1;
 8002e8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	8a7b      	ldrh	r3, [r7, #18]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	827b      	strh	r3, [r7, #18]
    while (y >= x) {
 8002eaa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002eae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	da85      	bge.n	8002dc2 <_ZN7ILI934110FillCircleEtttt+0x4e>
        }
    }
}
 8002eb6:	bf00      	nop
 8002eb8:	bf00      	nop
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <TCAL9538RSVR_INIT>:
*/



uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	4611      	mov	r1, r2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	460b      	mov	r3, r1
 8002ed0:	71fb      	strb	r3, [r7, #7]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;
	dev->input = direction_bitMask;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	79ba      	ldrb	r2, [r7, #6]
 8002ede:	719a      	strb	r2, [r3, #6]


    dev->i2cHandle = i2cHandle;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress<<1);
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	b25b      	sxtb	r3, r3
 8002efa:	f063 031f 	orn	r3, r3, #31
 8002efe:	b25b      	sxtb	r3, r3
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	711a      	strb	r2, [r3, #4]
    uint8_t hold_bitMask = direction_bitMask;
 8002f06:	79bb      	ldrb	r3, [r7, #6]
 8002f08:	757b      	strb	r3, [r7, #21]

    status = TCAL9538RSVR_SetDirection(dev, &hold_bitMask);
 8002f0a:	f107 0315 	add.w	r3, r7, #21
 8002f0e:	4619      	mov	r1, r3
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f83b 	bl	8002f8c <TCAL9538RSVR_SetDirection>
 8002f16:	4603      	mov	r3, r0
 8002f18:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8002f1a:	7dbb      	ldrb	r3, [r7, #22]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bf14      	ite	ne
 8002f20:	2301      	movne	r3, #1
 8002f22:	2300      	moveq	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	75fb      	strb	r3, [r7, #23]

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 8002f2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f32:	4619      	mov	r1, r3
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f838 	bl	8002faa <TCAL9538RSVR_SetInterrupts>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8002f3e:	7dbb      	ldrb	r3, [r7, #22]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf14      	ite	ne
 8002f44:	2301      	movne	r3, #1
 8002f46:	2300      	moveq	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
 8002f4e:	4413      	add	r3, r2
 8002f50:	75fb      	strb	r3, [r7, #23]

    // if all pins are inputs, invert all pins
    if (direction_bitMask == 0xFF) {
 8002f52:	79bb      	ldrb	r3, [r7, #6]
 8002f54:	2bff      	cmp	r3, #255	@ 0xff
 8002f56:	d114      	bne.n	8002f82 <TCAL9538RSVR_INIT+0xc2>
        uint8_t full = 0xFF;
 8002f58:	23ff      	movs	r3, #255	@ 0xff
 8002f5a:	753b      	strb	r3, [r7, #20]
        status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_INVERSION, &full);
 8002f5c:	f107 0314 	add.w	r3, r7, #20
 8002f60:	461a      	mov	r2, r3
 8002f62:	2102      	movs	r1, #2
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 f894 	bl	8003092 <TCAL9538RSVR_WriteRegister>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	75bb      	strb	r3, [r7, #22]
        errNum += (status != HAL_OK);
 8002f6e:	7dbb      	ldrb	r3, [r7, #22]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	bf14      	ite	ne
 8002f74:	2301      	movne	r3, #1
 8002f76:	2300      	moveq	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	4413      	add	r3, r2
 8002f80:	75fb      	strb	r3, [r7, #23]
    }
    

    return (errNum);
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t* bitMask)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, bitMask);
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	2103      	movs	r1, #3
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f879 	bl	8003092 <TCAL9538RSVR_WriteRegister>
 8002fa0:	4603      	mov	r3, r0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 8002fb6:	1cfb      	adds	r3, r7, #3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2145      	movs	r1, #69	@ 0x45
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f868 	bl	8003092 <TCAL9538RSVR_WriteRegister>
 8002fc2:	4603      	mov	r3, r0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	737b      	strb	r3, [r7, #13]


    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 8002fdc:	f107 030d 	add.w	r3, r7, #13
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2146      	movs	r1, #70	@ 0x46
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f837 	bl	8003058 <TCAL9538RSVR_ReadRegister>
 8002fea:	4603      	mov	r3, r0
 8002fec:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 8002fee:	7bbb      	ldrb	r3, [r7, #14]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf14      	ite	ne
 8002ff4:	2301      	movne	r3, #1
 8002ff6:	2300      	moveq	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	4413      	add	r3, r2
 8003000:	73fb      	strb	r3, [r7, #15]

    // Read updated input values
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3305      	adds	r3, #5
 8003006:	4619      	mov	r1, r3
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f807 	bl	800301c <TCAL9538RSVR_ReadInput>
 800300e:	4603      	mov	r3, r0
 8003010:	73bb      	strb	r3, [r7, #14]


    return (errNum);
 8003012:	7bfb      	ldrb	r3, [r7, #15]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <TCAL9538RSVR_ReadInput>:




HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	2100      	movs	r1, #0
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f814 	bl	8003058 <TCAL9538RSVR_ReadRegister>
 8003030:	4603      	mov	r3, r0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <TCAL9538RSVR_SetOutput>:
HAL_StatusTypeDef TCAL9538RSVR_SetOutput(TCAL9538RSVR* dev, uint8_t *data)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	2101      	movs	r1, #1
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f822 	bl	8003092 <TCAL9538RSVR_WriteRegister>
 800304e:	4603      	mov	r3, r0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <TCAL9538RSVR_ReadRegister>:

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af04      	add	r7, sp, #16
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	460b      	mov	r3, r1
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	791b      	ldrb	r3, [r3, #4]
 800306e:	4619      	mov	r1, r3
 8003070:	7afb      	ldrb	r3, [r7, #11]
 8003072:	b29a      	uxth	r2, r3
 8003074:	f04f 33ff 	mov.w	r3, #4294967295
 8003078:	9302      	str	r3, [sp, #8]
 800307a:	2301      	movs	r3, #1
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	2301      	movs	r3, #1
 8003084:	f002 feac 	bl	8005de0 <HAL_I2C_Mem_Read>
 8003088:	4603      	mov	r3, r0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b088      	sub	sp, #32
 8003096:	af04      	add	r7, sp, #16
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	460b      	mov	r3, r1
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Write(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	791b      	ldrb	r3, [r3, #4]
 80030a8:	4619      	mov	r1, r3
 80030aa:	7afb      	ldrb	r3, [r7, #11]
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	f04f 33ff 	mov.w	r3, #4294967295
 80030b2:	9302      	str	r3, [sp, #8]
 80030b4:	2301      	movs	r3, #1
 80030b6:	9301      	str	r3, [sp, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	2301      	movs	r3, #1
 80030be:	f002 fd7b 	bl	8005bb8 <HAL_I2C_Mem_Write>
 80030c2:	4603      	mov	r3, r0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80030cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003104 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030d0:	f7fe ff84 	bl	8001fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030d4:	480c      	ldr	r0, [pc, #48]	@ (8003108 <LoopForever+0x6>)
  ldr r1, =_edata
 80030d6:	490d      	ldr	r1, [pc, #52]	@ (800310c <LoopForever+0xa>)
  ldr r2, =_sidata
 80030d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003110 <LoopForever+0xe>)
  movs r3, #0
 80030da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030dc:	e002      	b.n	80030e4 <LoopCopyDataInit>

080030de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030e2:	3304      	adds	r3, #4

080030e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030e8:	d3f9      	bcc.n	80030de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003114 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003118 <LoopForever+0x16>)
  movs r3, #0
 80030ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f0:	e001      	b.n	80030f6 <LoopFillZerobss>

080030f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030f4:	3204      	adds	r2, #4

080030f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030f8:	d3fb      	bcc.n	80030f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030fa:	f009 fc93 	bl	800ca24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030fe:	f7fe f8e3 	bl	80012c8 <main>

08003102 <LoopForever>:

LoopForever:
    b LoopForever
 8003102:	e7fe      	b.n	8003102 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003104:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800310c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003110:	0800d23c 	.word	0x0800d23c
  ldr r2, =_sbss
 8003114:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003118:	20002a18 	.word	0x20002a18

0800311c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800311c:	e7fe      	b.n	800311c <ADC1_2_IRQHandler>

0800311e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003128:	2003      	movs	r0, #3
 800312a:	f002 f822 	bl	8005172 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800312e:	200f      	movs	r0, #15
 8003130:	f7fe fe9a 	bl	8001e68 <HAL_InitTick>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	71fb      	strb	r3, [r7, #7]
 800313e:	e001      	b.n	8003144 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003140:	f7fe fc64 	bl	8001a0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003144:	79fb      	ldrb	r3, [r7, #7]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003154:	4b06      	ldr	r3, [pc, #24]	@ (8003170 <HAL_IncTick+0x20>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <HAL_IncTick+0x24>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4413      	add	r3, r2
 8003160:	4a04      	ldr	r2, [pc, #16]	@ (8003174 <HAL_IncTick+0x24>)
 8003162:	6013      	str	r3, [r2, #0]
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000008 	.word	0x20000008
 8003174:	2000037c 	.word	0x2000037c

08003178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return uwTick;
 800317c:	4b03      	ldr	r3, [pc, #12]	@ (800318c <HAL_GetTick+0x14>)
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	2000037c 	.word	0x2000037c

08003190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003198:	f7ff ffee 	bl	8003178 <HAL_GetTick>
 800319c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a8:	d005      	beq.n	80031b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80031aa:	4b0a      	ldr	r3, [pc, #40]	@ (80031d4 <HAL_Delay+0x44>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4413      	add	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031b6:	bf00      	nop
 80031b8:	f7ff ffde 	bl	8003178 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d8f7      	bhi.n	80031b8 <HAL_Delay+0x28>
  {
  }
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000008 	.word	0x20000008

080031d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	609a      	str	r2, [r3, #8]
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	609a      	str	r2, [r3, #8]
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	3360      	adds	r3, #96	@ 0x60
 8003252:	461a      	mov	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b08      	ldr	r3, [pc, #32]	@ (8003284 <LL_ADC_SetOffset+0x44>)
 8003262:	4013      	ands	r3, r2
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	4313      	orrs	r3, r2
 8003270:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003278:	bf00      	nop
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	03fff000 	.word	0x03fff000

08003288 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3360      	adds	r3, #96	@ 0x60
 8003296:	461a      	mov	r2, r3
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3360      	adds	r3, #96	@ 0x60
 80032c4:	461a      	mov	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	431a      	orrs	r2, r3
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80032de:	bf00      	nop
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	615a      	str	r2, [r3, #20]
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003336:	b480      	push	{r7}
 8003338:	b087      	sub	sp, #28
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	3330      	adds	r3, #48	@ 0x30
 8003346:	461a      	mov	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	4413      	add	r3, r2
 8003354:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	211f      	movs	r1, #31
 8003362:	fa01 f303 	lsl.w	r3, r1, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	401a      	ands	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	0e9b      	lsrs	r3, r3, #26
 800336e:	f003 011f 	and.w	r1, r3, #31
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	fa01 f303 	lsl.w	r3, r1, r3
 800337c:	431a      	orrs	r2, r3
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003382:	bf00      	nop
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800338e:	b480      	push	{r7}
 8003390:	b087      	sub	sp, #28
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	3314      	adds	r3, #20
 800339e:	461a      	mov	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	0e5b      	lsrs	r3, r3, #25
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	4413      	add	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	0d1b      	lsrs	r3, r3, #20
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	2107      	movs	r1, #7
 80033bc:	fa01 f303 	lsl.w	r3, r1, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	401a      	ands	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	0d1b      	lsrs	r3, r3, #20
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	431a      	orrs	r2, r3
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80033d8:	bf00      	nop
 80033da:	371c      	adds	r7, #28
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fc:	43db      	mvns	r3, r3
 80033fe:	401a      	ands	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f003 0318 	and.w	r3, r3, #24
 8003406:	4908      	ldr	r1, [pc, #32]	@ (8003428 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003408:	40d9      	lsrs	r1, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	400b      	ands	r3, r1
 800340e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003412:	431a      	orrs	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	0007ffff 	.word	0x0007ffff

0800342c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 031f 	and.w	r3, r3, #31
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003458:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6093      	str	r3, [r2, #8]
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800347c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003480:	d101      	bne.n	8003486 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80034a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034d0:	d101      	bne.n	80034d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034f8:	f043 0201 	orr.w	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800351c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003520:	f043 0202 	orr.w	r2, r3, #2
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <LL_ADC_IsEnabled+0x18>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <LL_ADC_IsEnabled+0x1a>
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b02      	cmp	r3, #2
 800356c:	d101      	bne.n	8003572 <LL_ADC_IsDisableOngoing+0x18>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <LL_ADC_IsDisableOngoing+0x1a>
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003590:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003594:	f043 0204 	orr.w	r2, r3, #4
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035bc:	f043 0210 	orr.w	r2, r3, #16
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d101      	bne.n	80035e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003606:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800360a:	f043 0220 	orr.w	r2, r3, #32
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b08      	cmp	r3, #8
 8003630:	d101      	bne.n	8003636 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b089      	sub	sp, #36	@ 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e133      	b.n	80038c6 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003668:	2b00      	cmp	r3, #0
 800366a:	d109      	bne.n	8003680 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7fe f9f5 	bl	8001a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fef1 	bl	800346c <LL_ADC_IsDeepPowerDownEnabled>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d004      	beq.n	800369a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff fed7 	bl	8003448 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff ff0c 	bl	80034bc <LL_ADC_IsInternalRegulatorEnabled>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d115      	bne.n	80036d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fef0 	bl	8003494 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036b4:	4b86      	ldr	r3, [pc, #536]	@ (80038d0 <HAL_ADC_Init+0x28c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	099b      	lsrs	r3, r3, #6
 80036ba:	4a86      	ldr	r2, [pc, #536]	@ (80038d4 <HAL_ADC_Init+0x290>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	099b      	lsrs	r3, r3, #6
 80036c2:	3301      	adds	r3, #1
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80036c8:	e002      	b.n	80036d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f9      	bne.n	80036ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff feee 	bl	80034bc <LL_ADC_IsInternalRegulatorEnabled>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10d      	bne.n	8003702 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ea:	f043 0210 	orr.w	r2, r3, #16
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f6:	f043 0201 	orr.w	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff ff62 	bl	80035d0 <LL_ADC_REG_IsConversionOngoing>
 800370c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	f040 80cc 	bne.w	80038b4 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2b00      	cmp	r3, #0
 8003720:	f040 80c8 	bne.w	80038b4 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003728:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800372c:	f043 0202 	orr.w	r2, r3, #2
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fefb 	bl	8003534 <LL_ADC_IsEnabled>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d115      	bne.n	8003770 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003744:	4864      	ldr	r0, [pc, #400]	@ (80038d8 <HAL_ADC_Init+0x294>)
 8003746:	f7ff fef5 	bl	8003534 <LL_ADC_IsEnabled>
 800374a:	4604      	mov	r4, r0
 800374c:	4863      	ldr	r0, [pc, #396]	@ (80038dc <HAL_ADC_Init+0x298>)
 800374e:	f7ff fef1 	bl	8003534 <LL_ADC_IsEnabled>
 8003752:	4603      	mov	r3, r0
 8003754:	431c      	orrs	r4, r3
 8003756:	4862      	ldr	r0, [pc, #392]	@ (80038e0 <HAL_ADC_Init+0x29c>)
 8003758:	f7ff feec 	bl	8003534 <LL_ADC_IsEnabled>
 800375c:	4603      	mov	r3, r0
 800375e:	4323      	orrs	r3, r4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d105      	bne.n	8003770 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4619      	mov	r1, r3
 800376a:	485e      	ldr	r0, [pc, #376]	@ (80038e4 <HAL_ADC_Init+0x2a0>)
 800376c:	f7ff fd34 	bl	80031d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	7e5b      	ldrb	r3, [r3, #25]
 8003774:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800377a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003780:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003786:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800378e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003790:	4313      	orrs	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3020 	ldrb.w	r3, [r3, #32]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d106      	bne.n	80037ac <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	3b01      	subs	r3, #1
 80037a4:	045b      	lsls	r3, r3, #17
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d009      	beq.n	80037c8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	4b46      	ldr	r3, [pc, #280]	@ (80038e8 <HAL_ADC_Init+0x2a4>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6812      	ldr	r2, [r2, #0]
 80037d6:	69b9      	ldr	r1, [r7, #24]
 80037d8:	430b      	orrs	r3, r1
 80037da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff ff1c 	bl	800361e <LL_ADC_INJ_IsConversionOngoing>
 80037e6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d140      	bne.n	8003870 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d13d      	bne.n	8003870 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	7e1b      	ldrb	r3, [r3, #24]
 80037fc:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80037fe:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003806:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003816:	f023 0306 	bic.w	r3, r3, #6
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	430b      	orrs	r3, r1
 8003822:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800382a:	2b01      	cmp	r3, #1
 800382c:	d118      	bne.n	8003860 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003838:	f023 0304 	bic.w	r3, r3, #4
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003844:	4311      	orrs	r1, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800384a:	4311      	orrs	r1, r2
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003850:	430a      	orrs	r2, r1
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0201 	orr.w	r2, r2, #1
 800385c:	611a      	str	r2, [r3, #16]
 800385e:	e007      	b.n	8003870 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0201 	bic.w	r2, r2, #1
 800386e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d10c      	bne.n	8003892 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	f023 010f 	bic.w	r1, r3, #15
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	1e5a      	subs	r2, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003890:	e007      	b.n	80038a2 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 020f 	bic.w	r2, r2, #15
 80038a0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a6:	f023 0303 	bic.w	r3, r3, #3
 80038aa:	f043 0201 	orr.w	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80038b2:	e007      	b.n	80038c4 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b8:	f043 0210 	orr.w	r2, r3, #16
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80038c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3724      	adds	r7, #36	@ 0x24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd90      	pop	{r4, r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000000 	.word	0x20000000
 80038d4:	053e2d63 	.word	0x053e2d63
 80038d8:	50040000 	.word	0x50040000
 80038dc:	50040100 	.word	0x50040100
 80038e0:	50040200 	.word	0x50040200
 80038e4:	50040300 	.word	0x50040300
 80038e8:	fff0c007 	.word	0xfff0c007

080038ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038f8:	4853      	ldr	r0, [pc, #332]	@ (8003a48 <HAL_ADC_Start_DMA+0x15c>)
 80038fa:	f7ff fd97 	bl	800342c <LL_ADC_GetMultimode>
 80038fe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fe63 	bl	80035d0 <LL_ADC_REG_IsConversionOngoing>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	f040 8093 	bne.w	8003a38 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_ADC_Start_DMA+0x34>
 800391c:	2302      	movs	r3, #2
 800391e:	e08e      	b.n	8003a3e <HAL_ADC_Start_DMA+0x152>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a47      	ldr	r2, [pc, #284]	@ (8003a4c <HAL_ADC_Start_DMA+0x160>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d008      	beq.n	8003944 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	2b05      	cmp	r3, #5
 800393c:	d002      	beq.n	8003944 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b09      	cmp	r3, #9
 8003942:	d172      	bne.n	8003a2a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 fdcb 	bl	80044e0 <ADC_Enable>
 800394a:	4603      	mov	r3, r0
 800394c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800394e:	7dfb      	ldrb	r3, [r7, #23]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d165      	bne.n	8003a20 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003958:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a38      	ldr	r2, [pc, #224]	@ (8003a50 <HAL_ADC_Start_DMA+0x164>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d002      	beq.n	8003978 <HAL_ADC_Start_DMA+0x8c>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	e000      	b.n	800397a <HAL_ADC_Start_DMA+0x8e>
 8003978:	4b36      	ldr	r3, [pc, #216]	@ (8003a54 <HAL_ADC_Start_DMA+0x168>)
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	6812      	ldr	r2, [r2, #0]
 800397e:	4293      	cmp	r3, r2
 8003980:	d002      	beq.n	8003988 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d105      	bne.n	8003994 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003998:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d006      	beq.n	80039ae <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a4:	f023 0206 	bic.w	r2, r3, #6
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039ac:	e002      	b.n	80039b4 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b8:	4a27      	ldr	r2, [pc, #156]	@ (8003a58 <HAL_ADC_Start_DMA+0x16c>)
 80039ba:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c0:	4a26      	ldr	r2, [pc, #152]	@ (8003a5c <HAL_ADC_Start_DMA+0x170>)
 80039c2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c8:	4a25      	ldr	r2, [pc, #148]	@ (8003a60 <HAL_ADC_Start_DMA+0x174>)
 80039ca:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	221c      	movs	r2, #28
 80039d2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0210 	orr.w	r2, r2, #16
 80039ea:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3340      	adds	r3, #64	@ 0x40
 8003a06:	4619      	mov	r1, r3
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f001 fc9e 	bl	800534c <HAL_DMA_Start_IT>
 8003a10:	4603      	mov	r3, r0
 8003a12:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff fdb1 	bl	8003580 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003a1e:	e00d      	b.n	8003a3c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8003a28:	e008      	b.n	8003a3c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003a36:	e001      	b.n	8003a3c <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	50040300 	.word	0x50040300
 8003a4c:	50040200 	.word	0x50040200
 8003a50:	50040100 	.word	0x50040100
 8003a54:	50040000 	.word	0x50040000
 8003a58:	080046ab 	.word	0x080046ab
 8003a5c:	08004783 	.word	0x08004783
 8003a60:	0800479f 	.word	0x0800479f

08003a64 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_ADC_Stop_DMA+0x16>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e051      	b.n	8003b1e <HAL_ADC_Stop_DMA+0xba>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003a82:	2103      	movs	r1, #3
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fc6f 	bl	8004368 <ADC_ConversionStop>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d13f      	bne.n	8003b14 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d10f      	bne.n	8003ad2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 fca8 	bl	800540c <HAL_DMA_Abort>
 8003abc:	4603      	mov	r3, r0
 8003abe:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0210 	bic.w	r2, r2, #16
 8003ae0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d105      	bne.n	8003af4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fd7f 	bl	80045ec <ADC_Disable>
 8003aee:	4603      	mov	r3, r0
 8003af0:	73fb      	strb	r3, [r7, #15]
 8003af2:	e002      	b.n	8003afa <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fd79 	bl	80045ec <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b04:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b08:	f023 0301 	bic.w	r3, r3, #1
 8003b0c:	f043 0201 	orr.w	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b0b6      	sub	sp, #216	@ 0xd8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x22>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e3e3      	b.n	800433a <HAL_ADC_ConfigChannel+0x7ea>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fd26 	bl	80035d0 <LL_ADC_REG_IsConversionOngoing>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f040 83c4 	bne.w	8004314 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b05      	cmp	r3, #5
 8003b9a:	d824      	bhi.n	8003be6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	3b02      	subs	r3, #2
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d81b      	bhi.n	8003bde <HAL_ADC_ConfigChannel+0x8e>
 8003ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bac <HAL_ADC_ConfigChannel+0x5c>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003bbd 	.word	0x08003bbd
 8003bb0:	08003bc5 	.word	0x08003bc5
 8003bb4:	08003bcd 	.word	0x08003bcd
 8003bb8:	08003bd5 	.word	0x08003bd5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003bbc:	230c      	movs	r3, #12
 8003bbe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003bc2:	e010      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003bc4:	2312      	movs	r3, #18
 8003bc6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003bca:	e00c      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003bcc:	2318      	movs	r3, #24
 8003bce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003bd2:	e008      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003bd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003bdc:	e003      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003bde:	2306      	movs	r3, #6
 8003be0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003be4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003bf4:	f7ff fb9f 	bl	8003336 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff fce7 	bl	80035d0 <LL_ADC_REG_IsConversionOngoing>
 8003c02:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff fd07 	bl	800361e <LL_ADC_INJ_IsConversionOngoing>
 8003c10:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f040 81bf 	bne.w	8003f9c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f040 81ba 	bne.w	8003f9c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c30:	d10f      	bne.n	8003c52 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	f7ff fba6 	bl	800338e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff fb4d 	bl	80032ea <LL_ADC_SetSamplingTimeCommonConfig>
 8003c50:	e00e      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	6819      	ldr	r1, [r3, #0]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f7ff fb95 	bl	800338e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fb3d 	bl	80032ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	695a      	ldr	r2, [r3, #20]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	08db      	lsrs	r3, r3, #3
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d00a      	beq.n	8003ca8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6919      	ldr	r1, [r3, #16]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ca2:	f7ff facd 	bl	8003240 <LL_ADC_SetOffset>
 8003ca6:	e179      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2100      	movs	r1, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff faea 	bl	8003288 <LL_ADC_GetOffsetChannel>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10a      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x184>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fadf 	bl	8003288 <LL_ADC_GetOffsetChannel>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	0e9b      	lsrs	r3, r3, #26
 8003cce:	f003 021f 	and.w	r2, r3, #31
 8003cd2:	e01e      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x1c2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fad4 	bl	8003288 <LL_ADC_GetOffsetChannel>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003cf6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003cfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003d02:	2320      	movs	r3, #32
 8003d04:	e004      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003d06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d0a:	fab3 f383 	clz	r3, r3
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d105      	bne.n	8003d2a <HAL_ADC_ConfigChannel+0x1da>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	0e9b      	lsrs	r3, r3, #26
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	e018      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x20c>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d36:	fa93 f3a3 	rbit	r3, r3
 8003d3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003d3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003d46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003d4e:	2320      	movs	r3, #32
 8003d50:	e004      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003d52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d106      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2200      	movs	r2, #0
 8003d66:	2100      	movs	r1, #0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff faa3 	bl	80032b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2101      	movs	r1, #1
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fa87 	bl	8003288 <LL_ADC_GetOffsetChannel>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10a      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x24a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2101      	movs	r1, #1
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fa7c 	bl	8003288 <LL_ADC_GetOffsetChannel>
 8003d90:	4603      	mov	r3, r0
 8003d92:	0e9b      	lsrs	r3, r3, #26
 8003d94:	f003 021f 	and.w	r2, r3, #31
 8003d98:	e01e      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x288>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2101      	movs	r1, #1
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fa71 	bl	8003288 <LL_ADC_GetOffsetChannel>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003db0:	fa93 f3a3 	rbit	r3, r3
 8003db4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003dc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003dc8:	2320      	movs	r3, #32
 8003dca:	e004      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003dcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dd0:	fab3 f383 	clz	r3, r3
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d105      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x2a0>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	0e9b      	lsrs	r3, r3, #26
 8003dea:	f003 031f 	and.w	r3, r3, #31
 8003dee:	e018      	b.n	8003e22 <HAL_ADC_ConfigChannel+0x2d2>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dfc:	fa93 f3a3 	rbit	r3, r3
 8003e00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003e04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003e0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003e14:	2320      	movs	r3, #32
 8003e16:	e004      	b.n	8003e22 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e1c:	fab3 f383 	clz	r3, r3
 8003e20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d106      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fa40 	bl	80032b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2102      	movs	r1, #2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff fa24 	bl	8003288 <LL_ADC_GetOffsetChannel>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <HAL_ADC_ConfigChannel+0x310>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2102      	movs	r1, #2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fa19 	bl	8003288 <LL_ADC_GetOffsetChannel>
 8003e56:	4603      	mov	r3, r0
 8003e58:	0e9b      	lsrs	r3, r3, #26
 8003e5a:	f003 021f 	and.w	r2, r3, #31
 8003e5e:	e01e      	b.n	8003e9e <HAL_ADC_ConfigChannel+0x34e>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2102      	movs	r1, #2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff fa0e 	bl	8003288 <LL_ADC_GetOffsetChannel>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e76:	fa93 f3a3 	rbit	r3, r3
 8003e7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003e7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003e8e:	2320      	movs	r3, #32
 8003e90:	e004      	b.n	8003e9c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e96:	fab3 f383 	clz	r3, r3
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d105      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x366>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	0e9b      	lsrs	r3, r3, #26
 8003eb0:	f003 031f 	and.w	r3, r3, #31
 8003eb4:	e014      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x390>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ebe:	fa93 f3a3 	rbit	r3, r3
 8003ec2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003ec4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ec6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003eca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003ed2:	2320      	movs	r3, #32
 8003ed4:	e004      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003ed6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003eda:	fab3 f383 	clz	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d106      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2102      	movs	r1, #2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff f9e1 	bl	80032b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2103      	movs	r1, #3
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff f9c5 	bl	8003288 <LL_ADC_GetOffsetChannel>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10a      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x3ce>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2103      	movs	r1, #3
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff f9ba 	bl	8003288 <LL_ADC_GetOffsetChannel>
 8003f14:	4603      	mov	r3, r0
 8003f16:	0e9b      	lsrs	r3, r3, #26
 8003f18:	f003 021f 	and.w	r2, r3, #31
 8003f1c:	e017      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x3fe>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2103      	movs	r1, #3
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff f9af 	bl	8003288 <LL_ADC_GetOffsetChannel>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f30:	fa93 f3a3 	rbit	r3, r3
 8003f34:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003f36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f38:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003f3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003f40:	2320      	movs	r3, #32
 8003f42:	e003      	b.n	8003f4c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003f44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f46:	fab3 f383 	clz	r3, r3
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d105      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x416>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	0e9b      	lsrs	r3, r3, #26
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	e011      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x43a>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f6e:	fa93 f3a3 	rbit	r3, r3
 8003f72:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003f74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f76:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003f78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003f7e:	2320      	movs	r3, #32
 8003f80:	e003      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003f82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f84:	fab3 f383 	clz	r3, r3
 8003f88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d106      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2200      	movs	r2, #0
 8003f94:	2103      	movs	r1, #3
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff f98c 	bl	80032b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff fac7 	bl	8003534 <LL_ADC_IsEnabled>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f040 813f 	bne.w	800422c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6819      	ldr	r1, [r3, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f7ff fa12 	bl	80033e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4a8e      	ldr	r2, [pc, #568]	@ (8004200 <HAL_ADC_ConfigChannel+0x6b0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	f040 8130 	bne.w	800422c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10b      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x4a4>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	0e9b      	lsrs	r3, r3, #26
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	2b09      	cmp	r3, #9
 8003fea:	bf94      	ite	ls
 8003fec:	2301      	movls	r3, #1
 8003fee:	2300      	movhi	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e019      	b.n	8004028 <HAL_ADC_ConfigChannel+0x4d8>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ffc:	fa93 f3a3 	rbit	r3, r3
 8004000:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004004:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004006:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800400c:	2320      	movs	r3, #32
 800400e:	e003      	b.n	8004018 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004010:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	3301      	adds	r3, #1
 800401a:	f003 031f 	and.w	r3, r3, #31
 800401e:	2b09      	cmp	r3, #9
 8004020:	bf94      	ite	ls
 8004022:	2301      	movls	r3, #1
 8004024:	2300      	movhi	r3, #0
 8004026:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004028:	2b00      	cmp	r3, #0
 800402a:	d079      	beq.n	8004120 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004034:	2b00      	cmp	r3, #0
 8004036:	d107      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x4f8>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	0e9b      	lsrs	r3, r3, #26
 800403e:	3301      	adds	r3, #1
 8004040:	069b      	lsls	r3, r3, #26
 8004042:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004046:	e015      	b.n	8004074 <HAL_ADC_ConfigChannel+0x524>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004050:	fa93 f3a3 	rbit	r3, r3
 8004054:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004056:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004058:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800405a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8004060:	2320      	movs	r3, #32
 8004062:	e003      	b.n	800406c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004066:	fab3 f383 	clz	r3, r3
 800406a:	b2db      	uxtb	r3, r3
 800406c:	3301      	adds	r3, #1
 800406e:	069b      	lsls	r3, r3, #26
 8004070:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800407c:	2b00      	cmp	r3, #0
 800407e:	d109      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x544>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	0e9b      	lsrs	r3, r3, #26
 8004086:	3301      	adds	r3, #1
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	2101      	movs	r1, #1
 800408e:	fa01 f303 	lsl.w	r3, r1, r3
 8004092:	e017      	b.n	80040c4 <HAL_ADC_ConfigChannel+0x574>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800409c:	fa93 f3a3 	rbit	r3, r3
 80040a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80040a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040a4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80040a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80040ac:	2320      	movs	r3, #32
 80040ae:	e003      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80040b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040b2:	fab3 f383 	clz	r3, r3
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	3301      	adds	r3, #1
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	2101      	movs	r1, #1
 80040c0:	fa01 f303 	lsl.w	r3, r1, r3
 80040c4:	ea42 0103 	orr.w	r1, r2, r3
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x59a>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	0e9b      	lsrs	r3, r3, #26
 80040da:	3301      	adds	r3, #1
 80040dc:	f003 021f 	and.w	r2, r3, #31
 80040e0:	4613      	mov	r3, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	4413      	add	r3, r2
 80040e6:	051b      	lsls	r3, r3, #20
 80040e8:	e018      	b.n	800411c <HAL_ADC_ConfigChannel+0x5cc>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f2:	fa93 f3a3 	rbit	r3, r3
 80040f6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80040f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80040fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004102:	2320      	movs	r3, #32
 8004104:	e003      	b.n	800410e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8004106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004108:	fab3 f383 	clz	r3, r3
 800410c:	b2db      	uxtb	r3, r3
 800410e:	3301      	adds	r3, #1
 8004110:	f003 021f 	and.w	r2, r3, #31
 8004114:	4613      	mov	r3, r2
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	4413      	add	r3, r2
 800411a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800411c:	430b      	orrs	r3, r1
 800411e:	e080      	b.n	8004222 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004128:	2b00      	cmp	r3, #0
 800412a:	d107      	bne.n	800413c <HAL_ADC_ConfigChannel+0x5ec>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	0e9b      	lsrs	r3, r3, #26
 8004132:	3301      	adds	r3, #1
 8004134:	069b      	lsls	r3, r3, #26
 8004136:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800413a:	e015      	b.n	8004168 <HAL_ADC_ConfigChannel+0x618>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004144:	fa93 f3a3 	rbit	r3, r3
 8004148:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800414e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004154:	2320      	movs	r3, #32
 8004156:	e003      	b.n	8004160 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8004158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800415a:	fab3 f383 	clz	r3, r3
 800415e:	b2db      	uxtb	r3, r3
 8004160:	3301      	adds	r3, #1
 8004162:	069b      	lsls	r3, r3, #26
 8004164:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004170:	2b00      	cmp	r3, #0
 8004172:	d109      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x638>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	0e9b      	lsrs	r3, r3, #26
 800417a:	3301      	adds	r3, #1
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2101      	movs	r1, #1
 8004182:	fa01 f303 	lsl.w	r3, r1, r3
 8004186:	e017      	b.n	80041b8 <HAL_ADC_ConfigChannel+0x668>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	fa93 f3a3 	rbit	r3, r3
 8004194:	61bb      	str	r3, [r7, #24]
  return result;
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80041a0:	2320      	movs	r3, #32
 80041a2:	e003      	b.n	80041ac <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	fab3 f383 	clz	r3, r3
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	3301      	adds	r3, #1
 80041ae:	f003 031f 	and.w	r3, r3, #31
 80041b2:	2101      	movs	r1, #1
 80041b4:	fa01 f303 	lsl.w	r3, r1, r3
 80041b8:	ea42 0103 	orr.w	r1, r2, r3
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10d      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x694>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	0e9b      	lsrs	r3, r3, #26
 80041ce:	3301      	adds	r3, #1
 80041d0:	f003 021f 	and.w	r2, r3, #31
 80041d4:	4613      	mov	r3, r2
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	4413      	add	r3, r2
 80041da:	3b1e      	subs	r3, #30
 80041dc:	051b      	lsls	r3, r3, #20
 80041de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041e2:	e01d      	b.n	8004220 <HAL_ADC_ConfigChannel+0x6d0>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	fa93 f3a3 	rbit	r3, r3
 80041f0:	60fb      	str	r3, [r7, #12]
  return result;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d103      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80041fc:	2320      	movs	r3, #32
 80041fe:	e005      	b.n	800420c <HAL_ADC_ConfigChannel+0x6bc>
 8004200:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	b2db      	uxtb	r3, r3
 800420c:	3301      	adds	r3, #1
 800420e:	f003 021f 	and.w	r2, r3, #31
 8004212:	4613      	mov	r3, r2
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	4413      	add	r3, r2
 8004218:	3b1e      	subs	r3, #30
 800421a:	051b      	lsls	r3, r3, #20
 800421c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004220:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004226:	4619      	mov	r1, r3
 8004228:	f7ff f8b1 	bl	800338e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4b44      	ldr	r3, [pc, #272]	@ (8004344 <HAL_ADC_ConfigChannel+0x7f4>)
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d07a      	beq.n	800432e <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004238:	4843      	ldr	r0, [pc, #268]	@ (8004348 <HAL_ADC_ConfigChannel+0x7f8>)
 800423a:	f7fe fff3 	bl	8003224 <LL_ADC_GetCommonPathInternalCh>
 800423e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a41      	ldr	r2, [pc, #260]	@ (800434c <HAL_ADC_ConfigChannel+0x7fc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d12c      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800424c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004250:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d126      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a3c      	ldr	r2, [pc, #240]	@ (8004350 <HAL_ADC_ConfigChannel+0x800>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <HAL_ADC_ConfigChannel+0x71c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a3b      	ldr	r2, [pc, #236]	@ (8004354 <HAL_ADC_ConfigChannel+0x804>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d15d      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800426c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004270:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004274:	4619      	mov	r1, r3
 8004276:	4834      	ldr	r0, [pc, #208]	@ (8004348 <HAL_ADC_ConfigChannel+0x7f8>)
 8004278:	f7fe ffc1 	bl	80031fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800427c:	4b36      	ldr	r3, [pc, #216]	@ (8004358 <HAL_ADC_ConfigChannel+0x808>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	099b      	lsrs	r3, r3, #6
 8004282:	4a36      	ldr	r2, [pc, #216]	@ (800435c <HAL_ADC_ConfigChannel+0x80c>)
 8004284:	fba2 2303 	umull	r2, r3, r2, r3
 8004288:	099b      	lsrs	r3, r3, #6
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	4613      	mov	r3, r2
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004296:	e002      	b.n	800429e <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	3b01      	subs	r3, #1
 800429c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f9      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042a4:	e040      	b.n	8004328 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a2d      	ldr	r2, [pc, #180]	@ (8004360 <HAL_ADC_ConfigChannel+0x810>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d118      	bne.n	80042e2 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d112      	bne.n	80042e2 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a23      	ldr	r2, [pc, #140]	@ (8004350 <HAL_ADC_ConfigChannel+0x800>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d004      	beq.n	80042d0 <HAL_ADC_ConfigChannel+0x780>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a22      	ldr	r2, [pc, #136]	@ (8004354 <HAL_ADC_ConfigChannel+0x804>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d12d      	bne.n	800432c <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042d8:	4619      	mov	r1, r3
 80042da:	481b      	ldr	r0, [pc, #108]	@ (8004348 <HAL_ADC_ConfigChannel+0x7f8>)
 80042dc:	f7fe ff8f 	bl	80031fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042e0:	e024      	b.n	800432c <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1f      	ldr	r2, [pc, #124]	@ (8004364 <HAL_ADC_ConfigChannel+0x814>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d120      	bne.n	800432e <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d11a      	bne.n	800432e <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a14      	ldr	r2, [pc, #80]	@ (8004350 <HAL_ADC_ConfigChannel+0x800>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d115      	bne.n	800432e <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004302:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004306:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800430a:	4619      	mov	r1, r3
 800430c:	480e      	ldr	r0, [pc, #56]	@ (8004348 <HAL_ADC_ConfigChannel+0x7f8>)
 800430e:	f7fe ff76 	bl	80031fe <LL_ADC_SetCommonPathInternalCh>
 8004312:	e00c      	b.n	800432e <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004326:	e002      	b.n	800432e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004328:	bf00      	nop
 800432a:	e000      	b.n	800432e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800432c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004336:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800433a:	4618      	mov	r0, r3
 800433c:	37d8      	adds	r7, #216	@ 0xd8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	80080000 	.word	0x80080000
 8004348:	50040300 	.word	0x50040300
 800434c:	c7520000 	.word	0xc7520000
 8004350:	50040000 	.word	0x50040000
 8004354:	50040200 	.word	0x50040200
 8004358:	20000000 	.word	0x20000000
 800435c:	053e2d63 	.word	0x053e2d63
 8004360:	cb840000 	.word	0xcb840000
 8004364:	80000001 	.word	0x80000001

08004368 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff f926 	bl	80035d0 <LL_ADC_REG_IsConversionOngoing>
 8004384:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff f947 	bl	800361e <LL_ADC_INJ_IsConversionOngoing>
 8004390:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d103      	bne.n	80043a0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 8098 	beq.w	80044d0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d02a      	beq.n	8004404 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	7e5b      	ldrb	r3, [r3, #25]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d126      	bne.n	8004404 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	7e1b      	ldrb	r3, [r3, #24]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d122      	bne.n	8004404 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80043be:	2301      	movs	r3, #1
 80043c0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80043c2:	e014      	b.n	80043ee <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	4a45      	ldr	r2, [pc, #276]	@ (80044dc <ADC_ConversionStop+0x174>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d90d      	bls.n	80043e8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d0:	f043 0210 	orr.w	r2, r3, #16
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043dc:	f043 0201 	orr.w	r2, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e074      	b.n	80044d2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	3301      	adds	r3, #1
 80043ec:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f8:	2b40      	cmp	r3, #64	@ 0x40
 80043fa:	d1e3      	bne.n	80043c4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2240      	movs	r2, #64	@ 0x40
 8004402:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d014      	beq.n	8004434 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff f8de 	bl	80035d0 <LL_ADC_REG_IsConversionOngoing>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00c      	beq.n	8004434 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff f89b 	bl	800355a <LL_ADC_IsDisableOngoing>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d104      	bne.n	8004434 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff f8ba 	bl	80035a8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d014      	beq.n	8004464 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff f8ed 	bl	800361e <LL_ADC_INJ_IsConversionOngoing>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00c      	beq.n	8004464 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff f883 	bl	800355a <LL_ADC_IsDisableOngoing>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d104      	bne.n	8004464 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff f8c9 	bl	80035f6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d005      	beq.n	8004476 <ADC_ConversionStop+0x10e>
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	2b03      	cmp	r3, #3
 800446e:	d105      	bne.n	800447c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004470:	230c      	movs	r3, #12
 8004472:	617b      	str	r3, [r7, #20]
        break;
 8004474:	e005      	b.n	8004482 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004476:	2308      	movs	r3, #8
 8004478:	617b      	str	r3, [r7, #20]
        break;
 800447a:	e002      	b.n	8004482 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800447c:	2304      	movs	r3, #4
 800447e:	617b      	str	r3, [r7, #20]
        break;
 8004480:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004482:	f7fe fe79 	bl	8003178 <HAL_GetTick>
 8004486:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004488:	e01b      	b.n	80044c2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800448a:	f7fe fe75 	bl	8003178 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b05      	cmp	r3, #5
 8004496:	d914      	bls.n	80044c2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00d      	beq.n	80044c2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044aa:	f043 0210 	orr.w	r2, r3, #16
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b6:	f043 0201 	orr.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e007      	b.n	80044d2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1dc      	bne.n	800448a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	a33fffff 	.word	0xa33fffff

080044e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff f81f 	bl	8003534 <LL_ADC_IsEnabled>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d169      	bne.n	80045d0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	4b36      	ldr	r3, [pc, #216]	@ (80045dc <ADC_Enable+0xfc>)
 8004504:	4013      	ands	r3, r2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00d      	beq.n	8004526 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450e:	f043 0210 	orr.w	r2, r3, #16
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451a:	f043 0201 	orr.w	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e055      	b.n	80045d2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe ffda 	bl	80034e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004530:	482b      	ldr	r0, [pc, #172]	@ (80045e0 <ADC_Enable+0x100>)
 8004532:	f7fe fe77 	bl	8003224 <LL_ADC_GetCommonPathInternalCh>
 8004536:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004538:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800453c:	2b00      	cmp	r3, #0
 800453e:	d013      	beq.n	8004568 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004540:	4b28      	ldr	r3, [pc, #160]	@ (80045e4 <ADC_Enable+0x104>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	099b      	lsrs	r3, r3, #6
 8004546:	4a28      	ldr	r2, [pc, #160]	@ (80045e8 <ADC_Enable+0x108>)
 8004548:	fba2 2303 	umull	r2, r3, r2, r3
 800454c:	099b      	lsrs	r3, r3, #6
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	4613      	mov	r3, r2
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800455a:	e002      	b.n	8004562 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	3b01      	subs	r3, #1
 8004560:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f9      	bne.n	800455c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004568:	f7fe fe06 	bl	8003178 <HAL_GetTick>
 800456c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800456e:	e028      	b.n	80045c2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f7fe ffdd 	bl	8003534 <LL_ADC_IsEnabled>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4618      	mov	r0, r3
 8004586:	f7fe ffad 	bl	80034e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800458a:	f7fe fdf5 	bl	8003178 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d914      	bls.n	80045c2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d00d      	beq.n	80045c2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045aa:	f043 0210 	orr.w	r2, r3, #16
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b6:	f043 0201 	orr.w	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e007      	b.n	80045d2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d1cf      	bne.n	8004570 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	8000003f 	.word	0x8000003f
 80045e0:	50040300 	.word	0x50040300
 80045e4:	20000000 	.word	0x20000000
 80045e8:	053e2d63 	.word	0x053e2d63

080045ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe ffae 	bl	800355a <LL_ADC_IsDisableOngoing>
 80045fe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f7fe ff95 	bl	8003534 <LL_ADC_IsEnabled>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d047      	beq.n	80046a0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d144      	bne.n	80046a0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 030d 	and.w	r3, r3, #13
 8004620:	2b01      	cmp	r3, #1
 8004622:	d10c      	bne.n	800463e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f7fe ff6f 	bl	800350c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2203      	movs	r2, #3
 8004634:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004636:	f7fe fd9f 	bl	8003178 <HAL_GetTick>
 800463a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800463c:	e029      	b.n	8004692 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004642:	f043 0210 	orr.w	r2, r3, #16
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800464e:	f043 0201 	orr.w	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e023      	b.n	80046a2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800465a:	f7fe fd8d 	bl	8003178 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d914      	bls.n	8004692 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00d      	beq.n	8004692 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467a:	f043 0210 	orr.w	r2, r3, #16
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004686:	f043 0201 	orr.w	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e007      	b.n	80046a2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1dc      	bne.n	800465a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d14b      	bne.n	800475c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d021      	beq.n	8004722 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fe fe14 	bl	8003310 <LL_ADC_REG_IsTriggerSourceSWStart>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d032      	beq.n	8004754 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d12b      	bne.n	8004754 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004700:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d11f      	bne.n	8004754 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004718:	f043 0201 	orr.w	r2, r3, #1
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004720:	e018      	b.n	8004754 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d111      	bne.n	8004754 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004734:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004740:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d105      	bne.n	8004754 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474c:	f043 0201 	orr.w	r2, r3, #1
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f7fc fd63 	bl	8001220 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800475a:	e00e      	b.n	800477a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f7ff f9e6 	bl	8003b3a <HAL_ADC_ErrorCallback>
}
 800476e:	e004      	b.n	800477a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	4798      	blx	r3
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f7ff f9c8 	bl	8003b26 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047bc:	f043 0204 	orr.w	r2, r3, #4
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f7ff f9b8 	bl	8003b3a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047ca:	bf00      	nop
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <LL_ADC_IsEnabled>:
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <LL_ADC_IsEnabled+0x18>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <LL_ADC_IsEnabled+0x1a>
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <LL_ADC_REG_IsConversionOngoing>:
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b04      	cmp	r3, #4
 800480a:	d101      	bne.n	8004810 <LL_ADC_REG_IsConversionOngoing+0x18>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
	...

08004820 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004820:	b590      	push	{r4, r7, lr}
 8004822:	b0a1      	sub	sp, #132	@ 0x84
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800483a:	2302      	movs	r3, #2
 800483c:	e093      	b.n	8004966 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004846:	2300      	movs	r3, #0
 8004848:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800484a:	2300      	movs	r3, #0
 800484c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a47      	ldr	r2, [pc, #284]	@ (8004970 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d102      	bne.n	800485e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004858:	4b46      	ldr	r3, [pc, #280]	@ (8004974 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	e001      	b.n	8004862 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10b      	bne.n	8004880 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486c:	f043 0220 	orr.w	r2, r3, #32
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e072      	b.n	8004966 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff ffb8 	bl	80047f8 <LL_ADC_REG_IsConversionOngoing>
 8004888:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff ffb2 	bl	80047f8 <LL_ADC_REG_IsConversionOngoing>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d154      	bne.n	8004944 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800489a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800489c:	2b00      	cmp	r3, #0
 800489e:	d151      	bne.n	8004944 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048a0:	4b35      	ldr	r3, [pc, #212]	@ (8004978 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80048a2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d02c      	beq.n	8004906 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80048ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	6859      	ldr	r1, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80048be:	035b      	lsls	r3, r3, #13
 80048c0:	430b      	orrs	r3, r1
 80048c2:	431a      	orrs	r2, r3
 80048c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048c8:	4829      	ldr	r0, [pc, #164]	@ (8004970 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80048ca:	f7ff ff82 	bl	80047d2 <LL_ADC_IsEnabled>
 80048ce:	4604      	mov	r4, r0
 80048d0:	4828      	ldr	r0, [pc, #160]	@ (8004974 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80048d2:	f7ff ff7e 	bl	80047d2 <LL_ADC_IsEnabled>
 80048d6:	4603      	mov	r3, r0
 80048d8:	431c      	orrs	r4, r3
 80048da:	4828      	ldr	r0, [pc, #160]	@ (800497c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80048dc:	f7ff ff79 	bl	80047d2 <LL_ADC_IsEnabled>
 80048e0:	4603      	mov	r3, r0
 80048e2:	4323      	orrs	r3, r4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d137      	bne.n	8004958 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80048e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80048f0:	f023 030f 	bic.w	r3, r3, #15
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	6811      	ldr	r1, [r2, #0]
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	6892      	ldr	r2, [r2, #8]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	431a      	orrs	r2, r3
 8004900:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004902:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004904:	e028      	b.n	8004958 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004906:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800490e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004910:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004912:	4817      	ldr	r0, [pc, #92]	@ (8004970 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004914:	f7ff ff5d 	bl	80047d2 <LL_ADC_IsEnabled>
 8004918:	4604      	mov	r4, r0
 800491a:	4816      	ldr	r0, [pc, #88]	@ (8004974 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800491c:	f7ff ff59 	bl	80047d2 <LL_ADC_IsEnabled>
 8004920:	4603      	mov	r3, r0
 8004922:	431c      	orrs	r4, r3
 8004924:	4815      	ldr	r0, [pc, #84]	@ (800497c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004926:	f7ff ff54 	bl	80047d2 <LL_ADC_IsEnabled>
 800492a:	4603      	mov	r3, r0
 800492c:	4323      	orrs	r3, r4
 800492e:	2b00      	cmp	r3, #0
 8004930:	d112      	bne.n	8004958 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004932:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800493a:	f023 030f 	bic.w	r3, r3, #15
 800493e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004940:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004942:	e009      	b.n	8004958 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004948:	f043 0220 	orr.w	r2, r3, #32
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004956:	e000      	b.n	800495a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004958:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004962:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004966:	4618      	mov	r0, r3
 8004968:	3784      	adds	r7, #132	@ 0x84
 800496a:	46bd      	mov	sp, r7
 800496c:	bd90      	pop	{r4, r7, pc}
 800496e:	bf00      	nop
 8004970:	50040000 	.word	0x50040000
 8004974:	50040100 	.word	0x50040100
 8004978:	50040300 	.word	0x50040300
 800497c:	50040200 	.word	0x50040200

08004980 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e0ed      	b.n	8004b6e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d102      	bne.n	80049a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fd f8e6 	bl	8001b70 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049b4:	f7fe fbe0 	bl	8003178 <HAL_GetTick>
 80049b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80049ba:	e012      	b.n	80049e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80049bc:	f7fe fbdc 	bl	8003178 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b0a      	cmp	r3, #10
 80049c8:	d90b      	bls.n	80049e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2205      	movs	r2, #5
 80049da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e0c5      	b.n	8004b6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0e5      	beq.n	80049bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0202 	bic.w	r2, r2, #2
 80049fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a00:	f7fe fbba 	bl	8003178 <HAL_GetTick>
 8004a04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a06:	e012      	b.n	8004a2e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a08:	f7fe fbb6 	bl	8003178 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b0a      	cmp	r3, #10
 8004a14:	d90b      	bls.n	8004a2e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2205      	movs	r2, #5
 8004a26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e09f      	b.n	8004b6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e5      	bne.n	8004a08 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	7e1b      	ldrb	r3, [r3, #24]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d108      	bne.n	8004a56 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	e007      	b.n	8004a66 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	7e5b      	ldrb	r3, [r3, #25]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d108      	bne.n	8004a80 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	e007      	b.n	8004a90 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	7e9b      	ldrb	r3, [r3, #26]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d108      	bne.n	8004aaa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0220 	orr.w	r2, r2, #32
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	e007      	b.n	8004aba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0220 	bic.w	r2, r2, #32
 8004ab8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	7edb      	ldrb	r3, [r3, #27]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d108      	bne.n	8004ad4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0210 	bic.w	r2, r2, #16
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	e007      	b.n	8004ae4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0210 	orr.w	r2, r2, #16
 8004ae2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	7f1b      	ldrb	r3, [r3, #28]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d108      	bne.n	8004afe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0208 	orr.w	r2, r2, #8
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	e007      	b.n	8004b0e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0208 	bic.w	r2, r2, #8
 8004b0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	7f5b      	ldrb	r3, [r3, #29]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d108      	bne.n	8004b28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0204 	orr.w	r2, r2, #4
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e007      	b.n	8004b38 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0204 	bic.w	r2, r2, #4
 8004b36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	ea42 0103 	orr.w	r1, r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	1e5a      	subs	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b8e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004b90:	7cfb      	ldrb	r3, [r7, #19]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d003      	beq.n	8004b9e <HAL_CAN_ConfigFilter+0x26>
 8004b96:	7cfb      	ldrb	r3, [r7, #19]
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	f040 80be 	bne.w	8004d1a <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004b9e:	4b65      	ldr	r3, [pc, #404]	@ (8004d34 <HAL_CAN_ConfigFilter+0x1bc>)
 8004ba0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004ba8:	f043 0201 	orr.w	r2, r3, #1
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004bb8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	2201      	movs	r2, #1
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	401a      	ands	r2, r3
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d123      	bne.n	8004c48 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	401a      	ands	r2, r3
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	3248      	adds	r2, #72	@ 0x48
 8004c28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c3e:	6979      	ldr	r1, [r7, #20]
 8004c40:	3348      	adds	r3, #72	@ 0x48
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	440b      	add	r3, r1
 8004c46:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d122      	bne.n	8004c96 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004c70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	3248      	adds	r2, #72	@ 0x48
 8004c76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c8c:	6979      	ldr	r1, [r7, #20]
 8004c8e:	3348      	adds	r3, #72	@ 0x48
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	440b      	add	r3, r1
 8004c94:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d109      	bne.n	8004cb2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	401a      	ands	r2, r3
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004cb0:	e007      	b.n	8004cc2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	401a      	ands	r2, r3
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004cdc:	e007      	b.n	8004cee <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d107      	bne.n	8004d06 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004d0c:	f023 0201 	bic.w	r2, r3, #1
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	e006      	b.n	8004d28 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
  }
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	40006400 	.word	0x40006400

08004d38 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d12e      	bne.n	8004daa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0201 	bic.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d64:	f7fe fa08 	bl	8003178 <HAL_GetTick>
 8004d68:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004d6a:	e012      	b.n	8004d92 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d6c:	f7fe fa04 	bl	8003178 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b0a      	cmp	r3, #10
 8004d78:	d90b      	bls.n	8004d92 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2205      	movs	r2, #5
 8004d8a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e012      	b.n	8004db8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e5      	bne.n	8004d6c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e006      	b.n	8004db8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dae:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
  }
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b089      	sub	sp, #36	@ 0x24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dd4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004dde:	7ffb      	ldrb	r3, [r7, #31]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d003      	beq.n	8004dec <HAL_CAN_AddTxMessage+0x2c>
 8004de4:	7ffb      	ldrb	r3, [r7, #31]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	f040 80ad 	bne.w	8004f46 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10a      	bne.n	8004e0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d105      	bne.n	8004e0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 8095 	beq.w	8004f36 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	0e1b      	lsrs	r3, r3, #24
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004e16:	2201      	movs	r2, #1
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	409a      	lsls	r2, r3
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10d      	bne.n	8004e44 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e32:	68f9      	ldr	r1, [r7, #12]
 8004e34:	6809      	ldr	r1, [r1, #0]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	3318      	adds	r3, #24
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	440b      	add	r3, r1
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	e00f      	b.n	8004e64 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e4e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e54:	68f9      	ldr	r1, [r7, #12]
 8004e56:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004e58:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	3318      	adds	r3, #24
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	440b      	add	r3, r1
 8004e62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6819      	ldr	r1, [r3, #0]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	3318      	adds	r3, #24
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	440b      	add	r3, r1
 8004e74:	3304      	adds	r3, #4
 8004e76:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	7d1b      	ldrb	r3, [r3, #20]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d111      	bne.n	8004ea4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	3318      	adds	r3, #24
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	4413      	add	r3, r2
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	6811      	ldr	r1, [r2, #0]
 8004e94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	3318      	adds	r3, #24
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	440b      	add	r3, r1
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3307      	adds	r3, #7
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	061a      	lsls	r2, r3, #24
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3306      	adds	r3, #6
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	041b      	lsls	r3, r3, #16
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3305      	adds	r3, #5
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	3204      	adds	r2, #4
 8004ec4:	7812      	ldrb	r2, [r2, #0]
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	6811      	ldr	r1, [r2, #0]
 8004ecc:	ea43 0200 	orr.w	r2, r3, r0
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	440b      	add	r3, r1
 8004ed6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004eda:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3303      	adds	r3, #3
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	061a      	lsls	r2, r3, #24
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3302      	adds	r3, #2
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	041b      	lsls	r3, r3, #16
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	7812      	ldrb	r2, [r2, #0]
 8004efc:	4610      	mov	r0, r2
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	6811      	ldr	r1, [r2, #0]
 8004f02:	ea43 0200 	orr.w	r2, r3, r0
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	440b      	add	r3, r1
 8004f0c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004f10:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	3318      	adds	r3, #24
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	4413      	add	r3, r2
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	6811      	ldr	r1, [r2, #0]
 8004f24:	f043 0201 	orr.w	r2, r3, #1
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	3318      	adds	r3, #24
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	440b      	add	r3, r1
 8004f30:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e00e      	b.n	8004f54 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e006      	b.n	8004f54 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
  }
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3724      	adds	r7, #36	@ 0x24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f72:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004f74:	7afb      	ldrb	r3, [r7, #11]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d002      	beq.n	8004f80 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004f7a:	7afb      	ldrb	r3, [r7, #11]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d11d      	bne.n	8004fbc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3301      	adds	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b085      	sub	sp, #20
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fda:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d002      	beq.n	8004fe8 <HAL_CAN_ActivateNotification+0x1e>
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d109      	bne.n	8004ffc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6959      	ldr	r1, [r3, #20]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e006      	b.n	800500a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005000:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
  }
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
	...

08005018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005028:	4b0c      	ldr	r3, [pc, #48]	@ (800505c <__NVIC_SetPriorityGrouping+0x44>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005034:	4013      	ands	r3, r2
 8005036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005040:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800504a:	4a04      	ldr	r2, [pc, #16]	@ (800505c <__NVIC_SetPriorityGrouping+0x44>)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	60d3      	str	r3, [r2, #12]
}
 8005050:	bf00      	nop
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	e000ed00 	.word	0xe000ed00

08005060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005064:	4b04      	ldr	r3, [pc, #16]	@ (8005078 <__NVIC_GetPriorityGrouping+0x18>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	0a1b      	lsrs	r3, r3, #8
 800506a:	f003 0307 	and.w	r3, r3, #7
}
 800506e:	4618      	mov	r0, r3
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	e000ed00 	.word	0xe000ed00

0800507c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	4603      	mov	r3, r0
 8005084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800508a:	2b00      	cmp	r3, #0
 800508c:	db0b      	blt.n	80050a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	f003 021f 	and.w	r2, r3, #31
 8005094:	4907      	ldr	r1, [pc, #28]	@ (80050b4 <__NVIC_EnableIRQ+0x38>)
 8005096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509a:	095b      	lsrs	r3, r3, #5
 800509c:	2001      	movs	r0, #1
 800509e:	fa00 f202 	lsl.w	r2, r0, r2
 80050a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	e000e100 	.word	0xe000e100

080050b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	4603      	mov	r3, r0
 80050c0:	6039      	str	r1, [r7, #0]
 80050c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	db0a      	blt.n	80050e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	490c      	ldr	r1, [pc, #48]	@ (8005104 <__NVIC_SetPriority+0x4c>)
 80050d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d6:	0112      	lsls	r2, r2, #4
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	440b      	add	r3, r1
 80050dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050e0:	e00a      	b.n	80050f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	4908      	ldr	r1, [pc, #32]	@ (8005108 <__NVIC_SetPriority+0x50>)
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	f003 030f 	and.w	r3, r3, #15
 80050ee:	3b04      	subs	r3, #4
 80050f0:	0112      	lsls	r2, r2, #4
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	440b      	add	r3, r1
 80050f6:	761a      	strb	r2, [r3, #24]
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	e000e100 	.word	0xe000e100
 8005108:	e000ed00 	.word	0xe000ed00

0800510c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800510c:	b480      	push	{r7}
 800510e:	b089      	sub	sp, #36	@ 0x24
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f1c3 0307 	rsb	r3, r3, #7
 8005126:	2b04      	cmp	r3, #4
 8005128:	bf28      	it	cs
 800512a:	2304      	movcs	r3, #4
 800512c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	3304      	adds	r3, #4
 8005132:	2b06      	cmp	r3, #6
 8005134:	d902      	bls.n	800513c <NVIC_EncodePriority+0x30>
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	3b03      	subs	r3, #3
 800513a:	e000      	b.n	800513e <NVIC_EncodePriority+0x32>
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005140:	f04f 32ff 	mov.w	r2, #4294967295
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	43da      	mvns	r2, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	401a      	ands	r2, r3
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005154:	f04f 31ff 	mov.w	r1, #4294967295
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	fa01 f303 	lsl.w	r3, r1, r3
 800515e:	43d9      	mvns	r1, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005164:	4313      	orrs	r3, r2
         );
}
 8005166:	4618      	mov	r0, r3
 8005168:	3724      	adds	r7, #36	@ 0x24
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff ff4c 	bl	8005018 <__NVIC_SetPriorityGrouping>
}
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800519a:	f7ff ff61 	bl	8005060 <__NVIC_GetPriorityGrouping>
 800519e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	68b9      	ldr	r1, [r7, #8]
 80051a4:	6978      	ldr	r0, [r7, #20]
 80051a6:	f7ff ffb1 	bl	800510c <NVIC_EncodePriority>
 80051aa:	4602      	mov	r2, r0
 80051ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051b0:	4611      	mov	r1, r2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff ff80 	bl	80050b8 <__NVIC_SetPriority>
}
 80051b8:	bf00      	nop
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff ff54 	bl	800507c <__NVIC_EnableIRQ>
}
 80051d4:	bf00      	nop
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e098      	b.n	8005320 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	4b4d      	ldr	r3, [pc, #308]	@ (800532c <HAL_DMA_Init+0x150>)
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d80f      	bhi.n	800521a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	4b4b      	ldr	r3, [pc, #300]	@ (8005330 <HAL_DMA_Init+0x154>)
 8005202:	4413      	add	r3, r2
 8005204:	4a4b      	ldr	r2, [pc, #300]	@ (8005334 <HAL_DMA_Init+0x158>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	091b      	lsrs	r3, r3, #4
 800520c:	009a      	lsls	r2, r3, #2
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a48      	ldr	r2, [pc, #288]	@ (8005338 <HAL_DMA_Init+0x15c>)
 8005216:	641a      	str	r2, [r3, #64]	@ 0x40
 8005218:	e00e      	b.n	8005238 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	4b46      	ldr	r3, [pc, #280]	@ (800533c <HAL_DMA_Init+0x160>)
 8005222:	4413      	add	r3, r2
 8005224:	4a43      	ldr	r2, [pc, #268]	@ (8005334 <HAL_DMA_Init+0x158>)
 8005226:	fba2 2303 	umull	r2, r3, r2, r3
 800522a:	091b      	lsrs	r3, r3, #4
 800522c:	009a      	lsls	r2, r3, #2
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a42      	ldr	r2, [pc, #264]	@ (8005340 <HAL_DMA_Init+0x164>)
 8005236:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800524e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005252:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800525c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005292:	d039      	beq.n	8005308 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005298:	4a27      	ldr	r2, [pc, #156]	@ (8005338 <HAL_DMA_Init+0x15c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d11a      	bne.n	80052d4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800529e:	4b29      	ldr	r3, [pc, #164]	@ (8005344 <HAL_DMA_Init+0x168>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a6:	f003 031c 	and.w	r3, r3, #28
 80052aa:	210f      	movs	r1, #15
 80052ac:	fa01 f303 	lsl.w	r3, r1, r3
 80052b0:	43db      	mvns	r3, r3
 80052b2:	4924      	ldr	r1, [pc, #144]	@ (8005344 <HAL_DMA_Init+0x168>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80052b8:	4b22      	ldr	r3, [pc, #136]	@ (8005344 <HAL_DMA_Init+0x168>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6859      	ldr	r1, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c4:	f003 031c 	and.w	r3, r3, #28
 80052c8:	fa01 f303 	lsl.w	r3, r1, r3
 80052cc:	491d      	ldr	r1, [pc, #116]	@ (8005344 <HAL_DMA_Init+0x168>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	600b      	str	r3, [r1, #0]
 80052d2:	e019      	b.n	8005308 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80052d4:	4b1c      	ldr	r3, [pc, #112]	@ (8005348 <HAL_DMA_Init+0x16c>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052dc:	f003 031c 	and.w	r3, r3, #28
 80052e0:	210f      	movs	r1, #15
 80052e2:	fa01 f303 	lsl.w	r3, r1, r3
 80052e6:	43db      	mvns	r3, r3
 80052e8:	4917      	ldr	r1, [pc, #92]	@ (8005348 <HAL_DMA_Init+0x16c>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80052ee:	4b16      	ldr	r3, [pc, #88]	@ (8005348 <HAL_DMA_Init+0x16c>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6859      	ldr	r1, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fa:	f003 031c 	and.w	r3, r3, #28
 80052fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005302:	4911      	ldr	r1, [pc, #68]	@ (8005348 <HAL_DMA_Init+0x16c>)
 8005304:	4313      	orrs	r3, r2
 8005306:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	40020407 	.word	0x40020407
 8005330:	bffdfff8 	.word	0xbffdfff8
 8005334:	cccccccd 	.word	0xcccccccd
 8005338:	40020000 	.word	0x40020000
 800533c:	bffdfbf8 	.word	0xbffdfbf8
 8005340:	40020400 	.word	0x40020400
 8005344:	400200a8 	.word	0x400200a8
 8005348:	400204a8 	.word	0x400204a8

0800534c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_DMA_Start_IT+0x20>
 8005368:	2302      	movs	r3, #2
 800536a:	e04b      	b.n	8005404 <HAL_DMA_Start_IT+0xb8>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	d13a      	bne.n	80053f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0201 	bic.w	r2, r2, #1
 800539c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 f95f 	bl	8005668 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d008      	beq.n	80053c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 020e 	orr.w	r2, r2, #14
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	e00f      	b.n	80053e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0204 	bic.w	r2, r2, #4
 80053d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 020a 	orr.w	r2, r2, #10
 80053e2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0201 	orr.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	e005      	b.n	8005402 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80053fe:	2302      	movs	r3, #2
 8005400:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005402:	7dfb      	ldrb	r3, [r7, #23]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d008      	beq.n	8005436 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2204      	movs	r2, #4
 8005428:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e022      	b.n	800547c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 020e 	bic.w	r2, r2, #14
 8005444:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0201 	bic.w	r2, r2, #1
 8005454:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545a:	f003 021c 	and.w	r2, r3, #28
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005462:	2101      	movs	r1, #1
 8005464:	fa01 f202 	lsl.w	r2, r1, r2
 8005468:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800547a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d005      	beq.n	80054ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2204      	movs	r2, #4
 80054a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	73fb      	strb	r3, [r7, #15]
 80054aa:	e029      	b.n	8005500 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 020e 	bic.w	r2, r2, #14
 80054ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0201 	bic.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d0:	f003 021c 	and.w	r2, r3, #28
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d8:	2101      	movs	r1, #1
 80054da:	fa01 f202 	lsl.w	r2, r1, r2
 80054de:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	4798      	blx	r3
    }
  }
  return status;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005526:	f003 031c 	and.w	r3, r3, #28
 800552a:	2204      	movs	r2, #4
 800552c:	409a      	lsls	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4013      	ands	r3, r2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d026      	beq.n	8005584 <HAL_DMA_IRQHandler+0x7a>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d021      	beq.n	8005584 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0320 	and.w	r3, r3, #32
 800554a:	2b00      	cmp	r3, #0
 800554c:	d107      	bne.n	800555e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0204 	bic.w	r2, r2, #4
 800555c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005562:	f003 021c 	and.w	r2, r3, #28
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556a:	2104      	movs	r1, #4
 800556c:	fa01 f202 	lsl.w	r2, r1, r2
 8005570:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005576:	2b00      	cmp	r3, #0
 8005578:	d071      	beq.n	800565e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005582:	e06c      	b.n	800565e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005588:	f003 031c 	and.w	r3, r3, #28
 800558c:	2202      	movs	r2, #2
 800558e:	409a      	lsls	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4013      	ands	r3, r2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d02e      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xec>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d029      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10b      	bne.n	80055c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 020a 	bic.w	r2, r2, #10
 80055be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055cc:	f003 021c 	and.w	r2, r3, #28
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d4:	2102      	movs	r1, #2
 80055d6:	fa01 f202 	lsl.w	r2, r1, r2
 80055da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d038      	beq.n	800565e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80055f4:	e033      	b.n	800565e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fa:	f003 031c 	and.w	r3, r3, #28
 80055fe:	2208      	movs	r2, #8
 8005600:	409a      	lsls	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4013      	ands	r3, r2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d02a      	beq.n	8005660 <HAL_DMA_IRQHandler+0x156>
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b00      	cmp	r3, #0
 8005612:	d025      	beq.n	8005660 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 020e 	bic.w	r2, r2, #14
 8005622:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005628:	f003 021c 	and.w	r2, r3, #28
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005630:	2101      	movs	r1, #1
 8005632:	fa01 f202 	lsl.w	r2, r1, r2
 8005636:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800565e:	bf00      	nop
 8005660:	bf00      	nop
}
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567a:	f003 021c 	and.w	r2, r3, #28
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005682:	2101      	movs	r1, #1
 8005684:	fa01 f202 	lsl.w	r2, r1, r2
 8005688:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b10      	cmp	r3, #16
 8005698:	d108      	bne.n	80056ac <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80056aa:	e007      	b.n	80056bc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	60da      	str	r2, [r3, #12]
}
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056d6:	e166      	b.n	80059a6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	2101      	movs	r1, #1
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	fa01 f303 	lsl.w	r3, r1, r3
 80056e4:	4013      	ands	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 8158 	beq.w	80059a0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d005      	beq.n	8005708 <HAL_GPIO_Init+0x40>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d130      	bne.n	800576a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	2203      	movs	r2, #3
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	43db      	mvns	r3, r3
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4013      	ands	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800573e:	2201      	movs	r2, #1
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	fa02 f303 	lsl.w	r3, r2, r3
 8005746:	43db      	mvns	r3, r3
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4013      	ands	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	091b      	lsrs	r3, r3, #4
 8005754:	f003 0201 	and.w	r2, r3, #1
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	fa02 f303 	lsl.w	r3, r2, r3
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	2b03      	cmp	r3, #3
 8005774:	d017      	beq.n	80057a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	2203      	movs	r2, #3
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	43db      	mvns	r3, r3
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4013      	ands	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d123      	bne.n	80057fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	08da      	lsrs	r2, r3, #3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3208      	adds	r2, #8
 80057ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	220f      	movs	r2, #15
 80057ca:	fa02 f303 	lsl.w	r3, r2, r3
 80057ce:	43db      	mvns	r3, r3
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4013      	ands	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	08da      	lsrs	r2, r3, #3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3208      	adds	r2, #8
 80057f4:	6939      	ldr	r1, [r7, #16]
 80057f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	2203      	movs	r2, #3
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	43db      	mvns	r3, r3
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4013      	ands	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f003 0203 	and.w	r2, r3, #3
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	fa02 f303 	lsl.w	r3, r2, r3
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 80b2 	beq.w	80059a0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800583c:	4b61      	ldr	r3, [pc, #388]	@ (80059c4 <HAL_GPIO_Init+0x2fc>)
 800583e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005840:	4a60      	ldr	r2, [pc, #384]	@ (80059c4 <HAL_GPIO_Init+0x2fc>)
 8005842:	f043 0301 	orr.w	r3, r3, #1
 8005846:	6613      	str	r3, [r2, #96]	@ 0x60
 8005848:	4b5e      	ldr	r3, [pc, #376]	@ (80059c4 <HAL_GPIO_Init+0x2fc>)
 800584a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	60bb      	str	r3, [r7, #8]
 8005852:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005854:	4a5c      	ldr	r2, [pc, #368]	@ (80059c8 <HAL_GPIO_Init+0x300>)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	089b      	lsrs	r3, r3, #2
 800585a:	3302      	adds	r3, #2
 800585c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005860:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	220f      	movs	r2, #15
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	43db      	mvns	r3, r3
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4013      	ands	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800587e:	d02b      	beq.n	80058d8 <HAL_GPIO_Init+0x210>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a52      	ldr	r2, [pc, #328]	@ (80059cc <HAL_GPIO_Init+0x304>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d025      	beq.n	80058d4 <HAL_GPIO_Init+0x20c>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a51      	ldr	r2, [pc, #324]	@ (80059d0 <HAL_GPIO_Init+0x308>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d01f      	beq.n	80058d0 <HAL_GPIO_Init+0x208>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a50      	ldr	r2, [pc, #320]	@ (80059d4 <HAL_GPIO_Init+0x30c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d019      	beq.n	80058cc <HAL_GPIO_Init+0x204>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a4f      	ldr	r2, [pc, #316]	@ (80059d8 <HAL_GPIO_Init+0x310>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d013      	beq.n	80058c8 <HAL_GPIO_Init+0x200>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a4e      	ldr	r2, [pc, #312]	@ (80059dc <HAL_GPIO_Init+0x314>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00d      	beq.n	80058c4 <HAL_GPIO_Init+0x1fc>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a4d      	ldr	r2, [pc, #308]	@ (80059e0 <HAL_GPIO_Init+0x318>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d007      	beq.n	80058c0 <HAL_GPIO_Init+0x1f8>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a4c      	ldr	r2, [pc, #304]	@ (80059e4 <HAL_GPIO_Init+0x31c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d101      	bne.n	80058bc <HAL_GPIO_Init+0x1f4>
 80058b8:	2307      	movs	r3, #7
 80058ba:	e00e      	b.n	80058da <HAL_GPIO_Init+0x212>
 80058bc:	2308      	movs	r3, #8
 80058be:	e00c      	b.n	80058da <HAL_GPIO_Init+0x212>
 80058c0:	2306      	movs	r3, #6
 80058c2:	e00a      	b.n	80058da <HAL_GPIO_Init+0x212>
 80058c4:	2305      	movs	r3, #5
 80058c6:	e008      	b.n	80058da <HAL_GPIO_Init+0x212>
 80058c8:	2304      	movs	r3, #4
 80058ca:	e006      	b.n	80058da <HAL_GPIO_Init+0x212>
 80058cc:	2303      	movs	r3, #3
 80058ce:	e004      	b.n	80058da <HAL_GPIO_Init+0x212>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e002      	b.n	80058da <HAL_GPIO_Init+0x212>
 80058d4:	2301      	movs	r3, #1
 80058d6:	e000      	b.n	80058da <HAL_GPIO_Init+0x212>
 80058d8:	2300      	movs	r3, #0
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	f002 0203 	and.w	r2, r2, #3
 80058e0:	0092      	lsls	r2, r2, #2
 80058e2:	4093      	lsls	r3, r2
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80058ea:	4937      	ldr	r1, [pc, #220]	@ (80059c8 <HAL_GPIO_Init+0x300>)
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	089b      	lsrs	r3, r3, #2
 80058f0:	3302      	adds	r3, #2
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058f8:	4b3b      	ldr	r3, [pc, #236]	@ (80059e8 <HAL_GPIO_Init+0x320>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	43db      	mvns	r3, r3
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4013      	ands	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800591c:	4a32      	ldr	r2, [pc, #200]	@ (80059e8 <HAL_GPIO_Init+0x320>)
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005922:	4b31      	ldr	r3, [pc, #196]	@ (80059e8 <HAL_GPIO_Init+0x320>)
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	43db      	mvns	r3, r3
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4013      	ands	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005946:	4a28      	ldr	r2, [pc, #160]	@ (80059e8 <HAL_GPIO_Init+0x320>)
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800594c:	4b26      	ldr	r3, [pc, #152]	@ (80059e8 <HAL_GPIO_Init+0x320>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	43db      	mvns	r3, r3
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4013      	ands	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005970:	4a1d      	ldr	r2, [pc, #116]	@ (80059e8 <HAL_GPIO_Init+0x320>)
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005976:	4b1c      	ldr	r3, [pc, #112]	@ (80059e8 <HAL_GPIO_Init+0x320>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	43db      	mvns	r3, r3
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	4013      	ands	r3, r2
 8005984:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800599a:	4a13      	ldr	r2, [pc, #76]	@ (80059e8 <HAL_GPIO_Init+0x320>)
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	3301      	adds	r3, #1
 80059a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	fa22 f303 	lsr.w	r3, r2, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f47f ae91 	bne.w	80056d8 <HAL_GPIO_Init+0x10>
  }
}
 80059b6:	bf00      	nop
 80059b8:	bf00      	nop
 80059ba:	371c      	adds	r7, #28
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	40021000 	.word	0x40021000
 80059c8:	40010000 	.word	0x40010000
 80059cc:	48000400 	.word	0x48000400
 80059d0:	48000800 	.word	0x48000800
 80059d4:	48000c00 	.word	0x48000c00
 80059d8:	48001000 	.word	0x48001000
 80059dc:	48001400 	.word	0x48001400
 80059e0:	48001800 	.word	0x48001800
 80059e4:	48001c00 	.word	0x48001c00
 80059e8:	40010400 	.word	0x40010400

080059ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	460b      	mov	r3, r1
 80059f6:	807b      	strh	r3, [r7, #2]
 80059f8:	4613      	mov	r3, r2
 80059fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059fc:	787b      	ldrb	r3, [r7, #1]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a02:	887a      	ldrh	r2, [r7, #2]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a08:	e002      	b.n	8005a10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a0a:	887a      	ldrh	r2, [r7, #2]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a2e:	887a      	ldrh	r2, [r7, #2]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4013      	ands	r3, r2
 8005a34:	041a      	lsls	r2, r3, #16
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	43d9      	mvns	r1, r3
 8005a3a:	887b      	ldrh	r3, [r7, #2]
 8005a3c:	400b      	ands	r3, r1
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	619a      	str	r2, [r3, #24]
}
 8005a44:	bf00      	nop
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a5a:	4b08      	ldr	r3, [pc, #32]	@ (8005a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a5c:	695a      	ldr	r2, [r3, #20]
 8005a5e:	88fb      	ldrh	r3, [r7, #6]
 8005a60:	4013      	ands	r3, r2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d006      	beq.n	8005a74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a66:	4a05      	ldr	r2, [pc, #20]	@ (8005a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a68:	88fb      	ldrh	r3, [r7, #6]
 8005a6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a6c:	88fb      	ldrh	r3, [r7, #6]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fb fbe6 	bl	8001240 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a74:	bf00      	nop
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	40010400 	.word	0x40010400

08005a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e08d      	b.n	8005bae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d106      	bne.n	8005aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7fc f918 	bl	8001cdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2224      	movs	r2, #36	@ 0x24
 8005ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0201 	bic.w	r2, r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ad0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ae0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d107      	bne.n	8005afa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005af6:	609a      	str	r2, [r3, #8]
 8005af8:	e006      	b.n	8005b08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005b06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d108      	bne.n	8005b22 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b1e:	605a      	str	r2, [r3, #4]
 8005b20:	e007      	b.n	8005b32 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6812      	ldr	r2, [r2, #0]
 8005b3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69d9      	ldr	r1, [r3, #28]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1a      	ldr	r2, [r3, #32]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0201 	orr.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	817b      	strh	r3, [r7, #10]
 8005bca:	460b      	mov	r3, r1
 8005bcc:	813b      	strh	r3, [r7, #8]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	f040 80f9 	bne.w	8005dd2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <HAL_I2C_Mem_Write+0x34>
 8005be6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d105      	bne.n	8005bf8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bf2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0ed      	b.n	8005dd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_I2C_Mem_Write+0x4e>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e0e6      	b.n	8005dd4 <HAL_I2C_Mem_Write+0x21c>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c0e:	f7fd fab3 	bl	8003178 <HAL_GetTick>
 8005c12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	2319      	movs	r3, #25
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 fac3 	bl	80061ac <I2C_WaitOnFlagUntilTimeout>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e0d1      	b.n	8005dd4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2221      	movs	r2, #33	@ 0x21
 8005c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2240      	movs	r2, #64	@ 0x40
 8005c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a3a      	ldr	r2, [r7, #32]
 8005c4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005c50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c58:	88f8      	ldrh	r0, [r7, #6]
 8005c5a:	893a      	ldrh	r2, [r7, #8]
 8005c5c:	8979      	ldrh	r1, [r7, #10]
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	9301      	str	r3, [sp, #4]
 8005c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	4603      	mov	r3, r0
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 f9d3 	bl	8006014 <I2C_RequestMemoryWrite>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d005      	beq.n	8005c80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e0a9      	b.n	8005dd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2bff      	cmp	r3, #255	@ 0xff
 8005c88:	d90e      	bls.n	8005ca8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	22ff      	movs	r2, #255	@ 0xff
 8005c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	8979      	ldrh	r1, [r7, #10]
 8005c98:	2300      	movs	r3, #0
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 fc47 	bl	8006534 <I2C_TransferConfig>
 8005ca6:	e00f      	b.n	8005cc8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	8979      	ldrh	r1, [r7, #10]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 fc36 	bl	8006534 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 fac6 	bl	800625e <I2C_WaitOnTXISFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e07b      	b.n	8005dd4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce0:	781a      	ldrb	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d034      	beq.n	8005d80 <HAL_I2C_Mem_Write+0x1c8>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d130      	bne.n	8005d80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d24:	2200      	movs	r2, #0
 8005d26:	2180      	movs	r1, #128	@ 0x80
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 fa3f 	bl	80061ac <I2C_WaitOnFlagUntilTimeout>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e04d      	b.n	8005dd4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2bff      	cmp	r3, #255	@ 0xff
 8005d40:	d90e      	bls.n	8005d60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	22ff      	movs	r2, #255	@ 0xff
 8005d46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	8979      	ldrh	r1, [r7, #10]
 8005d50:	2300      	movs	r3, #0
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 fbeb 	bl	8006534 <I2C_TransferConfig>
 8005d5e:	e00f      	b.n	8005d80 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	8979      	ldrh	r1, [r7, #10]
 8005d72:	2300      	movs	r3, #0
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 fbda 	bl	8006534 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d19e      	bne.n	8005cc8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 faac 	bl	80062ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e01a      	b.n	8005dd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2220      	movs	r2, #32
 8005da4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6859      	ldr	r1, [r3, #4]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	4b0a      	ldr	r3, [pc, #40]	@ (8005ddc <HAL_I2C_Mem_Write+0x224>)
 8005db2:	400b      	ands	r3, r1
 8005db4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	e000      	b.n	8005dd4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005dd2:	2302      	movs	r3, #2
  }
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	fe00e800 	.word	0xfe00e800

08005de0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	4608      	mov	r0, r1
 8005dea:	4611      	mov	r1, r2
 8005dec:	461a      	mov	r2, r3
 8005dee:	4603      	mov	r3, r0
 8005df0:	817b      	strh	r3, [r7, #10]
 8005df2:	460b      	mov	r3, r1
 8005df4:	813b      	strh	r3, [r7, #8]
 8005df6:	4613      	mov	r3, r2
 8005df8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	f040 80fd 	bne.w	8006002 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <HAL_I2C_Mem_Read+0x34>
 8005e0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d105      	bne.n	8005e20 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e1a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e0f1      	b.n	8006004 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_I2C_Mem_Read+0x4e>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e0ea      	b.n	8006004 <HAL_I2C_Mem_Read+0x224>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e36:	f7fd f99f 	bl	8003178 <HAL_GetTick>
 8005e3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	2319      	movs	r3, #25
 8005e42:	2201      	movs	r2, #1
 8005e44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 f9af 	bl	80061ac <I2C_WaitOnFlagUntilTimeout>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e0d5      	b.n	8006004 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2222      	movs	r2, #34	@ 0x22
 8005e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2240      	movs	r2, #64	@ 0x40
 8005e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a3a      	ldr	r2, [r7, #32]
 8005e72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e80:	88f8      	ldrh	r0, [r7, #6]
 8005e82:	893a      	ldrh	r2, [r7, #8]
 8005e84:	8979      	ldrh	r1, [r7, #10]
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	9301      	str	r3, [sp, #4]
 8005e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	4603      	mov	r3, r0
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 f913 	bl	80060bc <I2C_RequestMemoryRead>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e0ad      	b.n	8006004 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	2bff      	cmp	r3, #255	@ 0xff
 8005eb0:	d90e      	bls.n	8005ed0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	8979      	ldrh	r1, [r7, #10]
 8005ec0:	4b52      	ldr	r3, [pc, #328]	@ (800600c <HAL_I2C_Mem_Read+0x22c>)
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 fb33 	bl	8006534 <I2C_TransferConfig>
 8005ece:	e00f      	b.n	8005ef0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	8979      	ldrh	r1, [r7, #10]
 8005ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800600c <HAL_I2C_Mem_Read+0x22c>)
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 fb22 	bl	8006534 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	2104      	movs	r1, #4
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 f956 	bl	80061ac <I2C_WaitOnFlagUntilTimeout>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e07c      	b.n	8006004 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	3b01      	subs	r3, #1
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d034      	beq.n	8005fb0 <HAL_I2C_Mem_Read+0x1d0>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d130      	bne.n	8005fb0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f54:	2200      	movs	r2, #0
 8005f56:	2180      	movs	r1, #128	@ 0x80
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f927 	bl	80061ac <I2C_WaitOnFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e04d      	b.n	8006004 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2bff      	cmp	r3, #255	@ 0xff
 8005f70:	d90e      	bls.n	8005f90 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2201      	movs	r2, #1
 8005f76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	8979      	ldrh	r1, [r7, #10]
 8005f80:	2300      	movs	r3, #0
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 fad3 	bl	8006534 <I2C_TransferConfig>
 8005f8e:	e00f      	b.n	8005fb0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	8979      	ldrh	r1, [r7, #10]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 fac2 	bl	8006534 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d19a      	bne.n	8005ef0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f994 	bl	80062ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e01a      	b.n	8006004 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6859      	ldr	r1, [r3, #4]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8006010 <HAL_I2C_Mem_Read+0x230>)
 8005fe2:	400b      	ands	r3, r1
 8005fe4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	e000      	b.n	8006004 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006002:	2302      	movs	r3, #2
  }
}
 8006004:	4618      	mov	r0, r3
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	80002400 	.word	0x80002400
 8006010:	fe00e800 	.word	0xfe00e800

08006014 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af02      	add	r7, sp, #8
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	4608      	mov	r0, r1
 800601e:	4611      	mov	r1, r2
 8006020:	461a      	mov	r2, r3
 8006022:	4603      	mov	r3, r0
 8006024:	817b      	strh	r3, [r7, #10]
 8006026:	460b      	mov	r3, r1
 8006028:	813b      	strh	r3, [r7, #8]
 800602a:	4613      	mov	r3, r2
 800602c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800602e:	88fb      	ldrh	r3, [r7, #6]
 8006030:	b2da      	uxtb	r2, r3
 8006032:	8979      	ldrh	r1, [r7, #10]
 8006034:	4b20      	ldr	r3, [pc, #128]	@ (80060b8 <I2C_RequestMemoryWrite+0xa4>)
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fa79 	bl	8006534 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006042:	69fa      	ldr	r2, [r7, #28]
 8006044:	69b9      	ldr	r1, [r7, #24]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 f909 	bl	800625e <I2C_WaitOnTXISFlagUntilTimeout>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e02c      	b.n	80060b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006056:	88fb      	ldrh	r3, [r7, #6]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d105      	bne.n	8006068 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800605c:	893b      	ldrh	r3, [r7, #8]
 800605e:	b2da      	uxtb	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	629a      	str	r2, [r3, #40]	@ 0x28
 8006066:	e015      	b.n	8006094 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006068:	893b      	ldrh	r3, [r7, #8]
 800606a:	0a1b      	lsrs	r3, r3, #8
 800606c:	b29b      	uxth	r3, r3
 800606e:	b2da      	uxtb	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006076:	69fa      	ldr	r2, [r7, #28]
 8006078:	69b9      	ldr	r1, [r7, #24]
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 f8ef 	bl	800625e <I2C_WaitOnTXISFlagUntilTimeout>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e012      	b.n	80060b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800608a:	893b      	ldrh	r3, [r7, #8]
 800608c:	b2da      	uxtb	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	2200      	movs	r2, #0
 800609c:	2180      	movs	r1, #128	@ 0x80
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 f884 	bl	80061ac <I2C_WaitOnFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e000      	b.n	80060b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	80002000 	.word	0x80002000

080060bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af02      	add	r7, sp, #8
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	4608      	mov	r0, r1
 80060c6:	4611      	mov	r1, r2
 80060c8:	461a      	mov	r2, r3
 80060ca:	4603      	mov	r3, r0
 80060cc:	817b      	strh	r3, [r7, #10]
 80060ce:	460b      	mov	r3, r1
 80060d0:	813b      	strh	r3, [r7, #8]
 80060d2:	4613      	mov	r3, r2
 80060d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80060d6:	88fb      	ldrh	r3, [r7, #6]
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	8979      	ldrh	r1, [r7, #10]
 80060dc:	4b20      	ldr	r3, [pc, #128]	@ (8006160 <I2C_RequestMemoryRead+0xa4>)
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	2300      	movs	r3, #0
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 fa26 	bl	8006534 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	69b9      	ldr	r1, [r7, #24]
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f8b6 	bl	800625e <I2C_WaitOnTXISFlagUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e02c      	b.n	8006156 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060fc:	88fb      	ldrh	r3, [r7, #6]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d105      	bne.n	800610e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006102:	893b      	ldrh	r3, [r7, #8]
 8006104:	b2da      	uxtb	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	629a      	str	r2, [r3, #40]	@ 0x28
 800610c:	e015      	b.n	800613a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800610e:	893b      	ldrh	r3, [r7, #8]
 8006110:	0a1b      	lsrs	r3, r3, #8
 8006112:	b29b      	uxth	r3, r3
 8006114:	b2da      	uxtb	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	69b9      	ldr	r1, [r7, #24]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 f89c 	bl	800625e <I2C_WaitOnTXISFlagUntilTimeout>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e012      	b.n	8006156 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006130:	893b      	ldrh	r3, [r7, #8]
 8006132:	b2da      	uxtb	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2200      	movs	r2, #0
 8006142:	2140      	movs	r1, #64	@ 0x40
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 f831 	bl	80061ac <I2C_WaitOnFlagUntilTimeout>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	80002000 	.word	0x80002000

08006164 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b02      	cmp	r3, #2
 8006178:	d103      	bne.n	8006182 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2200      	movs	r2, #0
 8006180:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b01      	cmp	r3, #1
 800618e:	d007      	beq.n	80061a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0201 	orr.w	r2, r2, #1
 800619e:	619a      	str	r2, [r3, #24]
  }
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	603b      	str	r3, [r7, #0]
 80061b8:	4613      	mov	r3, r2
 80061ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061bc:	e03b      	b.n	8006236 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	6839      	ldr	r1, [r7, #0]
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 f8d6 	bl	8006374 <I2C_IsErrorOccurred>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e041      	b.n	8006256 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d8:	d02d      	beq.n	8006236 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061da:	f7fc ffcd 	bl	8003178 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d302      	bcc.n	80061f0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d122      	bne.n	8006236 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	4013      	ands	r3, r2
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	bf0c      	ite	eq
 8006200:	2301      	moveq	r3, #1
 8006202:	2300      	movne	r3, #0
 8006204:	b2db      	uxtb	r3, r3
 8006206:	461a      	mov	r2, r3
 8006208:	79fb      	ldrb	r3, [r7, #7]
 800620a:	429a      	cmp	r2, r3
 800620c:	d113      	bne.n	8006236 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006212:	f043 0220 	orr.w	r2, r3, #32
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2220      	movs	r2, #32
 800621e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e00f      	b.n	8006256 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	699a      	ldr	r2, [r3, #24]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	4013      	ands	r3, r2
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	429a      	cmp	r2, r3
 8006244:	bf0c      	ite	eq
 8006246:	2301      	moveq	r3, #1
 8006248:	2300      	movne	r3, #0
 800624a:	b2db      	uxtb	r3, r3
 800624c:	461a      	mov	r2, r3
 800624e:	79fb      	ldrb	r3, [r7, #7]
 8006250:	429a      	cmp	r2, r3
 8006252:	d0b4      	beq.n	80061be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800626a:	e033      	b.n	80062d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	68b9      	ldr	r1, [r7, #8]
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 f87f 	bl	8006374 <I2C_IsErrorOccurred>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e031      	b.n	80062e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006286:	d025      	beq.n	80062d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006288:	f7fc ff76 	bl	8003178 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	429a      	cmp	r2, r3
 8006296:	d302      	bcc.n	800629e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d11a      	bne.n	80062d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d013      	beq.n	80062d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b0:	f043 0220 	orr.w	r2, r3, #32
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e007      	b.n	80062e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d1c4      	bne.n	800626c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062f8:	e02f      	b.n	800635a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	68b9      	ldr	r1, [r7, #8]
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 f838 	bl	8006374 <I2C_IsErrorOccurred>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e02d      	b.n	800636a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630e:	f7fc ff33 	bl	8003178 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	429a      	cmp	r2, r3
 800631c:	d302      	bcc.n	8006324 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d11a      	bne.n	800635a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	2b20      	cmp	r3, #32
 8006330:	d013      	beq.n	800635a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006336:	f043 0220 	orr.w	r2, r3, #32
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e007      	b.n	800636a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b20      	cmp	r3, #32
 8006366:	d1c8      	bne.n	80062fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b08a      	sub	sp, #40	@ 0x28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	f003 0310 	and.w	r3, r3, #16
 800639c:	2b00      	cmp	r3, #0
 800639e:	d068      	beq.n	8006472 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2210      	movs	r2, #16
 80063a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063a8:	e049      	b.n	800643e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b0:	d045      	beq.n	800643e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80063b2:	f7fc fee1 	bl	8003178 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d302      	bcc.n	80063c8 <I2C_IsErrorOccurred+0x54>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d13a      	bne.n	800643e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ea:	d121      	bne.n	8006430 <I2C_IsErrorOccurred+0xbc>
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063f2:	d01d      	beq.n	8006430 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80063f4:	7cfb      	ldrb	r3, [r7, #19]
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	d01a      	beq.n	8006430 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006408:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800640a:	f7fc feb5 	bl	8003178 <HAL_GetTick>
 800640e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006410:	e00e      	b.n	8006430 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006412:	f7fc feb1 	bl	8003178 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	2b19      	cmp	r3, #25
 800641e:	d907      	bls.n	8006430 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	f043 0320 	orr.w	r3, r3, #32
 8006426:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800642e:	e006      	b.n	800643e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b20      	cmp	r3, #32
 800643c:	d1e9      	bne.n	8006412 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	f003 0320 	and.w	r3, r3, #32
 8006448:	2b20      	cmp	r3, #32
 800644a:	d003      	beq.n	8006454 <I2C_IsErrorOccurred+0xe0>
 800644c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0aa      	beq.n	80063aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006458:	2b00      	cmp	r3, #0
 800645a:	d103      	bne.n	8006464 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2220      	movs	r2, #32
 8006462:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	f043 0304 	orr.w	r3, r3, #4
 800646a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00b      	beq.n	800649c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	f043 0301 	orr.w	r3, r3, #1
 800648a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006494:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00b      	beq.n	80064be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	f043 0308 	orr.w	r3, r3, #8
 80064ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80064b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00b      	beq.n	80064e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	f043 0302 	orr.w	r3, r3, #2
 80064ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80064e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01c      	beq.n	8006522 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7ff fe3b 	bl	8006164 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6859      	ldr	r1, [r3, #4]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006530 <I2C_IsErrorOccurred+0x1bc>)
 80064fa:	400b      	ands	r3, r1
 80064fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	431a      	orrs	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2220      	movs	r2, #32
 800650e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006526:	4618      	mov	r0, r3
 8006528:	3728      	adds	r7, #40	@ 0x28
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	fe00e800 	.word	0xfe00e800

08006534 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	607b      	str	r3, [r7, #4]
 800653e:	460b      	mov	r3, r1
 8006540:	817b      	strh	r3, [r7, #10]
 8006542:	4613      	mov	r3, r2
 8006544:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006546:	897b      	ldrh	r3, [r7, #10]
 8006548:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800654c:	7a7b      	ldrb	r3, [r7, #9]
 800654e:	041b      	lsls	r3, r3, #16
 8006550:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006554:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	4313      	orrs	r3, r2
 800655e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006562:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	0d5b      	lsrs	r3, r3, #21
 800656e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006572:	4b08      	ldr	r3, [pc, #32]	@ (8006594 <I2C_TransferConfig+0x60>)
 8006574:	430b      	orrs	r3, r1
 8006576:	43db      	mvns	r3, r3
 8006578:	ea02 0103 	and.w	r1, r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	430a      	orrs	r2, r1
 8006584:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	03ff63ff 	.word	0x03ff63ff

08006598 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	d138      	bne.n	8006620 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d101      	bne.n	80065bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e032      	b.n	8006622 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2224      	movs	r2, #36	@ 0x24
 80065c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0201 	bic.w	r2, r2, #1
 80065da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80065ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6819      	ldr	r1, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0201 	orr.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2220      	movs	r2, #32
 8006610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800661c:	2300      	movs	r3, #0
 800661e:	e000      	b.n	8006622 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006620:	2302      	movs	r3, #2
  }
}
 8006622:	4618      	mov	r0, r3
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800662e:	b480      	push	{r7}
 8006630:	b085      	sub	sp, #20
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b20      	cmp	r3, #32
 8006642:	d139      	bne.n	80066b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800664a:	2b01      	cmp	r3, #1
 800664c:	d101      	bne.n	8006652 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800664e:	2302      	movs	r3, #2
 8006650:	e033      	b.n	80066ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2224      	movs	r2, #36	@ 0x24
 800665e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0201 	bic.w	r2, r2, #1
 8006670:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006680:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	021b      	lsls	r3, r3, #8
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	4313      	orrs	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f042 0201 	orr.w	r2, r2, #1
 80066a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	e000      	b.n	80066ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80066b8:	2302      	movs	r3, #2
  }
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
	...

080066c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80066c8:	b480      	push	{r7}
 80066ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80066cc:	4b04      	ldr	r3, [pc, #16]	@ (80066e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40007000 	.word	0x40007000

080066e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066f2:	d130      	bne.n	8006756 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80066f4:	4b23      	ldr	r3, [pc, #140]	@ (8006784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80066fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006700:	d038      	beq.n	8006774 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006702:	4b20      	ldr	r3, [pc, #128]	@ (8006784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800670a:	4a1e      	ldr	r2, [pc, #120]	@ (8006784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800670c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006710:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006712:	4b1d      	ldr	r3, [pc, #116]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2232      	movs	r2, #50	@ 0x32
 8006718:	fb02 f303 	mul.w	r3, r2, r3
 800671c:	4a1b      	ldr	r2, [pc, #108]	@ (800678c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800671e:	fba2 2303 	umull	r2, r3, r2, r3
 8006722:	0c9b      	lsrs	r3, r3, #18
 8006724:	3301      	adds	r3, #1
 8006726:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006728:	e002      	b.n	8006730 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3b01      	subs	r3, #1
 800672e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006730:	4b14      	ldr	r3, [pc, #80]	@ (8006784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800673c:	d102      	bne.n	8006744 <HAL_PWREx_ControlVoltageScaling+0x60>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1f2      	bne.n	800672a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006744:	4b0f      	ldr	r3, [pc, #60]	@ (8006784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800674c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006750:	d110      	bne.n	8006774 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e00f      	b.n	8006776 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006756:	4b0b      	ldr	r3, [pc, #44]	@ (8006784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800675e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006762:	d007      	beq.n	8006774 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006764:	4b07      	ldr	r3, [pc, #28]	@ (8006784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800676c:	4a05      	ldr	r2, [pc, #20]	@ (8006784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800676e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006772:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	40007000 	.word	0x40007000
 8006788:	20000000 	.word	0x20000000
 800678c:	431bde83 	.word	0x431bde83

08006790 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d102      	bne.n	80067a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	f000 bc08 	b.w	8006fb4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067a4:	4b96      	ldr	r3, [pc, #600]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 030c 	and.w	r3, r3, #12
 80067ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067ae:	4b94      	ldr	r3, [pc, #592]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0310 	and.w	r3, r3, #16
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 80e4 	beq.w	800698e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d007      	beq.n	80067dc <HAL_RCC_OscConfig+0x4c>
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	2b0c      	cmp	r3, #12
 80067d0:	f040 808b 	bne.w	80068ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	f040 8087 	bne.w	80068ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80067dc:	4b88      	ldr	r3, [pc, #544]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <HAL_RCC_OscConfig+0x64>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e3df      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a1a      	ldr	r2, [r3, #32]
 80067f8:	4b81      	ldr	r3, [pc, #516]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0308 	and.w	r3, r3, #8
 8006800:	2b00      	cmp	r3, #0
 8006802:	d004      	beq.n	800680e <HAL_RCC_OscConfig+0x7e>
 8006804:	4b7e      	ldr	r3, [pc, #504]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800680c:	e005      	b.n	800681a <HAL_RCC_OscConfig+0x8a>
 800680e:	4b7c      	ldr	r3, [pc, #496]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 8006810:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006814:	091b      	lsrs	r3, r3, #4
 8006816:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800681a:	4293      	cmp	r3, r2
 800681c:	d223      	bcs.n	8006866 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fdc4 	bl	80073b0 <RCC_SetFlashLatencyFromMSIRange>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e3c0      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006832:	4b73      	ldr	r3, [pc, #460]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a72      	ldr	r2, [pc, #456]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 8006838:	f043 0308 	orr.w	r3, r3, #8
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	4b70      	ldr	r3, [pc, #448]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	496d      	ldr	r1, [pc, #436]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 800684c:	4313      	orrs	r3, r2
 800684e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006850:	4b6b      	ldr	r3, [pc, #428]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	021b      	lsls	r3, r3, #8
 800685e:	4968      	ldr	r1, [pc, #416]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 8006860:	4313      	orrs	r3, r2
 8006862:	604b      	str	r3, [r1, #4]
 8006864:	e025      	b.n	80068b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006866:	4b66      	ldr	r3, [pc, #408]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a65      	ldr	r2, [pc, #404]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 800686c:	f043 0308 	orr.w	r3, r3, #8
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	4b63      	ldr	r3, [pc, #396]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	4960      	ldr	r1, [pc, #384]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 8006880:	4313      	orrs	r3, r2
 8006882:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006884:	4b5e      	ldr	r3, [pc, #376]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	021b      	lsls	r3, r3, #8
 8006892:	495b      	ldr	r1, [pc, #364]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 8006894:	4313      	orrs	r3, r2
 8006896:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d109      	bne.n	80068b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fd84 	bl	80073b0 <RCC_SetFlashLatencyFromMSIRange>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e380      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80068b2:	f000 fc87 	bl	80071c4 <HAL_RCC_GetSysClockFreq>
 80068b6:	4602      	mov	r2, r0
 80068b8:	4b51      	ldr	r3, [pc, #324]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	091b      	lsrs	r3, r3, #4
 80068be:	f003 030f 	and.w	r3, r3, #15
 80068c2:	4950      	ldr	r1, [pc, #320]	@ (8006a04 <HAL_RCC_OscConfig+0x274>)
 80068c4:	5ccb      	ldrb	r3, [r1, r3]
 80068c6:	f003 031f 	and.w	r3, r3, #31
 80068ca:	fa22 f303 	lsr.w	r3, r2, r3
 80068ce:	4a4e      	ldr	r2, [pc, #312]	@ (8006a08 <HAL_RCC_OscConfig+0x278>)
 80068d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80068d2:	4b4e      	ldr	r3, [pc, #312]	@ (8006a0c <HAL_RCC_OscConfig+0x27c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fb fac6 	bl	8001e68 <HAL_InitTick>
 80068dc:	4603      	mov	r3, r0
 80068de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d052      	beq.n	800698c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
 80068e8:	e364      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d032      	beq.n	8006958 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80068f2:	4b43      	ldr	r3, [pc, #268]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a42      	ldr	r2, [pc, #264]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 80068f8:	f043 0301 	orr.w	r3, r3, #1
 80068fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80068fe:	f7fc fc3b 	bl	8003178 <HAL_GetTick>
 8006902:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006904:	e008      	b.n	8006918 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006906:	f7fc fc37 	bl	8003178 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e34d      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006918:	4b39      	ldr	r3, [pc, #228]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b00      	cmp	r3, #0
 8006922:	d0f0      	beq.n	8006906 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006924:	4b36      	ldr	r3, [pc, #216]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a35      	ldr	r2, [pc, #212]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 800692a:	f043 0308 	orr.w	r3, r3, #8
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	4b33      	ldr	r3, [pc, #204]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	4930      	ldr	r1, [pc, #192]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 800693e:	4313      	orrs	r3, r2
 8006940:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006942:	4b2f      	ldr	r3, [pc, #188]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	021b      	lsls	r3, r3, #8
 8006950:	492b      	ldr	r1, [pc, #172]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 8006952:	4313      	orrs	r3, r2
 8006954:	604b      	str	r3, [r1, #4]
 8006956:	e01a      	b.n	800698e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006958:	4b29      	ldr	r3, [pc, #164]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a28      	ldr	r2, [pc, #160]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 800695e:	f023 0301 	bic.w	r3, r3, #1
 8006962:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006964:	f7fc fc08 	bl	8003178 <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800696c:	f7fc fc04 	bl	8003178 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e31a      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800697e:	4b20      	ldr	r3, [pc, #128]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1f0      	bne.n	800696c <HAL_RCC_OscConfig+0x1dc>
 800698a:	e000      	b.n	800698e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800698c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d073      	beq.n	8006a82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	2b08      	cmp	r3, #8
 800699e:	d005      	beq.n	80069ac <HAL_RCC_OscConfig+0x21c>
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	2b0c      	cmp	r3, #12
 80069a4:	d10e      	bne.n	80069c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	d10b      	bne.n	80069c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069ac:	4b14      	ldr	r3, [pc, #80]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d063      	beq.n	8006a80 <HAL_RCC_OscConfig+0x2f0>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d15f      	bne.n	8006a80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e2f7      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069cc:	d106      	bne.n	80069dc <HAL_RCC_OscConfig+0x24c>
 80069ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a0b      	ldr	r2, [pc, #44]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 80069d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	e025      	b.n	8006a28 <HAL_RCC_OscConfig+0x298>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069e4:	d114      	bne.n	8006a10 <HAL_RCC_OscConfig+0x280>
 80069e6:	4b06      	ldr	r3, [pc, #24]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a05      	ldr	r2, [pc, #20]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 80069ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069f0:	6013      	str	r3, [r2, #0]
 80069f2:	4b03      	ldr	r3, [pc, #12]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a02      	ldr	r2, [pc, #8]	@ (8006a00 <HAL_RCC_OscConfig+0x270>)
 80069f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	e013      	b.n	8006a28 <HAL_RCC_OscConfig+0x298>
 8006a00:	40021000 	.word	0x40021000
 8006a04:	0800cca8 	.word	0x0800cca8
 8006a08:	20000000 	.word	0x20000000
 8006a0c:	20000004 	.word	0x20000004
 8006a10:	4ba0      	ldr	r3, [pc, #640]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a9f      	ldr	r2, [pc, #636]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	4b9d      	ldr	r3, [pc, #628]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a9c      	ldr	r2, [pc, #624]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006a22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d013      	beq.n	8006a58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a30:	f7fc fba2 	bl	8003178 <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a38:	f7fc fb9e 	bl	8003178 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b64      	cmp	r3, #100	@ 0x64
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e2b4      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a4a:	4b92      	ldr	r3, [pc, #584]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0f0      	beq.n	8006a38 <HAL_RCC_OscConfig+0x2a8>
 8006a56:	e014      	b.n	8006a82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a58:	f7fc fb8e 	bl	8003178 <HAL_GetTick>
 8006a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a5e:	e008      	b.n	8006a72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a60:	f7fc fb8a 	bl	8003178 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	2b64      	cmp	r3, #100	@ 0x64
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e2a0      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a72:	4b88      	ldr	r3, [pc, #544]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1f0      	bne.n	8006a60 <HAL_RCC_OscConfig+0x2d0>
 8006a7e:	e000      	b.n	8006a82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d060      	beq.n	8006b50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	d005      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x310>
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	2b0c      	cmp	r3, #12
 8006a98:	d119      	bne.n	8006ace <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d116      	bne.n	8006ace <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006aa0:	4b7c      	ldr	r3, [pc, #496]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x328>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e27d      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ab8:	4b76      	ldr	r3, [pc, #472]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	061b      	lsls	r3, r3, #24
 8006ac6:	4973      	ldr	r1, [pc, #460]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006acc:	e040      	b.n	8006b50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d023      	beq.n	8006b1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ad6:	4b6f      	ldr	r3, [pc, #444]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a6e      	ldr	r2, [pc, #440]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae2:	f7fc fb49 	bl	8003178 <HAL_GetTick>
 8006ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ae8:	e008      	b.n	8006afc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006aea:	f7fc fb45 	bl	8003178 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d901      	bls.n	8006afc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e25b      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006afc:	4b65      	ldr	r3, [pc, #404]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0f0      	beq.n	8006aea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b08:	4b62      	ldr	r3, [pc, #392]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	061b      	lsls	r3, r3, #24
 8006b16:	495f      	ldr	r1, [pc, #380]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	604b      	str	r3, [r1, #4]
 8006b1c:	e018      	b.n	8006b50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b1e:	4b5d      	ldr	r3, [pc, #372]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a5c      	ldr	r2, [pc, #368]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b2a:	f7fc fb25 	bl	8003178 <HAL_GetTick>
 8006b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b30:	e008      	b.n	8006b44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b32:	f7fc fb21 	bl	8003178 <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d901      	bls.n	8006b44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e237      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b44:	4b53      	ldr	r3, [pc, #332]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1f0      	bne.n	8006b32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0308 	and.w	r3, r3, #8
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d03c      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01c      	beq.n	8006b9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b64:	4b4b      	ldr	r3, [pc, #300]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b6a:	4a4a      	ldr	r2, [pc, #296]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006b6c:	f043 0301 	orr.w	r3, r3, #1
 8006b70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b74:	f7fc fb00 	bl	8003178 <HAL_GetTick>
 8006b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b7c:	f7fc fafc 	bl	8003178 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e212      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b8e:	4b41      	ldr	r3, [pc, #260]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0ef      	beq.n	8006b7c <HAL_RCC_OscConfig+0x3ec>
 8006b9c:	e01b      	b.n	8006bd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ba4:	4a3b      	ldr	r2, [pc, #236]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006ba6:	f023 0301 	bic.w	r3, r3, #1
 8006baa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bae:	f7fc fae3 	bl	8003178 <HAL_GetTick>
 8006bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bb4:	e008      	b.n	8006bc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bb6:	f7fc fadf 	bl	8003178 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d901      	bls.n	8006bc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e1f5      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bc8:	4b32      	ldr	r3, [pc, #200]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bce:	f003 0302 	and.w	r3, r3, #2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1ef      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0304 	and.w	r3, r3, #4
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 80a6 	beq.w	8006d30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006be4:	2300      	movs	r3, #0
 8006be6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006be8:	4b2a      	ldr	r3, [pc, #168]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10d      	bne.n	8006c10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bf4:	4b27      	ldr	r3, [pc, #156]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bf8:	4a26      	ldr	r2, [pc, #152]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006bfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c00:	4b24      	ldr	r3, [pc, #144]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c08:	60bb      	str	r3, [r7, #8]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c10:	4b21      	ldr	r3, [pc, #132]	@ (8006c98 <HAL_RCC_OscConfig+0x508>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d118      	bne.n	8006c4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8006c98 <HAL_RCC_OscConfig+0x508>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a1d      	ldr	r2, [pc, #116]	@ (8006c98 <HAL_RCC_OscConfig+0x508>)
 8006c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c28:	f7fc faa6 	bl	8003178 <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c30:	f7fc faa2 	bl	8003178 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e1b8      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c42:	4b15      	ldr	r3, [pc, #84]	@ (8006c98 <HAL_RCC_OscConfig+0x508>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0f0      	beq.n	8006c30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d108      	bne.n	8006c68 <HAL_RCC_OscConfig+0x4d8>
 8006c56:	4b0f      	ldr	r3, [pc, #60]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006c5e:	f043 0301 	orr.w	r3, r3, #1
 8006c62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c66:	e029      	b.n	8006cbc <HAL_RCC_OscConfig+0x52c>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	2b05      	cmp	r3, #5
 8006c6e:	d115      	bne.n	8006c9c <HAL_RCC_OscConfig+0x50c>
 8006c70:	4b08      	ldr	r3, [pc, #32]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c76:	4a07      	ldr	r2, [pc, #28]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006c78:	f043 0304 	orr.w	r3, r3, #4
 8006c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c80:	4b04      	ldr	r3, [pc, #16]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c86:	4a03      	ldr	r2, [pc, #12]	@ (8006c94 <HAL_RCC_OscConfig+0x504>)
 8006c88:	f043 0301 	orr.w	r3, r3, #1
 8006c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c90:	e014      	b.n	8006cbc <HAL_RCC_OscConfig+0x52c>
 8006c92:	bf00      	nop
 8006c94:	40021000 	.word	0x40021000
 8006c98:	40007000 	.word	0x40007000
 8006c9c:	4b9d      	ldr	r3, [pc, #628]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ca2:	4a9c      	ldr	r2, [pc, #624]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006ca4:	f023 0301 	bic.w	r3, r3, #1
 8006ca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006cac:	4b99      	ldr	r3, [pc, #612]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cb2:	4a98      	ldr	r2, [pc, #608]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006cb4:	f023 0304 	bic.w	r3, r3, #4
 8006cb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d016      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc4:	f7fc fa58 	bl	8003178 <HAL_GetTick>
 8006cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cca:	e00a      	b.n	8006ce2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ccc:	f7fc fa54 	bl	8003178 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e168      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ce2:	4b8c      	ldr	r3, [pc, #560]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d0ed      	beq.n	8006ccc <HAL_RCC_OscConfig+0x53c>
 8006cf0:	e015      	b.n	8006d1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf2:	f7fc fa41 	bl	8003178 <HAL_GetTick>
 8006cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cf8:	e00a      	b.n	8006d10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cfa:	f7fc fa3d 	bl	8003178 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e151      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d10:	4b80      	ldr	r3, [pc, #512]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1ed      	bne.n	8006cfa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d1e:	7ffb      	ldrb	r3, [r7, #31]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d105      	bne.n	8006d30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d24:	4b7b      	ldr	r3, [pc, #492]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d28:	4a7a      	ldr	r2, [pc, #488]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d2e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0320 	and.w	r3, r3, #32
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d03c      	beq.n	8006db6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d01c      	beq.n	8006d7e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d44:	4b73      	ldr	r3, [pc, #460]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d4a:	4a72      	ldr	r2, [pc, #456]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006d4c:	f043 0301 	orr.w	r3, r3, #1
 8006d50:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d54:	f7fc fa10 	bl	8003178 <HAL_GetTick>
 8006d58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d5a:	e008      	b.n	8006d6e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d5c:	f7fc fa0c 	bl	8003178 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e122      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d6e:	4b69      	ldr	r3, [pc, #420]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006d70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0ef      	beq.n	8006d5c <HAL_RCC_OscConfig+0x5cc>
 8006d7c:	e01b      	b.n	8006db6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d7e:	4b65      	ldr	r3, [pc, #404]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d84:	4a63      	ldr	r2, [pc, #396]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006d86:	f023 0301 	bic.w	r3, r3, #1
 8006d8a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d8e:	f7fc f9f3 	bl	8003178 <HAL_GetTick>
 8006d92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d94:	e008      	b.n	8006da8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d96:	f7fc f9ef 	bl	8003178 <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d901      	bls.n	8006da8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e105      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006da8:	4b5a      	ldr	r3, [pc, #360]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1ef      	bne.n	8006d96 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 80f9 	beq.w	8006fb2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	f040 80cf 	bne.w	8006f68 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006dca:	4b52      	ldr	r3, [pc, #328]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f003 0203 	and.w	r2, r3, #3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d12c      	bne.n	8006e38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de8:	3b01      	subs	r3, #1
 8006dea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d123      	bne.n	8006e38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dfa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d11b      	bne.n	8006e38 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d113      	bne.n	8006e38 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e1a:	085b      	lsrs	r3, r3, #1
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d109      	bne.n	8006e38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2e:	085b      	lsrs	r3, r3, #1
 8006e30:	3b01      	subs	r3, #1
 8006e32:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d071      	beq.n	8006f1c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	2b0c      	cmp	r3, #12
 8006e3c:	d068      	beq.n	8006f10 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006e3e:	4b35      	ldr	r3, [pc, #212]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d105      	bne.n	8006e56 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006e4a:	4b32      	ldr	r3, [pc, #200]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e0ac      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006e60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e66:	f7fc f987 	bl	8003178 <HAL_GetTick>
 8006e6a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e6c:	e008      	b.n	8006e80 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e6e:	f7fc f983 	bl	8003178 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d901      	bls.n	8006e80 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e099      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e80:	4b24      	ldr	r3, [pc, #144]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1f0      	bne.n	8006e6e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e8c:	4b21      	ldr	r3, [pc, #132]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006e8e:	68da      	ldr	r2, [r3, #12]
 8006e90:	4b21      	ldr	r3, [pc, #132]	@ (8006f18 <HAL_RCC_OscConfig+0x788>)
 8006e92:	4013      	ands	r3, r2
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006e9c:	3a01      	subs	r2, #1
 8006e9e:	0112      	lsls	r2, r2, #4
 8006ea0:	4311      	orrs	r1, r2
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006ea6:	0212      	lsls	r2, r2, #8
 8006ea8:	4311      	orrs	r1, r2
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006eae:	0852      	lsrs	r2, r2, #1
 8006eb0:	3a01      	subs	r2, #1
 8006eb2:	0552      	lsls	r2, r2, #21
 8006eb4:	4311      	orrs	r1, r2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006eba:	0852      	lsrs	r2, r2, #1
 8006ebc:	3a01      	subs	r2, #1
 8006ebe:	0652      	lsls	r2, r2, #25
 8006ec0:	4311      	orrs	r1, r2
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006ec6:	06d2      	lsls	r2, r2, #27
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	4912      	ldr	r1, [pc, #72]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006ed0:	4b10      	ldr	r3, [pc, #64]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a0f      	ldr	r2, [pc, #60]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006ed6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006eda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006edc:	4b0d      	ldr	r3, [pc, #52]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006ee2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ee6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ee8:	f7fc f946 	bl	8003178 <HAL_GetTick>
 8006eec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ef0:	f7fc f942 	bl	8003178 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e058      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f02:	4b04      	ldr	r3, [pc, #16]	@ (8006f14 <HAL_RCC_OscConfig+0x784>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0f0      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f0e:	e050      	b.n	8006fb2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e04f      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
 8006f14:	40021000 	.word	0x40021000
 8006f18:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f1c:	4b27      	ldr	r3, [pc, #156]	@ (8006fbc <HAL_RCC_OscConfig+0x82c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d144      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006f28:	4b24      	ldr	r3, [pc, #144]	@ (8006fbc <HAL_RCC_OscConfig+0x82c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a23      	ldr	r2, [pc, #140]	@ (8006fbc <HAL_RCC_OscConfig+0x82c>)
 8006f2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f34:	4b21      	ldr	r3, [pc, #132]	@ (8006fbc <HAL_RCC_OscConfig+0x82c>)
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	4a20      	ldr	r2, [pc, #128]	@ (8006fbc <HAL_RCC_OscConfig+0x82c>)
 8006f3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f40:	f7fc f91a 	bl	8003178 <HAL_GetTick>
 8006f44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f46:	e008      	b.n	8006f5a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f48:	f7fc f916 	bl	8003178 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e02c      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f5a:	4b18      	ldr	r3, [pc, #96]	@ (8006fbc <HAL_RCC_OscConfig+0x82c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d0f0      	beq.n	8006f48 <HAL_RCC_OscConfig+0x7b8>
 8006f66:	e024      	b.n	8006fb2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	2b0c      	cmp	r3, #12
 8006f6c:	d01f      	beq.n	8006fae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f6e:	4b13      	ldr	r3, [pc, #76]	@ (8006fbc <HAL_RCC_OscConfig+0x82c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a12      	ldr	r2, [pc, #72]	@ (8006fbc <HAL_RCC_OscConfig+0x82c>)
 8006f74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7a:	f7fc f8fd 	bl	8003178 <HAL_GetTick>
 8006f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f80:	e008      	b.n	8006f94 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f82:	f7fc f8f9 	bl	8003178 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d901      	bls.n	8006f94 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e00f      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f94:	4b09      	ldr	r3, [pc, #36]	@ (8006fbc <HAL_RCC_OscConfig+0x82c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1f0      	bne.n	8006f82 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006fa0:	4b06      	ldr	r3, [pc, #24]	@ (8006fbc <HAL_RCC_OscConfig+0x82c>)
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	4905      	ldr	r1, [pc, #20]	@ (8006fbc <HAL_RCC_OscConfig+0x82c>)
 8006fa6:	4b06      	ldr	r3, [pc, #24]	@ (8006fc0 <HAL_RCC_OscConfig+0x830>)
 8006fa8:	4013      	ands	r3, r2
 8006faa:	60cb      	str	r3, [r1, #12]
 8006fac:	e001      	b.n	8006fb2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e000      	b.n	8006fb4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3720      	adds	r7, #32
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	40021000 	.word	0x40021000
 8006fc0:	feeefffc 	.word	0xfeeefffc

08006fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e0e7      	b.n	80071a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fd8:	4b75      	ldr	r3, [pc, #468]	@ (80071b0 <HAL_RCC_ClockConfig+0x1ec>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0307 	and.w	r3, r3, #7
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d910      	bls.n	8007008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fe6:	4b72      	ldr	r3, [pc, #456]	@ (80071b0 <HAL_RCC_ClockConfig+0x1ec>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f023 0207 	bic.w	r2, r3, #7
 8006fee:	4970      	ldr	r1, [pc, #448]	@ (80071b0 <HAL_RCC_ClockConfig+0x1ec>)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ff6:	4b6e      	ldr	r3, [pc, #440]	@ (80071b0 <HAL_RCC_ClockConfig+0x1ec>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	429a      	cmp	r2, r3
 8007002:	d001      	beq.n	8007008 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e0cf      	b.n	80071a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d010      	beq.n	8007036 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	4b66      	ldr	r3, [pc, #408]	@ (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007020:	429a      	cmp	r2, r3
 8007022:	d908      	bls.n	8007036 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007024:	4b63      	ldr	r3, [pc, #396]	@ (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	4960      	ldr	r1, [pc, #384]	@ (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007032:	4313      	orrs	r3, r2
 8007034:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d04c      	beq.n	80070dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b03      	cmp	r3, #3
 8007048:	d107      	bne.n	800705a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800704a:	4b5a      	ldr	r3, [pc, #360]	@ (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d121      	bne.n	800709a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e0a6      	b.n	80071a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b02      	cmp	r3, #2
 8007060:	d107      	bne.n	8007072 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007062:	4b54      	ldr	r3, [pc, #336]	@ (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d115      	bne.n	800709a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e09a      	b.n	80071a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d107      	bne.n	800708a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800707a:	4b4e      	ldr	r3, [pc, #312]	@ (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d109      	bne.n	800709a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e08e      	b.n	80071a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800708a:	4b4a      	ldr	r3, [pc, #296]	@ (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e086      	b.n	80071a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800709a:	4b46      	ldr	r3, [pc, #280]	@ (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f023 0203 	bic.w	r2, r3, #3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	4943      	ldr	r1, [pc, #268]	@ (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ac:	f7fc f864 	bl	8003178 <HAL_GetTick>
 80070b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070b2:	e00a      	b.n	80070ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070b4:	f7fc f860 	bl	8003178 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e06e      	b.n	80071a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ca:	4b3a      	ldr	r3, [pc, #232]	@ (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 020c 	and.w	r2, r3, #12
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	429a      	cmp	r2, r3
 80070da:	d1eb      	bne.n	80070b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d010      	beq.n	800710a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	4b31      	ldr	r3, [pc, #196]	@ (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d208      	bcs.n	800710a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070f8:	4b2e      	ldr	r3, [pc, #184]	@ (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	492b      	ldr	r1, [pc, #172]	@ (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007106:	4313      	orrs	r3, r2
 8007108:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800710a:	4b29      	ldr	r3, [pc, #164]	@ (80071b0 <HAL_RCC_ClockConfig+0x1ec>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	429a      	cmp	r2, r3
 8007116:	d210      	bcs.n	800713a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007118:	4b25      	ldr	r3, [pc, #148]	@ (80071b0 <HAL_RCC_ClockConfig+0x1ec>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f023 0207 	bic.w	r2, r3, #7
 8007120:	4923      	ldr	r1, [pc, #140]	@ (80071b0 <HAL_RCC_ClockConfig+0x1ec>)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	4313      	orrs	r3, r2
 8007126:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007128:	4b21      	ldr	r3, [pc, #132]	@ (80071b0 <HAL_RCC_ClockConfig+0x1ec>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d001      	beq.n	800713a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e036      	b.n	80071a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	2b00      	cmp	r3, #0
 8007144:	d008      	beq.n	8007158 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007146:	4b1b      	ldr	r3, [pc, #108]	@ (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	4918      	ldr	r1, [pc, #96]	@ (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007154:	4313      	orrs	r3, r2
 8007156:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0308 	and.w	r3, r3, #8
 8007160:	2b00      	cmp	r3, #0
 8007162:	d009      	beq.n	8007178 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007164:	4b13      	ldr	r3, [pc, #76]	@ (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	4910      	ldr	r1, [pc, #64]	@ (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007174:	4313      	orrs	r3, r2
 8007176:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007178:	f000 f824 	bl	80071c4 <HAL_RCC_GetSysClockFreq>
 800717c:	4602      	mov	r2, r0
 800717e:	4b0d      	ldr	r3, [pc, #52]	@ (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	091b      	lsrs	r3, r3, #4
 8007184:	f003 030f 	and.w	r3, r3, #15
 8007188:	490b      	ldr	r1, [pc, #44]	@ (80071b8 <HAL_RCC_ClockConfig+0x1f4>)
 800718a:	5ccb      	ldrb	r3, [r1, r3]
 800718c:	f003 031f 	and.w	r3, r3, #31
 8007190:	fa22 f303 	lsr.w	r3, r2, r3
 8007194:	4a09      	ldr	r2, [pc, #36]	@ (80071bc <HAL_RCC_ClockConfig+0x1f8>)
 8007196:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007198:	4b09      	ldr	r3, [pc, #36]	@ (80071c0 <HAL_RCC_ClockConfig+0x1fc>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4618      	mov	r0, r3
 800719e:	f7fa fe63 	bl	8001e68 <HAL_InitTick>
 80071a2:	4603      	mov	r3, r0
 80071a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80071a6:	7afb      	ldrb	r3, [r7, #11]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	40022000 	.word	0x40022000
 80071b4:	40021000 	.word	0x40021000
 80071b8:	0800cca8 	.word	0x0800cca8
 80071bc:	20000000 	.word	0x20000000
 80071c0:	20000004 	.word	0x20000004

080071c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b089      	sub	sp, #36	@ 0x24
 80071c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	61fb      	str	r3, [r7, #28]
 80071ce:	2300      	movs	r3, #0
 80071d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071d2:	4b3e      	ldr	r3, [pc, #248]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x108>)
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f003 030c 	and.w	r3, r3, #12
 80071da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071dc:	4b3b      	ldr	r3, [pc, #236]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x108>)
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0303 	and.w	r3, r3, #3
 80071e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d005      	beq.n	80071f8 <HAL_RCC_GetSysClockFreq+0x34>
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	2b0c      	cmp	r3, #12
 80071f0:	d121      	bne.n	8007236 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d11e      	bne.n	8007236 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80071f8:	4b34      	ldr	r3, [pc, #208]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x108>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0308 	and.w	r3, r3, #8
 8007200:	2b00      	cmp	r3, #0
 8007202:	d107      	bne.n	8007214 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007204:	4b31      	ldr	r3, [pc, #196]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x108>)
 8007206:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800720a:	0a1b      	lsrs	r3, r3, #8
 800720c:	f003 030f 	and.w	r3, r3, #15
 8007210:	61fb      	str	r3, [r7, #28]
 8007212:	e005      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007214:	4b2d      	ldr	r3, [pc, #180]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x108>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	091b      	lsrs	r3, r3, #4
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007220:	4a2b      	ldr	r2, [pc, #172]	@ (80072d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007228:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10d      	bne.n	800724c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007234:	e00a      	b.n	800724c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	2b04      	cmp	r3, #4
 800723a:	d102      	bne.n	8007242 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800723c:	4b25      	ldr	r3, [pc, #148]	@ (80072d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800723e:	61bb      	str	r3, [r7, #24]
 8007240:	e004      	b.n	800724c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	2b08      	cmp	r3, #8
 8007246:	d101      	bne.n	800724c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007248:	4b23      	ldr	r3, [pc, #140]	@ (80072d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800724a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2b0c      	cmp	r3, #12
 8007250:	d134      	bne.n	80072bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007252:	4b1e      	ldr	r3, [pc, #120]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x108>)
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f003 0303 	and.w	r3, r3, #3
 800725a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2b02      	cmp	r3, #2
 8007260:	d003      	beq.n	800726a <HAL_RCC_GetSysClockFreq+0xa6>
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	2b03      	cmp	r3, #3
 8007266:	d003      	beq.n	8007270 <HAL_RCC_GetSysClockFreq+0xac>
 8007268:	e005      	b.n	8007276 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800726a:	4b1a      	ldr	r3, [pc, #104]	@ (80072d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800726c:	617b      	str	r3, [r7, #20]
      break;
 800726e:	e005      	b.n	800727c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007270:	4b19      	ldr	r3, [pc, #100]	@ (80072d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007272:	617b      	str	r3, [r7, #20]
      break;
 8007274:	e002      	b.n	800727c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	617b      	str	r3, [r7, #20]
      break;
 800727a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800727c:	4b13      	ldr	r3, [pc, #76]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x108>)
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	091b      	lsrs	r3, r3, #4
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	3301      	adds	r3, #1
 8007288:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800728a:	4b10      	ldr	r3, [pc, #64]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x108>)
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	0a1b      	lsrs	r3, r3, #8
 8007290:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	fb03 f202 	mul.w	r2, r3, r2
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072a2:	4b0a      	ldr	r3, [pc, #40]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x108>)
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	0e5b      	lsrs	r3, r3, #25
 80072a8:	f003 0303 	and.w	r3, r3, #3
 80072ac:	3301      	adds	r3, #1
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80072bc:	69bb      	ldr	r3, [r7, #24]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3724      	adds	r7, #36	@ 0x24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	40021000 	.word	0x40021000
 80072d0:	0800ccc0 	.word	0x0800ccc0
 80072d4:	00f42400 	.word	0x00f42400
 80072d8:	007a1200 	.word	0x007a1200

080072dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072e0:	4b03      	ldr	r3, [pc, #12]	@ (80072f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80072e2:	681b      	ldr	r3, [r3, #0]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	20000000 	.word	0x20000000

080072f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80072f8:	f7ff fff0 	bl	80072dc <HAL_RCC_GetHCLKFreq>
 80072fc:	4602      	mov	r2, r0
 80072fe:	4b06      	ldr	r3, [pc, #24]	@ (8007318 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	0a1b      	lsrs	r3, r3, #8
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	4904      	ldr	r1, [pc, #16]	@ (800731c <HAL_RCC_GetPCLK1Freq+0x28>)
 800730a:	5ccb      	ldrb	r3, [r1, r3]
 800730c:	f003 031f 	and.w	r3, r3, #31
 8007310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007314:	4618      	mov	r0, r3
 8007316:	bd80      	pop	{r7, pc}
 8007318:	40021000 	.word	0x40021000
 800731c:	0800ccb8 	.word	0x0800ccb8

08007320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007324:	f7ff ffda 	bl	80072dc <HAL_RCC_GetHCLKFreq>
 8007328:	4602      	mov	r2, r0
 800732a:	4b06      	ldr	r3, [pc, #24]	@ (8007344 <HAL_RCC_GetPCLK2Freq+0x24>)
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	0adb      	lsrs	r3, r3, #11
 8007330:	f003 0307 	and.w	r3, r3, #7
 8007334:	4904      	ldr	r1, [pc, #16]	@ (8007348 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007336:	5ccb      	ldrb	r3, [r1, r3]
 8007338:	f003 031f 	and.w	r3, r3, #31
 800733c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007340:	4618      	mov	r0, r3
 8007342:	bd80      	pop	{r7, pc}
 8007344:	40021000 	.word	0x40021000
 8007348:	0800ccb8 	.word	0x0800ccb8

0800734c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	220f      	movs	r2, #15
 800735a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800735c:	4b12      	ldr	r3, [pc, #72]	@ (80073a8 <HAL_RCC_GetClockConfig+0x5c>)
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f003 0203 	and.w	r2, r3, #3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007368:	4b0f      	ldr	r3, [pc, #60]	@ (80073a8 <HAL_RCC_GetClockConfig+0x5c>)
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007374:	4b0c      	ldr	r3, [pc, #48]	@ (80073a8 <HAL_RCC_GetClockConfig+0x5c>)
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007380:	4b09      	ldr	r3, [pc, #36]	@ (80073a8 <HAL_RCC_GetClockConfig+0x5c>)
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	08db      	lsrs	r3, r3, #3
 8007386:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800738e:	4b07      	ldr	r3, [pc, #28]	@ (80073ac <HAL_RCC_GetClockConfig+0x60>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0207 	and.w	r2, r3, #7
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	601a      	str	r2, [r3, #0]
}
 800739a:	bf00      	nop
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	40021000 	.word	0x40021000
 80073ac:	40022000 	.word	0x40022000

080073b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80073b8:	2300      	movs	r3, #0
 80073ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80073bc:	4b2a      	ldr	r3, [pc, #168]	@ (8007468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80073c8:	f7ff f97e 	bl	80066c8 <HAL_PWREx_GetVoltageRange>
 80073cc:	6178      	str	r0, [r7, #20]
 80073ce:	e014      	b.n	80073fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80073d0:	4b25      	ldr	r3, [pc, #148]	@ (8007468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073d4:	4a24      	ldr	r2, [pc, #144]	@ (8007468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073da:	6593      	str	r3, [r2, #88]	@ 0x58
 80073dc:	4b22      	ldr	r3, [pc, #136]	@ (8007468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80073e8:	f7ff f96e 	bl	80066c8 <HAL_PWREx_GetVoltageRange>
 80073ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80073ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073f2:	4a1d      	ldr	r2, [pc, #116]	@ (8007468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007400:	d10b      	bne.n	800741a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b80      	cmp	r3, #128	@ 0x80
 8007406:	d919      	bls.n	800743c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2ba0      	cmp	r3, #160	@ 0xa0
 800740c:	d902      	bls.n	8007414 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800740e:	2302      	movs	r3, #2
 8007410:	613b      	str	r3, [r7, #16]
 8007412:	e013      	b.n	800743c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007414:	2301      	movs	r3, #1
 8007416:	613b      	str	r3, [r7, #16]
 8007418:	e010      	b.n	800743c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b80      	cmp	r3, #128	@ 0x80
 800741e:	d902      	bls.n	8007426 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007420:	2303      	movs	r3, #3
 8007422:	613b      	str	r3, [r7, #16]
 8007424:	e00a      	b.n	800743c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b80      	cmp	r3, #128	@ 0x80
 800742a:	d102      	bne.n	8007432 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800742c:	2302      	movs	r3, #2
 800742e:	613b      	str	r3, [r7, #16]
 8007430:	e004      	b.n	800743c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b70      	cmp	r3, #112	@ 0x70
 8007436:	d101      	bne.n	800743c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007438:	2301      	movs	r3, #1
 800743a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800743c:	4b0b      	ldr	r3, [pc, #44]	@ (800746c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f023 0207 	bic.w	r2, r3, #7
 8007444:	4909      	ldr	r1, [pc, #36]	@ (800746c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	4313      	orrs	r3, r2
 800744a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800744c:	4b07      	ldr	r3, [pc, #28]	@ (800746c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0307 	and.w	r3, r3, #7
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	429a      	cmp	r2, r3
 8007458:	d001      	beq.n	800745e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e000      	b.n	8007460 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	40021000 	.word	0x40021000
 800746c:	40022000 	.word	0x40022000

08007470 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007478:	2300      	movs	r3, #0
 800747a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800747c:	2300      	movs	r3, #0
 800747e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007488:	2b00      	cmp	r3, #0
 800748a:	d041      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007490:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007494:	d02a      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007496:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800749a:	d824      	bhi.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800749c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80074a0:	d008      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80074a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80074a6:	d81e      	bhi.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80074ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074b0:	d010      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80074b2:	e018      	b.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80074b4:	4b86      	ldr	r3, [pc, #536]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	4a85      	ldr	r2, [pc, #532]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80074c0:	e015      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	3304      	adds	r3, #4
 80074c6:	2100      	movs	r1, #0
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 facd 	bl	8007a68 <RCCEx_PLLSAI1_Config>
 80074ce:	4603      	mov	r3, r0
 80074d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80074d2:	e00c      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3320      	adds	r3, #32
 80074d8:	2100      	movs	r1, #0
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fbb6 	bl	8007c4c <RCCEx_PLLSAI2_Config>
 80074e0:	4603      	mov	r3, r0
 80074e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80074e4:	e003      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	74fb      	strb	r3, [r7, #19]
      break;
 80074ea:	e000      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80074ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ee:	7cfb      	ldrb	r3, [r7, #19]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10b      	bne.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074f4:	4b76      	ldr	r3, [pc, #472]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007502:	4973      	ldr	r1, [pc, #460]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007504:	4313      	orrs	r3, r2
 8007506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800750a:	e001      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800750c:	7cfb      	ldrb	r3, [r7, #19]
 800750e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d041      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007520:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007524:	d02a      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007526:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800752a:	d824      	bhi.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800752c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007530:	d008      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007532:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007536:	d81e      	bhi.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00a      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800753c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007540:	d010      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007542:	e018      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007544:	4b62      	ldr	r3, [pc, #392]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	4a61      	ldr	r2, [pc, #388]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800754a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800754e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007550:	e015      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	3304      	adds	r3, #4
 8007556:	2100      	movs	r1, #0
 8007558:	4618      	mov	r0, r3
 800755a:	f000 fa85 	bl	8007a68 <RCCEx_PLLSAI1_Config>
 800755e:	4603      	mov	r3, r0
 8007560:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007562:	e00c      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3320      	adds	r3, #32
 8007568:	2100      	movs	r1, #0
 800756a:	4618      	mov	r0, r3
 800756c:	f000 fb6e 	bl	8007c4c <RCCEx_PLLSAI2_Config>
 8007570:	4603      	mov	r3, r0
 8007572:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007574:	e003      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	74fb      	strb	r3, [r7, #19]
      break;
 800757a:	e000      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800757c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800757e:	7cfb      	ldrb	r3, [r7, #19]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10b      	bne.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007584:	4b52      	ldr	r3, [pc, #328]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800758a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007592:	494f      	ldr	r1, [pc, #316]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007594:	4313      	orrs	r3, r2
 8007596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800759a:	e001      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800759c:	7cfb      	ldrb	r3, [r7, #19]
 800759e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 80a0 	beq.w	80076ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075ae:	2300      	movs	r3, #0
 80075b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80075b2:	4b47      	ldr	r3, [pc, #284]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80075be:	2301      	movs	r3, #1
 80075c0:	e000      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80075c2:	2300      	movs	r3, #0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00d      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075c8:	4b41      	ldr	r3, [pc, #260]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075cc:	4a40      	ldr	r2, [pc, #256]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80075d4:	4b3e      	ldr	r3, [pc, #248]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075dc:	60bb      	str	r3, [r7, #8]
 80075de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075e0:	2301      	movs	r3, #1
 80075e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075e4:	4b3b      	ldr	r3, [pc, #236]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a3a      	ldr	r2, [pc, #232]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80075ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075f0:	f7fb fdc2 	bl	8003178 <HAL_GetTick>
 80075f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80075f6:	e009      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075f8:	f7fb fdbe 	bl	8003178 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b02      	cmp	r3, #2
 8007604:	d902      	bls.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	74fb      	strb	r3, [r7, #19]
        break;
 800760a:	e005      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800760c:	4b31      	ldr	r3, [pc, #196]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007614:	2b00      	cmp	r3, #0
 8007616:	d0ef      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007618:	7cfb      	ldrb	r3, [r7, #19]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d15c      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800761e:	4b2c      	ldr	r3, [pc, #176]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007624:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007628:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d01f      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	429a      	cmp	r2, r3
 800763a:	d019      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800763c:	4b24      	ldr	r3, [pc, #144]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800763e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007642:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007646:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007648:	4b21      	ldr	r3, [pc, #132]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800764a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800764e:	4a20      	ldr	r2, [pc, #128]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007658:	4b1d      	ldr	r3, [pc, #116]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800765a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800765e:	4a1c      	ldr	r2, [pc, #112]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007668:	4a19      	ldr	r2, [pc, #100]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d016      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800767a:	f7fb fd7d 	bl	8003178 <HAL_GetTick>
 800767e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007680:	e00b      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007682:	f7fb fd79 	bl	8003178 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007690:	4293      	cmp	r3, r2
 8007692:	d902      	bls.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	74fb      	strb	r3, [r7, #19]
            break;
 8007698:	e006      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800769a:	4b0d      	ldr	r3, [pc, #52]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800769c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076a0:	f003 0302 	and.w	r3, r3, #2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d0ec      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80076a8:	7cfb      	ldrb	r3, [r7, #19]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10c      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076ae:	4b08      	ldr	r3, [pc, #32]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076be:	4904      	ldr	r1, [pc, #16]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80076c6:	e009      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076c8:	7cfb      	ldrb	r3, [r7, #19]
 80076ca:	74bb      	strb	r3, [r7, #18]
 80076cc:	e006      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80076ce:	bf00      	nop
 80076d0:	40021000 	.word	0x40021000
 80076d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d8:	7cfb      	ldrb	r3, [r7, #19]
 80076da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076dc:	7c7b      	ldrb	r3, [r7, #17]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d105      	bne.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076e2:	4ba6      	ldr	r3, [pc, #664]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076e6:	4aa5      	ldr	r2, [pc, #660]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00a      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076fa:	4ba0      	ldr	r3, [pc, #640]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007700:	f023 0203 	bic.w	r2, r3, #3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007708:	499c      	ldr	r1, [pc, #624]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800770a:	4313      	orrs	r3, r2
 800770c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0302 	and.w	r3, r3, #2
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00a      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800771c:	4b97      	ldr	r3, [pc, #604]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800771e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007722:	f023 020c 	bic.w	r2, r3, #12
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800772a:	4994      	ldr	r1, [pc, #592]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800772c:	4313      	orrs	r3, r2
 800772e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0304 	and.w	r3, r3, #4
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00a      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800773e:	4b8f      	ldr	r3, [pc, #572]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007744:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774c:	498b      	ldr	r1, [pc, #556]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800774e:	4313      	orrs	r3, r2
 8007750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0308 	and.w	r3, r3, #8
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00a      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007760:	4b86      	ldr	r3, [pc, #536]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007766:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800776e:	4983      	ldr	r1, [pc, #524]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007770:	4313      	orrs	r3, r2
 8007772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0310 	and.w	r3, r3, #16
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00a      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007782:	4b7e      	ldr	r3, [pc, #504]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007788:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007790:	497a      	ldr	r1, [pc, #488]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007792:	4313      	orrs	r3, r2
 8007794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0320 	and.w	r3, r3, #32
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00a      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077a4:	4b75      	ldr	r3, [pc, #468]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80077a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077b2:	4972      	ldr	r1, [pc, #456]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00a      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077c6:	4b6d      	ldr	r3, [pc, #436]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80077c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077d4:	4969      	ldr	r1, [pc, #420]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00a      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077e8:	4b64      	ldr	r3, [pc, #400]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80077ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077f6:	4961      	ldr	r1, [pc, #388]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800780a:	4b5c      	ldr	r3, [pc, #368]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800780c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007810:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007818:	4958      	ldr	r1, [pc, #352]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800781a:	4313      	orrs	r3, r2
 800781c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00a      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800782c:	4b53      	ldr	r3, [pc, #332]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800782e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007832:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800783a:	4950      	ldr	r1, [pc, #320]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800783c:	4313      	orrs	r3, r2
 800783e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800784e:	4b4b      	ldr	r3, [pc, #300]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007854:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800785c:	4947      	ldr	r1, [pc, #284]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800785e:	4313      	orrs	r3, r2
 8007860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00a      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007870:	4b42      	ldr	r3, [pc, #264]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007872:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007876:	f023 0203 	bic.w	r2, r3, #3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800787e:	493f      	ldr	r1, [pc, #252]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007880:	4313      	orrs	r3, r2
 8007882:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d028      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007892:	4b3a      	ldr	r3, [pc, #232]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007898:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078a0:	4936      	ldr	r1, [pc, #216]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078b0:	d106      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078b2:	4b32      	ldr	r3, [pc, #200]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	4a31      	ldr	r2, [pc, #196]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80078b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078bc:	60d3      	str	r3, [r2, #12]
 80078be:	e011      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80078c8:	d10c      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	3304      	adds	r3, #4
 80078ce:	2101      	movs	r1, #1
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 f8c9 	bl	8007a68 <RCCEx_PLLSAI1_Config>
 80078d6:	4603      	mov	r3, r0
 80078d8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80078da:	7cfb      	ldrb	r3, [r7, #19]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80078e0:	7cfb      	ldrb	r3, [r7, #19]
 80078e2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d028      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80078f0:	4b22      	ldr	r3, [pc, #136]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80078f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078fe:	491f      	ldr	r1, [pc, #124]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007900:	4313      	orrs	r3, r2
 8007902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800790a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800790e:	d106      	bne.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007910:	4b1a      	ldr	r3, [pc, #104]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	4a19      	ldr	r2, [pc, #100]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007916:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800791a:	60d3      	str	r3, [r2, #12]
 800791c:	e011      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007922:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007926:	d10c      	bne.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3304      	adds	r3, #4
 800792c:	2101      	movs	r1, #1
 800792e:	4618      	mov	r0, r3
 8007930:	f000 f89a 	bl	8007a68 <RCCEx_PLLSAI1_Config>
 8007934:	4603      	mov	r3, r0
 8007936:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007938:	7cfb      	ldrb	r3, [r7, #19]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800793e:	7cfb      	ldrb	r3, [r7, #19]
 8007940:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d02a      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800794e:	4b0b      	ldr	r3, [pc, #44]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007954:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800795c:	4907      	ldr	r1, [pc, #28]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800795e:	4313      	orrs	r3, r2
 8007960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800796c:	d108      	bne.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800796e:	4b03      	ldr	r3, [pc, #12]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	4a02      	ldr	r2, [pc, #8]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007974:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007978:	60d3      	str	r3, [r2, #12]
 800797a:	e013      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800797c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007984:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007988:	d10c      	bne.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	3304      	adds	r3, #4
 800798e:	2101      	movs	r1, #1
 8007990:	4618      	mov	r0, r3
 8007992:	f000 f869 	bl	8007a68 <RCCEx_PLLSAI1_Config>
 8007996:	4603      	mov	r3, r0
 8007998:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800799a:	7cfb      	ldrb	r3, [r7, #19]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80079a0:	7cfb      	ldrb	r3, [r7, #19]
 80079a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d02f      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80079b0:	4b2c      	ldr	r3, [pc, #176]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80079b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079be:	4929      	ldr	r1, [pc, #164]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079ce:	d10d      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3304      	adds	r3, #4
 80079d4:	2102      	movs	r1, #2
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 f846 	bl	8007a68 <RCCEx_PLLSAI1_Config>
 80079dc:	4603      	mov	r3, r0
 80079de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80079e0:	7cfb      	ldrb	r3, [r7, #19]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d014      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80079e6:	7cfb      	ldrb	r3, [r7, #19]
 80079e8:	74bb      	strb	r3, [r7, #18]
 80079ea:	e011      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079f4:	d10c      	bne.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	3320      	adds	r3, #32
 80079fa:	2102      	movs	r1, #2
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 f925 	bl	8007c4c <RCCEx_PLLSAI2_Config>
 8007a02:	4603      	mov	r3, r0
 8007a04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a06:	7cfb      	ldrb	r3, [r7, #19]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8007a0c:	7cfb      	ldrb	r3, [r7, #19]
 8007a0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00b      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a1c:	4b11      	ldr	r3, [pc, #68]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a22:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a2c:	490d      	ldr	r1, [pc, #52]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00b      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a40:	4b08      	ldr	r3, [pc, #32]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a50:	4904      	ldr	r1, [pc, #16]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007a58:	7cbb      	ldrb	r3, [r7, #18]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3718      	adds	r7, #24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	40021000 	.word	0x40021000

08007a68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007a76:	4b74      	ldr	r3, [pc, #464]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	f003 0303 	and.w	r3, r3, #3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d018      	beq.n	8007ab4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007a82:	4b71      	ldr	r3, [pc, #452]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	f003 0203 	and.w	r2, r3, #3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d10d      	bne.n	8007aae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
       ||
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d009      	beq.n	8007aae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007a9a:	4b6b      	ldr	r3, [pc, #428]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	091b      	lsrs	r3, r3, #4
 8007aa0:	f003 0307 	and.w	r3, r3, #7
 8007aa4:	1c5a      	adds	r2, r3, #1
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
       ||
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d047      	beq.n	8007b3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	73fb      	strb	r3, [r7, #15]
 8007ab2:	e044      	b.n	8007b3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d018      	beq.n	8007aee <RCCEx_PLLSAI1_Config+0x86>
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	d825      	bhi.n	8007b0c <RCCEx_PLLSAI1_Config+0xa4>
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d002      	beq.n	8007aca <RCCEx_PLLSAI1_Config+0x62>
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d009      	beq.n	8007adc <RCCEx_PLLSAI1_Config+0x74>
 8007ac8:	e020      	b.n	8007b0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007aca:	4b5f      	ldr	r3, [pc, #380]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d11d      	bne.n	8007b12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ada:	e01a      	b.n	8007b12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007adc:	4b5a      	ldr	r3, [pc, #360]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d116      	bne.n	8007b16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007aec:	e013      	b.n	8007b16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007aee:	4b56      	ldr	r3, [pc, #344]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10f      	bne.n	8007b1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007afa:	4b53      	ldr	r3, [pc, #332]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d109      	bne.n	8007b1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b0a:	e006      	b.n	8007b1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b10:	e004      	b.n	8007b1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007b12:	bf00      	nop
 8007b14:	e002      	b.n	8007b1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007b16:	bf00      	nop
 8007b18:	e000      	b.n	8007b1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007b1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10d      	bne.n	8007b3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007b22:	4b49      	ldr	r3, [pc, #292]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6819      	ldr	r1, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	3b01      	subs	r3, #1
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	430b      	orrs	r3, r1
 8007b38:	4943      	ldr	r1, [pc, #268]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d17c      	bne.n	8007c3e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007b44:	4b40      	ldr	r3, [pc, #256]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a3f      	ldr	r2, [pc, #252]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b50:	f7fb fb12 	bl	8003178 <HAL_GetTick>
 8007b54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b56:	e009      	b.n	8007b6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b58:	f7fb fb0e 	bl	8003178 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d902      	bls.n	8007b6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	73fb      	strb	r3, [r7, #15]
        break;
 8007b6a:	e005      	b.n	8007b78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b6c:	4b36      	ldr	r3, [pc, #216]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1ef      	bne.n	8007b58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d15f      	bne.n	8007c3e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d110      	bne.n	8007ba6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b84:	4b30      	ldr	r3, [pc, #192]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007b8c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	6892      	ldr	r2, [r2, #8]
 8007b94:	0211      	lsls	r1, r2, #8
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	68d2      	ldr	r2, [r2, #12]
 8007b9a:	06d2      	lsls	r2, r2, #27
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	492a      	ldr	r1, [pc, #168]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	610b      	str	r3, [r1, #16]
 8007ba4:	e027      	b.n	8007bf6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d112      	bne.n	8007bd2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bac:	4b26      	ldr	r3, [pc, #152]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007bb4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	6892      	ldr	r2, [r2, #8]
 8007bbc:	0211      	lsls	r1, r2, #8
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	6912      	ldr	r2, [r2, #16]
 8007bc2:	0852      	lsrs	r2, r2, #1
 8007bc4:	3a01      	subs	r2, #1
 8007bc6:	0552      	lsls	r2, r2, #21
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	491f      	ldr	r1, [pc, #124]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	610b      	str	r3, [r1, #16]
 8007bd0:	e011      	b.n	8007bf6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007bda:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	6892      	ldr	r2, [r2, #8]
 8007be2:	0211      	lsls	r1, r2, #8
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	6952      	ldr	r2, [r2, #20]
 8007be8:	0852      	lsrs	r2, r2, #1
 8007bea:	3a01      	subs	r2, #1
 8007bec:	0652      	lsls	r2, r2, #25
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	4915      	ldr	r1, [pc, #84]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007bf6:	4b14      	ldr	r3, [pc, #80]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a13      	ldr	r2, [pc, #76]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bfc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c02:	f7fb fab9 	bl	8003178 <HAL_GetTick>
 8007c06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007c08:	e009      	b.n	8007c1e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c0a:	f7fb fab5 	bl	8003178 <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d902      	bls.n	8007c1e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	73fb      	strb	r3, [r7, #15]
          break;
 8007c1c:	e005      	b.n	8007c2a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d0ef      	beq.n	8007c0a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d106      	bne.n	8007c3e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007c30:	4b05      	ldr	r3, [pc, #20]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c32:	691a      	ldr	r2, [r3, #16]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	4903      	ldr	r1, [pc, #12]	@ (8007c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	40021000 	.word	0x40021000

08007c4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007c5a:	4b69      	ldr	r3, [pc, #420]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f003 0303 	and.w	r3, r3, #3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d018      	beq.n	8007c98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007c66:	4b66      	ldr	r3, [pc, #408]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	f003 0203 	and.w	r2, r3, #3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d10d      	bne.n	8007c92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
       ||
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d009      	beq.n	8007c92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007c7e:	4b60      	ldr	r3, [pc, #384]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	091b      	lsrs	r3, r3, #4
 8007c84:	f003 0307 	and.w	r3, r3, #7
 8007c88:	1c5a      	adds	r2, r3, #1
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
       ||
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d047      	beq.n	8007d22 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	73fb      	strb	r3, [r7, #15]
 8007c96:	e044      	b.n	8007d22 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d018      	beq.n	8007cd2 <RCCEx_PLLSAI2_Config+0x86>
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d825      	bhi.n	8007cf0 <RCCEx_PLLSAI2_Config+0xa4>
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d002      	beq.n	8007cae <RCCEx_PLLSAI2_Config+0x62>
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d009      	beq.n	8007cc0 <RCCEx_PLLSAI2_Config+0x74>
 8007cac:	e020      	b.n	8007cf0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007cae:	4b54      	ldr	r3, [pc, #336]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d11d      	bne.n	8007cf6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cbe:	e01a      	b.n	8007cf6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007cc0:	4b4f      	ldr	r3, [pc, #316]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d116      	bne.n	8007cfa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cd0:	e013      	b.n	8007cfa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007cd2:	4b4b      	ldr	r3, [pc, #300]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10f      	bne.n	8007cfe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007cde:	4b48      	ldr	r3, [pc, #288]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d109      	bne.n	8007cfe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007cee:	e006      	b.n	8007cfe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf4:	e004      	b.n	8007d00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007cf6:	bf00      	nop
 8007cf8:	e002      	b.n	8007d00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007cfa:	bf00      	nop
 8007cfc:	e000      	b.n	8007d00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007cfe:	bf00      	nop
    }

    if(status == HAL_OK)
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10d      	bne.n	8007d22 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007d06:	4b3e      	ldr	r3, [pc, #248]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6819      	ldr	r1, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	011b      	lsls	r3, r3, #4
 8007d1a:	430b      	orrs	r3, r1
 8007d1c:	4938      	ldr	r1, [pc, #224]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d166      	bne.n	8007df6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007d28:	4b35      	ldr	r3, [pc, #212]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a34      	ldr	r2, [pc, #208]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d34:	f7fb fa20 	bl	8003178 <HAL_GetTick>
 8007d38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007d3a:	e009      	b.n	8007d50 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007d3c:	f7fb fa1c 	bl	8003178 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d902      	bls.n	8007d50 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	73fb      	strb	r3, [r7, #15]
        break;
 8007d4e:	e005      	b.n	8007d5c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007d50:	4b2b      	ldr	r3, [pc, #172]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1ef      	bne.n	8007d3c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d149      	bne.n	8007df6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d110      	bne.n	8007d8a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d68:	4b25      	ldr	r3, [pc, #148]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007d70:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6892      	ldr	r2, [r2, #8]
 8007d78:	0211      	lsls	r1, r2, #8
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	68d2      	ldr	r2, [r2, #12]
 8007d7e:	06d2      	lsls	r2, r2, #27
 8007d80:	430a      	orrs	r2, r1
 8007d82:	491f      	ldr	r1, [pc, #124]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	614b      	str	r3, [r1, #20]
 8007d88:	e011      	b.n	8007dae <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007d92:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	6892      	ldr	r2, [r2, #8]
 8007d9a:	0211      	lsls	r1, r2, #8
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	6912      	ldr	r2, [r2, #16]
 8007da0:	0852      	lsrs	r2, r2, #1
 8007da2:	3a01      	subs	r2, #1
 8007da4:	0652      	lsls	r2, r2, #25
 8007da6:	430a      	orrs	r2, r1
 8007da8:	4915      	ldr	r1, [pc, #84]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007dae:	4b14      	ldr	r3, [pc, #80]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a13      	ldr	r2, [pc, #76]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007db8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dba:	f7fb f9dd 	bl	8003178 <HAL_GetTick>
 8007dbe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007dc0:	e009      	b.n	8007dd6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007dc2:	f7fb f9d9 	bl	8003178 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d902      	bls.n	8007dd6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	73fb      	strb	r3, [r7, #15]
          break;
 8007dd4:	e005      	b.n	8007de2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0ef      	beq.n	8007dc2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d106      	bne.n	8007df6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007de8:	4b05      	ldr	r3, [pc, #20]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007dea:	695a      	ldr	r2, [r3, #20]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	4903      	ldr	r1, [pc, #12]	@ (8007e00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	40021000 	.word	0x40021000

08007e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e049      	b.n	8007eaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d106      	bne.n	8007e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f841 	bl	8007eb2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2202      	movs	r2, #2
 8007e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3304      	adds	r3, #4
 8007e40:	4619      	mov	r1, r3
 8007e42:	4610      	mov	r0, r2
 8007e44:	f000 f9e0 	bl	8008208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007eba:	bf00      	nop
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
	...

08007ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d001      	beq.n	8007ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e04f      	b.n	8007f80 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0201 	orr.w	r2, r2, #1
 8007ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a23      	ldr	r2, [pc, #140]	@ (8007f8c <HAL_TIM_Base_Start_IT+0xc4>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d01d      	beq.n	8007f3e <HAL_TIM_Base_Start_IT+0x76>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f0a:	d018      	beq.n	8007f3e <HAL_TIM_Base_Start_IT+0x76>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a1f      	ldr	r2, [pc, #124]	@ (8007f90 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d013      	beq.n	8007f3e <HAL_TIM_Base_Start_IT+0x76>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8007f94 <HAL_TIM_Base_Start_IT+0xcc>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00e      	beq.n	8007f3e <HAL_TIM_Base_Start_IT+0x76>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a1c      	ldr	r2, [pc, #112]	@ (8007f98 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d009      	beq.n	8007f3e <HAL_TIM_Base_Start_IT+0x76>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8007f9c <HAL_TIM_Base_Start_IT+0xd4>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d004      	beq.n	8007f3e <HAL_TIM_Base_Start_IT+0x76>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a19      	ldr	r2, [pc, #100]	@ (8007fa0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d115      	bne.n	8007f6a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	689a      	ldr	r2, [r3, #8]
 8007f44:	4b17      	ldr	r3, [pc, #92]	@ (8007fa4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007f46:	4013      	ands	r3, r2
 8007f48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2b06      	cmp	r3, #6
 8007f4e:	d015      	beq.n	8007f7c <HAL_TIM_Base_Start_IT+0xb4>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f56:	d011      	beq.n	8007f7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f042 0201 	orr.w	r2, r2, #1
 8007f66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f68:	e008      	b.n	8007f7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f042 0201 	orr.w	r2, r2, #1
 8007f78:	601a      	str	r2, [r3, #0]
 8007f7a:	e000      	b.n	8007f7e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	40012c00 	.word	0x40012c00
 8007f90:	40000400 	.word	0x40000400
 8007f94:	40000800 	.word	0x40000800
 8007f98:	40000c00 	.word	0x40000c00
 8007f9c:	40013400 	.word	0x40013400
 8007fa0:	40014000 	.word	0x40014000
 8007fa4:	00010007 	.word	0x00010007

08007fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d020      	beq.n	800800c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d01b      	beq.n	800800c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f06f 0202 	mvn.w	r2, #2
 8007fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	f003 0303 	and.w	r3, r3, #3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f8e9 	bl	80081ca <HAL_TIM_IC_CaptureCallback>
 8007ff8:	e005      	b.n	8008006 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f8db 	bl	80081b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f8ec 	bl	80081de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f003 0304 	and.w	r3, r3, #4
 8008012:	2b00      	cmp	r3, #0
 8008014:	d020      	beq.n	8008058 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	2b00      	cmp	r3, #0
 800801e:	d01b      	beq.n	8008058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f06f 0204 	mvn.w	r2, #4
 8008028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2202      	movs	r2, #2
 800802e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f8c3 	bl	80081ca <HAL_TIM_IC_CaptureCallback>
 8008044:	e005      	b.n	8008052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f8b5 	bl	80081b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f8c6 	bl	80081de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d020      	beq.n	80080a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f003 0308 	and.w	r3, r3, #8
 8008068:	2b00      	cmp	r3, #0
 800806a:	d01b      	beq.n	80080a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f06f 0208 	mvn.w	r2, #8
 8008074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2204      	movs	r2, #4
 800807a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f89d 	bl	80081ca <HAL_TIM_IC_CaptureCallback>
 8008090:	e005      	b.n	800809e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f88f 	bl	80081b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f8a0 	bl	80081de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	f003 0310 	and.w	r3, r3, #16
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d020      	beq.n	80080f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f003 0310 	and.w	r3, r3, #16
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d01b      	beq.n	80080f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f06f 0210 	mvn.w	r2, #16
 80080c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2208      	movs	r2, #8
 80080c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	69db      	ldr	r3, [r3, #28]
 80080ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f877 	bl	80081ca <HAL_TIM_IC_CaptureCallback>
 80080dc:	e005      	b.n	80080ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f869 	bl	80081b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f87a 	bl	80081de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00c      	beq.n	8008114 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	2b00      	cmp	r3, #0
 8008102:	d007      	beq.n	8008114 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f06f 0201 	mvn.w	r2, #1
 800810c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7f9 fc64 	bl	80019dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800811a:	2b00      	cmp	r3, #0
 800811c:	d104      	bne.n	8008128 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00c      	beq.n	8008142 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800812e:	2b00      	cmp	r3, #0
 8008130:	d007      	beq.n	8008142 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800813a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f913 	bl	8008368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00c      	beq.n	8008166 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008152:	2b00      	cmp	r3, #0
 8008154:	d007      	beq.n	8008166 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800815e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f90b 	bl	800837c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00c      	beq.n	800818a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008176:	2b00      	cmp	r3, #0
 8008178:	d007      	beq.n	800818a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f834 	bl	80081f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f003 0320 	and.w	r3, r3, #32
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00c      	beq.n	80081ae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f003 0320 	and.w	r3, r3, #32
 800819a:	2b00      	cmp	r3, #0
 800819c:	d007      	beq.n	80081ae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f06f 0220 	mvn.w	r2, #32
 80081a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f8d3 	bl	8008354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081ae:	bf00      	nop
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b083      	sub	sp, #12
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081be:	bf00      	nop
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081ca:	b480      	push	{r7}
 80081cc:	b083      	sub	sp, #12
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081d2:	bf00      	nop
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081de:	b480      	push	{r7}
 80081e0:	b083      	sub	sp, #12
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b083      	sub	sp, #12
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081fa:	bf00      	nop
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
	...

08008208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a46      	ldr	r2, [pc, #280]	@ (8008334 <TIM_Base_SetConfig+0x12c>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d013      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008226:	d00f      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a43      	ldr	r2, [pc, #268]	@ (8008338 <TIM_Base_SetConfig+0x130>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d00b      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a42      	ldr	r2, [pc, #264]	@ (800833c <TIM_Base_SetConfig+0x134>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d007      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a41      	ldr	r2, [pc, #260]	@ (8008340 <TIM_Base_SetConfig+0x138>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d003      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a40      	ldr	r2, [pc, #256]	@ (8008344 <TIM_Base_SetConfig+0x13c>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d108      	bne.n	800825a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800824e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a35      	ldr	r2, [pc, #212]	@ (8008334 <TIM_Base_SetConfig+0x12c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d01f      	beq.n	80082a2 <TIM_Base_SetConfig+0x9a>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008268:	d01b      	beq.n	80082a2 <TIM_Base_SetConfig+0x9a>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a32      	ldr	r2, [pc, #200]	@ (8008338 <TIM_Base_SetConfig+0x130>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d017      	beq.n	80082a2 <TIM_Base_SetConfig+0x9a>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a31      	ldr	r2, [pc, #196]	@ (800833c <TIM_Base_SetConfig+0x134>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d013      	beq.n	80082a2 <TIM_Base_SetConfig+0x9a>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a30      	ldr	r2, [pc, #192]	@ (8008340 <TIM_Base_SetConfig+0x138>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d00f      	beq.n	80082a2 <TIM_Base_SetConfig+0x9a>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a2f      	ldr	r2, [pc, #188]	@ (8008344 <TIM_Base_SetConfig+0x13c>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d00b      	beq.n	80082a2 <TIM_Base_SetConfig+0x9a>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a2e      	ldr	r2, [pc, #184]	@ (8008348 <TIM_Base_SetConfig+0x140>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d007      	beq.n	80082a2 <TIM_Base_SetConfig+0x9a>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a2d      	ldr	r2, [pc, #180]	@ (800834c <TIM_Base_SetConfig+0x144>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d003      	beq.n	80082a2 <TIM_Base_SetConfig+0x9a>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a2c      	ldr	r2, [pc, #176]	@ (8008350 <TIM_Base_SetConfig+0x148>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d108      	bne.n	80082b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	4313      	orrs	r3, r2
 80082c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	689a      	ldr	r2, [r3, #8]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a16      	ldr	r2, [pc, #88]	@ (8008334 <TIM_Base_SetConfig+0x12c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d00f      	beq.n	8008300 <TIM_Base_SetConfig+0xf8>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a18      	ldr	r2, [pc, #96]	@ (8008344 <TIM_Base_SetConfig+0x13c>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d00b      	beq.n	8008300 <TIM_Base_SetConfig+0xf8>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a17      	ldr	r2, [pc, #92]	@ (8008348 <TIM_Base_SetConfig+0x140>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d007      	beq.n	8008300 <TIM_Base_SetConfig+0xf8>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a16      	ldr	r2, [pc, #88]	@ (800834c <TIM_Base_SetConfig+0x144>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d003      	beq.n	8008300 <TIM_Base_SetConfig+0xf8>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a15      	ldr	r2, [pc, #84]	@ (8008350 <TIM_Base_SetConfig+0x148>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d103      	bne.n	8008308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	691a      	ldr	r2, [r3, #16]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	2b01      	cmp	r3, #1
 8008318:	d105      	bne.n	8008326 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f023 0201 	bic.w	r2, r3, #1
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	611a      	str	r2, [r3, #16]
  }
}
 8008326:	bf00      	nop
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	40012c00 	.word	0x40012c00
 8008338:	40000400 	.word	0x40000400
 800833c:	40000800 	.word	0x40000800
 8008340:	40000c00 	.word	0x40000c00
 8008344:	40013400 	.word	0x40013400
 8008348:	40014000 	.word	0x40014000
 800834c:	40014400 	.word	0x40014400
 8008350:	40014800 	.word	0x40014800

08008354 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e040      	b.n	8008424 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d106      	bne.n	80083b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7f9 fcf2 	bl	8001d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2224      	movs	r2, #36	@ 0x24
 80083bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 0201 	bic.w	r2, r2, #1
 80083cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d002      	beq.n	80083dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fe52 	bl	8009080 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fb97 	bl	8008b10 <UART_SetConfig>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d101      	bne.n	80083ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e01b      	b.n	8008424 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	689a      	ldr	r2, [r3, #8]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800840a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f042 0201 	orr.w	r2, r2, #1
 800841a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fed1 	bl	80091c4 <UART_CheckIdleState>
 8008422:	4603      	mov	r3, r0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b08a      	sub	sp, #40	@ 0x28
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	4613      	mov	r3, r2
 8008438:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008440:	2b20      	cmp	r3, #32
 8008442:	d137      	bne.n	80084b4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <HAL_UART_Receive_IT+0x24>
 800844a:	88fb      	ldrh	r3, [r7, #6]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e030      	b.n	80084b6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a18      	ldr	r2, [pc, #96]	@ (80084c0 <HAL_UART_Receive_IT+0x94>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d01f      	beq.n	80084a4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d018      	beq.n	80084a4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	e853 3f00 	ldrex	r3, [r3]
 800847e:	613b      	str	r3, [r7, #16]
   return(result);
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008486:	627b      	str	r3, [r7, #36]	@ 0x24
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	461a      	mov	r2, r3
 800848e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008490:	623b      	str	r3, [r7, #32]
 8008492:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008494:	69f9      	ldr	r1, [r7, #28]
 8008496:	6a3a      	ldr	r2, [r7, #32]
 8008498:	e841 2300 	strex	r3, r2, [r1]
 800849c:	61bb      	str	r3, [r7, #24]
   return(result);
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e6      	bne.n	8008472 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80084a4:	88fb      	ldrh	r3, [r7, #6]
 80084a6:	461a      	mov	r2, r3
 80084a8:	68b9      	ldr	r1, [r7, #8]
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 ffa0 	bl	80093f0 <UART_Start_Receive_IT>
 80084b0:	4603      	mov	r3, r0
 80084b2:	e000      	b.n	80084b6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80084b4:	2302      	movs	r3, #2
  }
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3728      	adds	r7, #40	@ 0x28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	40008000 	.word	0x40008000

080084c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b0ba      	sub	sp, #232	@ 0xe8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	69db      	ldr	r3, [r3, #28]
 80084d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80084ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80084ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80084f2:	4013      	ands	r3, r2
 80084f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80084f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d115      	bne.n	800852c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008504:	f003 0320 	and.w	r3, r3, #32
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00f      	beq.n	800852c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800850c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008510:	f003 0320 	and.w	r3, r3, #32
 8008514:	2b00      	cmp	r3, #0
 8008516:	d009      	beq.n	800852c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 82ca 	beq.w	8008ab6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	4798      	blx	r3
      }
      return;
 800852a:	e2c4      	b.n	8008ab6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800852c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 8117 	beq.w	8008764 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800853a:	f003 0301 	and.w	r3, r3, #1
 800853e:	2b00      	cmp	r3, #0
 8008540:	d106      	bne.n	8008550 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008542:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008546:	4b85      	ldr	r3, [pc, #532]	@ (800875c <HAL_UART_IRQHandler+0x298>)
 8008548:	4013      	ands	r3, r2
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 810a 	beq.w	8008764 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	2b00      	cmp	r3, #0
 800855a:	d011      	beq.n	8008580 <HAL_UART_IRQHandler+0xbc>
 800855c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00b      	beq.n	8008580 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2201      	movs	r2, #1
 800856e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008576:	f043 0201 	orr.w	r2, r3, #1
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008584:	f003 0302 	and.w	r3, r3, #2
 8008588:	2b00      	cmp	r3, #0
 800858a:	d011      	beq.n	80085b0 <HAL_UART_IRQHandler+0xec>
 800858c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008590:	f003 0301 	and.w	r3, r3, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00b      	beq.n	80085b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2202      	movs	r2, #2
 800859e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085a6:	f043 0204 	orr.w	r2, r3, #4
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085b4:	f003 0304 	and.w	r3, r3, #4
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d011      	beq.n	80085e0 <HAL_UART_IRQHandler+0x11c>
 80085bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00b      	beq.n	80085e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2204      	movs	r2, #4
 80085ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085d6:	f043 0202 	orr.w	r2, r3, #2
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80085e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085e4:	f003 0308 	and.w	r3, r3, #8
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d017      	beq.n	800861c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80085ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085f0:	f003 0320 	and.w	r3, r3, #32
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d105      	bne.n	8008604 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80085f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00b      	beq.n	800861c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2208      	movs	r2, #8
 800860a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008612:	f043 0208 	orr.w	r2, r3, #8
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800861c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008620:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008624:	2b00      	cmp	r3, #0
 8008626:	d012      	beq.n	800864e <HAL_UART_IRQHandler+0x18a>
 8008628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800862c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00c      	beq.n	800864e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800863c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008644:	f043 0220 	orr.w	r2, r3, #32
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 8230 	beq.w	8008aba <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800865a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800865e:	f003 0320 	and.w	r3, r3, #32
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00d      	beq.n	8008682 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800866a:	f003 0320 	and.w	r3, r3, #32
 800866e:	2b00      	cmp	r3, #0
 8008670:	d007      	beq.n	8008682 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008688:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008696:	2b40      	cmp	r3, #64	@ 0x40
 8008698:	d005      	beq.n	80086a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800869a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800869e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d04f      	beq.n	8008746 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 ff68 	bl	800957c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086b6:	2b40      	cmp	r3, #64	@ 0x40
 80086b8:	d141      	bne.n	800873e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3308      	adds	r3, #8
 80086c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80086d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3308      	adds	r3, #8
 80086e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80086e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80086ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80086f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80086f6:	e841 2300 	strex	r3, r2, [r1]
 80086fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80086fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1d9      	bne.n	80086ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800870a:	2b00      	cmp	r3, #0
 800870c:	d013      	beq.n	8008736 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008712:	4a13      	ldr	r2, [pc, #76]	@ (8008760 <HAL_UART_IRQHandler+0x29c>)
 8008714:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800871a:	4618      	mov	r0, r3
 800871c:	f7fc feb4 	bl	8005488 <HAL_DMA_Abort_IT>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d017      	beq.n	8008756 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800872a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008730:	4610      	mov	r0, r2
 8008732:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008734:	e00f      	b.n	8008756 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f9d4 	bl	8008ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800873c:	e00b      	b.n	8008756 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f9d0 	bl	8008ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008744:	e007      	b.n	8008756 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f9cc 	bl	8008ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008754:	e1b1      	b.n	8008aba <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008756:	bf00      	nop
    return;
 8008758:	e1af      	b.n	8008aba <HAL_UART_IRQHandler+0x5f6>
 800875a:	bf00      	nop
 800875c:	04000120 	.word	0x04000120
 8008760:	08009645 	.word	0x08009645

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008768:	2b01      	cmp	r3, #1
 800876a:	f040 816a 	bne.w	8008a42 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800876e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008772:	f003 0310 	and.w	r3, r3, #16
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 8163 	beq.w	8008a42 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800877c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008780:	f003 0310 	and.w	r3, r3, #16
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 815c 	beq.w	8008a42 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2210      	movs	r2, #16
 8008790:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800879c:	2b40      	cmp	r3, #64	@ 0x40
 800879e:	f040 80d4 	bne.w	800894a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80087ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 80ad 	beq.w	8008912 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80087be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087c2:	429a      	cmp	r2, r3
 80087c4:	f080 80a5 	bcs.w	8008912 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0320 	and.w	r3, r3, #32
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f040 8086 	bne.w	80088f0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80087f0:	e853 3f00 	ldrex	r3, [r3]
 80087f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80087f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80087fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008800:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	461a      	mov	r2, r3
 800880a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800880e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008812:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008816:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800881a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008826:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1da      	bne.n	80087e4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	3308      	adds	r3, #8
 8008834:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008836:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008838:	e853 3f00 	ldrex	r3, [r3]
 800883c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800883e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008840:	f023 0301 	bic.w	r3, r3, #1
 8008844:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3308      	adds	r3, #8
 800884e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008852:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008856:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800885a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800885e:	e841 2300 	strex	r3, r2, [r1]
 8008862:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008864:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1e1      	bne.n	800882e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	3308      	adds	r3, #8
 8008870:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008872:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008874:	e853 3f00 	ldrex	r3, [r3]
 8008878:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800887a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800887c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008880:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3308      	adds	r3, #8
 800888a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800888e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008890:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008892:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008894:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008896:	e841 2300 	strex	r3, r2, [r1]
 800889a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800889c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1e3      	bne.n	800886a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2220      	movs	r2, #32
 80088a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088b8:	e853 3f00 	ldrex	r3, [r3]
 80088bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088c0:	f023 0310 	bic.w	r3, r3, #16
 80088c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	461a      	mov	r2, r3
 80088ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088da:	e841 2300 	strex	r3, r2, [r1]
 80088de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1e4      	bne.n	80088b0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fc fd8e 	bl	800540c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2202      	movs	r2, #2
 80088f4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008902:	b29b      	uxth	r3, r3
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	b29b      	uxth	r3, r3
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f8f4 	bl	8008af8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008910:	e0d5      	b.n	8008abe <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008918:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800891c:	429a      	cmp	r2, r3
 800891e:	f040 80ce 	bne.w	8008abe <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0320 	and.w	r3, r3, #32
 800892e:	2b20      	cmp	r3, #32
 8008930:	f040 80c5 	bne.w	8008abe <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2202      	movs	r2, #2
 8008938:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f8d8 	bl	8008af8 <HAL_UARTEx_RxEventCallback>
      return;
 8008948:	e0b9      	b.n	8008abe <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008956:	b29b      	uxth	r3, r3
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008964:	b29b      	uxth	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 80ab 	beq.w	8008ac2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800896c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 80a6 	beq.w	8008ac2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897e:	e853 3f00 	ldrex	r3, [r3]
 8008982:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008986:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800898a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	461a      	mov	r2, r3
 8008994:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008998:	647b      	str	r3, [r7, #68]	@ 0x44
 800899a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800899e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089a0:	e841 2300 	strex	r3, r2, [r1]
 80089a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1e4      	bne.n	8008976 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3308      	adds	r3, #8
 80089b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b6:	e853 3f00 	ldrex	r3, [r3]
 80089ba:	623b      	str	r3, [r7, #32]
   return(result);
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	f023 0301 	bic.w	r3, r3, #1
 80089c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3308      	adds	r3, #8
 80089cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80089d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80089d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089d8:	e841 2300 	strex	r3, r2, [r1]
 80089dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1e3      	bne.n	80089ac <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2220      	movs	r2, #32
 80089e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	e853 3f00 	ldrex	r3, [r3]
 8008a04:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f023 0310 	bic.w	r3, r3, #16
 8008a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	461a      	mov	r2, r3
 8008a16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008a1a:	61fb      	str	r3, [r7, #28]
 8008a1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1e:	69b9      	ldr	r1, [r7, #24]
 8008a20:	69fa      	ldr	r2, [r7, #28]
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	617b      	str	r3, [r7, #20]
   return(result);
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1e4      	bne.n	80089f8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2202      	movs	r2, #2
 8008a32:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f85c 	bl	8008af8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a40:	e03f      	b.n	8008ac2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00e      	beq.n	8008a6c <HAL_UART_IRQHandler+0x5a8>
 8008a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d008      	beq.n	8008a6c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008a62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 ffe9 	bl	8009a3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a6a:	e02d      	b.n	8008ac8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00e      	beq.n	8008a96 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d008      	beq.n	8008a96 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d01c      	beq.n	8008ac6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	4798      	blx	r3
    }
    return;
 8008a94:	e017      	b.n	8008ac6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d012      	beq.n	8008ac8 <HAL_UART_IRQHandler+0x604>
 8008aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00c      	beq.n	8008ac8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fdde 	bl	8009670 <UART_EndTransmit_IT>
    return;
 8008ab4:	e008      	b.n	8008ac8 <HAL_UART_IRQHandler+0x604>
      return;
 8008ab6:	bf00      	nop
 8008ab8:	e006      	b.n	8008ac8 <HAL_UART_IRQHandler+0x604>
    return;
 8008aba:	bf00      	nop
 8008abc:	e004      	b.n	8008ac8 <HAL_UART_IRQHandler+0x604>
      return;
 8008abe:	bf00      	nop
 8008ac0:	e002      	b.n	8008ac8 <HAL_UART_IRQHandler+0x604>
      return;
 8008ac2:	bf00      	nop
 8008ac4:	e000      	b.n	8008ac8 <HAL_UART_IRQHandler+0x604>
    return;
 8008ac6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008ac8:	37e8      	adds	r7, #232	@ 0xe8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop

08008ad0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	460b      	mov	r3, r1
 8008b02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b14:	b08a      	sub	sp, #40	@ 0x28
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	431a      	orrs	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	431a      	orrs	r2, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	69db      	ldr	r3, [r3, #28]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	4ba4      	ldr	r3, [pc, #656]	@ (8008dd0 <UART_SetConfig+0x2c0>)
 8008b40:	4013      	ands	r3, r2
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	6812      	ldr	r2, [r2, #0]
 8008b46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	68da      	ldr	r2, [r3, #12]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a99      	ldr	r2, [pc, #612]	@ (8008dd4 <UART_SetConfig+0x2c4>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d004      	beq.n	8008b7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a90      	ldr	r2, [pc, #576]	@ (8008dd8 <UART_SetConfig+0x2c8>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d126      	bne.n	8008be8 <UART_SetConfig+0xd8>
 8008b9a:	4b90      	ldr	r3, [pc, #576]	@ (8008ddc <UART_SetConfig+0x2cc>)
 8008b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ba0:	f003 0303 	and.w	r3, r3, #3
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	d81b      	bhi.n	8008be0 <UART_SetConfig+0xd0>
 8008ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8008bb0 <UART_SetConfig+0xa0>)
 8008baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bae:	bf00      	nop
 8008bb0:	08008bc1 	.word	0x08008bc1
 8008bb4:	08008bd1 	.word	0x08008bd1
 8008bb8:	08008bc9 	.word	0x08008bc9
 8008bbc:	08008bd9 	.word	0x08008bd9
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bc6:	e116      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008bc8:	2302      	movs	r3, #2
 8008bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bce:	e112      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008bd0:	2304      	movs	r3, #4
 8008bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bd6:	e10e      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008bd8:	2308      	movs	r3, #8
 8008bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bde:	e10a      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008be0:	2310      	movs	r3, #16
 8008be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008be6:	e106      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a7c      	ldr	r2, [pc, #496]	@ (8008de0 <UART_SetConfig+0x2d0>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d138      	bne.n	8008c64 <UART_SetConfig+0x154>
 8008bf2:	4b7a      	ldr	r3, [pc, #488]	@ (8008ddc <UART_SetConfig+0x2cc>)
 8008bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bf8:	f003 030c 	and.w	r3, r3, #12
 8008bfc:	2b0c      	cmp	r3, #12
 8008bfe:	d82d      	bhi.n	8008c5c <UART_SetConfig+0x14c>
 8008c00:	a201      	add	r2, pc, #4	@ (adr r2, 8008c08 <UART_SetConfig+0xf8>)
 8008c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c06:	bf00      	nop
 8008c08:	08008c3d 	.word	0x08008c3d
 8008c0c:	08008c5d 	.word	0x08008c5d
 8008c10:	08008c5d 	.word	0x08008c5d
 8008c14:	08008c5d 	.word	0x08008c5d
 8008c18:	08008c4d 	.word	0x08008c4d
 8008c1c:	08008c5d 	.word	0x08008c5d
 8008c20:	08008c5d 	.word	0x08008c5d
 8008c24:	08008c5d 	.word	0x08008c5d
 8008c28:	08008c45 	.word	0x08008c45
 8008c2c:	08008c5d 	.word	0x08008c5d
 8008c30:	08008c5d 	.word	0x08008c5d
 8008c34:	08008c5d 	.word	0x08008c5d
 8008c38:	08008c55 	.word	0x08008c55
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c42:	e0d8      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008c44:	2302      	movs	r3, #2
 8008c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c4a:	e0d4      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008c4c:	2304      	movs	r3, #4
 8008c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c52:	e0d0      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008c54:	2308      	movs	r3, #8
 8008c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c5a:	e0cc      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008c5c:	2310      	movs	r3, #16
 8008c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c62:	e0c8      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a5e      	ldr	r2, [pc, #376]	@ (8008de4 <UART_SetConfig+0x2d4>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d125      	bne.n	8008cba <UART_SetConfig+0x1aa>
 8008c6e:	4b5b      	ldr	r3, [pc, #364]	@ (8008ddc <UART_SetConfig+0x2cc>)
 8008c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c74:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008c78:	2b30      	cmp	r3, #48	@ 0x30
 8008c7a:	d016      	beq.n	8008caa <UART_SetConfig+0x19a>
 8008c7c:	2b30      	cmp	r3, #48	@ 0x30
 8008c7e:	d818      	bhi.n	8008cb2 <UART_SetConfig+0x1a2>
 8008c80:	2b20      	cmp	r3, #32
 8008c82:	d00a      	beq.n	8008c9a <UART_SetConfig+0x18a>
 8008c84:	2b20      	cmp	r3, #32
 8008c86:	d814      	bhi.n	8008cb2 <UART_SetConfig+0x1a2>
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d002      	beq.n	8008c92 <UART_SetConfig+0x182>
 8008c8c:	2b10      	cmp	r3, #16
 8008c8e:	d008      	beq.n	8008ca2 <UART_SetConfig+0x192>
 8008c90:	e00f      	b.n	8008cb2 <UART_SetConfig+0x1a2>
 8008c92:	2300      	movs	r3, #0
 8008c94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c98:	e0ad      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008c9a:	2302      	movs	r3, #2
 8008c9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ca0:	e0a9      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008ca2:	2304      	movs	r3, #4
 8008ca4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ca8:	e0a5      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008caa:	2308      	movs	r3, #8
 8008cac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cb0:	e0a1      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008cb2:	2310      	movs	r3, #16
 8008cb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cb8:	e09d      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a4a      	ldr	r2, [pc, #296]	@ (8008de8 <UART_SetConfig+0x2d8>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d125      	bne.n	8008d10 <UART_SetConfig+0x200>
 8008cc4:	4b45      	ldr	r3, [pc, #276]	@ (8008ddc <UART_SetConfig+0x2cc>)
 8008cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008cce:	2bc0      	cmp	r3, #192	@ 0xc0
 8008cd0:	d016      	beq.n	8008d00 <UART_SetConfig+0x1f0>
 8008cd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008cd4:	d818      	bhi.n	8008d08 <UART_SetConfig+0x1f8>
 8008cd6:	2b80      	cmp	r3, #128	@ 0x80
 8008cd8:	d00a      	beq.n	8008cf0 <UART_SetConfig+0x1e0>
 8008cda:	2b80      	cmp	r3, #128	@ 0x80
 8008cdc:	d814      	bhi.n	8008d08 <UART_SetConfig+0x1f8>
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d002      	beq.n	8008ce8 <UART_SetConfig+0x1d8>
 8008ce2:	2b40      	cmp	r3, #64	@ 0x40
 8008ce4:	d008      	beq.n	8008cf8 <UART_SetConfig+0x1e8>
 8008ce6:	e00f      	b.n	8008d08 <UART_SetConfig+0x1f8>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cee:	e082      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cf6:	e07e      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008cf8:	2304      	movs	r3, #4
 8008cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cfe:	e07a      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008d00:	2308      	movs	r3, #8
 8008d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d06:	e076      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008d08:	2310      	movs	r3, #16
 8008d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d0e:	e072      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a35      	ldr	r2, [pc, #212]	@ (8008dec <UART_SetConfig+0x2dc>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d12a      	bne.n	8008d70 <UART_SetConfig+0x260>
 8008d1a:	4b30      	ldr	r3, [pc, #192]	@ (8008ddc <UART_SetConfig+0x2cc>)
 8008d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d28:	d01a      	beq.n	8008d60 <UART_SetConfig+0x250>
 8008d2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d2e:	d81b      	bhi.n	8008d68 <UART_SetConfig+0x258>
 8008d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d34:	d00c      	beq.n	8008d50 <UART_SetConfig+0x240>
 8008d36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d3a:	d815      	bhi.n	8008d68 <UART_SetConfig+0x258>
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <UART_SetConfig+0x238>
 8008d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d44:	d008      	beq.n	8008d58 <UART_SetConfig+0x248>
 8008d46:	e00f      	b.n	8008d68 <UART_SetConfig+0x258>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d4e:	e052      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008d50:	2302      	movs	r3, #2
 8008d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d56:	e04e      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008d58:	2304      	movs	r3, #4
 8008d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d5e:	e04a      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008d60:	2308      	movs	r3, #8
 8008d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d66:	e046      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008d68:	2310      	movs	r3, #16
 8008d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d6e:	e042      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a17      	ldr	r2, [pc, #92]	@ (8008dd4 <UART_SetConfig+0x2c4>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d13a      	bne.n	8008df0 <UART_SetConfig+0x2e0>
 8008d7a:	4b18      	ldr	r3, [pc, #96]	@ (8008ddc <UART_SetConfig+0x2cc>)
 8008d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008d84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d88:	d01a      	beq.n	8008dc0 <UART_SetConfig+0x2b0>
 8008d8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d8e:	d81b      	bhi.n	8008dc8 <UART_SetConfig+0x2b8>
 8008d90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d94:	d00c      	beq.n	8008db0 <UART_SetConfig+0x2a0>
 8008d96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d9a:	d815      	bhi.n	8008dc8 <UART_SetConfig+0x2b8>
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d003      	beq.n	8008da8 <UART_SetConfig+0x298>
 8008da0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008da4:	d008      	beq.n	8008db8 <UART_SetConfig+0x2a8>
 8008da6:	e00f      	b.n	8008dc8 <UART_SetConfig+0x2b8>
 8008da8:	2300      	movs	r3, #0
 8008daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dae:	e022      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008db0:	2302      	movs	r3, #2
 8008db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008db6:	e01e      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008db8:	2304      	movs	r3, #4
 8008dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dbe:	e01a      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008dc0:	2308      	movs	r3, #8
 8008dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dc6:	e016      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008dc8:	2310      	movs	r3, #16
 8008dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dce:	e012      	b.n	8008df6 <UART_SetConfig+0x2e6>
 8008dd0:	efff69f3 	.word	0xefff69f3
 8008dd4:	40008000 	.word	0x40008000
 8008dd8:	40013800 	.word	0x40013800
 8008ddc:	40021000 	.word	0x40021000
 8008de0:	40004400 	.word	0x40004400
 8008de4:	40004800 	.word	0x40004800
 8008de8:	40004c00 	.word	0x40004c00
 8008dec:	40005000 	.word	0x40005000
 8008df0:	2310      	movs	r3, #16
 8008df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a9f      	ldr	r2, [pc, #636]	@ (8009078 <UART_SetConfig+0x568>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d17a      	bne.n	8008ef6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	d824      	bhi.n	8008e52 <UART_SetConfig+0x342>
 8008e08:	a201      	add	r2, pc, #4	@ (adr r2, 8008e10 <UART_SetConfig+0x300>)
 8008e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0e:	bf00      	nop
 8008e10:	08008e35 	.word	0x08008e35
 8008e14:	08008e53 	.word	0x08008e53
 8008e18:	08008e3d 	.word	0x08008e3d
 8008e1c:	08008e53 	.word	0x08008e53
 8008e20:	08008e43 	.word	0x08008e43
 8008e24:	08008e53 	.word	0x08008e53
 8008e28:	08008e53 	.word	0x08008e53
 8008e2c:	08008e53 	.word	0x08008e53
 8008e30:	08008e4b 	.word	0x08008e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e34:	f7fe fa5e 	bl	80072f4 <HAL_RCC_GetPCLK1Freq>
 8008e38:	61f8      	str	r0, [r7, #28]
        break;
 8008e3a:	e010      	b.n	8008e5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e3c:	4b8f      	ldr	r3, [pc, #572]	@ (800907c <UART_SetConfig+0x56c>)
 8008e3e:	61fb      	str	r3, [r7, #28]
        break;
 8008e40:	e00d      	b.n	8008e5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e42:	f7fe f9bf 	bl	80071c4 <HAL_RCC_GetSysClockFreq>
 8008e46:	61f8      	str	r0, [r7, #28]
        break;
 8008e48:	e009      	b.n	8008e5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e4e:	61fb      	str	r3, [r7, #28]
        break;
 8008e50:	e005      	b.n	8008e5e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008e5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 80fb 	beq.w	800905c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	005b      	lsls	r3, r3, #1
 8008e6e:	4413      	add	r3, r2
 8008e70:	69fa      	ldr	r2, [r7, #28]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d305      	bcc.n	8008e82 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008e7c:	69fa      	ldr	r2, [r7, #28]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d903      	bls.n	8008e8a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008e88:	e0e8      	b.n	800905c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	461c      	mov	r4, r3
 8008e90:	4615      	mov	r5, r2
 8008e92:	f04f 0200 	mov.w	r2, #0
 8008e96:	f04f 0300 	mov.w	r3, #0
 8008e9a:	022b      	lsls	r3, r5, #8
 8008e9c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008ea0:	0222      	lsls	r2, r4, #8
 8008ea2:	68f9      	ldr	r1, [r7, #12]
 8008ea4:	6849      	ldr	r1, [r1, #4]
 8008ea6:	0849      	lsrs	r1, r1, #1
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	4688      	mov	r8, r1
 8008eac:	4681      	mov	r9, r0
 8008eae:	eb12 0a08 	adds.w	sl, r2, r8
 8008eb2:	eb43 0b09 	adc.w	fp, r3, r9
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	603b      	str	r3, [r7, #0]
 8008ebe:	607a      	str	r2, [r7, #4]
 8008ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ec4:	4650      	mov	r0, sl
 8008ec6:	4659      	mov	r1, fp
 8008ec8:	f7f7 f992 	bl	80001f0 <__aeabi_uldivmod>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008eda:	d308      	bcc.n	8008eee <UART_SetConfig+0x3de>
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ee2:	d204      	bcs.n	8008eee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	69ba      	ldr	r2, [r7, #24]
 8008eea:	60da      	str	r2, [r3, #12]
 8008eec:	e0b6      	b.n	800905c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008ef4:	e0b2      	b.n	800905c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008efe:	d15e      	bne.n	8008fbe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008f00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f04:	2b08      	cmp	r3, #8
 8008f06:	d828      	bhi.n	8008f5a <UART_SetConfig+0x44a>
 8008f08:	a201      	add	r2, pc, #4	@ (adr r2, 8008f10 <UART_SetConfig+0x400>)
 8008f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0e:	bf00      	nop
 8008f10:	08008f35 	.word	0x08008f35
 8008f14:	08008f3d 	.word	0x08008f3d
 8008f18:	08008f45 	.word	0x08008f45
 8008f1c:	08008f5b 	.word	0x08008f5b
 8008f20:	08008f4b 	.word	0x08008f4b
 8008f24:	08008f5b 	.word	0x08008f5b
 8008f28:	08008f5b 	.word	0x08008f5b
 8008f2c:	08008f5b 	.word	0x08008f5b
 8008f30:	08008f53 	.word	0x08008f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f34:	f7fe f9de 	bl	80072f4 <HAL_RCC_GetPCLK1Freq>
 8008f38:	61f8      	str	r0, [r7, #28]
        break;
 8008f3a:	e014      	b.n	8008f66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f3c:	f7fe f9f0 	bl	8007320 <HAL_RCC_GetPCLK2Freq>
 8008f40:	61f8      	str	r0, [r7, #28]
        break;
 8008f42:	e010      	b.n	8008f66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f44:	4b4d      	ldr	r3, [pc, #308]	@ (800907c <UART_SetConfig+0x56c>)
 8008f46:	61fb      	str	r3, [r7, #28]
        break;
 8008f48:	e00d      	b.n	8008f66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f4a:	f7fe f93b 	bl	80071c4 <HAL_RCC_GetSysClockFreq>
 8008f4e:	61f8      	str	r0, [r7, #28]
        break;
 8008f50:	e009      	b.n	8008f66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f56:	61fb      	str	r3, [r7, #28]
        break;
 8008f58:	e005      	b.n	8008f66 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008f64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d077      	beq.n	800905c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	005a      	lsls	r2, r3, #1
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	085b      	lsrs	r3, r3, #1
 8008f76:	441a      	add	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f80:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	2b0f      	cmp	r3, #15
 8008f86:	d916      	bls.n	8008fb6 <UART_SetConfig+0x4a6>
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f8e:	d212      	bcs.n	8008fb6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	f023 030f 	bic.w	r3, r3, #15
 8008f98:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	085b      	lsrs	r3, r3, #1
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	f003 0307 	and.w	r3, r3, #7
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	8afb      	ldrh	r3, [r7, #22]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	8afa      	ldrh	r2, [r7, #22]
 8008fb2:	60da      	str	r2, [r3, #12]
 8008fb4:	e052      	b.n	800905c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008fbc:	e04e      	b.n	800905c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008fbe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008fc2:	2b08      	cmp	r3, #8
 8008fc4:	d827      	bhi.n	8009016 <UART_SetConfig+0x506>
 8008fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8008fcc <UART_SetConfig+0x4bc>)
 8008fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fcc:	08008ff1 	.word	0x08008ff1
 8008fd0:	08008ff9 	.word	0x08008ff9
 8008fd4:	08009001 	.word	0x08009001
 8008fd8:	08009017 	.word	0x08009017
 8008fdc:	08009007 	.word	0x08009007
 8008fe0:	08009017 	.word	0x08009017
 8008fe4:	08009017 	.word	0x08009017
 8008fe8:	08009017 	.word	0x08009017
 8008fec:	0800900f 	.word	0x0800900f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ff0:	f7fe f980 	bl	80072f4 <HAL_RCC_GetPCLK1Freq>
 8008ff4:	61f8      	str	r0, [r7, #28]
        break;
 8008ff6:	e014      	b.n	8009022 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ff8:	f7fe f992 	bl	8007320 <HAL_RCC_GetPCLK2Freq>
 8008ffc:	61f8      	str	r0, [r7, #28]
        break;
 8008ffe:	e010      	b.n	8009022 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009000:	4b1e      	ldr	r3, [pc, #120]	@ (800907c <UART_SetConfig+0x56c>)
 8009002:	61fb      	str	r3, [r7, #28]
        break;
 8009004:	e00d      	b.n	8009022 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009006:	f7fe f8dd 	bl	80071c4 <HAL_RCC_GetSysClockFreq>
 800900a:	61f8      	str	r0, [r7, #28]
        break;
 800900c:	e009      	b.n	8009022 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800900e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009012:	61fb      	str	r3, [r7, #28]
        break;
 8009014:	e005      	b.n	8009022 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009016:	2300      	movs	r3, #0
 8009018:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009020:	bf00      	nop
    }

    if (pclk != 0U)
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d019      	beq.n	800905c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	085a      	lsrs	r2, r3, #1
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	441a      	add	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	fbb2 f3f3 	udiv	r3, r2, r3
 800903a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	2b0f      	cmp	r3, #15
 8009040:	d909      	bls.n	8009056 <UART_SetConfig+0x546>
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009048:	d205      	bcs.n	8009056 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	b29a      	uxth	r2, r3
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	60da      	str	r2, [r3, #12]
 8009054:	e002      	b.n	800905c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009068:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800906c:	4618      	mov	r0, r3
 800906e:	3728      	adds	r7, #40	@ 0x28
 8009070:	46bd      	mov	sp, r7
 8009072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009076:	bf00      	nop
 8009078:	40008000 	.word	0x40008000
 800907c:	00f42400 	.word	0x00f42400

08009080 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800908c:	f003 0308 	and.w	r3, r3, #8
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00a      	beq.n	80090aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00a      	beq.n	80090cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d0:	f003 0302 	and.w	r3, r3, #2
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00a      	beq.n	80090ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	430a      	orrs	r2, r1
 80090ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f2:	f003 0304 	and.w	r3, r3, #4
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00a      	beq.n	8009110 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	430a      	orrs	r2, r1
 800910e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009114:	f003 0310 	and.w	r3, r3, #16
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00a      	beq.n	8009132 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	430a      	orrs	r2, r1
 8009130:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009136:	f003 0320 	and.w	r3, r3, #32
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	430a      	orrs	r2, r1
 8009152:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800915c:	2b00      	cmp	r3, #0
 800915e:	d01a      	beq.n	8009196 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	430a      	orrs	r2, r1
 8009174:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800917a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800917e:	d10a      	bne.n	8009196 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	430a      	orrs	r2, r1
 8009194:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800919a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00a      	beq.n	80091b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	430a      	orrs	r2, r1
 80091b6:	605a      	str	r2, [r3, #4]
  }
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b098      	sub	sp, #96	@ 0x60
 80091c8:	af02      	add	r7, sp, #8
 80091ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091d4:	f7f9 ffd0 	bl	8003178 <HAL_GetTick>
 80091d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0308 	and.w	r3, r3, #8
 80091e4:	2b08      	cmp	r3, #8
 80091e6:	d12e      	bne.n	8009246 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091f0:	2200      	movs	r2, #0
 80091f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f88c 	bl	8009314 <UART_WaitOnFlagUntilTimeout>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d021      	beq.n	8009246 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920a:	e853 3f00 	ldrex	r3, [r3]
 800920e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009216:	653b      	str	r3, [r7, #80]	@ 0x50
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	461a      	mov	r2, r3
 800921e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009220:	647b      	str	r3, [r7, #68]	@ 0x44
 8009222:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009224:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009226:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009228:	e841 2300 	strex	r3, r2, [r1]
 800922c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800922e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e6      	bne.n	8009202 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2220      	movs	r2, #32
 8009238:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e062      	b.n	800930c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 0304 	and.w	r3, r3, #4
 8009250:	2b04      	cmp	r3, #4
 8009252:	d149      	bne.n	80092e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009254:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009258:	9300      	str	r3, [sp, #0]
 800925a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800925c:	2200      	movs	r2, #0
 800925e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f856 	bl	8009314 <UART_WaitOnFlagUntilTimeout>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d03c      	beq.n	80092e8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009276:	e853 3f00 	ldrex	r3, [r3]
 800927a:	623b      	str	r3, [r7, #32]
   return(result);
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009282:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	461a      	mov	r2, r3
 800928a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800928c:	633b      	str	r3, [r7, #48]	@ 0x30
 800928e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009290:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009294:	e841 2300 	strex	r3, r2, [r1]
 8009298:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800929a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1e6      	bne.n	800926e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3308      	adds	r3, #8
 80092a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	e853 3f00 	ldrex	r3, [r3]
 80092ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f023 0301 	bic.w	r3, r3, #1
 80092b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3308      	adds	r3, #8
 80092be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092c0:	61fa      	str	r2, [r7, #28]
 80092c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c4:	69b9      	ldr	r1, [r7, #24]
 80092c6:	69fa      	ldr	r2, [r7, #28]
 80092c8:	e841 2300 	strex	r3, r2, [r1]
 80092cc:	617b      	str	r3, [r7, #20]
   return(result);
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e5      	bne.n	80092a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2220      	movs	r2, #32
 80092d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e011      	b.n	800930c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2220      	movs	r2, #32
 80092ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2220      	movs	r2, #32
 80092f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3758      	adds	r7, #88	@ 0x58
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	603b      	str	r3, [r7, #0]
 8009320:	4613      	mov	r3, r2
 8009322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009324:	e04f      	b.n	80093c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932c:	d04b      	beq.n	80093c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800932e:	f7f9 ff23 	bl	8003178 <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	69ba      	ldr	r2, [r7, #24]
 800933a:	429a      	cmp	r2, r3
 800933c:	d302      	bcc.n	8009344 <UART_WaitOnFlagUntilTimeout+0x30>
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009344:	2303      	movs	r3, #3
 8009346:	e04e      	b.n	80093e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 0304 	and.w	r3, r3, #4
 8009352:	2b00      	cmp	r3, #0
 8009354:	d037      	beq.n	80093c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	2b80      	cmp	r3, #128	@ 0x80
 800935a:	d034      	beq.n	80093c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	2b40      	cmp	r3, #64	@ 0x40
 8009360:	d031      	beq.n	80093c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	69db      	ldr	r3, [r3, #28]
 8009368:	f003 0308 	and.w	r3, r3, #8
 800936c:	2b08      	cmp	r3, #8
 800936e:	d110      	bne.n	8009392 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2208      	movs	r2, #8
 8009376:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f000 f8ff 	bl	800957c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2208      	movs	r2, #8
 8009382:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e029      	b.n	80093e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	69db      	ldr	r3, [r3, #28]
 8009398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800939c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093a0:	d111      	bne.n	80093c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80093aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 f8e5 	bl	800957c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2220      	movs	r2, #32
 80093b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e00f      	b.n	80093e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	69da      	ldr	r2, [r3, #28]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	4013      	ands	r3, r2
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	bf0c      	ite	eq
 80093d6:	2301      	moveq	r3, #1
 80093d8:	2300      	movne	r3, #0
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	461a      	mov	r2, r3
 80093de:	79fb      	ldrb	r3, [r7, #7]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d0a0      	beq.n	8009326 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
	...

080093f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b097      	sub	sp, #92	@ 0x5c
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	4613      	mov	r3, r2
 80093fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	88fa      	ldrh	r2, [r7, #6]
 8009408:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	88fa      	ldrh	r2, [r7, #6]
 8009410:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009422:	d10e      	bne.n	8009442 <UART_Start_Receive_IT+0x52>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d105      	bne.n	8009438 <UART_Start_Receive_IT+0x48>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009432:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009436:	e02d      	b.n	8009494 <UART_Start_Receive_IT+0xa4>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	22ff      	movs	r2, #255	@ 0xff
 800943c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009440:	e028      	b.n	8009494 <UART_Start_Receive_IT+0xa4>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10d      	bne.n	8009466 <UART_Start_Receive_IT+0x76>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d104      	bne.n	800945c <UART_Start_Receive_IT+0x6c>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	22ff      	movs	r2, #255	@ 0xff
 8009456:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800945a:	e01b      	b.n	8009494 <UART_Start_Receive_IT+0xa4>
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	227f      	movs	r2, #127	@ 0x7f
 8009460:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009464:	e016      	b.n	8009494 <UART_Start_Receive_IT+0xa4>
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800946e:	d10d      	bne.n	800948c <UART_Start_Receive_IT+0x9c>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d104      	bne.n	8009482 <UART_Start_Receive_IT+0x92>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	227f      	movs	r2, #127	@ 0x7f
 800947c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009480:	e008      	b.n	8009494 <UART_Start_Receive_IT+0xa4>
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	223f      	movs	r2, #63	@ 0x3f
 8009486:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800948a:	e003      	b.n	8009494 <UART_Start_Receive_IT+0xa4>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2222      	movs	r2, #34	@ 0x22
 80094a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	3308      	adds	r3, #8
 80094aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094ae:	e853 3f00 	ldrex	r3, [r3]
 80094b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b6:	f043 0301 	orr.w	r3, r3, #1
 80094ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	3308      	adds	r3, #8
 80094c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80094c4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80094c6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80094ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094cc:	e841 2300 	strex	r3, r2, [r1]
 80094d0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80094d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1e5      	bne.n	80094a4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094e0:	d107      	bne.n	80094f2 <UART_Start_Receive_IT+0x102>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d103      	bne.n	80094f2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	4a21      	ldr	r2, [pc, #132]	@ (8009574 <UART_Start_Receive_IT+0x184>)
 80094ee:	669a      	str	r2, [r3, #104]	@ 0x68
 80094f0:	e002      	b.n	80094f8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	4a20      	ldr	r2, [pc, #128]	@ (8009578 <UART_Start_Receive_IT+0x188>)
 80094f6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d019      	beq.n	8009534 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009508:	e853 3f00 	ldrex	r3, [r3]
 800950c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800950e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009510:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009514:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	461a      	mov	r2, r3
 800951c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800951e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009520:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009522:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009524:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009526:	e841 2300 	strex	r3, r2, [r1]
 800952a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800952c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1e6      	bne.n	8009500 <UART_Start_Receive_IT+0x110>
 8009532:	e018      	b.n	8009566 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	e853 3f00 	ldrex	r3, [r3]
 8009540:	613b      	str	r3, [r7, #16]
   return(result);
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	f043 0320 	orr.w	r3, r3, #32
 8009548:	653b      	str	r3, [r7, #80]	@ 0x50
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	461a      	mov	r2, r3
 8009550:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009552:	623b      	str	r3, [r7, #32]
 8009554:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009556:	69f9      	ldr	r1, [r7, #28]
 8009558:	6a3a      	ldr	r2, [r7, #32]
 800955a:	e841 2300 	strex	r3, r2, [r1]
 800955e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1e6      	bne.n	8009534 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	375c      	adds	r7, #92	@ 0x5c
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	08009881 	.word	0x08009881
 8009578:	080096c5 	.word	0x080096c5

0800957c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800957c:	b480      	push	{r7}
 800957e:	b095      	sub	sp, #84	@ 0x54
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800958c:	e853 3f00 	ldrex	r3, [r3]
 8009590:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009594:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009598:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80095a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095aa:	e841 2300 	strex	r3, r2, [r1]
 80095ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1e6      	bne.n	8009584 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	3308      	adds	r3, #8
 80095bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095be:	6a3b      	ldr	r3, [r7, #32]
 80095c0:	e853 3f00 	ldrex	r3, [r3]
 80095c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	f023 0301 	bic.w	r3, r3, #1
 80095cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3308      	adds	r3, #8
 80095d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095de:	e841 2300 	strex	r3, r2, [r1]
 80095e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1e5      	bne.n	80095b6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d118      	bne.n	8009624 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	e853 3f00 	ldrex	r3, [r3]
 80095fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	f023 0310 	bic.w	r3, r3, #16
 8009606:	647b      	str	r3, [r7, #68]	@ 0x44
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	461a      	mov	r2, r3
 800960e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009610:	61bb      	str	r3, [r7, #24]
 8009612:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009614:	6979      	ldr	r1, [r7, #20]
 8009616:	69ba      	ldr	r2, [r7, #24]
 8009618:	e841 2300 	strex	r3, r2, [r1]
 800961c:	613b      	str	r3, [r7, #16]
   return(result);
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1e6      	bne.n	80095f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2220      	movs	r2, #32
 8009628:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009638:	bf00      	nop
 800963a:	3754      	adds	r7, #84	@ 0x54
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009650:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f7ff fa3e 	bl	8008ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009668:	bf00      	nop
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b088      	sub	sp, #32
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	e853 3f00 	ldrex	r3, [r3]
 8009684:	60bb      	str	r3, [r7, #8]
   return(result);
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800968c:	61fb      	str	r3, [r7, #28]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	61bb      	str	r3, [r7, #24]
 8009698:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	6979      	ldr	r1, [r7, #20]
 800969c:	69ba      	ldr	r2, [r7, #24]
 800969e:	e841 2300 	strex	r3, r2, [r1]
 80096a2:	613b      	str	r3, [r7, #16]
   return(result);
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1e6      	bne.n	8009678 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2220      	movs	r2, #32
 80096ae:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7ff fa0a 	bl	8008ad0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096bc:	bf00      	nop
 80096be:	3720      	adds	r7, #32
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b09c      	sub	sp, #112	@ 0x70
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096dc:	2b22      	cmp	r3, #34	@ 0x22
 80096de:	f040 80be 	bne.w	800985e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80096e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80096ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80096f0:	b2d9      	uxtb	r1, r3
 80096f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096fc:	400a      	ands	r2, r1
 80096fe:	b2d2      	uxtb	r2, r2
 8009700:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009706:	1c5a      	adds	r2, r3, #1
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009712:	b29b      	uxth	r3, r3
 8009714:	3b01      	subs	r3, #1
 8009716:	b29a      	uxth	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009724:	b29b      	uxth	r3, r3
 8009726:	2b00      	cmp	r3, #0
 8009728:	f040 80a3 	bne.w	8009872 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009734:	e853 3f00 	ldrex	r3, [r3]
 8009738:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800973a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800973c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009740:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800974a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800974c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009750:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009752:	e841 2300 	strex	r3, r2, [r1]
 8009756:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1e6      	bne.n	800972c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3308      	adds	r3, #8
 8009764:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009768:	e853 3f00 	ldrex	r3, [r3]
 800976c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800976e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009770:	f023 0301 	bic.w	r3, r3, #1
 8009774:	667b      	str	r3, [r7, #100]	@ 0x64
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3308      	adds	r3, #8
 800977c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800977e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009780:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009782:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009784:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009786:	e841 2300 	strex	r3, r2, [r1]
 800978a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800978c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1e5      	bne.n	800975e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2220      	movs	r2, #32
 8009796:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a34      	ldr	r2, [pc, #208]	@ (800987c <UART_RxISR_8BIT+0x1b8>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d01f      	beq.n	80097f0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d018      	beq.n	80097f0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c6:	e853 3f00 	ldrex	r3, [r3]
 80097ca:	623b      	str	r3, [r7, #32]
   return(result);
 80097cc:	6a3b      	ldr	r3, [r7, #32]
 80097ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80097d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	461a      	mov	r2, r3
 80097da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80097dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80097de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097e4:	e841 2300 	strex	r3, r2, [r1]
 80097e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1e6      	bne.n	80097be <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d12e      	bne.n	8009856 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	e853 3f00 	ldrex	r3, [r3]
 800980a:	60fb      	str	r3, [r7, #12]
   return(result);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f023 0310 	bic.w	r3, r3, #16
 8009812:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	461a      	mov	r2, r3
 800981a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800981c:	61fb      	str	r3, [r7, #28]
 800981e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009820:	69b9      	ldr	r1, [r7, #24]
 8009822:	69fa      	ldr	r2, [r7, #28]
 8009824:	e841 2300 	strex	r3, r2, [r1]
 8009828:	617b      	str	r3, [r7, #20]
   return(result);
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1e6      	bne.n	80097fe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	69db      	ldr	r3, [r3, #28]
 8009836:	f003 0310 	and.w	r3, r3, #16
 800983a:	2b10      	cmp	r3, #16
 800983c:	d103      	bne.n	8009846 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2210      	movs	r2, #16
 8009844:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800984c:	4619      	mov	r1, r3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f7ff f952 	bl	8008af8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009854:	e00d      	b.n	8009872 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7f7 fcba 	bl	80011d0 <HAL_UART_RxCpltCallback>
}
 800985c:	e009      	b.n	8009872 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	8b1b      	ldrh	r3, [r3, #24]
 8009864:	b29a      	uxth	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f042 0208 	orr.w	r2, r2, #8
 800986e:	b292      	uxth	r2, r2
 8009870:	831a      	strh	r2, [r3, #24]
}
 8009872:	bf00      	nop
 8009874:	3770      	adds	r7, #112	@ 0x70
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	40008000 	.word	0x40008000

08009880 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b09c      	sub	sp, #112	@ 0x70
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800988e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009898:	2b22      	cmp	r3, #34	@ 0x22
 800989a:	f040 80be 	bne.w	8009a1a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80098a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80098ae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80098b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80098b6:	4013      	ands	r3, r2
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098c2:	1c9a      	adds	r2, r3, #2
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	3b01      	subs	r3, #1
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f040 80a3 	bne.w	8009a2e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098f0:	e853 3f00 	ldrex	r3, [r3]
 80098f4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80098f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	461a      	mov	r2, r3
 8009904:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009906:	657b      	str	r3, [r7, #84]	@ 0x54
 8009908:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800990c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1e6      	bne.n	80098e8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	3308      	adds	r3, #8
 8009920:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009924:	e853 3f00 	ldrex	r3, [r3]
 8009928:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800992a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992c:	f023 0301 	bic.w	r3, r3, #1
 8009930:	663b      	str	r3, [r7, #96]	@ 0x60
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3308      	adds	r3, #8
 8009938:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800993a:	643a      	str	r2, [r7, #64]	@ 0x40
 800993c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009940:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009942:	e841 2300 	strex	r3, r2, [r1]
 8009946:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1e5      	bne.n	800991a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2220      	movs	r2, #32
 8009952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a34      	ldr	r2, [pc, #208]	@ (8009a38 <UART_RxISR_16BIT+0x1b8>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d01f      	beq.n	80099ac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009976:	2b00      	cmp	r3, #0
 8009978:	d018      	beq.n	80099ac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	e853 3f00 	ldrex	r3, [r3]
 8009986:	61fb      	str	r3, [r7, #28]
   return(result);
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800998e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	461a      	mov	r2, r3
 8009996:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009998:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800999a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800999e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099a0:	e841 2300 	strex	r3, r2, [r1]
 80099a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e6      	bne.n	800997a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d12e      	bne.n	8009a12 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	e853 3f00 	ldrex	r3, [r3]
 80099c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	f023 0310 	bic.w	r3, r3, #16
 80099ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	461a      	mov	r2, r3
 80099d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80099d8:	61bb      	str	r3, [r7, #24]
 80099da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099dc:	6979      	ldr	r1, [r7, #20]
 80099de:	69ba      	ldr	r2, [r7, #24]
 80099e0:	e841 2300 	strex	r3, r2, [r1]
 80099e4:	613b      	str	r3, [r7, #16]
   return(result);
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1e6      	bne.n	80099ba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	69db      	ldr	r3, [r3, #28]
 80099f2:	f003 0310 	and.w	r3, r3, #16
 80099f6:	2b10      	cmp	r3, #16
 80099f8:	d103      	bne.n	8009a02 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2210      	movs	r2, #16
 8009a00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009a08:	4619      	mov	r1, r3
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7ff f874 	bl	8008af8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a10:	e00d      	b.n	8009a2e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f7f7 fbdc 	bl	80011d0 <HAL_UART_RxCpltCallback>
}
 8009a18:	e009      	b.n	8009a2e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	8b1b      	ldrh	r3, [r3, #24]
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f042 0208 	orr.w	r2, r2, #8
 8009a2a:	b292      	uxth	r2, r2
 8009a2c:	831a      	strh	r2, [r3, #24]
}
 8009a2e:	bf00      	nop
 8009a30:	3770      	adds	r7, #112	@ 0x70
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	40008000 	.word	0x40008000

08009a3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <__NVIC_SetPriority>:
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	4603      	mov	r3, r0
 8009a58:	6039      	str	r1, [r7, #0]
 8009a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	db0a      	blt.n	8009a7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	b2da      	uxtb	r2, r3
 8009a68:	490c      	ldr	r1, [pc, #48]	@ (8009a9c <__NVIC_SetPriority+0x4c>)
 8009a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a6e:	0112      	lsls	r2, r2, #4
 8009a70:	b2d2      	uxtb	r2, r2
 8009a72:	440b      	add	r3, r1
 8009a74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009a78:	e00a      	b.n	8009a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	b2da      	uxtb	r2, r3
 8009a7e:	4908      	ldr	r1, [pc, #32]	@ (8009aa0 <__NVIC_SetPriority+0x50>)
 8009a80:	79fb      	ldrb	r3, [r7, #7]
 8009a82:	f003 030f 	and.w	r3, r3, #15
 8009a86:	3b04      	subs	r3, #4
 8009a88:	0112      	lsls	r2, r2, #4
 8009a8a:	b2d2      	uxtb	r2, r2
 8009a8c:	440b      	add	r3, r1
 8009a8e:	761a      	strb	r2, [r3, #24]
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	e000e100 	.word	0xe000e100
 8009aa0:	e000ed00 	.word	0xe000ed00

08009aa4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009aa8:	4b05      	ldr	r3, [pc, #20]	@ (8009ac0 <SysTick_Handler+0x1c>)
 8009aaa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009aac:	f001 fec6 	bl	800b83c <xTaskGetSchedulerState>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d001      	beq.n	8009aba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009ab6:	f002 fcbf 	bl	800c438 <xPortSysTickHandler>
  }
}
 8009aba:	bf00      	nop
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	e000e010 	.word	0xe000e010

08009ac4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009ac8:	2100      	movs	r1, #0
 8009aca:	f06f 0004 	mvn.w	r0, #4
 8009ace:	f7ff ffbf 	bl	8009a50 <__NVIC_SetPriority>
#endif
}
 8009ad2:	bf00      	nop
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ade:	f3ef 8305 	mrs	r3, IPSR
 8009ae2:	603b      	str	r3, [r7, #0]
  return(result);
 8009ae4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d003      	beq.n	8009af2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009aea:	f06f 0305 	mvn.w	r3, #5
 8009aee:	607b      	str	r3, [r7, #4]
 8009af0:	e00c      	b.n	8009b0c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009af2:	4b0a      	ldr	r3, [pc, #40]	@ (8009b1c <osKernelInitialize+0x44>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d105      	bne.n	8009b06 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009afa:	4b08      	ldr	r3, [pc, #32]	@ (8009b1c <osKernelInitialize+0x44>)
 8009afc:	2201      	movs	r2, #1
 8009afe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009b00:	2300      	movs	r3, #0
 8009b02:	607b      	str	r3, [r7, #4]
 8009b04:	e002      	b.n	8009b0c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009b06:	f04f 33ff 	mov.w	r3, #4294967295
 8009b0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b0c:	687b      	ldr	r3, [r7, #4]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	370c      	adds	r7, #12
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	20000380 	.word	0x20000380

08009b20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b26:	f3ef 8305 	mrs	r3, IPSR
 8009b2a:	603b      	str	r3, [r7, #0]
  return(result);
 8009b2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d003      	beq.n	8009b3a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009b32:	f06f 0305 	mvn.w	r3, #5
 8009b36:	607b      	str	r3, [r7, #4]
 8009b38:	e010      	b.n	8009b5c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8009b68 <osKernelStart+0x48>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d109      	bne.n	8009b56 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b42:	f7ff ffbf 	bl	8009ac4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b46:	4b08      	ldr	r3, [pc, #32]	@ (8009b68 <osKernelStart+0x48>)
 8009b48:	2202      	movs	r2, #2
 8009b4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b4c:	f001 fa12 	bl	800af74 <vTaskStartScheduler>
      stat = osOK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	607b      	str	r3, [r7, #4]
 8009b54:	e002      	b.n	8009b5c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009b56:	f04f 33ff 	mov.w	r3, #4294967295
 8009b5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b5c:	687b      	ldr	r3, [r7, #4]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	20000380 	.word	0x20000380

08009b6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b08e      	sub	sp, #56	@ 0x38
 8009b70:	af04      	add	r7, sp, #16
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b7c:	f3ef 8305 	mrs	r3, IPSR
 8009b80:	617b      	str	r3, [r7, #20]
  return(result);
 8009b82:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d17e      	bne.n	8009c86 <osThreadNew+0x11a>
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d07b      	beq.n	8009c86 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009b8e:	2380      	movs	r3, #128	@ 0x80
 8009b90:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009b92:	2318      	movs	r3, #24
 8009b94:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009b96:	2300      	movs	r3, #0
 8009b98:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d045      	beq.n	8009c32 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d002      	beq.n	8009bb4 <osThreadNew+0x48>
        name = attr->name;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d002      	beq.n	8009bc2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	699b      	ldr	r3, [r3, #24]
 8009bc0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d008      	beq.n	8009bda <osThreadNew+0x6e>
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	2b38      	cmp	r3, #56	@ 0x38
 8009bcc:	d805      	bhi.n	8009bda <osThreadNew+0x6e>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d001      	beq.n	8009bde <osThreadNew+0x72>
        return (NULL);
 8009bda:	2300      	movs	r3, #0
 8009bdc:	e054      	b.n	8009c88 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	695b      	ldr	r3, [r3, #20]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	695b      	ldr	r3, [r3, #20]
 8009bea:	089b      	lsrs	r3, r3, #2
 8009bec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00e      	beq.n	8009c14 <osThreadNew+0xa8>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	2ba7      	cmp	r3, #167	@ 0xa7
 8009bfc:	d90a      	bls.n	8009c14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d006      	beq.n	8009c14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d002      	beq.n	8009c14 <osThreadNew+0xa8>
        mem = 1;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	61bb      	str	r3, [r7, #24]
 8009c12:	e010      	b.n	8009c36 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10c      	bne.n	8009c36 <osThreadNew+0xca>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d108      	bne.n	8009c36 <osThreadNew+0xca>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d104      	bne.n	8009c36 <osThreadNew+0xca>
          mem = 0;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	61bb      	str	r3, [r7, #24]
 8009c30:	e001      	b.n	8009c36 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009c32:	2300      	movs	r3, #0
 8009c34:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d110      	bne.n	8009c5e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c44:	9202      	str	r2, [sp, #8]
 8009c46:	9301      	str	r3, [sp, #4]
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	6a3a      	ldr	r2, [r7, #32]
 8009c50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f000 ff9a 	bl	800ab8c <xTaskCreateStatic>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	613b      	str	r3, [r7, #16]
 8009c5c:	e013      	b.n	8009c86 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d110      	bne.n	8009c86 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c64:	6a3b      	ldr	r3, [r7, #32]
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	f107 0310 	add.w	r3, r7, #16
 8009c6c:	9301      	str	r3, [sp, #4]
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f000 ffe8 	bl	800ac4c <xTaskCreate>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d001      	beq.n	8009c86 <osThreadNew+0x11a>
            hTask = NULL;
 8009c82:	2300      	movs	r3, #0
 8009c84:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c86:	693b      	ldr	r3, [r7, #16]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3728      	adds	r7, #40	@ 0x28
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c98:	f3ef 8305 	mrs	r3, IPSR
 8009c9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c9e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d003      	beq.n	8009cac <osDelay+0x1c>
    stat = osErrorISR;
 8009ca4:	f06f 0305 	mvn.w	r3, #5
 8009ca8:	60fb      	str	r3, [r7, #12]
 8009caa:	e007      	b.n	8009cbc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d002      	beq.n	8009cbc <osDelay+0x2c>
      vTaskDelay(ticks);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f001 f926 	bl	800af08 <vTaskDelay>
    }
  }

  return (stat);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b08a      	sub	sp, #40	@ 0x28
 8009cca:	af02      	add	r7, sp, #8
 8009ccc:	60f8      	str	r0, [r7, #12]
 8009cce:	60b9      	str	r1, [r7, #8]
 8009cd0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cd6:	f3ef 8305 	mrs	r3, IPSR
 8009cda:	613b      	str	r3, [r7, #16]
  return(result);
 8009cdc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d175      	bne.n	8009dce <osSemaphoreNew+0x108>
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d072      	beq.n	8009dce <osSemaphoreNew+0x108>
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d86e      	bhi.n	8009dce <osSemaphoreNew+0x108>
    mem = -1;
 8009cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d015      	beq.n	8009d28 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d006      	beq.n	8009d12 <osSemaphoreNew+0x4c>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	2b4f      	cmp	r3, #79	@ 0x4f
 8009d0a:	d902      	bls.n	8009d12 <osSemaphoreNew+0x4c>
        mem = 1;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	61bb      	str	r3, [r7, #24]
 8009d10:	e00c      	b.n	8009d2c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d108      	bne.n	8009d2c <osSemaphoreNew+0x66>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d104      	bne.n	8009d2c <osSemaphoreNew+0x66>
          mem = 0;
 8009d22:	2300      	movs	r3, #0
 8009d24:	61bb      	str	r3, [r7, #24]
 8009d26:	e001      	b.n	8009d2c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d32:	d04c      	beq.n	8009dce <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d128      	bne.n	8009d8c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d10a      	bne.n	8009d56 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	2203      	movs	r2, #3
 8009d46:	9200      	str	r2, [sp, #0]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	2001      	movs	r0, #1
 8009d4e:	f000 f995 	bl	800a07c <xQueueGenericCreateStatic>
 8009d52:	61f8      	str	r0, [r7, #28]
 8009d54:	e005      	b.n	8009d62 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009d56:	2203      	movs	r2, #3
 8009d58:	2100      	movs	r1, #0
 8009d5a:	2001      	movs	r0, #1
 8009d5c:	f000 fa0b 	bl	800a176 <xQueueGenericCreate>
 8009d60:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d022      	beq.n	8009dae <osSemaphoreNew+0xe8>
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d01f      	beq.n	8009dae <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009d6e:	2300      	movs	r3, #0
 8009d70:	2200      	movs	r2, #0
 8009d72:	2100      	movs	r1, #0
 8009d74:	69f8      	ldr	r0, [r7, #28]
 8009d76:	f000 facb 	bl	800a310 <xQueueGenericSend>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d016      	beq.n	8009dae <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009d80:	69f8      	ldr	r0, [r7, #28]
 8009d82:	f000 fd47 	bl	800a814 <vQueueDelete>
            hSemaphore = NULL;
 8009d86:	2300      	movs	r3, #0
 8009d88:	61fb      	str	r3, [r7, #28]
 8009d8a:	e010      	b.n	8009dae <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d108      	bne.n	8009da4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	461a      	mov	r2, r3
 8009d98:	68b9      	ldr	r1, [r7, #8]
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f000 fa49 	bl	800a232 <xQueueCreateCountingSemaphoreStatic>
 8009da0:	61f8      	str	r0, [r7, #28]
 8009da2:	e004      	b.n	8009dae <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009da4:	68b9      	ldr	r1, [r7, #8]
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f000 fa7c 	bl	800a2a4 <xQueueCreateCountingSemaphore>
 8009dac:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00c      	beq.n	8009dce <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	617b      	str	r3, [r7, #20]
 8009dc0:	e001      	b.n	8009dc6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009dc6:	6979      	ldr	r1, [r7, #20]
 8009dc8:	69f8      	ldr	r0, [r7, #28]
 8009dca:	f000 fe57 	bl	800aa7c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009dce:	69fb      	ldr	r3, [r7, #28]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3720      	adds	r7, #32
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	4a07      	ldr	r2, [pc, #28]	@ (8009e04 <vApplicationGetIdleTaskMemory+0x2c>)
 8009de8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	4a06      	ldr	r2, [pc, #24]	@ (8009e08 <vApplicationGetIdleTaskMemory+0x30>)
 8009dee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2280      	movs	r2, #128	@ 0x80
 8009df4:	601a      	str	r2, [r3, #0]
}
 8009df6:	bf00      	nop
 8009df8:	3714      	adds	r7, #20
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	20000384 	.word	0x20000384
 8009e08:	2000042c 	.word	0x2000042c

08009e0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	4a07      	ldr	r2, [pc, #28]	@ (8009e38 <vApplicationGetTimerTaskMemory+0x2c>)
 8009e1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	4a06      	ldr	r2, [pc, #24]	@ (8009e3c <vApplicationGetTimerTaskMemory+0x30>)
 8009e22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e2a:	601a      	str	r2, [r3, #0]
}
 8009e2c:	bf00      	nop
 8009e2e:	3714      	adds	r7, #20
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr
 8009e38:	2000062c 	.word	0x2000062c
 8009e3c:	200006d4 	.word	0x200006d4

08009e40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f103 0208 	add.w	r2, r3, #8
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f04f 32ff 	mov.w	r2, #4294967295
 8009e58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f103 0208 	add.w	r2, r3, #8
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f103 0208 	add.w	r2, r3, #8
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e74:	bf00      	nop
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e8e:	bf00      	nop
 8009e90:	370c      	adds	r7, #12
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e9a:	b480      	push	{r7}
 8009e9c:	b085      	sub	sp, #20
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	689a      	ldr	r2, [r3, #8]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	1c5a      	adds	r2, r3, #1
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	601a      	str	r2, [r3, #0]
}
 8009ed6:	bf00      	nop
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr

08009ee2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ee2:	b480      	push	{r7}
 8009ee4:	b085      	sub	sp, #20
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef8:	d103      	bne.n	8009f02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	60fb      	str	r3, [r7, #12]
 8009f00:	e00c      	b.n	8009f1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	3308      	adds	r3, #8
 8009f06:	60fb      	str	r3, [r7, #12]
 8009f08:	e002      	b.n	8009f10 <vListInsert+0x2e>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	60fb      	str	r3, [r7, #12]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	68ba      	ldr	r2, [r7, #8]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d2f6      	bcs.n	8009f0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	685a      	ldr	r2, [r3, #4]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	683a      	ldr	r2, [r7, #0]
 8009f2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	1c5a      	adds	r2, r3, #1
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	601a      	str	r2, [r3, #0]
}
 8009f48:	bf00      	nop
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	6892      	ldr	r2, [r2, #8]
 8009f6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	6852      	ldr	r2, [r2, #4]
 8009f74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d103      	bne.n	8009f88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	689a      	ldr	r2, [r3, #8]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	1e5a      	subs	r2, r3, #1
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d10b      	bne.n	8009fd4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc0:	f383 8811 	msr	BASEPRI, r3
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009fce:	bf00      	nop
 8009fd0:	bf00      	nop
 8009fd2:	e7fd      	b.n	8009fd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009fd4:	f002 f9a0 	bl	800c318 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fe0:	68f9      	ldr	r1, [r7, #12]
 8009fe2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009fe4:	fb01 f303 	mul.w	r3, r1, r3
 8009fe8:	441a      	add	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a004:	3b01      	subs	r3, #1
 800a006:	68f9      	ldr	r1, [r7, #12]
 800a008:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a00a:	fb01 f303 	mul.w	r3, r1, r3
 800a00e:	441a      	add	r2, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	22ff      	movs	r2, #255	@ 0xff
 800a018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	22ff      	movs	r2, #255	@ 0xff
 800a020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d114      	bne.n	800a054 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d01a      	beq.n	800a068 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	3310      	adds	r3, #16
 800a036:	4618      	mov	r0, r3
 800a038:	f001 fa3a 	bl	800b4b0 <xTaskRemoveFromEventList>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d012      	beq.n	800a068 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a042:	4b0d      	ldr	r3, [pc, #52]	@ (800a078 <xQueueGenericReset+0xd0>)
 800a044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a048:	601a      	str	r2, [r3, #0]
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	e009      	b.n	800a068 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	3310      	adds	r3, #16
 800a058:	4618      	mov	r0, r3
 800a05a:	f7ff fef1 	bl	8009e40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	3324      	adds	r3, #36	@ 0x24
 800a062:	4618      	mov	r0, r3
 800a064:	f7ff feec 	bl	8009e40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a068:	f002 f988 	bl	800c37c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a06c:	2301      	movs	r3, #1
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	e000ed04 	.word	0xe000ed04

0800a07c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b08e      	sub	sp, #56	@ 0x38
 800a080:	af02      	add	r7, sp, #8
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
 800a088:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10b      	bne.n	800a0a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a0a2:	bf00      	nop
 800a0a4:	bf00      	nop
 800a0a6:	e7fd      	b.n	800a0a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10b      	bne.n	800a0c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a0c0:	bf00      	nop
 800a0c2:	bf00      	nop
 800a0c4:	e7fd      	b.n	800a0c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d002      	beq.n	800a0d2 <xQueueGenericCreateStatic+0x56>
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <xQueueGenericCreateStatic+0x5a>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e000      	b.n	800a0d8 <xQueueGenericCreateStatic+0x5c>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10b      	bne.n	800a0f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	623b      	str	r3, [r7, #32]
}
 800a0ee:	bf00      	nop
 800a0f0:	bf00      	nop
 800a0f2:	e7fd      	b.n	800a0f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d102      	bne.n	800a100 <xQueueGenericCreateStatic+0x84>
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d101      	bne.n	800a104 <xQueueGenericCreateStatic+0x88>
 800a100:	2301      	movs	r3, #1
 800a102:	e000      	b.n	800a106 <xQueueGenericCreateStatic+0x8a>
 800a104:	2300      	movs	r3, #0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d10b      	bne.n	800a122 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a10e:	f383 8811 	msr	BASEPRI, r3
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	61fb      	str	r3, [r7, #28]
}
 800a11c:	bf00      	nop
 800a11e:	bf00      	nop
 800a120:	e7fd      	b.n	800a11e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a122:	2350      	movs	r3, #80	@ 0x50
 800a124:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	2b50      	cmp	r3, #80	@ 0x50
 800a12a:	d00b      	beq.n	800a144 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	61bb      	str	r3, [r7, #24]
}
 800a13e:	bf00      	nop
 800a140:	bf00      	nop
 800a142:	e7fd      	b.n	800a140 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a144:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00d      	beq.n	800a16c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a158:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	4613      	mov	r3, r2
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	68b9      	ldr	r1, [r7, #8]
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f000 f840 	bl	800a1ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a16e:	4618      	mov	r0, r3
 800a170:	3730      	adds	r7, #48	@ 0x30
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a176:	b580      	push	{r7, lr}
 800a178:	b08a      	sub	sp, #40	@ 0x28
 800a17a:	af02      	add	r7, sp, #8
 800a17c:	60f8      	str	r0, [r7, #12]
 800a17e:	60b9      	str	r1, [r7, #8]
 800a180:	4613      	mov	r3, r2
 800a182:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10b      	bne.n	800a1a2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	613b      	str	r3, [r7, #16]
}
 800a19c:	bf00      	nop
 800a19e:	bf00      	nop
 800a1a0:	e7fd      	b.n	800a19e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	68ba      	ldr	r2, [r7, #8]
 800a1a6:	fb02 f303 	mul.w	r3, r2, r3
 800a1aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	3350      	adds	r3, #80	@ 0x50
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f002 f9d3 	bl	800c55c <pvPortMalloc>
 800a1b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d011      	beq.n	800a1e2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	3350      	adds	r3, #80	@ 0x50
 800a1c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1d0:	79fa      	ldrb	r2, [r7, #7]
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	697a      	ldr	r2, [r7, #20]
 800a1da:	68b9      	ldr	r1, [r7, #8]
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f000 f805 	bl	800a1ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1e2:	69bb      	ldr	r3, [r7, #24]
	}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3720      	adds	r7, #32
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
 800a1f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d103      	bne.n	800a208 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	69ba      	ldr	r2, [r7, #24]
 800a204:	601a      	str	r2, [r3, #0]
 800a206:	e002      	b.n	800a20e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a21a:	2101      	movs	r1, #1
 800a21c:	69b8      	ldr	r0, [r7, #24]
 800a21e:	f7ff fec3 	bl	8009fa8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	78fa      	ldrb	r2, [r7, #3]
 800a226:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a22a:	bf00      	nop
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a232:	b580      	push	{r7, lr}
 800a234:	b08a      	sub	sp, #40	@ 0x28
 800a236:	af02      	add	r7, sp, #8
 800a238:	60f8      	str	r0, [r7, #12]
 800a23a:	60b9      	str	r1, [r7, #8]
 800a23c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d10b      	bne.n	800a25c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a248:	f383 8811 	msr	BASEPRI, r3
 800a24c:	f3bf 8f6f 	isb	sy
 800a250:	f3bf 8f4f 	dsb	sy
 800a254:	61bb      	str	r3, [r7, #24]
}
 800a256:	bf00      	nop
 800a258:	bf00      	nop
 800a25a:	e7fd      	b.n	800a258 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	429a      	cmp	r2, r3
 800a262:	d90b      	bls.n	800a27c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800a264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	617b      	str	r3, [r7, #20]
}
 800a276:	bf00      	nop
 800a278:	bf00      	nop
 800a27a:	e7fd      	b.n	800a278 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a27c:	2302      	movs	r3, #2
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	2100      	movs	r1, #0
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f7ff fef8 	bl	800a07c <xQueueGenericCreateStatic>
 800a28c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	68ba      	ldr	r2, [r7, #8]
 800a298:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a29a:	69fb      	ldr	r3, [r7, #28]
	}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3720      	adds	r7, #32
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b086      	sub	sp, #24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10b      	bne.n	800a2cc <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	613b      	str	r3, [r7, #16]
}
 800a2c6:	bf00      	nop
 800a2c8:	bf00      	nop
 800a2ca:	e7fd      	b.n	800a2c8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d90b      	bls.n	800a2ec <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	60fb      	str	r3, [r7, #12]
}
 800a2e6:	bf00      	nop
 800a2e8:	bf00      	nop
 800a2ea:	e7fd      	b.n	800a2e8 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a2ec:	2202      	movs	r2, #2
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f7ff ff40 	bl	800a176 <xQueueGenericCreate>
 800a2f6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d002      	beq.n	800a304 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	683a      	ldr	r2, [r7, #0]
 800a302:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a304:	697b      	ldr	r3, [r7, #20]
	}
 800a306:	4618      	mov	r0, r3
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
	...

0800a310 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b08e      	sub	sp, #56	@ 0x38
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
 800a31c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a31e:	2300      	movs	r3, #0
 800a320:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10b      	bne.n	800a344 <xQueueGenericSend+0x34>
	__asm volatile
 800a32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a33e:	bf00      	nop
 800a340:	bf00      	nop
 800a342:	e7fd      	b.n	800a340 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d103      	bne.n	800a352 <xQueueGenericSend+0x42>
 800a34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <xQueueGenericSend+0x46>
 800a352:	2301      	movs	r3, #1
 800a354:	e000      	b.n	800a358 <xQueueGenericSend+0x48>
 800a356:	2300      	movs	r3, #0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10b      	bne.n	800a374 <xQueueGenericSend+0x64>
	__asm volatile
 800a35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a360:	f383 8811 	msr	BASEPRI, r3
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a36e:	bf00      	nop
 800a370:	bf00      	nop
 800a372:	e7fd      	b.n	800a370 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b02      	cmp	r3, #2
 800a378:	d103      	bne.n	800a382 <xQueueGenericSend+0x72>
 800a37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a37c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d101      	bne.n	800a386 <xQueueGenericSend+0x76>
 800a382:	2301      	movs	r3, #1
 800a384:	e000      	b.n	800a388 <xQueueGenericSend+0x78>
 800a386:	2300      	movs	r3, #0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10b      	bne.n	800a3a4 <xQueueGenericSend+0x94>
	__asm volatile
 800a38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a390:	f383 8811 	msr	BASEPRI, r3
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	623b      	str	r3, [r7, #32]
}
 800a39e:	bf00      	nop
 800a3a0:	bf00      	nop
 800a3a2:	e7fd      	b.n	800a3a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3a4:	f001 fa4a 	bl	800b83c <xTaskGetSchedulerState>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d102      	bne.n	800a3b4 <xQueueGenericSend+0xa4>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d101      	bne.n	800a3b8 <xQueueGenericSend+0xa8>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e000      	b.n	800a3ba <xQueueGenericSend+0xaa>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10b      	bne.n	800a3d6 <xQueueGenericSend+0xc6>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	61fb      	str	r3, [r7, #28]
}
 800a3d0:	bf00      	nop
 800a3d2:	bf00      	nop
 800a3d4:	e7fd      	b.n	800a3d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3d6:	f001 ff9f 	bl	800c318 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d302      	bcc.n	800a3ec <xQueueGenericSend+0xdc>
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d129      	bne.n	800a440 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	68b9      	ldr	r1, [r7, #8]
 800a3f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3f2:	f000 fa33 	bl	800a85c <prvCopyDataToQueue>
 800a3f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d010      	beq.n	800a422 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a402:	3324      	adds	r3, #36	@ 0x24
 800a404:	4618      	mov	r0, r3
 800a406:	f001 f853 	bl	800b4b0 <xTaskRemoveFromEventList>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d013      	beq.n	800a438 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a410:	4b3f      	ldr	r3, [pc, #252]	@ (800a510 <xQueueGenericSend+0x200>)
 800a412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	e00a      	b.n	800a438 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a424:	2b00      	cmp	r3, #0
 800a426:	d007      	beq.n	800a438 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a428:	4b39      	ldr	r3, [pc, #228]	@ (800a510 <xQueueGenericSend+0x200>)
 800a42a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a42e:	601a      	str	r2, [r3, #0]
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a438:	f001 ffa0 	bl	800c37c <vPortExitCritical>
				return pdPASS;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e063      	b.n	800a508 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d103      	bne.n	800a44e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a446:	f001 ff99 	bl	800c37c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a44a:	2300      	movs	r3, #0
 800a44c:	e05c      	b.n	800a508 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a44e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a450:	2b00      	cmp	r3, #0
 800a452:	d106      	bne.n	800a462 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a454:	f107 0314 	add.w	r3, r7, #20
 800a458:	4618      	mov	r0, r3
 800a45a:	f001 f88d 	bl	800b578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a45e:	2301      	movs	r3, #1
 800a460:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a462:	f001 ff8b 	bl	800c37c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a466:	f000 fdf5 	bl	800b054 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a46a:	f001 ff55 	bl	800c318 <vPortEnterCritical>
 800a46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a470:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a474:	b25b      	sxtb	r3, r3
 800a476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47a:	d103      	bne.n	800a484 <xQueueGenericSend+0x174>
 800a47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a486:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a48a:	b25b      	sxtb	r3, r3
 800a48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a490:	d103      	bne.n	800a49a <xQueueGenericSend+0x18a>
 800a492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a49a:	f001 ff6f 	bl	800c37c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a49e:	1d3a      	adds	r2, r7, #4
 800a4a0:	f107 0314 	add.w	r3, r7, #20
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f001 f87c 	bl	800b5a4 <xTaskCheckForTimeOut>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d124      	bne.n	800a4fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a4b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4b4:	f000 faca 	bl	800aa4c <prvIsQueueFull>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d018      	beq.n	800a4f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c0:	3310      	adds	r3, #16
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	4611      	mov	r1, r2
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f000 ffa0 	bl	800b40c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a4cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4ce:	f000 fa55 	bl	800a97c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a4d2:	f000 fdcd 	bl	800b070 <xTaskResumeAll>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f47f af7c 	bne.w	800a3d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a4de:	4b0c      	ldr	r3, [pc, #48]	@ (800a510 <xQueueGenericSend+0x200>)
 800a4e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4e4:	601a      	str	r2, [r3, #0]
 800a4e6:	f3bf 8f4f 	dsb	sy
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	e772      	b.n	800a3d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4f2:	f000 fa43 	bl	800a97c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4f6:	f000 fdbb 	bl	800b070 <xTaskResumeAll>
 800a4fa:	e76c      	b.n	800a3d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a4fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4fe:	f000 fa3d 	bl	800a97c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a502:	f000 fdb5 	bl	800b070 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a506:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3738      	adds	r7, #56	@ 0x38
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	e000ed04 	.word	0xe000ed04

0800a514 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b090      	sub	sp, #64	@ 0x40
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
 800a520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d10b      	bne.n	800a544 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a530:	f383 8811 	msr	BASEPRI, r3
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a53e:	bf00      	nop
 800a540:	bf00      	nop
 800a542:	e7fd      	b.n	800a540 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d103      	bne.n	800a552 <xQueueGenericSendFromISR+0x3e>
 800a54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d101      	bne.n	800a556 <xQueueGenericSendFromISR+0x42>
 800a552:	2301      	movs	r3, #1
 800a554:	e000      	b.n	800a558 <xQueueGenericSendFromISR+0x44>
 800a556:	2300      	movs	r3, #0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10b      	bne.n	800a574 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a560:	f383 8811 	msr	BASEPRI, r3
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a56e:	bf00      	nop
 800a570:	bf00      	nop
 800a572:	e7fd      	b.n	800a570 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	2b02      	cmp	r3, #2
 800a578:	d103      	bne.n	800a582 <xQueueGenericSendFromISR+0x6e>
 800a57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a57c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d101      	bne.n	800a586 <xQueueGenericSendFromISR+0x72>
 800a582:	2301      	movs	r3, #1
 800a584:	e000      	b.n	800a588 <xQueueGenericSendFromISR+0x74>
 800a586:	2300      	movs	r3, #0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10b      	bne.n	800a5a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	623b      	str	r3, [r7, #32]
}
 800a59e:	bf00      	nop
 800a5a0:	bf00      	nop
 800a5a2:	e7fd      	b.n	800a5a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5a4:	f001 ff98 	bl	800c4d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a5a8:	f3ef 8211 	mrs	r2, BASEPRI
 800a5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	61fa      	str	r2, [r7, #28]
 800a5be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a5c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d302      	bcc.n	800a5d6 <xQueueGenericSendFromISR+0xc2>
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d12f      	bne.n	800a636 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a5dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5e6:	683a      	ldr	r2, [r7, #0]
 800a5e8:	68b9      	ldr	r1, [r7, #8]
 800a5ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a5ec:	f000 f936 	bl	800a85c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f8:	d112      	bne.n	800a620 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d016      	beq.n	800a630 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a604:	3324      	adds	r3, #36	@ 0x24
 800a606:	4618      	mov	r0, r3
 800a608:	f000 ff52 	bl	800b4b0 <xTaskRemoveFromEventList>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00e      	beq.n	800a630 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00b      	beq.n	800a630 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	601a      	str	r2, [r3, #0]
 800a61e:	e007      	b.n	800a630 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a620:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a624:	3301      	adds	r3, #1
 800a626:	b2db      	uxtb	r3, r3
 800a628:	b25a      	sxtb	r2, r3
 800a62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a62c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a630:	2301      	movs	r3, #1
 800a632:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a634:	e001      	b.n	800a63a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a636:	2300      	movs	r3, #0
 800a638:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a63a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a63c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a644:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3740      	adds	r7, #64	@ 0x40
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b08c      	sub	sp, #48	@ 0x30
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a65c:	2300      	movs	r3, #0
 800a65e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10b      	bne.n	800a682 <xQueueReceive+0x32>
	__asm volatile
 800a66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a66e:	f383 8811 	msr	BASEPRI, r3
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	f3bf 8f4f 	dsb	sy
 800a67a:	623b      	str	r3, [r7, #32]
}
 800a67c:	bf00      	nop
 800a67e:	bf00      	nop
 800a680:	e7fd      	b.n	800a67e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d103      	bne.n	800a690 <xQueueReceive+0x40>
 800a688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a68a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d101      	bne.n	800a694 <xQueueReceive+0x44>
 800a690:	2301      	movs	r3, #1
 800a692:	e000      	b.n	800a696 <xQueueReceive+0x46>
 800a694:	2300      	movs	r3, #0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10b      	bne.n	800a6b2 <xQueueReceive+0x62>
	__asm volatile
 800a69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	61fb      	str	r3, [r7, #28]
}
 800a6ac:	bf00      	nop
 800a6ae:	bf00      	nop
 800a6b0:	e7fd      	b.n	800a6ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6b2:	f001 f8c3 	bl	800b83c <xTaskGetSchedulerState>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d102      	bne.n	800a6c2 <xQueueReceive+0x72>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <xQueueReceive+0x76>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e000      	b.n	800a6c8 <xQueueReceive+0x78>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10b      	bne.n	800a6e4 <xQueueReceive+0x94>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	61bb      	str	r3, [r7, #24]
}
 800a6de:	bf00      	nop
 800a6e0:	bf00      	nop
 800a6e2:	e7fd      	b.n	800a6e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6e4:	f001 fe18 	bl	800c318 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d01f      	beq.n	800a734 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6f4:	68b9      	ldr	r1, [r7, #8]
 800a6f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6f8:	f000 f91a 	bl	800a930 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fe:	1e5a      	subs	r2, r3, #1
 800a700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a702:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00f      	beq.n	800a72c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70e:	3310      	adds	r3, #16
 800a710:	4618      	mov	r0, r3
 800a712:	f000 fecd 	bl	800b4b0 <xTaskRemoveFromEventList>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d007      	beq.n	800a72c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a71c:	4b3c      	ldr	r3, [pc, #240]	@ (800a810 <xQueueReceive+0x1c0>)
 800a71e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a722:	601a      	str	r2, [r3, #0]
 800a724:	f3bf 8f4f 	dsb	sy
 800a728:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a72c:	f001 fe26 	bl	800c37c <vPortExitCritical>
				return pdPASS;
 800a730:	2301      	movs	r3, #1
 800a732:	e069      	b.n	800a808 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d103      	bne.n	800a742 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a73a:	f001 fe1f 	bl	800c37c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a73e:	2300      	movs	r3, #0
 800a740:	e062      	b.n	800a808 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a744:	2b00      	cmp	r3, #0
 800a746:	d106      	bne.n	800a756 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a748:	f107 0310 	add.w	r3, r7, #16
 800a74c:	4618      	mov	r0, r3
 800a74e:	f000 ff13 	bl	800b578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a752:	2301      	movs	r3, #1
 800a754:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a756:	f001 fe11 	bl	800c37c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a75a:	f000 fc7b 	bl	800b054 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a75e:	f001 fddb 	bl	800c318 <vPortEnterCritical>
 800a762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a764:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a768:	b25b      	sxtb	r3, r3
 800a76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76e:	d103      	bne.n	800a778 <xQueueReceive+0x128>
 800a770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a772:	2200      	movs	r2, #0
 800a774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a77e:	b25b      	sxtb	r3, r3
 800a780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a784:	d103      	bne.n	800a78e <xQueueReceive+0x13e>
 800a786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a78e:	f001 fdf5 	bl	800c37c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a792:	1d3a      	adds	r2, r7, #4
 800a794:	f107 0310 	add.w	r3, r7, #16
 800a798:	4611      	mov	r1, r2
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 ff02 	bl	800b5a4 <xTaskCheckForTimeOut>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d123      	bne.n	800a7ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7a8:	f000 f93a 	bl	800aa20 <prvIsQueueEmpty>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d017      	beq.n	800a7e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b4:	3324      	adds	r3, #36	@ 0x24
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	4611      	mov	r1, r2
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 fe26 	bl	800b40c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7c2:	f000 f8db 	bl	800a97c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7c6:	f000 fc53 	bl	800b070 <xTaskResumeAll>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d189      	bne.n	800a6e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a7d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a810 <xQueueReceive+0x1c0>)
 800a7d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7d6:	601a      	str	r2, [r3, #0]
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	f3bf 8f6f 	isb	sy
 800a7e0:	e780      	b.n	800a6e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a7e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7e4:	f000 f8ca 	bl	800a97c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7e8:	f000 fc42 	bl	800b070 <xTaskResumeAll>
 800a7ec:	e77a      	b.n	800a6e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a7ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7f0:	f000 f8c4 	bl	800a97c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7f4:	f000 fc3c 	bl	800b070 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7fa:	f000 f911 	bl	800aa20 <prvIsQueueEmpty>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	f43f af6f 	beq.w	800a6e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a806:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3730      	adds	r7, #48	@ 0x30
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	e000ed04 	.word	0xe000ed04

0800a814 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10b      	bne.n	800a83e <vQueueDelete+0x2a>
	__asm volatile
 800a826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82a:	f383 8811 	msr	BASEPRI, r3
 800a82e:	f3bf 8f6f 	isb	sy
 800a832:	f3bf 8f4f 	dsb	sy
 800a836:	60bb      	str	r3, [r7, #8]
}
 800a838:	bf00      	nop
 800a83a:	bf00      	nop
 800a83c:	e7fd      	b.n	800a83a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f000 f946 	bl	800aad0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d102      	bne.n	800a854 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f001 ff52 	bl	800c6f8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a854:	bf00      	nop
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b086      	sub	sp, #24
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a868:	2300      	movs	r3, #0
 800a86a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a870:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10d      	bne.n	800a896 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d14d      	bne.n	800a91e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	4618      	mov	r0, r3
 800a888:	f000 fff6 	bl	800b878 <xTaskPriorityDisinherit>
 800a88c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2200      	movs	r2, #0
 800a892:	609a      	str	r2, [r3, #8]
 800a894:	e043      	b.n	800a91e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d119      	bne.n	800a8d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6858      	ldr	r0, [r3, #4]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	68b9      	ldr	r1, [r7, #8]
 800a8a8:	f002 f8e2 	bl	800ca70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	685a      	ldr	r2, [r3, #4]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8b4:	441a      	add	r2, r3
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d32b      	bcc.n	800a91e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	605a      	str	r2, [r3, #4]
 800a8ce:	e026      	b.n	800a91e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	68d8      	ldr	r0, [r3, #12]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8d8:	461a      	mov	r2, r3
 800a8da:	68b9      	ldr	r1, [r7, #8]
 800a8dc:	f002 f8c8 	bl	800ca70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	68da      	ldr	r2, [r3, #12]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8e8:	425b      	negs	r3, r3
 800a8ea:	441a      	add	r2, r3
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	68da      	ldr	r2, [r3, #12]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d207      	bcs.n	800a90c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	689a      	ldr	r2, [r3, #8]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a904:	425b      	negs	r3, r3
 800a906:	441a      	add	r2, r3
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d105      	bne.n	800a91e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d002      	beq.n	800a91e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	3b01      	subs	r3, #1
 800a91c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	1c5a      	adds	r2, r3, #1
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a926:	697b      	ldr	r3, [r7, #20]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3718      	adds	r7, #24
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d018      	beq.n	800a974 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	68da      	ldr	r2, [r3, #12]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a94a:	441a      	add	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	68da      	ldr	r2, [r3, #12]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d303      	bcc.n	800a964 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	68d9      	ldr	r1, [r3, #12]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a96c:	461a      	mov	r2, r3
 800a96e:	6838      	ldr	r0, [r7, #0]
 800a970:	f002 f87e 	bl	800ca70 <memcpy>
	}
}
 800a974:	bf00      	nop
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a984:	f001 fcc8 	bl	800c318 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a98e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a990:	e011      	b.n	800a9b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a996:	2b00      	cmp	r3, #0
 800a998:	d012      	beq.n	800a9c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	3324      	adds	r3, #36	@ 0x24
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 fd86 	bl	800b4b0 <xTaskRemoveFromEventList>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a9aa:	f000 fe5f 	bl	800b66c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	dce9      	bgt.n	800a992 <prvUnlockQueue+0x16>
 800a9be:	e000      	b.n	800a9c2 <prvUnlockQueue+0x46>
					break;
 800a9c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	22ff      	movs	r2, #255	@ 0xff
 800a9c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a9ca:	f001 fcd7 	bl	800c37c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a9ce:	f001 fca3 	bl	800c318 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9da:	e011      	b.n	800aa00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d012      	beq.n	800aa0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	3310      	adds	r3, #16
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 fd61 	bl	800b4b0 <xTaskRemoveFromEventList>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a9f4:	f000 fe3a 	bl	800b66c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a9f8:	7bbb      	ldrb	r3, [r7, #14]
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	dce9      	bgt.n	800a9dc <prvUnlockQueue+0x60>
 800aa08:	e000      	b.n	800aa0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	22ff      	movs	r2, #255	@ 0xff
 800aa10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aa14:	f001 fcb2 	bl	800c37c <vPortExitCritical>
}
 800aa18:	bf00      	nop
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa28:	f001 fc76 	bl	800c318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d102      	bne.n	800aa3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa34:	2301      	movs	r3, #1
 800aa36:	60fb      	str	r3, [r7, #12]
 800aa38:	e001      	b.n	800aa3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa3e:	f001 fc9d 	bl	800c37c <vPortExitCritical>

	return xReturn;
 800aa42:	68fb      	ldr	r3, [r7, #12]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa54:	f001 fc60 	bl	800c318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d102      	bne.n	800aa6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa64:	2301      	movs	r3, #1
 800aa66:	60fb      	str	r3, [r7, #12]
 800aa68:	e001      	b.n	800aa6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa6e:	f001 fc85 	bl	800c37c <vPortExitCritical>

	return xReturn;
 800aa72:	68fb      	ldr	r3, [r7, #12]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa86:	2300      	movs	r3, #0
 800aa88:	60fb      	str	r3, [r7, #12]
 800aa8a:	e014      	b.n	800aab6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa8c:	4a0f      	ldr	r2, [pc, #60]	@ (800aacc <vQueueAddToRegistry+0x50>)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10b      	bne.n	800aab0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa98:	490c      	ldr	r1, [pc, #48]	@ (800aacc <vQueueAddToRegistry+0x50>)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aaa2:	4a0a      	ldr	r2, [pc, #40]	@ (800aacc <vQueueAddToRegistry+0x50>)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	00db      	lsls	r3, r3, #3
 800aaa8:	4413      	add	r3, r2
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aaae:	e006      	b.n	800aabe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	3301      	adds	r3, #1
 800aab4:	60fb      	str	r3, [r7, #12]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2b07      	cmp	r3, #7
 800aaba:	d9e7      	bls.n	800aa8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aabc:	bf00      	nop
 800aabe:	bf00      	nop
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	20000ad4 	.word	0x20000ad4

0800aad0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aad8:	2300      	movs	r3, #0
 800aada:	60fb      	str	r3, [r7, #12]
 800aadc:	e016      	b.n	800ab0c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800aade:	4a10      	ldr	r2, [pc, #64]	@ (800ab20 <vQueueUnregisterQueue+0x50>)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	00db      	lsls	r3, r3, #3
 800aae4:	4413      	add	r3, r2
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d10b      	bne.n	800ab06 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aaee:	4a0c      	ldr	r2, [pc, #48]	@ (800ab20 <vQueueUnregisterQueue+0x50>)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aaf8:	4a09      	ldr	r2, [pc, #36]	@ (800ab20 <vQueueUnregisterQueue+0x50>)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	00db      	lsls	r3, r3, #3
 800aafe:	4413      	add	r3, r2
 800ab00:	2200      	movs	r2, #0
 800ab02:	605a      	str	r2, [r3, #4]
				break;
 800ab04:	e006      	b.n	800ab14 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	60fb      	str	r3, [r7, #12]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b07      	cmp	r3, #7
 800ab10:	d9e5      	bls.n	800aade <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ab12:	bf00      	nop
 800ab14:	bf00      	nop
 800ab16:	3714      	adds	r7, #20
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr
 800ab20:	20000ad4 	.word	0x20000ad4

0800ab24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b086      	sub	sp, #24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ab34:	f001 fbf0 	bl	800c318 <vPortEnterCritical>
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab3e:	b25b      	sxtb	r3, r3
 800ab40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab44:	d103      	bne.n	800ab4e <vQueueWaitForMessageRestricted+0x2a>
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab54:	b25b      	sxtb	r3, r3
 800ab56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab5a:	d103      	bne.n	800ab64 <vQueueWaitForMessageRestricted+0x40>
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab64:	f001 fc0a 	bl	800c37c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d106      	bne.n	800ab7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	3324      	adds	r3, #36	@ 0x24
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	68b9      	ldr	r1, [r7, #8]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f000 fc6d 	bl	800b458 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ab7e:	6978      	ldr	r0, [r7, #20]
 800ab80:	f7ff fefc 	bl	800a97c <prvUnlockQueue>
	}
 800ab84:	bf00      	nop
 800ab86:	3718      	adds	r7, #24
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b08e      	sub	sp, #56	@ 0x38
 800ab90:	af04      	add	r7, sp, #16
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
 800ab98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d10b      	bne.n	800abb8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800aba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba4:	f383 8811 	msr	BASEPRI, r3
 800aba8:	f3bf 8f6f 	isb	sy
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	623b      	str	r3, [r7, #32]
}
 800abb2:	bf00      	nop
 800abb4:	bf00      	nop
 800abb6:	e7fd      	b.n	800abb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800abb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d10b      	bne.n	800abd6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	61fb      	str	r3, [r7, #28]
}
 800abd0:	bf00      	nop
 800abd2:	bf00      	nop
 800abd4:	e7fd      	b.n	800abd2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800abd6:	23a8      	movs	r3, #168	@ 0xa8
 800abd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	2ba8      	cmp	r3, #168	@ 0xa8
 800abde:	d00b      	beq.n	800abf8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800abe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	61bb      	str	r3, [r7, #24]
}
 800abf2:	bf00      	nop
 800abf4:	bf00      	nop
 800abf6:	e7fd      	b.n	800abf4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800abf8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800abfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d01e      	beq.n	800ac3e <xTaskCreateStatic+0xb2>
 800ac00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d01b      	beq.n	800ac3e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac12:	2202      	movs	r2, #2
 800ac14:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac18:	2300      	movs	r3, #0
 800ac1a:	9303      	str	r3, [sp, #12]
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac1e:	9302      	str	r3, [sp, #8]
 800ac20:	f107 0314 	add.w	r3, r7, #20
 800ac24:	9301      	str	r3, [sp, #4]
 800ac26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac28:	9300      	str	r3, [sp, #0]
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	68b9      	ldr	r1, [r7, #8]
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f000 f851 	bl	800acd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ac38:	f000 f8f6 	bl	800ae28 <prvAddNewTaskToReadyList>
 800ac3c:	e001      	b.n	800ac42 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac42:	697b      	ldr	r3, [r7, #20]
	}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3728      	adds	r7, #40	@ 0x28
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b08c      	sub	sp, #48	@ 0x30
 800ac50:	af04      	add	r7, sp, #16
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	603b      	str	r3, [r7, #0]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac5c:	88fb      	ldrh	r3, [r7, #6]
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4618      	mov	r0, r3
 800ac62:	f001 fc7b 	bl	800c55c <pvPortMalloc>
 800ac66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00e      	beq.n	800ac8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac6e:	20a8      	movs	r0, #168	@ 0xa8
 800ac70:	f001 fc74 	bl	800c55c <pvPortMalloc>
 800ac74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d003      	beq.n	800ac84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	697a      	ldr	r2, [r7, #20]
 800ac80:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac82:	e005      	b.n	800ac90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac84:	6978      	ldr	r0, [r7, #20]
 800ac86:	f001 fd37 	bl	800c6f8 <vPortFree>
 800ac8a:	e001      	b.n	800ac90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d017      	beq.n	800acc6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac9e:	88fa      	ldrh	r2, [r7, #6]
 800aca0:	2300      	movs	r3, #0
 800aca2:	9303      	str	r3, [sp, #12]
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	9302      	str	r3, [sp, #8]
 800aca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acaa:	9301      	str	r3, [sp, #4]
 800acac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acae:	9300      	str	r3, [sp, #0]
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	68b9      	ldr	r1, [r7, #8]
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f000 f80f 	bl	800acd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acba:	69f8      	ldr	r0, [r7, #28]
 800acbc:	f000 f8b4 	bl	800ae28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800acc0:	2301      	movs	r3, #1
 800acc2:	61bb      	str	r3, [r7, #24]
 800acc4:	e002      	b.n	800accc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800acc6:	f04f 33ff 	mov.w	r3, #4294967295
 800acca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800accc:	69bb      	ldr	r3, [r7, #24]
	}
 800acce:	4618      	mov	r0, r3
 800acd0:	3720      	adds	r7, #32
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
	...

0800acd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b088      	sub	sp, #32
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	607a      	str	r2, [r7, #4]
 800ace4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ace6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	461a      	mov	r2, r3
 800acf0:	21a5      	movs	r1, #165	@ 0xa5
 800acf2:	f001 fe39 	bl	800c968 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800acf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad00:	3b01      	subs	r3, #1
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	4413      	add	r3, r2
 800ad06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	f023 0307 	bic.w	r3, r3, #7
 800ad0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	f003 0307 	and.w	r3, r3, #7
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d00b      	beq.n	800ad32 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ad1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad1e:	f383 8811 	msr	BASEPRI, r3
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	f3bf 8f4f 	dsb	sy
 800ad2a:	617b      	str	r3, [r7, #20]
}
 800ad2c:	bf00      	nop
 800ad2e:	bf00      	nop
 800ad30:	e7fd      	b.n	800ad2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d01f      	beq.n	800ad78 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad38:	2300      	movs	r3, #0
 800ad3a:	61fb      	str	r3, [r7, #28]
 800ad3c:	e012      	b.n	800ad64 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad3e:	68ba      	ldr	r2, [r7, #8]
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	4413      	add	r3, r2
 800ad44:	7819      	ldrb	r1, [r3, #0]
 800ad46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	3334      	adds	r3, #52	@ 0x34
 800ad4e:	460a      	mov	r2, r1
 800ad50:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad52:	68ba      	ldr	r2, [r7, #8]
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	4413      	add	r3, r2
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d006      	beq.n	800ad6c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	3301      	adds	r3, #1
 800ad62:	61fb      	str	r3, [r7, #28]
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	2b0f      	cmp	r3, #15
 800ad68:	d9e9      	bls.n	800ad3e <prvInitialiseNewTask+0x66>
 800ad6a:	e000      	b.n	800ad6e <prvInitialiseNewTask+0x96>
			{
				break;
 800ad6c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad70:	2200      	movs	r2, #0
 800ad72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ad76:	e003      	b.n	800ad80 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad82:	2b37      	cmp	r3, #55	@ 0x37
 800ad84:	d901      	bls.n	800ad8a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad86:	2337      	movs	r3, #55	@ 0x37
 800ad88:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad8e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad94:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ad96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad98:	2200      	movs	r2, #0
 800ad9a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad9e:	3304      	adds	r3, #4
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7ff f86d 	bl	8009e80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ada6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada8:	3318      	adds	r3, #24
 800adaa:	4618      	mov	r0, r3
 800adac:	f7ff f868 	bl	8009e80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800adb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adb4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800adbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adbe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800adc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adc4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800adc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc8:	2200      	movs	r2, #0
 800adca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800adce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add0:	2200      	movs	r2, #0
 800add2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800add6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add8:	3354      	adds	r3, #84	@ 0x54
 800adda:	224c      	movs	r2, #76	@ 0x4c
 800addc:	2100      	movs	r1, #0
 800adde:	4618      	mov	r0, r3
 800ade0:	f001 fdc2 	bl	800c968 <memset>
 800ade4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade6:	4a0d      	ldr	r2, [pc, #52]	@ (800ae1c <prvInitialiseNewTask+0x144>)
 800ade8:	659a      	str	r2, [r3, #88]	@ 0x58
 800adea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adec:	4a0c      	ldr	r2, [pc, #48]	@ (800ae20 <prvInitialiseNewTask+0x148>)
 800adee:	65da      	str	r2, [r3, #92]	@ 0x5c
 800adf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf2:	4a0c      	ldr	r2, [pc, #48]	@ (800ae24 <prvInitialiseNewTask+0x14c>)
 800adf4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	68f9      	ldr	r1, [r7, #12]
 800adfa:	69b8      	ldr	r0, [r7, #24]
 800adfc:	f001 f95a 	bl	800c0b4 <pxPortInitialiseStack>
 800ae00:	4602      	mov	r2, r0
 800ae02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d002      	beq.n	800ae12 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae12:	bf00      	nop
 800ae14:	3720      	adds	r7, #32
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	200028dc 	.word	0x200028dc
 800ae20:	20002944 	.word	0x20002944
 800ae24:	200029ac 	.word	0x200029ac

0800ae28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae30:	f001 fa72 	bl	800c318 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae34:	4b2d      	ldr	r3, [pc, #180]	@ (800aeec <prvAddNewTaskToReadyList+0xc4>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	4a2c      	ldr	r2, [pc, #176]	@ (800aeec <prvAddNewTaskToReadyList+0xc4>)
 800ae3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae3e:	4b2c      	ldr	r3, [pc, #176]	@ (800aef0 <prvAddNewTaskToReadyList+0xc8>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d109      	bne.n	800ae5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae46:	4a2a      	ldr	r2, [pc, #168]	@ (800aef0 <prvAddNewTaskToReadyList+0xc8>)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae4c:	4b27      	ldr	r3, [pc, #156]	@ (800aeec <prvAddNewTaskToReadyList+0xc4>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d110      	bne.n	800ae76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae54:	f000 fc2e 	bl	800b6b4 <prvInitialiseTaskLists>
 800ae58:	e00d      	b.n	800ae76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae5a:	4b26      	ldr	r3, [pc, #152]	@ (800aef4 <prvAddNewTaskToReadyList+0xcc>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d109      	bne.n	800ae76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae62:	4b23      	ldr	r3, [pc, #140]	@ (800aef0 <prvAddNewTaskToReadyList+0xc8>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d802      	bhi.n	800ae76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae70:	4a1f      	ldr	r2, [pc, #124]	@ (800aef0 <prvAddNewTaskToReadyList+0xc8>)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae76:	4b20      	ldr	r3, [pc, #128]	@ (800aef8 <prvAddNewTaskToReadyList+0xd0>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	4a1e      	ldr	r2, [pc, #120]	@ (800aef8 <prvAddNewTaskToReadyList+0xd0>)
 800ae7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ae80:	4b1d      	ldr	r3, [pc, #116]	@ (800aef8 <prvAddNewTaskToReadyList+0xd0>)
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae8c:	4b1b      	ldr	r3, [pc, #108]	@ (800aefc <prvAddNewTaskToReadyList+0xd4>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d903      	bls.n	800ae9c <prvAddNewTaskToReadyList+0x74>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae98:	4a18      	ldr	r2, [pc, #96]	@ (800aefc <prvAddNewTaskToReadyList+0xd4>)
 800ae9a:	6013      	str	r3, [r2, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aea0:	4613      	mov	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4413      	add	r3, r2
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	4a15      	ldr	r2, [pc, #84]	@ (800af00 <prvAddNewTaskToReadyList+0xd8>)
 800aeaa:	441a      	add	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	3304      	adds	r3, #4
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	4610      	mov	r0, r2
 800aeb4:	f7fe fff1 	bl	8009e9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aeb8:	f001 fa60 	bl	800c37c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aebc:	4b0d      	ldr	r3, [pc, #52]	@ (800aef4 <prvAddNewTaskToReadyList+0xcc>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00e      	beq.n	800aee2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aec4:	4b0a      	ldr	r3, [pc, #40]	@ (800aef0 <prvAddNewTaskToReadyList+0xc8>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aece:	429a      	cmp	r2, r3
 800aed0:	d207      	bcs.n	800aee2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aed2:	4b0c      	ldr	r3, [pc, #48]	@ (800af04 <prvAddNewTaskToReadyList+0xdc>)
 800aed4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	f3bf 8f4f 	dsb	sy
 800aede:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aee2:	bf00      	nop
 800aee4:	3708      	adds	r7, #8
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	20000fe8 	.word	0x20000fe8
 800aef0:	20000b14 	.word	0x20000b14
 800aef4:	20000ff4 	.word	0x20000ff4
 800aef8:	20001004 	.word	0x20001004
 800aefc:	20000ff0 	.word	0x20000ff0
 800af00:	20000b18 	.word	0x20000b18
 800af04:	e000ed04 	.word	0xe000ed04

0800af08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af10:	2300      	movs	r3, #0
 800af12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d018      	beq.n	800af4c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af1a:	4b14      	ldr	r3, [pc, #80]	@ (800af6c <vTaskDelay+0x64>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00b      	beq.n	800af3a <vTaskDelay+0x32>
	__asm volatile
 800af22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af26:	f383 8811 	msr	BASEPRI, r3
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	60bb      	str	r3, [r7, #8]
}
 800af34:	bf00      	nop
 800af36:	bf00      	nop
 800af38:	e7fd      	b.n	800af36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800af3a:	f000 f88b 	bl	800b054 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af3e:	2100      	movs	r1, #0
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 fd09 	bl	800b958 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af46:	f000 f893 	bl	800b070 <xTaskResumeAll>
 800af4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d107      	bne.n	800af62 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800af52:	4b07      	ldr	r3, [pc, #28]	@ (800af70 <vTaskDelay+0x68>)
 800af54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af58:	601a      	str	r2, [r3, #0]
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af62:	bf00      	nop
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	20001010 	.word	0x20001010
 800af70:	e000ed04 	.word	0xe000ed04

0800af74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b08a      	sub	sp, #40	@ 0x28
 800af78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af7a:	2300      	movs	r3, #0
 800af7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af7e:	2300      	movs	r3, #0
 800af80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af82:	463a      	mov	r2, r7
 800af84:	1d39      	adds	r1, r7, #4
 800af86:	f107 0308 	add.w	r3, r7, #8
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7fe ff24 	bl	8009dd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af90:	6839      	ldr	r1, [r7, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	9202      	str	r2, [sp, #8]
 800af98:	9301      	str	r3, [sp, #4]
 800af9a:	2300      	movs	r3, #0
 800af9c:	9300      	str	r3, [sp, #0]
 800af9e:	2300      	movs	r3, #0
 800afa0:	460a      	mov	r2, r1
 800afa2:	4924      	ldr	r1, [pc, #144]	@ (800b034 <vTaskStartScheduler+0xc0>)
 800afa4:	4824      	ldr	r0, [pc, #144]	@ (800b038 <vTaskStartScheduler+0xc4>)
 800afa6:	f7ff fdf1 	bl	800ab8c <xTaskCreateStatic>
 800afaa:	4603      	mov	r3, r0
 800afac:	4a23      	ldr	r2, [pc, #140]	@ (800b03c <vTaskStartScheduler+0xc8>)
 800afae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800afb0:	4b22      	ldr	r3, [pc, #136]	@ (800b03c <vTaskStartScheduler+0xc8>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d002      	beq.n	800afbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800afb8:	2301      	movs	r3, #1
 800afba:	617b      	str	r3, [r7, #20]
 800afbc:	e001      	b.n	800afc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800afbe:	2300      	movs	r3, #0
 800afc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d102      	bne.n	800afce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800afc8:	f000 fd1a 	bl	800ba00 <xTimerCreateTimerTask>
 800afcc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d11b      	bne.n	800b00c <vTaskStartScheduler+0x98>
	__asm volatile
 800afd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	613b      	str	r3, [r7, #16]
}
 800afe6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800afe8:	4b15      	ldr	r3, [pc, #84]	@ (800b040 <vTaskStartScheduler+0xcc>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	3354      	adds	r3, #84	@ 0x54
 800afee:	4a15      	ldr	r2, [pc, #84]	@ (800b044 <vTaskStartScheduler+0xd0>)
 800aff0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aff2:	4b15      	ldr	r3, [pc, #84]	@ (800b048 <vTaskStartScheduler+0xd4>)
 800aff4:	f04f 32ff 	mov.w	r2, #4294967295
 800aff8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800affa:	4b14      	ldr	r3, [pc, #80]	@ (800b04c <vTaskStartScheduler+0xd8>)
 800affc:	2201      	movs	r2, #1
 800affe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b000:	4b13      	ldr	r3, [pc, #76]	@ (800b050 <vTaskStartScheduler+0xdc>)
 800b002:	2200      	movs	r2, #0
 800b004:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b006:	f001 f8e3 	bl	800c1d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b00a:	e00f      	b.n	800b02c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b012:	d10b      	bne.n	800b02c <vTaskStartScheduler+0xb8>
	__asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	60fb      	str	r3, [r7, #12]
}
 800b026:	bf00      	nop
 800b028:	bf00      	nop
 800b02a:	e7fd      	b.n	800b028 <vTaskStartScheduler+0xb4>
}
 800b02c:	bf00      	nop
 800b02e:	3718      	adds	r7, #24
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	0800cbcc 	.word	0x0800cbcc
 800b038:	0800b685 	.word	0x0800b685
 800b03c:	2000100c 	.word	0x2000100c
 800b040:	20000b14 	.word	0x20000b14
 800b044:	20000010 	.word	0x20000010
 800b048:	20001008 	.word	0x20001008
 800b04c:	20000ff4 	.word	0x20000ff4
 800b050:	20000fec 	.word	0x20000fec

0800b054 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b054:	b480      	push	{r7}
 800b056:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b058:	4b04      	ldr	r3, [pc, #16]	@ (800b06c <vTaskSuspendAll+0x18>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	3301      	adds	r3, #1
 800b05e:	4a03      	ldr	r2, [pc, #12]	@ (800b06c <vTaskSuspendAll+0x18>)
 800b060:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b062:	bf00      	nop
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr
 800b06c:	20001010 	.word	0x20001010

0800b070 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b076:	2300      	movs	r3, #0
 800b078:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b07a:	2300      	movs	r3, #0
 800b07c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b07e:	4b42      	ldr	r3, [pc, #264]	@ (800b188 <xTaskResumeAll+0x118>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d10b      	bne.n	800b09e <xTaskResumeAll+0x2e>
	__asm volatile
 800b086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b08a:	f383 8811 	msr	BASEPRI, r3
 800b08e:	f3bf 8f6f 	isb	sy
 800b092:	f3bf 8f4f 	dsb	sy
 800b096:	603b      	str	r3, [r7, #0]
}
 800b098:	bf00      	nop
 800b09a:	bf00      	nop
 800b09c:	e7fd      	b.n	800b09a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b09e:	f001 f93b 	bl	800c318 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b0a2:	4b39      	ldr	r3, [pc, #228]	@ (800b188 <xTaskResumeAll+0x118>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	4a37      	ldr	r2, [pc, #220]	@ (800b188 <xTaskResumeAll+0x118>)
 800b0aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0ac:	4b36      	ldr	r3, [pc, #216]	@ (800b188 <xTaskResumeAll+0x118>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d162      	bne.n	800b17a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b0b4:	4b35      	ldr	r3, [pc, #212]	@ (800b18c <xTaskResumeAll+0x11c>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d05e      	beq.n	800b17a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0bc:	e02f      	b.n	800b11e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0be:	4b34      	ldr	r3, [pc, #208]	@ (800b190 <xTaskResumeAll+0x120>)
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	3318      	adds	r3, #24
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7fe ff42 	bl	8009f54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7fe ff3d 	bl	8009f54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0de:	4b2d      	ldr	r3, [pc, #180]	@ (800b194 <xTaskResumeAll+0x124>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d903      	bls.n	800b0ee <xTaskResumeAll+0x7e>
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ea:	4a2a      	ldr	r2, [pc, #168]	@ (800b194 <xTaskResumeAll+0x124>)
 800b0ec:	6013      	str	r3, [r2, #0]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	4413      	add	r3, r2
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	4a27      	ldr	r2, [pc, #156]	@ (800b198 <xTaskResumeAll+0x128>)
 800b0fc:	441a      	add	r2, r3
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	3304      	adds	r3, #4
 800b102:	4619      	mov	r1, r3
 800b104:	4610      	mov	r0, r2
 800b106:	f7fe fec8 	bl	8009e9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b10e:	4b23      	ldr	r3, [pc, #140]	@ (800b19c <xTaskResumeAll+0x12c>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b114:	429a      	cmp	r2, r3
 800b116:	d302      	bcc.n	800b11e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b118:	4b21      	ldr	r3, [pc, #132]	@ (800b1a0 <xTaskResumeAll+0x130>)
 800b11a:	2201      	movs	r2, #1
 800b11c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b11e:	4b1c      	ldr	r3, [pc, #112]	@ (800b190 <xTaskResumeAll+0x120>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d1cb      	bne.n	800b0be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d001      	beq.n	800b130 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b12c:	f000 fb66 	bl	800b7fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b130:	4b1c      	ldr	r3, [pc, #112]	@ (800b1a4 <xTaskResumeAll+0x134>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d010      	beq.n	800b15e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b13c:	f000 f846 	bl	800b1cc <xTaskIncrementTick>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d002      	beq.n	800b14c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b146:	4b16      	ldr	r3, [pc, #88]	@ (800b1a0 <xTaskResumeAll+0x130>)
 800b148:	2201      	movs	r2, #1
 800b14a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	3b01      	subs	r3, #1
 800b150:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d1f1      	bne.n	800b13c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b158:	4b12      	ldr	r3, [pc, #72]	@ (800b1a4 <xTaskResumeAll+0x134>)
 800b15a:	2200      	movs	r2, #0
 800b15c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b15e:	4b10      	ldr	r3, [pc, #64]	@ (800b1a0 <xTaskResumeAll+0x130>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d009      	beq.n	800b17a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b166:	2301      	movs	r3, #1
 800b168:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b16a:	4b0f      	ldr	r3, [pc, #60]	@ (800b1a8 <xTaskResumeAll+0x138>)
 800b16c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b170:	601a      	str	r2, [r3, #0]
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b17a:	f001 f8ff 	bl	800c37c <vPortExitCritical>

	return xAlreadyYielded;
 800b17e:	68bb      	ldr	r3, [r7, #8]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	20001010 	.word	0x20001010
 800b18c:	20000fe8 	.word	0x20000fe8
 800b190:	20000fa8 	.word	0x20000fa8
 800b194:	20000ff0 	.word	0x20000ff0
 800b198:	20000b18 	.word	0x20000b18
 800b19c:	20000b14 	.word	0x20000b14
 800b1a0:	20000ffc 	.word	0x20000ffc
 800b1a4:	20000ff8 	.word	0x20000ff8
 800b1a8:	e000ed04 	.word	0xe000ed04

0800b1ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b1b2:	4b05      	ldr	r3, [pc, #20]	@ (800b1c8 <xTaskGetTickCount+0x1c>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b1b8:	687b      	ldr	r3, [r7, #4]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	370c      	adds	r7, #12
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	20000fec 	.word	0x20000fec

0800b1cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b086      	sub	sp, #24
 800b1d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1d6:	4b4f      	ldr	r3, [pc, #316]	@ (800b314 <xTaskIncrementTick+0x148>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f040 8090 	bne.w	800b300 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b1e0:	4b4d      	ldr	r3, [pc, #308]	@ (800b318 <xTaskIncrementTick+0x14c>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b1e8:	4a4b      	ldr	r2, [pc, #300]	@ (800b318 <xTaskIncrementTick+0x14c>)
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d121      	bne.n	800b238 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b1f4:	4b49      	ldr	r3, [pc, #292]	@ (800b31c <xTaskIncrementTick+0x150>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d00b      	beq.n	800b216 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b202:	f383 8811 	msr	BASEPRI, r3
 800b206:	f3bf 8f6f 	isb	sy
 800b20a:	f3bf 8f4f 	dsb	sy
 800b20e:	603b      	str	r3, [r7, #0]
}
 800b210:	bf00      	nop
 800b212:	bf00      	nop
 800b214:	e7fd      	b.n	800b212 <xTaskIncrementTick+0x46>
 800b216:	4b41      	ldr	r3, [pc, #260]	@ (800b31c <xTaskIncrementTick+0x150>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	60fb      	str	r3, [r7, #12]
 800b21c:	4b40      	ldr	r3, [pc, #256]	@ (800b320 <xTaskIncrementTick+0x154>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a3e      	ldr	r2, [pc, #248]	@ (800b31c <xTaskIncrementTick+0x150>)
 800b222:	6013      	str	r3, [r2, #0]
 800b224:	4a3e      	ldr	r2, [pc, #248]	@ (800b320 <xTaskIncrementTick+0x154>)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6013      	str	r3, [r2, #0]
 800b22a:	4b3e      	ldr	r3, [pc, #248]	@ (800b324 <xTaskIncrementTick+0x158>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	3301      	adds	r3, #1
 800b230:	4a3c      	ldr	r2, [pc, #240]	@ (800b324 <xTaskIncrementTick+0x158>)
 800b232:	6013      	str	r3, [r2, #0]
 800b234:	f000 fae2 	bl	800b7fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b238:	4b3b      	ldr	r3, [pc, #236]	@ (800b328 <xTaskIncrementTick+0x15c>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d349      	bcc.n	800b2d6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b242:	4b36      	ldr	r3, [pc, #216]	@ (800b31c <xTaskIncrementTick+0x150>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d104      	bne.n	800b256 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b24c:	4b36      	ldr	r3, [pc, #216]	@ (800b328 <xTaskIncrementTick+0x15c>)
 800b24e:	f04f 32ff 	mov.w	r2, #4294967295
 800b252:	601a      	str	r2, [r3, #0]
					break;
 800b254:	e03f      	b.n	800b2d6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b256:	4b31      	ldr	r3, [pc, #196]	@ (800b31c <xTaskIncrementTick+0x150>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d203      	bcs.n	800b276 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b26e:	4a2e      	ldr	r2, [pc, #184]	@ (800b328 <xTaskIncrementTick+0x15c>)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b274:	e02f      	b.n	800b2d6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	3304      	adds	r3, #4
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7fe fe6a 	bl	8009f54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b284:	2b00      	cmp	r3, #0
 800b286:	d004      	beq.n	800b292 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	3318      	adds	r3, #24
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7fe fe61 	bl	8009f54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b296:	4b25      	ldr	r3, [pc, #148]	@ (800b32c <xTaskIncrementTick+0x160>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d903      	bls.n	800b2a6 <xTaskIncrementTick+0xda>
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a2:	4a22      	ldr	r2, [pc, #136]	@ (800b32c <xTaskIncrementTick+0x160>)
 800b2a4:	6013      	str	r3, [r2, #0]
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	4413      	add	r3, r2
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	4a1f      	ldr	r2, [pc, #124]	@ (800b330 <xTaskIncrementTick+0x164>)
 800b2b4:	441a      	add	r2, r3
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	4610      	mov	r0, r2
 800b2be:	f7fe fdec 	bl	8009e9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2c6:	4b1b      	ldr	r3, [pc, #108]	@ (800b334 <xTaskIncrementTick+0x168>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d3b8      	bcc.n	800b242 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2d4:	e7b5      	b.n	800b242 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2d6:	4b17      	ldr	r3, [pc, #92]	@ (800b334 <xTaskIncrementTick+0x168>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2dc:	4914      	ldr	r1, [pc, #80]	@ (800b330 <xTaskIncrementTick+0x164>)
 800b2de:	4613      	mov	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	440b      	add	r3, r1
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d901      	bls.n	800b2f2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b2f2:	4b11      	ldr	r3, [pc, #68]	@ (800b338 <xTaskIncrementTick+0x16c>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d007      	beq.n	800b30a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	617b      	str	r3, [r7, #20]
 800b2fe:	e004      	b.n	800b30a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b300:	4b0e      	ldr	r3, [pc, #56]	@ (800b33c <xTaskIncrementTick+0x170>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	3301      	adds	r3, #1
 800b306:	4a0d      	ldr	r2, [pc, #52]	@ (800b33c <xTaskIncrementTick+0x170>)
 800b308:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b30a:	697b      	ldr	r3, [r7, #20]
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3718      	adds	r7, #24
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}
 800b314:	20001010 	.word	0x20001010
 800b318:	20000fec 	.word	0x20000fec
 800b31c:	20000fa0 	.word	0x20000fa0
 800b320:	20000fa4 	.word	0x20000fa4
 800b324:	20001000 	.word	0x20001000
 800b328:	20001008 	.word	0x20001008
 800b32c:	20000ff0 	.word	0x20000ff0
 800b330:	20000b18 	.word	0x20000b18
 800b334:	20000b14 	.word	0x20000b14
 800b338:	20000ffc 	.word	0x20000ffc
 800b33c:	20000ff8 	.word	0x20000ff8

0800b340 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b346:	4b2b      	ldr	r3, [pc, #172]	@ (800b3f4 <vTaskSwitchContext+0xb4>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d003      	beq.n	800b356 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b34e:	4b2a      	ldr	r3, [pc, #168]	@ (800b3f8 <vTaskSwitchContext+0xb8>)
 800b350:	2201      	movs	r2, #1
 800b352:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b354:	e047      	b.n	800b3e6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b356:	4b28      	ldr	r3, [pc, #160]	@ (800b3f8 <vTaskSwitchContext+0xb8>)
 800b358:	2200      	movs	r2, #0
 800b35a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b35c:	4b27      	ldr	r3, [pc, #156]	@ (800b3fc <vTaskSwitchContext+0xbc>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	60fb      	str	r3, [r7, #12]
 800b362:	e011      	b.n	800b388 <vTaskSwitchContext+0x48>
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10b      	bne.n	800b382 <vTaskSwitchContext+0x42>
	__asm volatile
 800b36a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b36e:	f383 8811 	msr	BASEPRI, r3
 800b372:	f3bf 8f6f 	isb	sy
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	607b      	str	r3, [r7, #4]
}
 800b37c:	bf00      	nop
 800b37e:	bf00      	nop
 800b380:	e7fd      	b.n	800b37e <vTaskSwitchContext+0x3e>
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	3b01      	subs	r3, #1
 800b386:	60fb      	str	r3, [r7, #12]
 800b388:	491d      	ldr	r1, [pc, #116]	@ (800b400 <vTaskSwitchContext+0xc0>)
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	4613      	mov	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4413      	add	r3, r2
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	440b      	add	r3, r1
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d0e3      	beq.n	800b364 <vTaskSwitchContext+0x24>
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	4613      	mov	r3, r2
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	4413      	add	r3, r2
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4a16      	ldr	r2, [pc, #88]	@ (800b400 <vTaskSwitchContext+0xc0>)
 800b3a8:	4413      	add	r3, r2
 800b3aa:	60bb      	str	r3, [r7, #8]
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	685a      	ldr	r2, [r3, #4]
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	605a      	str	r2, [r3, #4]
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	685a      	ldr	r2, [r3, #4]
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	3308      	adds	r3, #8
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d104      	bne.n	800b3cc <vTaskSwitchContext+0x8c>
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	685a      	ldr	r2, [r3, #4]
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	605a      	str	r2, [r3, #4]
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	4a0c      	ldr	r2, [pc, #48]	@ (800b404 <vTaskSwitchContext+0xc4>)
 800b3d4:	6013      	str	r3, [r2, #0]
 800b3d6:	4a09      	ldr	r2, [pc, #36]	@ (800b3fc <vTaskSwitchContext+0xbc>)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b3dc:	4b09      	ldr	r3, [pc, #36]	@ (800b404 <vTaskSwitchContext+0xc4>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	3354      	adds	r3, #84	@ 0x54
 800b3e2:	4a09      	ldr	r2, [pc, #36]	@ (800b408 <vTaskSwitchContext+0xc8>)
 800b3e4:	6013      	str	r3, [r2, #0]
}
 800b3e6:	bf00      	nop
 800b3e8:	3714      	adds	r7, #20
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	20001010 	.word	0x20001010
 800b3f8:	20000ffc 	.word	0x20000ffc
 800b3fc:	20000ff0 	.word	0x20000ff0
 800b400:	20000b18 	.word	0x20000b18
 800b404:	20000b14 	.word	0x20000b14
 800b408:	20000010 	.word	0x20000010

0800b40c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d10b      	bne.n	800b434 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b41c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b420:	f383 8811 	msr	BASEPRI, r3
 800b424:	f3bf 8f6f 	isb	sy
 800b428:	f3bf 8f4f 	dsb	sy
 800b42c:	60fb      	str	r3, [r7, #12]
}
 800b42e:	bf00      	nop
 800b430:	bf00      	nop
 800b432:	e7fd      	b.n	800b430 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b434:	4b07      	ldr	r3, [pc, #28]	@ (800b454 <vTaskPlaceOnEventList+0x48>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	3318      	adds	r3, #24
 800b43a:	4619      	mov	r1, r3
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f7fe fd50 	bl	8009ee2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b442:	2101      	movs	r1, #1
 800b444:	6838      	ldr	r0, [r7, #0]
 800b446:	f000 fa87 	bl	800b958 <prvAddCurrentTaskToDelayedList>
}
 800b44a:	bf00      	nop
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	20000b14 	.word	0x20000b14

0800b458 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b086      	sub	sp, #24
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d10b      	bne.n	800b482 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b46e:	f383 8811 	msr	BASEPRI, r3
 800b472:	f3bf 8f6f 	isb	sy
 800b476:	f3bf 8f4f 	dsb	sy
 800b47a:	617b      	str	r3, [r7, #20]
}
 800b47c:	bf00      	nop
 800b47e:	bf00      	nop
 800b480:	e7fd      	b.n	800b47e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b482:	4b0a      	ldr	r3, [pc, #40]	@ (800b4ac <vTaskPlaceOnEventListRestricted+0x54>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	3318      	adds	r3, #24
 800b488:	4619      	mov	r1, r3
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f7fe fd05 	bl	8009e9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d002      	beq.n	800b49c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b496:	f04f 33ff 	mov.w	r3, #4294967295
 800b49a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b49c:	6879      	ldr	r1, [r7, #4]
 800b49e:	68b8      	ldr	r0, [r7, #8]
 800b4a0:	f000 fa5a 	bl	800b958 <prvAddCurrentTaskToDelayedList>
	}
 800b4a4:	bf00      	nop
 800b4a6:	3718      	adds	r7, #24
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	20000b14 	.word	0x20000b14

0800b4b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b086      	sub	sp, #24
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d10b      	bne.n	800b4de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ca:	f383 8811 	msr	BASEPRI, r3
 800b4ce:	f3bf 8f6f 	isb	sy
 800b4d2:	f3bf 8f4f 	dsb	sy
 800b4d6:	60fb      	str	r3, [r7, #12]
}
 800b4d8:	bf00      	nop
 800b4da:	bf00      	nop
 800b4dc:	e7fd      	b.n	800b4da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	3318      	adds	r3, #24
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fe fd36 	bl	8009f54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4e8:	4b1d      	ldr	r3, [pc, #116]	@ (800b560 <xTaskRemoveFromEventList+0xb0>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d11d      	bne.n	800b52c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	3304      	adds	r3, #4
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7fe fd2d 	bl	8009f54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4fe:	4b19      	ldr	r3, [pc, #100]	@ (800b564 <xTaskRemoveFromEventList+0xb4>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	429a      	cmp	r2, r3
 800b504:	d903      	bls.n	800b50e <xTaskRemoveFromEventList+0x5e>
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b50a:	4a16      	ldr	r2, [pc, #88]	@ (800b564 <xTaskRemoveFromEventList+0xb4>)
 800b50c:	6013      	str	r3, [r2, #0]
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b512:	4613      	mov	r3, r2
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	4413      	add	r3, r2
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	4a13      	ldr	r2, [pc, #76]	@ (800b568 <xTaskRemoveFromEventList+0xb8>)
 800b51c:	441a      	add	r2, r3
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	3304      	adds	r3, #4
 800b522:	4619      	mov	r1, r3
 800b524:	4610      	mov	r0, r2
 800b526:	f7fe fcb8 	bl	8009e9a <vListInsertEnd>
 800b52a:	e005      	b.n	800b538 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	3318      	adds	r3, #24
 800b530:	4619      	mov	r1, r3
 800b532:	480e      	ldr	r0, [pc, #56]	@ (800b56c <xTaskRemoveFromEventList+0xbc>)
 800b534:	f7fe fcb1 	bl	8009e9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b53c:	4b0c      	ldr	r3, [pc, #48]	@ (800b570 <xTaskRemoveFromEventList+0xc0>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b542:	429a      	cmp	r2, r3
 800b544:	d905      	bls.n	800b552 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b546:	2301      	movs	r3, #1
 800b548:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b54a:	4b0a      	ldr	r3, [pc, #40]	@ (800b574 <xTaskRemoveFromEventList+0xc4>)
 800b54c:	2201      	movs	r2, #1
 800b54e:	601a      	str	r2, [r3, #0]
 800b550:	e001      	b.n	800b556 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b552:	2300      	movs	r3, #0
 800b554:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b556:	697b      	ldr	r3, [r7, #20]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3718      	adds	r7, #24
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	20001010 	.word	0x20001010
 800b564:	20000ff0 	.word	0x20000ff0
 800b568:	20000b18 	.word	0x20000b18
 800b56c:	20000fa8 	.word	0x20000fa8
 800b570:	20000b14 	.word	0x20000b14
 800b574:	20000ffc 	.word	0x20000ffc

0800b578 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b580:	4b06      	ldr	r3, [pc, #24]	@ (800b59c <vTaskInternalSetTimeOutState+0x24>)
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b588:	4b05      	ldr	r3, [pc, #20]	@ (800b5a0 <vTaskInternalSetTimeOutState+0x28>)
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	605a      	str	r2, [r3, #4]
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr
 800b59c:	20001000 	.word	0x20001000
 800b5a0:	20000fec 	.word	0x20000fec

0800b5a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b088      	sub	sp, #32
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10b      	bne.n	800b5cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	613b      	str	r3, [r7, #16]
}
 800b5c6:	bf00      	nop
 800b5c8:	bf00      	nop
 800b5ca:	e7fd      	b.n	800b5c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d10b      	bne.n	800b5ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d6:	f383 8811 	msr	BASEPRI, r3
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	60fb      	str	r3, [r7, #12]
}
 800b5e4:	bf00      	nop
 800b5e6:	bf00      	nop
 800b5e8:	e7fd      	b.n	800b5e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b5ea:	f000 fe95 	bl	800c318 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b5ee:	4b1d      	ldr	r3, [pc, #116]	@ (800b664 <xTaskCheckForTimeOut+0xc0>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	69ba      	ldr	r2, [r7, #24]
 800b5fa:	1ad3      	subs	r3, r2, r3
 800b5fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b606:	d102      	bne.n	800b60e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b608:	2300      	movs	r3, #0
 800b60a:	61fb      	str	r3, [r7, #28]
 800b60c:	e023      	b.n	800b656 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	4b15      	ldr	r3, [pc, #84]	@ (800b668 <xTaskCheckForTimeOut+0xc4>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	429a      	cmp	r2, r3
 800b618:	d007      	beq.n	800b62a <xTaskCheckForTimeOut+0x86>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	69ba      	ldr	r2, [r7, #24]
 800b620:	429a      	cmp	r2, r3
 800b622:	d302      	bcc.n	800b62a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b624:	2301      	movs	r3, #1
 800b626:	61fb      	str	r3, [r7, #28]
 800b628:	e015      	b.n	800b656 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	697a      	ldr	r2, [r7, #20]
 800b630:	429a      	cmp	r2, r3
 800b632:	d20b      	bcs.n	800b64c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	1ad2      	subs	r2, r2, r3
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f7ff ff99 	bl	800b578 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b646:	2300      	movs	r3, #0
 800b648:	61fb      	str	r3, [r7, #28]
 800b64a:	e004      	b.n	800b656 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	2200      	movs	r2, #0
 800b650:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b652:	2301      	movs	r3, #1
 800b654:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b656:	f000 fe91 	bl	800c37c <vPortExitCritical>

	return xReturn;
 800b65a:	69fb      	ldr	r3, [r7, #28]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3720      	adds	r7, #32
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	20000fec 	.word	0x20000fec
 800b668:	20001000 	.word	0x20001000

0800b66c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b66c:	b480      	push	{r7}
 800b66e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b670:	4b03      	ldr	r3, [pc, #12]	@ (800b680 <vTaskMissedYield+0x14>)
 800b672:	2201      	movs	r2, #1
 800b674:	601a      	str	r2, [r3, #0]
}
 800b676:	bf00      	nop
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr
 800b680:	20000ffc 	.word	0x20000ffc

0800b684 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b68c:	f000 f852 	bl	800b734 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b690:	4b06      	ldr	r3, [pc, #24]	@ (800b6ac <prvIdleTask+0x28>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d9f9      	bls.n	800b68c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b698:	4b05      	ldr	r3, [pc, #20]	@ (800b6b0 <prvIdleTask+0x2c>)
 800b69a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b69e:	601a      	str	r2, [r3, #0]
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b6a8:	e7f0      	b.n	800b68c <prvIdleTask+0x8>
 800b6aa:	bf00      	nop
 800b6ac:	20000b18 	.word	0x20000b18
 800b6b0:	e000ed04 	.word	0xe000ed04

0800b6b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	607b      	str	r3, [r7, #4]
 800b6be:	e00c      	b.n	800b6da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	4413      	add	r3, r2
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	4a12      	ldr	r2, [pc, #72]	@ (800b714 <prvInitialiseTaskLists+0x60>)
 800b6cc:	4413      	add	r3, r2
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7fe fbb6 	bl	8009e40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	607b      	str	r3, [r7, #4]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b37      	cmp	r3, #55	@ 0x37
 800b6de:	d9ef      	bls.n	800b6c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6e0:	480d      	ldr	r0, [pc, #52]	@ (800b718 <prvInitialiseTaskLists+0x64>)
 800b6e2:	f7fe fbad 	bl	8009e40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6e6:	480d      	ldr	r0, [pc, #52]	@ (800b71c <prvInitialiseTaskLists+0x68>)
 800b6e8:	f7fe fbaa 	bl	8009e40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6ec:	480c      	ldr	r0, [pc, #48]	@ (800b720 <prvInitialiseTaskLists+0x6c>)
 800b6ee:	f7fe fba7 	bl	8009e40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6f2:	480c      	ldr	r0, [pc, #48]	@ (800b724 <prvInitialiseTaskLists+0x70>)
 800b6f4:	f7fe fba4 	bl	8009e40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6f8:	480b      	ldr	r0, [pc, #44]	@ (800b728 <prvInitialiseTaskLists+0x74>)
 800b6fa:	f7fe fba1 	bl	8009e40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6fe:	4b0b      	ldr	r3, [pc, #44]	@ (800b72c <prvInitialiseTaskLists+0x78>)
 800b700:	4a05      	ldr	r2, [pc, #20]	@ (800b718 <prvInitialiseTaskLists+0x64>)
 800b702:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b704:	4b0a      	ldr	r3, [pc, #40]	@ (800b730 <prvInitialiseTaskLists+0x7c>)
 800b706:	4a05      	ldr	r2, [pc, #20]	@ (800b71c <prvInitialiseTaskLists+0x68>)
 800b708:	601a      	str	r2, [r3, #0]
}
 800b70a:	bf00      	nop
 800b70c:	3708      	adds	r7, #8
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	20000b18 	.word	0x20000b18
 800b718:	20000f78 	.word	0x20000f78
 800b71c:	20000f8c 	.word	0x20000f8c
 800b720:	20000fa8 	.word	0x20000fa8
 800b724:	20000fbc 	.word	0x20000fbc
 800b728:	20000fd4 	.word	0x20000fd4
 800b72c:	20000fa0 	.word	0x20000fa0
 800b730:	20000fa4 	.word	0x20000fa4

0800b734 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b73a:	e019      	b.n	800b770 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b73c:	f000 fdec 	bl	800c318 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b740:	4b10      	ldr	r3, [pc, #64]	@ (800b784 <prvCheckTasksWaitingTermination+0x50>)
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	3304      	adds	r3, #4
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7fe fc01 	bl	8009f54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b752:	4b0d      	ldr	r3, [pc, #52]	@ (800b788 <prvCheckTasksWaitingTermination+0x54>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	3b01      	subs	r3, #1
 800b758:	4a0b      	ldr	r2, [pc, #44]	@ (800b788 <prvCheckTasksWaitingTermination+0x54>)
 800b75a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b75c:	4b0b      	ldr	r3, [pc, #44]	@ (800b78c <prvCheckTasksWaitingTermination+0x58>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	3b01      	subs	r3, #1
 800b762:	4a0a      	ldr	r2, [pc, #40]	@ (800b78c <prvCheckTasksWaitingTermination+0x58>)
 800b764:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b766:	f000 fe09 	bl	800c37c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 f810 	bl	800b790 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b770:	4b06      	ldr	r3, [pc, #24]	@ (800b78c <prvCheckTasksWaitingTermination+0x58>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1e1      	bne.n	800b73c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b778:	bf00      	nop
 800b77a:	bf00      	nop
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	20000fbc 	.word	0x20000fbc
 800b788:	20000fe8 	.word	0x20000fe8
 800b78c:	20000fd0 	.word	0x20000fd0

0800b790 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	3354      	adds	r3, #84	@ 0x54
 800b79c:	4618      	mov	r0, r3
 800b79e:	f001 f8eb 	bl	800c978 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d108      	bne.n	800b7be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f000 ffa1 	bl	800c6f8 <vPortFree>
				vPortFree( pxTCB );
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 ff9e 	bl	800c6f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b7bc:	e019      	b.n	800b7f2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d103      	bne.n	800b7d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 ff95 	bl	800c6f8 <vPortFree>
	}
 800b7ce:	e010      	b.n	800b7f2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d00b      	beq.n	800b7f2 <prvDeleteTCB+0x62>
	__asm volatile
 800b7da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7de:	f383 8811 	msr	BASEPRI, r3
 800b7e2:	f3bf 8f6f 	isb	sy
 800b7e6:	f3bf 8f4f 	dsb	sy
 800b7ea:	60fb      	str	r3, [r7, #12]
}
 800b7ec:	bf00      	nop
 800b7ee:	bf00      	nop
 800b7f0:	e7fd      	b.n	800b7ee <prvDeleteTCB+0x5e>
	}
 800b7f2:	bf00      	nop
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
	...

0800b7fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b802:	4b0c      	ldr	r3, [pc, #48]	@ (800b834 <prvResetNextTaskUnblockTime+0x38>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d104      	bne.n	800b816 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b80c:	4b0a      	ldr	r3, [pc, #40]	@ (800b838 <prvResetNextTaskUnblockTime+0x3c>)
 800b80e:	f04f 32ff 	mov.w	r2, #4294967295
 800b812:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b814:	e008      	b.n	800b828 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b816:	4b07      	ldr	r3, [pc, #28]	@ (800b834 <prvResetNextTaskUnblockTime+0x38>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	4a04      	ldr	r2, [pc, #16]	@ (800b838 <prvResetNextTaskUnblockTime+0x3c>)
 800b826:	6013      	str	r3, [r2, #0]
}
 800b828:	bf00      	nop
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr
 800b834:	20000fa0 	.word	0x20000fa0
 800b838:	20001008 	.word	0x20001008

0800b83c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b842:	4b0b      	ldr	r3, [pc, #44]	@ (800b870 <xTaskGetSchedulerState+0x34>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d102      	bne.n	800b850 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b84a:	2301      	movs	r3, #1
 800b84c:	607b      	str	r3, [r7, #4]
 800b84e:	e008      	b.n	800b862 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b850:	4b08      	ldr	r3, [pc, #32]	@ (800b874 <xTaskGetSchedulerState+0x38>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d102      	bne.n	800b85e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b858:	2302      	movs	r3, #2
 800b85a:	607b      	str	r3, [r7, #4]
 800b85c:	e001      	b.n	800b862 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b85e:	2300      	movs	r3, #0
 800b860:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b862:	687b      	ldr	r3, [r7, #4]
	}
 800b864:	4618      	mov	r0, r3
 800b866:	370c      	adds	r7, #12
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr
 800b870:	20000ff4 	.word	0x20000ff4
 800b874:	20001010 	.word	0x20001010

0800b878 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b086      	sub	sp, #24
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b884:	2300      	movs	r3, #0
 800b886:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d058      	beq.n	800b940 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b88e:	4b2f      	ldr	r3, [pc, #188]	@ (800b94c <xTaskPriorityDisinherit+0xd4>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	693a      	ldr	r2, [r7, #16]
 800b894:	429a      	cmp	r2, r3
 800b896:	d00b      	beq.n	800b8b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b89c:	f383 8811 	msr	BASEPRI, r3
 800b8a0:	f3bf 8f6f 	isb	sy
 800b8a4:	f3bf 8f4f 	dsb	sy
 800b8a8:	60fb      	str	r3, [r7, #12]
}
 800b8aa:	bf00      	nop
 800b8ac:	bf00      	nop
 800b8ae:	e7fd      	b.n	800b8ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10b      	bne.n	800b8d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8bc:	f383 8811 	msr	BASEPRI, r3
 800b8c0:	f3bf 8f6f 	isb	sy
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	60bb      	str	r3, [r7, #8]
}
 800b8ca:	bf00      	nop
 800b8cc:	bf00      	nop
 800b8ce:	e7fd      	b.n	800b8cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8d4:	1e5a      	subs	r2, r3, #1
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d02c      	beq.n	800b940 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d128      	bne.n	800b940 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fe fb2e 	bl	8009f54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b904:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b910:	4b0f      	ldr	r3, [pc, #60]	@ (800b950 <xTaskPriorityDisinherit+0xd8>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	429a      	cmp	r2, r3
 800b916:	d903      	bls.n	800b920 <xTaskPriorityDisinherit+0xa8>
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b91c:	4a0c      	ldr	r2, [pc, #48]	@ (800b950 <xTaskPriorityDisinherit+0xd8>)
 800b91e:	6013      	str	r3, [r2, #0]
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b924:	4613      	mov	r3, r2
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	4413      	add	r3, r2
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	4a09      	ldr	r2, [pc, #36]	@ (800b954 <xTaskPriorityDisinherit+0xdc>)
 800b92e:	441a      	add	r2, r3
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	3304      	adds	r3, #4
 800b934:	4619      	mov	r1, r3
 800b936:	4610      	mov	r0, r2
 800b938:	f7fe faaf 	bl	8009e9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b93c:	2301      	movs	r3, #1
 800b93e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b940:	697b      	ldr	r3, [r7, #20]
	}
 800b942:	4618      	mov	r0, r3
 800b944:	3718      	adds	r7, #24
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	20000b14 	.word	0x20000b14
 800b950:	20000ff0 	.word	0x20000ff0
 800b954:	20000b18 	.word	0x20000b18

0800b958 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b962:	4b21      	ldr	r3, [pc, #132]	@ (800b9e8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b968:	4b20      	ldr	r3, [pc, #128]	@ (800b9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	3304      	adds	r3, #4
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe faf0 	bl	8009f54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b97a:	d10a      	bne.n	800b992 <prvAddCurrentTaskToDelayedList+0x3a>
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d007      	beq.n	800b992 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b982:	4b1a      	ldr	r3, [pc, #104]	@ (800b9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	3304      	adds	r3, #4
 800b988:	4619      	mov	r1, r3
 800b98a:	4819      	ldr	r0, [pc, #100]	@ (800b9f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b98c:	f7fe fa85 	bl	8009e9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b990:	e026      	b.n	800b9e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b992:	68fa      	ldr	r2, [r7, #12]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4413      	add	r3, r2
 800b998:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b99a:	4b14      	ldr	r3, [pc, #80]	@ (800b9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b9a2:	68ba      	ldr	r2, [r7, #8]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d209      	bcs.n	800b9be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9aa:	4b12      	ldr	r3, [pc, #72]	@ (800b9f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	4b0f      	ldr	r3, [pc, #60]	@ (800b9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	3304      	adds	r3, #4
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	4610      	mov	r0, r2
 800b9b8:	f7fe fa93 	bl	8009ee2 <vListInsert>
}
 800b9bc:	e010      	b.n	800b9e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9be:	4b0e      	ldr	r3, [pc, #56]	@ (800b9f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	4b0a      	ldr	r3, [pc, #40]	@ (800b9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	3304      	adds	r3, #4
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	4610      	mov	r0, r2
 800b9cc:	f7fe fa89 	bl	8009ee2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b9d0:	4b0a      	ldr	r3, [pc, #40]	@ (800b9fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d202      	bcs.n	800b9e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b9da:	4a08      	ldr	r2, [pc, #32]	@ (800b9fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	6013      	str	r3, [r2, #0]
}
 800b9e0:	bf00      	nop
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	20000fec 	.word	0x20000fec
 800b9ec:	20000b14 	.word	0x20000b14
 800b9f0:	20000fd4 	.word	0x20000fd4
 800b9f4:	20000fa4 	.word	0x20000fa4
 800b9f8:	20000fa0 	.word	0x20000fa0
 800b9fc:	20001008 	.word	0x20001008

0800ba00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b08a      	sub	sp, #40	@ 0x28
 800ba04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ba06:	2300      	movs	r3, #0
 800ba08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ba0a:	f000 fb13 	bl	800c034 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ba0e:	4b1d      	ldr	r3, [pc, #116]	@ (800ba84 <xTimerCreateTimerTask+0x84>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d021      	beq.n	800ba5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ba16:	2300      	movs	r3, #0
 800ba18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ba1e:	1d3a      	adds	r2, r7, #4
 800ba20:	f107 0108 	add.w	r1, r7, #8
 800ba24:	f107 030c 	add.w	r3, r7, #12
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7fe f9ef 	bl	8009e0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ba2e:	6879      	ldr	r1, [r7, #4]
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	9202      	str	r2, [sp, #8]
 800ba36:	9301      	str	r3, [sp, #4]
 800ba38:	2302      	movs	r3, #2
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	460a      	mov	r2, r1
 800ba40:	4911      	ldr	r1, [pc, #68]	@ (800ba88 <xTimerCreateTimerTask+0x88>)
 800ba42:	4812      	ldr	r0, [pc, #72]	@ (800ba8c <xTimerCreateTimerTask+0x8c>)
 800ba44:	f7ff f8a2 	bl	800ab8c <xTaskCreateStatic>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	4a11      	ldr	r2, [pc, #68]	@ (800ba90 <xTimerCreateTimerTask+0x90>)
 800ba4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ba4e:	4b10      	ldr	r3, [pc, #64]	@ (800ba90 <xTimerCreateTimerTask+0x90>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ba56:	2301      	movs	r3, #1
 800ba58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10b      	bne.n	800ba78 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	613b      	str	r3, [r7, #16]
}
 800ba72:	bf00      	nop
 800ba74:	bf00      	nop
 800ba76:	e7fd      	b.n	800ba74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ba78:	697b      	ldr	r3, [r7, #20]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3718      	adds	r7, #24
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	20001044 	.word	0x20001044
 800ba88:	0800cbd4 	.word	0x0800cbd4
 800ba8c:	0800bbcd 	.word	0x0800bbcd
 800ba90:	20001048 	.word	0x20001048

0800ba94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b08a      	sub	sp, #40	@ 0x28
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	607a      	str	r2, [r7, #4]
 800baa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800baa2:	2300      	movs	r3, #0
 800baa4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10b      	bne.n	800bac4 <xTimerGenericCommand+0x30>
	__asm volatile
 800baac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab0:	f383 8811 	msr	BASEPRI, r3
 800bab4:	f3bf 8f6f 	isb	sy
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	623b      	str	r3, [r7, #32]
}
 800babe:	bf00      	nop
 800bac0:	bf00      	nop
 800bac2:	e7fd      	b.n	800bac0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bac4:	4b19      	ldr	r3, [pc, #100]	@ (800bb2c <xTimerGenericCommand+0x98>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d02a      	beq.n	800bb22 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	2b05      	cmp	r3, #5
 800badc:	dc18      	bgt.n	800bb10 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bade:	f7ff fead 	bl	800b83c <xTaskGetSchedulerState>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d109      	bne.n	800bafc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bae8:	4b10      	ldr	r3, [pc, #64]	@ (800bb2c <xTimerGenericCommand+0x98>)
 800baea:	6818      	ldr	r0, [r3, #0]
 800baec:	f107 0110 	add.w	r1, r7, #16
 800baf0:	2300      	movs	r3, #0
 800baf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800baf4:	f7fe fc0c 	bl	800a310 <xQueueGenericSend>
 800baf8:	6278      	str	r0, [r7, #36]	@ 0x24
 800bafa:	e012      	b.n	800bb22 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bafc:	4b0b      	ldr	r3, [pc, #44]	@ (800bb2c <xTimerGenericCommand+0x98>)
 800bafe:	6818      	ldr	r0, [r3, #0]
 800bb00:	f107 0110 	add.w	r1, r7, #16
 800bb04:	2300      	movs	r3, #0
 800bb06:	2200      	movs	r2, #0
 800bb08:	f7fe fc02 	bl	800a310 <xQueueGenericSend>
 800bb0c:	6278      	str	r0, [r7, #36]	@ 0x24
 800bb0e:	e008      	b.n	800bb22 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb10:	4b06      	ldr	r3, [pc, #24]	@ (800bb2c <xTimerGenericCommand+0x98>)
 800bb12:	6818      	ldr	r0, [r3, #0]
 800bb14:	f107 0110 	add.w	r1, r7, #16
 800bb18:	2300      	movs	r3, #0
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	f7fe fcfa 	bl	800a514 <xQueueGenericSendFromISR>
 800bb20:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3728      	adds	r7, #40	@ 0x28
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	20001044 	.word	0x20001044

0800bb30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b088      	sub	sp, #32
 800bb34:	af02      	add	r7, sp, #8
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb3a:	4b23      	ldr	r3, [pc, #140]	@ (800bbc8 <prvProcessExpiredTimer+0x98>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	3304      	adds	r3, #4
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7fe fa03 	bl	8009f54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb54:	f003 0304 	and.w	r3, r3, #4
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d023      	beq.n	800bba4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	699a      	ldr	r2, [r3, #24]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	18d1      	adds	r1, r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	683a      	ldr	r2, [r7, #0]
 800bb68:	6978      	ldr	r0, [r7, #20]
 800bb6a:	f000 f8d5 	bl	800bd18 <prvInsertTimerInActiveList>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d020      	beq.n	800bbb6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb74:	2300      	movs	r3, #0
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	2300      	movs	r3, #0
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	6978      	ldr	r0, [r7, #20]
 800bb80:	f7ff ff88 	bl	800ba94 <xTimerGenericCommand>
 800bb84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d114      	bne.n	800bbb6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bb8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb90:	f383 8811 	msr	BASEPRI, r3
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	60fb      	str	r3, [r7, #12]
}
 800bb9e:	bf00      	nop
 800bba0:	bf00      	nop
 800bba2:	e7fd      	b.n	800bba0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbaa:	f023 0301 	bic.w	r3, r3, #1
 800bbae:	b2da      	uxtb	r2, r3
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	6a1b      	ldr	r3, [r3, #32]
 800bbba:	6978      	ldr	r0, [r7, #20]
 800bbbc:	4798      	blx	r3
}
 800bbbe:	bf00      	nop
 800bbc0:	3718      	adds	r7, #24
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	2000103c 	.word	0x2000103c

0800bbcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbd4:	f107 0308 	add.w	r3, r7, #8
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f000 f859 	bl	800bc90 <prvGetNextExpireTime>
 800bbde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f000 f805 	bl	800bbf4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bbea:	f000 f8d7 	bl	800bd9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbee:	bf00      	nop
 800bbf0:	e7f0      	b.n	800bbd4 <prvTimerTask+0x8>
	...

0800bbf4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bbfe:	f7ff fa29 	bl	800b054 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc02:	f107 0308 	add.w	r3, r7, #8
 800bc06:	4618      	mov	r0, r3
 800bc08:	f000 f866 	bl	800bcd8 <prvSampleTimeNow>
 800bc0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d130      	bne.n	800bc76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d10a      	bne.n	800bc30 <prvProcessTimerOrBlockTask+0x3c>
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d806      	bhi.n	800bc30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc22:	f7ff fa25 	bl	800b070 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc26:	68f9      	ldr	r1, [r7, #12]
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f7ff ff81 	bl	800bb30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc2e:	e024      	b.n	800bc7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d008      	beq.n	800bc48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc36:	4b13      	ldr	r3, [pc, #76]	@ (800bc84 <prvProcessTimerOrBlockTask+0x90>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d101      	bne.n	800bc44 <prvProcessTimerOrBlockTask+0x50>
 800bc40:	2301      	movs	r3, #1
 800bc42:	e000      	b.n	800bc46 <prvProcessTimerOrBlockTask+0x52>
 800bc44:	2300      	movs	r3, #0
 800bc46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc48:	4b0f      	ldr	r3, [pc, #60]	@ (800bc88 <prvProcessTimerOrBlockTask+0x94>)
 800bc4a:	6818      	ldr	r0, [r3, #0]
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	683a      	ldr	r2, [r7, #0]
 800bc54:	4619      	mov	r1, r3
 800bc56:	f7fe ff65 	bl	800ab24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc5a:	f7ff fa09 	bl	800b070 <xTaskResumeAll>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10a      	bne.n	800bc7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc64:	4b09      	ldr	r3, [pc, #36]	@ (800bc8c <prvProcessTimerOrBlockTask+0x98>)
 800bc66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc6a:	601a      	str	r2, [r3, #0]
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	f3bf 8f6f 	isb	sy
}
 800bc74:	e001      	b.n	800bc7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc76:	f7ff f9fb 	bl	800b070 <xTaskResumeAll>
}
 800bc7a:	bf00      	nop
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	20001040 	.word	0x20001040
 800bc88:	20001044 	.word	0x20001044
 800bc8c:	e000ed04 	.word	0xe000ed04

0800bc90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc98:	4b0e      	ldr	r3, [pc, #56]	@ (800bcd4 <prvGetNextExpireTime+0x44>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d101      	bne.n	800bca6 <prvGetNextExpireTime+0x16>
 800bca2:	2201      	movs	r2, #1
 800bca4:	e000      	b.n	800bca8 <prvGetNextExpireTime+0x18>
 800bca6:	2200      	movs	r2, #0
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d105      	bne.n	800bcc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bcb4:	4b07      	ldr	r3, [pc, #28]	@ (800bcd4 <prvGetNextExpireTime+0x44>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	60fb      	str	r3, [r7, #12]
 800bcbe:	e001      	b.n	800bcc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3714      	adds	r7, #20
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	2000103c 	.word	0x2000103c

0800bcd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bce0:	f7ff fa64 	bl	800b1ac <xTaskGetTickCount>
 800bce4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bce6:	4b0b      	ldr	r3, [pc, #44]	@ (800bd14 <prvSampleTimeNow+0x3c>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d205      	bcs.n	800bcfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bcf0:	f000 f93a 	bl	800bf68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	601a      	str	r2, [r3, #0]
 800bcfa:	e002      	b.n	800bd02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bd02:	4a04      	ldr	r2, [pc, #16]	@ (800bd14 <prvSampleTimeNow+0x3c>)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bd08:	68fb      	ldr	r3, [r7, #12]
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	2000104c 	.word	0x2000104c

0800bd18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b086      	sub	sp, #24
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
 800bd24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd26:	2300      	movs	r3, #0
 800bd28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd36:	68ba      	ldr	r2, [r7, #8]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d812      	bhi.n	800bd64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	1ad2      	subs	r2, r2, r3
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	699b      	ldr	r3, [r3, #24]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d302      	bcc.n	800bd52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	617b      	str	r3, [r7, #20]
 800bd50:	e01b      	b.n	800bd8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd52:	4b10      	ldr	r3, [pc, #64]	@ (800bd94 <prvInsertTimerInActiveList+0x7c>)
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	3304      	adds	r3, #4
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	4610      	mov	r0, r2
 800bd5e:	f7fe f8c0 	bl	8009ee2 <vListInsert>
 800bd62:	e012      	b.n	800bd8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d206      	bcs.n	800bd7a <prvInsertTimerInActiveList+0x62>
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d302      	bcc.n	800bd7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd74:	2301      	movs	r3, #1
 800bd76:	617b      	str	r3, [r7, #20]
 800bd78:	e007      	b.n	800bd8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd7a:	4b07      	ldr	r3, [pc, #28]	@ (800bd98 <prvInsertTimerInActiveList+0x80>)
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	3304      	adds	r3, #4
 800bd82:	4619      	mov	r1, r3
 800bd84:	4610      	mov	r0, r2
 800bd86:	f7fe f8ac 	bl	8009ee2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd8a:	697b      	ldr	r3, [r7, #20]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3718      	adds	r7, #24
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	20001040 	.word	0x20001040
 800bd98:	2000103c 	.word	0x2000103c

0800bd9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b08e      	sub	sp, #56	@ 0x38
 800bda0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bda2:	e0ce      	b.n	800bf42 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	da19      	bge.n	800bdde <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bdaa:	1d3b      	adds	r3, r7, #4
 800bdac:	3304      	adds	r3, #4
 800bdae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bdb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d10b      	bne.n	800bdce <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bdb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdba:	f383 8811 	msr	BASEPRI, r3
 800bdbe:	f3bf 8f6f 	isb	sy
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	61fb      	str	r3, [r7, #28]
}
 800bdc8:	bf00      	nop
 800bdca:	bf00      	nop
 800bdcc:	e7fd      	b.n	800bdca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bdce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdd4:	6850      	ldr	r0, [r2, #4]
 800bdd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdd8:	6892      	ldr	r2, [r2, #8]
 800bdda:	4611      	mov	r1, r2
 800bddc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	f2c0 80ae 	blt.w	800bf42 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bdea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdec:	695b      	ldr	r3, [r3, #20]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d004      	beq.n	800bdfc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdf4:	3304      	adds	r3, #4
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fe f8ac 	bl	8009f54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdfc:	463b      	mov	r3, r7
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7ff ff6a 	bl	800bcd8 <prvSampleTimeNow>
 800be04:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2b09      	cmp	r3, #9
 800be0a:	f200 8097 	bhi.w	800bf3c <prvProcessReceivedCommands+0x1a0>
 800be0e:	a201      	add	r2, pc, #4	@ (adr r2, 800be14 <prvProcessReceivedCommands+0x78>)
 800be10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be14:	0800be3d 	.word	0x0800be3d
 800be18:	0800be3d 	.word	0x0800be3d
 800be1c:	0800be3d 	.word	0x0800be3d
 800be20:	0800beb3 	.word	0x0800beb3
 800be24:	0800bec7 	.word	0x0800bec7
 800be28:	0800bf13 	.word	0x0800bf13
 800be2c:	0800be3d 	.word	0x0800be3d
 800be30:	0800be3d 	.word	0x0800be3d
 800be34:	0800beb3 	.word	0x0800beb3
 800be38:	0800bec7 	.word	0x0800bec7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be42:	f043 0301 	orr.w	r3, r3, #1
 800be46:	b2da      	uxtb	r2, r3
 800be48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be52:	699b      	ldr	r3, [r3, #24]
 800be54:	18d1      	adds	r1, r2, r3
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be5c:	f7ff ff5c 	bl	800bd18 <prvInsertTimerInActiveList>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d06c      	beq.n	800bf40 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be68:	6a1b      	ldr	r3, [r3, #32]
 800be6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be74:	f003 0304 	and.w	r3, r3, #4
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d061      	beq.n	800bf40 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be80:	699b      	ldr	r3, [r3, #24]
 800be82:	441a      	add	r2, r3
 800be84:	2300      	movs	r3, #0
 800be86:	9300      	str	r3, [sp, #0]
 800be88:	2300      	movs	r3, #0
 800be8a:	2100      	movs	r1, #0
 800be8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be8e:	f7ff fe01 	bl	800ba94 <xTimerGenericCommand>
 800be92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be94:	6a3b      	ldr	r3, [r7, #32]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d152      	bne.n	800bf40 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800be9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9e:	f383 8811 	msr	BASEPRI, r3
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	61bb      	str	r3, [r7, #24]
}
 800beac:	bf00      	nop
 800beae:	bf00      	nop
 800beb0:	e7fd      	b.n	800beae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800beb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800beb8:	f023 0301 	bic.w	r3, r3, #1
 800bebc:	b2da      	uxtb	r2, r3
 800bebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bec0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bec4:	e03d      	b.n	800bf42 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bec8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800becc:	f043 0301 	orr.w	r3, r3, #1
 800bed0:	b2da      	uxtb	r2, r3
 800bed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bed4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bedc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee0:	699b      	ldr	r3, [r3, #24]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10b      	bne.n	800befe <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beea:	f383 8811 	msr	BASEPRI, r3
 800beee:	f3bf 8f6f 	isb	sy
 800bef2:	f3bf 8f4f 	dsb	sy
 800bef6:	617b      	str	r3, [r7, #20]
}
 800bef8:	bf00      	nop
 800befa:	bf00      	nop
 800befc:	e7fd      	b.n	800befa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800befe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf00:	699a      	ldr	r2, [r3, #24]
 800bf02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf04:	18d1      	adds	r1, r2, r3
 800bf06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf0c:	f7ff ff04 	bl	800bd18 <prvInsertTimerInActiveList>
					break;
 800bf10:	e017      	b.n	800bf42 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bf12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf18:	f003 0302 	and.w	r3, r3, #2
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d103      	bne.n	800bf28 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bf20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf22:	f000 fbe9 	bl	800c6f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf26:	e00c      	b.n	800bf42 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf2e:	f023 0301 	bic.w	r3, r3, #1
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bf3a:	e002      	b.n	800bf42 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bf3c:	bf00      	nop
 800bf3e:	e000      	b.n	800bf42 <prvProcessReceivedCommands+0x1a6>
					break;
 800bf40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf42:	4b08      	ldr	r3, [pc, #32]	@ (800bf64 <prvProcessReceivedCommands+0x1c8>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	1d39      	adds	r1, r7, #4
 800bf48:	2200      	movs	r2, #0
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fe fb80 	bl	800a650 <xQueueReceive>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	f47f af26 	bne.w	800bda4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bf58:	bf00      	nop
 800bf5a:	bf00      	nop
 800bf5c:	3730      	adds	r7, #48	@ 0x30
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	20001044 	.word	0x20001044

0800bf68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b088      	sub	sp, #32
 800bf6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf6e:	e049      	b.n	800c004 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf70:	4b2e      	ldr	r3, [pc, #184]	@ (800c02c <prvSwitchTimerLists+0xc4>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	68db      	ldr	r3, [r3, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf7a:	4b2c      	ldr	r3, [pc, #176]	@ (800c02c <prvSwitchTimerLists+0xc4>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	3304      	adds	r3, #4
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7fd ffe3 	bl	8009f54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	6a1b      	ldr	r3, [r3, #32]
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf9c:	f003 0304 	and.w	r3, r3, #4
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d02f      	beq.n	800c004 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	699b      	ldr	r3, [r3, #24]
 800bfa8:	693a      	ldr	r2, [r7, #16]
 800bfaa:	4413      	add	r3, r2
 800bfac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bfae:	68ba      	ldr	r2, [r7, #8]
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d90e      	bls.n	800bfd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	68ba      	ldr	r2, [r7, #8]
 800bfba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfc2:	4b1a      	ldr	r3, [pc, #104]	@ (800c02c <prvSwitchTimerLists+0xc4>)
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	3304      	adds	r3, #4
 800bfca:	4619      	mov	r1, r3
 800bfcc:	4610      	mov	r0, r2
 800bfce:	f7fd ff88 	bl	8009ee2 <vListInsert>
 800bfd2:	e017      	b.n	800c004 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	2300      	movs	r3, #0
 800bfda:	693a      	ldr	r2, [r7, #16]
 800bfdc:	2100      	movs	r1, #0
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f7ff fd58 	bl	800ba94 <xTimerGenericCommand>
 800bfe4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d10b      	bne.n	800c004 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bfec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	603b      	str	r3, [r7, #0]
}
 800bffe:	bf00      	nop
 800c000:	bf00      	nop
 800c002:	e7fd      	b.n	800c000 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c004:	4b09      	ldr	r3, [pc, #36]	@ (800c02c <prvSwitchTimerLists+0xc4>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d1b0      	bne.n	800bf70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c00e:	4b07      	ldr	r3, [pc, #28]	@ (800c02c <prvSwitchTimerLists+0xc4>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c014:	4b06      	ldr	r3, [pc, #24]	@ (800c030 <prvSwitchTimerLists+0xc8>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a04      	ldr	r2, [pc, #16]	@ (800c02c <prvSwitchTimerLists+0xc4>)
 800c01a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c01c:	4a04      	ldr	r2, [pc, #16]	@ (800c030 <prvSwitchTimerLists+0xc8>)
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	6013      	str	r3, [r2, #0]
}
 800c022:	bf00      	nop
 800c024:	3718      	adds	r7, #24
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	2000103c 	.word	0x2000103c
 800c030:	20001040 	.word	0x20001040

0800c034 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c03a:	f000 f96d 	bl	800c318 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c03e:	4b15      	ldr	r3, [pc, #84]	@ (800c094 <prvCheckForValidListAndQueue+0x60>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d120      	bne.n	800c088 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c046:	4814      	ldr	r0, [pc, #80]	@ (800c098 <prvCheckForValidListAndQueue+0x64>)
 800c048:	f7fd fefa 	bl	8009e40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c04c:	4813      	ldr	r0, [pc, #76]	@ (800c09c <prvCheckForValidListAndQueue+0x68>)
 800c04e:	f7fd fef7 	bl	8009e40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c052:	4b13      	ldr	r3, [pc, #76]	@ (800c0a0 <prvCheckForValidListAndQueue+0x6c>)
 800c054:	4a10      	ldr	r2, [pc, #64]	@ (800c098 <prvCheckForValidListAndQueue+0x64>)
 800c056:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c058:	4b12      	ldr	r3, [pc, #72]	@ (800c0a4 <prvCheckForValidListAndQueue+0x70>)
 800c05a:	4a10      	ldr	r2, [pc, #64]	@ (800c09c <prvCheckForValidListAndQueue+0x68>)
 800c05c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c05e:	2300      	movs	r3, #0
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	4b11      	ldr	r3, [pc, #68]	@ (800c0a8 <prvCheckForValidListAndQueue+0x74>)
 800c064:	4a11      	ldr	r2, [pc, #68]	@ (800c0ac <prvCheckForValidListAndQueue+0x78>)
 800c066:	2110      	movs	r1, #16
 800c068:	200a      	movs	r0, #10
 800c06a:	f7fe f807 	bl	800a07c <xQueueGenericCreateStatic>
 800c06e:	4603      	mov	r3, r0
 800c070:	4a08      	ldr	r2, [pc, #32]	@ (800c094 <prvCheckForValidListAndQueue+0x60>)
 800c072:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c074:	4b07      	ldr	r3, [pc, #28]	@ (800c094 <prvCheckForValidListAndQueue+0x60>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d005      	beq.n	800c088 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c07c:	4b05      	ldr	r3, [pc, #20]	@ (800c094 <prvCheckForValidListAndQueue+0x60>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	490b      	ldr	r1, [pc, #44]	@ (800c0b0 <prvCheckForValidListAndQueue+0x7c>)
 800c082:	4618      	mov	r0, r3
 800c084:	f7fe fcfa 	bl	800aa7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c088:	f000 f978 	bl	800c37c <vPortExitCritical>
}
 800c08c:	bf00      	nop
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	20001044 	.word	0x20001044
 800c098:	20001014 	.word	0x20001014
 800c09c:	20001028 	.word	0x20001028
 800c0a0:	2000103c 	.word	0x2000103c
 800c0a4:	20001040 	.word	0x20001040
 800c0a8:	200010f0 	.word	0x200010f0
 800c0ac:	20001050 	.word	0x20001050
 800c0b0:	0800cbdc 	.word	0x0800cbdc

0800c0b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	3b04      	subs	r3, #4
 800c0c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c0cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3b04      	subs	r3, #4
 800c0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	f023 0201 	bic.w	r2, r3, #1
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3b04      	subs	r3, #4
 800c0e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0e4:	4a0c      	ldr	r2, [pc, #48]	@ (800c118 <pxPortInitialiseStack+0x64>)
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	3b14      	subs	r3, #20
 800c0ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	3b04      	subs	r3, #4
 800c0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f06f 0202 	mvn.w	r2, #2
 800c102:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	3b20      	subs	r3, #32
 800c108:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c10a:	68fb      	ldr	r3, [r7, #12]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	0800c11d 	.word	0x0800c11d

0800c11c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c126:	4b13      	ldr	r3, [pc, #76]	@ (800c174 <prvTaskExitError+0x58>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c12e:	d00b      	beq.n	800c148 <prvTaskExitError+0x2c>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	60fb      	str	r3, [r7, #12]
}
 800c142:	bf00      	nop
 800c144:	bf00      	nop
 800c146:	e7fd      	b.n	800c144 <prvTaskExitError+0x28>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	60bb      	str	r3, [r7, #8]
}
 800c15a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c15c:	bf00      	nop
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d0fc      	beq.n	800c15e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c164:	bf00      	nop
 800c166:	bf00      	nop
 800c168:	3714      	adds	r7, #20
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	2000000c 	.word	0x2000000c
	...

0800c180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c180:	4b07      	ldr	r3, [pc, #28]	@ (800c1a0 <pxCurrentTCBConst2>)
 800c182:	6819      	ldr	r1, [r3, #0]
 800c184:	6808      	ldr	r0, [r1, #0]
 800c186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18a:	f380 8809 	msr	PSP, r0
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	f04f 0000 	mov.w	r0, #0
 800c196:	f380 8811 	msr	BASEPRI, r0
 800c19a:	4770      	bx	lr
 800c19c:	f3af 8000 	nop.w

0800c1a0 <pxCurrentTCBConst2>:
 800c1a0:	20000b14 	.word	0x20000b14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c1a4:	bf00      	nop
 800c1a6:	bf00      	nop

0800c1a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c1a8:	4808      	ldr	r0, [pc, #32]	@ (800c1cc <prvPortStartFirstTask+0x24>)
 800c1aa:	6800      	ldr	r0, [r0, #0]
 800c1ac:	6800      	ldr	r0, [r0, #0]
 800c1ae:	f380 8808 	msr	MSP, r0
 800c1b2:	f04f 0000 	mov.w	r0, #0
 800c1b6:	f380 8814 	msr	CONTROL, r0
 800c1ba:	b662      	cpsie	i
 800c1bc:	b661      	cpsie	f
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	df00      	svc	0
 800c1c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c1ca:	bf00      	nop
 800c1cc:	e000ed08 	.word	0xe000ed08

0800c1d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c1d6:	4b47      	ldr	r3, [pc, #284]	@ (800c2f4 <xPortStartScheduler+0x124>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a47      	ldr	r2, [pc, #284]	@ (800c2f8 <xPortStartScheduler+0x128>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d10b      	bne.n	800c1f8 <xPortStartScheduler+0x28>
	__asm volatile
 800c1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	613b      	str	r3, [r7, #16]
}
 800c1f2:	bf00      	nop
 800c1f4:	bf00      	nop
 800c1f6:	e7fd      	b.n	800c1f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c1f8:	4b3e      	ldr	r3, [pc, #248]	@ (800c2f4 <xPortStartScheduler+0x124>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a3f      	ldr	r2, [pc, #252]	@ (800c2fc <xPortStartScheduler+0x12c>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d10b      	bne.n	800c21a <xPortStartScheduler+0x4a>
	__asm volatile
 800c202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c206:	f383 8811 	msr	BASEPRI, r3
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	60fb      	str	r3, [r7, #12]
}
 800c214:	bf00      	nop
 800c216:	bf00      	nop
 800c218:	e7fd      	b.n	800c216 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c21a:	4b39      	ldr	r3, [pc, #228]	@ (800c300 <xPortStartScheduler+0x130>)
 800c21c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	b2db      	uxtb	r3, r3
 800c224:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	22ff      	movs	r2, #255	@ 0xff
 800c22a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	b2db      	uxtb	r3, r3
 800c232:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c234:	78fb      	ldrb	r3, [r7, #3]
 800c236:	b2db      	uxtb	r3, r3
 800c238:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c23c:	b2da      	uxtb	r2, r3
 800c23e:	4b31      	ldr	r3, [pc, #196]	@ (800c304 <xPortStartScheduler+0x134>)
 800c240:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c242:	4b31      	ldr	r3, [pc, #196]	@ (800c308 <xPortStartScheduler+0x138>)
 800c244:	2207      	movs	r2, #7
 800c246:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c248:	e009      	b.n	800c25e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c24a:	4b2f      	ldr	r3, [pc, #188]	@ (800c308 <xPortStartScheduler+0x138>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	3b01      	subs	r3, #1
 800c250:	4a2d      	ldr	r2, [pc, #180]	@ (800c308 <xPortStartScheduler+0x138>)
 800c252:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c254:	78fb      	ldrb	r3, [r7, #3]
 800c256:	b2db      	uxtb	r3, r3
 800c258:	005b      	lsls	r3, r3, #1
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c25e:	78fb      	ldrb	r3, [r7, #3]
 800c260:	b2db      	uxtb	r3, r3
 800c262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c266:	2b80      	cmp	r3, #128	@ 0x80
 800c268:	d0ef      	beq.n	800c24a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c26a:	4b27      	ldr	r3, [pc, #156]	@ (800c308 <xPortStartScheduler+0x138>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f1c3 0307 	rsb	r3, r3, #7
 800c272:	2b04      	cmp	r3, #4
 800c274:	d00b      	beq.n	800c28e <xPortStartScheduler+0xbe>
	__asm volatile
 800c276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	60bb      	str	r3, [r7, #8]
}
 800c288:	bf00      	nop
 800c28a:	bf00      	nop
 800c28c:	e7fd      	b.n	800c28a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c28e:	4b1e      	ldr	r3, [pc, #120]	@ (800c308 <xPortStartScheduler+0x138>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	021b      	lsls	r3, r3, #8
 800c294:	4a1c      	ldr	r2, [pc, #112]	@ (800c308 <xPortStartScheduler+0x138>)
 800c296:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c298:	4b1b      	ldr	r3, [pc, #108]	@ (800c308 <xPortStartScheduler+0x138>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c2a0:	4a19      	ldr	r2, [pc, #100]	@ (800c308 <xPortStartScheduler+0x138>)
 800c2a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	b2da      	uxtb	r2, r3
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c2ac:	4b17      	ldr	r3, [pc, #92]	@ (800c30c <xPortStartScheduler+0x13c>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a16      	ldr	r2, [pc, #88]	@ (800c30c <xPortStartScheduler+0x13c>)
 800c2b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c2b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c2b8:	4b14      	ldr	r3, [pc, #80]	@ (800c30c <xPortStartScheduler+0x13c>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a13      	ldr	r2, [pc, #76]	@ (800c30c <xPortStartScheduler+0x13c>)
 800c2be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c2c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c2c4:	f000 f8da 	bl	800c47c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c2c8:	4b11      	ldr	r3, [pc, #68]	@ (800c310 <xPortStartScheduler+0x140>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c2ce:	f000 f8f9 	bl	800c4c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c2d2:	4b10      	ldr	r3, [pc, #64]	@ (800c314 <xPortStartScheduler+0x144>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a0f      	ldr	r2, [pc, #60]	@ (800c314 <xPortStartScheduler+0x144>)
 800c2d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c2dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c2de:	f7ff ff63 	bl	800c1a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c2e2:	f7ff f82d 	bl	800b340 <vTaskSwitchContext>
	prvTaskExitError();
 800c2e6:	f7ff ff19 	bl	800c11c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2ea:	2300      	movs	r3, #0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3718      	adds	r7, #24
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	e000ed00 	.word	0xe000ed00
 800c2f8:	410fc271 	.word	0x410fc271
 800c2fc:	410fc270 	.word	0x410fc270
 800c300:	e000e400 	.word	0xe000e400
 800c304:	20001140 	.word	0x20001140
 800c308:	20001144 	.word	0x20001144
 800c30c:	e000ed20 	.word	0xe000ed20
 800c310:	2000000c 	.word	0x2000000c
 800c314:	e000ef34 	.word	0xe000ef34

0800c318 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	607b      	str	r3, [r7, #4]
}
 800c330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c332:	4b10      	ldr	r3, [pc, #64]	@ (800c374 <vPortEnterCritical+0x5c>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	3301      	adds	r3, #1
 800c338:	4a0e      	ldr	r2, [pc, #56]	@ (800c374 <vPortEnterCritical+0x5c>)
 800c33a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c33c:	4b0d      	ldr	r3, [pc, #52]	@ (800c374 <vPortEnterCritical+0x5c>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2b01      	cmp	r3, #1
 800c342:	d110      	bne.n	800c366 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c344:	4b0c      	ldr	r3, [pc, #48]	@ (800c378 <vPortEnterCritical+0x60>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d00b      	beq.n	800c366 <vPortEnterCritical+0x4e>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	603b      	str	r3, [r7, #0]
}
 800c360:	bf00      	nop
 800c362:	bf00      	nop
 800c364:	e7fd      	b.n	800c362 <vPortEnterCritical+0x4a>
	}
}
 800c366:	bf00      	nop
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	2000000c 	.word	0x2000000c
 800c378:	e000ed04 	.word	0xe000ed04

0800c37c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c382:	4b12      	ldr	r3, [pc, #72]	@ (800c3cc <vPortExitCritical+0x50>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d10b      	bne.n	800c3a2 <vPortExitCritical+0x26>
	__asm volatile
 800c38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c38e:	f383 8811 	msr	BASEPRI, r3
 800c392:	f3bf 8f6f 	isb	sy
 800c396:	f3bf 8f4f 	dsb	sy
 800c39a:	607b      	str	r3, [r7, #4]
}
 800c39c:	bf00      	nop
 800c39e:	bf00      	nop
 800c3a0:	e7fd      	b.n	800c39e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c3a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c3cc <vPortExitCritical+0x50>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	4a08      	ldr	r2, [pc, #32]	@ (800c3cc <vPortExitCritical+0x50>)
 800c3aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c3ac:	4b07      	ldr	r3, [pc, #28]	@ (800c3cc <vPortExitCritical+0x50>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d105      	bne.n	800c3c0 <vPortExitCritical+0x44>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	f383 8811 	msr	BASEPRI, r3
}
 800c3be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c3c0:	bf00      	nop
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	2000000c 	.word	0x2000000c

0800c3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c3d0:	f3ef 8009 	mrs	r0, PSP
 800c3d4:	f3bf 8f6f 	isb	sy
 800c3d8:	4b15      	ldr	r3, [pc, #84]	@ (800c430 <pxCurrentTCBConst>)
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	f01e 0f10 	tst.w	lr, #16
 800c3e0:	bf08      	it	eq
 800c3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ea:	6010      	str	r0, [r2, #0]
 800c3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c3f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c3f4:	f380 8811 	msr	BASEPRI, r0
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	f3bf 8f6f 	isb	sy
 800c400:	f7fe ff9e 	bl	800b340 <vTaskSwitchContext>
 800c404:	f04f 0000 	mov.w	r0, #0
 800c408:	f380 8811 	msr	BASEPRI, r0
 800c40c:	bc09      	pop	{r0, r3}
 800c40e:	6819      	ldr	r1, [r3, #0]
 800c410:	6808      	ldr	r0, [r1, #0]
 800c412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c416:	f01e 0f10 	tst.w	lr, #16
 800c41a:	bf08      	it	eq
 800c41c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c420:	f380 8809 	msr	PSP, r0
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	f3af 8000 	nop.w

0800c430 <pxCurrentTCBConst>:
 800c430:	20000b14 	.word	0x20000b14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c434:	bf00      	nop
 800c436:	bf00      	nop

0800c438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	607b      	str	r3, [r7, #4]
}
 800c450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c452:	f7fe febb 	bl	800b1cc <xTaskIncrementTick>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d003      	beq.n	800c464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c45c:	4b06      	ldr	r3, [pc, #24]	@ (800c478 <xPortSysTickHandler+0x40>)
 800c45e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c462:	601a      	str	r2, [r3, #0]
 800c464:	2300      	movs	r3, #0
 800c466:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	f383 8811 	msr	BASEPRI, r3
}
 800c46e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c470:	bf00      	nop
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	e000ed04 	.word	0xe000ed04

0800c47c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c47c:	b480      	push	{r7}
 800c47e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c480:	4b0b      	ldr	r3, [pc, #44]	@ (800c4b0 <vPortSetupTimerInterrupt+0x34>)
 800c482:	2200      	movs	r2, #0
 800c484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c486:	4b0b      	ldr	r3, [pc, #44]	@ (800c4b4 <vPortSetupTimerInterrupt+0x38>)
 800c488:	2200      	movs	r2, #0
 800c48a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c48c:	4b0a      	ldr	r3, [pc, #40]	@ (800c4b8 <vPortSetupTimerInterrupt+0x3c>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a0a      	ldr	r2, [pc, #40]	@ (800c4bc <vPortSetupTimerInterrupt+0x40>)
 800c492:	fba2 2303 	umull	r2, r3, r2, r3
 800c496:	099b      	lsrs	r3, r3, #6
 800c498:	4a09      	ldr	r2, [pc, #36]	@ (800c4c0 <vPortSetupTimerInterrupt+0x44>)
 800c49a:	3b01      	subs	r3, #1
 800c49c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c49e:	4b04      	ldr	r3, [pc, #16]	@ (800c4b0 <vPortSetupTimerInterrupt+0x34>)
 800c4a0:	2207      	movs	r2, #7
 800c4a2:	601a      	str	r2, [r3, #0]
}
 800c4a4:	bf00      	nop
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	e000e010 	.word	0xe000e010
 800c4b4:	e000e018 	.word	0xe000e018
 800c4b8:	20000000 	.word	0x20000000
 800c4bc:	10624dd3 	.word	0x10624dd3
 800c4c0:	e000e014 	.word	0xe000e014

0800c4c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c4c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c4d4 <vPortEnableVFP+0x10>
 800c4c8:	6801      	ldr	r1, [r0, #0]
 800c4ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c4ce:	6001      	str	r1, [r0, #0]
 800c4d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c4d2:	bf00      	nop
 800c4d4:	e000ed88 	.word	0xe000ed88

0800c4d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c4de:	f3ef 8305 	mrs	r3, IPSR
 800c4e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2b0f      	cmp	r3, #15
 800c4e8:	d915      	bls.n	800c516 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4ea:	4a18      	ldr	r2, [pc, #96]	@ (800c54c <vPortValidateInterruptPriority+0x74>)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4f4:	4b16      	ldr	r3, [pc, #88]	@ (800c550 <vPortValidateInterruptPriority+0x78>)
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	7afa      	ldrb	r2, [r7, #11]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d20b      	bcs.n	800c516 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	607b      	str	r3, [r7, #4]
}
 800c510:	bf00      	nop
 800c512:	bf00      	nop
 800c514:	e7fd      	b.n	800c512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c516:	4b0f      	ldr	r3, [pc, #60]	@ (800c554 <vPortValidateInterruptPriority+0x7c>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c51e:	4b0e      	ldr	r3, [pc, #56]	@ (800c558 <vPortValidateInterruptPriority+0x80>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	429a      	cmp	r2, r3
 800c524:	d90b      	bls.n	800c53e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52a:	f383 8811 	msr	BASEPRI, r3
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	603b      	str	r3, [r7, #0]
}
 800c538:	bf00      	nop
 800c53a:	bf00      	nop
 800c53c:	e7fd      	b.n	800c53a <vPortValidateInterruptPriority+0x62>
	}
 800c53e:	bf00      	nop
 800c540:	3714      	adds	r7, #20
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	e000e3f0 	.word	0xe000e3f0
 800c550:	20001140 	.word	0x20001140
 800c554:	e000ed0c 	.word	0xe000ed0c
 800c558:	20001144 	.word	0x20001144

0800c55c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b08a      	sub	sp, #40	@ 0x28
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c564:	2300      	movs	r3, #0
 800c566:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c568:	f7fe fd74 	bl	800b054 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c56c:	4b5c      	ldr	r3, [pc, #368]	@ (800c6e0 <pvPortMalloc+0x184>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d101      	bne.n	800c578 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c574:	f000 f924 	bl	800c7c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c578:	4b5a      	ldr	r3, [pc, #360]	@ (800c6e4 <pvPortMalloc+0x188>)
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	4013      	ands	r3, r2
 800c580:	2b00      	cmp	r3, #0
 800c582:	f040 8095 	bne.w	800c6b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d01e      	beq.n	800c5ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c58c:	2208      	movs	r2, #8
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4413      	add	r3, r2
 800c592:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f003 0307 	and.w	r3, r3, #7
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d015      	beq.n	800c5ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f023 0307 	bic.w	r3, r3, #7
 800c5a4:	3308      	adds	r3, #8
 800c5a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f003 0307 	and.w	r3, r3, #7
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00b      	beq.n	800c5ca <pvPortMalloc+0x6e>
	__asm volatile
 800c5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b6:	f383 8811 	msr	BASEPRI, r3
 800c5ba:	f3bf 8f6f 	isb	sy
 800c5be:	f3bf 8f4f 	dsb	sy
 800c5c2:	617b      	str	r3, [r7, #20]
}
 800c5c4:	bf00      	nop
 800c5c6:	bf00      	nop
 800c5c8:	e7fd      	b.n	800c5c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d06f      	beq.n	800c6b0 <pvPortMalloc+0x154>
 800c5d0:	4b45      	ldr	r3, [pc, #276]	@ (800c6e8 <pvPortMalloc+0x18c>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d86a      	bhi.n	800c6b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5da:	4b44      	ldr	r3, [pc, #272]	@ (800c6ec <pvPortMalloc+0x190>)
 800c5dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c5de:	4b43      	ldr	r3, [pc, #268]	@ (800c6ec <pvPortMalloc+0x190>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5e4:	e004      	b.n	800c5f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d903      	bls.n	800c602 <pvPortMalloc+0xa6>
 800c5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1f1      	bne.n	800c5e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c602:	4b37      	ldr	r3, [pc, #220]	@ (800c6e0 <pvPortMalloc+0x184>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c608:	429a      	cmp	r2, r3
 800c60a:	d051      	beq.n	800c6b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c60c:	6a3b      	ldr	r3, [r7, #32]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2208      	movs	r2, #8
 800c612:	4413      	add	r3, r2
 800c614:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	6a3b      	ldr	r3, [r7, #32]
 800c61c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c620:	685a      	ldr	r2, [r3, #4]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	1ad2      	subs	r2, r2, r3
 800c626:	2308      	movs	r3, #8
 800c628:	005b      	lsls	r3, r3, #1
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d920      	bls.n	800c670 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c62e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	4413      	add	r3, r2
 800c634:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c636:	69bb      	ldr	r3, [r7, #24]
 800c638:	f003 0307 	and.w	r3, r3, #7
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d00b      	beq.n	800c658 <pvPortMalloc+0xfc>
	__asm volatile
 800c640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c644:	f383 8811 	msr	BASEPRI, r3
 800c648:	f3bf 8f6f 	isb	sy
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	613b      	str	r3, [r7, #16]
}
 800c652:	bf00      	nop
 800c654:	bf00      	nop
 800c656:	e7fd      	b.n	800c654 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	1ad2      	subs	r2, r2, r3
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c66a:	69b8      	ldr	r0, [r7, #24]
 800c66c:	f000 f90a 	bl	800c884 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c670:	4b1d      	ldr	r3, [pc, #116]	@ (800c6e8 <pvPortMalloc+0x18c>)
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	4a1b      	ldr	r2, [pc, #108]	@ (800c6e8 <pvPortMalloc+0x18c>)
 800c67c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c67e:	4b1a      	ldr	r3, [pc, #104]	@ (800c6e8 <pvPortMalloc+0x18c>)
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	4b1b      	ldr	r3, [pc, #108]	@ (800c6f0 <pvPortMalloc+0x194>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	429a      	cmp	r2, r3
 800c688:	d203      	bcs.n	800c692 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c68a:	4b17      	ldr	r3, [pc, #92]	@ (800c6e8 <pvPortMalloc+0x18c>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a18      	ldr	r2, [pc, #96]	@ (800c6f0 <pvPortMalloc+0x194>)
 800c690:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c694:	685a      	ldr	r2, [r3, #4]
 800c696:	4b13      	ldr	r3, [pc, #76]	@ (800c6e4 <pvPortMalloc+0x188>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	431a      	orrs	r2, r3
 800c69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c6a6:	4b13      	ldr	r3, [pc, #76]	@ (800c6f4 <pvPortMalloc+0x198>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	4a11      	ldr	r2, [pc, #68]	@ (800c6f4 <pvPortMalloc+0x198>)
 800c6ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c6b0:	f7fe fcde 	bl	800b070 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6b4:	69fb      	ldr	r3, [r7, #28]
 800c6b6:	f003 0307 	and.w	r3, r3, #7
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00b      	beq.n	800c6d6 <pvPortMalloc+0x17a>
	__asm volatile
 800c6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	60fb      	str	r3, [r7, #12]
}
 800c6d0:	bf00      	nop
 800c6d2:	bf00      	nop
 800c6d4:	e7fd      	b.n	800c6d2 <pvPortMalloc+0x176>
	return pvReturn;
 800c6d6:	69fb      	ldr	r3, [r7, #28]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3728      	adds	r7, #40	@ 0x28
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	200028c0 	.word	0x200028c0
 800c6e4:	200028d4 	.word	0x200028d4
 800c6e8:	200028c4 	.word	0x200028c4
 800c6ec:	200028b8 	.word	0x200028b8
 800c6f0:	200028c8 	.word	0x200028c8
 800c6f4:	200028cc 	.word	0x200028cc

0800c6f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b086      	sub	sp, #24
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d04f      	beq.n	800c7aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c70a:	2308      	movs	r3, #8
 800c70c:	425b      	negs	r3, r3
 800c70e:	697a      	ldr	r2, [r7, #20]
 800c710:	4413      	add	r3, r2
 800c712:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	685a      	ldr	r2, [r3, #4]
 800c71c:	4b25      	ldr	r3, [pc, #148]	@ (800c7b4 <vPortFree+0xbc>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4013      	ands	r3, r2
 800c722:	2b00      	cmp	r3, #0
 800c724:	d10b      	bne.n	800c73e <vPortFree+0x46>
	__asm volatile
 800c726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c72a:	f383 8811 	msr	BASEPRI, r3
 800c72e:	f3bf 8f6f 	isb	sy
 800c732:	f3bf 8f4f 	dsb	sy
 800c736:	60fb      	str	r3, [r7, #12]
}
 800c738:	bf00      	nop
 800c73a:	bf00      	nop
 800c73c:	e7fd      	b.n	800c73a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00b      	beq.n	800c75e <vPortFree+0x66>
	__asm volatile
 800c746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	60bb      	str	r3, [r7, #8]
}
 800c758:	bf00      	nop
 800c75a:	bf00      	nop
 800c75c:	e7fd      	b.n	800c75a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	685a      	ldr	r2, [r3, #4]
 800c762:	4b14      	ldr	r3, [pc, #80]	@ (800c7b4 <vPortFree+0xbc>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4013      	ands	r3, r2
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d01e      	beq.n	800c7aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d11a      	bne.n	800c7aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	685a      	ldr	r2, [r3, #4]
 800c778:	4b0e      	ldr	r3, [pc, #56]	@ (800c7b4 <vPortFree+0xbc>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	43db      	mvns	r3, r3
 800c77e:	401a      	ands	r2, r3
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c784:	f7fe fc66 	bl	800b054 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	685a      	ldr	r2, [r3, #4]
 800c78c:	4b0a      	ldr	r3, [pc, #40]	@ (800c7b8 <vPortFree+0xc0>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4413      	add	r3, r2
 800c792:	4a09      	ldr	r2, [pc, #36]	@ (800c7b8 <vPortFree+0xc0>)
 800c794:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c796:	6938      	ldr	r0, [r7, #16]
 800c798:	f000 f874 	bl	800c884 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c79c:	4b07      	ldr	r3, [pc, #28]	@ (800c7bc <vPortFree+0xc4>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	4a06      	ldr	r2, [pc, #24]	@ (800c7bc <vPortFree+0xc4>)
 800c7a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c7a6:	f7fe fc63 	bl	800b070 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c7aa:	bf00      	nop
 800c7ac:	3718      	adds	r7, #24
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	200028d4 	.word	0x200028d4
 800c7b8:	200028c4 	.word	0x200028c4
 800c7bc:	200028d0 	.word	0x200028d0

0800c7c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c7c6:	f241 7370 	movw	r3, #6000	@ 0x1770
 800c7ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7cc:	4b27      	ldr	r3, [pc, #156]	@ (800c86c <prvHeapInit+0xac>)
 800c7ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f003 0307 	and.w	r3, r3, #7
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00c      	beq.n	800c7f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	3307      	adds	r3, #7
 800c7de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	f023 0307 	bic.w	r3, r3, #7
 800c7e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	1ad3      	subs	r3, r2, r3
 800c7ee:	4a1f      	ldr	r2, [pc, #124]	@ (800c86c <prvHeapInit+0xac>)
 800c7f0:	4413      	add	r3, r2
 800c7f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c870 <prvHeapInit+0xb0>)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c7fe:	4b1c      	ldr	r3, [pc, #112]	@ (800c870 <prvHeapInit+0xb0>)
 800c800:	2200      	movs	r2, #0
 800c802:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	68ba      	ldr	r2, [r7, #8]
 800c808:	4413      	add	r3, r2
 800c80a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c80c:	2208      	movs	r2, #8
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	1a9b      	subs	r3, r3, r2
 800c812:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f023 0307 	bic.w	r3, r3, #7
 800c81a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	4a15      	ldr	r2, [pc, #84]	@ (800c874 <prvHeapInit+0xb4>)
 800c820:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c822:	4b14      	ldr	r3, [pc, #80]	@ (800c874 <prvHeapInit+0xb4>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2200      	movs	r2, #0
 800c828:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c82a:	4b12      	ldr	r3, [pc, #72]	@ (800c874 <prvHeapInit+0xb4>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2200      	movs	r2, #0
 800c830:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	1ad2      	subs	r2, r2, r3
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c840:	4b0c      	ldr	r3, [pc, #48]	@ (800c874 <prvHeapInit+0xb4>)
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	4a0a      	ldr	r2, [pc, #40]	@ (800c878 <prvHeapInit+0xb8>)
 800c84e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	4a09      	ldr	r2, [pc, #36]	@ (800c87c <prvHeapInit+0xbc>)
 800c856:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c858:	4b09      	ldr	r3, [pc, #36]	@ (800c880 <prvHeapInit+0xc0>)
 800c85a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c85e:	601a      	str	r2, [r3, #0]
}
 800c860:	bf00      	nop
 800c862:	3714      	adds	r7, #20
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr
 800c86c:	20001148 	.word	0x20001148
 800c870:	200028b8 	.word	0x200028b8
 800c874:	200028c0 	.word	0x200028c0
 800c878:	200028c8 	.word	0x200028c8
 800c87c:	200028c4 	.word	0x200028c4
 800c880:	200028d4 	.word	0x200028d4

0800c884 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c88c:	4b28      	ldr	r3, [pc, #160]	@ (800c930 <prvInsertBlockIntoFreeList+0xac>)
 800c88e:	60fb      	str	r3, [r7, #12]
 800c890:	e002      	b.n	800c898 <prvInsertBlockIntoFreeList+0x14>
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	60fb      	str	r3, [r7, #12]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d8f7      	bhi.n	800c892 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	68ba      	ldr	r2, [r7, #8]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d108      	bne.n	800c8c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	685a      	ldr	r2, [r3, #4]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	441a      	add	r2, r3
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	68ba      	ldr	r2, [r7, #8]
 800c8d0:	441a      	add	r2, r3
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d118      	bne.n	800c90c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	4b15      	ldr	r3, [pc, #84]	@ (800c934 <prvInsertBlockIntoFreeList+0xb0>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d00d      	beq.n	800c902 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	685a      	ldr	r2, [r3, #4]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	441a      	add	r2, r3
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	601a      	str	r2, [r3, #0]
 800c900:	e008      	b.n	800c914 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c902:	4b0c      	ldr	r3, [pc, #48]	@ (800c934 <prvInsertBlockIntoFreeList+0xb0>)
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	601a      	str	r2, [r3, #0]
 800c90a:	e003      	b.n	800c914 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d002      	beq.n	800c922 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c922:	bf00      	nop
 800c924:	3714      	adds	r7, #20
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	200028b8 	.word	0x200028b8
 800c934:	200028c0 	.word	0x200028c0

0800c938 <_ZdlPvj>:
 800c938:	f000 b800 	b.w	800c93c <_ZdlPv>

0800c93c <_ZdlPv>:
 800c93c:	f000 b800 	b.w	800c940 <free>

0800c940 <free>:
 800c940:	4b02      	ldr	r3, [pc, #8]	@ (800c94c <free+0xc>)
 800c942:	4601      	mov	r1, r0
 800c944:	6818      	ldr	r0, [r3, #0]
 800c946:	f000 b8a1 	b.w	800ca8c <_free_r>
 800c94a:	bf00      	nop
 800c94c:	20000010 	.word	0x20000010

0800c950 <__malloc_lock>:
 800c950:	4801      	ldr	r0, [pc, #4]	@ (800c958 <__malloc_lock+0x8>)
 800c952:	f000 b88b 	b.w	800ca6c <__retarget_lock_acquire_recursive>
 800c956:	bf00      	nop
 800c958:	20002a14 	.word	0x20002a14

0800c95c <__malloc_unlock>:
 800c95c:	4801      	ldr	r0, [pc, #4]	@ (800c964 <__malloc_unlock+0x8>)
 800c95e:	f000 b886 	b.w	800ca6e <__retarget_lock_release_recursive>
 800c962:	bf00      	nop
 800c964:	20002a14 	.word	0x20002a14

0800c968 <memset>:
 800c968:	4402      	add	r2, r0
 800c96a:	4603      	mov	r3, r0
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d100      	bne.n	800c972 <memset+0xa>
 800c970:	4770      	bx	lr
 800c972:	f803 1b01 	strb.w	r1, [r3], #1
 800c976:	e7f9      	b.n	800c96c <memset+0x4>

0800c978 <_reclaim_reent>:
 800c978:	4b29      	ldr	r3, [pc, #164]	@ (800ca20 <_reclaim_reent+0xa8>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4283      	cmp	r3, r0
 800c97e:	b570      	push	{r4, r5, r6, lr}
 800c980:	4604      	mov	r4, r0
 800c982:	d04b      	beq.n	800ca1c <_reclaim_reent+0xa4>
 800c984:	69c3      	ldr	r3, [r0, #28]
 800c986:	b1ab      	cbz	r3, 800c9b4 <_reclaim_reent+0x3c>
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	b16b      	cbz	r3, 800c9a8 <_reclaim_reent+0x30>
 800c98c:	2500      	movs	r5, #0
 800c98e:	69e3      	ldr	r3, [r4, #28]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	5959      	ldr	r1, [r3, r5]
 800c994:	2900      	cmp	r1, #0
 800c996:	d13b      	bne.n	800ca10 <_reclaim_reent+0x98>
 800c998:	3504      	adds	r5, #4
 800c99a:	2d80      	cmp	r5, #128	@ 0x80
 800c99c:	d1f7      	bne.n	800c98e <_reclaim_reent+0x16>
 800c99e:	69e3      	ldr	r3, [r4, #28]
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	68d9      	ldr	r1, [r3, #12]
 800c9a4:	f000 f872 	bl	800ca8c <_free_r>
 800c9a8:	69e3      	ldr	r3, [r4, #28]
 800c9aa:	6819      	ldr	r1, [r3, #0]
 800c9ac:	b111      	cbz	r1, 800c9b4 <_reclaim_reent+0x3c>
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	f000 f86c 	bl	800ca8c <_free_r>
 800c9b4:	6961      	ldr	r1, [r4, #20]
 800c9b6:	b111      	cbz	r1, 800c9be <_reclaim_reent+0x46>
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	f000 f867 	bl	800ca8c <_free_r>
 800c9be:	69e1      	ldr	r1, [r4, #28]
 800c9c0:	b111      	cbz	r1, 800c9c8 <_reclaim_reent+0x50>
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	f000 f862 	bl	800ca8c <_free_r>
 800c9c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c9ca:	b111      	cbz	r1, 800c9d2 <_reclaim_reent+0x5a>
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	f000 f85d 	bl	800ca8c <_free_r>
 800c9d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9d4:	b111      	cbz	r1, 800c9dc <_reclaim_reent+0x64>
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f000 f858 	bl	800ca8c <_free_r>
 800c9dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c9de:	b111      	cbz	r1, 800c9e6 <_reclaim_reent+0x6e>
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f000 f853 	bl	800ca8c <_free_r>
 800c9e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c9e8:	b111      	cbz	r1, 800c9f0 <_reclaim_reent+0x78>
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	f000 f84e 	bl	800ca8c <_free_r>
 800c9f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c9f2:	b111      	cbz	r1, 800c9fa <_reclaim_reent+0x82>
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f000 f849 	bl	800ca8c <_free_r>
 800c9fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c9fc:	b111      	cbz	r1, 800ca04 <_reclaim_reent+0x8c>
 800c9fe:	4620      	mov	r0, r4
 800ca00:	f000 f844 	bl	800ca8c <_free_r>
 800ca04:	6a23      	ldr	r3, [r4, #32]
 800ca06:	b14b      	cbz	r3, 800ca1c <_reclaim_reent+0xa4>
 800ca08:	4620      	mov	r0, r4
 800ca0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ca0e:	4718      	bx	r3
 800ca10:	680e      	ldr	r6, [r1, #0]
 800ca12:	4620      	mov	r0, r4
 800ca14:	f000 f83a 	bl	800ca8c <_free_r>
 800ca18:	4631      	mov	r1, r6
 800ca1a:	e7bb      	b.n	800c994 <_reclaim_reent+0x1c>
 800ca1c:	bd70      	pop	{r4, r5, r6, pc}
 800ca1e:	bf00      	nop
 800ca20:	20000010 	.word	0x20000010

0800ca24 <__libc_init_array>:
 800ca24:	b570      	push	{r4, r5, r6, lr}
 800ca26:	4d0d      	ldr	r5, [pc, #52]	@ (800ca5c <__libc_init_array+0x38>)
 800ca28:	4c0d      	ldr	r4, [pc, #52]	@ (800ca60 <__libc_init_array+0x3c>)
 800ca2a:	1b64      	subs	r4, r4, r5
 800ca2c:	10a4      	asrs	r4, r4, #2
 800ca2e:	2600      	movs	r6, #0
 800ca30:	42a6      	cmp	r6, r4
 800ca32:	d109      	bne.n	800ca48 <__libc_init_array+0x24>
 800ca34:	4d0b      	ldr	r5, [pc, #44]	@ (800ca64 <__libc_init_array+0x40>)
 800ca36:	4c0c      	ldr	r4, [pc, #48]	@ (800ca68 <__libc_init_array+0x44>)
 800ca38:	f000 f872 	bl	800cb20 <_init>
 800ca3c:	1b64      	subs	r4, r4, r5
 800ca3e:	10a4      	asrs	r4, r4, #2
 800ca40:	2600      	movs	r6, #0
 800ca42:	42a6      	cmp	r6, r4
 800ca44:	d105      	bne.n	800ca52 <__libc_init_array+0x2e>
 800ca46:	bd70      	pop	{r4, r5, r6, pc}
 800ca48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca4c:	4798      	blx	r3
 800ca4e:	3601      	adds	r6, #1
 800ca50:	e7ee      	b.n	800ca30 <__libc_init_array+0xc>
 800ca52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca56:	4798      	blx	r3
 800ca58:	3601      	adds	r6, #1
 800ca5a:	e7f2      	b.n	800ca42 <__libc_init_array+0x1e>
 800ca5c:	0800d22c 	.word	0x0800d22c
 800ca60:	0800d22c 	.word	0x0800d22c
 800ca64:	0800d22c 	.word	0x0800d22c
 800ca68:	0800d234 	.word	0x0800d234

0800ca6c <__retarget_lock_acquire_recursive>:
 800ca6c:	4770      	bx	lr

0800ca6e <__retarget_lock_release_recursive>:
 800ca6e:	4770      	bx	lr

0800ca70 <memcpy>:
 800ca70:	440a      	add	r2, r1
 800ca72:	4291      	cmp	r1, r2
 800ca74:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca78:	d100      	bne.n	800ca7c <memcpy+0xc>
 800ca7a:	4770      	bx	lr
 800ca7c:	b510      	push	{r4, lr}
 800ca7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca86:	4291      	cmp	r1, r2
 800ca88:	d1f9      	bne.n	800ca7e <memcpy+0xe>
 800ca8a:	bd10      	pop	{r4, pc}

0800ca8c <_free_r>:
 800ca8c:	b538      	push	{r3, r4, r5, lr}
 800ca8e:	4605      	mov	r5, r0
 800ca90:	2900      	cmp	r1, #0
 800ca92:	d041      	beq.n	800cb18 <_free_r+0x8c>
 800ca94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca98:	1f0c      	subs	r4, r1, #4
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	bfb8      	it	lt
 800ca9e:	18e4      	addlt	r4, r4, r3
 800caa0:	f7ff ff56 	bl	800c950 <__malloc_lock>
 800caa4:	4a1d      	ldr	r2, [pc, #116]	@ (800cb1c <_free_r+0x90>)
 800caa6:	6813      	ldr	r3, [r2, #0]
 800caa8:	b933      	cbnz	r3, 800cab8 <_free_r+0x2c>
 800caaa:	6063      	str	r3, [r4, #4]
 800caac:	6014      	str	r4, [r2, #0]
 800caae:	4628      	mov	r0, r5
 800cab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cab4:	f7ff bf52 	b.w	800c95c <__malloc_unlock>
 800cab8:	42a3      	cmp	r3, r4
 800caba:	d908      	bls.n	800cace <_free_r+0x42>
 800cabc:	6820      	ldr	r0, [r4, #0]
 800cabe:	1821      	adds	r1, r4, r0
 800cac0:	428b      	cmp	r3, r1
 800cac2:	bf01      	itttt	eq
 800cac4:	6819      	ldreq	r1, [r3, #0]
 800cac6:	685b      	ldreq	r3, [r3, #4]
 800cac8:	1809      	addeq	r1, r1, r0
 800caca:	6021      	streq	r1, [r4, #0]
 800cacc:	e7ed      	b.n	800caaa <_free_r+0x1e>
 800cace:	461a      	mov	r2, r3
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	b10b      	cbz	r3, 800cad8 <_free_r+0x4c>
 800cad4:	42a3      	cmp	r3, r4
 800cad6:	d9fa      	bls.n	800cace <_free_r+0x42>
 800cad8:	6811      	ldr	r1, [r2, #0]
 800cada:	1850      	adds	r0, r2, r1
 800cadc:	42a0      	cmp	r0, r4
 800cade:	d10b      	bne.n	800caf8 <_free_r+0x6c>
 800cae0:	6820      	ldr	r0, [r4, #0]
 800cae2:	4401      	add	r1, r0
 800cae4:	1850      	adds	r0, r2, r1
 800cae6:	4283      	cmp	r3, r0
 800cae8:	6011      	str	r1, [r2, #0]
 800caea:	d1e0      	bne.n	800caae <_free_r+0x22>
 800caec:	6818      	ldr	r0, [r3, #0]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	6053      	str	r3, [r2, #4]
 800caf2:	4408      	add	r0, r1
 800caf4:	6010      	str	r0, [r2, #0]
 800caf6:	e7da      	b.n	800caae <_free_r+0x22>
 800caf8:	d902      	bls.n	800cb00 <_free_r+0x74>
 800cafa:	230c      	movs	r3, #12
 800cafc:	602b      	str	r3, [r5, #0]
 800cafe:	e7d6      	b.n	800caae <_free_r+0x22>
 800cb00:	6820      	ldr	r0, [r4, #0]
 800cb02:	1821      	adds	r1, r4, r0
 800cb04:	428b      	cmp	r3, r1
 800cb06:	bf04      	itt	eq
 800cb08:	6819      	ldreq	r1, [r3, #0]
 800cb0a:	685b      	ldreq	r3, [r3, #4]
 800cb0c:	6063      	str	r3, [r4, #4]
 800cb0e:	bf04      	itt	eq
 800cb10:	1809      	addeq	r1, r1, r0
 800cb12:	6021      	streq	r1, [r4, #0]
 800cb14:	6054      	str	r4, [r2, #4]
 800cb16:	e7ca      	b.n	800caae <_free_r+0x22>
 800cb18:	bd38      	pop	{r3, r4, r5, pc}
 800cb1a:	bf00      	nop
 800cb1c:	200028d8 	.word	0x200028d8

0800cb20 <_init>:
 800cb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb22:	bf00      	nop
 800cb24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb26:	bc08      	pop	{r3}
 800cb28:	469e      	mov	lr, r3
 800cb2a:	4770      	bx	lr

0800cb2c <_fini>:
 800cb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb2e:	bf00      	nop
 800cb30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb32:	bc08      	pop	{r3}
 800cb34:	469e      	mov	lr, r3
 800cb36:	4770      	bx	lr
