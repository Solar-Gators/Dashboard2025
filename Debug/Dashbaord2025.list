
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007760  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08007910  08007910  00008910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a3c  08007a3c  00009060  2**0
                  CONTENTS
  4 .ARM          00000000  08007a3c  08007a3c  00009060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a3c  08007a3c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a3c  08007a3c  00008a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a40  08007a40  00008a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007a44  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c84  20000060  08007aa4  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ce4  08007aa4  00009ce4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204dd  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000418e  00000000  00000000  0002956d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d18  00000000  00000000  0002d700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001693  00000000  00000000  0002f418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cf18  00000000  00000000  00030aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000203cb  00000000  00000000  0005d9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ea8a  00000000  00000000  0007dd8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019c818  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fb0  00000000  00000000  0019c85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001a480c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080078f8 	.word	0x080078f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	080078f8 	.word	0x080078f8

080001f0 <TCAL9538RSVR_INIT>:
    
    return pin_number; 
}

uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	60f8      	str	r0, [r7, #12]
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	4611      	mov	r1, r2
 80001fc:	461a      	mov	r2, r3
 80001fe:	460b      	mov	r3, r1
 8000200:	71fb      	strb	r3, [r7, #7]
 8000202:	4613      	mov	r3, r2
 8000204:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 8000206:	2300      	movs	r3, #0
 8000208:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;


    dev->i2cHandle = i2cHandle;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	68ba      	ldr	r2, [r7, #8]
 800020e:	601a      	str	r2, [r3, #0]
    dev->triggeredInterrupts = 0;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	2200      	movs	r2, #0
 8000214:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 0303 	and.w	r3, r3, #3
 800021c:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress << 1);
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	005b      	lsls	r3, r3, #1
 8000222:	b25b      	sxtb	r3, r3
 8000224:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000228:	b25b      	sxtb	r3, r3
 800022a:	b2da      	uxtb	r2, r3
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	711a      	strb	r2, [r3, #4]

    status = TCAL9538RSVR_SetDirection(dev, direction_bitMask);
 8000230:	79bb      	ldrb	r3, [r7, #6]
 8000232:	4619      	mov	r1, r3
 8000234:	68f8      	ldr	r0, [r7, #12]
 8000236:	f000 f823 	bl	8000280 <TCAL9538RSVR_SetDirection>
 800023a:	4603      	mov	r3, r0
 800023c:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800023e:	7dbb      	ldrb	r3, [r7, #22]
 8000240:	2b00      	cmp	r3, #0
 8000242:	bf14      	ite	ne
 8000244:	2301      	movne	r3, #1
 8000246:	2300      	moveq	r3, #0
 8000248:	b2db      	uxtb	r3, r3
 800024a:	461a      	mov	r2, r3
 800024c:	7dfb      	ldrb	r3, [r7, #23]
 800024e:	4413      	add	r3, r2
 8000250:	75fb      	strb	r3, [r7, #23]

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 8000252:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000256:	4619      	mov	r1, r3
 8000258:	68f8      	ldr	r0, [r7, #12]
 800025a:	f000 f822 	bl	80002a2 <TCAL9538RSVR_SetInterrupts>
 800025e:	4603      	mov	r3, r0
 8000260:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8000262:	7dbb      	ldrb	r3, [r7, #22]
 8000264:	2b00      	cmp	r3, #0
 8000266:	bf14      	ite	ne
 8000268:	2301      	movne	r3, #1
 800026a:	2300      	moveq	r3, #0
 800026c:	b2db      	uxtb	r3, r3
 800026e:	461a      	mov	r2, r3
 8000270:	7dfb      	ldrb	r3, [r7, #23]
 8000272:	4413      	add	r3, r2
 8000274:	75fb      	strb	r3, [r7, #23]

    return (errNum);
 8000276:	7dfb      	ldrb	r3, [r7, #23]
}
 8000278:	4618      	mov	r0, r3
 800027a:	3718      	adds	r7, #24
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t bitMask)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, &bitMask);
 800028c:	1cfb      	adds	r3, r7, #3
 800028e:	461a      	mov	r2, r3
 8000290:	2103      	movs	r1, #3
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f000 f864 	bl	8000360 <TCAL9538RSVR_WriteRegister>
 8000298:	4603      	mov	r3, r0
}
 800029a:	4618      	mov	r0, r3
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}

080002a2 <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b082      	sub	sp, #8
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	6078      	str	r0, [r7, #4]
 80002aa:	460b      	mov	r3, r1
 80002ac:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 80002ae:	1cfb      	adds	r3, r7, #3
 80002b0:	461a      	mov	r2, r3
 80002b2:	2145      	movs	r1, #69	@ 0x45
 80002b4:	6878      	ldr	r0, [r7, #4]
 80002b6:	f000 f853 	bl	8000360 <TCAL9538RSVR_WriteRegister>
 80002ba:	4603      	mov	r3, r0
}
 80002bc:	4618      	mov	r0, r3
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    // uint8_t intPinBitMask = 0;

    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &dev->triggeredInterrupts);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	3305      	adds	r3, #5
 80002d4:	461a      	mov	r2, r3
 80002d6:	2146      	movs	r1, #70	@ 0x46
 80002d8:	6878      	ldr	r0, [r7, #4]
 80002da:	f000 f824 	bl	8000326 <TCAL9538RSVR_ReadRegister>
 80002de:	4603      	mov	r3, r0
 80002e0:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 80002e2:	7bbb      	ldrb	r3, [r7, #14]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	bf14      	ite	ne
 80002e8:	2301      	movne	r3, #1
 80002ea:	2300      	moveq	r3, #0
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	461a      	mov	r2, r3
 80002f0:	7bfb      	ldrb	r3, [r7, #15]
 80002f2:	4413      	add	r3, r2
 80002f4:	73fb      	strb	r3, [r7, #15]

    status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_STATUS, &dev->triggeredInterrupts);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	3305      	adds	r3, #5
 80002fa:	461a      	mov	r2, r3
 80002fc:	2146      	movs	r1, #70	@ 0x46
 80002fe:	6878      	ldr	r0, [r7, #4]
 8000300:	f000 f82e 	bl	8000360 <TCAL9538RSVR_WriteRegister>
 8000304:	4603      	mov	r3, r0
 8000306:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 8000308:	7bbb      	ldrb	r3, [r7, #14]
 800030a:	2b00      	cmp	r3, #0
 800030c:	bf14      	ite	ne
 800030e:	2301      	movne	r3, #1
 8000310:	2300      	moveq	r3, #0
 8000312:	b2db      	uxtb	r3, r3
 8000314:	461a      	mov	r2, r3
 8000316:	7bfb      	ldrb	r3, [r7, #15]
 8000318:	4413      	add	r3, r2
 800031a:	73fb      	strb	r3, [r7, #15]

    return (errNum);
 800031c:	7bfb      	ldrb	r3, [r7, #15]
}
 800031e:	4618      	mov	r0, r3
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <TCAL9538RSVR_ReadRegister>:
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
}

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8000326:	b580      	push	{r7, lr}
 8000328:	b088      	sub	sp, #32
 800032a:	af04      	add	r7, sp, #16
 800032c:	60f8      	str	r0, [r7, #12]
 800032e:	460b      	mov	r3, r1
 8000330:	607a      	str	r2, [r7, #4]
 8000332:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	6818      	ldr	r0, [r3, #0]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	791b      	ldrb	r3, [r3, #4]
 800033c:	4619      	mov	r1, r3
 800033e:	7afb      	ldrb	r3, [r7, #11]
 8000340:	b29a      	uxth	r2, r3
 8000342:	f04f 33ff 	mov.w	r3, #4294967295
 8000346:	9302      	str	r3, [sp, #8]
 8000348:	2301      	movs	r3, #1
 800034a:	9301      	str	r3, [sp, #4]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	9300      	str	r3, [sp, #0]
 8000350:	2301      	movs	r3, #1
 8000352:	f002 f98b 	bl	800266c <HAL_I2C_Mem_Read>
 8000356:	4603      	mov	r3, r0
}
 8000358:	4618      	mov	r0, r3
 800035a:	3710      	adds	r7, #16
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af04      	add	r7, sp, #16
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	460b      	mov	r3, r1
 800036a:	607a      	str	r2, [r7, #4]
 800036c:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	6818      	ldr	r0, [r3, #0]
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	791b      	ldrb	r3, [r3, #4]
 8000376:	4619      	mov	r1, r3
 8000378:	7afb      	ldrb	r3, [r7, #11]
 800037a:	b29a      	uxth	r2, r3
 800037c:	f04f 33ff 	mov.w	r3, #4294967295
 8000380:	9302      	str	r3, [sp, #8]
 8000382:	2301      	movs	r3, #1
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	9300      	str	r3, [sp, #0]
 800038a:	2301      	movs	r3, #1
 800038c:	f002 f96e 	bl	800266c <HAL_I2C_Mem_Read>
 8000390:	4603      	mov	r3, r0
}
 8000392:	4618      	mov	r0, r3
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// GPIO Expander Interrupt Handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	80fb      	strh	r3, [r7, #6]
	TCAL9538RSVR_HandleInterrupt(&U5);
 80003a6:	4805      	ldr	r0, [pc, #20]	@ (80003bc <HAL_GPIO_EXTI_Callback+0x20>)
 80003a8:	f7ff ff8c 	bl	80002c4 <TCAL9538RSVR_HandleInterrupt>
	TCAL9538RSVR_HandleInterrupt(&U16);
 80003ac:	4804      	ldr	r0, [pc, #16]	@ (80003c0 <HAL_GPIO_EXTI_Callback+0x24>)
 80003ae:	f7ff ff89 	bl	80002c4 <TCAL9538RSVR_HandleInterrupt>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000198 	.word	0x20000198
 80003c0:	200001a0 	.word	0x200001a0

080003c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ca:	f000 fcea 	bl	8000da2 <HAL_Init>

  /* USER CODE BEGIN Init */
  TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0b00001111, 0b00001111); // inputs
 80003ce:	230f      	movs	r3, #15
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	230f      	movs	r3, #15
 80003d4:	2202      	movs	r2, #2
 80003d6:	4923      	ldr	r1, [pc, #140]	@ (8000464 <main+0xa0>)
 80003d8:	4823      	ldr	r0, [pc, #140]	@ (8000468 <main+0xa4>)
 80003da:	f7ff ff09 	bl	80001f0 <TCAL9538RSVR_INIT>
  TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b11000000, 0b11000000);
 80003de:	23c0      	movs	r3, #192	@ 0xc0
 80003e0:	9300      	str	r3, [sp, #0]
 80003e2:	23c0      	movs	r3, #192	@ 0xc0
 80003e4:	2201      	movs	r2, #1
 80003e6:	491f      	ldr	r1, [pc, #124]	@ (8000464 <main+0xa0>)
 80003e8:	4820      	ldr	r0, [pc, #128]	@ (800046c <main+0xa8>)
 80003ea:	f7ff ff01 	bl	80001f0 <TCAL9538RSVR_INIT>

  TCAL9538RSVR_INIT(&U7, &hi2c4, 0b00, 0b00000000, 0b00000000); // output
 80003ee:	2300      	movs	r3, #0
 80003f0:	9300      	str	r3, [sp, #0]
 80003f2:	2300      	movs	r3, #0
 80003f4:	2200      	movs	r2, #0
 80003f6:	491b      	ldr	r1, [pc, #108]	@ (8000464 <main+0xa0>)
 80003f8:	481d      	ldr	r0, [pc, #116]	@ (8000470 <main+0xac>)
 80003fa:	f7ff fef9 	bl	80001f0 <TCAL9538RSVR_INIT>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f851 	bl	80004a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f9b3 	bl	800076c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000406:	f000 f893 	bl	8000530 <MX_ADC1_Init>
  MX_I2C4_Init();
 800040a:	f000 f96f 	bl	80006ec <MX_I2C4_Init>
  MX_CAN1_Init();
 800040e:	f000 f905 	bl	800061c <MX_CAN1_Init>
  MX_CAN2_Init();
 8000412:	f000 f937 	bl	8000684 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000416:	f004 fbdb 	bl	8004bd0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
 800041a:	4a16      	ldr	r2, [pc, #88]	@ (8000474 <main+0xb0>)
 800041c:	2100      	movs	r1, #0
 800041e:	4816      	ldr	r0, [pc, #88]	@ (8000478 <main+0xb4>)
 8000420:	f004 fc20 	bl	8004c64 <osThreadNew>
 8000424:	4603      	mov	r3, r0
 8000426:	4a15      	ldr	r2, [pc, #84]	@ (800047c <main+0xb8>)
 8000428:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 800042a:	4a15      	ldr	r2, [pc, #84]	@ (8000480 <main+0xbc>)
 800042c:	2100      	movs	r1, #0
 800042e:	4815      	ldr	r0, [pc, #84]	@ (8000484 <main+0xc0>)
 8000430:	f004 fc18 	bl	8004c64 <osThreadNew>
 8000434:	4603      	mov	r3, r0
 8000436:	4a14      	ldr	r2, [pc, #80]	@ (8000488 <main+0xc4>)
 8000438:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 800043a:	4a14      	ldr	r2, [pc, #80]	@ (800048c <main+0xc8>)
 800043c:	2100      	movs	r1, #0
 800043e:	4814      	ldr	r0, [pc, #80]	@ (8000490 <main+0xcc>)
 8000440:	f004 fc10 	bl	8004c64 <osThreadNew>
 8000444:	4603      	mov	r3, r0
 8000446:	4a13      	ldr	r2, [pc, #76]	@ (8000494 <main+0xd0>)
 8000448:	6013      	str	r3, [r2, #0]

  /* creation of Outputs_Control */
  Outputs_ControlHandle = osThreadNew(StartTask04, NULL, &Outputs_Control_attributes);
 800044a:	4a13      	ldr	r2, [pc, #76]	@ (8000498 <main+0xd4>)
 800044c:	2100      	movs	r1, #0
 800044e:	4813      	ldr	r0, [pc, #76]	@ (800049c <main+0xd8>)
 8000450:	f004 fc08 	bl	8004c64 <osThreadNew>
 8000454:	4603      	mov	r3, r0
 8000456:	4a12      	ldr	r2, [pc, #72]	@ (80004a0 <main+0xdc>)
 8000458:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800045a:	f004 fbdd 	bl	8004c18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800045e:	bf00      	nop
 8000460:	e7fd      	b.n	800045e <main+0x9a>
 8000462:	bf00      	nop
 8000464:	20000134 	.word	0x20000134
 8000468:	20000198 	.word	0x20000198
 800046c:	200001a0 	.word	0x200001a0
 8000470:	200001a8 	.word	0x200001a8
 8000474:	08007964 	.word	0x08007964
 8000478:	08000835 	.word	0x08000835
 800047c:	20000188 	.word	0x20000188
 8000480:	08007988 	.word	0x08007988
 8000484:	08000855 	.word	0x08000855
 8000488:	2000018c 	.word	0x2000018c
 800048c:	080079ac 	.word	0x080079ac
 8000490:	08000865 	.word	0x08000865
 8000494:	20000190 	.word	0x20000190
 8000498:	080079d0 	.word	0x080079d0
 800049c:	08000875 	.word	0x08000875
 80004a0:	20000194 	.word	0x20000194

080004a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b096      	sub	sp, #88	@ 0x58
 80004a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004aa:	f107 0314 	add.w	r3, r7, #20
 80004ae:	2244      	movs	r2, #68	@ 0x44
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f007 f938 	bl	8007728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b8:	463b      	mov	r3, r7
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
 80004c2:	60da      	str	r2, [r3, #12]
 80004c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80004ca:	f002 fcfd 	bl	8002ec8 <HAL_PWREx_ControlVoltageScaling>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004d4:	f000 f9e8 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004d8:	2310      	movs	r3, #16
 80004da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004dc:	2301      	movs	r3, #1
 80004de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004e4:	2360      	movs	r3, #96	@ 0x60
 80004e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004e8:	2300      	movs	r3, #0
 80004ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	4618      	mov	r0, r3
 80004f2:	f002 fd3f 	bl	8002f74 <HAL_RCC_OscConfig>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80004fc:	f000 f9d4 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000500:	230f      	movs	r3, #15
 8000502:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000504:	2300      	movs	r3, #0
 8000506:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000508:	2300      	movs	r3, #0
 800050a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000514:	463b      	mov	r3, r7
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f003 f945 	bl	80037a8 <HAL_RCC_ClockConfig>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000524:	f000 f9c0 	bl	80008a8 <Error_Handler>
  }
}
 8000528:	bf00      	nop
 800052a:	3758      	adds	r7, #88	@ 0x58
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	@ 0x28
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000536:	f107 031c 	add.w	r3, r7, #28
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
 8000550:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000552:	4b2f      	ldr	r3, [pc, #188]	@ (8000610 <MX_ADC1_Init+0xe0>)
 8000554:	4a2f      	ldr	r2, [pc, #188]	@ (8000614 <MX_ADC1_Init+0xe4>)
 8000556:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000558:	4b2d      	ldr	r3, [pc, #180]	@ (8000610 <MX_ADC1_Init+0xe0>)
 800055a:	2200      	movs	r2, #0
 800055c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800055e:	4b2c      	ldr	r3, [pc, #176]	@ (8000610 <MX_ADC1_Init+0xe0>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000564:	4b2a      	ldr	r3, [pc, #168]	@ (8000610 <MX_ADC1_Init+0xe0>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800056a:	4b29      	ldr	r3, [pc, #164]	@ (8000610 <MX_ADC1_Init+0xe0>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000570:	4b27      	ldr	r3, [pc, #156]	@ (8000610 <MX_ADC1_Init+0xe0>)
 8000572:	2204      	movs	r2, #4
 8000574:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000576:	4b26      	ldr	r3, [pc, #152]	@ (8000610 <MX_ADC1_Init+0xe0>)
 8000578:	2200      	movs	r2, #0
 800057a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800057c:	4b24      	ldr	r3, [pc, #144]	@ (8000610 <MX_ADC1_Init+0xe0>)
 800057e:	2200      	movs	r2, #0
 8000580:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000582:	4b23      	ldr	r3, [pc, #140]	@ (8000610 <MX_ADC1_Init+0xe0>)
 8000584:	2201      	movs	r2, #1
 8000586:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000588:	4b21      	ldr	r3, [pc, #132]	@ (8000610 <MX_ADC1_Init+0xe0>)
 800058a:	2200      	movs	r2, #0
 800058c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000590:	4b1f      	ldr	r3, [pc, #124]	@ (8000610 <MX_ADC1_Init+0xe0>)
 8000592:	2200      	movs	r2, #0
 8000594:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000596:	4b1e      	ldr	r3, [pc, #120]	@ (8000610 <MX_ADC1_Init+0xe0>)
 8000598:	2200      	movs	r2, #0
 800059a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800059c:	4b1c      	ldr	r3, [pc, #112]	@ (8000610 <MX_ADC1_Init+0xe0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000610 <MX_ADC1_Init+0xe0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005aa:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <MX_ADC1_Init+0xe0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005b2:	4817      	ldr	r0, [pc, #92]	@ (8000610 <MX_ADC1_Init+0xe0>)
 80005b4:	f000 fdce 	bl	8001154 <HAL_ADC_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80005be:	f000 f973 	bl	80008a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	4619      	mov	r1, r3
 80005cc:	4810      	ldr	r0, [pc, #64]	@ (8000610 <MX_ADC1_Init+0xe0>)
 80005ce:	f001 fb47 	bl	8001c60 <HAL_ADCEx_MultiModeConfigChannel>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005d8:	f000 f966 	bl	80008a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <MX_ADC1_Init+0xe8>)
 80005de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005e0:	2306      	movs	r3, #6
 80005e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005e8:	237f      	movs	r3, #127	@ 0x7f
 80005ea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ec:	2304      	movs	r3, #4
 80005ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	4619      	mov	r1, r3
 80005f8:	4805      	ldr	r0, [pc, #20]	@ (8000610 <MX_ADC1_Init+0xe0>)
 80005fa:	f000 feff 	bl	80013fc <HAL_ADC_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000604:	f000 f950 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	3728      	adds	r7, #40	@ 0x28
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	2000007c 	.word	0x2000007c
 8000614:	50040000 	.word	0x50040000
 8000618:	04300002 	.word	0x04300002

0800061c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000620:	4b16      	ldr	r3, [pc, #88]	@ (800067c <MX_CAN1_Init+0x60>)
 8000622:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <MX_CAN1_Init+0x64>)
 8000624:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000626:	4b15      	ldr	r3, [pc, #84]	@ (800067c <MX_CAN1_Init+0x60>)
 8000628:	2210      	movs	r2, #16
 800062a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800062c:	4b13      	ldr	r3, [pc, #76]	@ (800067c <MX_CAN1_Init+0x60>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000632:	4b12      	ldr	r3, [pc, #72]	@ (800067c <MX_CAN1_Init+0x60>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000638:	4b10      	ldr	r3, [pc, #64]	@ (800067c <MX_CAN1_Init+0x60>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800063e:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <MX_CAN1_Init+0x60>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000644:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <MX_CAN1_Init+0x60>)
 8000646:	2200      	movs	r2, #0
 8000648:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800064a:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <MX_CAN1_Init+0x60>)
 800064c:	2200      	movs	r2, #0
 800064e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <MX_CAN1_Init+0x60>)
 8000652:	2200      	movs	r2, #0
 8000654:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <MX_CAN1_Init+0x60>)
 8000658:	2200      	movs	r2, #0
 800065a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	@ (800067c <MX_CAN1_Init+0x60>)
 800065e:	2200      	movs	r2, #0
 8000660:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <MX_CAN1_Init+0x60>)
 8000664:	2200      	movs	r2, #0
 8000666:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	@ (800067c <MX_CAN1_Init+0x60>)
 800066a:	f001 fba9 	bl	8001dc0 <HAL_CAN_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000674:	f000 f918 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200000e4 	.word	0x200000e4
 8000680:	40006400 	.word	0x40006400

08000684 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000688:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <MX_CAN2_Init+0x60>)
 800068a:	4a17      	ldr	r2, [pc, #92]	@ (80006e8 <MX_CAN2_Init+0x64>)
 800068c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800068e:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <MX_CAN2_Init+0x60>)
 8000690:	2210      	movs	r2, #16
 8000692:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000694:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <MX_CAN2_Init+0x60>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_CAN2_Init+0x60>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006a0:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <MX_CAN2_Init+0x60>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_CAN2_Init+0x60>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <MX_CAN2_Init+0x60>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_CAN2_Init+0x60>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <MX_CAN2_Init+0x60>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_CAN2_Init+0x60>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <MX_CAN2_Init+0x60>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_CAN2_Init+0x60>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_CAN2_Init+0x60>)
 80006d2:	f001 fb75 	bl	8001dc0 <HAL_CAN_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80006dc:	f000 f8e4 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	2000010c 	.word	0x2000010c
 80006e8:	40006800 	.word	0x40006800

080006ec <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <MX_I2C4_Init+0x74>)
 80006f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000764 <MX_I2C4_Init+0x78>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <MX_I2C4_Init+0x74>)
 80006f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000768 <MX_I2C4_Init+0x7c>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80006fc:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <MX_I2C4_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000702:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <MX_I2C4_Init+0x74>)
 8000704:	2201      	movs	r2, #1
 8000706:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <MX_I2C4_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_I2C4_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_I2C4_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_I2C4_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_I2C4_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000726:	480e      	ldr	r0, [pc, #56]	@ (8000760 <MX_I2C4_Init+0x74>)
 8000728:	f001 ff04 	bl	8002534 <HAL_I2C_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000732:	f000 f8b9 	bl	80008a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000736:	2100      	movs	r1, #0
 8000738:	4809      	ldr	r0, [pc, #36]	@ (8000760 <MX_I2C4_Init+0x74>)
 800073a:	f002 fb1f 	bl	8002d7c <HAL_I2CEx_ConfigAnalogFilter>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000744:	f000 f8b0 	bl	80008a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000748:	2100      	movs	r1, #0
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_I2C4_Init+0x74>)
 800074c:	f002 fb61 	bl	8002e12 <HAL_I2CEx_ConfigDigitalFilter>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000756:	f000 f8a7 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000134 	.word	0x20000134
 8000764:	40008400 	.word	0x40008400
 8000768:	00100d14 	.word	0x00100d14

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <MX_GPIO_Init+0xc0>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	4a29      	ldr	r2, [pc, #164]	@ (800082c <MX_GPIO_Init+0xc0>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078e:	4b27      	ldr	r3, [pc, #156]	@ (800082c <MX_GPIO_Init+0xc0>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b24      	ldr	r3, [pc, #144]	@ (800082c <MX_GPIO_Init+0xc0>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	4a23      	ldr	r2, [pc, #140]	@ (800082c <MX_GPIO_Init+0xc0>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a6:	4b21      	ldr	r3, [pc, #132]	@ (800082c <MX_GPIO_Init+0xc0>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <MX_GPIO_Init+0xc0>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	4a1d      	ldr	r2, [pc, #116]	@ (800082c <MX_GPIO_Init+0xc0>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007be:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <MX_GPIO_Init+0xc0>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OK_LED_GPIO_Port, OK_LED_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d4:	f001 fe64 	bl	80024a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007d8:	2304      	movs	r3, #4
 80007da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	4619      	mov	r1, r3
 80007ec:	4810      	ldr	r0, [pc, #64]	@ (8000830 <MX_GPIO_Init+0xc4>)
 80007ee:	f001 fcc5 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pin : OK_LED_Pin */
  GPIO_InitStruct.Pin = OK_LED_Pin;
 80007f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OK_LED_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4619      	mov	r1, r3
 800080a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080e:	f001 fcb5 	bl	800217c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2105      	movs	r1, #5
 8000816:	2008      	movs	r0, #8
 8000818:	f001 fc86 	bl	8002128 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800081c:	2008      	movs	r0, #8
 800081e:	f001 fc9f 	bl	8002160 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000822:	bf00      	nop
 8000824:	3720      	adds	r7, #32
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000
 8000830:	48000800 	.word	0x48000800

08000834 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 800083c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000840:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000844:	f001 fe44 	bl	80024d0 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000848:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800084c:	f004 fa9c 	bl	8004d88 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000850:	bf00      	nop
 8000852:	e7f3      	b.n	800083c <StartTask01+0x8>

08000854 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	//Code for reading ADC values


	//code sending data over CAN

    osDelay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f004 fa93 	bl	8004d88 <osDelay>
 8000862:	e7fb      	b.n	800085c <StartTask02+0x8>

08000864 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f004 fa8b 	bl	8004d88 <osDelay>
 8000872:	e7fb      	b.n	800086c <StartTask03+0x8>

08000874 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f004 fa83 	bl	8004d88 <osDelay>
 8000882:	e7fb      	b.n	800087c <StartTask04+0x8>

08000884 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a04      	ldr	r2, [pc, #16]	@ (80008a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d101      	bne.n	800089a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000896:	f000 fa9d 	bl	8000dd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40000400 	.word	0x40000400

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <Error_Handler+0x8>

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <HAL_MspInit+0x4c>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008be:	4a10      	ldr	r2, [pc, #64]	@ (8000900 <HAL_MspInit+0x4c>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <HAL_MspInit+0x4c>)
 80008c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <HAL_MspInit+0x4c>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000900 <HAL_MspInit+0x4c>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80008de:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <HAL_MspInit+0x4c>)
 80008e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	210f      	movs	r1, #15
 80008ee:	f06f 0001 	mvn.w	r0, #1
 80008f2:	f001 fc19 	bl	8002128 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b0ac      	sub	sp, #176	@ 0xb0
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	228c      	movs	r2, #140	@ 0x8c
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f006 feff 	bl	8007728 <memset>
  if(hadc->Instance==ADC1)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a27      	ldr	r2, [pc, #156]	@ (80009cc <HAL_ADC_MspInit+0xc8>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d146      	bne.n	80009c2 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000934:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000938:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800093a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800093e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000942:	2301      	movs	r3, #1
 8000944:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000946:	2301      	movs	r3, #1
 8000948:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800094a:	2310      	movs	r3, #16
 800094c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000952:	2302      	movs	r3, #2
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000956:	2302      	movs	r3, #2
 8000958:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800095a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800095e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4618      	mov	r0, r3
 8000966:	f003 f95f 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000970:	f7ff ff9a 	bl	80008a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000974:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <HAL_ADC_MspInit+0xcc>)
 8000976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000978:	4a15      	ldr	r2, [pc, #84]	@ (80009d0 <HAL_ADC_MspInit+0xcc>)
 800097a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800097e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000980:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <HAL_ADC_MspInit+0xcc>)
 8000982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000984:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098c:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <HAL_ADC_MspInit+0xcc>)
 800098e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000990:	4a0f      	ldr	r2, [pc, #60]	@ (80009d0 <HAL_ADC_MspInit+0xcc>)
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000998:	4b0d      	ldr	r3, [pc, #52]	@ (80009d0 <HAL_ADC_MspInit+0xcc>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099c:	f003 0304 	and.w	r3, r3, #4
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009a4:	2301      	movs	r3, #1
 80009a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009aa:	2303      	movs	r3, #3
 80009ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <HAL_ADC_MspInit+0xd0>)
 80009be:	f001 fbdd 	bl	800217c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009c2:	bf00      	nop
 80009c4:	37b0      	adds	r7, #176	@ 0xb0
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	50040000 	.word	0x50040000
 80009d0:	40021000 	.word	0x40021000
 80009d4:	48000800 	.word	0x48000800

080009d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	@ 0x30
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a45      	ldr	r2, [pc, #276]	@ (8000b0c <HAL_CAN_MspInit+0x134>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d132      	bne.n	8000a60 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80009fa:	4b45      	ldr	r3, [pc, #276]	@ (8000b10 <HAL_CAN_MspInit+0x138>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	3301      	adds	r3, #1
 8000a00:	4a43      	ldr	r2, [pc, #268]	@ (8000b10 <HAL_CAN_MspInit+0x138>)
 8000a02:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a04:	4b42      	ldr	r3, [pc, #264]	@ (8000b10 <HAL_CAN_MspInit+0x138>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d10b      	bne.n	8000a24 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a0c:	4b41      	ldr	r3, [pc, #260]	@ (8000b14 <HAL_CAN_MspInit+0x13c>)
 8000a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a10:	4a40      	ldr	r2, [pc, #256]	@ (8000b14 <HAL_CAN_MspInit+0x13c>)
 8000a12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a16:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a18:	4b3e      	ldr	r3, [pc, #248]	@ (8000b14 <HAL_CAN_MspInit+0x13c>)
 8000a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a20:	61bb      	str	r3, [r7, #24]
 8000a22:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	4b3b      	ldr	r3, [pc, #236]	@ (8000b14 <HAL_CAN_MspInit+0x13c>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a28:	4a3a      	ldr	r2, [pc, #232]	@ (8000b14 <HAL_CAN_MspInit+0x13c>)
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a30:	4b38      	ldr	r3, [pc, #224]	@ (8000b14 <HAL_CAN_MspInit+0x13c>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a3c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a4e:	2309      	movs	r3, #9
 8000a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	482f      	ldr	r0, [pc, #188]	@ (8000b18 <HAL_CAN_MspInit+0x140>)
 8000a5a:	f001 fb8f 	bl	800217c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000a5e:	e051      	b.n	8000b04 <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a2d      	ldr	r2, [pc, #180]	@ (8000b1c <HAL_CAN_MspInit+0x144>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d14c      	bne.n	8000b04 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b14 <HAL_CAN_MspInit+0x13c>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6e:	4a29      	ldr	r2, [pc, #164]	@ (8000b14 <HAL_CAN_MspInit+0x13c>)
 8000a70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a76:	4b27      	ldr	r3, [pc, #156]	@ (8000b14 <HAL_CAN_MspInit+0x13c>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a82:	4b23      	ldr	r3, [pc, #140]	@ (8000b10 <HAL_CAN_MspInit+0x138>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	4a21      	ldr	r2, [pc, #132]	@ (8000b10 <HAL_CAN_MspInit+0x138>)
 8000a8a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a8c:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <HAL_CAN_MspInit+0x138>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d10b      	bne.n	8000aac <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a94:	4b1f      	ldr	r3, [pc, #124]	@ (8000b14 <HAL_CAN_MspInit+0x13c>)
 8000a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a98:	4a1e      	ldr	r2, [pc, #120]	@ (8000b14 <HAL_CAN_MspInit+0x13c>)
 8000a9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <HAL_CAN_MspInit+0x13c>)
 8000aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aac:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <HAL_CAN_MspInit+0x13c>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab0:	4a18      	ldr	r2, [pc, #96]	@ (8000b14 <HAL_CAN_MspInit+0x13c>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab8:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <HAL_CAN_MspInit+0x13c>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ac4:	2320      	movs	r3, #32
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	480e      	ldr	r0, [pc, #56]	@ (8000b18 <HAL_CAN_MspInit+0x140>)
 8000ae0:	f001 fb4c 	bl	800217c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ae4:	2340      	movs	r3, #64	@ 0x40
 8000ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8000af4:	2308      	movs	r3, #8
 8000af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4806      	ldr	r0, [pc, #24]	@ (8000b18 <HAL_CAN_MspInit+0x140>)
 8000b00:	f001 fb3c 	bl	800217c <HAL_GPIO_Init>
}
 8000b04:	bf00      	nop
 8000b06:	3730      	adds	r7, #48	@ 0x30
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40006400 	.word	0x40006400
 8000b10:	200001b0 	.word	0x200001b0
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48000400 	.word	0x48000400
 8000b1c:	40006800 	.word	0x40006800

08000b20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0ac      	sub	sp, #176	@ 0xb0
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	228c      	movs	r2, #140	@ 0x8c
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f006 fdf1 	bl	8007728 <memset>
  if(hi2c->Instance==I2C4)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a22      	ldr	r2, [pc, #136]	@ (8000bd4 <HAL_I2C_MspInit+0xb4>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d13c      	bne.n	8000bca <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000b50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000b54:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f003 f862 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b6a:	f7ff fe9d 	bl	80008a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd8 <HAL_I2C_MspInit+0xb8>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b72:	4a19      	ldr	r2, [pc, #100]	@ (8000bd8 <HAL_I2C_MspInit+0xb8>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7a:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <HAL_I2C_MspInit+0xb8>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b86:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8e:	2312      	movs	r3, #18
 8000b90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000baa:	4619      	mov	r1, r3
 8000bac:	480b      	ldr	r0, [pc, #44]	@ (8000bdc <HAL_I2C_MspInit+0xbc>)
 8000bae:	f001 fae5 	bl	800217c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000bb2:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <HAL_I2C_MspInit+0xb8>)
 8000bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bb6:	4a08      	ldr	r2, [pc, #32]	@ (8000bd8 <HAL_I2C_MspInit+0xb8>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000bbe:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_I2C_MspInit+0xb8>)
 8000bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8000bca:	bf00      	nop
 8000bcc:	37b0      	adds	r7, #176	@ 0xb0
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40008400 	.word	0x40008400
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	48000400 	.word	0x48000400

08000be0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08e      	sub	sp, #56	@ 0x38
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000bee:	4b34      	ldr	r3, [pc, #208]	@ (8000cc0 <HAL_InitTick+0xe0>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf2:	4a33      	ldr	r2, [pc, #204]	@ (8000cc0 <HAL_InitTick+0xe0>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bfa:	4b31      	ldr	r3, [pc, #196]	@ (8000cc0 <HAL_InitTick+0xe0>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c06:	f107 0210 	add.w	r2, r7, #16
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f002 ff77 	bl	8003b04 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c16:	6a3b      	ldr	r3, [r7, #32]
 8000c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d103      	bne.n	8000c28 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c20:	f002 ff5a 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8000c24:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c26:	e004      	b.n	8000c32 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c28:	f002 ff56 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c34:	4a23      	ldr	r2, [pc, #140]	@ (8000cc4 <HAL_InitTick+0xe4>)
 8000c36:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3a:	0c9b      	lsrs	r3, r3, #18
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000c40:	4b21      	ldr	r3, [pc, #132]	@ (8000cc8 <HAL_InitTick+0xe8>)
 8000c42:	4a22      	ldr	r2, [pc, #136]	@ (8000ccc <HAL_InitTick+0xec>)
 8000c44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000c46:	4b20      	ldr	r3, [pc, #128]	@ (8000cc8 <HAL_InitTick+0xe8>)
 8000c48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c4c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000cc8 <HAL_InitTick+0xe8>)
 8000c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c52:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000c54:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc8 <HAL_InitTick+0xe8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc8 <HAL_InitTick+0xe8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c60:	4b19      	ldr	r3, [pc, #100]	@ (8000cc8 <HAL_InitTick+0xe8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000c66:	4818      	ldr	r0, [pc, #96]	@ (8000cc8 <HAL_InitTick+0xe8>)
 8000c68:	f003 fca8 	bl	80045bc <HAL_TIM_Base_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c72:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d11b      	bne.n	8000cb2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000c7a:	4813      	ldr	r0, [pc, #76]	@ (8000cc8 <HAL_InitTick+0xe8>)
 8000c7c:	f003 fd00 	bl	8004680 <HAL_TIM_Base_Start_IT>
 8000c80:	4603      	mov	r3, r0
 8000c82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d111      	bne.n	8000cb2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c8e:	201d      	movs	r0, #29
 8000c90:	f001 fa66 	bl	8002160 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b0f      	cmp	r3, #15
 8000c98:	d808      	bhi.n	8000cac <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	201d      	movs	r0, #29
 8000ca0:	f001 fa42 	bl	8002128 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <HAL_InitTick+0xf0>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e002      	b.n	8000cb2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3738      	adds	r7, #56	@ 0x38
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	431bde83 	.word	0x431bde83
 8000cc8:	200001b4 	.word	0x200001b4
 8000ccc:	40000400 	.word	0x40000400
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <NMI_Handler+0x4>

08000cdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000d0e:	2004      	movs	r0, #4
 8000d10:	f001 fbf8 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d1c:	4802      	ldr	r0, [pc, #8]	@ (8000d28 <TIM3_IRQHandler+0x10>)
 8000d1e:	f003 fd1f 	bl	8004760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200001b4 	.word	0x200001b4

08000d2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <SystemInit+0x20>)
 8000d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d36:	4a05      	ldr	r2, [pc, #20]	@ (8000d4c <SystemInit+0x20>)
 8000d38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d54:	f7ff ffea 	bl	8000d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d58:	480c      	ldr	r0, [pc, #48]	@ (8000d8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5a:	490d      	ldr	r1, [pc, #52]	@ (8000d90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d94 <LoopForever+0xe>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d70:	4c0a      	ldr	r4, [pc, #40]	@ (8000d9c <LoopForever+0x16>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d7e:	f006 fd31 	bl	80077e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d82:	f7ff fb1f 	bl	80003c4 <main>

08000d86 <LoopForever>:

LoopForever:
    b LoopForever
 8000d86:	e7fe      	b.n	8000d86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d88:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d90:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d94:	08007a44 	.word	0x08007a44
  ldr r2, =_sbss
 8000d98:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d9c:	20001ce4 	.word	0x20001ce4

08000da0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000da0:	e7fe      	b.n	8000da0 <ADC1_2_IRQHandler>

08000da2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f001 f9b0 	bl	8002112 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db2:	200f      	movs	r0, #15
 8000db4:	f7ff ff14 	bl	8000be0 <HAL_InitTick>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	71fb      	strb	r3, [r7, #7]
 8000dc2:	e001      	b.n	8000dc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dc4:	f7ff fd76 	bl	80008b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	@ (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000200 	.word	0x20000200

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	@ (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000200 	.word	0x20000200

08000e14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	609a      	str	r2, [r3, #8]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	3360      	adds	r3, #96	@ 0x60
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <LL_ADC_SetOffset+0x44>)
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000eb4:	bf00      	nop
 8000eb6:	371c      	adds	r7, #28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	03fff000 	.word	0x03fff000

08000ec4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3360      	adds	r3, #96	@ 0x60
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3360      	adds	r3, #96	@ 0x60
 8000f00:	461a      	mov	r2, r3
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	431a      	orrs	r2, r3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f1a:	bf00      	nop
 8000f1c:	371c      	adds	r7, #28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	615a      	str	r2, [r3, #20]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3330      	adds	r3, #48	@ 0x30
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	f003 030c 	and.w	r3, r3, #12
 8000f68:	4413      	add	r3, r2
 8000f6a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	f003 031f 	and.w	r3, r3, #31
 8000f76:	211f      	movs	r1, #31
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	401a      	ands	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	0e9b      	lsrs	r3, r3, #26
 8000f84:	f003 011f 	and.w	r1, r3, #31
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	f003 031f 	and.w	r3, r3, #31
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	431a      	orrs	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f98:	bf00      	nop
 8000f9a:	371c      	adds	r7, #28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3314      	adds	r3, #20
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	0e5b      	lsrs	r3, r3, #25
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	4413      	add	r3, r2
 8000fc2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	0d1b      	lsrs	r3, r3, #20
 8000fcc:	f003 031f 	and.w	r3, r3, #31
 8000fd0:	2107      	movs	r1, #7
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	401a      	ands	r2, r3
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	0d1b      	lsrs	r3, r3, #20
 8000fde:	f003 031f 	and.w	r3, r3, #31
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fee:	bf00      	nop
 8000ff0:	371c      	adds	r7, #28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001014:	43db      	mvns	r3, r3
 8001016:	401a      	ands	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0318 	and.w	r3, r3, #24
 800101e:	4908      	ldr	r1, [pc, #32]	@ (8001040 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001020:	40d9      	lsrs	r1, r3
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	400b      	ands	r3, r1
 8001026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800102a:	431a      	orrs	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	0007ffff 	.word	0x0007ffff

08001044 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001054:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	6093      	str	r3, [r2, #8]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001078:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800107c:	d101      	bne.n	8001082 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80010a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80010cc:	d101      	bne.n	80010d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <LL_ADC_IsEnabled+0x18>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <LL_ADC_IsEnabled+0x1a>
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	2b04      	cmp	r3, #4
 8001118:	d101      	bne.n	800111e <LL_ADC_REG_IsConversionOngoing+0x18>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	2b08      	cmp	r3, #8
 800113e:	d101      	bne.n	8001144 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b089      	sub	sp, #36	@ 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e133      	b.n	80013d6 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001178:	2b00      	cmp	r3, #0
 800117a:	d109      	bne.n	8001190 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff fbc1 	bl	8000904 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff67 	bl	8001068 <LL_ADC_IsDeepPowerDownEnabled>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d004      	beq.n	80011aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff4d 	bl	8001044 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff82 	bl	80010b8 <LL_ADC_IsInternalRegulatorEnabled>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d115      	bne.n	80011e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff66 	bl	8001090 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011c4:	4b86      	ldr	r3, [pc, #536]	@ (80013e0 <HAL_ADC_Init+0x28c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	099b      	lsrs	r3, r3, #6
 80011ca:	4a86      	ldr	r2, [pc, #536]	@ (80013e4 <HAL_ADC_Init+0x290>)
 80011cc:	fba2 2303 	umull	r2, r3, r2, r3
 80011d0:	099b      	lsrs	r3, r3, #6
 80011d2:	3301      	adds	r3, #1
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011d8:	e002      	b.n	80011e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3b01      	subs	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f9      	bne.n	80011da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff64 	bl	80010b8 <LL_ADC_IsInternalRegulatorEnabled>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10d      	bne.n	8001212 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fa:	f043 0210 	orr.w	r2, r3, #16
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001206:	f043 0201 	orr.w	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff75 	bl	8001106 <LL_ADC_REG_IsConversionOngoing>
 800121c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	2b00      	cmp	r3, #0
 8001228:	f040 80cc 	bne.w	80013c4 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 80c8 	bne.w	80013c4 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001238:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800123c:	f043 0202 	orr.w	r2, r3, #2
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff49 	bl	80010e0 <LL_ADC_IsEnabled>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d115      	bne.n	8001280 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001254:	4864      	ldr	r0, [pc, #400]	@ (80013e8 <HAL_ADC_Init+0x294>)
 8001256:	f7ff ff43 	bl	80010e0 <LL_ADC_IsEnabled>
 800125a:	4604      	mov	r4, r0
 800125c:	4863      	ldr	r0, [pc, #396]	@ (80013ec <HAL_ADC_Init+0x298>)
 800125e:	f7ff ff3f 	bl	80010e0 <LL_ADC_IsEnabled>
 8001262:	4603      	mov	r3, r0
 8001264:	431c      	orrs	r4, r3
 8001266:	4862      	ldr	r0, [pc, #392]	@ (80013f0 <HAL_ADC_Init+0x29c>)
 8001268:	f7ff ff3a 	bl	80010e0 <LL_ADC_IsEnabled>
 800126c:	4603      	mov	r3, r0
 800126e:	4323      	orrs	r3, r4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d105      	bne.n	8001280 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	4619      	mov	r1, r3
 800127a:	485e      	ldr	r0, [pc, #376]	@ (80013f4 <HAL_ADC_Init+0x2a0>)
 800127c:	f7ff fdca 	bl	8000e14 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	7e5b      	ldrb	r3, [r3, #25]
 8001284:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800128a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001290:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001296:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d106      	bne.n	80012bc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b2:	3b01      	subs	r3, #1
 80012b4:	045b      	lsls	r3, r3, #17
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d009      	beq.n	80012d8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	4b46      	ldr	r3, [pc, #280]	@ (80013f8 <HAL_ADC_Init+0x2a4>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	6812      	ldr	r2, [r2, #0]
 80012e6:	69b9      	ldr	r1, [r7, #24]
 80012e8:	430b      	orrs	r3, r1
 80012ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff1b 	bl	800112c <LL_ADC_INJ_IsConversionOngoing>
 80012f6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d140      	bne.n	8001380 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d13d      	bne.n	8001380 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	7e1b      	ldrb	r3, [r3, #24]
 800130c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800130e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001316:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001326:	f023 0306 	bic.w	r3, r3, #6
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	69b9      	ldr	r1, [r7, #24]
 8001330:	430b      	orrs	r3, r1
 8001332:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800133a:	2b01      	cmp	r3, #1
 800133c:	d118      	bne.n	8001370 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001348:	f023 0304 	bic.w	r3, r3, #4
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001354:	4311      	orrs	r1, r2
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800135a:	4311      	orrs	r1, r2
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001360:	430a      	orrs	r2, r1
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f042 0201 	orr.w	r2, r2, #1
 800136c:	611a      	str	r2, [r3, #16]
 800136e:	e007      	b.n	8001380 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	691a      	ldr	r2, [r3, #16]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0201 	bic.w	r2, r2, #1
 800137e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d10c      	bne.n	80013a2 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f023 010f 	bic.w	r1, r3, #15
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	1e5a      	subs	r2, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	631a      	str	r2, [r3, #48]	@ 0x30
 80013a0:	e007      	b.n	80013b2 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 020f 	bic.w	r2, r2, #15
 80013b0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b6:	f023 0303 	bic.w	r3, r3, #3
 80013ba:	f043 0201 	orr.w	r2, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80013c2:	e007      	b.n	80013d4 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c8:	f043 0210 	orr.w	r2, r3, #16
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	@ 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd90      	pop	{r4, r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000000 	.word	0x20000000
 80013e4:	053e2d63 	.word	0x053e2d63
 80013e8:	50040000 	.word	0x50040000
 80013ec:	50040100 	.word	0x50040100
 80013f0:	50040200 	.word	0x50040200
 80013f4:	50040300 	.word	0x50040300
 80013f8:	fff0c007 	.word	0xfff0c007

080013fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0b6      	sub	sp, #216	@ 0xd8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_ADC_ConfigChannel+0x22>
 800141a:	2302      	movs	r3, #2
 800141c:	e3e3      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x7ea>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fe6b 	bl	8001106 <LL_ADC_REG_IsConversionOngoing>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	f040 83c4 	bne.w	8001bc0 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b05      	cmp	r3, #5
 8001446:	d824      	bhi.n	8001492 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	3b02      	subs	r3, #2
 800144e:	2b03      	cmp	r3, #3
 8001450:	d81b      	bhi.n	800148a <HAL_ADC_ConfigChannel+0x8e>
 8001452:	a201      	add	r2, pc, #4	@ (adr r2, 8001458 <HAL_ADC_ConfigChannel+0x5c>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	08001469 	.word	0x08001469
 800145c:	08001471 	.word	0x08001471
 8001460:	08001479 	.word	0x08001479
 8001464:	08001481 	.word	0x08001481
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001468:	230c      	movs	r3, #12
 800146a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800146e:	e010      	b.n	8001492 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001470:	2312      	movs	r3, #18
 8001472:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001476:	e00c      	b.n	8001492 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001478:	2318      	movs	r3, #24
 800147a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800147e:	e008      	b.n	8001492 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001480:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001484:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001488:	e003      	b.n	8001492 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800148a:	2306      	movs	r3, #6
 800148c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001490:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6818      	ldr	r0, [r3, #0]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80014a0:	f7ff fd54 	bl	8000f4c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fe2c 	bl	8001106 <LL_ADC_REG_IsConversionOngoing>
 80014ae:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fe38 	bl	800112c <LL_ADC_INJ_IsConversionOngoing>
 80014bc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f040 81bf 	bne.w	8001848 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f040 81ba 	bne.w	8001848 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80014dc:	d10f      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2200      	movs	r2, #0
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fd5b 	bl	8000fa4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fd15 	bl	8000f26 <LL_ADC_SetSamplingTimeCommonConfig>
 80014fc:	e00e      	b.n	800151c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	6819      	ldr	r1, [r3, #0]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	461a      	mov	r2, r3
 800150c:	f7ff fd4a 	bl	8000fa4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fd05 	bl	8000f26 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	695a      	ldr	r2, [r3, #20]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	08db      	lsrs	r3, r3, #3
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	2b04      	cmp	r3, #4
 800153c:	d00a      	beq.n	8001554 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	6919      	ldr	r1, [r3, #16]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800154e:	f7ff fc95 	bl	8000e7c <LL_ADC_SetOffset>
 8001552:	e179      	b.n	8001848 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fcb2 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10a      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x184>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fca7 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	0e9b      	lsrs	r3, r3, #26
 800157a:	f003 021f 	and.w	r2, r3, #31
 800157e:	e01e      	b.n	80015be <HAL_ADC_ConfigChannel+0x1c2>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fc9c 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800159e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80015a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80015ae:	2320      	movs	r3, #32
 80015b0:	e004      	b.n	80015bc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80015b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80015b6:	fab3 f383 	clz	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d105      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x1da>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	0e9b      	lsrs	r3, r3, #26
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	e018      	b.n	8001608 <HAL_ADC_ConfigChannel+0x20c>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015e2:	fa93 f3a3 	rbit	r3, r3
 80015e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80015ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80015f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80015fa:	2320      	movs	r3, #32
 80015fc:	e004      	b.n	8001608 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80015fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001602:	fab3 f383 	clz	r3, r3
 8001606:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001608:	429a      	cmp	r2, r3
 800160a:	d106      	bne.n	800161a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2200      	movs	r2, #0
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fc6b 	bl	8000ef0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2101      	movs	r1, #1
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fc4f 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10a      	bne.n	8001646 <HAL_ADC_ConfigChannel+0x24a>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2101      	movs	r1, #1
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fc44 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	0e9b      	lsrs	r3, r3, #26
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	e01e      	b.n	8001684 <HAL_ADC_ConfigChannel+0x288>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2101      	movs	r1, #1
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fc39 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001658:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800165c:	fa93 f3a3 	rbit	r3, r3
 8001660:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001664:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001668:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800166c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001674:	2320      	movs	r3, #32
 8001676:	e004      	b.n	8001682 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001678:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800167c:	fab3 f383 	clz	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800168c:	2b00      	cmp	r3, #0
 800168e:	d105      	bne.n	800169c <HAL_ADC_ConfigChannel+0x2a0>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	0e9b      	lsrs	r3, r3, #26
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	e018      	b.n	80016ce <HAL_ADC_ConfigChannel+0x2d2>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016a8:	fa93 f3a3 	rbit	r3, r3
 80016ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80016b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80016b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80016c0:	2320      	movs	r3, #32
 80016c2:	e004      	b.n	80016ce <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80016c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016c8:	fab3 f383 	clz	r3, r3
 80016cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d106      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2200      	movs	r2, #0
 80016d8:	2101      	movs	r1, #1
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fc08 	bl	8000ef0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2102      	movs	r1, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fbec 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10a      	bne.n	800170c <HAL_ADC_ConfigChannel+0x310>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2102      	movs	r1, #2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fbe1 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	0e9b      	lsrs	r3, r3, #26
 8001706:	f003 021f 	and.w	r2, r3, #31
 800170a:	e01e      	b.n	800174a <HAL_ADC_ConfigChannel+0x34e>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2102      	movs	r1, #2
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fbd6 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800172a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800172e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800173a:	2320      	movs	r3, #32
 800173c:	e004      	b.n	8001748 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800173e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001742:	fab3 f383 	clz	r3, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001752:	2b00      	cmp	r3, #0
 8001754:	d105      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x366>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	0e9b      	lsrs	r3, r3, #26
 800175c:	f003 031f 	and.w	r3, r3, #31
 8001760:	e014      	b.n	800178c <HAL_ADC_ConfigChannel+0x390>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001768:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800176a:	fa93 f3a3 	rbit	r3, r3
 800176e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001770:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001772:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001776:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800177e:	2320      	movs	r3, #32
 8001780:	e004      	b.n	800178c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001782:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001786:	fab3 f383 	clz	r3, r3
 800178a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800178c:	429a      	cmp	r2, r3
 800178e:	d106      	bne.n	800179e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2200      	movs	r2, #0
 8001796:	2102      	movs	r1, #2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fba9 	bl	8000ef0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2103      	movs	r1, #3
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fb8d 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10a      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x3ce>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2103      	movs	r1, #3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fb82 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	0e9b      	lsrs	r3, r3, #26
 80017c4:	f003 021f 	and.w	r2, r3, #31
 80017c8:	e017      	b.n	80017fa <HAL_ADC_ConfigChannel+0x3fe>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2103      	movs	r1, #3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fb77 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017dc:	fa93 f3a3 	rbit	r3, r3
 80017e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80017e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80017e4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80017e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80017ec:	2320      	movs	r3, #32
 80017ee:	e003      	b.n	80017f8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80017f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017f2:	fab3 f383 	clz	r3, r3
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001802:	2b00      	cmp	r3, #0
 8001804:	d105      	bne.n	8001812 <HAL_ADC_ConfigChannel+0x416>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	0e9b      	lsrs	r3, r3, #26
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	e011      	b.n	8001836 <HAL_ADC_ConfigChannel+0x43a>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001818:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800181a:	fa93 f3a3 	rbit	r3, r3
 800181e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001820:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001822:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001824:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800182a:	2320      	movs	r3, #32
 800182c:	e003      	b.n	8001836 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800182e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001830:	fab3 f383 	clz	r3, r3
 8001834:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001836:	429a      	cmp	r2, r3
 8001838:	d106      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2200      	movs	r2, #0
 8001840:	2103      	movs	r1, #3
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fb54 	bl	8000ef0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fc47 	bl	80010e0 <LL_ADC_IsEnabled>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	f040 813f 	bne.w	8001ad8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	6819      	ldr	r1, [r3, #0]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	461a      	mov	r2, r3
 8001868:	f7ff fbc8 	bl	8000ffc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	4a8e      	ldr	r2, [pc, #568]	@ (8001aac <HAL_ADC_ConfigChannel+0x6b0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	f040 8130 	bne.w	8001ad8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10b      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x4a4>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0e9b      	lsrs	r3, r3, #26
 800188e:	3301      	adds	r3, #1
 8001890:	f003 031f 	and.w	r3, r3, #31
 8001894:	2b09      	cmp	r3, #9
 8001896:	bf94      	ite	ls
 8001898:	2301      	movls	r3, #1
 800189a:	2300      	movhi	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	e019      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x4d8>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018a8:	fa93 f3a3 	rbit	r3, r3
 80018ac:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80018ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80018b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80018b8:	2320      	movs	r3, #32
 80018ba:	e003      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80018bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018be:	fab3 f383 	clz	r3, r3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	3301      	adds	r3, #1
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	2b09      	cmp	r3, #9
 80018cc:	bf94      	ite	ls
 80018ce:	2301      	movls	r3, #1
 80018d0:	2300      	movhi	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d079      	beq.n	80019cc <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d107      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x4f8>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	0e9b      	lsrs	r3, r3, #26
 80018ea:	3301      	adds	r3, #1
 80018ec:	069b      	lsls	r3, r3, #26
 80018ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018f2:	e015      	b.n	8001920 <HAL_ADC_ConfigChannel+0x524>
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001904:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001906:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800190c:	2320      	movs	r3, #32
 800190e:	e003      	b.n	8001918 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001910:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	3301      	adds	r3, #1
 800191a:	069b      	lsls	r3, r3, #26
 800191c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001928:	2b00      	cmp	r3, #0
 800192a:	d109      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x544>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	0e9b      	lsrs	r3, r3, #26
 8001932:	3301      	adds	r3, #1
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	2101      	movs	r1, #1
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	e017      	b.n	8001970 <HAL_ADC_ConfigChannel+0x574>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001948:	fa93 f3a3 	rbit	r3, r3
 800194c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800194e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001950:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001958:	2320      	movs	r3, #32
 800195a:	e003      	b.n	8001964 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800195c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	3301      	adds	r3, #1
 8001966:	f003 031f 	and.w	r3, r3, #31
 800196a:	2101      	movs	r1, #1
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	ea42 0103 	orr.w	r1, r2, r3
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10a      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x59a>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	0e9b      	lsrs	r3, r3, #26
 8001986:	3301      	adds	r3, #1
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	051b      	lsls	r3, r3, #20
 8001994:	e018      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x5cc>
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80019a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80019a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80019ae:	2320      	movs	r3, #32
 80019b0:	e003      	b.n	80019ba <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80019b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019b4:	fab3 f383 	clz	r3, r3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	3301      	adds	r3, #1
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	4613      	mov	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019c8:	430b      	orrs	r3, r1
 80019ca:	e080      	b.n	8001ace <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d107      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x5ec>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	0e9b      	lsrs	r3, r3, #26
 80019de:	3301      	adds	r3, #1
 80019e0:	069b      	lsls	r3, r3, #26
 80019e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019e6:	e015      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x618>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80019fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001a00:	2320      	movs	r3, #32
 8001a02:	e003      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	069b      	lsls	r3, r3, #26
 8001a10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d109      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x638>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	0e9b      	lsrs	r3, r3, #26
 8001a26:	3301      	adds	r3, #1
 8001a28:	f003 031f 	and.w	r3, r3, #31
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	e017      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x668>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa93 f3a3 	rbit	r3, r3
 8001a40:	61bb      	str	r3, [r7, #24]
  return result;
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	e003      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	fab3 f383 	clz	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	3301      	adds	r3, #1
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	2101      	movs	r1, #1
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	ea42 0103 	orr.w	r1, r2, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10d      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x694>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0e9b      	lsrs	r3, r3, #26
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	f003 021f 	and.w	r2, r3, #31
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	3b1e      	subs	r3, #30
 8001a88:	051b      	lsls	r3, r3, #20
 8001a8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a8e:	e01d      	b.n	8001acc <HAL_ADC_ConfigChannel+0x6d0>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	60fb      	str	r3, [r7, #12]
  return result;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d103      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001aa8:	2320      	movs	r3, #32
 8001aaa:	e005      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x6bc>
 8001aac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f003 021f 	and.w	r2, r3, #31
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3b1e      	subs	r3, #30
 8001ac6:	051b      	lsls	r3, r3, #20
 8001ac8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001acc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7ff fa66 	bl	8000fa4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b44      	ldr	r3, [pc, #272]	@ (8001bf0 <HAL_ADC_ConfigChannel+0x7f4>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d07a      	beq.n	8001bda <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ae4:	4843      	ldr	r0, [pc, #268]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x7f8>)
 8001ae6:	f7ff f9bb 	bl	8000e60 <LL_ADC_GetCommonPathInternalCh>
 8001aea:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a41      	ldr	r2, [pc, #260]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x7fc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d12c      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001af8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001afc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d126      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a3c      	ldr	r2, [pc, #240]	@ (8001bfc <HAL_ADC_ConfigChannel+0x800>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d004      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x71c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a3b      	ldr	r2, [pc, #236]	@ (8001c00 <HAL_ADC_ConfigChannel+0x804>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d15d      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b20:	4619      	mov	r1, r3
 8001b22:	4834      	ldr	r0, [pc, #208]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x7f8>)
 8001b24:	f7ff f989 	bl	8000e3a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b28:	4b36      	ldr	r3, [pc, #216]	@ (8001c04 <HAL_ADC_ConfigChannel+0x808>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	099b      	lsrs	r3, r3, #6
 8001b2e:	4a36      	ldr	r2, [pc, #216]	@ (8001c08 <HAL_ADC_ConfigChannel+0x80c>)
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
 8001b34:	099b      	lsrs	r3, r3, #6
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001b42:	e002      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f9      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b50:	e040      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a2d      	ldr	r2, [pc, #180]	@ (8001c0c <HAL_ADC_ConfigChannel+0x810>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d118      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d112      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a23      	ldr	r2, [pc, #140]	@ (8001bfc <HAL_ADC_ConfigChannel+0x800>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d004      	beq.n	8001b7c <HAL_ADC_ConfigChannel+0x780>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a22      	ldr	r2, [pc, #136]	@ (8001c00 <HAL_ADC_ConfigChannel+0x804>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d12d      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b84:	4619      	mov	r1, r3
 8001b86:	481b      	ldr	r0, [pc, #108]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x7f8>)
 8001b88:	f7ff f957 	bl	8000e3a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b8c:	e024      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1f      	ldr	r2, [pc, #124]	@ (8001c10 <HAL_ADC_ConfigChannel+0x814>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d120      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d11a      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a14      	ldr	r2, [pc, #80]	@ (8001bfc <HAL_ADC_ConfigChannel+0x800>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d115      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	480e      	ldr	r0, [pc, #56]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x7f8>)
 8001bba:	f7ff f93e 	bl	8000e3a <LL_ADC_SetCommonPathInternalCh>
 8001bbe:	e00c      	b.n	8001bda <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc4:	f043 0220 	orr.w	r2, r3, #32
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001bd2:	e002      	b.n	8001bda <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bd4:	bf00      	nop
 8001bd6:	e000      	b.n	8001bda <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001be2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	37d8      	adds	r7, #216	@ 0xd8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	80080000 	.word	0x80080000
 8001bf4:	50040300 	.word	0x50040300
 8001bf8:	c7520000 	.word	0xc7520000
 8001bfc:	50040000 	.word	0x50040000
 8001c00:	50040200 	.word	0x50040200
 8001c04:	20000000 	.word	0x20000000
 8001c08:	053e2d63 	.word	0x053e2d63
 8001c0c:	cb840000 	.word	0xcb840000
 8001c10:	80000001 	.word	0x80000001

08001c14 <LL_ADC_IsEnabled>:
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <LL_ADC_IsEnabled+0x18>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <LL_ADC_IsEnabled+0x1a>
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_ADC_REG_IsConversionOngoing>:
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d101      	bne.n	8001c52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b0a1      	sub	sp, #132	@ 0x84
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e093      	b.n	8001da6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001c86:	2300      	movs	r3, #0
 8001c88:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a47      	ldr	r2, [pc, #284]	@ (8001db0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d102      	bne.n	8001c9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001c98:	4b46      	ldr	r3, [pc, #280]	@ (8001db4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	e001      	b.n	8001ca2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10b      	bne.n	8001cc0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cac:	f043 0220 	orr.w	r2, r3, #32
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e072      	b.n	8001da6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffb9 	bl	8001c3a <LL_ADC_REG_IsConversionOngoing>
 8001cc8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ffb3 	bl	8001c3a <LL_ADC_REG_IsConversionOngoing>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d154      	bne.n	8001d84 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001cda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d151      	bne.n	8001d84 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001ce0:	4b35      	ldr	r3, [pc, #212]	@ (8001db8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001ce2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d02c      	beq.n	8001d46 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001cec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001cfe:	035b      	lsls	r3, r3, #13
 8001d00:	430b      	orrs	r3, r1
 8001d02:	431a      	orrs	r2, r3
 8001d04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d08:	4829      	ldr	r0, [pc, #164]	@ (8001db0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d0a:	f7ff ff83 	bl	8001c14 <LL_ADC_IsEnabled>
 8001d0e:	4604      	mov	r4, r0
 8001d10:	4828      	ldr	r0, [pc, #160]	@ (8001db4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001d12:	f7ff ff7f 	bl	8001c14 <LL_ADC_IsEnabled>
 8001d16:	4603      	mov	r3, r0
 8001d18:	431c      	orrs	r4, r3
 8001d1a:	4828      	ldr	r0, [pc, #160]	@ (8001dbc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001d1c:	f7ff ff7a 	bl	8001c14 <LL_ADC_IsEnabled>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4323      	orrs	r3, r4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d137      	bne.n	8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001d28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001d30:	f023 030f 	bic.w	r3, r3, #15
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	6811      	ldr	r1, [r2, #0]
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	6892      	ldr	r2, [r2, #8]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d42:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001d44:	e028      	b.n	8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d50:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d52:	4817      	ldr	r0, [pc, #92]	@ (8001db0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d54:	f7ff ff5e 	bl	8001c14 <LL_ADC_IsEnabled>
 8001d58:	4604      	mov	r4, r0
 8001d5a:	4816      	ldr	r0, [pc, #88]	@ (8001db4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001d5c:	f7ff ff5a 	bl	8001c14 <LL_ADC_IsEnabled>
 8001d60:	4603      	mov	r3, r0
 8001d62:	431c      	orrs	r4, r3
 8001d64:	4815      	ldr	r0, [pc, #84]	@ (8001dbc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001d66:	f7ff ff55 	bl	8001c14 <LL_ADC_IsEnabled>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4323      	orrs	r3, r4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d112      	bne.n	8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001d72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001d7a:	f023 030f 	bic.w	r3, r3, #15
 8001d7e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001d80:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001d82:	e009      	b.n	8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d88:	f043 0220 	orr.w	r2, r3, #32
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001d96:	e000      	b.n	8001d9a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001d98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001da2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3784      	adds	r7, #132	@ 0x84
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd90      	pop	{r4, r7, pc}
 8001dae:	bf00      	nop
 8001db0:	50040000 	.word	0x50040000
 8001db4:	50040100 	.word	0x50040100
 8001db8:	50040300 	.word	0x50040300
 8001dbc:	50040200 	.word	0x50040200

08001dc0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0ed      	b.n	8001fae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7fe fdfa 	bl	80009d8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df4:	f7ff f802 	bl	8000dfc <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dfa:	e012      	b.n	8001e22 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dfc:	f7fe fffe 	bl	8000dfc <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b0a      	cmp	r3, #10
 8001e08:	d90b      	bls.n	8001e22 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2205      	movs	r2, #5
 8001e1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e0c5      	b.n	8001fae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0e5      	beq.n	8001dfc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0202 	bic.w	r2, r2, #2
 8001e3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e40:	f7fe ffdc 	bl	8000dfc <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e46:	e012      	b.n	8001e6e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e48:	f7fe ffd8 	bl	8000dfc <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b0a      	cmp	r3, #10
 8001e54:	d90b      	bls.n	8001e6e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2205      	movs	r2, #5
 8001e66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e09f      	b.n	8001fae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1e5      	bne.n	8001e48 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7e1b      	ldrb	r3, [r3, #24]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d108      	bne.n	8001e96 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e007      	b.n	8001ea6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7e5b      	ldrb	r3, [r3, #25]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d108      	bne.n	8001ec0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e007      	b.n	8001ed0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ece:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7e9b      	ldrb	r3, [r3, #26]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d108      	bne.n	8001eea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0220 	orr.w	r2, r2, #32
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e007      	b.n	8001efa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0220 	bic.w	r2, r2, #32
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7edb      	ldrb	r3, [r3, #27]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d108      	bne.n	8001f14 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0210 	bic.w	r2, r2, #16
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e007      	b.n	8001f24 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0210 	orr.w	r2, r2, #16
 8001f22:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	7f1b      	ldrb	r3, [r3, #28]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d108      	bne.n	8001f3e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0208 	orr.w	r2, r2, #8
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	e007      	b.n	8001f4e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0208 	bic.w	r2, r2, #8
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	7f5b      	ldrb	r3, [r3, #29]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d108      	bne.n	8001f68 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0204 	orr.w	r2, r2, #4
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e007      	b.n	8001f78 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0204 	bic.w	r2, r2, #4
 8001f76:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	ea42 0103 	orr.w	r1, r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	1e5a      	subs	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fea:	4a04      	ldr	r2, [pc, #16]	@ (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	60d3      	str	r3, [r2, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002004:	4b04      	ldr	r3, [pc, #16]	@ (8002018 <__NVIC_GetPriorityGrouping+0x18>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	f003 0307 	and.w	r3, r3, #7
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	2b00      	cmp	r3, #0
 800202c:	db0b      	blt.n	8002046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	f003 021f 	and.w	r2, r3, #31
 8002034:	4907      	ldr	r1, [pc, #28]	@ (8002054 <__NVIC_EnableIRQ+0x38>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	2001      	movs	r0, #1
 800203e:	fa00 f202 	lsl.w	r2, r0, r2
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000e100 	.word	0xe000e100

08002058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	db0a      	blt.n	8002082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	b2da      	uxtb	r2, r3
 8002070:	490c      	ldr	r1, [pc, #48]	@ (80020a4 <__NVIC_SetPriority+0x4c>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	0112      	lsls	r2, r2, #4
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	440b      	add	r3, r1
 800207c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002080:	e00a      	b.n	8002098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4908      	ldr	r1, [pc, #32]	@ (80020a8 <__NVIC_SetPriority+0x50>)
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	3b04      	subs	r3, #4
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	440b      	add	r3, r1
 8002096:	761a      	strb	r2, [r3, #24]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000e100 	.word	0xe000e100
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	@ 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f1c3 0307 	rsb	r3, r3, #7
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	bf28      	it	cs
 80020ca:	2304      	movcs	r3, #4
 80020cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d902      	bls.n	80020dc <NVIC_EncodePriority+0x30>
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3b03      	subs	r3, #3
 80020da:	e000      	b.n	80020de <NVIC_EncodePriority+0x32>
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43da      	mvns	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	401a      	ands	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	43d9      	mvns	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	4313      	orrs	r3, r2
         );
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	@ 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ff4c 	bl	8001fb8 <__NVIC_SetPriorityGrouping>
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800213a:	f7ff ff61 	bl	8002000 <__NVIC_GetPriorityGrouping>
 800213e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68b9      	ldr	r1, [r7, #8]
 8002144:	6978      	ldr	r0, [r7, #20]
 8002146:	f7ff ffb1 	bl	80020ac <NVIC_EncodePriority>
 800214a:	4602      	mov	r2, r0
 800214c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002150:	4611      	mov	r1, r2
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff ff80 	bl	8002058 <__NVIC_SetPriority>
}
 8002158:	bf00      	nop
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ff54 	bl	800201c <__NVIC_EnableIRQ>
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218a:	e166      	b.n	800245a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	2101      	movs	r1, #1
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	4013      	ands	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8158 	beq.w	8002454 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d005      	beq.n	80021bc <HAL_GPIO_Init+0x40>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d130      	bne.n	800221e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2203      	movs	r2, #3
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4013      	ands	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021f2:	2201      	movs	r2, #1
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	f003 0201 	and.w	r2, r3, #1
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	2b03      	cmp	r3, #3
 8002228:	d017      	beq.n	800225a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	2203      	movs	r2, #3
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d123      	bne.n	80022ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	08da      	lsrs	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3208      	adds	r2, #8
 800226e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002272:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	220f      	movs	r2, #15
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	691a      	ldr	r2, [r3, #16]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	08da      	lsrs	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3208      	adds	r2, #8
 80022a8:	6939      	ldr	r1, [r7, #16]
 80022aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	2203      	movs	r2, #3
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0203 	and.w	r2, r3, #3
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80b2 	beq.w	8002454 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f0:	4b61      	ldr	r3, [pc, #388]	@ (8002478 <HAL_GPIO_Init+0x2fc>)
 80022f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f4:	4a60      	ldr	r2, [pc, #384]	@ (8002478 <HAL_GPIO_Init+0x2fc>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80022fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002478 <HAL_GPIO_Init+0x2fc>)
 80022fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002308:	4a5c      	ldr	r2, [pc, #368]	@ (800247c <HAL_GPIO_Init+0x300>)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	3302      	adds	r3, #2
 8002310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	220f      	movs	r2, #15
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002332:	d02b      	beq.n	800238c <HAL_GPIO_Init+0x210>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a52      	ldr	r2, [pc, #328]	@ (8002480 <HAL_GPIO_Init+0x304>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d025      	beq.n	8002388 <HAL_GPIO_Init+0x20c>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a51      	ldr	r2, [pc, #324]	@ (8002484 <HAL_GPIO_Init+0x308>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d01f      	beq.n	8002384 <HAL_GPIO_Init+0x208>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a50      	ldr	r2, [pc, #320]	@ (8002488 <HAL_GPIO_Init+0x30c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d019      	beq.n	8002380 <HAL_GPIO_Init+0x204>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a4f      	ldr	r2, [pc, #316]	@ (800248c <HAL_GPIO_Init+0x310>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d013      	beq.n	800237c <HAL_GPIO_Init+0x200>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a4e      	ldr	r2, [pc, #312]	@ (8002490 <HAL_GPIO_Init+0x314>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d00d      	beq.n	8002378 <HAL_GPIO_Init+0x1fc>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a4d      	ldr	r2, [pc, #308]	@ (8002494 <HAL_GPIO_Init+0x318>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d007      	beq.n	8002374 <HAL_GPIO_Init+0x1f8>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a4c      	ldr	r2, [pc, #304]	@ (8002498 <HAL_GPIO_Init+0x31c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d101      	bne.n	8002370 <HAL_GPIO_Init+0x1f4>
 800236c:	2307      	movs	r3, #7
 800236e:	e00e      	b.n	800238e <HAL_GPIO_Init+0x212>
 8002370:	2308      	movs	r3, #8
 8002372:	e00c      	b.n	800238e <HAL_GPIO_Init+0x212>
 8002374:	2306      	movs	r3, #6
 8002376:	e00a      	b.n	800238e <HAL_GPIO_Init+0x212>
 8002378:	2305      	movs	r3, #5
 800237a:	e008      	b.n	800238e <HAL_GPIO_Init+0x212>
 800237c:	2304      	movs	r3, #4
 800237e:	e006      	b.n	800238e <HAL_GPIO_Init+0x212>
 8002380:	2303      	movs	r3, #3
 8002382:	e004      	b.n	800238e <HAL_GPIO_Init+0x212>
 8002384:	2302      	movs	r3, #2
 8002386:	e002      	b.n	800238e <HAL_GPIO_Init+0x212>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <HAL_GPIO_Init+0x212>
 800238c:	2300      	movs	r3, #0
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	f002 0203 	and.w	r2, r2, #3
 8002394:	0092      	lsls	r2, r2, #2
 8002396:	4093      	lsls	r3, r2
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800239e:	4937      	ldr	r1, [pc, #220]	@ (800247c <HAL_GPIO_Init+0x300>)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	3302      	adds	r3, #2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023ac:	4b3b      	ldr	r3, [pc, #236]	@ (800249c <HAL_GPIO_Init+0x320>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023d0:	4a32      	ldr	r2, [pc, #200]	@ (800249c <HAL_GPIO_Init+0x320>)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023d6:	4b31      	ldr	r3, [pc, #196]	@ (800249c <HAL_GPIO_Init+0x320>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	43db      	mvns	r3, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023fa:	4a28      	ldr	r2, [pc, #160]	@ (800249c <HAL_GPIO_Init+0x320>)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002400:	4b26      	ldr	r3, [pc, #152]	@ (800249c <HAL_GPIO_Init+0x320>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	43db      	mvns	r3, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002424:	4a1d      	ldr	r2, [pc, #116]	@ (800249c <HAL_GPIO_Init+0x320>)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800242a:	4b1c      	ldr	r3, [pc, #112]	@ (800249c <HAL_GPIO_Init+0x320>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	43db      	mvns	r3, r3
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800244e:	4a13      	ldr	r2, [pc, #76]	@ (800249c <HAL_GPIO_Init+0x320>)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	3301      	adds	r3, #1
 8002458:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	f47f ae91 	bne.w	800218c <HAL_GPIO_Init+0x10>
  }
}
 800246a:	bf00      	nop
 800246c:	bf00      	nop
 800246e:	371c      	adds	r7, #28
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40021000 	.word	0x40021000
 800247c:	40010000 	.word	0x40010000
 8002480:	48000400 	.word	0x48000400
 8002484:	48000800 	.word	0x48000800
 8002488:	48000c00 	.word	0x48000c00
 800248c:	48001000 	.word	0x48001000
 8002490:	48001400 	.word	0x48001400
 8002494:	48001800 	.word	0x48001800
 8002498:	48001c00 	.word	0x48001c00
 800249c:	40010400 	.word	0x40010400

080024a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	807b      	strh	r3, [r7, #2]
 80024ac:	4613      	mov	r3, r2
 80024ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b0:	787b      	ldrb	r3, [r7, #1]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024bc:	e002      	b.n	80024c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024be:	887a      	ldrh	r2, [r7, #2]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024e2:	887a      	ldrh	r2, [r7, #2]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	041a      	lsls	r2, r3, #16
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	43d9      	mvns	r1, r3
 80024ee:	887b      	ldrh	r3, [r7, #2]
 80024f0:	400b      	ands	r3, r1
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	619a      	str	r2, [r3, #24]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800250e:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d006      	beq.n	8002528 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800251a:	4a05      	ldr	r2, [pc, #20]	@ (8002530 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fd ff3a 	bl	800039c <HAL_GPIO_EXTI_Callback>
  }
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40010400 	.word	0x40010400

08002534 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e08d      	b.n	8002662 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7fe fae0 	bl	8000b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2224      	movs	r2, #36	@ 0x24
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0201 	bic.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002584:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002594:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d107      	bne.n	80025ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	e006      	b.n	80025bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80025ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d108      	bne.n	80025d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	e007      	b.n	80025e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002608:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691a      	ldr	r2, [r3, #16]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69d9      	ldr	r1, [r3, #28]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1a      	ldr	r2, [r3, #32]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af02      	add	r7, sp, #8
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	4608      	mov	r0, r1
 8002676:	4611      	mov	r1, r2
 8002678:	461a      	mov	r2, r3
 800267a:	4603      	mov	r3, r0
 800267c:	817b      	strh	r3, [r7, #10]
 800267e:	460b      	mov	r3, r1
 8002680:	813b      	strh	r3, [r7, #8]
 8002682:	4613      	mov	r3, r2
 8002684:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b20      	cmp	r3, #32
 8002690:	f040 80fd 	bne.w	800288e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <HAL_I2C_Mem_Read+0x34>
 800269a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0f1      	b.n	8002890 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_I2C_Mem_Read+0x4e>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e0ea      	b.n	8002890 <HAL_I2C_Mem_Read+0x224>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026c2:	f7fe fb9b 	bl	8000dfc <HAL_GetTick>
 80026c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	2319      	movs	r3, #25
 80026ce:	2201      	movs	r2, #1
 80026d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 f95b 	bl	8002990 <I2C_WaitOnFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0d5      	b.n	8002890 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2222      	movs	r2, #34	@ 0x22
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2240      	movs	r2, #64	@ 0x40
 80026f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a3a      	ldr	r2, [r7, #32]
 80026fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002704:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800270c:	88f8      	ldrh	r0, [r7, #6]
 800270e:	893a      	ldrh	r2, [r7, #8]
 8002710:	8979      	ldrh	r1, [r7, #10]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	4603      	mov	r3, r0
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f8bf 	bl	80028a0 <I2C_RequestMemoryRead>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0ad      	b.n	8002890 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	2bff      	cmp	r3, #255	@ 0xff
 800273c:	d90e      	bls.n	800275c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002748:	b2da      	uxtb	r2, r3
 800274a:	8979      	ldrh	r1, [r7, #10]
 800274c:	4b52      	ldr	r3, [pc, #328]	@ (8002898 <HAL_I2C_Mem_Read+0x22c>)
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fadf 	bl	8002d18 <I2C_TransferConfig>
 800275a:	e00f      	b.n	800277c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800276a:	b2da      	uxtb	r2, r3
 800276c:	8979      	ldrh	r1, [r7, #10]
 800276e:	4b4a      	ldr	r3, [pc, #296]	@ (8002898 <HAL_I2C_Mem_Read+0x22c>)
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 face 	bl	8002d18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002782:	2200      	movs	r2, #0
 8002784:	2104      	movs	r1, #4
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f902 	bl	8002990 <I2C_WaitOnFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e07c      	b.n	8002890 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d034      	beq.n	800283c <HAL_I2C_Mem_Read+0x1d0>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d130      	bne.n	800283c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e0:	2200      	movs	r2, #0
 80027e2:	2180      	movs	r1, #128	@ 0x80
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f8d3 	bl	8002990 <I2C_WaitOnFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e04d      	b.n	8002890 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2bff      	cmp	r3, #255	@ 0xff
 80027fc:	d90e      	bls.n	800281c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2201      	movs	r2, #1
 8002802:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002808:	b2da      	uxtb	r2, r3
 800280a:	8979      	ldrh	r1, [r7, #10]
 800280c:	2300      	movs	r3, #0
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fa7f 	bl	8002d18 <I2C_TransferConfig>
 800281a:	e00f      	b.n	800283c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282a:	b2da      	uxtb	r2, r3
 800282c:	8979      	ldrh	r1, [r7, #10]
 800282e:	2300      	movs	r3, #0
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 fa6e 	bl	8002d18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d19a      	bne.n	800277c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f940 	bl	8002ad0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e01a      	b.n	8002890 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2220      	movs	r2, #32
 8002860:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <HAL_I2C_Mem_Read+0x230>)
 800286e:	400b      	ands	r3, r1
 8002870:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	e000      	b.n	8002890 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800288e:	2302      	movs	r3, #2
  }
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	80002400 	.word	0x80002400
 800289c:	fe00e800 	.word	0xfe00e800

080028a0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	4608      	mov	r0, r1
 80028aa:	4611      	mov	r1, r2
 80028ac:	461a      	mov	r2, r3
 80028ae:	4603      	mov	r3, r0
 80028b0:	817b      	strh	r3, [r7, #10]
 80028b2:	460b      	mov	r3, r1
 80028b4:	813b      	strh	r3, [r7, #8]
 80028b6:	4613      	mov	r3, r2
 80028b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	8979      	ldrh	r1, [r7, #10]
 80028c0:	4b20      	ldr	r3, [pc, #128]	@ (8002944 <I2C_RequestMemoryRead+0xa4>)
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2300      	movs	r3, #0
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fa26 	bl	8002d18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	69b9      	ldr	r1, [r7, #24]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f8b6 	bl	8002a42 <I2C_WaitOnTXISFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e02c      	b.n	800293a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d105      	bne.n	80028f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028e6:	893b      	ldrh	r3, [r7, #8]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80028f0:	e015      	b.n	800291e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028f2:	893b      	ldrh	r3, [r7, #8]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	69b9      	ldr	r1, [r7, #24]
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f89c 	bl	8002a42 <I2C_WaitOnTXISFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e012      	b.n	800293a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002914:	893b      	ldrh	r3, [r7, #8]
 8002916:	b2da      	uxtb	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2200      	movs	r2, #0
 8002926:	2140      	movs	r1, #64	@ 0x40
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f831 	bl	8002990 <I2C_WaitOnFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	80002000 	.word	0x80002000

08002948 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b02      	cmp	r3, #2
 800295c:	d103      	bne.n	8002966 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2200      	movs	r2, #0
 8002964:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d007      	beq.n	8002984 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	619a      	str	r2, [r3, #24]
  }
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a0:	e03b      	b.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	6839      	ldr	r1, [r7, #0]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f8d6 	bl	8002b58 <I2C_IsErrorOccurred>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e041      	b.n	8002a3a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d02d      	beq.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029be:	f7fe fa1d 	bl	8000dfc <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d302      	bcc.n	80029d4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d122      	bne.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	4013      	ands	r3, r2
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	bf0c      	ite	eq
 80029e4:	2301      	moveq	r3, #1
 80029e6:	2300      	movne	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d113      	bne.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f6:	f043 0220 	orr.w	r2, r3, #32
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e00f      	b.n	8002a3a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699a      	ldr	r2, [r3, #24]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4013      	ands	r3, r2
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	bf0c      	ite	eq
 8002a2a:	2301      	moveq	r3, #1
 8002a2c:	2300      	movne	r3, #0
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d0b4      	beq.n	80029a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a4e:	e033      	b.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f87f 	bl	8002b58 <I2C_IsErrorOccurred>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e031      	b.n	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6a:	d025      	beq.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6c:	f7fe f9c6 	bl	8000dfc <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d302      	bcc.n	8002a82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d11a      	bne.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d013      	beq.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a94:	f043 0220 	orr.w	r2, r3, #32
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e007      	b.n	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d1c4      	bne.n	8002a50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002adc:	e02f      	b.n	8002b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f838 	bl	8002b58 <I2C_IsErrorOccurred>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e02d      	b.n	8002b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af2:	f7fe f983 	bl	8000dfc <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d302      	bcc.n	8002b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d11a      	bne.n	8002b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d013      	beq.n	8002b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1a:	f043 0220 	orr.w	r2, r3, #32
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e007      	b.n	8002b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d1c8      	bne.n	8002ade <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	@ 0x28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d068      	beq.n	8002c56 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2210      	movs	r2, #16
 8002b8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b8c:	e049      	b.n	8002c22 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b94:	d045      	beq.n	8002c22 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b96:	f7fe f931 	bl	8000dfc <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d302      	bcc.n	8002bac <I2C_IsErrorOccurred+0x54>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d13a      	bne.n	8002c22 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bbe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bce:	d121      	bne.n	8002c14 <I2C_IsErrorOccurred+0xbc>
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bd6:	d01d      	beq.n	8002c14 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002bd8:	7cfb      	ldrb	r3, [r7, #19]
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	d01a      	beq.n	8002c14 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002bee:	f7fe f905 	bl	8000dfc <HAL_GetTick>
 8002bf2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bf4:	e00e      	b.n	8002c14 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002bf6:	f7fe f901 	bl	8000dfc <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b19      	cmp	r3, #25
 8002c02:	d907      	bls.n	8002c14 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	f043 0320 	orr.w	r3, r3, #32
 8002c0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002c12:	e006      	b.n	8002c22 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d1e9      	bne.n	8002bf6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d003      	beq.n	8002c38 <I2C_IsErrorOccurred+0xe0>
 8002c30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0aa      	beq.n	8002b8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d103      	bne.n	8002c48 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2220      	movs	r2, #32
 8002c46:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	f043 0304 	orr.w	r3, r3, #4
 8002c4e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00b      	beq.n	8002ca2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	f043 0308 	orr.w	r3, r3, #8
 8002c90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00b      	beq.n	8002cc4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f043 0302 	orr.w	r3, r3, #2
 8002cb2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d01c      	beq.n	8002d06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f7ff fe3b 	bl	8002948 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8002d14 <I2C_IsErrorOccurred+0x1bc>)
 8002cde:	400b      	ands	r3, r1
 8002ce0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3728      	adds	r7, #40	@ 0x28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	fe00e800 	.word	0xfe00e800

08002d18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	607b      	str	r3, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	817b      	strh	r3, [r7, #10]
 8002d26:	4613      	mov	r3, r2
 8002d28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d2a:	897b      	ldrh	r3, [r7, #10]
 8002d2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d30:	7a7b      	ldrb	r3, [r7, #9]
 8002d32:	041b      	lsls	r3, r3, #16
 8002d34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	0d5b      	lsrs	r3, r3, #21
 8002d52:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002d56:	4b08      	ldr	r3, [pc, #32]	@ (8002d78 <I2C_TransferConfig+0x60>)
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	ea02 0103 	and.w	r1, r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d6a:	bf00      	nop
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	03ff63ff 	.word	0x03ff63ff

08002d7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	d138      	bne.n	8002e04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e032      	b.n	8002e06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2224      	movs	r2, #36	@ 0x24
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6819      	ldr	r1, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	e000      	b.n	8002e06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
  }
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b085      	sub	sp, #20
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d139      	bne.n	8002e9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e033      	b.n	8002e9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2224      	movs	r2, #36	@ 0x24
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	021b      	lsls	r3, r3, #8
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e000      	b.n	8002e9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e9c:	2302      	movs	r3, #2
  }
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002eb0:	4b04      	ldr	r3, [pc, #16]	@ (8002ec4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40007000 	.word	0x40007000

08002ec8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ed6:	d130      	bne.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ed8:	4b23      	ldr	r3, [pc, #140]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ee4:	d038      	beq.n	8002f58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ee6:	4b20      	ldr	r3, [pc, #128]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002eee:	4a1e      	ldr	r2, [pc, #120]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ef4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2232      	movs	r2, #50	@ 0x32
 8002efc:	fb02 f303 	mul.w	r3, r2, r3
 8002f00:	4a1b      	ldr	r2, [pc, #108]	@ (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	0c9b      	lsrs	r3, r3, #18
 8002f08:	3301      	adds	r3, #1
 8002f0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f0c:	e002      	b.n	8002f14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f14:	4b14      	ldr	r3, [pc, #80]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f20:	d102      	bne.n	8002f28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f2      	bne.n	8002f0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f28:	4b0f      	ldr	r3, [pc, #60]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f34:	d110      	bne.n	8002f58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e00f      	b.n	8002f5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f46:	d007      	beq.n	8002f58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f48:	4b07      	ldr	r3, [pc, #28]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f50:	4a05      	ldr	r2, [pc, #20]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40007000 	.word	0x40007000
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	431bde83 	.word	0x431bde83

08002f74 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f000 bc08 	b.w	8003798 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f88:	4b96      	ldr	r3, [pc, #600]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 030c 	and.w	r3, r3, #12
 8002f90:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f92:	4b94      	ldr	r3, [pc, #592]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80e4 	beq.w	8003172 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d007      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x4c>
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2b0c      	cmp	r3, #12
 8002fb4:	f040 808b 	bne.w	80030ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	f040 8087 	bne.w	80030ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fc0:	4b88      	ldr	r3, [pc, #544]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x64>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e3df      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1a      	ldr	r2, [r3, #32]
 8002fdc:	4b81      	ldr	r3, [pc, #516]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d004      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x7e>
 8002fe8:	4b7e      	ldr	r3, [pc, #504]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ff0:	e005      	b.n	8002ffe <HAL_RCC_OscConfig+0x8a>
 8002ff2:	4b7c      	ldr	r3, [pc, #496]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d223      	bcs.n	800304a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fdae 	bl	8003b68 <RCC_SetFlashLatencyFromMSIRange>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e3c0      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003016:	4b73      	ldr	r3, [pc, #460]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a72      	ldr	r2, [pc, #456]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800301c:	f043 0308 	orr.w	r3, r3, #8
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b70      	ldr	r3, [pc, #448]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	496d      	ldr	r1, [pc, #436]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003034:	4b6b      	ldr	r3, [pc, #428]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	4968      	ldr	r1, [pc, #416]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
 8003048:	e025      	b.n	8003096 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800304a:	4b66      	ldr	r3, [pc, #408]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a65      	ldr	r2, [pc, #404]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003050:	f043 0308 	orr.w	r3, r3, #8
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	4b63      	ldr	r3, [pc, #396]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4960      	ldr	r1, [pc, #384]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003068:	4b5e      	ldr	r3, [pc, #376]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	495b      	ldr	r1, [pc, #364]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fd6e 	bl	8003b68 <RCC_SetFlashLatencyFromMSIRange>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e380      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003096:	f000 fc87 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 800309a:	4602      	mov	r2, r0
 800309c:	4b51      	ldr	r3, [pc, #324]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	4950      	ldr	r1, [pc, #320]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 80030a8:	5ccb      	ldrb	r3, [r1, r3]
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	fa22 f303 	lsr.w	r3, r2, r3
 80030b2:	4a4e      	ldr	r2, [pc, #312]	@ (80031ec <HAL_RCC_OscConfig+0x278>)
 80030b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030b6:	4b4e      	ldr	r3, [pc, #312]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fd90 	bl	8000be0 <HAL_InitTick>
 80030c0:	4603      	mov	r3, r0
 80030c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d052      	beq.n	8003170 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	e364      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d032      	beq.n	800313c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030d6:	4b43      	ldr	r3, [pc, #268]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a42      	ldr	r2, [pc, #264]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030e2:	f7fd fe8b 	bl	8000dfc <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030ea:	f7fd fe87 	bl	8000dfc <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e34d      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030fc:	4b39      	ldr	r3, [pc, #228]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003108:	4b36      	ldr	r3, [pc, #216]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a35      	ldr	r2, [pc, #212]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800310e:	f043 0308 	orr.w	r3, r3, #8
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	4b33      	ldr	r3, [pc, #204]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4930      	ldr	r1, [pc, #192]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003126:	4b2f      	ldr	r3, [pc, #188]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	492b      	ldr	r1, [pc, #172]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
 800313a:	e01a      	b.n	8003172 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800313c:	4b29      	ldr	r3, [pc, #164]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a28      	ldr	r2, [pc, #160]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003142:	f023 0301 	bic.w	r3, r3, #1
 8003146:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003148:	f7fd fe58 	bl	8000dfc <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003150:	f7fd fe54 	bl	8000dfc <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e31a      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003162:	4b20      	ldr	r3, [pc, #128]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x1dc>
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003170:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d073      	beq.n	8003266 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b08      	cmp	r3, #8
 8003182:	d005      	beq.n	8003190 <HAL_RCC_OscConfig+0x21c>
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d10e      	bne.n	80031a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d10b      	bne.n	80031a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	4b14      	ldr	r3, [pc, #80]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d063      	beq.n	8003264 <HAL_RCC_OscConfig+0x2f0>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d15f      	bne.n	8003264 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e2f7      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b0:	d106      	bne.n	80031c0 <HAL_RCC_OscConfig+0x24c>
 80031b2:	4b0c      	ldr	r3, [pc, #48]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a0b      	ldr	r2, [pc, #44]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e025      	b.n	800320c <HAL_RCC_OscConfig+0x298>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031c8:	d114      	bne.n	80031f4 <HAL_RCC_OscConfig+0x280>
 80031ca:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a05      	ldr	r2, [pc, #20]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80031d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	4b03      	ldr	r3, [pc, #12]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a02      	ldr	r2, [pc, #8]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	e013      	b.n	800320c <HAL_RCC_OscConfig+0x298>
 80031e4:	40021000 	.word	0x40021000
 80031e8:	080079f4 	.word	0x080079f4
 80031ec:	20000000 	.word	0x20000000
 80031f0:	20000004 	.word	0x20000004
 80031f4:	4ba0      	ldr	r3, [pc, #640]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a9f      	ldr	r2, [pc, #636]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80031fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b9d      	ldr	r3, [pc, #628]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a9c      	ldr	r2, [pc, #624]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800320a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fd fdf2 	bl	8000dfc <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800321c:	f7fd fdee 	bl	8000dfc <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	@ 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e2b4      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800322e:	4b92      	ldr	r3, [pc, #584]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x2a8>
 800323a:	e014      	b.n	8003266 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fd fdde 	bl	8000dfc <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003244:	f7fd fdda 	bl	8000dfc <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	@ 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e2a0      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003256:	4b88      	ldr	r3, [pc, #544]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x2d0>
 8003262:	e000      	b.n	8003266 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d060      	beq.n	8003334 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d005      	beq.n	8003284 <HAL_RCC_OscConfig+0x310>
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2b0c      	cmp	r3, #12
 800327c:	d119      	bne.n	80032b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d116      	bne.n	80032b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003284:	4b7c      	ldr	r3, [pc, #496]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_OscConfig+0x328>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e27d      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329c:	4b76      	ldr	r3, [pc, #472]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	061b      	lsls	r3, r3, #24
 80032aa:	4973      	ldr	r1, [pc, #460]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032b0:	e040      	b.n	8003334 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d023      	beq.n	8003302 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6e      	ldr	r2, [pc, #440]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c6:	f7fd fd99 	bl	8000dfc <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ce:	f7fd fd95 	bl	8000dfc <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e25b      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e0:	4b65      	ldr	r3, [pc, #404]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ec:	4b62      	ldr	r3, [pc, #392]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	061b      	lsls	r3, r3, #24
 80032fa:	495f      	ldr	r1, [pc, #380]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
 8003300:	e018      	b.n	8003334 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003302:	4b5d      	ldr	r3, [pc, #372]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a5c      	ldr	r2, [pc, #368]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800330c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7fd fd75 	bl	8000dfc <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003316:	f7fd fd71 	bl	8000dfc <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e237      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003328:	4b53      	ldr	r3, [pc, #332]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f0      	bne.n	8003316 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d03c      	beq.n	80033ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01c      	beq.n	8003382 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003348:	4b4b      	ldr	r3, [pc, #300]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800334a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800334e:	4a4a      	ldr	r2, [pc, #296]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003358:	f7fd fd50 	bl	8000dfc <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003360:	f7fd fd4c 	bl	8000dfc <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e212      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003372:	4b41      	ldr	r3, [pc, #260]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0ef      	beq.n	8003360 <HAL_RCC_OscConfig+0x3ec>
 8003380:	e01b      	b.n	80033ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003382:	4b3d      	ldr	r3, [pc, #244]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003384:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003388:	4a3b      	ldr	r2, [pc, #236]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003392:	f7fd fd33 	bl	8000dfc <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339a:	f7fd fd2f 	bl	8000dfc <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e1f5      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033ac:	4b32      	ldr	r3, [pc, #200]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80033ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1ef      	bne.n	800339a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 80a6 	beq.w	8003514 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c8:	2300      	movs	r3, #0
 80033ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80033ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10d      	bne.n	80033f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d8:	4b27      	ldr	r3, [pc, #156]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80033da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033dc:	4a26      	ldr	r2, [pc, #152]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80033de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033e4:	4b24      	ldr	r3, [pc, #144]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80033e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f0:	2301      	movs	r3, #1
 80033f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f4:	4b21      	ldr	r3, [pc, #132]	@ (800347c <HAL_RCC_OscConfig+0x508>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d118      	bne.n	8003432 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003400:	4b1e      	ldr	r3, [pc, #120]	@ (800347c <HAL_RCC_OscConfig+0x508>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1d      	ldr	r2, [pc, #116]	@ (800347c <HAL_RCC_OscConfig+0x508>)
 8003406:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800340a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340c:	f7fd fcf6 	bl	8000dfc <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003414:	f7fd fcf2 	bl	8000dfc <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e1b8      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003426:	4b15      	ldr	r3, [pc, #84]	@ (800347c <HAL_RCC_OscConfig+0x508>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d108      	bne.n	800344c <HAL_RCC_OscConfig+0x4d8>
 800343a:	4b0f      	ldr	r3, [pc, #60]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003440:	4a0d      	ldr	r2, [pc, #52]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800344a:	e029      	b.n	80034a0 <HAL_RCC_OscConfig+0x52c>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b05      	cmp	r3, #5
 8003452:	d115      	bne.n	8003480 <HAL_RCC_OscConfig+0x50c>
 8003454:	4b08      	ldr	r3, [pc, #32]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345a:	4a07      	ldr	r2, [pc, #28]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800345c:	f043 0304 	orr.w	r3, r3, #4
 8003460:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003464:	4b04      	ldr	r3, [pc, #16]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346a:	4a03      	ldr	r2, [pc, #12]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003474:	e014      	b.n	80034a0 <HAL_RCC_OscConfig+0x52c>
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000
 800347c:	40007000 	.word	0x40007000
 8003480:	4b9d      	ldr	r3, [pc, #628]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003486:	4a9c      	ldr	r2, [pc, #624]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003490:	4b99      	ldr	r3, [pc, #612]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003496:	4a98      	ldr	r2, [pc, #608]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003498:	f023 0304 	bic.w	r3, r3, #4
 800349c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d016      	beq.n	80034d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a8:	f7fd fca8 	bl	8000dfc <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b0:	f7fd fca4 	bl	8000dfc <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e168      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c6:	4b8c      	ldr	r3, [pc, #560]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0ed      	beq.n	80034b0 <HAL_RCC_OscConfig+0x53c>
 80034d4:	e015      	b.n	8003502 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d6:	f7fd fc91 	bl	8000dfc <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7fd fc8d 	bl	8000dfc <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e151      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034f4:	4b80      	ldr	r3, [pc, #512]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1ed      	bne.n	80034de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003502:	7ffb      	ldrb	r3, [r7, #31]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d105      	bne.n	8003514 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003508:	4b7b      	ldr	r3, [pc, #492]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350c:	4a7a      	ldr	r2, [pc, #488]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 800350e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003512:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d03c      	beq.n	800359a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01c      	beq.n	8003562 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003528:	4b73      	ldr	r3, [pc, #460]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 800352a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800352e:	4a72      	ldr	r2, [pc, #456]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7fd fc60 	bl	8000dfc <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003540:	f7fd fc5c 	bl	8000dfc <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e122      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003552:	4b69      	ldr	r3, [pc, #420]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003554:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0ef      	beq.n	8003540 <HAL_RCC_OscConfig+0x5cc>
 8003560:	e01b      	b.n	800359a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003562:	4b65      	ldr	r3, [pc, #404]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003564:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003568:	4a63      	ldr	r2, [pc, #396]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003572:	f7fd fc43 	bl	8000dfc <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800357a:	f7fd fc3f 	bl	8000dfc <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e105      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800358c:	4b5a      	ldr	r3, [pc, #360]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 800358e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1ef      	bne.n	800357a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 80f9 	beq.w	8003796 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	f040 80cf 	bne.w	800374c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035ae:	4b52      	ldr	r3, [pc, #328]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f003 0203 	and.w	r2, r3, #3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035be:	429a      	cmp	r2, r3
 80035c0:	d12c      	bne.n	800361c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035cc:	3b01      	subs	r3, #1
 80035ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d123      	bne.n	800361c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d11b      	bne.n	800361c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d113      	bne.n	800361c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	3b01      	subs	r3, #1
 8003602:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d109      	bne.n	800361c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	085b      	lsrs	r3, r3, #1
 8003614:	3b01      	subs	r3, #1
 8003616:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003618:	429a      	cmp	r2, r3
 800361a:	d071      	beq.n	8003700 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d068      	beq.n	80036f4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003622:	4b35      	ldr	r3, [pc, #212]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d105      	bne.n	800363a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800362e:	4b32      	ldr	r3, [pc, #200]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e0ac      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800363e:	4b2e      	ldr	r3, [pc, #184]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a2d      	ldr	r2, [pc, #180]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003644:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003648:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800364a:	f7fd fbd7 	bl	8000dfc <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003652:	f7fd fbd3 	bl	8000dfc <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e099      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003664:	4b24      	ldr	r3, [pc, #144]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1f0      	bne.n	8003652 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003670:	4b21      	ldr	r3, [pc, #132]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	4b21      	ldr	r3, [pc, #132]	@ (80036fc <HAL_RCC_OscConfig+0x788>)
 8003676:	4013      	ands	r3, r2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003680:	3a01      	subs	r2, #1
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	4311      	orrs	r1, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800368a:	0212      	lsls	r2, r2, #8
 800368c:	4311      	orrs	r1, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003692:	0852      	lsrs	r2, r2, #1
 8003694:	3a01      	subs	r2, #1
 8003696:	0552      	lsls	r2, r2, #21
 8003698:	4311      	orrs	r1, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800369e:	0852      	lsrs	r2, r2, #1
 80036a0:	3a01      	subs	r2, #1
 80036a2:	0652      	lsls	r2, r2, #25
 80036a4:	4311      	orrs	r1, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036aa:	06d2      	lsls	r2, r2, #27
 80036ac:	430a      	orrs	r2, r1
 80036ae:	4912      	ldr	r1, [pc, #72]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036b4:	4b10      	ldr	r3, [pc, #64]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a0f      	ldr	r2, [pc, #60]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 80036ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036c0:	4b0d      	ldr	r3, [pc, #52]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4a0c      	ldr	r2, [pc, #48]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 80036c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036cc:	f7fd fb96 	bl	8000dfc <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fd fb92 	bl	8000dfc <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e058      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e6:	4b04      	ldr	r3, [pc, #16]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036f2:	e050      	b.n	8003796 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e04f      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
 80036f8:	40021000 	.word	0x40021000
 80036fc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003700:	4b27      	ldr	r3, [pc, #156]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d144      	bne.n	8003796 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800370c:	4b24      	ldr	r3, [pc, #144]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a23      	ldr	r2, [pc, #140]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 8003712:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003716:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003718:	4b21      	ldr	r3, [pc, #132]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4a20      	ldr	r2, [pc, #128]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 800371e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003722:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003724:	f7fd fb6a 	bl	8000dfc <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372c:	f7fd fb66 	bl	8000dfc <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e02c      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373e:	4b18      	ldr	r3, [pc, #96]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x7b8>
 800374a:	e024      	b.n	8003796 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d01f      	beq.n	8003792 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003752:	4b13      	ldr	r3, [pc, #76]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a12      	ldr	r2, [pc, #72]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 8003758:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800375c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375e:	f7fd fb4d 	bl	8000dfc <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003766:	f7fd fb49 	bl	8000dfc <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e00f      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003778:	4b09      	ldr	r3, [pc, #36]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f0      	bne.n	8003766 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003784:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	4905      	ldr	r1, [pc, #20]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <HAL_RCC_OscConfig+0x830>)
 800378c:	4013      	ands	r3, r2
 800378e:	60cb      	str	r3, [r1, #12]
 8003790:	e001      	b.n	8003796 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3720      	adds	r7, #32
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	feeefffc 	.word	0xfeeefffc

080037a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0e7      	b.n	800398c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037bc:	4b75      	ldr	r3, [pc, #468]	@ (8003994 <HAL_RCC_ClockConfig+0x1ec>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d910      	bls.n	80037ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b72      	ldr	r3, [pc, #456]	@ (8003994 <HAL_RCC_ClockConfig+0x1ec>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 0207 	bic.w	r2, r3, #7
 80037d2:	4970      	ldr	r1, [pc, #448]	@ (8003994 <HAL_RCC_ClockConfig+0x1ec>)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b6e      	ldr	r3, [pc, #440]	@ (8003994 <HAL_RCC_ClockConfig+0x1ec>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0cf      	b.n	800398c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d010      	beq.n	800381a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	4b66      	ldr	r3, [pc, #408]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003804:	429a      	cmp	r2, r3
 8003806:	d908      	bls.n	800381a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003808:	4b63      	ldr	r3, [pc, #396]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4960      	ldr	r1, [pc, #384]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d04c      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b03      	cmp	r3, #3
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800382e:	4b5a      	ldr	r3, [pc, #360]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d121      	bne.n	800387e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e0a6      	b.n	800398c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003846:	4b54      	ldr	r3, [pc, #336]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d115      	bne.n	800387e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e09a      	b.n	800398c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d107      	bne.n	800386e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800385e:	4b4e      	ldr	r3, [pc, #312]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e08e      	b.n	800398c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800386e:	4b4a      	ldr	r3, [pc, #296]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e086      	b.n	800398c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800387e:	4b46      	ldr	r3, [pc, #280]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f023 0203 	bic.w	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	4943      	ldr	r1, [pc, #268]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 800388c:	4313      	orrs	r3, r2
 800388e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003890:	f7fd fab4 	bl	8000dfc <HAL_GetTick>
 8003894:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	e00a      	b.n	80038ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003898:	f7fd fab0 	bl	8000dfc <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e06e      	b.n	800398c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 020c 	and.w	r2, r3, #12
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	429a      	cmp	r2, r3
 80038be:	d1eb      	bne.n	8003898 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d010      	beq.n	80038ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	4b31      	ldr	r3, [pc, #196]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038d8:	429a      	cmp	r2, r3
 80038da:	d208      	bcs.n	80038ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	492b      	ldr	r1, [pc, #172]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038ee:	4b29      	ldr	r3, [pc, #164]	@ (8003994 <HAL_RCC_ClockConfig+0x1ec>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d210      	bcs.n	800391e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fc:	4b25      	ldr	r3, [pc, #148]	@ (8003994 <HAL_RCC_ClockConfig+0x1ec>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f023 0207 	bic.w	r2, r3, #7
 8003904:	4923      	ldr	r1, [pc, #140]	@ (8003994 <HAL_RCC_ClockConfig+0x1ec>)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	4313      	orrs	r3, r2
 800390a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390c:	4b21      	ldr	r3, [pc, #132]	@ (8003994 <HAL_RCC_ClockConfig+0x1ec>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d001      	beq.n	800391e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e036      	b.n	800398c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800392a:	4b1b      	ldr	r3, [pc, #108]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	4918      	ldr	r1, [pc, #96]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 8003938:	4313      	orrs	r3, r2
 800393a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d009      	beq.n	800395c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003948:	4b13      	ldr	r3, [pc, #76]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4910      	ldr	r1, [pc, #64]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 8003958:	4313      	orrs	r3, r2
 800395a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800395c:	f000 f824 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b0d      	ldr	r3, [pc, #52]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	490b      	ldr	r1, [pc, #44]	@ (800399c <HAL_RCC_ClockConfig+0x1f4>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
 8003978:	4a09      	ldr	r2, [pc, #36]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f8>)
 800397a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800397c:	4b09      	ldr	r3, [pc, #36]	@ (80039a4 <HAL_RCC_ClockConfig+0x1fc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7fd f92d 	bl	8000be0 <HAL_InitTick>
 8003986:	4603      	mov	r3, r0
 8003988:	72fb      	strb	r3, [r7, #11]

  return status;
 800398a:	7afb      	ldrb	r3, [r7, #11]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40022000 	.word	0x40022000
 8003998:	40021000 	.word	0x40021000
 800399c:	080079f4 	.word	0x080079f4
 80039a0:	20000000 	.word	0x20000000
 80039a4:	20000004 	.word	0x20000004

080039a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b089      	sub	sp, #36	@ 0x24
 80039ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	2300      	movs	r3, #0
 80039b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039b6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039c0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0x34>
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b0c      	cmp	r3, #12
 80039d4:	d121      	bne.n	8003a1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d11e      	bne.n	8003a1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039dc:	4b34      	ldr	r3, [pc, #208]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d107      	bne.n	80039f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039e8:	4b31      	ldr	r3, [pc, #196]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	e005      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039f8:	4b2d      	ldr	r3, [pc, #180]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	091b      	lsrs	r3, r3, #4
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a04:	4a2b      	ldr	r2, [pc, #172]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10d      	bne.n	8003a30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a18:	e00a      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d102      	bne.n	8003a26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a20:	4b25      	ldr	r3, [pc, #148]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	e004      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a2c:	4b23      	ldr	r3, [pc, #140]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x114>)
 8003a2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	d134      	bne.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a36:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d003      	beq.n	8003a4e <HAL_RCC_GetSysClockFreq+0xa6>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d003      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0xac>
 8003a4c:	e005      	b.n	8003a5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a50:	617b      	str	r3, [r7, #20]
      break;
 8003a52:	e005      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a54:	4b19      	ldr	r3, [pc, #100]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x114>)
 8003a56:	617b      	str	r3, [r7, #20]
      break;
 8003a58:	e002      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	617b      	str	r3, [r7, #20]
      break;
 8003a5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a60:	4b13      	ldr	r3, [pc, #76]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a6e:	4b10      	ldr	r3, [pc, #64]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	0a1b      	lsrs	r3, r3, #8
 8003a74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	fb03 f202 	mul.w	r2, r3, r2
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a86:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	0e5b      	lsrs	r3, r3, #25
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	3301      	adds	r3, #1
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003aa0:	69bb      	ldr	r3, [r7, #24]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3724      	adds	r7, #36	@ 0x24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	08007a0c 	.word	0x08007a0c
 8003ab8:	00f42400 	.word	0x00f42400
 8003abc:	007a1200 	.word	0x007a1200

08003ac0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac4:	4b03      	ldr	r3, [pc, #12]	@ (8003ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20000000 	.word	0x20000000

08003ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003adc:	f7ff fff0 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	0a1b      	lsrs	r3, r3, #8
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4904      	ldr	r1, [pc, #16]	@ (8003b00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40021000 	.word	0x40021000
 8003b00:	08007a04 	.word	0x08007a04

08003b04 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	220f      	movs	r2, #15
 8003b12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003b14:	4b12      	ldr	r3, [pc, #72]	@ (8003b60 <HAL_RCC_GetClockConfig+0x5c>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 0203 	and.w	r2, r3, #3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003b20:	4b0f      	ldr	r3, [pc, #60]	@ (8003b60 <HAL_RCC_GetClockConfig+0x5c>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b60 <HAL_RCC_GetClockConfig+0x5c>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003b38:	4b09      	ldr	r3, [pc, #36]	@ (8003b60 <HAL_RCC_GetClockConfig+0x5c>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	08db      	lsrs	r3, r3, #3
 8003b3e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003b46:	4b07      	ldr	r3, [pc, #28]	@ (8003b64 <HAL_RCC_GetClockConfig+0x60>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0207 	and.w	r2, r3, #7
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	601a      	str	r2, [r3, #0]
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40022000 	.word	0x40022000

08003b68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b70:	2300      	movs	r3, #0
 8003b72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b74:	4b2a      	ldr	r3, [pc, #168]	@ (8003c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b80:	f7ff f994 	bl	8002eac <HAL_PWREx_GetVoltageRange>
 8003b84:	6178      	str	r0, [r7, #20]
 8003b86:	e014      	b.n	8003bb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b88:	4b25      	ldr	r3, [pc, #148]	@ (8003c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b8c:	4a24      	ldr	r2, [pc, #144]	@ (8003c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b92:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b94:	4b22      	ldr	r3, [pc, #136]	@ (8003c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ba0:	f7ff f984 	bl	8002eac <HAL_PWREx_GetVoltageRange>
 8003ba4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003baa:	4a1d      	ldr	r2, [pc, #116]	@ (8003c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bb0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bb8:	d10b      	bne.n	8003bd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b80      	cmp	r3, #128	@ 0x80
 8003bbe:	d919      	bls.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003bc4:	d902      	bls.n	8003bcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	e013      	b.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bcc:	2301      	movs	r3, #1
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	e010      	b.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b80      	cmp	r3, #128	@ 0x80
 8003bd6:	d902      	bls.n	8003bde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bd8:	2303      	movs	r3, #3
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	e00a      	b.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b80      	cmp	r3, #128	@ 0x80
 8003be2:	d102      	bne.n	8003bea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003be4:	2302      	movs	r3, #2
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	e004      	b.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b70      	cmp	r3, #112	@ 0x70
 8003bee:	d101      	bne.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f023 0207 	bic.w	r2, r3, #7
 8003bfc:	4909      	ldr	r1, [pc, #36]	@ (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c04:	4b07      	ldr	r3, [pc, #28]	@ (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d001      	beq.n	8003c16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40022000 	.word	0x40022000

08003c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c30:	2300      	movs	r3, #0
 8003c32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c34:	2300      	movs	r3, #0
 8003c36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d041      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c48:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c4c:	d02a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c4e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c52:	d824      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c58:	d008      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c5e:	d81e      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c68:	d010      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c6a:	e018      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c6c:	4b86      	ldr	r3, [pc, #536]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a85      	ldr	r2, [pc, #532]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c78:	e015      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	2100      	movs	r1, #0
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 facd 	bl	8004220 <RCCEx_PLLSAI1_Config>
 8003c86:	4603      	mov	r3, r0
 8003c88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c8a:	e00c      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3320      	adds	r3, #32
 8003c90:	2100      	movs	r1, #0
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fbb6 	bl	8004404 <RCCEx_PLLSAI2_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c9c:	e003      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ca6:	7cfb      	ldrb	r3, [r7, #19]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10b      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cac:	4b76      	ldr	r3, [pc, #472]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cba:	4973      	ldr	r1, [pc, #460]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003cc2:	e001      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d041      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cd8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003cdc:	d02a      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003cde:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ce2:	d824      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ce4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ce8:	d008      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cee:	d81e      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003cf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cf8:	d010      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cfa:	e018      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cfc:	4b62      	ldr	r3, [pc, #392]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4a61      	ldr	r2, [pc, #388]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d08:	e015      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	2100      	movs	r1, #0
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fa85 	bl	8004220 <RCCEx_PLLSAI1_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d1a:	e00c      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3320      	adds	r3, #32
 8003d20:	2100      	movs	r1, #0
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fb6e 	bl	8004404 <RCCEx_PLLSAI2_Config>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d2c:	e003      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	74fb      	strb	r3, [r7, #19]
      break;
 8003d32:	e000      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d36:	7cfb      	ldrb	r3, [r7, #19]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10b      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d3c:	4b52      	ldr	r3, [pc, #328]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d4a:	494f      	ldr	r1, [pc, #316]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d52:	e001      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d54:	7cfb      	ldrb	r3, [r7, #19]
 8003d56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 80a0 	beq.w	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d66:	2300      	movs	r3, #0
 8003d68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d6a:	4b47      	ldr	r3, [pc, #284]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00d      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d80:	4b41      	ldr	r3, [pc, #260]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d84:	4a40      	ldr	r2, [pc, #256]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d8c:	4b3e      	ldr	r3, [pc, #248]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a3a      	ldr	r2, [pc, #232]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003da8:	f7fd f828 	bl	8000dfc <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dae:	e009      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db0:	f7fd f824 	bl	8000dfc <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d902      	bls.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	74fb      	strb	r3, [r7, #19]
        break;
 8003dc2:	e005      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dc4:	4b31      	ldr	r3, [pc, #196]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0ef      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003dd0:	7cfb      	ldrb	r3, [r7, #19]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d15c      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ddc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003de0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d01f      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d019      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003df4:	4b24      	ldr	r3, [pc, #144]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e00:	4b21      	ldr	r3, [pc, #132]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e06:	4a20      	ldr	r2, [pc, #128]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e10:	4b1d      	ldr	r3, [pc, #116]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e16:	4a1c      	ldr	r2, [pc, #112]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e20:	4a19      	ldr	r2, [pc, #100]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d016      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e32:	f7fc ffe3 	bl	8000dfc <HAL_GetTick>
 8003e36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e38:	e00b      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3a:	f7fc ffdf 	bl	8000dfc <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d902      	bls.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	74fb      	strb	r3, [r7, #19]
            break;
 8003e50:	e006      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e52:	4b0d      	ldr	r3, [pc, #52]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0ec      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e60:	7cfb      	ldrb	r3, [r7, #19]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e66:	4b08      	ldr	r3, [pc, #32]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e76:	4904      	ldr	r1, [pc, #16]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e7e:	e009      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e80:	7cfb      	ldrb	r3, [r7, #19]
 8003e82:	74bb      	strb	r3, [r7, #18]
 8003e84:	e006      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e86:	bf00      	nop
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e90:	7cfb      	ldrb	r3, [r7, #19]
 8003e92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e94:	7c7b      	ldrb	r3, [r7, #17]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d105      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e9a:	4ba6      	ldr	r3, [pc, #664]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e9e:	4aa5      	ldr	r2, [pc, #660]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ea4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eb2:	4ba0      	ldr	r3, [pc, #640]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb8:	f023 0203 	bic.w	r2, r3, #3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec0:	499c      	ldr	r1, [pc, #624]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ed4:	4b97      	ldr	r3, [pc, #604]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eda:	f023 020c 	bic.w	r2, r3, #12
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee2:	4994      	ldr	r1, [pc, #592]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ef6:	4b8f      	ldr	r3, [pc, #572]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f04:	498b      	ldr	r1, [pc, #556]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f18:	4b86      	ldr	r3, [pc, #536]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f26:	4983      	ldr	r1, [pc, #524]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f3a:	4b7e      	ldr	r3, [pc, #504]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f48:	497a      	ldr	r1, [pc, #488]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f5c:	4b75      	ldr	r3, [pc, #468]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f62:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6a:	4972      	ldr	r1, [pc, #456]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f84:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f8c:	4969      	ldr	r1, [pc, #420]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fa0:	4b64      	ldr	r3, [pc, #400]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fae:	4961      	ldr	r1, [pc, #388]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fc2:	4b5c      	ldr	r3, [pc, #368]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd0:	4958      	ldr	r1, [pc, #352]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fe4:	4b53      	ldr	r3, [pc, #332]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff2:	4950      	ldr	r1, [pc, #320]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004006:	4b4b      	ldr	r3, [pc, #300]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004014:	4947      	ldr	r1, [pc, #284]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004028:	4b42      	ldr	r3, [pc, #264]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800402a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800402e:	f023 0203 	bic.w	r2, r3, #3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004036:	493f      	ldr	r1, [pc, #252]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d028      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800404a:	4b3a      	ldr	r3, [pc, #232]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004050:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004058:	4936      	ldr	r1, [pc, #216]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004064:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004068:	d106      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800406a:	4b32      	ldr	r3, [pc, #200]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	4a31      	ldr	r2, [pc, #196]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004070:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004074:	60d3      	str	r3, [r2, #12]
 8004076:	e011      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004080:	d10c      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3304      	adds	r3, #4
 8004086:	2101      	movs	r1, #1
 8004088:	4618      	mov	r0, r3
 800408a:	f000 f8c9 	bl	8004220 <RCCEx_PLLSAI1_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004092:	7cfb      	ldrb	r3, [r7, #19]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004098:	7cfb      	ldrb	r3, [r7, #19]
 800409a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d028      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040a8:	4b22      	ldr	r3, [pc, #136]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b6:	491f      	ldr	r1, [pc, #124]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040c6:	d106      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4a19      	ldr	r2, [pc, #100]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040d2:	60d3      	str	r3, [r2, #12]
 80040d4:	e011      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040de:	d10c      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 f89a 	bl	8004220 <RCCEx_PLLSAI1_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f0:	7cfb      	ldrb	r3, [r7, #19]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80040f6:	7cfb      	ldrb	r3, [r7, #19]
 80040f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d02a      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004106:	4b0b      	ldr	r3, [pc, #44]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004114:	4907      	ldr	r1, [pc, #28]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004120:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004124:	d108      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004126:	4b03      	ldr	r3, [pc, #12]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	4a02      	ldr	r2, [pc, #8]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800412c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004130:	60d3      	str	r3, [r2, #12]
 8004132:	e013      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004134:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800413c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004140:	d10c      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3304      	adds	r3, #4
 8004146:	2101      	movs	r1, #1
 8004148:	4618      	mov	r0, r3
 800414a:	f000 f869 	bl	8004220 <RCCEx_PLLSAI1_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004152:	7cfb      	ldrb	r3, [r7, #19]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004158:	7cfb      	ldrb	r3, [r7, #19]
 800415a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d02f      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004168:	4b2c      	ldr	r3, [pc, #176]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004176:	4929      	ldr	r1, [pc, #164]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004182:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004186:	d10d      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3304      	adds	r3, #4
 800418c:	2102      	movs	r1, #2
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f846 	bl	8004220 <RCCEx_PLLSAI1_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d014      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800419e:	7cfb      	ldrb	r3, [r7, #19]
 80041a0:	74bb      	strb	r3, [r7, #18]
 80041a2:	e011      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041ac:	d10c      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3320      	adds	r3, #32
 80041b2:	2102      	movs	r1, #2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 f925 	bl	8004404 <RCCEx_PLLSAI2_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041be:	7cfb      	ldrb	r3, [r7, #19]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00b      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041d4:	4b11      	ldr	r3, [pc, #68]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041da:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041e4:	490d      	ldr	r1, [pc, #52]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00b      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041f8:	4b08      	ldr	r3, [pc, #32]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004208:	4904      	ldr	r1, [pc, #16]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004210:	7cbb      	ldrb	r3, [r7, #18]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40021000 	.word	0x40021000

08004220 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800422e:	4b74      	ldr	r3, [pc, #464]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d018      	beq.n	800426c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800423a:	4b71      	ldr	r3, [pc, #452]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f003 0203 	and.w	r2, r3, #3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d10d      	bne.n	8004266 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
       ||
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004252:	4b6b      	ldr	r3, [pc, #428]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	091b      	lsrs	r3, r3, #4
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
       ||
 8004262:	429a      	cmp	r2, r3
 8004264:	d047      	beq.n	80042f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	73fb      	strb	r3, [r7, #15]
 800426a:	e044      	b.n	80042f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b03      	cmp	r3, #3
 8004272:	d018      	beq.n	80042a6 <RCCEx_PLLSAI1_Config+0x86>
 8004274:	2b03      	cmp	r3, #3
 8004276:	d825      	bhi.n	80042c4 <RCCEx_PLLSAI1_Config+0xa4>
 8004278:	2b01      	cmp	r3, #1
 800427a:	d002      	beq.n	8004282 <RCCEx_PLLSAI1_Config+0x62>
 800427c:	2b02      	cmp	r3, #2
 800427e:	d009      	beq.n	8004294 <RCCEx_PLLSAI1_Config+0x74>
 8004280:	e020      	b.n	80042c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004282:	4b5f      	ldr	r3, [pc, #380]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d11d      	bne.n	80042ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004292:	e01a      	b.n	80042ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004294:	4b5a      	ldr	r3, [pc, #360]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800429c:	2b00      	cmp	r3, #0
 800429e:	d116      	bne.n	80042ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a4:	e013      	b.n	80042ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042a6:	4b56      	ldr	r3, [pc, #344]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10f      	bne.n	80042d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042b2:	4b53      	ldr	r3, [pc, #332]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042c2:	e006      	b.n	80042d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
      break;
 80042c8:	e004      	b.n	80042d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ca:	bf00      	nop
 80042cc:	e002      	b.n	80042d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ce:	bf00      	nop
 80042d0:	e000      	b.n	80042d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10d      	bne.n	80042f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042da:	4b49      	ldr	r3, [pc, #292]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6819      	ldr	r1, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	430b      	orrs	r3, r1
 80042f0:	4943      	ldr	r1, [pc, #268]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d17c      	bne.n	80043f6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042fc:	4b40      	ldr	r3, [pc, #256]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a3f      	ldr	r2, [pc, #252]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004302:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004306:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004308:	f7fc fd78 	bl	8000dfc <HAL_GetTick>
 800430c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800430e:	e009      	b.n	8004324 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004310:	f7fc fd74 	bl	8000dfc <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d902      	bls.n	8004324 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	73fb      	strb	r3, [r7, #15]
        break;
 8004322:	e005      	b.n	8004330 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004324:	4b36      	ldr	r3, [pc, #216]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1ef      	bne.n	8004310 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d15f      	bne.n	80043f6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d110      	bne.n	800435e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800433c:	4b30      	ldr	r3, [pc, #192]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004344:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6892      	ldr	r2, [r2, #8]
 800434c:	0211      	lsls	r1, r2, #8
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68d2      	ldr	r2, [r2, #12]
 8004352:	06d2      	lsls	r2, r2, #27
 8004354:	430a      	orrs	r2, r1
 8004356:	492a      	ldr	r1, [pc, #168]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004358:	4313      	orrs	r3, r2
 800435a:	610b      	str	r3, [r1, #16]
 800435c:	e027      	b.n	80043ae <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d112      	bne.n	800438a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004364:	4b26      	ldr	r3, [pc, #152]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800436c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6892      	ldr	r2, [r2, #8]
 8004374:	0211      	lsls	r1, r2, #8
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6912      	ldr	r2, [r2, #16]
 800437a:	0852      	lsrs	r2, r2, #1
 800437c:	3a01      	subs	r2, #1
 800437e:	0552      	lsls	r2, r2, #21
 8004380:	430a      	orrs	r2, r1
 8004382:	491f      	ldr	r1, [pc, #124]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004384:	4313      	orrs	r3, r2
 8004386:	610b      	str	r3, [r1, #16]
 8004388:	e011      	b.n	80043ae <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800438a:	4b1d      	ldr	r3, [pc, #116]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004392:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6892      	ldr	r2, [r2, #8]
 800439a:	0211      	lsls	r1, r2, #8
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6952      	ldr	r2, [r2, #20]
 80043a0:	0852      	lsrs	r2, r2, #1
 80043a2:	3a01      	subs	r2, #1
 80043a4:	0652      	lsls	r2, r2, #25
 80043a6:	430a      	orrs	r2, r1
 80043a8:	4915      	ldr	r1, [pc, #84]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043ae:	4b14      	ldr	r3, [pc, #80]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a13      	ldr	r2, [pc, #76]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ba:	f7fc fd1f 	bl	8000dfc <HAL_GetTick>
 80043be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043c0:	e009      	b.n	80043d6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043c2:	f7fc fd1b 	bl	8000dfc <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d902      	bls.n	80043d6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	73fb      	strb	r3, [r7, #15]
          break;
 80043d4:	e005      	b.n	80043e2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0ef      	beq.n	80043c2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d106      	bne.n	80043f6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043e8:	4b05      	ldr	r3, [pc, #20]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	4903      	ldr	r1, [pc, #12]	@ (8004400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40021000 	.word	0x40021000

08004404 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004412:	4b69      	ldr	r3, [pc, #420]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d018      	beq.n	8004450 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800441e:	4b66      	ldr	r3, [pc, #408]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f003 0203 	and.w	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d10d      	bne.n	800444a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
       ||
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004436:	4b60      	ldr	r3, [pc, #384]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
       ||
 8004446:	429a      	cmp	r2, r3
 8004448:	d047      	beq.n	80044da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
 800444e:	e044      	b.n	80044da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b03      	cmp	r3, #3
 8004456:	d018      	beq.n	800448a <RCCEx_PLLSAI2_Config+0x86>
 8004458:	2b03      	cmp	r3, #3
 800445a:	d825      	bhi.n	80044a8 <RCCEx_PLLSAI2_Config+0xa4>
 800445c:	2b01      	cmp	r3, #1
 800445e:	d002      	beq.n	8004466 <RCCEx_PLLSAI2_Config+0x62>
 8004460:	2b02      	cmp	r3, #2
 8004462:	d009      	beq.n	8004478 <RCCEx_PLLSAI2_Config+0x74>
 8004464:	e020      	b.n	80044a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004466:	4b54      	ldr	r3, [pc, #336]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d11d      	bne.n	80044ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004476:	e01a      	b.n	80044ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004478:	4b4f      	ldr	r3, [pc, #316]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004480:	2b00      	cmp	r3, #0
 8004482:	d116      	bne.n	80044b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004488:	e013      	b.n	80044b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800448a:	4b4b      	ldr	r3, [pc, #300]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10f      	bne.n	80044b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004496:	4b48      	ldr	r3, [pc, #288]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044a6:	e006      	b.n	80044b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
      break;
 80044ac:	e004      	b.n	80044b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044ae:	bf00      	nop
 80044b0:	e002      	b.n	80044b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044b2:	bf00      	nop
 80044b4:	e000      	b.n	80044b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10d      	bne.n	80044da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044be:	4b3e      	ldr	r3, [pc, #248]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6819      	ldr	r1, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	430b      	orrs	r3, r1
 80044d4:	4938      	ldr	r1, [pc, #224]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044da:	7bfb      	ldrb	r3, [r7, #15]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d166      	bne.n	80045ae <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044e0:	4b35      	ldr	r3, [pc, #212]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a34      	ldr	r2, [pc, #208]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ec:	f7fc fc86 	bl	8000dfc <HAL_GetTick>
 80044f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044f2:	e009      	b.n	8004508 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044f4:	f7fc fc82 	bl	8000dfc <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d902      	bls.n	8004508 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	73fb      	strb	r3, [r7, #15]
        break;
 8004506:	e005      	b.n	8004514 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004508:	4b2b      	ldr	r3, [pc, #172]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1ef      	bne.n	80044f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d149      	bne.n	80045ae <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d110      	bne.n	8004542 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004520:	4b25      	ldr	r3, [pc, #148]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004528:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6892      	ldr	r2, [r2, #8]
 8004530:	0211      	lsls	r1, r2, #8
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68d2      	ldr	r2, [r2, #12]
 8004536:	06d2      	lsls	r2, r2, #27
 8004538:	430a      	orrs	r2, r1
 800453a:	491f      	ldr	r1, [pc, #124]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800453c:	4313      	orrs	r3, r2
 800453e:	614b      	str	r3, [r1, #20]
 8004540:	e011      	b.n	8004566 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004542:	4b1d      	ldr	r3, [pc, #116]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800454a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6892      	ldr	r2, [r2, #8]
 8004552:	0211      	lsls	r1, r2, #8
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6912      	ldr	r2, [r2, #16]
 8004558:	0852      	lsrs	r2, r2, #1
 800455a:	3a01      	subs	r2, #1
 800455c:	0652      	lsls	r2, r2, #25
 800455e:	430a      	orrs	r2, r1
 8004560:	4915      	ldr	r1, [pc, #84]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004562:	4313      	orrs	r3, r2
 8004564:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004566:	4b14      	ldr	r3, [pc, #80]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a13      	ldr	r2, [pc, #76]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800456c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004570:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004572:	f7fc fc43 	bl	8000dfc <HAL_GetTick>
 8004576:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004578:	e009      	b.n	800458e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800457a:	f7fc fc3f 	bl	8000dfc <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d902      	bls.n	800458e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	73fb      	strb	r3, [r7, #15]
          break;
 800458c:	e005      	b.n	800459a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800458e:	4b0a      	ldr	r3, [pc, #40]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0ef      	beq.n	800457a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d106      	bne.n	80045ae <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045a0:	4b05      	ldr	r3, [pc, #20]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045a2:	695a      	ldr	r2, [r3, #20]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	4903      	ldr	r1, [pc, #12]	@ (80045b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40021000 	.word	0x40021000

080045bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e049      	b.n	8004662 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f841 	bl	800466a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3304      	adds	r3, #4
 80045f8:	4619      	mov	r1, r3
 80045fa:	4610      	mov	r0, r2
 80045fc:	f000 f9e0 	bl	80049c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b01      	cmp	r3, #1
 8004692:	d001      	beq.n	8004698 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e04f      	b.n	8004738 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a23      	ldr	r2, [pc, #140]	@ (8004744 <HAL_TIM_Base_Start_IT+0xc4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d01d      	beq.n	80046f6 <HAL_TIM_Base_Start_IT+0x76>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c2:	d018      	beq.n	80046f6 <HAL_TIM_Base_Start_IT+0x76>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004748 <HAL_TIM_Base_Start_IT+0xc8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d013      	beq.n	80046f6 <HAL_TIM_Base_Start_IT+0x76>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a1e      	ldr	r2, [pc, #120]	@ (800474c <HAL_TIM_Base_Start_IT+0xcc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00e      	beq.n	80046f6 <HAL_TIM_Base_Start_IT+0x76>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004750 <HAL_TIM_Base_Start_IT+0xd0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d009      	beq.n	80046f6 <HAL_TIM_Base_Start_IT+0x76>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004754 <HAL_TIM_Base_Start_IT+0xd4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <HAL_TIM_Base_Start_IT+0x76>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a19      	ldr	r2, [pc, #100]	@ (8004758 <HAL_TIM_Base_Start_IT+0xd8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d115      	bne.n	8004722 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	4b17      	ldr	r3, [pc, #92]	@ (800475c <HAL_TIM_Base_Start_IT+0xdc>)
 80046fe:	4013      	ands	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b06      	cmp	r3, #6
 8004706:	d015      	beq.n	8004734 <HAL_TIM_Base_Start_IT+0xb4>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800470e:	d011      	beq.n	8004734 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004720:	e008      	b.n	8004734 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0201 	orr.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	e000      	b.n	8004736 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004734:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	40012c00 	.word	0x40012c00
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800
 8004750:	40000c00 	.word	0x40000c00
 8004754:	40013400 	.word	0x40013400
 8004758:	40014000 	.word	0x40014000
 800475c:	00010007 	.word	0x00010007

08004760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d020      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01b      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0202 	mvn.w	r2, #2
 8004794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f8e9 	bl	8004982 <HAL_TIM_IC_CaptureCallback>
 80047b0:	e005      	b.n	80047be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f8db 	bl	800496e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f8ec 	bl	8004996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d020      	beq.n	8004810 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01b      	beq.n	8004810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f06f 0204 	mvn.w	r2, #4
 80047e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2202      	movs	r2, #2
 80047e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f8c3 	bl	8004982 <HAL_TIM_IC_CaptureCallback>
 80047fc:	e005      	b.n	800480a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f8b5 	bl	800496e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f8c6 	bl	8004996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d020      	beq.n	800485c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01b      	beq.n	800485c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0208 	mvn.w	r2, #8
 800482c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2204      	movs	r2, #4
 8004832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f89d 	bl	8004982 <HAL_TIM_IC_CaptureCallback>
 8004848:	e005      	b.n	8004856 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f88f 	bl	800496e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f8a0 	bl	8004996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2b00      	cmp	r3, #0
 8004864:	d020      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01b      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0210 	mvn.w	r2, #16
 8004878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2208      	movs	r2, #8
 800487e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f877 	bl	8004982 <HAL_TIM_IC_CaptureCallback>
 8004894:	e005      	b.n	80048a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f869 	bl	800496e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f87a 	bl	8004996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00c      	beq.n	80048cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0201 	mvn.w	r2, #1
 80048c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fb ffdc 	bl	8000884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d104      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00c      	beq.n	80048fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d007      	beq.n	80048fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80048f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f913 	bl	8004b20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00c      	beq.n	800491e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800490a:	2b00      	cmp	r3, #0
 800490c:	d007      	beq.n	800491e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f90b 	bl	8004b34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00c      	beq.n	8004942 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800493a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f834 	bl	80049aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00c      	beq.n	8004966 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f06f 0220 	mvn.w	r2, #32
 800495e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f8d3 	bl	8004b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004966:	bf00      	nop
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a46      	ldr	r2, [pc, #280]	@ (8004aec <TIM_Base_SetConfig+0x12c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d013      	beq.n	8004a00 <TIM_Base_SetConfig+0x40>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049de:	d00f      	beq.n	8004a00 <TIM_Base_SetConfig+0x40>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a43      	ldr	r2, [pc, #268]	@ (8004af0 <TIM_Base_SetConfig+0x130>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d00b      	beq.n	8004a00 <TIM_Base_SetConfig+0x40>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a42      	ldr	r2, [pc, #264]	@ (8004af4 <TIM_Base_SetConfig+0x134>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d007      	beq.n	8004a00 <TIM_Base_SetConfig+0x40>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a41      	ldr	r2, [pc, #260]	@ (8004af8 <TIM_Base_SetConfig+0x138>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d003      	beq.n	8004a00 <TIM_Base_SetConfig+0x40>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a40      	ldr	r2, [pc, #256]	@ (8004afc <TIM_Base_SetConfig+0x13c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d108      	bne.n	8004a12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a35      	ldr	r2, [pc, #212]	@ (8004aec <TIM_Base_SetConfig+0x12c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01f      	beq.n	8004a5a <TIM_Base_SetConfig+0x9a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a20:	d01b      	beq.n	8004a5a <TIM_Base_SetConfig+0x9a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a32      	ldr	r2, [pc, #200]	@ (8004af0 <TIM_Base_SetConfig+0x130>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d017      	beq.n	8004a5a <TIM_Base_SetConfig+0x9a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a31      	ldr	r2, [pc, #196]	@ (8004af4 <TIM_Base_SetConfig+0x134>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <TIM_Base_SetConfig+0x9a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a30      	ldr	r2, [pc, #192]	@ (8004af8 <TIM_Base_SetConfig+0x138>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00f      	beq.n	8004a5a <TIM_Base_SetConfig+0x9a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a2f      	ldr	r2, [pc, #188]	@ (8004afc <TIM_Base_SetConfig+0x13c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00b      	beq.n	8004a5a <TIM_Base_SetConfig+0x9a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a2e      	ldr	r2, [pc, #184]	@ (8004b00 <TIM_Base_SetConfig+0x140>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d007      	beq.n	8004a5a <TIM_Base_SetConfig+0x9a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a2d      	ldr	r2, [pc, #180]	@ (8004b04 <TIM_Base_SetConfig+0x144>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d003      	beq.n	8004a5a <TIM_Base_SetConfig+0x9a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a2c      	ldr	r2, [pc, #176]	@ (8004b08 <TIM_Base_SetConfig+0x148>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d108      	bne.n	8004a6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a16      	ldr	r2, [pc, #88]	@ (8004aec <TIM_Base_SetConfig+0x12c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00f      	beq.n	8004ab8 <TIM_Base_SetConfig+0xf8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a18      	ldr	r2, [pc, #96]	@ (8004afc <TIM_Base_SetConfig+0x13c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00b      	beq.n	8004ab8 <TIM_Base_SetConfig+0xf8>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a17      	ldr	r2, [pc, #92]	@ (8004b00 <TIM_Base_SetConfig+0x140>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d007      	beq.n	8004ab8 <TIM_Base_SetConfig+0xf8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a16      	ldr	r2, [pc, #88]	@ (8004b04 <TIM_Base_SetConfig+0x144>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d003      	beq.n	8004ab8 <TIM_Base_SetConfig+0xf8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a15      	ldr	r2, [pc, #84]	@ (8004b08 <TIM_Base_SetConfig+0x148>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d103      	bne.n	8004ac0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d105      	bne.n	8004ade <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f023 0201 	bic.w	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	611a      	str	r2, [r3, #16]
  }
}
 8004ade:	bf00      	nop
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40012c00 	.word	0x40012c00
 8004af0:	40000400 	.word	0x40000400
 8004af4:	40000800 	.word	0x40000800
 8004af8:	40000c00 	.word	0x40000c00
 8004afc:	40013400 	.word	0x40013400
 8004b00:	40014000 	.word	0x40014000
 8004b04:	40014400 	.word	0x40014400
 8004b08:	40014800 	.word	0x40014800

08004b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <__NVIC_SetPriority>:
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	6039      	str	r1, [r7, #0]
 8004b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	db0a      	blt.n	8004b72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	490c      	ldr	r1, [pc, #48]	@ (8004b94 <__NVIC_SetPriority+0x4c>)
 8004b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b66:	0112      	lsls	r2, r2, #4
 8004b68:	b2d2      	uxtb	r2, r2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004b70:	e00a      	b.n	8004b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	4908      	ldr	r1, [pc, #32]	@ (8004b98 <__NVIC_SetPriority+0x50>)
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	3b04      	subs	r3, #4
 8004b80:	0112      	lsls	r2, r2, #4
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	440b      	add	r3, r1
 8004b86:	761a      	strb	r2, [r3, #24]
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	e000e100 	.word	0xe000e100
 8004b98:	e000ed00 	.word	0xe000ed00

08004b9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ba0:	4b05      	ldr	r3, [pc, #20]	@ (8004bb8 <SysTick_Handler+0x1c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004ba4:	f001 fd46 	bl	8006634 <xTaskGetSchedulerState>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d001      	beq.n	8004bb2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004bae:	f002 fb3b 	bl	8007228 <xPortSysTickHandler>
  }
}
 8004bb2:	bf00      	nop
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	e000e010 	.word	0xe000e010

08004bbc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	f06f 0004 	mvn.w	r0, #4
 8004bc6:	f7ff ffbf 	bl	8004b48 <__NVIC_SetPriority>
#endif
}
 8004bca:	bf00      	nop
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bd6:	f3ef 8305 	mrs	r3, IPSR
 8004bda:	603b      	str	r3, [r7, #0]
  return(result);
 8004bdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004be2:	f06f 0305 	mvn.w	r3, #5
 8004be6:	607b      	str	r3, [r7, #4]
 8004be8:	e00c      	b.n	8004c04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004bea:	4b0a      	ldr	r3, [pc, #40]	@ (8004c14 <osKernelInitialize+0x44>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d105      	bne.n	8004bfe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004bf2:	4b08      	ldr	r3, [pc, #32]	@ (8004c14 <osKernelInitialize+0x44>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	607b      	str	r3, [r7, #4]
 8004bfc:	e002      	b.n	8004c04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004c02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c04:	687b      	ldr	r3, [r7, #4]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	20000204 	.word	0x20000204

08004c18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c1e:	f3ef 8305 	mrs	r3, IPSR
 8004c22:	603b      	str	r3, [r7, #0]
  return(result);
 8004c24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c2a:	f06f 0305 	mvn.w	r3, #5
 8004c2e:	607b      	str	r3, [r7, #4]
 8004c30:	e010      	b.n	8004c54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c32:	4b0b      	ldr	r3, [pc, #44]	@ (8004c60 <osKernelStart+0x48>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d109      	bne.n	8004c4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c3a:	f7ff ffbf 	bl	8004bbc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c3e:	4b08      	ldr	r3, [pc, #32]	@ (8004c60 <osKernelStart+0x48>)
 8004c40:	2202      	movs	r2, #2
 8004c42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c44:	f001 f892 	bl	8005d6c <vTaskStartScheduler>
      stat = osOK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	607b      	str	r3, [r7, #4]
 8004c4c:	e002      	b.n	8004c54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c54:	687b      	ldr	r3, [r7, #4]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000204 	.word	0x20000204

08004c64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08e      	sub	sp, #56	@ 0x38
 8004c68:	af04      	add	r7, sp, #16
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c74:	f3ef 8305 	mrs	r3, IPSR
 8004c78:	617b      	str	r3, [r7, #20]
  return(result);
 8004c7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d17e      	bne.n	8004d7e <osThreadNew+0x11a>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d07b      	beq.n	8004d7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004c86:	2380      	movs	r3, #128	@ 0x80
 8004c88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004c8a:	2318      	movs	r3, #24
 8004c8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004c92:	f04f 33ff 	mov.w	r3, #4294967295
 8004c96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d045      	beq.n	8004d2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <osThreadNew+0x48>
        name = attr->name;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d008      	beq.n	8004cd2 <osThreadNew+0x6e>
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	2b38      	cmp	r3, #56	@ 0x38
 8004cc4:	d805      	bhi.n	8004cd2 <osThreadNew+0x6e>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <osThreadNew+0x72>
        return (NULL);
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	e054      	b.n	8004d80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	089b      	lsrs	r3, r3, #2
 8004ce4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00e      	beq.n	8004d0c <osThreadNew+0xa8>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	2ba7      	cmp	r3, #167	@ 0xa7
 8004cf4:	d90a      	bls.n	8004d0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d006      	beq.n	8004d0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <osThreadNew+0xa8>
        mem = 1;
 8004d06:	2301      	movs	r3, #1
 8004d08:	61bb      	str	r3, [r7, #24]
 8004d0a:	e010      	b.n	8004d2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10c      	bne.n	8004d2e <osThreadNew+0xca>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d108      	bne.n	8004d2e <osThreadNew+0xca>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d104      	bne.n	8004d2e <osThreadNew+0xca>
          mem = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61bb      	str	r3, [r7, #24]
 8004d28:	e001      	b.n	8004d2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d110      	bne.n	8004d56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d3c:	9202      	str	r2, [sp, #8]
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	6a3a      	ldr	r2, [r7, #32]
 8004d48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 fe1a 	bl	8005984 <xTaskCreateStatic>
 8004d50:	4603      	mov	r3, r0
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	e013      	b.n	8004d7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d110      	bne.n	8004d7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	f107 0310 	add.w	r3, r7, #16
 8004d64:	9301      	str	r3, [sp, #4]
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fe68 	bl	8005a44 <xTaskCreate>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d001      	beq.n	8004d7e <osThreadNew+0x11a>
            hTask = NULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d7e:	693b      	ldr	r3, [r7, #16]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3728      	adds	r7, #40	@ 0x28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d90:	f3ef 8305 	mrs	r3, IPSR
 8004d94:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d96:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <osDelay+0x1c>
    stat = osErrorISR;
 8004d9c:	f06f 0305 	mvn.w	r3, #5
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	e007      	b.n	8004db4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 ffa6 	bl	8005d00 <vTaskDelay>
    }
  }

  return (stat);
 8004db4:	68fb      	ldr	r3, [r7, #12]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4a07      	ldr	r2, [pc, #28]	@ (8004dec <vApplicationGetIdleTaskMemory+0x2c>)
 8004dd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4a06      	ldr	r2, [pc, #24]	@ (8004df0 <vApplicationGetIdleTaskMemory+0x30>)
 8004dd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2280      	movs	r2, #128	@ 0x80
 8004ddc:	601a      	str	r2, [r3, #0]
}
 8004dde:	bf00      	nop
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000208 	.word	0x20000208
 8004df0:	200002b0 	.word	0x200002b0

08004df4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4a07      	ldr	r2, [pc, #28]	@ (8004e20 <vApplicationGetTimerTaskMemory+0x2c>)
 8004e04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4a06      	ldr	r2, [pc, #24]	@ (8004e24 <vApplicationGetTimerTaskMemory+0x30>)
 8004e0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e12:	601a      	str	r2, [r3, #0]
}
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	200004b0 	.word	0x200004b0
 8004e24:	20000558 	.word	0x20000558

08004e28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f103 0208 	add.w	r2, r3, #8
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f103 0208 	add.w	r2, r3, #8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f103 0208 	add.w	r2, r3, #8
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e82:	b480      	push	{r7}
 8004e84:	b085      	sub	sp, #20
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	601a      	str	r2, [r3, #0]
}
 8004ebe:	bf00      	nop
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b085      	sub	sp, #20
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee0:	d103      	bne.n	8004eea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	e00c      	b.n	8004f04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3308      	adds	r3, #8
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e002      	b.n	8004ef8 <vListInsert+0x2e>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d2f6      	bcs.n	8004ef2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	601a      	str	r2, [r3, #0]
}
 8004f30:	bf00      	nop
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6892      	ldr	r2, [r2, #8]
 8004f52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6852      	ldr	r2, [r2, #4]
 8004f5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d103      	bne.n	8004f70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	1e5a      	subs	r2, r3, #1
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10b      	bne.n	8004fbc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004fb6:	bf00      	nop
 8004fb8:	bf00      	nop
 8004fba:	e7fd      	b.n	8004fb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004fbc:	f002 f8a4 	bl	8007108 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc8:	68f9      	ldr	r1, [r7, #12]
 8004fca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004fcc:	fb01 f303 	mul.w	r3, r1, r3
 8004fd0:	441a      	add	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fec:	3b01      	subs	r3, #1
 8004fee:	68f9      	ldr	r1, [r7, #12]
 8004ff0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ff2:	fb01 f303 	mul.w	r3, r1, r3
 8004ff6:	441a      	add	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	22ff      	movs	r2, #255	@ 0xff
 8005000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	22ff      	movs	r2, #255	@ 0xff
 8005008:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d114      	bne.n	800503c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d01a      	beq.n	8005050 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3310      	adds	r3, #16
 800501e:	4618      	mov	r0, r3
 8005020:	f001 f942 	bl	80062a8 <xTaskRemoveFromEventList>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d012      	beq.n	8005050 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800502a:	4b0d      	ldr	r3, [pc, #52]	@ (8005060 <xQueueGenericReset+0xd0>)
 800502c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	e009      	b.n	8005050 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3310      	adds	r3, #16
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fef1 	bl	8004e28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3324      	adds	r3, #36	@ 0x24
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff feec 	bl	8004e28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005050:	f002 f88c 	bl	800716c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005054:	2301      	movs	r3, #1
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	e000ed04 	.word	0xe000ed04

08005064 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08e      	sub	sp, #56	@ 0x38
 8005068:	af02      	add	r7, sp, #8
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10b      	bne.n	8005090 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800508a:	bf00      	nop
 800508c:	bf00      	nop
 800508e:	e7fd      	b.n	800508c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10b      	bne.n	80050ae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050a8:	bf00      	nop
 80050aa:	bf00      	nop
 80050ac:	e7fd      	b.n	80050aa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <xQueueGenericCreateStatic+0x56>
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <xQueueGenericCreateStatic+0x5a>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <xQueueGenericCreateStatic+0x5c>
 80050be:	2300      	movs	r3, #0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10b      	bne.n	80050dc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	623b      	str	r3, [r7, #32]
}
 80050d6:	bf00      	nop
 80050d8:	bf00      	nop
 80050da:	e7fd      	b.n	80050d8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <xQueueGenericCreateStatic+0x84>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <xQueueGenericCreateStatic+0x88>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <xQueueGenericCreateStatic+0x8a>
 80050ec:	2300      	movs	r3, #0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10b      	bne.n	800510a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	61fb      	str	r3, [r7, #28]
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop
 8005108:	e7fd      	b.n	8005106 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800510a:	2350      	movs	r3, #80	@ 0x50
 800510c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b50      	cmp	r3, #80	@ 0x50
 8005112:	d00b      	beq.n	800512c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	61bb      	str	r3, [r7, #24]
}
 8005126:	bf00      	nop
 8005128:	bf00      	nop
 800512a:	e7fd      	b.n	8005128 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800512c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00d      	beq.n	8005154 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005140:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	4613      	mov	r3, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 f805 	bl	800515e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005156:	4618      	mov	r0, r3
 8005158:	3730      	adds	r7, #48	@ 0x30
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
 800516a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	e002      	b.n	8005180 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800518c:	2101      	movs	r1, #1
 800518e:	69b8      	ldr	r0, [r7, #24]
 8005190:	f7ff fefe 	bl	8004f90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	78fa      	ldrb	r2, [r7, #3]
 8005198:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08e      	sub	sp, #56	@ 0x38
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051b2:	2300      	movs	r3, #0
 80051b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80051ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10b      	bne.n	80051d8 <xQueueGenericSend+0x34>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051d2:	bf00      	nop
 80051d4:	bf00      	nop
 80051d6:	e7fd      	b.n	80051d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d103      	bne.n	80051e6 <xQueueGenericSend+0x42>
 80051de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <xQueueGenericSend+0x46>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <xQueueGenericSend+0x48>
 80051ea:	2300      	movs	r3, #0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10b      	bne.n	8005208 <xQueueGenericSend+0x64>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005202:	bf00      	nop
 8005204:	bf00      	nop
 8005206:	e7fd      	b.n	8005204 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d103      	bne.n	8005216 <xQueueGenericSend+0x72>
 800520e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <xQueueGenericSend+0x76>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <xQueueGenericSend+0x78>
 800521a:	2300      	movs	r3, #0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <xQueueGenericSend+0x94>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	623b      	str	r3, [r7, #32]
}
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	e7fd      	b.n	8005234 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005238:	f001 f9fc 	bl	8006634 <xTaskGetSchedulerState>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d102      	bne.n	8005248 <xQueueGenericSend+0xa4>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <xQueueGenericSend+0xa8>
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <xQueueGenericSend+0xaa>
 800524c:	2300      	movs	r3, #0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10b      	bne.n	800526a <xQueueGenericSend+0xc6>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	61fb      	str	r3, [r7, #28]
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop
 8005268:	e7fd      	b.n	8005266 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800526a:	f001 ff4d 	bl	8007108 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800526e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005276:	429a      	cmp	r2, r3
 8005278:	d302      	bcc.n	8005280 <xQueueGenericSend+0xdc>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b02      	cmp	r3, #2
 800527e:	d129      	bne.n	80052d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005286:	f000 fa0f 	bl	80056a8 <prvCopyDataToQueue>
 800528a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800528c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005290:	2b00      	cmp	r3, #0
 8005292:	d010      	beq.n	80052b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005296:	3324      	adds	r3, #36	@ 0x24
 8005298:	4618      	mov	r0, r3
 800529a:	f001 f805 	bl	80062a8 <xTaskRemoveFromEventList>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d013      	beq.n	80052cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80052a4:	4b3f      	ldr	r3, [pc, #252]	@ (80053a4 <xQueueGenericSend+0x200>)
 80052a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	e00a      	b.n	80052cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052bc:	4b39      	ldr	r3, [pc, #228]	@ (80053a4 <xQueueGenericSend+0x200>)
 80052be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052cc:	f001 ff4e 	bl	800716c <vPortExitCritical>
				return pdPASS;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e063      	b.n	800539c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d103      	bne.n	80052e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052da:	f001 ff47 	bl	800716c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052de:	2300      	movs	r3, #0
 80052e0:	e05c      	b.n	800539c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d106      	bne.n	80052f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052e8:	f107 0314 	add.w	r3, r7, #20
 80052ec:	4618      	mov	r0, r3
 80052ee:	f001 f83f 	bl	8006370 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052f2:	2301      	movs	r3, #1
 80052f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052f6:	f001 ff39 	bl	800716c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052fa:	f000 fda7 	bl	8005e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052fe:	f001 ff03 	bl	8007108 <vPortEnterCritical>
 8005302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005304:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005308:	b25b      	sxtb	r3, r3
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d103      	bne.n	8005318 <xQueueGenericSend+0x174>
 8005310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800531e:	b25b      	sxtb	r3, r3
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d103      	bne.n	800532e <xQueueGenericSend+0x18a>
 8005326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800532e:	f001 ff1d 	bl	800716c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005332:	1d3a      	adds	r2, r7, #4
 8005334:	f107 0314 	add.w	r3, r7, #20
 8005338:	4611      	mov	r1, r2
 800533a:	4618      	mov	r0, r3
 800533c:	f001 f82e 	bl	800639c <xTaskCheckForTimeOut>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d124      	bne.n	8005390 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005346:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005348:	f000 faa6 	bl	8005898 <prvIsQueueFull>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d018      	beq.n	8005384 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005354:	3310      	adds	r3, #16
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	4611      	mov	r1, r2
 800535a:	4618      	mov	r0, r3
 800535c:	f000 ff52 	bl	8006204 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005360:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005362:	f000 fa31 	bl	80057c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005366:	f000 fd7f 	bl	8005e68 <xTaskResumeAll>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	f47f af7c 	bne.w	800526a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005372:	4b0c      	ldr	r3, [pc, #48]	@ (80053a4 <xQueueGenericSend+0x200>)
 8005374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	e772      	b.n	800526a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005386:	f000 fa1f 	bl	80057c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800538a:	f000 fd6d 	bl	8005e68 <xTaskResumeAll>
 800538e:	e76c      	b.n	800526a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005392:	f000 fa19 	bl	80057c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005396:	f000 fd67 	bl	8005e68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800539a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800539c:	4618      	mov	r0, r3
 800539e:	3738      	adds	r7, #56	@ 0x38
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	e000ed04 	.word	0xe000ed04

080053a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b090      	sub	sp, #64	@ 0x40
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80053ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10b      	bne.n	80053d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053d2:	bf00      	nop
 80053d4:	bf00      	nop
 80053d6:	e7fd      	b.n	80053d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d103      	bne.n	80053e6 <xQueueGenericSendFromISR+0x3e>
 80053de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <xQueueGenericSendFromISR+0x42>
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <xQueueGenericSendFromISR+0x44>
 80053ea:	2300      	movs	r3, #0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10b      	bne.n	8005408 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80053f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005402:	bf00      	nop
 8005404:	bf00      	nop
 8005406:	e7fd      	b.n	8005404 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d103      	bne.n	8005416 <xQueueGenericSendFromISR+0x6e>
 800540e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <xQueueGenericSendFromISR+0x72>
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <xQueueGenericSendFromISR+0x74>
 800541a:	2300      	movs	r3, #0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10b      	bne.n	8005438 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	623b      	str	r3, [r7, #32]
}
 8005432:	bf00      	nop
 8005434:	bf00      	nop
 8005436:	e7fd      	b.n	8005434 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005438:	f001 ff46 	bl	80072c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800543c:	f3ef 8211 	mrs	r2, BASEPRI
 8005440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	61fa      	str	r2, [r7, #28]
 8005452:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005454:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005456:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800545c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005460:	429a      	cmp	r2, r3
 8005462:	d302      	bcc.n	800546a <xQueueGenericSendFromISR+0xc2>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d12f      	bne.n	80054ca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800546a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005470:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005478:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005480:	f000 f912 	bl	80056a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005484:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548c:	d112      	bne.n	80054b4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800548e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005492:	2b00      	cmp	r3, #0
 8005494:	d016      	beq.n	80054c4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005498:	3324      	adds	r3, #36	@ 0x24
 800549a:	4618      	mov	r0, r3
 800549c:	f000 ff04 	bl	80062a8 <xTaskRemoveFromEventList>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00e      	beq.n	80054c4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00b      	beq.n	80054c4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e007      	b.n	80054c4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80054b8:	3301      	adds	r3, #1
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	b25a      	sxtb	r2, r3
 80054be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80054c4:	2301      	movs	r3, #1
 80054c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80054c8:	e001      	b.n	80054ce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3740      	adds	r7, #64	@ 0x40
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08c      	sub	sp, #48	@ 0x30
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054f0:	2300      	movs	r3, #0
 80054f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10b      	bne.n	8005516 <xQueueReceive+0x32>
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	623b      	str	r3, [r7, #32]
}
 8005510:	bf00      	nop
 8005512:	bf00      	nop
 8005514:	e7fd      	b.n	8005512 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d103      	bne.n	8005524 <xQueueReceive+0x40>
 800551c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <xQueueReceive+0x44>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <xQueueReceive+0x46>
 8005528:	2300      	movs	r3, #0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10b      	bne.n	8005546 <xQueueReceive+0x62>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	61fb      	str	r3, [r7, #28]
}
 8005540:	bf00      	nop
 8005542:	bf00      	nop
 8005544:	e7fd      	b.n	8005542 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005546:	f001 f875 	bl	8006634 <xTaskGetSchedulerState>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d102      	bne.n	8005556 <xQueueReceive+0x72>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <xQueueReceive+0x76>
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <xQueueReceive+0x78>
 800555a:	2300      	movs	r3, #0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10b      	bne.n	8005578 <xQueueReceive+0x94>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	61bb      	str	r3, [r7, #24]
}
 8005572:	bf00      	nop
 8005574:	bf00      	nop
 8005576:	e7fd      	b.n	8005574 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005578:	f001 fdc6 	bl	8007108 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800557c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005580:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01f      	beq.n	80055c8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800558c:	f000 f8f6 	bl	800577c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	1e5a      	subs	r2, r3, #1
 8005594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005596:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00f      	beq.n	80055c0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a2:	3310      	adds	r3, #16
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fe7f 	bl	80062a8 <xTaskRemoveFromEventList>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d007      	beq.n	80055c0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055b0:	4b3c      	ldr	r3, [pc, #240]	@ (80056a4 <xQueueReceive+0x1c0>)
 80055b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055c0:	f001 fdd4 	bl	800716c <vPortExitCritical>
				return pdPASS;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e069      	b.n	800569c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d103      	bne.n	80055d6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055ce:	f001 fdcd 	bl	800716c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055d2:	2300      	movs	r3, #0
 80055d4:	e062      	b.n	800569c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d106      	bne.n	80055ea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055dc:	f107 0310 	add.w	r3, r7, #16
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 fec5 	bl	8006370 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055e6:	2301      	movs	r3, #1
 80055e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055ea:	f001 fdbf 	bl	800716c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055ee:	f000 fc2d 	bl	8005e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055f2:	f001 fd89 	bl	8007108 <vPortEnterCritical>
 80055f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055fc:	b25b      	sxtb	r3, r3
 80055fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005602:	d103      	bne.n	800560c <xQueueReceive+0x128>
 8005604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800560c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005612:	b25b      	sxtb	r3, r3
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d103      	bne.n	8005622 <xQueueReceive+0x13e>
 800561a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005622:	f001 fda3 	bl	800716c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005626:	1d3a      	adds	r2, r7, #4
 8005628:	f107 0310 	add.w	r3, r7, #16
 800562c:	4611      	mov	r1, r2
 800562e:	4618      	mov	r0, r3
 8005630:	f000 feb4 	bl	800639c <xTaskCheckForTimeOut>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d123      	bne.n	8005682 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800563a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800563c:	f000 f916 	bl	800586c <prvIsQueueEmpty>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d017      	beq.n	8005676 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005648:	3324      	adds	r3, #36	@ 0x24
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	4611      	mov	r1, r2
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fdd8 	bl	8006204 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005654:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005656:	f000 f8b7 	bl	80057c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800565a:	f000 fc05 	bl	8005e68 <xTaskResumeAll>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d189      	bne.n	8005578 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005664:	4b0f      	ldr	r3, [pc, #60]	@ (80056a4 <xQueueReceive+0x1c0>)
 8005666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	e780      	b.n	8005578 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005676:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005678:	f000 f8a6 	bl	80057c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800567c:	f000 fbf4 	bl	8005e68 <xTaskResumeAll>
 8005680:	e77a      	b.n	8005578 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005684:	f000 f8a0 	bl	80057c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005688:	f000 fbee 	bl	8005e68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800568c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800568e:	f000 f8ed 	bl	800586c <prvIsQueueEmpty>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	f43f af6f 	beq.w	8005578 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800569a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800569c:	4618      	mov	r0, r3
 800569e:	3730      	adds	r7, #48	@ 0x30
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	e000ed04 	.word	0xe000ed04

080056a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10d      	bne.n	80056e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d14d      	bne.n	800576a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 ffcc 	bl	8006670 <xTaskPriorityDisinherit>
 80056d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	609a      	str	r2, [r3, #8]
 80056e0:	e043      	b.n	800576a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d119      	bne.n	800571c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6858      	ldr	r0, [r3, #4]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f0:	461a      	mov	r2, r3
 80056f2:	68b9      	ldr	r1, [r7, #8]
 80056f4:	f002 f89c 	bl	8007830 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005700:	441a      	add	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	429a      	cmp	r2, r3
 8005710:	d32b      	bcc.n	800576a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	605a      	str	r2, [r3, #4]
 800571a:	e026      	b.n	800576a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	68d8      	ldr	r0, [r3, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005724:	461a      	mov	r2, r3
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	f002 f882 	bl	8007830 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005734:	425b      	negs	r3, r3
 8005736:	441a      	add	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	429a      	cmp	r2, r3
 8005746:	d207      	bcs.n	8005758 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005750:	425b      	negs	r3, r3
 8005752:	441a      	add	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d105      	bne.n	800576a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	3b01      	subs	r3, #1
 8005768:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005772:	697b      	ldr	r3, [r7, #20]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	d018      	beq.n	80057c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005796:	441a      	add	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d303      	bcc.n	80057b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68d9      	ldr	r1, [r3, #12]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b8:	461a      	mov	r2, r3
 80057ba:	6838      	ldr	r0, [r7, #0]
 80057bc:	f002 f838 	bl	8007830 <memcpy>
	}
}
 80057c0:	bf00      	nop
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057d0:	f001 fc9a 	bl	8007108 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057dc:	e011      	b.n	8005802 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d012      	beq.n	800580c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3324      	adds	r3, #36	@ 0x24
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fd5c 	bl	80062a8 <xTaskRemoveFromEventList>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057f6:	f000 fe35 	bl	8006464 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005806:	2b00      	cmp	r3, #0
 8005808:	dce9      	bgt.n	80057de <prvUnlockQueue+0x16>
 800580a:	e000      	b.n	800580e <prvUnlockQueue+0x46>
					break;
 800580c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	22ff      	movs	r2, #255	@ 0xff
 8005812:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005816:	f001 fca9 	bl	800716c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800581a:	f001 fc75 	bl	8007108 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005824:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005826:	e011      	b.n	800584c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d012      	beq.n	8005856 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3310      	adds	r3, #16
 8005834:	4618      	mov	r0, r3
 8005836:	f000 fd37 	bl	80062a8 <xTaskRemoveFromEventList>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005840:	f000 fe10 	bl	8006464 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005844:	7bbb      	ldrb	r3, [r7, #14]
 8005846:	3b01      	subs	r3, #1
 8005848:	b2db      	uxtb	r3, r3
 800584a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800584c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005850:	2b00      	cmp	r3, #0
 8005852:	dce9      	bgt.n	8005828 <prvUnlockQueue+0x60>
 8005854:	e000      	b.n	8005858 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005856:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	22ff      	movs	r2, #255	@ 0xff
 800585c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005860:	f001 fc84 	bl	800716c <vPortExitCritical>
}
 8005864:	bf00      	nop
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005874:	f001 fc48 	bl	8007108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587c:	2b00      	cmp	r3, #0
 800587e:	d102      	bne.n	8005886 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005880:	2301      	movs	r3, #1
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	e001      	b.n	800588a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800588a:	f001 fc6f 	bl	800716c <vPortExitCritical>

	return xReturn;
 800588e:	68fb      	ldr	r3, [r7, #12]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058a0:	f001 fc32 	bl	8007108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d102      	bne.n	80058b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058b0:	2301      	movs	r3, #1
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	e001      	b.n	80058ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058ba:	f001 fc57 	bl	800716c <vPortExitCritical>

	return xReturn;
 80058be:	68fb      	ldr	r3, [r7, #12]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058d2:	2300      	movs	r3, #0
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	e014      	b.n	8005902 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058d8:	4a0f      	ldr	r2, [pc, #60]	@ (8005918 <vQueueAddToRegistry+0x50>)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10b      	bne.n	80058fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058e4:	490c      	ldr	r1, [pc, #48]	@ (8005918 <vQueueAddToRegistry+0x50>)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80058ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005918 <vQueueAddToRegistry+0x50>)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	4413      	add	r3, r2
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80058fa:	e006      	b.n	800590a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3301      	adds	r3, #1
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b07      	cmp	r3, #7
 8005906:	d9e7      	bls.n	80058d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005908:	bf00      	nop
 800590a:	bf00      	nop
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	20000958 	.word	0x20000958

0800591c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800592c:	f001 fbec 	bl	8007108 <vPortEnterCritical>
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005936:	b25b      	sxtb	r3, r3
 8005938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593c:	d103      	bne.n	8005946 <vQueueWaitForMessageRestricted+0x2a>
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800594c:	b25b      	sxtb	r3, r3
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005952:	d103      	bne.n	800595c <vQueueWaitForMessageRestricted+0x40>
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800595c:	f001 fc06 	bl	800716c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005964:	2b00      	cmp	r3, #0
 8005966:	d106      	bne.n	8005976 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	3324      	adds	r3, #36	@ 0x24
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	68b9      	ldr	r1, [r7, #8]
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fc6d 	bl	8006250 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005976:	6978      	ldr	r0, [r7, #20]
 8005978:	f7ff ff26 	bl	80057c8 <prvUnlockQueue>
	}
 800597c:	bf00      	nop
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005984:	b580      	push	{r7, lr}
 8005986:	b08e      	sub	sp, #56	@ 0x38
 8005988:	af04      	add	r7, sp, #16
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
 8005990:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10b      	bne.n	80059b0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	623b      	str	r3, [r7, #32]
}
 80059aa:	bf00      	nop
 80059ac:	bf00      	nop
 80059ae:	e7fd      	b.n	80059ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10b      	bne.n	80059ce <xTaskCreateStatic+0x4a>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	61fb      	str	r3, [r7, #28]
}
 80059c8:	bf00      	nop
 80059ca:	bf00      	nop
 80059cc:	e7fd      	b.n	80059ca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059ce:	23a8      	movs	r3, #168	@ 0xa8
 80059d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2ba8      	cmp	r3, #168	@ 0xa8
 80059d6:	d00b      	beq.n	80059f0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	61bb      	str	r3, [r7, #24]
}
 80059ea:	bf00      	nop
 80059ec:	bf00      	nop
 80059ee:	e7fd      	b.n	80059ec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01e      	beq.n	8005a36 <xTaskCreateStatic+0xb2>
 80059f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d01b      	beq.n	8005a36 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a00:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a06:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a10:	2300      	movs	r3, #0
 8005a12:	9303      	str	r3, [sp, #12]
 8005a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a16:	9302      	str	r3, [sp, #8]
 8005a18:	f107 0314 	add.w	r3, r7, #20
 8005a1c:	9301      	str	r3, [sp, #4]
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f851 	bl	8005ad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a30:	f000 f8f6 	bl	8005c20 <prvAddNewTaskToReadyList>
 8005a34:	e001      	b.n	8005a3a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a3a:	697b      	ldr	r3, [r7, #20]
	}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3728      	adds	r7, #40	@ 0x28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08c      	sub	sp, #48	@ 0x30
 8005a48:	af04      	add	r7, sp, #16
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	603b      	str	r3, [r7, #0]
 8005a50:	4613      	mov	r3, r2
 8005a52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a54:	88fb      	ldrh	r3, [r7, #6]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f001 fc77 	bl	800734c <pvPortMalloc>
 8005a5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00e      	beq.n	8005a84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a66:	20a8      	movs	r0, #168	@ 0xa8
 8005a68:	f001 fc70 	bl	800734c <pvPortMalloc>
 8005a6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a7a:	e005      	b.n	8005a88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a7c:	6978      	ldr	r0, [r7, #20]
 8005a7e:	f001 fd33 	bl	80074e8 <vPortFree>
 8005a82:	e001      	b.n	8005a88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d017      	beq.n	8005abe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a96:	88fa      	ldrh	r2, [r7, #6]
 8005a98:	2300      	movs	r3, #0
 8005a9a:	9303      	str	r3, [sp, #12]
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	9302      	str	r3, [sp, #8]
 8005aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa2:	9301      	str	r3, [sp, #4]
 8005aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 f80f 	bl	8005ad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ab2:	69f8      	ldr	r0, [r7, #28]
 8005ab4:	f000 f8b4 	bl	8005c20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	61bb      	str	r3, [r7, #24]
 8005abc:	e002      	b.n	8005ac4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005abe:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ac4:	69bb      	ldr	r3, [r7, #24]
	}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	21a5      	movs	r1, #165	@ 0xa5
 8005aea:	f001 fe1d 	bl	8007728 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005af8:	3b01      	subs	r3, #1
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f023 0307 	bic.w	r3, r3, #7
 8005b06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00b      	beq.n	8005b2a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	617b      	str	r3, [r7, #20]
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop
 8005b28:	e7fd      	b.n	8005b26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01f      	beq.n	8005b70 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b30:	2300      	movs	r3, #0
 8005b32:	61fb      	str	r3, [r7, #28]
 8005b34:	e012      	b.n	8005b5c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	7819      	ldrb	r1, [r3, #0]
 8005b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	3334      	adds	r3, #52	@ 0x34
 8005b46:	460a      	mov	r2, r1
 8005b48:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	4413      	add	r3, r2
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d006      	beq.n	8005b64 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	61fb      	str	r3, [r7, #28]
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	2b0f      	cmp	r3, #15
 8005b60:	d9e9      	bls.n	8005b36 <prvInitialiseNewTask+0x66>
 8005b62:	e000      	b.n	8005b66 <prvInitialiseNewTask+0x96>
			{
				break;
 8005b64:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b6e:	e003      	b.n	8005b78 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7a:	2b37      	cmp	r3, #55	@ 0x37
 8005b7c:	d901      	bls.n	8005b82 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b7e:	2337      	movs	r3, #55	@ 0x37
 8005b80:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b86:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b8c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b90:	2200      	movs	r2, #0
 8005b92:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b96:	3304      	adds	r3, #4
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff f965 	bl	8004e68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba0:	3318      	adds	r3, #24
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff f960 	bl	8004e68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bbc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd0:	3354      	adds	r3, #84	@ 0x54
 8005bd2:	224c      	movs	r2, #76	@ 0x4c
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f001 fda6 	bl	8007728 <memset>
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bde:	4a0d      	ldr	r2, [pc, #52]	@ (8005c14 <prvInitialiseNewTask+0x144>)
 8005be0:	659a      	str	r2, [r3, #88]	@ 0x58
 8005be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be4:	4a0c      	ldr	r2, [pc, #48]	@ (8005c18 <prvInitialiseNewTask+0x148>)
 8005be6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bea:	4a0c      	ldr	r2, [pc, #48]	@ (8005c1c <prvInitialiseNewTask+0x14c>)
 8005bec:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	68f9      	ldr	r1, [r7, #12]
 8005bf2:	69b8      	ldr	r0, [r7, #24]
 8005bf4:	f001 f95a 	bl	8006eac <pxPortInitialiseStack>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c0a:	bf00      	nop
 8005c0c:	3720      	adds	r7, #32
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20001ba4 	.word	0x20001ba4
 8005c18:	20001c0c 	.word	0x20001c0c
 8005c1c:	20001c74 	.word	0x20001c74

08005c20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c28:	f001 fa6e 	bl	8007108 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8005ce4 <prvAddNewTaskToReadyList+0xc4>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3301      	adds	r3, #1
 8005c32:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce4 <prvAddNewTaskToReadyList+0xc4>)
 8005c34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c36:	4b2c      	ldr	r3, [pc, #176]	@ (8005ce8 <prvAddNewTaskToReadyList+0xc8>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8005ce8 <prvAddNewTaskToReadyList+0xc8>)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c44:	4b27      	ldr	r3, [pc, #156]	@ (8005ce4 <prvAddNewTaskToReadyList+0xc4>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d110      	bne.n	8005c6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c4c:	f000 fc2e 	bl	80064ac <prvInitialiseTaskLists>
 8005c50:	e00d      	b.n	8005c6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c52:	4b26      	ldr	r3, [pc, #152]	@ (8005cec <prvAddNewTaskToReadyList+0xcc>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d109      	bne.n	8005c6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c5a:	4b23      	ldr	r3, [pc, #140]	@ (8005ce8 <prvAddNewTaskToReadyList+0xc8>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d802      	bhi.n	8005c6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c68:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce8 <prvAddNewTaskToReadyList+0xc8>)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c6e:	4b20      	ldr	r3, [pc, #128]	@ (8005cf0 <prvAddNewTaskToReadyList+0xd0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3301      	adds	r3, #1
 8005c74:	4a1e      	ldr	r2, [pc, #120]	@ (8005cf0 <prvAddNewTaskToReadyList+0xd0>)
 8005c76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c78:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf0 <prvAddNewTaskToReadyList+0xd0>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c84:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf4 <prvAddNewTaskToReadyList+0xd4>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d903      	bls.n	8005c94 <prvAddNewTaskToReadyList+0x74>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c90:	4a18      	ldr	r2, [pc, #96]	@ (8005cf4 <prvAddNewTaskToReadyList+0xd4>)
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c98:	4613      	mov	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4a15      	ldr	r2, [pc, #84]	@ (8005cf8 <prvAddNewTaskToReadyList+0xd8>)
 8005ca2:	441a      	add	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4610      	mov	r0, r2
 8005cac:	f7ff f8e9 	bl	8004e82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cb0:	f001 fa5c 	bl	800716c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8005cec <prvAddNewTaskToReadyList+0xcc>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00e      	beq.n	8005cda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce8 <prvAddNewTaskToReadyList+0xc8>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d207      	bcs.n	8005cda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cca:	4b0c      	ldr	r3, [pc, #48]	@ (8005cfc <prvAddNewTaskToReadyList+0xdc>)
 8005ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cda:	bf00      	nop
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000e6c 	.word	0x20000e6c
 8005ce8:	20000998 	.word	0x20000998
 8005cec:	20000e78 	.word	0x20000e78
 8005cf0:	20000e88 	.word	0x20000e88
 8005cf4:	20000e74 	.word	0x20000e74
 8005cf8:	2000099c 	.word	0x2000099c
 8005cfc:	e000ed04 	.word	0xe000ed04

08005d00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d018      	beq.n	8005d44 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d12:	4b14      	ldr	r3, [pc, #80]	@ (8005d64 <vTaskDelay+0x64>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00b      	beq.n	8005d32 <vTaskDelay+0x32>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	60bb      	str	r3, [r7, #8]
}
 8005d2c:	bf00      	nop
 8005d2e:	bf00      	nop
 8005d30:	e7fd      	b.n	8005d2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d32:	f000 f88b 	bl	8005e4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d36:	2100      	movs	r1, #0
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fd09 	bl	8006750 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d3e:	f000 f893 	bl	8005e68 <xTaskResumeAll>
 8005d42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d107      	bne.n	8005d5a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005d4a:	4b07      	ldr	r3, [pc, #28]	@ (8005d68 <vTaskDelay+0x68>)
 8005d4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d5a:	bf00      	nop
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20000e94 	.word	0x20000e94
 8005d68:	e000ed04 	.word	0xe000ed04

08005d6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08a      	sub	sp, #40	@ 0x28
 8005d70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d7a:	463a      	mov	r2, r7
 8005d7c:	1d39      	adds	r1, r7, #4
 8005d7e:	f107 0308 	add.w	r3, r7, #8
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff f81c 	bl	8004dc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d88:	6839      	ldr	r1, [r7, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	9202      	str	r2, [sp, #8]
 8005d90:	9301      	str	r3, [sp, #4]
 8005d92:	2300      	movs	r3, #0
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	2300      	movs	r3, #0
 8005d98:	460a      	mov	r2, r1
 8005d9a:	4924      	ldr	r1, [pc, #144]	@ (8005e2c <vTaskStartScheduler+0xc0>)
 8005d9c:	4824      	ldr	r0, [pc, #144]	@ (8005e30 <vTaskStartScheduler+0xc4>)
 8005d9e:	f7ff fdf1 	bl	8005984 <xTaskCreateStatic>
 8005da2:	4603      	mov	r3, r0
 8005da4:	4a23      	ldr	r2, [pc, #140]	@ (8005e34 <vTaskStartScheduler+0xc8>)
 8005da6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005da8:	4b22      	ldr	r3, [pc, #136]	@ (8005e34 <vTaskStartScheduler+0xc8>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005db0:	2301      	movs	r3, #1
 8005db2:	617b      	str	r3, [r7, #20]
 8005db4:	e001      	b.n	8005dba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005db6:	2300      	movs	r3, #0
 8005db8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d102      	bne.n	8005dc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005dc0:	f000 fd1a 	bl	80067f8 <xTimerCreateTimerTask>
 8005dc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d11b      	bne.n	8005e04 <vTaskStartScheduler+0x98>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	613b      	str	r3, [r7, #16]
}
 8005dde:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005de0:	4b15      	ldr	r3, [pc, #84]	@ (8005e38 <vTaskStartScheduler+0xcc>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3354      	adds	r3, #84	@ 0x54
 8005de6:	4a15      	ldr	r2, [pc, #84]	@ (8005e3c <vTaskStartScheduler+0xd0>)
 8005de8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005dea:	4b15      	ldr	r3, [pc, #84]	@ (8005e40 <vTaskStartScheduler+0xd4>)
 8005dec:	f04f 32ff 	mov.w	r2, #4294967295
 8005df0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005df2:	4b14      	ldr	r3, [pc, #80]	@ (8005e44 <vTaskStartScheduler+0xd8>)
 8005df4:	2201      	movs	r2, #1
 8005df6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005df8:	4b13      	ldr	r3, [pc, #76]	@ (8005e48 <vTaskStartScheduler+0xdc>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005dfe:	f001 f8df 	bl	8006fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e02:	e00f      	b.n	8005e24 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0a:	d10b      	bne.n	8005e24 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	60fb      	str	r3, [r7, #12]
}
 8005e1e:	bf00      	nop
 8005e20:	bf00      	nop
 8005e22:	e7fd      	b.n	8005e20 <vTaskStartScheduler+0xb4>
}
 8005e24:	bf00      	nop
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	0800794c 	.word	0x0800794c
 8005e30:	0800647d 	.word	0x0800647d
 8005e34:	20000e90 	.word	0x20000e90
 8005e38:	20000998 	.word	0x20000998
 8005e3c:	20000010 	.word	0x20000010
 8005e40:	20000e8c 	.word	0x20000e8c
 8005e44:	20000e78 	.word	0x20000e78
 8005e48:	20000e70 	.word	0x20000e70

08005e4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e50:	4b04      	ldr	r3, [pc, #16]	@ (8005e64 <vTaskSuspendAll+0x18>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3301      	adds	r3, #1
 8005e56:	4a03      	ldr	r2, [pc, #12]	@ (8005e64 <vTaskSuspendAll+0x18>)
 8005e58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e5a:	bf00      	nop
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	20000e94 	.word	0x20000e94

08005e68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e76:	4b42      	ldr	r3, [pc, #264]	@ (8005f80 <xTaskResumeAll+0x118>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10b      	bne.n	8005e96 <xTaskResumeAll+0x2e>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	603b      	str	r3, [r7, #0]
}
 8005e90:	bf00      	nop
 8005e92:	bf00      	nop
 8005e94:	e7fd      	b.n	8005e92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e96:	f001 f937 	bl	8007108 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e9a:	4b39      	ldr	r3, [pc, #228]	@ (8005f80 <xTaskResumeAll+0x118>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	4a37      	ldr	r2, [pc, #220]	@ (8005f80 <xTaskResumeAll+0x118>)
 8005ea2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ea4:	4b36      	ldr	r3, [pc, #216]	@ (8005f80 <xTaskResumeAll+0x118>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d162      	bne.n	8005f72 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005eac:	4b35      	ldr	r3, [pc, #212]	@ (8005f84 <xTaskResumeAll+0x11c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d05e      	beq.n	8005f72 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eb4:	e02f      	b.n	8005f16 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eb6:	4b34      	ldr	r3, [pc, #208]	@ (8005f88 <xTaskResumeAll+0x120>)
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3318      	adds	r3, #24
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff f83a 	bl	8004f3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff f835 	bl	8004f3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8005f8c <xTaskResumeAll+0x124>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d903      	bls.n	8005ee6 <xTaskResumeAll+0x7e>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8005f8c <xTaskResumeAll+0x124>)
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4a27      	ldr	r2, [pc, #156]	@ (8005f90 <xTaskResumeAll+0x128>)
 8005ef4:	441a      	add	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	4619      	mov	r1, r3
 8005efc:	4610      	mov	r0, r2
 8005efe:	f7fe ffc0 	bl	8004e82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f06:	4b23      	ldr	r3, [pc, #140]	@ (8005f94 <xTaskResumeAll+0x12c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d302      	bcc.n	8005f16 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005f10:	4b21      	ldr	r3, [pc, #132]	@ (8005f98 <xTaskResumeAll+0x130>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f16:	4b1c      	ldr	r3, [pc, #112]	@ (8005f88 <xTaskResumeAll+0x120>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1cb      	bne.n	8005eb6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f24:	f000 fb66 	bl	80065f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f28:	4b1c      	ldr	r3, [pc, #112]	@ (8005f9c <xTaskResumeAll+0x134>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d010      	beq.n	8005f56 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f34:	f000 f846 	bl	8005fc4 <xTaskIncrementTick>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005f3e:	4b16      	ldr	r3, [pc, #88]	@ (8005f98 <xTaskResumeAll+0x130>)
 8005f40:	2201      	movs	r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1f1      	bne.n	8005f34 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005f50:	4b12      	ldr	r3, [pc, #72]	@ (8005f9c <xTaskResumeAll+0x134>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f56:	4b10      	ldr	r3, [pc, #64]	@ (8005f98 <xTaskResumeAll+0x130>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d009      	beq.n	8005f72 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f62:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa0 <xTaskResumeAll+0x138>)
 8005f64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f72:	f001 f8fb 	bl	800716c <vPortExitCritical>

	return xAlreadyYielded;
 8005f76:	68bb      	ldr	r3, [r7, #8]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	20000e94 	.word	0x20000e94
 8005f84:	20000e6c 	.word	0x20000e6c
 8005f88:	20000e2c 	.word	0x20000e2c
 8005f8c:	20000e74 	.word	0x20000e74
 8005f90:	2000099c 	.word	0x2000099c
 8005f94:	20000998 	.word	0x20000998
 8005f98:	20000e80 	.word	0x20000e80
 8005f9c:	20000e7c 	.word	0x20000e7c
 8005fa0:	e000ed04 	.word	0xe000ed04

08005fa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005faa:	4b05      	ldr	r3, [pc, #20]	@ (8005fc0 <xTaskGetTickCount+0x1c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005fb0:	687b      	ldr	r3, [r7, #4]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	20000e70 	.word	0x20000e70

08005fc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fce:	4b4f      	ldr	r3, [pc, #316]	@ (800610c <xTaskIncrementTick+0x148>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f040 8090 	bne.w	80060f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fd8:	4b4d      	ldr	r3, [pc, #308]	@ (8006110 <xTaskIncrementTick+0x14c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fe0:	4a4b      	ldr	r2, [pc, #300]	@ (8006110 <xTaskIncrementTick+0x14c>)
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d121      	bne.n	8006030 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fec:	4b49      	ldr	r3, [pc, #292]	@ (8006114 <xTaskIncrementTick+0x150>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00b      	beq.n	800600e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	603b      	str	r3, [r7, #0]
}
 8006008:	bf00      	nop
 800600a:	bf00      	nop
 800600c:	e7fd      	b.n	800600a <xTaskIncrementTick+0x46>
 800600e:	4b41      	ldr	r3, [pc, #260]	@ (8006114 <xTaskIncrementTick+0x150>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	4b40      	ldr	r3, [pc, #256]	@ (8006118 <xTaskIncrementTick+0x154>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a3e      	ldr	r2, [pc, #248]	@ (8006114 <xTaskIncrementTick+0x150>)
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	4a3e      	ldr	r2, [pc, #248]	@ (8006118 <xTaskIncrementTick+0x154>)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	4b3e      	ldr	r3, [pc, #248]	@ (800611c <xTaskIncrementTick+0x158>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3301      	adds	r3, #1
 8006028:	4a3c      	ldr	r2, [pc, #240]	@ (800611c <xTaskIncrementTick+0x158>)
 800602a:	6013      	str	r3, [r2, #0]
 800602c:	f000 fae2 	bl	80065f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006030:	4b3b      	ldr	r3, [pc, #236]	@ (8006120 <xTaskIncrementTick+0x15c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	429a      	cmp	r2, r3
 8006038:	d349      	bcc.n	80060ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800603a:	4b36      	ldr	r3, [pc, #216]	@ (8006114 <xTaskIncrementTick+0x150>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d104      	bne.n	800604e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006044:	4b36      	ldr	r3, [pc, #216]	@ (8006120 <xTaskIncrementTick+0x15c>)
 8006046:	f04f 32ff 	mov.w	r2, #4294967295
 800604a:	601a      	str	r2, [r3, #0]
					break;
 800604c:	e03f      	b.n	80060ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800604e:	4b31      	ldr	r3, [pc, #196]	@ (8006114 <xTaskIncrementTick+0x150>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	429a      	cmp	r2, r3
 8006064:	d203      	bcs.n	800606e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006066:	4a2e      	ldr	r2, [pc, #184]	@ (8006120 <xTaskIncrementTick+0x15c>)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800606c:	e02f      	b.n	80060ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	3304      	adds	r3, #4
 8006072:	4618      	mov	r0, r3
 8006074:	f7fe ff62 	bl	8004f3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607c:	2b00      	cmp	r3, #0
 800607e:	d004      	beq.n	800608a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	3318      	adds	r3, #24
 8006084:	4618      	mov	r0, r3
 8006086:	f7fe ff59 	bl	8004f3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800608e:	4b25      	ldr	r3, [pc, #148]	@ (8006124 <xTaskIncrementTick+0x160>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d903      	bls.n	800609e <xTaskIncrementTick+0xda>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609a:	4a22      	ldr	r2, [pc, #136]	@ (8006124 <xTaskIncrementTick+0x160>)
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4a1f      	ldr	r2, [pc, #124]	@ (8006128 <xTaskIncrementTick+0x164>)
 80060ac:	441a      	add	r2, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	3304      	adds	r3, #4
 80060b2:	4619      	mov	r1, r3
 80060b4:	4610      	mov	r0, r2
 80060b6:	f7fe fee4 	bl	8004e82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060be:	4b1b      	ldr	r3, [pc, #108]	@ (800612c <xTaskIncrementTick+0x168>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d3b8      	bcc.n	800603a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80060c8:	2301      	movs	r3, #1
 80060ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060cc:	e7b5      	b.n	800603a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060ce:	4b17      	ldr	r3, [pc, #92]	@ (800612c <xTaskIncrementTick+0x168>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d4:	4914      	ldr	r1, [pc, #80]	@ (8006128 <xTaskIncrementTick+0x164>)
 80060d6:	4613      	mov	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	440b      	add	r3, r1
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d901      	bls.n	80060ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80060e6:	2301      	movs	r3, #1
 80060e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80060ea:	4b11      	ldr	r3, [pc, #68]	@ (8006130 <xTaskIncrementTick+0x16c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d007      	beq.n	8006102 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80060f2:	2301      	movs	r3, #1
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	e004      	b.n	8006102 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80060f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006134 <xTaskIncrementTick+0x170>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3301      	adds	r3, #1
 80060fe:	4a0d      	ldr	r2, [pc, #52]	@ (8006134 <xTaskIncrementTick+0x170>)
 8006100:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006102:	697b      	ldr	r3, [r7, #20]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	20000e94 	.word	0x20000e94
 8006110:	20000e70 	.word	0x20000e70
 8006114:	20000e24 	.word	0x20000e24
 8006118:	20000e28 	.word	0x20000e28
 800611c:	20000e84 	.word	0x20000e84
 8006120:	20000e8c 	.word	0x20000e8c
 8006124:	20000e74 	.word	0x20000e74
 8006128:	2000099c 	.word	0x2000099c
 800612c:	20000998 	.word	0x20000998
 8006130:	20000e80 	.word	0x20000e80
 8006134:	20000e7c 	.word	0x20000e7c

08006138 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800613e:	4b2b      	ldr	r3, [pc, #172]	@ (80061ec <vTaskSwitchContext+0xb4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006146:	4b2a      	ldr	r3, [pc, #168]	@ (80061f0 <vTaskSwitchContext+0xb8>)
 8006148:	2201      	movs	r2, #1
 800614a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800614c:	e047      	b.n	80061de <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800614e:	4b28      	ldr	r3, [pc, #160]	@ (80061f0 <vTaskSwitchContext+0xb8>)
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006154:	4b27      	ldr	r3, [pc, #156]	@ (80061f4 <vTaskSwitchContext+0xbc>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	e011      	b.n	8006180 <vTaskSwitchContext+0x48>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10b      	bne.n	800617a <vTaskSwitchContext+0x42>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	607b      	str	r3, [r7, #4]
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	e7fd      	b.n	8006176 <vTaskSwitchContext+0x3e>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3b01      	subs	r3, #1
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	491d      	ldr	r1, [pc, #116]	@ (80061f8 <vTaskSwitchContext+0xc0>)
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0e3      	beq.n	800615c <vTaskSwitchContext+0x24>
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4613      	mov	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4a16      	ldr	r2, [pc, #88]	@ (80061f8 <vTaskSwitchContext+0xc0>)
 80061a0:	4413      	add	r3, r2
 80061a2:	60bb      	str	r3, [r7, #8]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	605a      	str	r2, [r3, #4]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	3308      	adds	r3, #8
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d104      	bne.n	80061c4 <vTaskSwitchContext+0x8c>
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	605a      	str	r2, [r3, #4]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	4a0c      	ldr	r2, [pc, #48]	@ (80061fc <vTaskSwitchContext+0xc4>)
 80061cc:	6013      	str	r3, [r2, #0]
 80061ce:	4a09      	ldr	r2, [pc, #36]	@ (80061f4 <vTaskSwitchContext+0xbc>)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061d4:	4b09      	ldr	r3, [pc, #36]	@ (80061fc <vTaskSwitchContext+0xc4>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3354      	adds	r3, #84	@ 0x54
 80061da:	4a09      	ldr	r2, [pc, #36]	@ (8006200 <vTaskSwitchContext+0xc8>)
 80061dc:	6013      	str	r3, [r2, #0]
}
 80061de:	bf00      	nop
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	20000e94 	.word	0x20000e94
 80061f0:	20000e80 	.word	0x20000e80
 80061f4:	20000e74 	.word	0x20000e74
 80061f8:	2000099c 	.word	0x2000099c
 80061fc:	20000998 	.word	0x20000998
 8006200:	20000010 	.word	0x20000010

08006204 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10b      	bne.n	800622c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	60fb      	str	r3, [r7, #12]
}
 8006226:	bf00      	nop
 8006228:	bf00      	nop
 800622a:	e7fd      	b.n	8006228 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800622c:	4b07      	ldr	r3, [pc, #28]	@ (800624c <vTaskPlaceOnEventList+0x48>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3318      	adds	r3, #24
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7fe fe48 	bl	8004eca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800623a:	2101      	movs	r1, #1
 800623c:	6838      	ldr	r0, [r7, #0]
 800623e:	f000 fa87 	bl	8006750 <prvAddCurrentTaskToDelayedList>
}
 8006242:	bf00      	nop
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000998 	.word	0x20000998

08006250 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10b      	bne.n	800627a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	617b      	str	r3, [r7, #20]
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	e7fd      	b.n	8006276 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800627a:	4b0a      	ldr	r3, [pc, #40]	@ (80062a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	3318      	adds	r3, #24
 8006280:	4619      	mov	r1, r3
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f7fe fdfd 	bl	8004e82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800628e:	f04f 33ff 	mov.w	r3, #4294967295
 8006292:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	68b8      	ldr	r0, [r7, #8]
 8006298:	f000 fa5a 	bl	8006750 <prvAddCurrentTaskToDelayedList>
	}
 800629c:	bf00      	nop
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20000998 	.word	0x20000998

080062a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10b      	bne.n	80062d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	60fb      	str	r3, [r7, #12]
}
 80062d0:	bf00      	nop
 80062d2:	bf00      	nop
 80062d4:	e7fd      	b.n	80062d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	3318      	adds	r3, #24
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fe fe2e 	bl	8004f3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006358 <xTaskRemoveFromEventList+0xb0>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d11d      	bne.n	8006324 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	3304      	adds	r3, #4
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fe fe25 	bl	8004f3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f6:	4b19      	ldr	r3, [pc, #100]	@ (800635c <xTaskRemoveFromEventList+0xb4>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d903      	bls.n	8006306 <xTaskRemoveFromEventList+0x5e>
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006302:	4a16      	ldr	r2, [pc, #88]	@ (800635c <xTaskRemoveFromEventList+0xb4>)
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4a13      	ldr	r2, [pc, #76]	@ (8006360 <xTaskRemoveFromEventList+0xb8>)
 8006314:	441a      	add	r2, r3
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	3304      	adds	r3, #4
 800631a:	4619      	mov	r1, r3
 800631c:	4610      	mov	r0, r2
 800631e:	f7fe fdb0 	bl	8004e82 <vListInsertEnd>
 8006322:	e005      	b.n	8006330 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	3318      	adds	r3, #24
 8006328:	4619      	mov	r1, r3
 800632a:	480e      	ldr	r0, [pc, #56]	@ (8006364 <xTaskRemoveFromEventList+0xbc>)
 800632c:	f7fe fda9 	bl	8004e82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006334:	4b0c      	ldr	r3, [pc, #48]	@ (8006368 <xTaskRemoveFromEventList+0xc0>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633a:	429a      	cmp	r2, r3
 800633c:	d905      	bls.n	800634a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800633e:	2301      	movs	r3, #1
 8006340:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006342:	4b0a      	ldr	r3, [pc, #40]	@ (800636c <xTaskRemoveFromEventList+0xc4>)
 8006344:	2201      	movs	r2, #1
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	e001      	b.n	800634e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800634a:	2300      	movs	r3, #0
 800634c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800634e:	697b      	ldr	r3, [r7, #20]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	20000e94 	.word	0x20000e94
 800635c:	20000e74 	.word	0x20000e74
 8006360:	2000099c 	.word	0x2000099c
 8006364:	20000e2c 	.word	0x20000e2c
 8006368:	20000998 	.word	0x20000998
 800636c:	20000e80 	.word	0x20000e80

08006370 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006378:	4b06      	ldr	r3, [pc, #24]	@ (8006394 <vTaskInternalSetTimeOutState+0x24>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006380:	4b05      	ldr	r3, [pc, #20]	@ (8006398 <vTaskInternalSetTimeOutState+0x28>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	605a      	str	r2, [r3, #4]
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	20000e84 	.word	0x20000e84
 8006398:	20000e70 	.word	0x20000e70

0800639c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10b      	bne.n	80063c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	613b      	str	r3, [r7, #16]
}
 80063be:	bf00      	nop
 80063c0:	bf00      	nop
 80063c2:	e7fd      	b.n	80063c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10b      	bne.n	80063e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	60fb      	str	r3, [r7, #12]
}
 80063dc:	bf00      	nop
 80063de:	bf00      	nop
 80063e0:	e7fd      	b.n	80063de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80063e2:	f000 fe91 	bl	8007108 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063e6:	4b1d      	ldr	r3, [pc, #116]	@ (800645c <xTaskCheckForTimeOut+0xc0>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fe:	d102      	bne.n	8006406 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006400:	2300      	movs	r3, #0
 8006402:	61fb      	str	r3, [r7, #28]
 8006404:	e023      	b.n	800644e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	4b15      	ldr	r3, [pc, #84]	@ (8006460 <xTaskCheckForTimeOut+0xc4>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d007      	beq.n	8006422 <xTaskCheckForTimeOut+0x86>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	429a      	cmp	r2, r3
 800641a:	d302      	bcc.n	8006422 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800641c:	2301      	movs	r3, #1
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	e015      	b.n	800644e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	429a      	cmp	r2, r3
 800642a:	d20b      	bcs.n	8006444 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	1ad2      	subs	r2, r2, r3
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff ff99 	bl	8006370 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800643e:	2300      	movs	r3, #0
 8006440:	61fb      	str	r3, [r7, #28]
 8006442:	e004      	b.n	800644e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800644a:	2301      	movs	r3, #1
 800644c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800644e:	f000 fe8d 	bl	800716c <vPortExitCritical>

	return xReturn;
 8006452:	69fb      	ldr	r3, [r7, #28]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3720      	adds	r7, #32
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20000e70 	.word	0x20000e70
 8006460:	20000e84 	.word	0x20000e84

08006464 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006464:	b480      	push	{r7}
 8006466:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006468:	4b03      	ldr	r3, [pc, #12]	@ (8006478 <vTaskMissedYield+0x14>)
 800646a:	2201      	movs	r2, #1
 800646c:	601a      	str	r2, [r3, #0]
}
 800646e:	bf00      	nop
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	20000e80 	.word	0x20000e80

0800647c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006484:	f000 f852 	bl	800652c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006488:	4b06      	ldr	r3, [pc, #24]	@ (80064a4 <prvIdleTask+0x28>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d9f9      	bls.n	8006484 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006490:	4b05      	ldr	r3, [pc, #20]	@ (80064a8 <prvIdleTask+0x2c>)
 8006492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064a0:	e7f0      	b.n	8006484 <prvIdleTask+0x8>
 80064a2:	bf00      	nop
 80064a4:	2000099c 	.word	0x2000099c
 80064a8:	e000ed04 	.word	0xe000ed04

080064ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064b2:	2300      	movs	r3, #0
 80064b4:	607b      	str	r3, [r7, #4]
 80064b6:	e00c      	b.n	80064d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	4613      	mov	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4a12      	ldr	r2, [pc, #72]	@ (800650c <prvInitialiseTaskLists+0x60>)
 80064c4:	4413      	add	r3, r2
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fcae 	bl	8004e28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3301      	adds	r3, #1
 80064d0:	607b      	str	r3, [r7, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b37      	cmp	r3, #55	@ 0x37
 80064d6:	d9ef      	bls.n	80064b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064d8:	480d      	ldr	r0, [pc, #52]	@ (8006510 <prvInitialiseTaskLists+0x64>)
 80064da:	f7fe fca5 	bl	8004e28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064de:	480d      	ldr	r0, [pc, #52]	@ (8006514 <prvInitialiseTaskLists+0x68>)
 80064e0:	f7fe fca2 	bl	8004e28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064e4:	480c      	ldr	r0, [pc, #48]	@ (8006518 <prvInitialiseTaskLists+0x6c>)
 80064e6:	f7fe fc9f 	bl	8004e28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064ea:	480c      	ldr	r0, [pc, #48]	@ (800651c <prvInitialiseTaskLists+0x70>)
 80064ec:	f7fe fc9c 	bl	8004e28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064f0:	480b      	ldr	r0, [pc, #44]	@ (8006520 <prvInitialiseTaskLists+0x74>)
 80064f2:	f7fe fc99 	bl	8004e28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006524 <prvInitialiseTaskLists+0x78>)
 80064f8:	4a05      	ldr	r2, [pc, #20]	@ (8006510 <prvInitialiseTaskLists+0x64>)
 80064fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006528 <prvInitialiseTaskLists+0x7c>)
 80064fe:	4a05      	ldr	r2, [pc, #20]	@ (8006514 <prvInitialiseTaskLists+0x68>)
 8006500:	601a      	str	r2, [r3, #0]
}
 8006502:	bf00      	nop
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	2000099c 	.word	0x2000099c
 8006510:	20000dfc 	.word	0x20000dfc
 8006514:	20000e10 	.word	0x20000e10
 8006518:	20000e2c 	.word	0x20000e2c
 800651c:	20000e40 	.word	0x20000e40
 8006520:	20000e58 	.word	0x20000e58
 8006524:	20000e24 	.word	0x20000e24
 8006528:	20000e28 	.word	0x20000e28

0800652c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006532:	e019      	b.n	8006568 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006534:	f000 fde8 	bl	8007108 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006538:	4b10      	ldr	r3, [pc, #64]	@ (800657c <prvCheckTasksWaitingTermination+0x50>)
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3304      	adds	r3, #4
 8006544:	4618      	mov	r0, r3
 8006546:	f7fe fcf9 	bl	8004f3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800654a:	4b0d      	ldr	r3, [pc, #52]	@ (8006580 <prvCheckTasksWaitingTermination+0x54>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3b01      	subs	r3, #1
 8006550:	4a0b      	ldr	r2, [pc, #44]	@ (8006580 <prvCheckTasksWaitingTermination+0x54>)
 8006552:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006554:	4b0b      	ldr	r3, [pc, #44]	@ (8006584 <prvCheckTasksWaitingTermination+0x58>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3b01      	subs	r3, #1
 800655a:	4a0a      	ldr	r2, [pc, #40]	@ (8006584 <prvCheckTasksWaitingTermination+0x58>)
 800655c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800655e:	f000 fe05 	bl	800716c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f810 	bl	8006588 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006568:	4b06      	ldr	r3, [pc, #24]	@ (8006584 <prvCheckTasksWaitingTermination+0x58>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1e1      	bne.n	8006534 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006570:	bf00      	nop
 8006572:	bf00      	nop
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	20000e40 	.word	0x20000e40
 8006580:	20000e6c 	.word	0x20000e6c
 8006584:	20000e54 	.word	0x20000e54

08006588 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3354      	adds	r3, #84	@ 0x54
 8006594:	4618      	mov	r0, r3
 8006596:	f001 f8cf 	bl	8007738 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d108      	bne.n	80065b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 ff9d 	bl	80074e8 <vPortFree>
				vPortFree( pxTCB );
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 ff9a 	bl	80074e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065b4:	e019      	b.n	80065ea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d103      	bne.n	80065c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 ff91 	bl	80074e8 <vPortFree>
	}
 80065c6:	e010      	b.n	80065ea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d00b      	beq.n	80065ea <prvDeleteTCB+0x62>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	60fb      	str	r3, [r7, #12]
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop
 80065e8:	e7fd      	b.n	80065e6 <prvDeleteTCB+0x5e>
	}
 80065ea:	bf00      	nop
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065fa:	4b0c      	ldr	r3, [pc, #48]	@ (800662c <prvResetNextTaskUnblockTime+0x38>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d104      	bne.n	800660e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006604:	4b0a      	ldr	r3, [pc, #40]	@ (8006630 <prvResetNextTaskUnblockTime+0x3c>)
 8006606:	f04f 32ff 	mov.w	r2, #4294967295
 800660a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800660c:	e008      	b.n	8006620 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800660e:	4b07      	ldr	r3, [pc, #28]	@ (800662c <prvResetNextTaskUnblockTime+0x38>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	4a04      	ldr	r2, [pc, #16]	@ (8006630 <prvResetNextTaskUnblockTime+0x3c>)
 800661e:	6013      	str	r3, [r2, #0]
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	20000e24 	.word	0x20000e24
 8006630:	20000e8c 	.word	0x20000e8c

08006634 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800663a:	4b0b      	ldr	r3, [pc, #44]	@ (8006668 <xTaskGetSchedulerState+0x34>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d102      	bne.n	8006648 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006642:	2301      	movs	r3, #1
 8006644:	607b      	str	r3, [r7, #4]
 8006646:	e008      	b.n	800665a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006648:	4b08      	ldr	r3, [pc, #32]	@ (800666c <xTaskGetSchedulerState+0x38>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d102      	bne.n	8006656 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006650:	2302      	movs	r3, #2
 8006652:	607b      	str	r3, [r7, #4]
 8006654:	e001      	b.n	800665a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006656:	2300      	movs	r3, #0
 8006658:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800665a:	687b      	ldr	r3, [r7, #4]
	}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	20000e78 	.word	0x20000e78
 800666c:	20000e94 	.word	0x20000e94

08006670 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800667c:	2300      	movs	r3, #0
 800667e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d058      	beq.n	8006738 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006686:	4b2f      	ldr	r3, [pc, #188]	@ (8006744 <xTaskPriorityDisinherit+0xd4>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	429a      	cmp	r2, r3
 800668e:	d00b      	beq.n	80066a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	60fb      	str	r3, [r7, #12]
}
 80066a2:	bf00      	nop
 80066a4:	bf00      	nop
 80066a6:	e7fd      	b.n	80066a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10b      	bne.n	80066c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	60bb      	str	r3, [r7, #8]
}
 80066c2:	bf00      	nop
 80066c4:	bf00      	nop
 80066c6:	e7fd      	b.n	80066c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066cc:	1e5a      	subs	r2, r3, #1
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066da:	429a      	cmp	r2, r3
 80066dc:	d02c      	beq.n	8006738 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d128      	bne.n	8006738 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	3304      	adds	r3, #4
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fe fc26 	bl	8004f3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006708:	4b0f      	ldr	r3, [pc, #60]	@ (8006748 <xTaskPriorityDisinherit+0xd8>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	429a      	cmp	r2, r3
 800670e:	d903      	bls.n	8006718 <xTaskPriorityDisinherit+0xa8>
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006714:	4a0c      	ldr	r2, [pc, #48]	@ (8006748 <xTaskPriorityDisinherit+0xd8>)
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4a09      	ldr	r2, [pc, #36]	@ (800674c <xTaskPriorityDisinherit+0xdc>)
 8006726:	441a      	add	r2, r3
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	3304      	adds	r3, #4
 800672c:	4619      	mov	r1, r3
 800672e:	4610      	mov	r0, r2
 8006730:	f7fe fba7 	bl	8004e82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006734:	2301      	movs	r3, #1
 8006736:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006738:	697b      	ldr	r3, [r7, #20]
	}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20000998 	.word	0x20000998
 8006748:	20000e74 	.word	0x20000e74
 800674c:	2000099c 	.word	0x2000099c

08006750 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800675a:	4b21      	ldr	r3, [pc, #132]	@ (80067e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006760:	4b20      	ldr	r3, [pc, #128]	@ (80067e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3304      	adds	r3, #4
 8006766:	4618      	mov	r0, r3
 8006768:	f7fe fbe8 	bl	8004f3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006772:	d10a      	bne.n	800678a <prvAddCurrentTaskToDelayedList+0x3a>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d007      	beq.n	800678a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800677a:	4b1a      	ldr	r3, [pc, #104]	@ (80067e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3304      	adds	r3, #4
 8006780:	4619      	mov	r1, r3
 8006782:	4819      	ldr	r0, [pc, #100]	@ (80067e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006784:	f7fe fb7d 	bl	8004e82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006788:	e026      	b.n	80067d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4413      	add	r3, r2
 8006790:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006792:	4b14      	ldr	r3, [pc, #80]	@ (80067e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d209      	bcs.n	80067b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067a2:	4b12      	ldr	r3, [pc, #72]	@ (80067ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	4b0f      	ldr	r3, [pc, #60]	@ (80067e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3304      	adds	r3, #4
 80067ac:	4619      	mov	r1, r3
 80067ae:	4610      	mov	r0, r2
 80067b0:	f7fe fb8b 	bl	8004eca <vListInsert>
}
 80067b4:	e010      	b.n	80067d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067b6:	4b0e      	ldr	r3, [pc, #56]	@ (80067f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	4b0a      	ldr	r3, [pc, #40]	@ (80067e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3304      	adds	r3, #4
 80067c0:	4619      	mov	r1, r3
 80067c2:	4610      	mov	r0, r2
 80067c4:	f7fe fb81 	bl	8004eca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067c8:	4b0a      	ldr	r3, [pc, #40]	@ (80067f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d202      	bcs.n	80067d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067d2:	4a08      	ldr	r2, [pc, #32]	@ (80067f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	6013      	str	r3, [r2, #0]
}
 80067d8:	bf00      	nop
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	20000e70 	.word	0x20000e70
 80067e4:	20000998 	.word	0x20000998
 80067e8:	20000e58 	.word	0x20000e58
 80067ec:	20000e28 	.word	0x20000e28
 80067f0:	20000e24 	.word	0x20000e24
 80067f4:	20000e8c 	.word	0x20000e8c

080067f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08a      	sub	sp, #40	@ 0x28
 80067fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80067fe:	2300      	movs	r3, #0
 8006800:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006802:	f000 fb13 	bl	8006e2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006806:	4b1d      	ldr	r3, [pc, #116]	@ (800687c <xTimerCreateTimerTask+0x84>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d021      	beq.n	8006852 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800680e:	2300      	movs	r3, #0
 8006810:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006816:	1d3a      	adds	r2, r7, #4
 8006818:	f107 0108 	add.w	r1, r7, #8
 800681c:	f107 030c 	add.w	r3, r7, #12
 8006820:	4618      	mov	r0, r3
 8006822:	f7fe fae7 	bl	8004df4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	9202      	str	r2, [sp, #8]
 800682e:	9301      	str	r3, [sp, #4]
 8006830:	2302      	movs	r3, #2
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	2300      	movs	r3, #0
 8006836:	460a      	mov	r2, r1
 8006838:	4911      	ldr	r1, [pc, #68]	@ (8006880 <xTimerCreateTimerTask+0x88>)
 800683a:	4812      	ldr	r0, [pc, #72]	@ (8006884 <xTimerCreateTimerTask+0x8c>)
 800683c:	f7ff f8a2 	bl	8005984 <xTaskCreateStatic>
 8006840:	4603      	mov	r3, r0
 8006842:	4a11      	ldr	r2, [pc, #68]	@ (8006888 <xTimerCreateTimerTask+0x90>)
 8006844:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006846:	4b10      	ldr	r3, [pc, #64]	@ (8006888 <xTimerCreateTimerTask+0x90>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800684e:	2301      	movs	r3, #1
 8006850:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10b      	bne.n	8006870 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	613b      	str	r3, [r7, #16]
}
 800686a:	bf00      	nop
 800686c:	bf00      	nop
 800686e:	e7fd      	b.n	800686c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006870:	697b      	ldr	r3, [r7, #20]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20000ec8 	.word	0x20000ec8
 8006880:	08007954 	.word	0x08007954
 8006884:	080069c5 	.word	0x080069c5
 8006888:	20000ecc 	.word	0x20000ecc

0800688c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08a      	sub	sp, #40	@ 0x28
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800689a:	2300      	movs	r3, #0
 800689c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10b      	bne.n	80068bc <xTimerGenericCommand+0x30>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	623b      	str	r3, [r7, #32]
}
 80068b6:	bf00      	nop
 80068b8:	bf00      	nop
 80068ba:	e7fd      	b.n	80068b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068bc:	4b19      	ldr	r3, [pc, #100]	@ (8006924 <xTimerGenericCommand+0x98>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d02a      	beq.n	800691a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b05      	cmp	r3, #5
 80068d4:	dc18      	bgt.n	8006908 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068d6:	f7ff fead 	bl	8006634 <xTaskGetSchedulerState>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d109      	bne.n	80068f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068e0:	4b10      	ldr	r3, [pc, #64]	@ (8006924 <xTimerGenericCommand+0x98>)
 80068e2:	6818      	ldr	r0, [r3, #0]
 80068e4:	f107 0110 	add.w	r1, r7, #16
 80068e8:	2300      	movs	r3, #0
 80068ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068ec:	f7fe fc5a 	bl	80051a4 <xQueueGenericSend>
 80068f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80068f2:	e012      	b.n	800691a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006924 <xTimerGenericCommand+0x98>)
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	f107 0110 	add.w	r1, r7, #16
 80068fc:	2300      	movs	r3, #0
 80068fe:	2200      	movs	r2, #0
 8006900:	f7fe fc50 	bl	80051a4 <xQueueGenericSend>
 8006904:	6278      	str	r0, [r7, #36]	@ 0x24
 8006906:	e008      	b.n	800691a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006908:	4b06      	ldr	r3, [pc, #24]	@ (8006924 <xTimerGenericCommand+0x98>)
 800690a:	6818      	ldr	r0, [r3, #0]
 800690c:	f107 0110 	add.w	r1, r7, #16
 8006910:	2300      	movs	r3, #0
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	f7fe fd48 	bl	80053a8 <xQueueGenericSendFromISR>
 8006918:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800691a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800691c:	4618      	mov	r0, r3
 800691e:	3728      	adds	r7, #40	@ 0x28
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	20000ec8 	.word	0x20000ec8

08006928 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af02      	add	r7, sp, #8
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006932:	4b23      	ldr	r3, [pc, #140]	@ (80069c0 <prvProcessExpiredTimer+0x98>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	3304      	adds	r3, #4
 8006940:	4618      	mov	r0, r3
 8006942:	f7fe fafb 	bl	8004f3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800694c:	f003 0304 	and.w	r3, r3, #4
 8006950:	2b00      	cmp	r3, #0
 8006952:	d023      	beq.n	800699c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	699a      	ldr	r2, [r3, #24]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	18d1      	adds	r1, r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	6978      	ldr	r0, [r7, #20]
 8006962:	f000 f8d5 	bl	8006b10 <prvInsertTimerInActiveList>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d020      	beq.n	80069ae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800696c:	2300      	movs	r3, #0
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	2300      	movs	r3, #0
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	2100      	movs	r1, #0
 8006976:	6978      	ldr	r0, [r7, #20]
 8006978:	f7ff ff88 	bl	800688c <xTimerGenericCommand>
 800697c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d114      	bne.n	80069ae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	60fb      	str	r3, [r7, #12]
}
 8006996:	bf00      	nop
 8006998:	bf00      	nop
 800699a:	e7fd      	b.n	8006998 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069a2:	f023 0301 	bic.w	r3, r3, #1
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	6978      	ldr	r0, [r7, #20]
 80069b4:	4798      	blx	r3
}
 80069b6:	bf00      	nop
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000ec0 	.word	0x20000ec0

080069c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069cc:	f107 0308 	add.w	r3, r7, #8
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 f859 	bl	8006a88 <prvGetNextExpireTime>
 80069d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	4619      	mov	r1, r3
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 f805 	bl	80069ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069e2:	f000 f8d7 	bl	8006b94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069e6:	bf00      	nop
 80069e8:	e7f0      	b.n	80069cc <prvTimerTask+0x8>
	...

080069ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069f6:	f7ff fa29 	bl	8005e4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069fa:	f107 0308 	add.w	r3, r7, #8
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 f866 	bl	8006ad0 <prvSampleTimeNow>
 8006a04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d130      	bne.n	8006a6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10a      	bne.n	8006a28 <prvProcessTimerOrBlockTask+0x3c>
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d806      	bhi.n	8006a28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a1a:	f7ff fa25 	bl	8005e68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a1e:	68f9      	ldr	r1, [r7, #12]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff ff81 	bl	8006928 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a26:	e024      	b.n	8006a72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d008      	beq.n	8006a40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a2e:	4b13      	ldr	r3, [pc, #76]	@ (8006a7c <prvProcessTimerOrBlockTask+0x90>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <prvProcessTimerOrBlockTask+0x50>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e000      	b.n	8006a3e <prvProcessTimerOrBlockTask+0x52>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a40:	4b0f      	ldr	r3, [pc, #60]	@ (8006a80 <prvProcessTimerOrBlockTask+0x94>)
 8006a42:	6818      	ldr	r0, [r3, #0]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	f7fe ff65 	bl	800591c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a52:	f7ff fa09 	bl	8005e68 <xTaskResumeAll>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a5c:	4b09      	ldr	r3, [pc, #36]	@ (8006a84 <prvProcessTimerOrBlockTask+0x98>)
 8006a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	f3bf 8f6f 	isb	sy
}
 8006a6c:	e001      	b.n	8006a72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a6e:	f7ff f9fb 	bl	8005e68 <xTaskResumeAll>
}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20000ec4 	.word	0x20000ec4
 8006a80:	20000ec8 	.word	0x20000ec8
 8006a84:	e000ed04 	.word	0xe000ed04

08006a88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a90:	4b0e      	ldr	r3, [pc, #56]	@ (8006acc <prvGetNextExpireTime+0x44>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <prvGetNextExpireTime+0x16>
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	e000      	b.n	8006aa0 <prvGetNextExpireTime+0x18>
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d105      	bne.n	8006ab8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006aac:	4b07      	ldr	r3, [pc, #28]	@ (8006acc <prvGetNextExpireTime+0x44>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	60fb      	str	r3, [r7, #12]
 8006ab6:	e001      	b.n	8006abc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006abc:	68fb      	ldr	r3, [r7, #12]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	20000ec0 	.word	0x20000ec0

08006ad0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ad8:	f7ff fa64 	bl	8005fa4 <xTaskGetTickCount>
 8006adc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ade:	4b0b      	ldr	r3, [pc, #44]	@ (8006b0c <prvSampleTimeNow+0x3c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d205      	bcs.n	8006af4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ae8:	f000 f93a 	bl	8006d60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	e002      	b.n	8006afa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006afa:	4a04      	ldr	r2, [pc, #16]	@ (8006b0c <prvSampleTimeNow+0x3c>)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b00:	68fb      	ldr	r3, [r7, #12]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20000ed0 	.word	0x20000ed0

08006b10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
 8006b1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d812      	bhi.n	8006b5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	1ad2      	subs	r2, r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d302      	bcc.n	8006b4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b44:	2301      	movs	r3, #1
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	e01b      	b.n	8006b82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b4a:	4b10      	ldr	r3, [pc, #64]	@ (8006b8c <prvInsertTimerInActiveList+0x7c>)
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3304      	adds	r3, #4
 8006b52:	4619      	mov	r1, r3
 8006b54:	4610      	mov	r0, r2
 8006b56:	f7fe f9b8 	bl	8004eca <vListInsert>
 8006b5a:	e012      	b.n	8006b82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d206      	bcs.n	8006b72 <prvInsertTimerInActiveList+0x62>
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d302      	bcc.n	8006b72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	e007      	b.n	8006b82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b72:	4b07      	ldr	r3, [pc, #28]	@ (8006b90 <prvInsertTimerInActiveList+0x80>)
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	f7fe f9a4 	bl	8004eca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b82:	697b      	ldr	r3, [r7, #20]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20000ec4 	.word	0x20000ec4
 8006b90:	20000ec0 	.word	0x20000ec0

08006b94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08e      	sub	sp, #56	@ 0x38
 8006b98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b9a:	e0ce      	b.n	8006d3a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	da19      	bge.n	8006bd6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ba2:	1d3b      	adds	r3, r7, #4
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10b      	bne.n	8006bc6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	61fb      	str	r3, [r7, #28]
}
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
 8006bc4:	e7fd      	b.n	8006bc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bcc:	6850      	ldr	r0, [r2, #4]
 8006bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bd0:	6892      	ldr	r2, [r2, #8]
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f2c0 80ae 	blt.w	8006d3a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d004      	beq.n	8006bf4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bec:	3304      	adds	r3, #4
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fe f9a4 	bl	8004f3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bf4:	463b      	mov	r3, r7
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7ff ff6a 	bl	8006ad0 <prvSampleTimeNow>
 8006bfc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b09      	cmp	r3, #9
 8006c02:	f200 8097 	bhi.w	8006d34 <prvProcessReceivedCommands+0x1a0>
 8006c06:	a201      	add	r2, pc, #4	@ (adr r2, 8006c0c <prvProcessReceivedCommands+0x78>)
 8006c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0c:	08006c35 	.word	0x08006c35
 8006c10:	08006c35 	.word	0x08006c35
 8006c14:	08006c35 	.word	0x08006c35
 8006c18:	08006cab 	.word	0x08006cab
 8006c1c:	08006cbf 	.word	0x08006cbf
 8006c20:	08006d0b 	.word	0x08006d0b
 8006c24:	08006c35 	.word	0x08006c35
 8006c28:	08006c35 	.word	0x08006c35
 8006c2c:	08006cab 	.word	0x08006cab
 8006c30:	08006cbf 	.word	0x08006cbf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c3a:	f043 0301 	orr.w	r3, r3, #1
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	18d1      	adds	r1, r2, r3
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c54:	f7ff ff5c 	bl	8006b10 <prvInsertTimerInActiveList>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d06c      	beq.n	8006d38 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d061      	beq.n	8006d38 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	441a      	add	r2, r3
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	2300      	movs	r3, #0
 8006c82:	2100      	movs	r1, #0
 8006c84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c86:	f7ff fe01 	bl	800688c <xTimerGenericCommand>
 8006c8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d152      	bne.n	8006d38 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	61bb      	str	r3, [r7, #24]
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop
 8006ca8:	e7fd      	b.n	8006ca6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cb0:	f023 0301 	bic.w	r3, r3, #1
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006cbc:	e03d      	b.n	8006d3a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cc4:	f043 0301 	orr.w	r3, r3, #1
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ccc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10b      	bne.n	8006cf6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	617b      	str	r3, [r7, #20]
}
 8006cf0:	bf00      	nop
 8006cf2:	bf00      	nop
 8006cf4:	e7fd      	b.n	8006cf2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf8:	699a      	ldr	r2, [r3, #24]
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfc:	18d1      	adds	r1, r2, r3
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d04:	f7ff ff04 	bl	8006b10 <prvInsertTimerInActiveList>
					break;
 8006d08:	e017      	b.n	8006d3a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d103      	bne.n	8006d20 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006d18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d1a:	f000 fbe5 	bl	80074e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d1e:	e00c      	b.n	8006d3a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d26:	f023 0301 	bic.w	r3, r3, #1
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006d32:	e002      	b.n	8006d3a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006d34:	bf00      	nop
 8006d36:	e000      	b.n	8006d3a <prvProcessReceivedCommands+0x1a6>
					break;
 8006d38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d3a:	4b08      	ldr	r3, [pc, #32]	@ (8006d5c <prvProcessReceivedCommands+0x1c8>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	1d39      	adds	r1, r7, #4
 8006d40:	2200      	movs	r2, #0
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fe fbce 	bl	80054e4 <xQueueReceive>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f47f af26 	bne.w	8006b9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006d50:	bf00      	nop
 8006d52:	bf00      	nop
 8006d54:	3730      	adds	r7, #48	@ 0x30
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000ec8 	.word	0x20000ec8

08006d60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d66:	e049      	b.n	8006dfc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d68:	4b2e      	ldr	r3, [pc, #184]	@ (8006e24 <prvSwitchTimerLists+0xc4>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d72:	4b2c      	ldr	r3, [pc, #176]	@ (8006e24 <prvSwitchTimerLists+0xc4>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fe f8db 	bl	8004f3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d02f      	beq.n	8006dfc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	4413      	add	r3, r2
 8006da4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d90e      	bls.n	8006dcc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dba:	4b1a      	ldr	r3, [pc, #104]	@ (8006e24 <prvSwitchTimerLists+0xc4>)
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	f7fe f880 	bl	8004eca <vListInsert>
 8006dca:	e017      	b.n	8006dfc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dcc:	2300      	movs	r3, #0
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f7ff fd58 	bl	800688c <xTimerGenericCommand>
 8006ddc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10b      	bne.n	8006dfc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	603b      	str	r3, [r7, #0]
}
 8006df6:	bf00      	nop
 8006df8:	bf00      	nop
 8006dfa:	e7fd      	b.n	8006df8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dfc:	4b09      	ldr	r3, [pc, #36]	@ (8006e24 <prvSwitchTimerLists+0xc4>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1b0      	bne.n	8006d68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e06:	4b07      	ldr	r3, [pc, #28]	@ (8006e24 <prvSwitchTimerLists+0xc4>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e0c:	4b06      	ldr	r3, [pc, #24]	@ (8006e28 <prvSwitchTimerLists+0xc8>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a04      	ldr	r2, [pc, #16]	@ (8006e24 <prvSwitchTimerLists+0xc4>)
 8006e12:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e14:	4a04      	ldr	r2, [pc, #16]	@ (8006e28 <prvSwitchTimerLists+0xc8>)
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	6013      	str	r3, [r2, #0]
}
 8006e1a:	bf00      	nop
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20000ec0 	.word	0x20000ec0
 8006e28:	20000ec4 	.word	0x20000ec4

08006e2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e32:	f000 f969 	bl	8007108 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e36:	4b15      	ldr	r3, [pc, #84]	@ (8006e8c <prvCheckForValidListAndQueue+0x60>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d120      	bne.n	8006e80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e3e:	4814      	ldr	r0, [pc, #80]	@ (8006e90 <prvCheckForValidListAndQueue+0x64>)
 8006e40:	f7fd fff2 	bl	8004e28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e44:	4813      	ldr	r0, [pc, #76]	@ (8006e94 <prvCheckForValidListAndQueue+0x68>)
 8006e46:	f7fd ffef 	bl	8004e28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e4a:	4b13      	ldr	r3, [pc, #76]	@ (8006e98 <prvCheckForValidListAndQueue+0x6c>)
 8006e4c:	4a10      	ldr	r2, [pc, #64]	@ (8006e90 <prvCheckForValidListAndQueue+0x64>)
 8006e4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e50:	4b12      	ldr	r3, [pc, #72]	@ (8006e9c <prvCheckForValidListAndQueue+0x70>)
 8006e52:	4a10      	ldr	r2, [pc, #64]	@ (8006e94 <prvCheckForValidListAndQueue+0x68>)
 8006e54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e56:	2300      	movs	r3, #0
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	4b11      	ldr	r3, [pc, #68]	@ (8006ea0 <prvCheckForValidListAndQueue+0x74>)
 8006e5c:	4a11      	ldr	r2, [pc, #68]	@ (8006ea4 <prvCheckForValidListAndQueue+0x78>)
 8006e5e:	2110      	movs	r1, #16
 8006e60:	200a      	movs	r0, #10
 8006e62:	f7fe f8ff 	bl	8005064 <xQueueGenericCreateStatic>
 8006e66:	4603      	mov	r3, r0
 8006e68:	4a08      	ldr	r2, [pc, #32]	@ (8006e8c <prvCheckForValidListAndQueue+0x60>)
 8006e6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e6c:	4b07      	ldr	r3, [pc, #28]	@ (8006e8c <prvCheckForValidListAndQueue+0x60>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d005      	beq.n	8006e80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e74:	4b05      	ldr	r3, [pc, #20]	@ (8006e8c <prvCheckForValidListAndQueue+0x60>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	490b      	ldr	r1, [pc, #44]	@ (8006ea8 <prvCheckForValidListAndQueue+0x7c>)
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe fd24 	bl	80058c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e80:	f000 f974 	bl	800716c <vPortExitCritical>
}
 8006e84:	bf00      	nop
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000ec8 	.word	0x20000ec8
 8006e90:	20000e98 	.word	0x20000e98
 8006e94:	20000eac 	.word	0x20000eac
 8006e98:	20000ec0 	.word	0x20000ec0
 8006e9c:	20000ec4 	.word	0x20000ec4
 8006ea0:	20000f74 	.word	0x20000f74
 8006ea4:	20000ed4 	.word	0x20000ed4
 8006ea8:	0800795c 	.word	0x0800795c

08006eac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	3b04      	subs	r3, #4
 8006ebc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3b04      	subs	r3, #4
 8006eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f023 0201 	bic.w	r2, r3, #1
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3b04      	subs	r3, #4
 8006eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006edc:	4a0c      	ldr	r2, [pc, #48]	@ (8006f10 <pxPortInitialiseStack+0x64>)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3b14      	subs	r3, #20
 8006ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	3b04      	subs	r3, #4
 8006ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f06f 0202 	mvn.w	r2, #2
 8006efa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	3b20      	subs	r3, #32
 8006f00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f02:	68fb      	ldr	r3, [r7, #12]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	08006f15 	.word	0x08006f15

08006f14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f1e:	4b13      	ldr	r3, [pc, #76]	@ (8006f6c <prvTaskExitError+0x58>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f26:	d00b      	beq.n	8006f40 <prvTaskExitError+0x2c>
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	60fb      	str	r3, [r7, #12]
}
 8006f3a:	bf00      	nop
 8006f3c:	bf00      	nop
 8006f3e:	e7fd      	b.n	8006f3c <prvTaskExitError+0x28>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	60bb      	str	r3, [r7, #8]
}
 8006f52:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f54:	bf00      	nop
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0fc      	beq.n	8006f56 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f5c:	bf00      	nop
 8006f5e:	bf00      	nop
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	2000000c 	.word	0x2000000c

08006f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f70:	4b07      	ldr	r3, [pc, #28]	@ (8006f90 <pxCurrentTCBConst2>)
 8006f72:	6819      	ldr	r1, [r3, #0]
 8006f74:	6808      	ldr	r0, [r1, #0]
 8006f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f7a:	f380 8809 	msr	PSP, r0
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f04f 0000 	mov.w	r0, #0
 8006f86:	f380 8811 	msr	BASEPRI, r0
 8006f8a:	4770      	bx	lr
 8006f8c:	f3af 8000 	nop.w

08006f90 <pxCurrentTCBConst2>:
 8006f90:	20000998 	.word	0x20000998
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop

08006f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f98:	4808      	ldr	r0, [pc, #32]	@ (8006fbc <prvPortStartFirstTask+0x24>)
 8006f9a:	6800      	ldr	r0, [r0, #0]
 8006f9c:	6800      	ldr	r0, [r0, #0]
 8006f9e:	f380 8808 	msr	MSP, r0
 8006fa2:	f04f 0000 	mov.w	r0, #0
 8006fa6:	f380 8814 	msr	CONTROL, r0
 8006faa:	b662      	cpsie	i
 8006fac:	b661      	cpsie	f
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	df00      	svc	0
 8006fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fba:	bf00      	nop
 8006fbc:	e000ed08 	.word	0xe000ed08

08006fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fc6:	4b47      	ldr	r3, [pc, #284]	@ (80070e4 <xPortStartScheduler+0x124>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a47      	ldr	r2, [pc, #284]	@ (80070e8 <xPortStartScheduler+0x128>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d10b      	bne.n	8006fe8 <xPortStartScheduler+0x28>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	613b      	str	r3, [r7, #16]
}
 8006fe2:	bf00      	nop
 8006fe4:	bf00      	nop
 8006fe6:	e7fd      	b.n	8006fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80070e4 <xPortStartScheduler+0x124>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a3f      	ldr	r2, [pc, #252]	@ (80070ec <xPortStartScheduler+0x12c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d10b      	bne.n	800700a <xPortStartScheduler+0x4a>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	60fb      	str	r3, [r7, #12]
}
 8007004:	bf00      	nop
 8007006:	bf00      	nop
 8007008:	e7fd      	b.n	8007006 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800700a:	4b39      	ldr	r3, [pc, #228]	@ (80070f0 <xPortStartScheduler+0x130>)
 800700c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	22ff      	movs	r2, #255	@ 0xff
 800701a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007024:	78fb      	ldrb	r3, [r7, #3]
 8007026:	b2db      	uxtb	r3, r3
 8007028:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800702c:	b2da      	uxtb	r2, r3
 800702e:	4b31      	ldr	r3, [pc, #196]	@ (80070f4 <xPortStartScheduler+0x134>)
 8007030:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007032:	4b31      	ldr	r3, [pc, #196]	@ (80070f8 <xPortStartScheduler+0x138>)
 8007034:	2207      	movs	r2, #7
 8007036:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007038:	e009      	b.n	800704e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800703a:	4b2f      	ldr	r3, [pc, #188]	@ (80070f8 <xPortStartScheduler+0x138>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3b01      	subs	r3, #1
 8007040:	4a2d      	ldr	r2, [pc, #180]	@ (80070f8 <xPortStartScheduler+0x138>)
 8007042:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007044:	78fb      	ldrb	r3, [r7, #3]
 8007046:	b2db      	uxtb	r3, r3
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	b2db      	uxtb	r3, r3
 800704c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800704e:	78fb      	ldrb	r3, [r7, #3]
 8007050:	b2db      	uxtb	r3, r3
 8007052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007056:	2b80      	cmp	r3, #128	@ 0x80
 8007058:	d0ef      	beq.n	800703a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800705a:	4b27      	ldr	r3, [pc, #156]	@ (80070f8 <xPortStartScheduler+0x138>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f1c3 0307 	rsb	r3, r3, #7
 8007062:	2b04      	cmp	r3, #4
 8007064:	d00b      	beq.n	800707e <xPortStartScheduler+0xbe>
	__asm volatile
 8007066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	60bb      	str	r3, [r7, #8]
}
 8007078:	bf00      	nop
 800707a:	bf00      	nop
 800707c:	e7fd      	b.n	800707a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800707e:	4b1e      	ldr	r3, [pc, #120]	@ (80070f8 <xPortStartScheduler+0x138>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	021b      	lsls	r3, r3, #8
 8007084:	4a1c      	ldr	r2, [pc, #112]	@ (80070f8 <xPortStartScheduler+0x138>)
 8007086:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007088:	4b1b      	ldr	r3, [pc, #108]	@ (80070f8 <xPortStartScheduler+0x138>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007090:	4a19      	ldr	r2, [pc, #100]	@ (80070f8 <xPortStartScheduler+0x138>)
 8007092:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	b2da      	uxtb	r2, r3
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800709c:	4b17      	ldr	r3, [pc, #92]	@ (80070fc <xPortStartScheduler+0x13c>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a16      	ldr	r2, [pc, #88]	@ (80070fc <xPortStartScheduler+0x13c>)
 80070a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80070a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070a8:	4b14      	ldr	r3, [pc, #80]	@ (80070fc <xPortStartScheduler+0x13c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a13      	ldr	r2, [pc, #76]	@ (80070fc <xPortStartScheduler+0x13c>)
 80070ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80070b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070b4:	f000 f8da 	bl	800726c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070b8:	4b11      	ldr	r3, [pc, #68]	@ (8007100 <xPortStartScheduler+0x140>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070be:	f000 f8f9 	bl	80072b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070c2:	4b10      	ldr	r3, [pc, #64]	@ (8007104 <xPortStartScheduler+0x144>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a0f      	ldr	r2, [pc, #60]	@ (8007104 <xPortStartScheduler+0x144>)
 80070c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80070cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070ce:	f7ff ff63 	bl	8006f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070d2:	f7ff f831 	bl	8006138 <vTaskSwitchContext>
	prvTaskExitError();
 80070d6:	f7ff ff1d 	bl	8006f14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	e000ed00 	.word	0xe000ed00
 80070e8:	410fc271 	.word	0x410fc271
 80070ec:	410fc270 	.word	0x410fc270
 80070f0:	e000e400 	.word	0xe000e400
 80070f4:	20000fc4 	.word	0x20000fc4
 80070f8:	20000fc8 	.word	0x20000fc8
 80070fc:	e000ed20 	.word	0xe000ed20
 8007100:	2000000c 	.word	0x2000000c
 8007104:	e000ef34 	.word	0xe000ef34

08007108 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	607b      	str	r3, [r7, #4]
}
 8007120:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007122:	4b10      	ldr	r3, [pc, #64]	@ (8007164 <vPortEnterCritical+0x5c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3301      	adds	r3, #1
 8007128:	4a0e      	ldr	r2, [pc, #56]	@ (8007164 <vPortEnterCritical+0x5c>)
 800712a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800712c:	4b0d      	ldr	r3, [pc, #52]	@ (8007164 <vPortEnterCritical+0x5c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d110      	bne.n	8007156 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007134:	4b0c      	ldr	r3, [pc, #48]	@ (8007168 <vPortEnterCritical+0x60>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00b      	beq.n	8007156 <vPortEnterCritical+0x4e>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	603b      	str	r3, [r7, #0]
}
 8007150:	bf00      	nop
 8007152:	bf00      	nop
 8007154:	e7fd      	b.n	8007152 <vPortEnterCritical+0x4a>
	}
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	2000000c 	.word	0x2000000c
 8007168:	e000ed04 	.word	0xe000ed04

0800716c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007172:	4b12      	ldr	r3, [pc, #72]	@ (80071bc <vPortExitCritical+0x50>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10b      	bne.n	8007192 <vPortExitCritical+0x26>
	__asm volatile
 800717a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	607b      	str	r3, [r7, #4]
}
 800718c:	bf00      	nop
 800718e:	bf00      	nop
 8007190:	e7fd      	b.n	800718e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007192:	4b0a      	ldr	r3, [pc, #40]	@ (80071bc <vPortExitCritical+0x50>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	3b01      	subs	r3, #1
 8007198:	4a08      	ldr	r2, [pc, #32]	@ (80071bc <vPortExitCritical+0x50>)
 800719a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800719c:	4b07      	ldr	r3, [pc, #28]	@ (80071bc <vPortExitCritical+0x50>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d105      	bne.n	80071b0 <vPortExitCritical+0x44>
 80071a4:	2300      	movs	r3, #0
 80071a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	f383 8811 	msr	BASEPRI, r3
}
 80071ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	2000000c 	.word	0x2000000c

080071c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071c0:	f3ef 8009 	mrs	r0, PSP
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	4b15      	ldr	r3, [pc, #84]	@ (8007220 <pxCurrentTCBConst>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	f01e 0f10 	tst.w	lr, #16
 80071d0:	bf08      	it	eq
 80071d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071da:	6010      	str	r0, [r2, #0]
 80071dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80071e4:	f380 8811 	msr	BASEPRI, r0
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f7fe ffa2 	bl	8006138 <vTaskSwitchContext>
 80071f4:	f04f 0000 	mov.w	r0, #0
 80071f8:	f380 8811 	msr	BASEPRI, r0
 80071fc:	bc09      	pop	{r0, r3}
 80071fe:	6819      	ldr	r1, [r3, #0]
 8007200:	6808      	ldr	r0, [r1, #0]
 8007202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007206:	f01e 0f10 	tst.w	lr, #16
 800720a:	bf08      	it	eq
 800720c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007210:	f380 8809 	msr	PSP, r0
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	f3af 8000 	nop.w

08007220 <pxCurrentTCBConst>:
 8007220:	20000998 	.word	0x20000998
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop

08007228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	607b      	str	r3, [r7, #4]
}
 8007240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007242:	f7fe febf 	bl	8005fc4 <xTaskIncrementTick>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800724c:	4b06      	ldr	r3, [pc, #24]	@ (8007268 <xPortSysTickHandler+0x40>)
 800724e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	2300      	movs	r3, #0
 8007256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	f383 8811 	msr	BASEPRI, r3
}
 800725e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007260:	bf00      	nop
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	e000ed04 	.word	0xe000ed04

0800726c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800726c:	b480      	push	{r7}
 800726e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007270:	4b0b      	ldr	r3, [pc, #44]	@ (80072a0 <vPortSetupTimerInterrupt+0x34>)
 8007272:	2200      	movs	r2, #0
 8007274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007276:	4b0b      	ldr	r3, [pc, #44]	@ (80072a4 <vPortSetupTimerInterrupt+0x38>)
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800727c:	4b0a      	ldr	r3, [pc, #40]	@ (80072a8 <vPortSetupTimerInterrupt+0x3c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a0a      	ldr	r2, [pc, #40]	@ (80072ac <vPortSetupTimerInterrupt+0x40>)
 8007282:	fba2 2303 	umull	r2, r3, r2, r3
 8007286:	099b      	lsrs	r3, r3, #6
 8007288:	4a09      	ldr	r2, [pc, #36]	@ (80072b0 <vPortSetupTimerInterrupt+0x44>)
 800728a:	3b01      	subs	r3, #1
 800728c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800728e:	4b04      	ldr	r3, [pc, #16]	@ (80072a0 <vPortSetupTimerInterrupt+0x34>)
 8007290:	2207      	movs	r2, #7
 8007292:	601a      	str	r2, [r3, #0]
}
 8007294:	bf00      	nop
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	e000e010 	.word	0xe000e010
 80072a4:	e000e018 	.word	0xe000e018
 80072a8:	20000000 	.word	0x20000000
 80072ac:	10624dd3 	.word	0x10624dd3
 80072b0:	e000e014 	.word	0xe000e014

080072b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80072c4 <vPortEnableVFP+0x10>
 80072b8:	6801      	ldr	r1, [r0, #0]
 80072ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80072be:	6001      	str	r1, [r0, #0]
 80072c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072c2:	bf00      	nop
 80072c4:	e000ed88 	.word	0xe000ed88

080072c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072ce:	f3ef 8305 	mrs	r3, IPSR
 80072d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2b0f      	cmp	r3, #15
 80072d8:	d915      	bls.n	8007306 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072da:	4a18      	ldr	r2, [pc, #96]	@ (800733c <vPortValidateInterruptPriority+0x74>)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4413      	add	r3, r2
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072e4:	4b16      	ldr	r3, [pc, #88]	@ (8007340 <vPortValidateInterruptPriority+0x78>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	7afa      	ldrb	r2, [r7, #11]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d20b      	bcs.n	8007306 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	607b      	str	r3, [r7, #4]
}
 8007300:	bf00      	nop
 8007302:	bf00      	nop
 8007304:	e7fd      	b.n	8007302 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007306:	4b0f      	ldr	r3, [pc, #60]	@ (8007344 <vPortValidateInterruptPriority+0x7c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800730e:	4b0e      	ldr	r3, [pc, #56]	@ (8007348 <vPortValidateInterruptPriority+0x80>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	429a      	cmp	r2, r3
 8007314:	d90b      	bls.n	800732e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	603b      	str	r3, [r7, #0]
}
 8007328:	bf00      	nop
 800732a:	bf00      	nop
 800732c:	e7fd      	b.n	800732a <vPortValidateInterruptPriority+0x62>
	}
 800732e:	bf00      	nop
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	e000e3f0 	.word	0xe000e3f0
 8007340:	20000fc4 	.word	0x20000fc4
 8007344:	e000ed0c 	.word	0xe000ed0c
 8007348:	20000fc8 	.word	0x20000fc8

0800734c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b08a      	sub	sp, #40	@ 0x28
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007354:	2300      	movs	r3, #0
 8007356:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007358:	f7fe fd78 	bl	8005e4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800735c:	4b5c      	ldr	r3, [pc, #368]	@ (80074d0 <pvPortMalloc+0x184>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007364:	f000 f924 	bl	80075b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007368:	4b5a      	ldr	r3, [pc, #360]	@ (80074d4 <pvPortMalloc+0x188>)
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4013      	ands	r3, r2
 8007370:	2b00      	cmp	r3, #0
 8007372:	f040 8095 	bne.w	80074a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01e      	beq.n	80073ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800737c:	2208      	movs	r2, #8
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4413      	add	r3, r2
 8007382:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	2b00      	cmp	r3, #0
 800738c:	d015      	beq.n	80073ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f023 0307 	bic.w	r3, r3, #7
 8007394:	3308      	adds	r3, #8
 8007396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f003 0307 	and.w	r3, r3, #7
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00b      	beq.n	80073ba <pvPortMalloc+0x6e>
	__asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	617b      	str	r3, [r7, #20]
}
 80073b4:	bf00      	nop
 80073b6:	bf00      	nop
 80073b8:	e7fd      	b.n	80073b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d06f      	beq.n	80074a0 <pvPortMalloc+0x154>
 80073c0:	4b45      	ldr	r3, [pc, #276]	@ (80074d8 <pvPortMalloc+0x18c>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d86a      	bhi.n	80074a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073ca:	4b44      	ldr	r3, [pc, #272]	@ (80074dc <pvPortMalloc+0x190>)
 80073cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073ce:	4b43      	ldr	r3, [pc, #268]	@ (80074dc <pvPortMalloc+0x190>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073d4:	e004      	b.n	80073e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d903      	bls.n	80073f2 <pvPortMalloc+0xa6>
 80073ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1f1      	bne.n	80073d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073f2:	4b37      	ldr	r3, [pc, #220]	@ (80074d0 <pvPortMalloc+0x184>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d051      	beq.n	80074a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2208      	movs	r2, #8
 8007402:	4413      	add	r3, r2
 8007404:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800740e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	1ad2      	subs	r2, r2, r3
 8007416:	2308      	movs	r3, #8
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	429a      	cmp	r2, r3
 800741c:	d920      	bls.n	8007460 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800741e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4413      	add	r3, r2
 8007424:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	f003 0307 	and.w	r3, r3, #7
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00b      	beq.n	8007448 <pvPortMalloc+0xfc>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	613b      	str	r3, [r7, #16]
}
 8007442:	bf00      	nop
 8007444:	bf00      	nop
 8007446:	e7fd      	b.n	8007444 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	1ad2      	subs	r2, r2, r3
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800745a:	69b8      	ldr	r0, [r7, #24]
 800745c:	f000 f90a 	bl	8007674 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007460:	4b1d      	ldr	r3, [pc, #116]	@ (80074d8 <pvPortMalloc+0x18c>)
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	4a1b      	ldr	r2, [pc, #108]	@ (80074d8 <pvPortMalloc+0x18c>)
 800746c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800746e:	4b1a      	ldr	r3, [pc, #104]	@ (80074d8 <pvPortMalloc+0x18c>)
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	4b1b      	ldr	r3, [pc, #108]	@ (80074e0 <pvPortMalloc+0x194>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d203      	bcs.n	8007482 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800747a:	4b17      	ldr	r3, [pc, #92]	@ (80074d8 <pvPortMalloc+0x18c>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a18      	ldr	r2, [pc, #96]	@ (80074e0 <pvPortMalloc+0x194>)
 8007480:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	4b13      	ldr	r3, [pc, #76]	@ (80074d4 <pvPortMalloc+0x188>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	431a      	orrs	r2, r3
 800748c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007492:	2200      	movs	r2, #0
 8007494:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007496:	4b13      	ldr	r3, [pc, #76]	@ (80074e4 <pvPortMalloc+0x198>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3301      	adds	r3, #1
 800749c:	4a11      	ldr	r2, [pc, #68]	@ (80074e4 <pvPortMalloc+0x198>)
 800749e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074a0:	f7fe fce2 	bl	8005e68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	f003 0307 	and.w	r3, r3, #7
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00b      	beq.n	80074c6 <pvPortMalloc+0x17a>
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	60fb      	str	r3, [r7, #12]
}
 80074c0:	bf00      	nop
 80074c2:	bf00      	nop
 80074c4:	e7fd      	b.n	80074c2 <pvPortMalloc+0x176>
	return pvReturn;
 80074c6:	69fb      	ldr	r3, [r7, #28]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3728      	adds	r7, #40	@ 0x28
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	20001b8c 	.word	0x20001b8c
 80074d4:	20001ba0 	.word	0x20001ba0
 80074d8:	20001b90 	.word	0x20001b90
 80074dc:	20001b84 	.word	0x20001b84
 80074e0:	20001b94 	.word	0x20001b94
 80074e4:	20001b98 	.word	0x20001b98

080074e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d04f      	beq.n	800759a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80074fa:	2308      	movs	r3, #8
 80074fc:	425b      	negs	r3, r3
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	4413      	add	r3, r2
 8007502:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	4b25      	ldr	r3, [pc, #148]	@ (80075a4 <vPortFree+0xbc>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4013      	ands	r3, r2
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10b      	bne.n	800752e <vPortFree+0x46>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	60fb      	str	r3, [r7, #12]
}
 8007528:	bf00      	nop
 800752a:	bf00      	nop
 800752c:	e7fd      	b.n	800752a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00b      	beq.n	800754e <vPortFree+0x66>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	60bb      	str	r3, [r7, #8]
}
 8007548:	bf00      	nop
 800754a:	bf00      	nop
 800754c:	e7fd      	b.n	800754a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	4b14      	ldr	r3, [pc, #80]	@ (80075a4 <vPortFree+0xbc>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4013      	ands	r3, r2
 8007558:	2b00      	cmp	r3, #0
 800755a:	d01e      	beq.n	800759a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d11a      	bne.n	800759a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	4b0e      	ldr	r3, [pc, #56]	@ (80075a4 <vPortFree+0xbc>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	43db      	mvns	r3, r3
 800756e:	401a      	ands	r2, r3
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007574:	f7fe fc6a 	bl	8005e4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	4b0a      	ldr	r3, [pc, #40]	@ (80075a8 <vPortFree+0xc0>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4413      	add	r3, r2
 8007582:	4a09      	ldr	r2, [pc, #36]	@ (80075a8 <vPortFree+0xc0>)
 8007584:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007586:	6938      	ldr	r0, [r7, #16]
 8007588:	f000 f874 	bl	8007674 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800758c:	4b07      	ldr	r3, [pc, #28]	@ (80075ac <vPortFree+0xc4>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3301      	adds	r3, #1
 8007592:	4a06      	ldr	r2, [pc, #24]	@ (80075ac <vPortFree+0xc4>)
 8007594:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007596:	f7fe fc67 	bl	8005e68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800759a:	bf00      	nop
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20001ba0 	.word	0x20001ba0
 80075a8:	20001b90 	.word	0x20001b90
 80075ac:	20001b9c 	.word	0x20001b9c

080075b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075b6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80075ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075bc:	4b27      	ldr	r3, [pc, #156]	@ (800765c <prvHeapInit+0xac>)
 80075be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f003 0307 	and.w	r3, r3, #7
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00c      	beq.n	80075e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3307      	adds	r3, #7
 80075ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 0307 	bic.w	r3, r3, #7
 80075d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	4a1f      	ldr	r2, [pc, #124]	@ (800765c <prvHeapInit+0xac>)
 80075e0:	4413      	add	r3, r2
 80075e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007660 <prvHeapInit+0xb0>)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007660 <prvHeapInit+0xb0>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	4413      	add	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075fc:	2208      	movs	r2, #8
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	1a9b      	subs	r3, r3, r2
 8007602:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0307 	bic.w	r3, r3, #7
 800760a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4a15      	ldr	r2, [pc, #84]	@ (8007664 <prvHeapInit+0xb4>)
 8007610:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007612:	4b14      	ldr	r3, [pc, #80]	@ (8007664 <prvHeapInit+0xb4>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2200      	movs	r2, #0
 8007618:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800761a:	4b12      	ldr	r3, [pc, #72]	@ (8007664 <prvHeapInit+0xb4>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	1ad2      	subs	r2, r2, r3
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007630:	4b0c      	ldr	r3, [pc, #48]	@ (8007664 <prvHeapInit+0xb4>)
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	4a0a      	ldr	r2, [pc, #40]	@ (8007668 <prvHeapInit+0xb8>)
 800763e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	4a09      	ldr	r2, [pc, #36]	@ (800766c <prvHeapInit+0xbc>)
 8007646:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007648:	4b09      	ldr	r3, [pc, #36]	@ (8007670 <prvHeapInit+0xc0>)
 800764a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800764e:	601a      	str	r2, [r3, #0]
}
 8007650:	bf00      	nop
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	20000fcc 	.word	0x20000fcc
 8007660:	20001b84 	.word	0x20001b84
 8007664:	20001b8c 	.word	0x20001b8c
 8007668:	20001b94 	.word	0x20001b94
 800766c:	20001b90 	.word	0x20001b90
 8007670:	20001ba0 	.word	0x20001ba0

08007674 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800767c:	4b28      	ldr	r3, [pc, #160]	@ (8007720 <prvInsertBlockIntoFreeList+0xac>)
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	e002      	b.n	8007688 <prvInsertBlockIntoFreeList+0x14>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	429a      	cmp	r2, r3
 8007690:	d8f7      	bhi.n	8007682 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	4413      	add	r3, r2
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d108      	bne.n	80076b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	441a      	add	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	441a      	add	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d118      	bne.n	80076fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	4b15      	ldr	r3, [pc, #84]	@ (8007724 <prvInsertBlockIntoFreeList+0xb0>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d00d      	beq.n	80076f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	441a      	add	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	e008      	b.n	8007704 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007724 <prvInsertBlockIntoFreeList+0xb0>)
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	601a      	str	r2, [r3, #0]
 80076fa:	e003      	b.n	8007704 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	429a      	cmp	r2, r3
 800770a:	d002      	beq.n	8007712 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007712:	bf00      	nop
 8007714:	3714      	adds	r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	20001b84 	.word	0x20001b84
 8007724:	20001b8c 	.word	0x20001b8c

08007728 <memset>:
 8007728:	4402      	add	r2, r0
 800772a:	4603      	mov	r3, r0
 800772c:	4293      	cmp	r3, r2
 800772e:	d100      	bne.n	8007732 <memset+0xa>
 8007730:	4770      	bx	lr
 8007732:	f803 1b01 	strb.w	r1, [r3], #1
 8007736:	e7f9      	b.n	800772c <memset+0x4>

08007738 <_reclaim_reent>:
 8007738:	4b29      	ldr	r3, [pc, #164]	@ (80077e0 <_reclaim_reent+0xa8>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4283      	cmp	r3, r0
 800773e:	b570      	push	{r4, r5, r6, lr}
 8007740:	4604      	mov	r4, r0
 8007742:	d04b      	beq.n	80077dc <_reclaim_reent+0xa4>
 8007744:	69c3      	ldr	r3, [r0, #28]
 8007746:	b1ab      	cbz	r3, 8007774 <_reclaim_reent+0x3c>
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	b16b      	cbz	r3, 8007768 <_reclaim_reent+0x30>
 800774c:	2500      	movs	r5, #0
 800774e:	69e3      	ldr	r3, [r4, #28]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	5959      	ldr	r1, [r3, r5]
 8007754:	2900      	cmp	r1, #0
 8007756:	d13b      	bne.n	80077d0 <_reclaim_reent+0x98>
 8007758:	3504      	adds	r5, #4
 800775a:	2d80      	cmp	r5, #128	@ 0x80
 800775c:	d1f7      	bne.n	800774e <_reclaim_reent+0x16>
 800775e:	69e3      	ldr	r3, [r4, #28]
 8007760:	4620      	mov	r0, r4
 8007762:	68d9      	ldr	r1, [r3, #12]
 8007764:	f000 f872 	bl	800784c <_free_r>
 8007768:	69e3      	ldr	r3, [r4, #28]
 800776a:	6819      	ldr	r1, [r3, #0]
 800776c:	b111      	cbz	r1, 8007774 <_reclaim_reent+0x3c>
 800776e:	4620      	mov	r0, r4
 8007770:	f000 f86c 	bl	800784c <_free_r>
 8007774:	6961      	ldr	r1, [r4, #20]
 8007776:	b111      	cbz	r1, 800777e <_reclaim_reent+0x46>
 8007778:	4620      	mov	r0, r4
 800777a:	f000 f867 	bl	800784c <_free_r>
 800777e:	69e1      	ldr	r1, [r4, #28]
 8007780:	b111      	cbz	r1, 8007788 <_reclaim_reent+0x50>
 8007782:	4620      	mov	r0, r4
 8007784:	f000 f862 	bl	800784c <_free_r>
 8007788:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800778a:	b111      	cbz	r1, 8007792 <_reclaim_reent+0x5a>
 800778c:	4620      	mov	r0, r4
 800778e:	f000 f85d 	bl	800784c <_free_r>
 8007792:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007794:	b111      	cbz	r1, 800779c <_reclaim_reent+0x64>
 8007796:	4620      	mov	r0, r4
 8007798:	f000 f858 	bl	800784c <_free_r>
 800779c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800779e:	b111      	cbz	r1, 80077a6 <_reclaim_reent+0x6e>
 80077a0:	4620      	mov	r0, r4
 80077a2:	f000 f853 	bl	800784c <_free_r>
 80077a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80077a8:	b111      	cbz	r1, 80077b0 <_reclaim_reent+0x78>
 80077aa:	4620      	mov	r0, r4
 80077ac:	f000 f84e 	bl	800784c <_free_r>
 80077b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80077b2:	b111      	cbz	r1, 80077ba <_reclaim_reent+0x82>
 80077b4:	4620      	mov	r0, r4
 80077b6:	f000 f849 	bl	800784c <_free_r>
 80077ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80077bc:	b111      	cbz	r1, 80077c4 <_reclaim_reent+0x8c>
 80077be:	4620      	mov	r0, r4
 80077c0:	f000 f844 	bl	800784c <_free_r>
 80077c4:	6a23      	ldr	r3, [r4, #32]
 80077c6:	b14b      	cbz	r3, 80077dc <_reclaim_reent+0xa4>
 80077c8:	4620      	mov	r0, r4
 80077ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80077ce:	4718      	bx	r3
 80077d0:	680e      	ldr	r6, [r1, #0]
 80077d2:	4620      	mov	r0, r4
 80077d4:	f000 f83a 	bl	800784c <_free_r>
 80077d8:	4631      	mov	r1, r6
 80077da:	e7bb      	b.n	8007754 <_reclaim_reent+0x1c>
 80077dc:	bd70      	pop	{r4, r5, r6, pc}
 80077de:	bf00      	nop
 80077e0:	20000010 	.word	0x20000010

080077e4 <__libc_init_array>:
 80077e4:	b570      	push	{r4, r5, r6, lr}
 80077e6:	4d0d      	ldr	r5, [pc, #52]	@ (800781c <__libc_init_array+0x38>)
 80077e8:	4c0d      	ldr	r4, [pc, #52]	@ (8007820 <__libc_init_array+0x3c>)
 80077ea:	1b64      	subs	r4, r4, r5
 80077ec:	10a4      	asrs	r4, r4, #2
 80077ee:	2600      	movs	r6, #0
 80077f0:	42a6      	cmp	r6, r4
 80077f2:	d109      	bne.n	8007808 <__libc_init_array+0x24>
 80077f4:	4d0b      	ldr	r5, [pc, #44]	@ (8007824 <__libc_init_array+0x40>)
 80077f6:	4c0c      	ldr	r4, [pc, #48]	@ (8007828 <__libc_init_array+0x44>)
 80077f8:	f000 f87e 	bl	80078f8 <_init>
 80077fc:	1b64      	subs	r4, r4, r5
 80077fe:	10a4      	asrs	r4, r4, #2
 8007800:	2600      	movs	r6, #0
 8007802:	42a6      	cmp	r6, r4
 8007804:	d105      	bne.n	8007812 <__libc_init_array+0x2e>
 8007806:	bd70      	pop	{r4, r5, r6, pc}
 8007808:	f855 3b04 	ldr.w	r3, [r5], #4
 800780c:	4798      	blx	r3
 800780e:	3601      	adds	r6, #1
 8007810:	e7ee      	b.n	80077f0 <__libc_init_array+0xc>
 8007812:	f855 3b04 	ldr.w	r3, [r5], #4
 8007816:	4798      	blx	r3
 8007818:	3601      	adds	r6, #1
 800781a:	e7f2      	b.n	8007802 <__libc_init_array+0x1e>
 800781c:	08007a3c 	.word	0x08007a3c
 8007820:	08007a3c 	.word	0x08007a3c
 8007824:	08007a3c 	.word	0x08007a3c
 8007828:	08007a40 	.word	0x08007a40

0800782c <__retarget_lock_acquire_recursive>:
 800782c:	4770      	bx	lr

0800782e <__retarget_lock_release_recursive>:
 800782e:	4770      	bx	lr

08007830 <memcpy>:
 8007830:	440a      	add	r2, r1
 8007832:	4291      	cmp	r1, r2
 8007834:	f100 33ff 	add.w	r3, r0, #4294967295
 8007838:	d100      	bne.n	800783c <memcpy+0xc>
 800783a:	4770      	bx	lr
 800783c:	b510      	push	{r4, lr}
 800783e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007846:	4291      	cmp	r1, r2
 8007848:	d1f9      	bne.n	800783e <memcpy+0xe>
 800784a:	bd10      	pop	{r4, pc}

0800784c <_free_r>:
 800784c:	b538      	push	{r3, r4, r5, lr}
 800784e:	4605      	mov	r5, r0
 8007850:	2900      	cmp	r1, #0
 8007852:	d041      	beq.n	80078d8 <_free_r+0x8c>
 8007854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007858:	1f0c      	subs	r4, r1, #4
 800785a:	2b00      	cmp	r3, #0
 800785c:	bfb8      	it	lt
 800785e:	18e4      	addlt	r4, r4, r3
 8007860:	f000 f83e 	bl	80078e0 <__malloc_lock>
 8007864:	4a1d      	ldr	r2, [pc, #116]	@ (80078dc <_free_r+0x90>)
 8007866:	6813      	ldr	r3, [r2, #0]
 8007868:	b933      	cbnz	r3, 8007878 <_free_r+0x2c>
 800786a:	6063      	str	r3, [r4, #4]
 800786c:	6014      	str	r4, [r2, #0]
 800786e:	4628      	mov	r0, r5
 8007870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007874:	f000 b83a 	b.w	80078ec <__malloc_unlock>
 8007878:	42a3      	cmp	r3, r4
 800787a:	d908      	bls.n	800788e <_free_r+0x42>
 800787c:	6820      	ldr	r0, [r4, #0]
 800787e:	1821      	adds	r1, r4, r0
 8007880:	428b      	cmp	r3, r1
 8007882:	bf01      	itttt	eq
 8007884:	6819      	ldreq	r1, [r3, #0]
 8007886:	685b      	ldreq	r3, [r3, #4]
 8007888:	1809      	addeq	r1, r1, r0
 800788a:	6021      	streq	r1, [r4, #0]
 800788c:	e7ed      	b.n	800786a <_free_r+0x1e>
 800788e:	461a      	mov	r2, r3
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	b10b      	cbz	r3, 8007898 <_free_r+0x4c>
 8007894:	42a3      	cmp	r3, r4
 8007896:	d9fa      	bls.n	800788e <_free_r+0x42>
 8007898:	6811      	ldr	r1, [r2, #0]
 800789a:	1850      	adds	r0, r2, r1
 800789c:	42a0      	cmp	r0, r4
 800789e:	d10b      	bne.n	80078b8 <_free_r+0x6c>
 80078a0:	6820      	ldr	r0, [r4, #0]
 80078a2:	4401      	add	r1, r0
 80078a4:	1850      	adds	r0, r2, r1
 80078a6:	4283      	cmp	r3, r0
 80078a8:	6011      	str	r1, [r2, #0]
 80078aa:	d1e0      	bne.n	800786e <_free_r+0x22>
 80078ac:	6818      	ldr	r0, [r3, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	6053      	str	r3, [r2, #4]
 80078b2:	4408      	add	r0, r1
 80078b4:	6010      	str	r0, [r2, #0]
 80078b6:	e7da      	b.n	800786e <_free_r+0x22>
 80078b8:	d902      	bls.n	80078c0 <_free_r+0x74>
 80078ba:	230c      	movs	r3, #12
 80078bc:	602b      	str	r3, [r5, #0]
 80078be:	e7d6      	b.n	800786e <_free_r+0x22>
 80078c0:	6820      	ldr	r0, [r4, #0]
 80078c2:	1821      	adds	r1, r4, r0
 80078c4:	428b      	cmp	r3, r1
 80078c6:	bf04      	itt	eq
 80078c8:	6819      	ldreq	r1, [r3, #0]
 80078ca:	685b      	ldreq	r3, [r3, #4]
 80078cc:	6063      	str	r3, [r4, #4]
 80078ce:	bf04      	itt	eq
 80078d0:	1809      	addeq	r1, r1, r0
 80078d2:	6021      	streq	r1, [r4, #0]
 80078d4:	6054      	str	r4, [r2, #4]
 80078d6:	e7ca      	b.n	800786e <_free_r+0x22>
 80078d8:	bd38      	pop	{r3, r4, r5, pc}
 80078da:	bf00      	nop
 80078dc:	20001ce0 	.word	0x20001ce0

080078e0 <__malloc_lock>:
 80078e0:	4801      	ldr	r0, [pc, #4]	@ (80078e8 <__malloc_lock+0x8>)
 80078e2:	f7ff bfa3 	b.w	800782c <__retarget_lock_acquire_recursive>
 80078e6:	bf00      	nop
 80078e8:	20001cdc 	.word	0x20001cdc

080078ec <__malloc_unlock>:
 80078ec:	4801      	ldr	r0, [pc, #4]	@ (80078f4 <__malloc_unlock+0x8>)
 80078ee:	f7ff bf9e 	b.w	800782e <__retarget_lock_release_recursive>
 80078f2:	bf00      	nop
 80078f4:	20001cdc 	.word	0x20001cdc

080078f8 <_init>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	bf00      	nop
 80078fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fe:	bc08      	pop	{r3}
 8007900:	469e      	mov	lr, r3
 8007902:	4770      	bx	lr

08007904 <_fini>:
 8007904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007906:	bf00      	nop
 8007908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800790a:	bc08      	pop	{r3}
 800790c:	469e      	mov	lr, r3
 800790e:	4770      	bx	lr
