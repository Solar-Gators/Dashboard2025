
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087e0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08008990  08008990  00009990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aa8  08008aa8  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  08008aa8  08008aa8  00009aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ab0  08008ab0  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ab0  08008ab0  00009ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ab4  08008ab4  00009ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008ab8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ca8  20000060  08008b18  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d08  08008b18  0000ad08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022cfa  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043c9  00000000  00000000  0002cd8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ca8  00000000  00000000  00031158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001660  00000000  00000000  00032e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d934  00000000  00000000  00034460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020422  00000000  00000000  00061d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001232cf  00000000  00000000  000821b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a5485  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d30  00000000  00000000  001a54c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001ad1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008978 	.word	0x08008978

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08008978 	.word	0x08008978

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <TCAL9538RSVR_INIT>:
    
    return pin_number; 
}

uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	4611      	mov	r1, r2
 80004ec:	461a      	mov	r2, r3
 80004ee:	460b      	mov	r3, r1
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	4613      	mov	r3, r2
 80004f4:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;


    dev->i2cHandle = i2cHandle;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	68ba      	ldr	r2, [r7, #8]
 80004fe:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2200      	movs	r2, #0
 8000504:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	f003 0303 	and.w	r3, r3, #3
 800050c:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress<<1);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	b25b      	sxtb	r3, r3
 8000514:	f063 031f 	orn	r3, r3, #31
 8000518:	b25b      	sxtb	r3, r3
 800051a:	b2da      	uxtb	r2, r3
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	711a      	strb	r2, [r3, #4]
    uint8_t hold_bitMask = direction_bitMask;
 8000520:	79bb      	ldrb	r3, [r7, #6]
 8000522:	757b      	strb	r3, [r7, #21]

    status = TCAL9538RSVR_SetDirection(dev, &hold_bitMask);
 8000524:	f107 0315 	add.w	r3, r7, #21
 8000528:	4619      	mov	r1, r3
 800052a:	68f8      	ldr	r0, [r7, #12]
 800052c:	f000 f823 	bl	8000576 <TCAL9538RSVR_SetDirection>
 8000530:	4603      	mov	r3, r0
 8000532:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8000534:	7dbb      	ldrb	r3, [r7, #22]
 8000536:	2b00      	cmp	r3, #0
 8000538:	bf14      	ite	ne
 800053a:	2301      	movne	r3, #1
 800053c:	2300      	moveq	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	461a      	mov	r2, r3
 8000542:	7dfb      	ldrb	r3, [r7, #23]
 8000544:	4413      	add	r3, r2
 8000546:	75fb      	strb	r3, [r7, #23]

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 8000548:	f897 3020 	ldrb.w	r3, [r7, #32]
 800054c:	4619      	mov	r1, r3
 800054e:	68f8      	ldr	r0, [r7, #12]
 8000550:	f000 f820 	bl	8000594 <TCAL9538RSVR_SetInterrupts>
 8000554:	4603      	mov	r3, r0
 8000556:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8000558:	7dbb      	ldrb	r3, [r7, #22]
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf14      	ite	ne
 800055e:	2301      	movne	r3, #1
 8000560:	2300      	moveq	r3, #0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	461a      	mov	r2, r3
 8000566:	7dfb      	ldrb	r3, [r7, #23]
 8000568:	4413      	add	r3, r2
 800056a:	75fb      	strb	r3, [r7, #23]

    return (errNum);
 800056c:	7dfb      	ldrb	r3, [r7, #23]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3718      	adds	r7, #24
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t* bitMask)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b082      	sub	sp, #8
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, bitMask);
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	2103      	movs	r1, #3
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 f879 	bl	800067c <TCAL9538RSVR_WriteRegister>
 800058a:	4603      	mov	r3, r0
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 80005a0:	1cfb      	adds	r3, r7, #3
 80005a2:	461a      	mov	r2, r3
 80005a4:	2145      	movs	r1, #69	@ 0x45
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 f868 	bl	800067c <TCAL9538RSVR_WriteRegister>
 80005ac:	4603      	mov	r3, r0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b084      	sub	sp, #16
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	737b      	strb	r3, [r7, #13]

    // Read updated input values
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3305      	adds	r3, #5
 80005ca:	4619      	mov	r1, r3
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 f81a 	bl	8000606 <TCAL9538RSVR_ReadInput>
 80005d2:	4603      	mov	r3, r0
 80005d4:	73bb      	strb	r3, [r7, #14]

    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 80005d6:	f107 030d 	add.w	r3, r7, #13
 80005da:	461a      	mov	r2, r3
 80005dc:	2146      	movs	r1, #70	@ 0x46
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 f82f 	bl	8000642 <TCAL9538RSVR_ReadRegister>
 80005e4:	4603      	mov	r3, r0
 80005e6:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 80005e8:	7bbb      	ldrb	r3, [r7, #14]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	bf14      	ite	ne
 80005ee:	2301      	movne	r3, #1
 80005f0:	2300      	moveq	r3, #0
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	461a      	mov	r2, r3
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	4413      	add	r3, r2
 80005fa:	73fb      	strb	r3, [r7, #15]

    //status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
    //errNum += (status != HAL_OK);

    return (errNum);
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <TCAL9538RSVR_ReadInput>:
    
// }


HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
 800060e:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 8000610:	683a      	ldr	r2, [r7, #0]
 8000612:	2100      	movs	r1, #0
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f814 	bl	8000642 <TCAL9538RSVR_ReadRegister>
 800061a:	4603      	mov	r3, r0
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <TCAL9538RSVR_SetOutput>:
HAL_StatusTypeDef TCAL9538RSVR_SetOutput(TCAL9538RSVR* dev, uint8_t *data)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
 800062e:	683a      	ldr	r2, [r7, #0]
 8000630:	2101      	movs	r1, #1
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f000 f822 	bl	800067c <TCAL9538RSVR_WriteRegister>
 8000638:	4603      	mov	r3, r0
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <TCAL9538RSVR_ReadRegister>:

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b088      	sub	sp, #32
 8000646:	af04      	add	r7, sp, #16
 8000648:	60f8      	str	r0, [r7, #12]
 800064a:	460b      	mov	r3, r1
 800064c:	607a      	str	r2, [r7, #4]
 800064e:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	6818      	ldr	r0, [r3, #0]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	791b      	ldrb	r3, [r3, #4]
 8000658:	4619      	mov	r1, r3
 800065a:	7afb      	ldrb	r3, [r7, #11]
 800065c:	b29a      	uxth	r2, r3
 800065e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000662:	9302      	str	r3, [sp, #8]
 8000664:	2301      	movs	r3, #1
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2301      	movs	r3, #1
 800066e:	f001 fc71 	bl	8001f54 <HAL_I2C_Mem_Read>
 8000672:	4603      	mov	r3, r0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af04      	add	r7, sp, #16
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	460b      	mov	r3, r1
 8000686:	607a      	str	r2, [r7, #4]
 8000688:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Write(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	6818      	ldr	r0, [r3, #0]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	4619      	mov	r1, r3
 8000694:	7afb      	ldrb	r3, [r7, #11]
 8000696:	b29a      	uxth	r2, r3
 8000698:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800069c:	9302      	str	r3, [sp, #8]
 800069e:	2301      	movs	r3, #1
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2301      	movs	r3, #1
 80006a8:	f001 fb40 	bl	8001d2c <HAL_I2C_Mem_Write>
 80006ac:	4603      	mov	r3, r0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <Update_CAN_Message1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Update_CAN_Message1(uint8_t flags[8], uint8_t* Input1, uint8_t* Input2)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
	 * Debounce buttons software (maybe)
	 * Check if toggling or just setting (toggling blinkers yes but toggling break)
	 * CAN message is sending state, ie lights should be blinking, etc.
	 */

	flags[0] = 0;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
	flags[1] = 0;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	3301      	adds	r3, #1
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]

	flags[0] |= CHECK_BIT(*Input2, 4) << 0; // Main
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	b25a      	sxtb	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	f003 0310 	and.w	r3, r3, #16
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf14      	ite	ne
 80006e4:	2301      	movne	r3, #1
 80006e6:	2300      	moveq	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	b25b      	sxtb	r3, r3
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input2, 5) << 1; // Break
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b25a      	sxtb	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	111b      	asrs	r3, r3, #4
 8000702:	b25b      	sxtb	r3, r3
 8000704:	f003 0302 	and.w	r3, r3, #2
 8000708:	b25b      	sxtb	r3, r3
 800070a:	4313      	orrs	r3, r2
 800070c:	b25b      	sxtb	r3, r3
 800070e:	b2da      	uxtb	r2, r3
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input2, 0) << 2; // Mode
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	b25a      	sxtb	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	b25b      	sxtb	r3, r3
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	b25b      	sxtb	r3, r3
 8000728:	4313      	orrs	r3, r2
 800072a:	b25b      	sxtb	r3, r3
 800072c:	b2da      	uxtb	r2, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input1, 5) << 3; // MC
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b25a      	sxtb	r2, r3
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	109b      	asrs	r3, r3, #2
 800073e:	b25b      	sxtb	r3, r3
 8000740:	f003 0308 	and.w	r3, r3, #8
 8000744:	b25b      	sxtb	r3, r3
 8000746:	4313      	orrs	r3, r2
 8000748:	b25b      	sxtb	r3, r3
 800074a:	b2da      	uxtb	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input1, 6) << 4; // Array
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b25a      	sxtb	r2, r3
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	109b      	asrs	r3, r3, #2
 800075c:	b25b      	sxtb	r3, r3
 800075e:	f003 0310 	and.w	r3, r3, #16
 8000762:	b25b      	sxtb	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	b25b      	sxtb	r3, r3
 8000768:	b2da      	uxtb	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input1, 4) << 5; // Extra 1
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b25a      	sxtb	r2, r3
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	b25b      	sxtb	r3, r3
 800077c:	f003 0320 	and.w	r3, r3, #32
 8000780:	b25b      	sxtb	r3, r3
 8000782:	4313      	orrs	r3, r2
 8000784:	b25b      	sxtb	r3, r3
 8000786:	b2da      	uxtb	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(outputPortState, 5) << 6; // Horn
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b25a      	sxtb	r2, r3
 8000792:	4b2b      	ldr	r3, [pc, #172]	@ (8000840 <Update_CAN_Message1+0x188>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	b25b      	sxtb	r3, r3
 800079a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800079e:	b25b      	sxtb	r3, r3
 80007a0:	4313      	orrs	r3, r2
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(outputPortState, 6) << 7; // PTT
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b25a      	sxtb	r2, r3
 80007b0:	4b23      	ldr	r3, [pc, #140]	@ (8000840 <Update_CAN_Message1+0x188>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80007bc:	b25b      	sxtb	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b25b      	sxtb	r3, r3
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	701a      	strb	r2, [r3, #0]

	flags[1] |= CHECK_BIT(outputPortState, 2) << 0; // Blinkers
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	3301      	adds	r3, #1
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b25a      	sxtb	r2, r3
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <Update_CAN_Message1+0x188>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf14      	ite	ne
 80007dc:	2301      	movne	r3, #1
 80007de:	2300      	moveq	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	4313      	orrs	r3, r2
 80007e6:	b25a      	sxtb	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3301      	adds	r3, #1
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	701a      	strb	r2, [r3, #0]
	flags[1] |= CHECK_BIT(outputPortState, 0) << 1; // Left Turn Signal
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3301      	adds	r3, #1
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b25a      	sxtb	r2, r3
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <Update_CAN_Message1+0x188>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	f003 0302 	and.w	r3, r3, #2
 8000804:	b25b      	sxtb	r3, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	b25a      	sxtb	r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3301      	adds	r3, #1
 800080e:	b2d2      	uxtb	r2, r2
 8000810:	701a      	strb	r2, [r3, #0]
	flags[1] |= CHECK_BIT(outputPortState, 1) << 2; // Right Turn Signal
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	3301      	adds	r3, #1
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b25a      	sxtb	r2, r3
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <Update_CAN_Message1+0x188>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	b25b      	sxtb	r3, r3
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	b25b      	sxtb	r3, r3
 8000828:	4313      	orrs	r3, r2
 800082a:	b25a      	sxtb	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3301      	adds	r3, #1
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	701a      	strb	r2, [r3, #0]

}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	200001d0 	.word	0x200001d0

08000844 <updateDebounce>:

uint8_t updateDebounce(uint8_t stable, uint8_t newReading, uint8_t *counter) {
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	603a      	str	r2, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	460b      	mov	r3, r1
 8000852:	71bb      	strb	r3, [r7, #6]
    if (newReading != stable) {
 8000854:	79ba      	ldrb	r2, [r7, #6]
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	429a      	cmp	r2, r3
 800085a:	d00e      	beq.n	800087a <updateDebounce+0x36>
        (*counter)++;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	701a      	strb	r2, [r3, #0]
        if (*counter >= 3) {
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d907      	bls.n	8000880 <updateDebounce+0x3c>
            *counter = 0;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
            return newReading;
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	e003      	b.n	8000882 <updateDebounce+0x3e>
        }
    } else {
        *counter = 0;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
    }
    return stable;
 8000880:	79fb      	ldrb	r3, [r7, #7]
}
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <HAL_GPIO_EXTI_Callback>:

}

// GPIO Expander Interrupt Handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Triggered = 1;
 800089a:	4b04      	ldr	r3, [pc, #16]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x1c>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	200001cc 	.word	0x200001cc

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b6:	f000 fd2a 	bl	800130e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ba:	f000 f869 	bl	8000990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008be:	f000 f985 	bl	8000bcc <MX_GPIO_Init>
 // MX_ADC1_Init();
  MX_I2C4_Init();
 80008c2:	f000 f913 	bl	8000aec <MX_I2C4_Init>
  MX_CAN1_Init();
 80008c6:	f000 f8a9 	bl	8000a1c <MX_CAN1_Init>
  MX_CAN2_Init();
 80008ca:	f000 f8db 	bl	8000a84 <MX_CAN2_Init>
  MX_UART4_Init();
 80008ce:	f000 f94d 	bl	8000b6c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  if (TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0b11110000, 0b00001111) != HAL_OK) { Error_Handler(); } // inputs
 80008d2:	230f      	movs	r3, #15
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	23f0      	movs	r3, #240	@ 0xf0
 80008d8:	2202      	movs	r2, #2
 80008da:	491f      	ldr	r1, [pc, #124]	@ (8000958 <main+0xa8>)
 80008dc:	481f      	ldr	r0, [pc, #124]	@ (800095c <main+0xac>)
 80008de:	f7ff fdff 	bl	80004e0 <TCAL9538RSVR_INIT>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <main+0x3c>
 80008e8:	f000 fa8e 	bl	8000e08 <Error_Handler>
  uint8_t reg_read_hold;
  TCAL9538RSVR_ReadRegister(&U5, 0x45, &reg_read_hold);
 80008ec:	1dfb      	adds	r3, r7, #7
 80008ee:	461a      	mov	r2, r3
 80008f0:	2145      	movs	r1, #69	@ 0x45
 80008f2:	481a      	ldr	r0, [pc, #104]	@ (800095c <main+0xac>)
 80008f4:	f7ff fea5 	bl	8000642 <TCAL9538RSVR_ReadRegister>
  //if (TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b00111111, 0b11000000) != HAL_OK) { Error_Handler(); }
  if (TCAL9538RSVR_INIT(&U7, &hi2c4, 0x00, 0b00000000, 0b00000000) != HAL_OK) { Error_Handler(); } // output
 80008f8:	2300      	movs	r3, #0
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	2300      	movs	r3, #0
 80008fe:	2200      	movs	r2, #0
 8000900:	4915      	ldr	r1, [pc, #84]	@ (8000958 <main+0xa8>)
 8000902:	4817      	ldr	r0, [pc, #92]	@ (8000960 <main+0xb0>)
 8000904:	f7ff fdec 	bl	80004e0 <TCAL9538RSVR_INIT>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <main+0x62>
 800090e:	f000 fa7b 	bl	8000e08 <Error_Handler>


  HAL_UART_Receive_IT(&huart4, &uart_rx, 1); // enables uart interrupt, it will call the interrupt when one byte is recieved
 8000912:	2201      	movs	r2, #1
 8000914:	4913      	ldr	r1, [pc, #76]	@ (8000964 <main+0xb4>)
 8000916:	4814      	ldr	r0, [pc, #80]	@ (8000968 <main+0xb8>)
 8000918:	f003 fe42 	bl	80045a0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800091c:	f005 f996 	bl	8005c4c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
 8000920:	4a12      	ldr	r2, [pc, #72]	@ (800096c <main+0xbc>)
 8000922:	2100      	movs	r1, #0
 8000924:	4812      	ldr	r0, [pc, #72]	@ (8000970 <main+0xc0>)
 8000926:	f005 f9db 	bl	8005ce0 <osThreadNew>
 800092a:	4603      	mov	r3, r0
 800092c:	4a11      	ldr	r2, [pc, #68]	@ (8000974 <main+0xc4>)
 800092e:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 8000930:	4a11      	ldr	r2, [pc, #68]	@ (8000978 <main+0xc8>)
 8000932:	2100      	movs	r1, #0
 8000934:	4811      	ldr	r0, [pc, #68]	@ (800097c <main+0xcc>)
 8000936:	f005 f9d3 	bl	8005ce0 <osThreadNew>
 800093a:	4603      	mov	r3, r0
 800093c:	4a10      	ldr	r2, [pc, #64]	@ (8000980 <main+0xd0>)
 800093e:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 8000940:	4a10      	ldr	r2, [pc, #64]	@ (8000984 <main+0xd4>)
 8000942:	2100      	movs	r1, #0
 8000944:	4810      	ldr	r0, [pc, #64]	@ (8000988 <main+0xd8>)
 8000946:	f005 f9cb 	bl	8005ce0 <osThreadNew>
 800094a:	4603      	mov	r3, r0
 800094c:	4a0f      	ldr	r2, [pc, #60]	@ (800098c <main+0xdc>)
 800094e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000950:	f005 f9a0 	bl	8005c94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <main+0xa4>
 8000958:	200000cc 	.word	0x200000cc
 800095c:	200001b4 	.word	0x200001b4
 8000960:	200001c4 	.word	0x200001c4
 8000964:	200001d1 	.word	0x200001d1
 8000968:	20000120 	.word	0x20000120
 800096c:	080089f4 	.word	0x080089f4
 8000970:	08000cd1 	.word	0x08000cd1
 8000974:	200001a8 	.word	0x200001a8
 8000978:	08008a18 	.word	0x08008a18
 800097c:	08000d05 	.word	0x08000d05
 8000980:	200001ac 	.word	0x200001ac
 8000984:	08008a3c 	.word	0x08008a3c
 8000988:	08000d29 	.word	0x08000d29
 800098c:	200001b0 	.word	0x200001b0

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b096      	sub	sp, #88	@ 0x58
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2244      	movs	r2, #68	@ 0x44
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f007 ff02 	bl	80087a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	463b      	mov	r3, r7
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009b6:	f001 ff4f 	bl	8002858 <HAL_PWREx_ControlVoltageScaling>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009c0:	f000 fa22 	bl	8000e08 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009c4:	2310      	movs	r3, #16
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009c8:	2301      	movs	r3, #1
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009d0:	2360      	movs	r3, #96	@ 0x60
 80009d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 ff91 	bl	8002904 <HAL_RCC_OscConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80009e8:	f000 fa0e 	bl	8000e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ec:	230f      	movs	r3, #15
 80009ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f002 fb97 	bl	8003138 <HAL_RCC_ClockConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a10:	f000 f9fa 	bl	8000e08 <Error_Handler>
  }
}
 8000a14:	bf00      	nop
 8000a16:	3758      	adds	r7, #88	@ 0x58
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a20:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <MX_CAN1_Init+0x60>)
 8000a22:	4a17      	ldr	r2, [pc, #92]	@ (8000a80 <MX_CAN1_Init+0x64>)
 8000a24:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000a26:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <MX_CAN1_Init+0x60>)
 8000a28:	2210      	movs	r2, #16
 8000a2a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a2c:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <MX_CAN1_Init+0x60>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a32:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <MX_CAN1_Init+0x60>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a38:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <MX_CAN1_Init+0x60>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <MX_CAN1_Init+0x60>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a44:	4b0d      	ldr	r3, [pc, #52]	@ (8000a7c <MX_CAN1_Init+0x60>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <MX_CAN1_Init+0x60>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <MX_CAN1_Init+0x60>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a56:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <MX_CAN1_Init+0x60>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <MX_CAN1_Init+0x60>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <MX_CAN1_Init+0x60>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <MX_CAN1_Init+0x60>)
 8000a6a:	f000 fc89 	bl	8001380 <HAL_CAN_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000a74:	f000 f9c8 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	2000007c 	.word	0x2000007c
 8000a80:	40006400 	.word	0x40006400

08000a84 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000a88:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <MX_CAN2_Init+0x60>)
 8000a8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ae8 <MX_CAN2_Init+0x64>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <MX_CAN2_Init+0x60>)
 8000a90:	2210      	movs	r2, #16
 8000a92:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000a94:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <MX_CAN2_Init+0x60>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <MX_CAN2_Init+0x60>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <MX_CAN2_Init+0x60>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <MX_CAN2_Init+0x60>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <MX_CAN2_Init+0x60>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <MX_CAN2_Init+0x60>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <MX_CAN2_Init+0x60>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <MX_CAN2_Init+0x60>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <MX_CAN2_Init+0x60>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <MX_CAN2_Init+0x60>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	@ (8000ae4 <MX_CAN2_Init+0x60>)
 8000ad2:	f000 fc55 	bl	8001380 <HAL_CAN_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000adc:	f000 f994 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200000a4 	.word	0x200000a4
 8000ae8:	40006800 	.word	0x40006800

08000aec <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b60 <MX_I2C4_Init+0x74>)
 8000af2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b64 <MX_I2C4_Init+0x78>)
 8000af4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <MX_I2C4_Init+0x74>)
 8000af8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b68 <MX_I2C4_Init+0x7c>)
 8000afa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000afc:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <MX_I2C4_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <MX_I2C4_Init+0x74>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b08:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <MX_I2C4_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <MX_I2C4_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <MX_I2C4_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <MX_I2C4_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <MX_I2C4_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000b26:	480e      	ldr	r0, [pc, #56]	@ (8000b60 <MX_I2C4_Init+0x74>)
 8000b28:	f001 f864 	bl	8001bf4 <HAL_I2C_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b32:	f000 f969 	bl	8000e08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b36:	2100      	movs	r1, #0
 8000b38:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <MX_I2C4_Init+0x74>)
 8000b3a:	f001 fde7 	bl	800270c <HAL_I2CEx_ConfigAnalogFilter>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b44:	f000 f960 	bl	8000e08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <MX_I2C4_Init+0x74>)
 8000b4c:	f001 fe29 	bl	80027a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b56:	f000 f957 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200000cc 	.word	0x200000cc
 8000b64:	40008400 	.word	0x40008400
 8000b68:	00100d14 	.word	0x00100d14

08000b6c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b70:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <MX_UART4_Init+0x58>)
 8000b72:	4a15      	ldr	r2, [pc, #84]	@ (8000bc8 <MX_UART4_Init+0x5c>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000b76:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <MX_UART4_Init+0x58>)
 8000b78:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b7c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <MX_UART4_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <MX_UART4_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <MX_UART4_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <MX_UART4_Init+0x58>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <MX_UART4_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <MX_UART4_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <MX_UART4_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <MX_UART4_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_UART4_Init+0x58>)
 8000bb0:	f003 fca8 	bl	8004504 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000bba:	f000 f925 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000120 	.word	0x20000120
 8000bc8:	40004c00 	.word	0x40004c00

08000bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c8c <MX_GPIO_Init+0xc0>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be6:	4a29      	ldr	r2, [pc, #164]	@ (8000c8c <MX_GPIO_Init+0xc0>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bee:	4b27      	ldr	r3, [pc, #156]	@ (8000c8c <MX_GPIO_Init+0xc0>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	4b24      	ldr	r3, [pc, #144]	@ (8000c8c <MX_GPIO_Init+0xc0>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfe:	4a23      	ldr	r2, [pc, #140]	@ (8000c8c <MX_GPIO_Init+0xc0>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c06:	4b21      	ldr	r3, [pc, #132]	@ (8000c8c <MX_GPIO_Init+0xc0>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b1e      	ldr	r3, [pc, #120]	@ (8000c8c <MX_GPIO_Init+0xc0>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c16:	4a1d      	ldr	r2, [pc, #116]	@ (8000c8c <MX_GPIO_Init+0xc0>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c8c <MX_GPIO_Init+0xc0>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OK_LED_GPIO_Port, OK_LED_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c34:	f000 ff94 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Alert1_Pin */
  GPIO_InitStruct.Pin = Alert1_Pin;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c3c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alert1_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4810      	ldr	r0, [pc, #64]	@ (8000c90 <MX_GPIO_Init+0xc4>)
 8000c4e:	f000 fdf5 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : OK_LED_Pin */
  GPIO_InitStruct.Pin = OK_LED_Pin;
 8000c52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OK_LED_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c6e:	f000 fde5 	bl	800183c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2105      	movs	r1, #5
 8000c76:	2008      	movs	r0, #8
 8000c78:	f000 fd36 	bl	80016e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c7c:	2008      	movs	r0, #8
 8000c7e:	f000 fd4f 	bl	8001720 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c82:	bf00      	nop
 8000c84:	3720      	adds	r7, #32
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	48000800 	.word	0x48000800

08000c94 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  // code for handling the data received over uart
  if(huart->Instance == UART4)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	@ (8000cc0 <HAL_UART_RxCpltCallback+0x2c>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d103      	bne.n	8000cae <HAL_UART_RxCpltCallback+0x1a>
    }
    */



    prev_uart_rx = uart_rx;
 8000ca6:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <HAL_UART_RxCpltCallback+0x30>)
 8000ca8:	781a      	ldrb	r2, [r3, #0]
 8000caa:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <HAL_UART_RxCpltCallback+0x34>)
 8000cac:	701a      	strb	r2, [r3, #0]
  }

  HAL_UART_Receive_IT(&huart4, &uart_rx, 1); // reenables uart interrupt
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4904      	ldr	r1, [pc, #16]	@ (8000cc4 <HAL_UART_RxCpltCallback+0x30>)
 8000cb2:	4806      	ldr	r0, [pc, #24]	@ (8000ccc <HAL_UART_RxCpltCallback+0x38>)
 8000cb4:	f003 fc74 	bl	80045a0 <HAL_UART_Receive_IT>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40004c00 	.word	0x40004c00
 8000cc4:	200001d1 	.word	0x200001d1
 8000cc8:	200001d2 	.word	0x200001d2
 8000ccc:	20000120 	.word	0x20000120

08000cd0 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint8_t var = 0b11111111;
 8000cd8:	23ff      	movs	r3, #255	@ 0xff
 8000cda:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000cdc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ce0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce4:	f000 ff54 	bl	8001b90 <HAL_GPIO_TogglePin>
	//var = ~var;
	TCAL9538RSVR_SetOutput(&U7, &var);
 8000ce8:	f107 030f 	add.w	r3, r7, #15
 8000cec:	4619      	mov	r1, r3
 8000cee:	4804      	ldr	r0, [pc, #16]	@ (8000d00 <StartTask01+0x30>)
 8000cf0:	f7ff fc98 	bl	8000624 <TCAL9538RSVR_SetOutput>
    osDelay(500);
 8000cf4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cf8:	f005 f884 	bl	8005e04 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000cfc:	bf00      	nop
 8000cfe:	e7ed      	b.n	8000cdc <StartTask01+0xc>
 8000d00:	200001c4 	.word	0x200001c4

08000d04 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  for(;;)

  {
	//Code for reading ADC values

	  TCAL9538RSVR_ReadInput(&U5, &var);
 8000d0c:	f107 030f 	add.w	r3, r7, #15
 8000d10:	4619      	mov	r1, r3
 8000d12:	4804      	ldr	r0, [pc, #16]	@ (8000d24 <StartTask02+0x20>)
 8000d14:	f7ff fc77 	bl	8000606 <TCAL9538RSVR_ReadInput>
	//code sending data over CAN

    osDelay(1);
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f005 f873 	bl	8005e04 <osDelay>
	  TCAL9538RSVR_ReadInput(&U5, &var);
 8000d1e:	bf00      	nop
 8000d20:	e7f4      	b.n	8000d0c <StartTask02+0x8>
 8000d22:	bf00      	nop
 8000d24:	200001b4 	.word	0x200001b4

08000d28 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	@ 0x30
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */



	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox;

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = 0x3FF; // 11 bit Identifier !!Change!!
 8000d3c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000d40:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000d46:	2308      	movs	r3, #8
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24

	Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc4 <StartTask03+0x9c>)
 8000d50:	491d      	ldr	r1, [pc, #116]	@ (8000dc8 <StartTask03+0xa0>)
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fcb0 	bl	80006b8 <Update_CAN_Message1>
	stableInput1 = U5.portValues;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <StartTask03+0xa4>)
 8000d5a:	795a      	ldrb	r2, [r3, #5]
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <StartTask03+0xa8>)
 8000d5e:	701a      	strb	r2, [r3, #0]
	stableInput2 = U16.portValues;
 8000d60:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <StartTask03+0xac>)
 8000d62:	795a      	ldrb	r2, [r3, #5]
 8000d64:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <StartTask03+0xb0>)
 8000d66:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	for(;;)
	{
	  // Read TCAL Input and update flags
	  if (GPIO_Interrupt_Triggered != 0)
 8000d68:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <StartTask03+0xb4>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d025      	beq.n	8000dbc <StartTask03+0x94>
	  {
		  if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK){ Error_Handler(); }
 8000d70:	4816      	ldr	r0, [pc, #88]	@ (8000dcc <StartTask03+0xa4>)
 8000d72:	f7ff fc20 	bl	80005b6 <TCAL9538RSVR_HandleInterrupt>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <StartTask03+0x58>
 8000d7c:	f000 f844 	bl	8000e08 <Error_Handler>
		  //if (TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK){ Error_Handler(); }

		  uint8_t newInput1 = U5.portValues;
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <StartTask03+0xa4>)
 8000d82:	795b      	ldrb	r3, [r3, #5]
 8000d84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  uint8_t newInput2 = U16.portValues;
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <StartTask03+0xac>)
 8000d8a:	795b      	ldrb	r3, [r3, #5]
 8000d8c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

		  stableInput1 = updateDebounce(stableInput1, newInput1, &debounceCount1);
 8000d90:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <StartTask03+0xa8>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8000d98:	4a11      	ldr	r2, [pc, #68]	@ (8000de0 <StartTask03+0xb8>)
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fd52 	bl	8000844 <updateDebounce>
 8000da0:	4603      	mov	r3, r0
 8000da2:	461a      	mov	r2, r3
 8000da4:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <StartTask03+0xa8>)
 8000da6:	701a      	strb	r2, [r3, #0]
		  //stableInput2 = updateDebounce(stableInput2, newInput2, &debounceCount2);

		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <StartTask03+0x9c>)
 8000dae:	4906      	ldr	r1, [pc, #24]	@ (8000dc8 <StartTask03+0xa0>)
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fc81 	bl	80006b8 <Update_CAN_Message1>

		  GPIO_Interrupt_Triggered = 0;
 8000db6:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <StartTask03+0xb4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
	  //while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
//	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
//	  {
//		  Error_Handler();
//	  }
	  osDelay(1);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f005 f821 	bl	8005e04 <osDelay>
	  if (GPIO_Interrupt_Triggered != 0)
 8000dc2:	e7d1      	b.n	8000d68 <StartTask03+0x40>
 8000dc4:	200001c1 	.word	0x200001c1
 8000dc8:	200001b9 	.word	0x200001b9
 8000dcc:	200001b4 	.word	0x200001b4
 8000dd0:	200001cd 	.word	0x200001cd
 8000dd4:	200001bc 	.word	0x200001bc
 8000dd8:	200001ce 	.word	0x200001ce
 8000ddc:	200001cc 	.word	0x200001cc
 8000de0:	200001cf 	.word	0x200001cf

08000de4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a04      	ldr	r2, [pc, #16]	@ (8000e04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d101      	bne.n	8000dfa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000df6:	f000 faa3 	bl	8001340 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40000400 	.word	0x40000400

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <Error_Handler+0x8>

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e1e:	4a10      	ldr	r2, [pc, #64]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e36:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e3e:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	210f      	movs	r1, #15
 8000e4e:	f06f 0001 	mvn.w	r0, #1
 8000e52:	f000 fc49 	bl	80016e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	@ 0x30
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a45      	ldr	r2, [pc, #276]	@ (8000f98 <HAL_CAN_MspInit+0x134>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d132      	bne.n	8000eec <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e86:	4b45      	ldr	r3, [pc, #276]	@ (8000f9c <HAL_CAN_MspInit+0x138>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	4a43      	ldr	r2, [pc, #268]	@ (8000f9c <HAL_CAN_MspInit+0x138>)
 8000e8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e90:	4b42      	ldr	r3, [pc, #264]	@ (8000f9c <HAL_CAN_MspInit+0x138>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d10b      	bne.n	8000eb0 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e98:	4b41      	ldr	r3, [pc, #260]	@ (8000fa0 <HAL_CAN_MspInit+0x13c>)
 8000e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9c:	4a40      	ldr	r2, [pc, #256]	@ (8000fa0 <HAL_CAN_MspInit+0x13c>)
 8000e9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ea2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ea4:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa0 <HAL_CAN_MspInit+0x13c>)
 8000ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa0 <HAL_CAN_MspInit+0x13c>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb4:	4a3a      	ldr	r2, [pc, #232]	@ (8000fa0 <HAL_CAN_MspInit+0x13c>)
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ebc:	4b38      	ldr	r3, [pc, #224]	@ (8000fa0 <HAL_CAN_MspInit+0x13c>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ec8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000eda:	2309      	movs	r3, #9
 8000edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	482f      	ldr	r0, [pc, #188]	@ (8000fa4 <HAL_CAN_MspInit+0x140>)
 8000ee6:	f000 fca9 	bl	800183c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000eea:	e051      	b.n	8000f90 <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8000fa8 <HAL_CAN_MspInit+0x144>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d14c      	bne.n	8000f90 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa0 <HAL_CAN_MspInit+0x13c>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efa:	4a29      	ldr	r2, [pc, #164]	@ (8000fa0 <HAL_CAN_MspInit+0x13c>)
 8000efc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f02:	4b27      	ldr	r3, [pc, #156]	@ (8000fa0 <HAL_CAN_MspInit+0x13c>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000f0e:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <HAL_CAN_MspInit+0x138>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	3301      	adds	r3, #1
 8000f14:	4a21      	ldr	r2, [pc, #132]	@ (8000f9c <HAL_CAN_MspInit+0x138>)
 8000f16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000f18:	4b20      	ldr	r3, [pc, #128]	@ (8000f9c <HAL_CAN_MspInit+0x138>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d10b      	bne.n	8000f38 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000f20:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa0 <HAL_CAN_MspInit+0x13c>)
 8000f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f24:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa0 <HAL_CAN_MspInit+0x13c>)
 8000f26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <HAL_CAN_MspInit+0x13c>)
 8000f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f38:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <HAL_CAN_MspInit+0x13c>)
 8000f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3c:	4a18      	ldr	r2, [pc, #96]	@ (8000fa0 <HAL_CAN_MspInit+0x13c>)
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f44:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <HAL_CAN_MspInit+0x13c>)
 8000f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f50:	2320      	movs	r3, #32
 8000f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8000f60:	2303      	movs	r3, #3
 8000f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480e      	ldr	r0, [pc, #56]	@ (8000fa4 <HAL_CAN_MspInit+0x140>)
 8000f6c:	f000 fc66 	bl	800183c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f70:	2340      	movs	r3, #64	@ 0x40
 8000f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8000f80:	2308      	movs	r3, #8
 8000f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	@ (8000fa4 <HAL_CAN_MspInit+0x140>)
 8000f8c:	f000 fc56 	bl	800183c <HAL_GPIO_Init>
}
 8000f90:	bf00      	nop
 8000f92:	3730      	adds	r7, #48	@ 0x30
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40006400 	.word	0x40006400
 8000f9c:	200001d4 	.word	0x200001d4
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	48000400 	.word	0x48000400
 8000fa8:	40006800 	.word	0x40006800

08000fac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b0ac      	sub	sp, #176	@ 0xb0
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	228c      	movs	r2, #140	@ 0x8c
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f007 fbeb 	bl	80087a8 <memset>
  if(hi2c->Instance==I2C4)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a22      	ldr	r2, [pc, #136]	@ (8001060 <HAL_I2C_MspInit+0xb4>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d13c      	bne.n	8001056 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000fdc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000fe0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 fafa 	bl	80035e4 <HAL_RCCEx_PeriphCLKConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000ff6:	f7ff ff07 	bl	8000e08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <HAL_I2C_MspInit+0xb8>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	4a19      	ldr	r2, [pc, #100]	@ (8001064 <HAL_I2C_MspInit+0xb8>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001006:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <HAL_I2C_MspInit+0xb8>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001012:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001016:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101a:	2312      	movs	r3, #18
 800101c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 800102c:	2303      	movs	r3, #3
 800102e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001032:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001036:	4619      	mov	r1, r3
 8001038:	480b      	ldr	r0, [pc, #44]	@ (8001068 <HAL_I2C_MspInit+0xbc>)
 800103a:	f000 fbff 	bl	800183c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <HAL_I2C_MspInit+0xb8>)
 8001040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001042:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <HAL_I2C_MspInit+0xb8>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_I2C_MspInit+0xb8>)
 800104c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8001056:	bf00      	nop
 8001058:	37b0      	adds	r7, #176	@ 0xb0
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40008400 	.word	0x40008400
 8001064:	40021000 	.word	0x40021000
 8001068:	48000400 	.word	0x48000400

0800106c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b0ac      	sub	sp, #176	@ 0xb0
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	228c      	movs	r2, #140	@ 0x8c
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f007 fb8b 	bl	80087a8 <memset>
  if(huart->Instance==UART4)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a25      	ldr	r2, [pc, #148]	@ (800112c <HAL_UART_MspInit+0xc0>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d143      	bne.n	8001124 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800109c:	2308      	movs	r3, #8
 800109e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 fa9b 	bl	80035e4 <HAL_RCCEx_PeriphCLKConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010b4:	f7ff fea8 	bl	8000e08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80010b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001130 <HAL_UART_MspInit+0xc4>)
 80010ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001130 <HAL_UART_MspInit+0xc4>)
 80010be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80010c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80010c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <HAL_UART_MspInit+0xc4>)
 80010c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d0:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <HAL_UART_MspInit+0xc4>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d4:	4a16      	ldr	r2, [pc, #88]	@ (8001130 <HAL_UART_MspInit+0xc4>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010dc:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <HAL_UART_MspInit+0xc4>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010e8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001102:	2308      	movs	r3, #8
 8001104:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001108:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800110c:	4619      	mov	r1, r3
 800110e:	4809      	ldr	r0, [pc, #36]	@ (8001134 <HAL_UART_MspInit+0xc8>)
 8001110:	f000 fb94 	bl	800183c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2105      	movs	r1, #5
 8001118:	2034      	movs	r0, #52	@ 0x34
 800111a:	f000 fae5 	bl	80016e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800111e:	2034      	movs	r0, #52	@ 0x34
 8001120:	f000 fafe 	bl	8001720 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8001124:	bf00      	nop
 8001126:	37b0      	adds	r7, #176	@ 0xb0
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40004c00 	.word	0x40004c00
 8001130:	40021000 	.word	0x40021000
 8001134:	48000800 	.word	0x48000800

08001138 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08e      	sub	sp, #56	@ 0x38
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001146:	4b34      	ldr	r3, [pc, #208]	@ (8001218 <HAL_InitTick+0xe0>)
 8001148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114a:	4a33      	ldr	r2, [pc, #204]	@ (8001218 <HAL_InitTick+0xe0>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6593      	str	r3, [r2, #88]	@ 0x58
 8001152:	4b31      	ldr	r3, [pc, #196]	@ (8001218 <HAL_InitTick+0xe0>)
 8001154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800115e:	f107 0210 	add.w	r2, r7, #16
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f002 f9a9 	bl	80034c0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001174:	2b00      	cmp	r3, #0
 8001176:	d103      	bne.n	8001180 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001178:	f002 f976 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 800117c:	6378      	str	r0, [r7, #52]	@ 0x34
 800117e:	e004      	b.n	800118a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001180:	f002 f972 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8001184:	4603      	mov	r3, r0
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800118a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800118c:	4a23      	ldr	r2, [pc, #140]	@ (800121c <HAL_InitTick+0xe4>)
 800118e:	fba2 2303 	umull	r2, r3, r2, r3
 8001192:	0c9b      	lsrs	r3, r3, #18
 8001194:	3b01      	subs	r3, #1
 8001196:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001198:	4b21      	ldr	r3, [pc, #132]	@ (8001220 <HAL_InitTick+0xe8>)
 800119a:	4a22      	ldr	r2, [pc, #136]	@ (8001224 <HAL_InitTick+0xec>)
 800119c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800119e:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <HAL_InitTick+0xe8>)
 80011a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011a4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80011a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001220 <HAL_InitTick+0xe8>)
 80011a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011aa:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80011ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <HAL_InitTick+0xe8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <HAL_InitTick+0xe8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b8:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <HAL_InitTick+0xe8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80011be:	4818      	ldr	r0, [pc, #96]	@ (8001220 <HAL_InitTick+0xe8>)
 80011c0:	f002 feda 	bl	8003f78 <HAL_TIM_Base_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80011ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d11b      	bne.n	800120a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80011d2:	4813      	ldr	r0, [pc, #76]	@ (8001220 <HAL_InitTick+0xe8>)
 80011d4:	f002 ff32 	bl	800403c <HAL_TIM_Base_Start_IT>
 80011d8:	4603      	mov	r3, r0
 80011da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80011de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d111      	bne.n	800120a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011e6:	201d      	movs	r0, #29
 80011e8:	f000 fa9a 	bl	8001720 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	d808      	bhi.n	8001204 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80011f2:	2200      	movs	r2, #0
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	201d      	movs	r0, #29
 80011f8:	f000 fa76 	bl	80016e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <HAL_InitTick+0xf0>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e002      	b.n	800120a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800120a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800120e:	4618      	mov	r0, r3
 8001210:	3738      	adds	r7, #56	@ 0x38
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000
 800121c:	431bde83 	.word	0x431bde83
 8001220:	200001d8 	.word	0x200001d8
 8001224:	40000400 	.word	0x40000400
 8001228:	20000004 	.word	0x20000004

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <NMI_Handler+0x4>

08001234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <MemManage_Handler+0x4>

08001244 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <UsageFault_Handler+0x4>

08001254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alert1_Pin);
 8001266:	2004      	movs	r0, #4
 8001268:	f000 fcac 	bl	8001bc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001274:	4802      	ldr	r0, [pc, #8]	@ (8001280 <TIM3_IRQHandler+0x10>)
 8001276:	f002 ff51 	bl	800411c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200001d8 	.word	0x200001d8

08001284 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <UART4_IRQHandler+0x10>)
 800128a:	f003 f9d5 	bl	8004638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000120 	.word	0x20000120

08001298 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <SystemInit+0x20>)
 800129e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012a2:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <SystemInit+0x20>)
 80012a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c0:	f7ff ffea 	bl	8001298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c4:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80012c6:	490d      	ldr	r1, [pc, #52]	@ (80012fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001300 <LoopForever+0xe>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001308 <LoopForever+0x16>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ea:	f007 fabb 	bl	8008864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ee:	f7ff fadf 	bl	80008b0 <main>

080012f2 <LoopForever>:

LoopForever:
    b LoopForever
 80012f2:	e7fe      	b.n	80012f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012f4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012fc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001300:	08008ab8 	.word	0x08008ab8
  ldr r2, =_sbss
 8001304:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001308:	20001d08 	.word	0x20001d08

0800130c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC1_2_IRQHandler>

0800130e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001318:	2003      	movs	r0, #3
 800131a:	f000 f9da 	bl	80016d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800131e:	200f      	movs	r0, #15
 8001320:	f7ff ff0a 	bl	8001138 <HAL_InitTick>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	e001      	b.n	8001334 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001330:	f7ff fd70 	bl	8000e14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001334:	79fb      	ldrb	r3, [r7, #7]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <HAL_IncTick+0x20>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_IncTick+0x24>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <HAL_IncTick+0x24>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000008 	.word	0x20000008
 8001364:	20000224 	.word	0x20000224

08001368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b03      	ldr	r3, [pc, #12]	@ (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000224 	.word	0x20000224

08001380 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e0ed      	b.n	800156e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d102      	bne.n	80013a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff fd60 	bl	8000e64 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0201 	orr.w	r2, r2, #1
 80013b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013b4:	f7ff ffd8 	bl	8001368 <HAL_GetTick>
 80013b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013ba:	e012      	b.n	80013e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013bc:	f7ff ffd4 	bl	8001368 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b0a      	cmp	r3, #10
 80013c8:	d90b      	bls.n	80013e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2205      	movs	r2, #5
 80013da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e0c5      	b.n	800156e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0e5      	beq.n	80013bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0202 	bic.w	r2, r2, #2
 80013fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001400:	f7ff ffb2 	bl	8001368 <HAL_GetTick>
 8001404:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001406:	e012      	b.n	800142e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001408:	f7ff ffae 	bl	8001368 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b0a      	cmp	r3, #10
 8001414:	d90b      	bls.n	800142e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2205      	movs	r2, #5
 8001426:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e09f      	b.n	800156e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1e5      	bne.n	8001408 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7e1b      	ldrb	r3, [r3, #24]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d108      	bne.n	8001456 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	e007      	b.n	8001466 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	7e5b      	ldrb	r3, [r3, #25]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d108      	bne.n	8001480 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	e007      	b.n	8001490 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800148e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7e9b      	ldrb	r3, [r3, #26]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d108      	bne.n	80014aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0220 	orr.w	r2, r2, #32
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	e007      	b.n	80014ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0220 	bic.w	r2, r2, #32
 80014b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7edb      	ldrb	r3, [r3, #27]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d108      	bne.n	80014d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 0210 	bic.w	r2, r2, #16
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	e007      	b.n	80014e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0210 	orr.w	r2, r2, #16
 80014e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7f1b      	ldrb	r3, [r3, #28]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d108      	bne.n	80014fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0208 	orr.w	r2, r2, #8
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e007      	b.n	800150e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0208 	bic.w	r2, r2, #8
 800150c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7f5b      	ldrb	r3, [r3, #29]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d108      	bne.n	8001528 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f042 0204 	orr.w	r2, r2, #4
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e007      	b.n	8001538 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0204 	bic.w	r2, r2, #4
 8001536:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	ea42 0103 	orr.w	r1, r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	1e5a      	subs	r2, r3, #1
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001588:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001594:	4013      	ands	r3, r2
 8001596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015aa:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	60d3      	str	r3, [r2, #12]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c4:	4b04      	ldr	r3, [pc, #16]	@ (80015d8 <__NVIC_GetPriorityGrouping+0x18>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	f003 0307 	and.w	r3, r3, #7
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	db0b      	blt.n	8001606 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	f003 021f 	and.w	r2, r3, #31
 80015f4:	4907      	ldr	r1, [pc, #28]	@ (8001614 <__NVIC_EnableIRQ+0x38>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	2001      	movs	r0, #1
 80015fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e100 	.word	0xe000e100

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0a      	blt.n	8001642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	@ (8001664 <__NVIC_SetPriority+0x4c>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	440b      	add	r3, r1
 800163c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001640:	e00a      	b.n	8001658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4908      	ldr	r1, [pc, #32]	@ (8001668 <__NVIC_SetPriority+0x50>)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	3b04      	subs	r3, #4
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	440b      	add	r3, r1
 8001656:	761a      	strb	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000e100 	.word	0xe000e100
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	@ 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f1c3 0307 	rsb	r3, r3, #7
 8001686:	2b04      	cmp	r3, #4
 8001688:	bf28      	it	cs
 800168a:	2304      	movcs	r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3304      	adds	r3, #4
 8001692:	2b06      	cmp	r3, #6
 8001694:	d902      	bls.n	800169c <NVIC_EncodePriority+0x30>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3b03      	subs	r3, #3
 800169a:	e000      	b.n	800169e <NVIC_EncodePriority+0x32>
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43d9      	mvns	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4313      	orrs	r3, r2
         );
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3724      	adds	r7, #36	@ 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ff4c 	bl	8001578 <__NVIC_SetPriorityGrouping>
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016fa:	f7ff ff61 	bl	80015c0 <__NVIC_GetPriorityGrouping>
 80016fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	68b9      	ldr	r1, [r7, #8]
 8001704:	6978      	ldr	r0, [r7, #20]
 8001706:	f7ff ffb1 	bl	800166c <NVIC_EncodePriority>
 800170a:	4602      	mov	r2, r0
 800170c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff80 	bl	8001618 <__NVIC_SetPriority>
}
 8001718:	bf00      	nop
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff54 	bl	80015dc <__NVIC_EnableIRQ>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d008      	beq.n	8001766 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2204      	movs	r2, #4
 8001758:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e022      	b.n	80017ac <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 020e 	bic.w	r2, r2, #14
 8001774:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0201 	bic.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	f003 021c 	and.w	r2, r3, #28
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	2101      	movs	r1, #1
 8001794:	fa01 f202 	lsl.w	r2, r1, r2
 8001798:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d005      	beq.n	80017dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2204      	movs	r2, #4
 80017d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	73fb      	strb	r3, [r7, #15]
 80017da:	e029      	b.n	8001830 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 020e 	bic.w	r2, r2, #14
 80017ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0201 	bic.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001800:	f003 021c 	and.w	r2, r3, #28
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	2101      	movs	r1, #1
 800180a:	fa01 f202 	lsl.w	r2, r1, r2
 800180e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	4798      	blx	r3
    }
  }
  return status;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184a:	e166      	b.n	8001b1a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	2101      	movs	r1, #1
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	4013      	ands	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 8158 	beq.w	8001b14 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b01      	cmp	r3, #1
 800186e:	d005      	beq.n	800187c <HAL_GPIO_Init+0x40>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d130      	bne.n	80018de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	2203      	movs	r2, #3
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018b2:	2201      	movs	r2, #1
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	091b      	lsrs	r3, r3, #4
 80018c8:	f003 0201 	and.w	r2, r3, #1
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d017      	beq.n	800191a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	2203      	movs	r2, #3
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d123      	bne.n	800196e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	08da      	lsrs	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3208      	adds	r2, #8
 800192e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001932:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	08da      	lsrs	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3208      	adds	r2, #8
 8001968:	6939      	ldr	r1, [r7, #16]
 800196a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	2203      	movs	r2, #3
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0203 	and.w	r2, r3, #3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 80b2 	beq.w	8001b14 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b0:	4b61      	ldr	r3, [pc, #388]	@ (8001b38 <HAL_GPIO_Init+0x2fc>)
 80019b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b4:	4a60      	ldr	r2, [pc, #384]	@ (8001b38 <HAL_GPIO_Init+0x2fc>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80019bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001b38 <HAL_GPIO_Init+0x2fc>)
 80019be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019c8:	4a5c      	ldr	r2, [pc, #368]	@ (8001b3c <HAL_GPIO_Init+0x300>)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	3302      	adds	r3, #2
 80019d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	220f      	movs	r2, #15
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019f2:	d02b      	beq.n	8001a4c <HAL_GPIO_Init+0x210>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a52      	ldr	r2, [pc, #328]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d025      	beq.n	8001a48 <HAL_GPIO_Init+0x20c>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a51      	ldr	r2, [pc, #324]	@ (8001b44 <HAL_GPIO_Init+0x308>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d01f      	beq.n	8001a44 <HAL_GPIO_Init+0x208>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a50      	ldr	r2, [pc, #320]	@ (8001b48 <HAL_GPIO_Init+0x30c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d019      	beq.n	8001a40 <HAL_GPIO_Init+0x204>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a4f      	ldr	r2, [pc, #316]	@ (8001b4c <HAL_GPIO_Init+0x310>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d013      	beq.n	8001a3c <HAL_GPIO_Init+0x200>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a4e      	ldr	r2, [pc, #312]	@ (8001b50 <HAL_GPIO_Init+0x314>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d00d      	beq.n	8001a38 <HAL_GPIO_Init+0x1fc>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a4d      	ldr	r2, [pc, #308]	@ (8001b54 <HAL_GPIO_Init+0x318>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d007      	beq.n	8001a34 <HAL_GPIO_Init+0x1f8>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a4c      	ldr	r2, [pc, #304]	@ (8001b58 <HAL_GPIO_Init+0x31c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d101      	bne.n	8001a30 <HAL_GPIO_Init+0x1f4>
 8001a2c:	2307      	movs	r3, #7
 8001a2e:	e00e      	b.n	8001a4e <HAL_GPIO_Init+0x212>
 8001a30:	2308      	movs	r3, #8
 8001a32:	e00c      	b.n	8001a4e <HAL_GPIO_Init+0x212>
 8001a34:	2306      	movs	r3, #6
 8001a36:	e00a      	b.n	8001a4e <HAL_GPIO_Init+0x212>
 8001a38:	2305      	movs	r3, #5
 8001a3a:	e008      	b.n	8001a4e <HAL_GPIO_Init+0x212>
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	e006      	b.n	8001a4e <HAL_GPIO_Init+0x212>
 8001a40:	2303      	movs	r3, #3
 8001a42:	e004      	b.n	8001a4e <HAL_GPIO_Init+0x212>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e002      	b.n	8001a4e <HAL_GPIO_Init+0x212>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <HAL_GPIO_Init+0x212>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	f002 0203 	and.w	r2, r2, #3
 8001a54:	0092      	lsls	r2, r2, #2
 8001a56:	4093      	lsls	r3, r2
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a5e:	4937      	ldr	r1, [pc, #220]	@ (8001b3c <HAL_GPIO_Init+0x300>)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b5c <HAL_GPIO_Init+0x320>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a90:	4a32      	ldr	r2, [pc, #200]	@ (8001b5c <HAL_GPIO_Init+0x320>)
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a96:	4b31      	ldr	r3, [pc, #196]	@ (8001b5c <HAL_GPIO_Init+0x320>)
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aba:	4a28      	ldr	r2, [pc, #160]	@ (8001b5c <HAL_GPIO_Init+0x320>)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ac0:	4b26      	ldr	r3, [pc, #152]	@ (8001b5c <HAL_GPIO_Init+0x320>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b5c <HAL_GPIO_Init+0x320>)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001aea:	4b1c      	ldr	r3, [pc, #112]	@ (8001b5c <HAL_GPIO_Init+0x320>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b0e:	4a13      	ldr	r2, [pc, #76]	@ (8001b5c <HAL_GPIO_Init+0x320>)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3301      	adds	r3, #1
 8001b18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f47f ae91 	bne.w	800184c <HAL_GPIO_Init+0x10>
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	bf00      	nop
 8001b2e:	371c      	adds	r7, #28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	48000400 	.word	0x48000400
 8001b44:	48000800 	.word	0x48000800
 8001b48:	48000c00 	.word	0x48000c00
 8001b4c:	48001000 	.word	0x48001000
 8001b50:	48001400 	.word	0x48001400
 8001b54:	48001800 	.word	0x48001800
 8001b58:	48001c00 	.word	0x48001c00
 8001b5c:	40010400 	.word	0x40010400

08001b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b70:	787b      	ldrb	r3, [r7, #1]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b7c:	e002      	b.n	8001b84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	041a      	lsls	r2, r3, #16
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	43d9      	mvns	r1, r3
 8001bae:	887b      	ldrh	r3, [r7, #2]
 8001bb0:	400b      	ands	r3, r1
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bd0:	695a      	ldr	r2, [r3, #20]
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d006      	beq.n	8001be8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bda:	4a05      	ldr	r2, [pc, #20]	@ (8001bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fe54 	bl	8000890 <HAL_GPIO_EXTI_Callback>
  }
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40010400 	.word	0x40010400

08001bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e08d      	b.n	8001d22 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff f9c6 	bl	8000fac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2224      	movs	r2, #36	@ 0x24
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0201 	bic.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	e006      	b.n	8001c7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001c7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d108      	bne.n	8001c96 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	e007      	b.n	8001ca6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ca4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69d9      	ldr	r1, [r3, #28]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1a      	ldr	r2, [r3, #32]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	4608      	mov	r0, r1
 8001d36:	4611      	mov	r1, r2
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	817b      	strh	r3, [r7, #10]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	813b      	strh	r3, [r7, #8]
 8001d42:	4613      	mov	r3, r2
 8001d44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b20      	cmp	r3, #32
 8001d50:	f040 80f9 	bne.w	8001f46 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <HAL_I2C_Mem_Write+0x34>
 8001d5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d105      	bne.n	8001d6c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d66:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0ed      	b.n	8001f48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_I2C_Mem_Write+0x4e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e0e6      	b.n	8001f48 <HAL_I2C_Mem_Write+0x21c>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d82:	f7ff faf1 	bl	8001368 <HAL_GetTick>
 8001d86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2319      	movs	r3, #25
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 fac3 	bl	8002320 <I2C_WaitOnFlagUntilTimeout>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0d1      	b.n	8001f48 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2221      	movs	r2, #33	@ 0x21
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2240      	movs	r2, #64	@ 0x40
 8001db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a3a      	ldr	r2, [r7, #32]
 8001dbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dcc:	88f8      	ldrh	r0, [r7, #6]
 8001dce:	893a      	ldrh	r2, [r7, #8]
 8001dd0:	8979      	ldrh	r1, [r7, #10]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	4603      	mov	r3, r0
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 f9d3 	bl	8002188 <I2C_RequestMemoryWrite>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0a9      	b.n	8001f48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	2bff      	cmp	r3, #255	@ 0xff
 8001dfc:	d90e      	bls.n	8001e1c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	22ff      	movs	r2, #255	@ 0xff
 8001e02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	8979      	ldrh	r1, [r7, #10]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 fc47 	bl	80026a8 <I2C_TransferConfig>
 8001e1a:	e00f      	b.n	8001e3c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	8979      	ldrh	r1, [r7, #10]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 fc36 	bl	80026a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 fac6 	bl	80023d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e07b      	b.n	8001f48 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e54:	781a      	ldrb	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d034      	beq.n	8001ef4 <HAL_I2C_Mem_Write+0x1c8>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d130      	bne.n	8001ef4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 fa3f 	bl	8002320 <I2C_WaitOnFlagUntilTimeout>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e04d      	b.n	8001f48 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	2bff      	cmp	r3, #255	@ 0xff
 8001eb4:	d90e      	bls.n	8001ed4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	22ff      	movs	r2, #255	@ 0xff
 8001eba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	8979      	ldrh	r1, [r7, #10]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 fbeb 	bl	80026a8 <I2C_TransferConfig>
 8001ed2:	e00f      	b.n	8001ef4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	8979      	ldrh	r1, [r7, #10]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 fbda 	bl	80026a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d19e      	bne.n	8001e3c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 faac 	bl	8002460 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e01a      	b.n	8001f48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2220      	movs	r2, #32
 8001f18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6859      	ldr	r1, [r3, #4]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <HAL_I2C_Mem_Write+0x224>)
 8001f26:	400b      	ands	r3, r1
 8001f28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e000      	b.n	8001f48 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001f46:	2302      	movs	r3, #2
  }
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	fe00e800 	.word	0xfe00e800

08001f54 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	4611      	mov	r1, r2
 8001f60:	461a      	mov	r2, r3
 8001f62:	4603      	mov	r3, r0
 8001f64:	817b      	strh	r3, [r7, #10]
 8001f66:	460b      	mov	r3, r1
 8001f68:	813b      	strh	r3, [r7, #8]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b20      	cmp	r3, #32
 8001f78:	f040 80fd 	bne.w	8002176 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <HAL_I2C_Mem_Read+0x34>
 8001f82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d105      	bne.n	8001f94 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f8e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0f1      	b.n	8002178 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_I2C_Mem_Read+0x4e>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e0ea      	b.n	8002178 <HAL_I2C_Mem_Read+0x224>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001faa:	f7ff f9dd 	bl	8001368 <HAL_GetTick>
 8001fae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2319      	movs	r3, #25
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 f9af 	bl	8002320 <I2C_WaitOnFlagUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0d5      	b.n	8002178 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2222      	movs	r2, #34	@ 0x22
 8001fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2240      	movs	r2, #64	@ 0x40
 8001fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a3a      	ldr	r2, [r7, #32]
 8001fe6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001fec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ff4:	88f8      	ldrh	r0, [r7, #6]
 8001ff6:	893a      	ldrh	r2, [r7, #8]
 8001ff8:	8979      	ldrh	r1, [r7, #10]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	4603      	mov	r3, r0
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f913 	bl	8002230 <I2C_RequestMemoryRead>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0ad      	b.n	8002178 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002020:	b29b      	uxth	r3, r3
 8002022:	2bff      	cmp	r3, #255	@ 0xff
 8002024:	d90e      	bls.n	8002044 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002030:	b2da      	uxtb	r2, r3
 8002032:	8979      	ldrh	r1, [r7, #10]
 8002034:	4b52      	ldr	r3, [pc, #328]	@ (8002180 <HAL_I2C_Mem_Read+0x22c>)
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 fb33 	bl	80026a8 <I2C_TransferConfig>
 8002042:	e00f      	b.n	8002064 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002048:	b29a      	uxth	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002052:	b2da      	uxtb	r2, r3
 8002054:	8979      	ldrh	r1, [r7, #10]
 8002056:	4b4a      	ldr	r3, [pc, #296]	@ (8002180 <HAL_I2C_Mem_Read+0x22c>)
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 fb22 	bl	80026a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800206a:	2200      	movs	r2, #0
 800206c:	2104      	movs	r1, #4
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f956 	bl	8002320 <I2C_WaitOnFlagUntilTimeout>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e07c      	b.n	8002178 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d034      	beq.n	8002124 <HAL_I2C_Mem_Read+0x1d0>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d130      	bne.n	8002124 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c8:	2200      	movs	r2, #0
 80020ca:	2180      	movs	r1, #128	@ 0x80
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f927 	bl	8002320 <I2C_WaitOnFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e04d      	b.n	8002178 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2bff      	cmp	r3, #255	@ 0xff
 80020e4:	d90e      	bls.n	8002104 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	8979      	ldrh	r1, [r7, #10]
 80020f4:	2300      	movs	r3, #0
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 fad3 	bl	80026a8 <I2C_TransferConfig>
 8002102:	e00f      	b.n	8002124 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002112:	b2da      	uxtb	r2, r3
 8002114:	8979      	ldrh	r1, [r7, #10]
 8002116:	2300      	movs	r3, #0
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 fac2 	bl	80026a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002128:	b29b      	uxth	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d19a      	bne.n	8002064 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f994 	bl	8002460 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e01a      	b.n	8002178 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2220      	movs	r2, #32
 8002148:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <HAL_I2C_Mem_Read+0x230>)
 8002156:	400b      	ands	r3, r1
 8002158:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2220      	movs	r2, #32
 800215e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	e000      	b.n	8002178 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002176:	2302      	movs	r3, #2
  }
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	80002400 	.word	0x80002400
 8002184:	fe00e800 	.word	0xfe00e800

08002188 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af02      	add	r7, sp, #8
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	4608      	mov	r0, r1
 8002192:	4611      	mov	r1, r2
 8002194:	461a      	mov	r2, r3
 8002196:	4603      	mov	r3, r0
 8002198:	817b      	strh	r3, [r7, #10]
 800219a:	460b      	mov	r3, r1
 800219c:	813b      	strh	r3, [r7, #8]
 800219e:	4613      	mov	r3, r2
 80021a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021a2:	88fb      	ldrh	r3, [r7, #6]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	8979      	ldrh	r1, [r7, #10]
 80021a8:	4b20      	ldr	r3, [pc, #128]	@ (800222c <I2C_RequestMemoryWrite+0xa4>)
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fa79 	bl	80026a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	69b9      	ldr	r1, [r7, #24]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 f909 	bl	80023d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e02c      	b.n	8002224 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021d0:	893b      	ldrh	r3, [r7, #8]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80021da:	e015      	b.n	8002208 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021dc:	893b      	ldrh	r3, [r7, #8]
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	69b9      	ldr	r1, [r7, #24]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 f8ef 	bl	80023d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e012      	b.n	8002224 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021fe:	893b      	ldrh	r3, [r7, #8]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2200      	movs	r2, #0
 8002210:	2180      	movs	r1, #128	@ 0x80
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f884 	bl	8002320 <I2C_WaitOnFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	80002000 	.word	0x80002000

08002230 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af02      	add	r7, sp, #8
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	4608      	mov	r0, r1
 800223a:	4611      	mov	r1, r2
 800223c:	461a      	mov	r2, r3
 800223e:	4603      	mov	r3, r0
 8002240:	817b      	strh	r3, [r7, #10]
 8002242:	460b      	mov	r3, r1
 8002244:	813b      	strh	r3, [r7, #8]
 8002246:	4613      	mov	r3, r2
 8002248:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	8979      	ldrh	r1, [r7, #10]
 8002250:	4b20      	ldr	r3, [pc, #128]	@ (80022d4 <I2C_RequestMemoryRead+0xa4>)
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2300      	movs	r3, #0
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 fa26 	bl	80026a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800225c:	69fa      	ldr	r2, [r7, #28]
 800225e:	69b9      	ldr	r1, [r7, #24]
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f8b6 	bl	80023d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e02c      	b.n	80022ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d105      	bne.n	8002282 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002276:	893b      	ldrh	r3, [r7, #8]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002280:	e015      	b.n	80022ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002282:	893b      	ldrh	r3, [r7, #8]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	b29b      	uxth	r3, r3
 8002288:	b2da      	uxtb	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002290:	69fa      	ldr	r2, [r7, #28]
 8002292:	69b9      	ldr	r1, [r7, #24]
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f89c 	bl	80023d2 <I2C_WaitOnTXISFlagUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e012      	b.n	80022ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022a4:	893b      	ldrh	r3, [r7, #8]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	2200      	movs	r2, #0
 80022b6:	2140      	movs	r1, #64	@ 0x40
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f831 	bl	8002320 <I2C_WaitOnFlagUntilTimeout>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	80002000 	.word	0x80002000

080022d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d103      	bne.n	80022f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2200      	movs	r2, #0
 80022f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	d007      	beq.n	8002314 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699a      	ldr	r2, [r3, #24]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	619a      	str	r2, [r3, #24]
  }
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	4613      	mov	r3, r2
 800232e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002330:	e03b      	b.n	80023aa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	6839      	ldr	r1, [r7, #0]
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f8d6 	bl	80024e8 <I2C_IsErrorOccurred>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e041      	b.n	80023ca <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800234c:	d02d      	beq.n	80023aa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234e:	f7ff f80b 	bl	8001368 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d302      	bcc.n	8002364 <I2C_WaitOnFlagUntilTimeout+0x44>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d122      	bne.n	80023aa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	4013      	ands	r3, r2
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	429a      	cmp	r2, r3
 8002372:	bf0c      	ite	eq
 8002374:	2301      	moveq	r3, #1
 8002376:	2300      	movne	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	461a      	mov	r2, r3
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	429a      	cmp	r2, r3
 8002380:	d113      	bne.n	80023aa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	f043 0220 	orr.w	r2, r3, #32
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2220      	movs	r2, #32
 8002392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00f      	b.n	80023ca <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699a      	ldr	r2, [r3, #24]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4013      	ands	r3, r2
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	bf0c      	ite	eq
 80023ba:	2301      	moveq	r3, #1
 80023bc:	2300      	movne	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d0b4      	beq.n	8002332 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023de:	e033      	b.n	8002448 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	68b9      	ldr	r1, [r7, #8]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f87f 	bl	80024e8 <I2C_IsErrorOccurred>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e031      	b.n	8002458 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023fa:	d025      	beq.n	8002448 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fc:	f7fe ffb4 	bl	8001368 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	429a      	cmp	r2, r3
 800240a:	d302      	bcc.n	8002412 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11a      	bne.n	8002448 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b02      	cmp	r3, #2
 800241e:	d013      	beq.n	8002448 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002424:	f043 0220 	orr.w	r2, r3, #32
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e007      	b.n	8002458 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b02      	cmp	r3, #2
 8002454:	d1c4      	bne.n	80023e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800246c:	e02f      	b.n	80024ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f838 	bl	80024e8 <I2C_IsErrorOccurred>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e02d      	b.n	80024de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002482:	f7fe ff71 	bl	8001368 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	429a      	cmp	r2, r3
 8002490:	d302      	bcc.n	8002498 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d11a      	bne.n	80024ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	2b20      	cmp	r3, #32
 80024a4:	d013      	beq.n	80024ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024aa:	f043 0220 	orr.w	r2, r3, #32
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e007      	b.n	80024de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d1c8      	bne.n	800246e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	@ 0x28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b00      	cmp	r3, #0
 8002512:	d068      	beq.n	80025e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2210      	movs	r2, #16
 800251a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800251c:	e049      	b.n	80025b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002524:	d045      	beq.n	80025b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002526:	f7fe ff1f 	bl	8001368 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	429a      	cmp	r2, r3
 8002534:	d302      	bcc.n	800253c <I2C_IsErrorOccurred+0x54>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d13a      	bne.n	80025b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002546:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800254e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800255a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800255e:	d121      	bne.n	80025a4 <I2C_IsErrorOccurred+0xbc>
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002566:	d01d      	beq.n	80025a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002568:	7cfb      	ldrb	r3, [r7, #19]
 800256a:	2b20      	cmp	r3, #32
 800256c:	d01a      	beq.n	80025a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800257c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800257e:	f7fe fef3 	bl	8001368 <HAL_GetTick>
 8002582:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002584:	e00e      	b.n	80025a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002586:	f7fe feef 	bl	8001368 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b19      	cmp	r3, #25
 8002592:	d907      	bls.n	80025a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	f043 0320 	orr.w	r3, r3, #32
 800259a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80025a2:	e006      	b.n	80025b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d1e9      	bne.n	8002586 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d003      	beq.n	80025c8 <I2C_IsErrorOccurred+0xe0>
 80025c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0aa      	beq.n	800251e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d103      	bne.n	80025d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2220      	movs	r2, #32
 80025d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	f043 0304 	orr.w	r3, r3, #4
 80025de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00b      	beq.n	8002610 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002608:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00b      	beq.n	8002632 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	f043 0308 	orr.w	r3, r3, #8
 8002620:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800262a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00b      	beq.n	8002654 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	f043 0302 	orr.w	r3, r3, #2
 8002642:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800264c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01c      	beq.n	8002696 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f7ff fe3b 	bl	80022d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b0d      	ldr	r3, [pc, #52]	@ (80026a4 <I2C_IsErrorOccurred+0x1bc>)
 800266e:	400b      	ands	r3, r1
 8002670:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	431a      	orrs	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2220      	movs	r2, #32
 8002682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002696:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800269a:	4618      	mov	r0, r3
 800269c:	3728      	adds	r7, #40	@ 0x28
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	fe00e800 	.word	0xfe00e800

080026a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	460b      	mov	r3, r1
 80026b4:	817b      	strh	r3, [r7, #10]
 80026b6:	4613      	mov	r3, r2
 80026b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026ba:	897b      	ldrh	r3, [r7, #10]
 80026bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026c0:	7a7b      	ldrb	r3, [r7, #9]
 80026c2:	041b      	lsls	r3, r3, #16
 80026c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	0d5b      	lsrs	r3, r3, #21
 80026e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80026e6:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <I2C_TransferConfig+0x60>)
 80026e8:	430b      	orrs	r3, r1
 80026ea:	43db      	mvns	r3, r3
 80026ec:	ea02 0103 	and.w	r1, r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026fa:	bf00      	nop
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	03ff63ff 	.word	0x03ff63ff

0800270c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b20      	cmp	r3, #32
 8002720:	d138      	bne.n	8002794 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800272c:	2302      	movs	r3, #2
 800272e:	e032      	b.n	8002796 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2224      	movs	r2, #36	@ 0x24
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0201 	bic.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800275e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6819      	ldr	r1, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	e000      	b.n	8002796 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002794:	2302      	movs	r3, #2
  }
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b085      	sub	sp, #20
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d139      	bne.n	800282c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e033      	b.n	800282e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2224      	movs	r2, #36	@ 0x24
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0201 	bic.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80027f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	e000      	b.n	800282e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800282c:	2302      	movs	r3, #2
  }
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002840:	4b04      	ldr	r3, [pc, #16]	@ (8002854 <HAL_PWREx_GetVoltageRange+0x18>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40007000 	.word	0x40007000

08002858 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002866:	d130      	bne.n	80028ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002868:	4b23      	ldr	r3, [pc, #140]	@ (80028f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002874:	d038      	beq.n	80028e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002876:	4b20      	ldr	r3, [pc, #128]	@ (80028f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800287e:	4a1e      	ldr	r2, [pc, #120]	@ (80028f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002880:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002884:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002886:	4b1d      	ldr	r3, [pc, #116]	@ (80028fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2232      	movs	r2, #50	@ 0x32
 800288c:	fb02 f303 	mul.w	r3, r2, r3
 8002890:	4a1b      	ldr	r2, [pc, #108]	@ (8002900 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	0c9b      	lsrs	r3, r3, #18
 8002898:	3301      	adds	r3, #1
 800289a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800289c:	e002      	b.n	80028a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	3b01      	subs	r3, #1
 80028a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028a4:	4b14      	ldr	r3, [pc, #80]	@ (80028f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028b0:	d102      	bne.n	80028b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f2      	bne.n	800289e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028b8:	4b0f      	ldr	r3, [pc, #60]	@ (80028f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028c4:	d110      	bne.n	80028e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e00f      	b.n	80028ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028ca:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028d6:	d007      	beq.n	80028e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028d8:	4b07      	ldr	r3, [pc, #28]	@ (80028f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028e0:	4a05      	ldr	r2, [pc, #20]	@ (80028f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40007000 	.word	0x40007000
 80028fc:	20000000 	.word	0x20000000
 8002900:	431bde83 	.word	0x431bde83

08002904 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	f000 bc08 	b.w	8003128 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002918:	4b96      	ldr	r3, [pc, #600]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002922:	4b94      	ldr	r3, [pc, #592]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80e4 	beq.w	8002b02 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d007      	beq.n	8002950 <HAL_RCC_OscConfig+0x4c>
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b0c      	cmp	r3, #12
 8002944:	f040 808b 	bne.w	8002a5e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2b01      	cmp	r3, #1
 800294c:	f040 8087 	bne.w	8002a5e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002950:	4b88      	ldr	r3, [pc, #544]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_OscConfig+0x64>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e3df      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1a      	ldr	r2, [r3, #32]
 800296c:	4b81      	ldr	r3, [pc, #516]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d004      	beq.n	8002982 <HAL_RCC_OscConfig+0x7e>
 8002978:	4b7e      	ldr	r3, [pc, #504]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002980:	e005      	b.n	800298e <HAL_RCC_OscConfig+0x8a>
 8002982:	4b7c      	ldr	r3, [pc, #496]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002984:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800298e:	4293      	cmp	r3, r2
 8002990:	d223      	bcs.n	80029da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fdc4 	bl	8003524 <RCC_SetFlashLatencyFromMSIRange>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e3c0      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029a6:	4b73      	ldr	r3, [pc, #460]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a72      	ldr	r2, [pc, #456]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 80029ac:	f043 0308 	orr.w	r3, r3, #8
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b70      	ldr	r3, [pc, #448]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	496d      	ldr	r1, [pc, #436]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029c4:	4b6b      	ldr	r3, [pc, #428]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	4968      	ldr	r1, [pc, #416]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
 80029d8:	e025      	b.n	8002a26 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029da:	4b66      	ldr	r3, [pc, #408]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a65      	ldr	r2, [pc, #404]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 80029e0:	f043 0308 	orr.w	r3, r3, #8
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b63      	ldr	r3, [pc, #396]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	4960      	ldr	r1, [pc, #384]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	021b      	lsls	r3, r3, #8
 8002a06:	495b      	ldr	r1, [pc, #364]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fd84 	bl	8003524 <RCC_SetFlashLatencyFromMSIRange>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e380      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a26:	f000 fc87 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	4b51      	ldr	r3, [pc, #324]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	4950      	ldr	r1, [pc, #320]	@ (8002b78 <HAL_RCC_OscConfig+0x274>)
 8002a38:	5ccb      	ldrb	r3, [r1, r3]
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a42:	4a4e      	ldr	r2, [pc, #312]	@ (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002a44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a46:	4b4e      	ldr	r3, [pc, #312]	@ (8002b80 <HAL_RCC_OscConfig+0x27c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fb74 	bl	8001138 <HAL_InitTick>
 8002a50:	4603      	mov	r3, r0
 8002a52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d052      	beq.n	8002b00 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	e364      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d032      	beq.n	8002acc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a66:	4b43      	ldr	r3, [pc, #268]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a42      	ldr	r2, [pc, #264]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a72:	f7fe fc79 	bl	8001368 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a7a:	f7fe fc75 	bl	8001368 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e34d      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a8c:	4b39      	ldr	r3, [pc, #228]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a98:	4b36      	ldr	r3, [pc, #216]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a35      	ldr	r2, [pc, #212]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002a9e:	f043 0308 	orr.w	r3, r3, #8
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	4b33      	ldr	r3, [pc, #204]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	4930      	ldr	r1, [pc, #192]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	492b      	ldr	r1, [pc, #172]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	604b      	str	r3, [r1, #4]
 8002aca:	e01a      	b.n	8002b02 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002acc:	4b29      	ldr	r3, [pc, #164]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a28      	ldr	r2, [pc, #160]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ad8:	f7fe fc46 	bl	8001368 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ae0:	f7fe fc42 	bl	8001368 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e31a      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002af2:	4b20      	ldr	r3, [pc, #128]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x1dc>
 8002afe:	e000      	b.n	8002b02 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d073      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_OscConfig+0x21c>
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2b0c      	cmp	r3, #12
 8002b18:	d10e      	bne.n	8002b38 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d10b      	bne.n	8002b38 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b20:	4b14      	ldr	r3, [pc, #80]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d063      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x2f0>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d15f      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e2f7      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b40:	d106      	bne.n	8002b50 <HAL_RCC_OscConfig+0x24c>
 8002b42:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a0b      	ldr	r2, [pc, #44]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e025      	b.n	8002b9c <HAL_RCC_OscConfig+0x298>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b58:	d114      	bne.n	8002b84 <HAL_RCC_OscConfig+0x280>
 8002b5a:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a05      	ldr	r2, [pc, #20]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002b60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b03      	ldr	r3, [pc, #12]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a02      	ldr	r2, [pc, #8]	@ (8002b74 <HAL_RCC_OscConfig+0x270>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e013      	b.n	8002b9c <HAL_RCC_OscConfig+0x298>
 8002b74:	40021000 	.word	0x40021000
 8002b78:	08008a60 	.word	0x08008a60
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	20000004 	.word	0x20000004
 8002b84:	4ba0      	ldr	r3, [pc, #640]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a9f      	ldr	r2, [pc, #636]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	4b9d      	ldr	r3, [pc, #628]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a9c      	ldr	r2, [pc, #624]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002b96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d013      	beq.n	8002bcc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fbe0 	bl	8001368 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bac:	f7fe fbdc 	bl	8001368 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	@ 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e2b4      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bbe:	4b92      	ldr	r3, [pc, #584]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x2a8>
 8002bca:	e014      	b.n	8002bf6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fbcc 	bl	8001368 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd4:	f7fe fbc8 	bl	8001368 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	@ 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e2a0      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002be6:	4b88      	ldr	r3, [pc, #544]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x2d0>
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d060      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_OscConfig+0x310>
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d119      	bne.n	8002c42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d116      	bne.n	8002c42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c14:	4b7c      	ldr	r3, [pc, #496]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_OscConfig+0x328>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e27d      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2c:	4b76      	ldr	r3, [pc, #472]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	061b      	lsls	r3, r3, #24
 8002c3a:	4973      	ldr	r1, [pc, #460]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c40:	e040      	b.n	8002cc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d023      	beq.n	8002c92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c4a:	4b6f      	ldr	r3, [pc, #444]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a6e      	ldr	r2, [pc, #440]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c56:	f7fe fb87 	bl	8001368 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5e:	f7fe fb83 	bl	8001368 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e25b      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c70:	4b65      	ldr	r3, [pc, #404]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7c:	4b62      	ldr	r3, [pc, #392]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	061b      	lsls	r3, r3, #24
 8002c8a:	495f      	ldr	r1, [pc, #380]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
 8002c90:	e018      	b.n	8002cc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c92:	4b5d      	ldr	r3, [pc, #372]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a5c      	ldr	r2, [pc, #368]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002c98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9e:	f7fe fb63 	bl	8001368 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca6:	f7fe fb5f 	bl	8001368 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e237      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cb8:	4b53      	ldr	r3, [pc, #332]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f0      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d03c      	beq.n	8002d4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01c      	beq.n	8002d12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd8:	4b4b      	ldr	r3, [pc, #300]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cde:	4a4a      	ldr	r2, [pc, #296]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7fe fb3e 	bl	8001368 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf0:	f7fe fb3a 	bl	8001368 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e212      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d02:	4b41      	ldr	r3, [pc, #260]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0ef      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x3ec>
 8002d10:	e01b      	b.n	8002d4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d12:	4b3d      	ldr	r3, [pc, #244]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d18:	4a3b      	ldr	r2, [pc, #236]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d22:	f7fe fb21 	bl	8001368 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d2a:	f7fe fb1d 	bl	8001368 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e1f5      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d3c:	4b32      	ldr	r3, [pc, #200]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1ef      	bne.n	8002d2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 80a6 	beq.w	8002ea4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10d      	bne.n	8002d84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d68:	4b27      	ldr	r3, [pc, #156]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6c:	4a26      	ldr	r2, [pc, #152]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d72:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d74:	4b24      	ldr	r3, [pc, #144]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d80:	2301      	movs	r3, #1
 8002d82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d84:	4b21      	ldr	r3, [pc, #132]	@ (8002e0c <HAL_RCC_OscConfig+0x508>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d118      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d90:	4b1e      	ldr	r3, [pc, #120]	@ (8002e0c <HAL_RCC_OscConfig+0x508>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a1d      	ldr	r2, [pc, #116]	@ (8002e0c <HAL_RCC_OscConfig+0x508>)
 8002d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9c:	f7fe fae4 	bl	8001368 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da4:	f7fe fae0 	bl	8001368 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e1b8      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db6:	4b15      	ldr	r3, [pc, #84]	@ (8002e0c <HAL_RCC_OscConfig+0x508>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d108      	bne.n	8002ddc <HAL_RCC_OscConfig+0x4d8>
 8002dca:	4b0f      	ldr	r3, [pc, #60]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dda:	e029      	b.n	8002e30 <HAL_RCC_OscConfig+0x52c>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	d115      	bne.n	8002e10 <HAL_RCC_OscConfig+0x50c>
 8002de4:	4b08      	ldr	r3, [pc, #32]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dea:	4a07      	ldr	r2, [pc, #28]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002df4:	4b04      	ldr	r3, [pc, #16]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfa:	4a03      	ldr	r2, [pc, #12]	@ (8002e08 <HAL_RCC_OscConfig+0x504>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e04:	e014      	b.n	8002e30 <HAL_RCC_OscConfig+0x52c>
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40007000 	.word	0x40007000
 8002e10:	4b9d      	ldr	r3, [pc, #628]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e16:	4a9c      	ldr	r2, [pc, #624]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e20:	4b99      	ldr	r3, [pc, #612]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e26:	4a98      	ldr	r2, [pc, #608]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002e28:	f023 0304 	bic.w	r3, r3, #4
 8002e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d016      	beq.n	8002e66 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e38:	f7fe fa96 	bl	8001368 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e40:	f7fe fa92 	bl	8001368 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e168      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e56:	4b8c      	ldr	r3, [pc, #560]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0ed      	beq.n	8002e40 <HAL_RCC_OscConfig+0x53c>
 8002e64:	e015      	b.n	8002e92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e66:	f7fe fa7f 	bl	8001368 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6e:	f7fe fa7b 	bl	8001368 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e151      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e84:	4b80      	ldr	r3, [pc, #512]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1ed      	bne.n	8002e6e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e92:	7ffb      	ldrb	r3, [r7, #31]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d105      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e98:	4b7b      	ldr	r3, [pc, #492]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9c:	4a7a      	ldr	r2, [pc, #488]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002e9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ea2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d03c      	beq.n	8002f2a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01c      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002eb8:	4b73      	ldr	r3, [pc, #460]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ebe:	4a72      	ldr	r2, [pc, #456]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7fe fa4e 	bl	8001368 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ed0:	f7fe fa4a 	bl	8001368 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e122      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ee2:	4b69      	ldr	r3, [pc, #420]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002ee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ef      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x5cc>
 8002ef0:	e01b      	b.n	8002f2a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ef2:	4b65      	ldr	r3, [pc, #404]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002ef4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ef8:	4a63      	ldr	r2, [pc, #396]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fe fa31 	bl	8001368 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f0a:	f7fe fa2d 	bl	8001368 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e105      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f1c:	4b5a      	ldr	r3, [pc, #360]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002f1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1ef      	bne.n	8002f0a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 80f9 	beq.w	8003126 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	f040 80cf 	bne.w	80030dc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f3e:	4b52      	ldr	r3, [pc, #328]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f003 0203 	and.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d12c      	bne.n	8002fac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d123      	bne.n	8002fac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f6e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d11b      	bne.n	8002fac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d113      	bne.n	8002fac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8e:	085b      	lsrs	r3, r3, #1
 8002f90:	3b01      	subs	r3, #1
 8002f92:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d109      	bne.n	8002fac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d071      	beq.n	8003090 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b0c      	cmp	r3, #12
 8002fb0:	d068      	beq.n	8003084 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fb2:	4b35      	ldr	r3, [pc, #212]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d105      	bne.n	8002fca <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fbe:	4b32      	ldr	r3, [pc, #200]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e0ac      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fce:	4b2e      	ldr	r3, [pc, #184]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a2d      	ldr	r2, [pc, #180]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002fd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fd8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fda:	f7fe f9c5 	bl	8001368 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe2:	f7fe f9c1 	bl	8001368 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e099      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff4:	4b24      	ldr	r3, [pc, #144]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1f0      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003000:	4b21      	ldr	r3, [pc, #132]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	4b21      	ldr	r3, [pc, #132]	@ (800308c <HAL_RCC_OscConfig+0x788>)
 8003006:	4013      	ands	r3, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003010:	3a01      	subs	r2, #1
 8003012:	0112      	lsls	r2, r2, #4
 8003014:	4311      	orrs	r1, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800301a:	0212      	lsls	r2, r2, #8
 800301c:	4311      	orrs	r1, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003022:	0852      	lsrs	r2, r2, #1
 8003024:	3a01      	subs	r2, #1
 8003026:	0552      	lsls	r2, r2, #21
 8003028:	4311      	orrs	r1, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800302e:	0852      	lsrs	r2, r2, #1
 8003030:	3a01      	subs	r2, #1
 8003032:	0652      	lsls	r2, r2, #25
 8003034:	4311      	orrs	r1, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800303a:	06d2      	lsls	r2, r2, #27
 800303c:	430a      	orrs	r2, r1
 800303e:	4912      	ldr	r1, [pc, #72]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8003040:	4313      	orrs	r3, r2
 8003042:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003044:	4b10      	ldr	r3, [pc, #64]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0f      	ldr	r2, [pc, #60]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 800304a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800304e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003050:	4b0d      	ldr	r3, [pc, #52]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a0c      	ldr	r2, [pc, #48]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8003056:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800305a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800305c:	f7fe f984 	bl	8001368 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003064:	f7fe f980 	bl	8001368 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e058      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003076:	4b04      	ldr	r3, [pc, #16]	@ (8003088 <HAL_RCC_OscConfig+0x784>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003082:	e050      	b.n	8003126 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e04f      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
 8003088:	40021000 	.word	0x40021000
 800308c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003090:	4b27      	ldr	r3, [pc, #156]	@ (8003130 <HAL_RCC_OscConfig+0x82c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d144      	bne.n	8003126 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800309c:	4b24      	ldr	r3, [pc, #144]	@ (8003130 <HAL_RCC_OscConfig+0x82c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a23      	ldr	r2, [pc, #140]	@ (8003130 <HAL_RCC_OscConfig+0x82c>)
 80030a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030a8:	4b21      	ldr	r3, [pc, #132]	@ (8003130 <HAL_RCC_OscConfig+0x82c>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4a20      	ldr	r2, [pc, #128]	@ (8003130 <HAL_RCC_OscConfig+0x82c>)
 80030ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030b4:	f7fe f958 	bl	8001368 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fe f954 	bl	8001368 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e02c      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ce:	4b18      	ldr	r3, [pc, #96]	@ (8003130 <HAL_RCC_OscConfig+0x82c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x7b8>
 80030da:	e024      	b.n	8003126 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2b0c      	cmp	r3, #12
 80030e0:	d01f      	beq.n	8003122 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e2:	4b13      	ldr	r3, [pc, #76]	@ (8003130 <HAL_RCC_OscConfig+0x82c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a12      	ldr	r2, [pc, #72]	@ (8003130 <HAL_RCC_OscConfig+0x82c>)
 80030e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ee:	f7fe f93b 	bl	8001368 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f6:	f7fe f937 	bl	8001368 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e00f      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003108:	4b09      	ldr	r3, [pc, #36]	@ (8003130 <HAL_RCC_OscConfig+0x82c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f0      	bne.n	80030f6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003114:	4b06      	ldr	r3, [pc, #24]	@ (8003130 <HAL_RCC_OscConfig+0x82c>)
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	4905      	ldr	r1, [pc, #20]	@ (8003130 <HAL_RCC_OscConfig+0x82c>)
 800311a:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <HAL_RCC_OscConfig+0x830>)
 800311c:	4013      	ands	r3, r2
 800311e:	60cb      	str	r3, [r1, #12]
 8003120:	e001      	b.n	8003126 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3720      	adds	r7, #32
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40021000 	.word	0x40021000
 8003134:	feeefffc 	.word	0xfeeefffc

08003138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0e7      	b.n	800331c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800314c:	4b75      	ldr	r3, [pc, #468]	@ (8003324 <HAL_RCC_ClockConfig+0x1ec>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d910      	bls.n	800317c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b72      	ldr	r3, [pc, #456]	@ (8003324 <HAL_RCC_ClockConfig+0x1ec>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 0207 	bic.w	r2, r3, #7
 8003162:	4970      	ldr	r1, [pc, #448]	@ (8003324 <HAL_RCC_ClockConfig+0x1ec>)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	4313      	orrs	r3, r2
 8003168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b6e      	ldr	r3, [pc, #440]	@ (8003324 <HAL_RCC_ClockConfig+0x1ec>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0cf      	b.n	800331c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d010      	beq.n	80031aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	4b66      	ldr	r3, [pc, #408]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003194:	429a      	cmp	r2, r3
 8003196:	d908      	bls.n	80031aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003198:	4b63      	ldr	r3, [pc, #396]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4960      	ldr	r1, [pc, #384]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d04c      	beq.n	8003250 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d107      	bne.n	80031ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031be:	4b5a      	ldr	r3, [pc, #360]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d121      	bne.n	800320e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e0a6      	b.n	800331c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031d6:	4b54      	ldr	r3, [pc, #336]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d115      	bne.n	800320e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e09a      	b.n	800331c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ee:	4b4e      	ldr	r3, [pc, #312]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e08e      	b.n	800331c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e086      	b.n	800331c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800320e:	4b46      	ldr	r3, [pc, #280]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f023 0203 	bic.w	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4943      	ldr	r1, [pc, #268]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 800321c:	4313      	orrs	r3, r2
 800321e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003220:	f7fe f8a2 	bl	8001368 <HAL_GetTick>
 8003224:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	e00a      	b.n	800323e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003228:	f7fe f89e 	bl	8001368 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e06e      	b.n	800331c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323e:	4b3a      	ldr	r3, [pc, #232]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 020c 	and.w	r2, r3, #12
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	429a      	cmp	r2, r3
 800324e:	d1eb      	bne.n	8003228 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d010      	beq.n	800327e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	4b31      	ldr	r3, [pc, #196]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003268:	429a      	cmp	r2, r3
 800326a:	d208      	bcs.n	800327e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326c:	4b2e      	ldr	r3, [pc, #184]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	492b      	ldr	r1, [pc, #172]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800327e:	4b29      	ldr	r3, [pc, #164]	@ (8003324 <HAL_RCC_ClockConfig+0x1ec>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d210      	bcs.n	80032ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328c:	4b25      	ldr	r3, [pc, #148]	@ (8003324 <HAL_RCC_ClockConfig+0x1ec>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f023 0207 	bic.w	r2, r3, #7
 8003294:	4923      	ldr	r1, [pc, #140]	@ (8003324 <HAL_RCC_ClockConfig+0x1ec>)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	4313      	orrs	r3, r2
 800329a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329c:	4b21      	ldr	r3, [pc, #132]	@ (8003324 <HAL_RCC_ClockConfig+0x1ec>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d001      	beq.n	80032ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e036      	b.n	800331c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d008      	beq.n	80032cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	4918      	ldr	r1, [pc, #96]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d009      	beq.n	80032ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032d8:	4b13      	ldr	r3, [pc, #76]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4910      	ldr	r1, [pc, #64]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032ec:	f000 f824 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 80032f0:	4602      	mov	r2, r0
 80032f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	091b      	lsrs	r3, r3, #4
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	490b      	ldr	r1, [pc, #44]	@ (800332c <HAL_RCC_ClockConfig+0x1f4>)
 80032fe:	5ccb      	ldrb	r3, [r1, r3]
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
 8003308:	4a09      	ldr	r2, [pc, #36]	@ (8003330 <HAL_RCC_ClockConfig+0x1f8>)
 800330a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800330c:	4b09      	ldr	r3, [pc, #36]	@ (8003334 <HAL_RCC_ClockConfig+0x1fc>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd ff11 	bl	8001138 <HAL_InitTick>
 8003316:	4603      	mov	r3, r0
 8003318:	72fb      	strb	r3, [r7, #11]

  return status;
 800331a:	7afb      	ldrb	r3, [r7, #11]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40022000 	.word	0x40022000
 8003328:	40021000 	.word	0x40021000
 800332c:	08008a60 	.word	0x08008a60
 8003330:	20000000 	.word	0x20000000
 8003334:	20000004 	.word	0x20000004

08003338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003338:	b480      	push	{r7}
 800333a:	b089      	sub	sp, #36	@ 0x24
 800333c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003346:	4b3e      	ldr	r3, [pc, #248]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003350:	4b3b      	ldr	r3, [pc, #236]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x34>
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	2b0c      	cmp	r3, #12
 8003364:	d121      	bne.n	80033aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d11e      	bne.n	80033aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800336c:	4b34      	ldr	r3, [pc, #208]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d107      	bne.n	8003388 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003378:	4b31      	ldr	r3, [pc, #196]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 800337a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	e005      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003388:	4b2d      	ldr	r3, [pc, #180]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003394:	4a2b      	ldr	r2, [pc, #172]	@ (8003444 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033a8:	e00a      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d102      	bne.n	80033b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033b0:	4b25      	ldr	r3, [pc, #148]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x110>)
 80033b2:	61bb      	str	r3, [r7, #24]
 80033b4:	e004      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033bc:	4b23      	ldr	r3, [pc, #140]	@ (800344c <HAL_RCC_GetSysClockFreq+0x114>)
 80033be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d134      	bne.n	8003430 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d003      	beq.n	80033de <HAL_RCC_GetSysClockFreq+0xa6>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d003      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0xac>
 80033dc:	e005      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033de:	4b1a      	ldr	r3, [pc, #104]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x110>)
 80033e0:	617b      	str	r3, [r7, #20]
      break;
 80033e2:	e005      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033e4:	4b19      	ldr	r3, [pc, #100]	@ (800344c <HAL_RCC_GetSysClockFreq+0x114>)
 80033e6:	617b      	str	r3, [r7, #20]
      break;
 80033e8:	e002      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	617b      	str	r3, [r7, #20]
      break;
 80033ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033f0:	4b13      	ldr	r3, [pc, #76]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	3301      	adds	r3, #1
 80033fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033fe:	4b10      	ldr	r3, [pc, #64]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	fb03 f202 	mul.w	r2, r3, r2
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003416:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	0e5b      	lsrs	r3, r3, #25
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	3301      	adds	r3, #1
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	fbb2 f3f3 	udiv	r3, r2, r3
 800342e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003430:	69bb      	ldr	r3, [r7, #24]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3724      	adds	r7, #36	@ 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	08008a78 	.word	0x08008a78
 8003448:	00f42400 	.word	0x00f42400
 800344c:	007a1200 	.word	0x007a1200

08003450 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003454:	4b03      	ldr	r3, [pc, #12]	@ (8003464 <HAL_RCC_GetHCLKFreq+0x14>)
 8003456:	681b      	ldr	r3, [r3, #0]
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000000 	.word	0x20000000

08003468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800346c:	f7ff fff0 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b06      	ldr	r3, [pc, #24]	@ (800348c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	0a1b      	lsrs	r3, r3, #8
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4904      	ldr	r1, [pc, #16]	@ (8003490 <HAL_RCC_GetPCLK1Freq+0x28>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003488:	4618      	mov	r0, r3
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	08008a70 	.word	0x08008a70

08003494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003498:	f7ff ffda 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	0adb      	lsrs	r3, r3, #11
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4904      	ldr	r1, [pc, #16]	@ (80034bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40021000 	.word	0x40021000
 80034bc:	08008a70 	.word	0x08008a70

080034c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	220f      	movs	r2, #15
 80034ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80034d0:	4b12      	ldr	r3, [pc, #72]	@ (800351c <HAL_RCC_GetClockConfig+0x5c>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 0203 	and.w	r2, r3, #3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80034dc:	4b0f      	ldr	r3, [pc, #60]	@ (800351c <HAL_RCC_GetClockConfig+0x5c>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80034e8:	4b0c      	ldr	r3, [pc, #48]	@ (800351c <HAL_RCC_GetClockConfig+0x5c>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80034f4:	4b09      	ldr	r3, [pc, #36]	@ (800351c <HAL_RCC_GetClockConfig+0x5c>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	08db      	lsrs	r3, r3, #3
 80034fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003502:	4b07      	ldr	r3, [pc, #28]	@ (8003520 <HAL_RCC_GetClockConfig+0x60>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0207 	and.w	r2, r3, #7
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	601a      	str	r2, [r3, #0]
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	40022000 	.word	0x40022000

08003524 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003530:	4b2a      	ldr	r3, [pc, #168]	@ (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800353c:	f7ff f97e 	bl	800283c <HAL_PWREx_GetVoltageRange>
 8003540:	6178      	str	r0, [r7, #20]
 8003542:	e014      	b.n	800356e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003544:	4b25      	ldr	r3, [pc, #148]	@ (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003548:	4a24      	ldr	r2, [pc, #144]	@ (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800354e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003550:	4b22      	ldr	r3, [pc, #136]	@ (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800355c:	f7ff f96e 	bl	800283c <HAL_PWREx_GetVoltageRange>
 8003560:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003562:	4b1e      	ldr	r3, [pc, #120]	@ (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003566:	4a1d      	ldr	r2, [pc, #116]	@ (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800356c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003574:	d10b      	bne.n	800358e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b80      	cmp	r3, #128	@ 0x80
 800357a:	d919      	bls.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003580:	d902      	bls.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003582:	2302      	movs	r3, #2
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	e013      	b.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003588:	2301      	movs	r3, #1
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	e010      	b.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b80      	cmp	r3, #128	@ 0x80
 8003592:	d902      	bls.n	800359a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003594:	2303      	movs	r3, #3
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	e00a      	b.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b80      	cmp	r3, #128	@ 0x80
 800359e:	d102      	bne.n	80035a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035a0:	2302      	movs	r3, #2
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	e004      	b.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b70      	cmp	r3, #112	@ 0x70
 80035aa:	d101      	bne.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035ac:	2301      	movs	r3, #1
 80035ae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035b0:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f023 0207 	bic.w	r2, r3, #7
 80035b8:	4909      	ldr	r1, [pc, #36]	@ (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035c0:	4b07      	ldr	r3, [pc, #28]	@ (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d001      	beq.n	80035d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40022000 	.word	0x40022000

080035e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035ec:	2300      	movs	r3, #0
 80035ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035f0:	2300      	movs	r3, #0
 80035f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d041      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003604:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003608:	d02a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800360a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800360e:	d824      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003610:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003614:	d008      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003616:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800361a:	d81e      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003620:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003624:	d010      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003626:	e018      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003628:	4b86      	ldr	r3, [pc, #536]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4a85      	ldr	r2, [pc, #532]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003632:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003634:	e015      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3304      	adds	r3, #4
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f000 facd 	bl	8003bdc <RCCEx_PLLSAI1_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003646:	e00c      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3320      	adds	r3, #32
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fbb6 	bl	8003dc0 <RCCEx_PLLSAI2_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003658:	e003      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	74fb      	strb	r3, [r7, #19]
      break;
 800365e:	e000      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003662:	7cfb      	ldrb	r3, [r7, #19]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003668:	4b76      	ldr	r3, [pc, #472]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003676:	4973      	ldr	r1, [pc, #460]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800367e:	e001      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d041      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003694:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003698:	d02a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800369a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800369e:	d824      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036a4:	d008      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036aa:	d81e      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036b4:	d010      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036b6:	e018      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036b8:	4b62      	ldr	r3, [pc, #392]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a61      	ldr	r2, [pc, #388]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036c4:	e015      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fa85 	bl	8003bdc <RCCEx_PLLSAI1_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036d6:	e00c      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3320      	adds	r3, #32
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fb6e 	bl	8003dc0 <RCCEx_PLLSAI2_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036e8:	e003      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	74fb      	strb	r3, [r7, #19]
      break;
 80036ee:	e000      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036f2:	7cfb      	ldrb	r3, [r7, #19]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036f8:	4b52      	ldr	r3, [pc, #328]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003706:	494f      	ldr	r1, [pc, #316]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800370e:	e001      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003710:	7cfb      	ldrb	r3, [r7, #19]
 8003712:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80a0 	beq.w	8003862 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003722:	2300      	movs	r3, #0
 8003724:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003726:	4b47      	ldr	r3, [pc, #284]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003736:	2300      	movs	r3, #0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00d      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373c:	4b41      	ldr	r3, [pc, #260]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003740:	4a40      	ldr	r2, [pc, #256]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003746:	6593      	str	r3, [r2, #88]	@ 0x58
 8003748:	4b3e      	ldr	r3, [pc, #248]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003754:	2301      	movs	r3, #1
 8003756:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003758:	4b3b      	ldr	r3, [pc, #236]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a3a      	ldr	r2, [pc, #232]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800375e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003762:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003764:	f7fd fe00 	bl	8001368 <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800376a:	e009      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376c:	f7fd fdfc 	bl	8001368 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d902      	bls.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	74fb      	strb	r3, [r7, #19]
        break;
 800377e:	e005      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003780:	4b31      	ldr	r3, [pc, #196]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ef      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d15c      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003792:	4b2c      	ldr	r3, [pc, #176]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003798:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800379c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01f      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d019      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037b0:	4b24      	ldr	r3, [pc, #144]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037bc:	4b21      	ldr	r3, [pc, #132]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c2:	4a20      	ldr	r2, [pc, #128]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037dc:	4a19      	ldr	r2, [pc, #100]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d016      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ee:	f7fd fdbb 	bl	8001368 <HAL_GetTick>
 80037f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f4:	e00b      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f6:	f7fd fdb7 	bl	8001368 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003804:	4293      	cmp	r3, r2
 8003806:	d902      	bls.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	74fb      	strb	r3, [r7, #19]
            break;
 800380c:	e006      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380e:	4b0d      	ldr	r3, [pc, #52]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0ec      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800381c:	7cfb      	ldrb	r3, [r7, #19]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10c      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003822:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003828:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003832:	4904      	ldr	r1, [pc, #16]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800383a:	e009      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800383c:	7cfb      	ldrb	r3, [r7, #19]
 800383e:	74bb      	strb	r3, [r7, #18]
 8003840:	e006      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000
 8003848:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003850:	7c7b      	ldrb	r3, [r7, #17]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d105      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003856:	4ba6      	ldr	r3, [pc, #664]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385a:	4aa5      	ldr	r2, [pc, #660]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800385c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003860:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800386e:	4ba0      	ldr	r3, [pc, #640]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003874:	f023 0203 	bic.w	r2, r3, #3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800387c:	499c      	ldr	r1, [pc, #624]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003890:	4b97      	ldr	r3, [pc, #604]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003896:	f023 020c 	bic.w	r2, r3, #12
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389e:	4994      	ldr	r1, [pc, #592]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038b2:	4b8f      	ldr	r3, [pc, #572]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c0:	498b      	ldr	r1, [pc, #556]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038d4:	4b86      	ldr	r3, [pc, #536]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e2:	4983      	ldr	r1, [pc, #524]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038f6:	4b7e      	ldr	r3, [pc, #504]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003904:	497a      	ldr	r1, [pc, #488]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003918:	4b75      	ldr	r3, [pc, #468]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003926:	4972      	ldr	r1, [pc, #456]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800393a:	4b6d      	ldr	r3, [pc, #436]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003940:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003948:	4969      	ldr	r1, [pc, #420]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800395c:	4b64      	ldr	r3, [pc, #400]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003962:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800396a:	4961      	ldr	r1, [pc, #388]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800397e:	4b5c      	ldr	r3, [pc, #368]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003984:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800398c:	4958      	ldr	r1, [pc, #352]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039a0:	4b53      	ldr	r3, [pc, #332]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ae:	4950      	ldr	r1, [pc, #320]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039c2:	4b4b      	ldr	r3, [pc, #300]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d0:	4947      	ldr	r1, [pc, #284]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039e4:	4b42      	ldr	r3, [pc, #264]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039ea:	f023 0203 	bic.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f2:	493f      	ldr	r1, [pc, #252]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d028      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a06:	4b3a      	ldr	r3, [pc, #232]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a14:	4936      	ldr	r1, [pc, #216]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a24:	d106      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a26:	4b32      	ldr	r3, [pc, #200]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	4a31      	ldr	r2, [pc, #196]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a30:	60d3      	str	r3, [r2, #12]
 8003a32:	e011      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3304      	adds	r3, #4
 8003a42:	2101      	movs	r1, #1
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 f8c9 	bl	8003bdc <RCCEx_PLLSAI1_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a4e:	7cfb      	ldrb	r3, [r7, #19]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003a54:	7cfb      	ldrb	r3, [r7, #19]
 8003a56:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d028      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a64:	4b22      	ldr	r3, [pc, #136]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a72:	491f      	ldr	r1, [pc, #124]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a82:	d106      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a84:	4b1a      	ldr	r3, [pc, #104]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4a19      	ldr	r2, [pc, #100]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a8e:	60d3      	str	r3, [r2, #12]
 8003a90:	e011      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a9a:	d10c      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f89a 	bl	8003bdc <RCCEx_PLLSAI1_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aac:	7cfb      	ldrb	r3, [r7, #19]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003ab2:	7cfb      	ldrb	r3, [r7, #19]
 8003ab4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d02a      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ad0:	4907      	ldr	r1, [pc, #28]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003adc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ae0:	d108      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae2:	4b03      	ldr	r3, [pc, #12]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	4a02      	ldr	r2, [pc, #8]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ae8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aec:	60d3      	str	r3, [r2, #12]
 8003aee:	e013      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003af0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003af8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3304      	adds	r3, #4
 8003b02:	2101      	movs	r1, #1
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 f869 	bl	8003bdc <RCCEx_PLLSAI1_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b0e:	7cfb      	ldrb	r3, [r7, #19]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003b14:	7cfb      	ldrb	r3, [r7, #19]
 8003b16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d02f      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b24:	4b2c      	ldr	r3, [pc, #176]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b32:	4929      	ldr	r1, [pc, #164]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b42:	d10d      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3304      	adds	r3, #4
 8003b48:	2102      	movs	r1, #2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 f846 	bl	8003bdc <RCCEx_PLLSAI1_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d014      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003b5a:	7cfb      	ldrb	r3, [r7, #19]
 8003b5c:	74bb      	strb	r3, [r7, #18]
 8003b5e:	e011      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b68:	d10c      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3320      	adds	r3, #32
 8003b6e:	2102      	movs	r1, #2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 f925 	bl	8003dc0 <RCCEx_PLLSAI2_Config>
 8003b76:	4603      	mov	r3, r0
 8003b78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b7a:	7cfb      	ldrb	r3, [r7, #19]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003b80:	7cfb      	ldrb	r3, [r7, #19]
 8003b82:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00b      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b90:	4b11      	ldr	r3, [pc, #68]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b96:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ba0:	490d      	ldr	r1, [pc, #52]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00b      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bb4:	4b08      	ldr	r3, [pc, #32]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bc4:	4904      	ldr	r1, [pc, #16]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bcc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40021000 	.word	0x40021000

08003bdc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bea:	4b74      	ldr	r3, [pc, #464]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d018      	beq.n	8003c28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bf6:	4b71      	ldr	r3, [pc, #452]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f003 0203 	and.w	r2, r3, #3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d10d      	bne.n	8003c22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
       ||
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c0e:	4b6b      	ldr	r3, [pc, #428]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	091b      	lsrs	r3, r3, #4
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
       ||
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d047      	beq.n	8003cb2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
 8003c26:	e044      	b.n	8003cb2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d018      	beq.n	8003c62 <RCCEx_PLLSAI1_Config+0x86>
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d825      	bhi.n	8003c80 <RCCEx_PLLSAI1_Config+0xa4>
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d002      	beq.n	8003c3e <RCCEx_PLLSAI1_Config+0x62>
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d009      	beq.n	8003c50 <RCCEx_PLLSAI1_Config+0x74>
 8003c3c:	e020      	b.n	8003c80 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c3e:	4b5f      	ldr	r3, [pc, #380]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d11d      	bne.n	8003c86 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c4e:	e01a      	b.n	8003c86 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c50:	4b5a      	ldr	r3, [pc, #360]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d116      	bne.n	8003c8a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c60:	e013      	b.n	8003c8a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c62:	4b56      	ldr	r3, [pc, #344]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10f      	bne.n	8003c8e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c6e:	4b53      	ldr	r3, [pc, #332]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c7e:	e006      	b.n	8003c8e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
      break;
 8003c84:	e004      	b.n	8003c90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c86:	bf00      	nop
 8003c88:	e002      	b.n	8003c90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c8a:	bf00      	nop
 8003c8c:	e000      	b.n	8003c90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10d      	bne.n	8003cb2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c96:	4b49      	ldr	r3, [pc, #292]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6819      	ldr	r1, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	430b      	orrs	r3, r1
 8003cac:	4943      	ldr	r1, [pc, #268]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d17c      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003cb8:	4b40      	ldr	r3, [pc, #256]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a3f      	ldr	r2, [pc, #252]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003cc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc4:	f7fd fb50 	bl	8001368 <HAL_GetTick>
 8003cc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cca:	e009      	b.n	8003ce0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ccc:	f7fd fb4c 	bl	8001368 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d902      	bls.n	8003ce0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	73fb      	strb	r3, [r7, #15]
        break;
 8003cde:	e005      	b.n	8003cec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ce0:	4b36      	ldr	r3, [pc, #216]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1ef      	bne.n	8003ccc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d15f      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d110      	bne.n	8003d1a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cf8:	4b30      	ldr	r3, [pc, #192]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003d00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6892      	ldr	r2, [r2, #8]
 8003d08:	0211      	lsls	r1, r2, #8
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68d2      	ldr	r2, [r2, #12]
 8003d0e:	06d2      	lsls	r2, r2, #27
 8003d10:	430a      	orrs	r2, r1
 8003d12:	492a      	ldr	r1, [pc, #168]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	610b      	str	r3, [r1, #16]
 8003d18:	e027      	b.n	8003d6a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d112      	bne.n	8003d46 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d20:	4b26      	ldr	r3, [pc, #152]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003d28:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6892      	ldr	r2, [r2, #8]
 8003d30:	0211      	lsls	r1, r2, #8
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6912      	ldr	r2, [r2, #16]
 8003d36:	0852      	lsrs	r2, r2, #1
 8003d38:	3a01      	subs	r2, #1
 8003d3a:	0552      	lsls	r2, r2, #21
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	491f      	ldr	r1, [pc, #124]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	610b      	str	r3, [r1, #16]
 8003d44:	e011      	b.n	8003d6a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d46:	4b1d      	ldr	r3, [pc, #116]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003d4e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6892      	ldr	r2, [r2, #8]
 8003d56:	0211      	lsls	r1, r2, #8
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6952      	ldr	r2, [r2, #20]
 8003d5c:	0852      	lsrs	r2, r2, #1
 8003d5e:	3a01      	subs	r2, #1
 8003d60:	0652      	lsls	r2, r2, #25
 8003d62:	430a      	orrs	r2, r1
 8003d64:	4915      	ldr	r1, [pc, #84]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d6a:	4b14      	ldr	r3, [pc, #80]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a13      	ldr	r2, [pc, #76]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d74:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d76:	f7fd faf7 	bl	8001368 <HAL_GetTick>
 8003d7a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d7c:	e009      	b.n	8003d92 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d7e:	f7fd faf3 	bl	8001368 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d902      	bls.n	8003d92 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	73fb      	strb	r3, [r7, #15]
          break;
 8003d90:	e005      	b.n	8003d9e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d92:	4b0a      	ldr	r3, [pc, #40]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0ef      	beq.n	8003d7e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003da4:	4b05      	ldr	r3, [pc, #20]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	4903      	ldr	r1, [pc, #12]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40021000 	.word	0x40021000

08003dc0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dce:	4b69      	ldr	r3, [pc, #420]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d018      	beq.n	8003e0c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003dda:	4b66      	ldr	r3, [pc, #408]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f003 0203 	and.w	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d10d      	bne.n	8003e06 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
       ||
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003df2:	4b60      	ldr	r3, [pc, #384]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	091b      	lsrs	r3, r3, #4
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
       ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d047      	beq.n	8003e96 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
 8003e0a:	e044      	b.n	8003e96 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d018      	beq.n	8003e46 <RCCEx_PLLSAI2_Config+0x86>
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d825      	bhi.n	8003e64 <RCCEx_PLLSAI2_Config+0xa4>
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d002      	beq.n	8003e22 <RCCEx_PLLSAI2_Config+0x62>
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d009      	beq.n	8003e34 <RCCEx_PLLSAI2_Config+0x74>
 8003e20:	e020      	b.n	8003e64 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e22:	4b54      	ldr	r3, [pc, #336]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d11d      	bne.n	8003e6a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e32:	e01a      	b.n	8003e6a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e34:	4b4f      	ldr	r3, [pc, #316]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d116      	bne.n	8003e6e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e44:	e013      	b.n	8003e6e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e46:	4b4b      	ldr	r3, [pc, #300]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10f      	bne.n	8003e72 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e52:	4b48      	ldr	r3, [pc, #288]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e62:	e006      	b.n	8003e72 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
      break;
 8003e68:	e004      	b.n	8003e74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e002      	b.n	8003e74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e6e:	bf00      	nop
 8003e70:	e000      	b.n	8003e74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e72:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10d      	bne.n	8003e96 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6819      	ldr	r1, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	4938      	ldr	r1, [pc, #224]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d166      	bne.n	8003f6a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e9c:	4b35      	ldr	r3, [pc, #212]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a34      	ldr	r2, [pc, #208]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ea2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea8:	f7fd fa5e 	bl	8001368 <HAL_GetTick>
 8003eac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003eae:	e009      	b.n	8003ec4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003eb0:	f7fd fa5a 	bl	8001368 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d902      	bls.n	8003ec4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ec2:	e005      	b.n	8003ed0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1ef      	bne.n	8003eb0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d149      	bne.n	8003f6a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d110      	bne.n	8003efe <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003edc:	4b25      	ldr	r3, [pc, #148]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003ee4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6892      	ldr	r2, [r2, #8]
 8003eec:	0211      	lsls	r1, r2, #8
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	68d2      	ldr	r2, [r2, #12]
 8003ef2:	06d2      	lsls	r2, r2, #27
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	491f      	ldr	r1, [pc, #124]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	614b      	str	r3, [r1, #20]
 8003efc:	e011      	b.n	8003f22 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003efe:	4b1d      	ldr	r3, [pc, #116]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f06:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6892      	ldr	r2, [r2, #8]
 8003f0e:	0211      	lsls	r1, r2, #8
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6912      	ldr	r2, [r2, #16]
 8003f14:	0852      	lsrs	r2, r2, #1
 8003f16:	3a01      	subs	r2, #1
 8003f18:	0652      	lsls	r2, r2, #25
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	4915      	ldr	r1, [pc, #84]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f22:	4b14      	ldr	r3, [pc, #80]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a13      	ldr	r2, [pc, #76]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f2c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2e:	f7fd fa1b 	bl	8001368 <HAL_GetTick>
 8003f32:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f34:	e009      	b.n	8003f4a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f36:	f7fd fa17 	bl	8001368 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d902      	bls.n	8003f4a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	73fb      	strb	r3, [r7, #15]
          break;
 8003f48:	e005      	b.n	8003f56 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0ef      	beq.n	8003f36 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d106      	bne.n	8003f6a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f5c:	4b05      	ldr	r3, [pc, #20]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	4903      	ldr	r1, [pc, #12]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40021000 	.word	0x40021000

08003f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e049      	b.n	800401e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f841 	bl	8004026 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f000 f9e0 	bl	800437c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	d001      	beq.n	8004054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e04f      	b.n	80040f4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a23      	ldr	r2, [pc, #140]	@ (8004100 <HAL_TIM_Base_Start_IT+0xc4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01d      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x76>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800407e:	d018      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x76>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1f      	ldr	r2, [pc, #124]	@ (8004104 <HAL_TIM_Base_Start_IT+0xc8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x76>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1e      	ldr	r2, [pc, #120]	@ (8004108 <HAL_TIM_Base_Start_IT+0xcc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x76>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1c      	ldr	r2, [pc, #112]	@ (800410c <HAL_TIM_Base_Start_IT+0xd0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d009      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x76>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004110 <HAL_TIM_Base_Start_IT+0xd4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x76>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a19      	ldr	r2, [pc, #100]	@ (8004114 <HAL_TIM_Base_Start_IT+0xd8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d115      	bne.n	80040de <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	4b17      	ldr	r3, [pc, #92]	@ (8004118 <HAL_TIM_Base_Start_IT+0xdc>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b06      	cmp	r3, #6
 80040c2:	d015      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0xb4>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ca:	d011      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040dc:	e008      	b.n	80040f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0201 	orr.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	e000      	b.n	80040f2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800
 800410c:	40000c00 	.word	0x40000c00
 8004110:	40013400 	.word	0x40013400
 8004114:	40014000 	.word	0x40014000
 8004118:	00010007 	.word	0x00010007

0800411c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d020      	beq.n	8004180 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01b      	beq.n	8004180 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0202 	mvn.w	r2, #2
 8004150:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f8e9 	bl	800433e <HAL_TIM_IC_CaptureCallback>
 800416c:	e005      	b.n	800417a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f8db 	bl	800432a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f8ec 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	d020      	beq.n	80041cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01b      	beq.n	80041cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0204 	mvn.w	r2, #4
 800419c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2202      	movs	r2, #2
 80041a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f8c3 	bl	800433e <HAL_TIM_IC_CaptureCallback>
 80041b8:	e005      	b.n	80041c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f8b5 	bl	800432a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f8c6 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d020      	beq.n	8004218 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01b      	beq.n	8004218 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0208 	mvn.w	r2, #8
 80041e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2204      	movs	r2, #4
 80041ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f89d 	bl	800433e <HAL_TIM_IC_CaptureCallback>
 8004204:	e005      	b.n	8004212 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f88f 	bl	800432a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f8a0 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b00      	cmp	r3, #0
 8004220:	d020      	beq.n	8004264 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01b      	beq.n	8004264 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0210 	mvn.w	r2, #16
 8004234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2208      	movs	r2, #8
 800423a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f877 	bl	800433e <HAL_TIM_IC_CaptureCallback>
 8004250:	e005      	b.n	800425e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f869 	bl	800432a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f87a 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00c      	beq.n	8004288 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d007      	beq.n	8004288 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0201 	mvn.w	r2, #1
 8004280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fc fdae 	bl	8000de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428e:	2b00      	cmp	r3, #0
 8004290:	d104      	bne.n	800429c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00c      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d007      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80042ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f913 	bl	80044dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00c      	beq.n	80042da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80042d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f90b 	bl	80044f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00c      	beq.n	80042fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d007      	beq.n	80042fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f834 	bl	8004366 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00c      	beq.n	8004322 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	d007      	beq.n	8004322 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f06f 0220 	mvn.w	r2, #32
 800431a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f8d3 	bl	80044c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a46      	ldr	r2, [pc, #280]	@ (80044a8 <TIM_Base_SetConfig+0x12c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d013      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800439a:	d00f      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a43      	ldr	r2, [pc, #268]	@ (80044ac <TIM_Base_SetConfig+0x130>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00b      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a42      	ldr	r2, [pc, #264]	@ (80044b0 <TIM_Base_SetConfig+0x134>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d007      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a41      	ldr	r2, [pc, #260]	@ (80044b4 <TIM_Base_SetConfig+0x138>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a40      	ldr	r2, [pc, #256]	@ (80044b8 <TIM_Base_SetConfig+0x13c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d108      	bne.n	80043ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a35      	ldr	r2, [pc, #212]	@ (80044a8 <TIM_Base_SetConfig+0x12c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d01f      	beq.n	8004416 <TIM_Base_SetConfig+0x9a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043dc:	d01b      	beq.n	8004416 <TIM_Base_SetConfig+0x9a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a32      	ldr	r2, [pc, #200]	@ (80044ac <TIM_Base_SetConfig+0x130>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d017      	beq.n	8004416 <TIM_Base_SetConfig+0x9a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a31      	ldr	r2, [pc, #196]	@ (80044b0 <TIM_Base_SetConfig+0x134>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <TIM_Base_SetConfig+0x9a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a30      	ldr	r2, [pc, #192]	@ (80044b4 <TIM_Base_SetConfig+0x138>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00f      	beq.n	8004416 <TIM_Base_SetConfig+0x9a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a2f      	ldr	r2, [pc, #188]	@ (80044b8 <TIM_Base_SetConfig+0x13c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00b      	beq.n	8004416 <TIM_Base_SetConfig+0x9a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a2e      	ldr	r2, [pc, #184]	@ (80044bc <TIM_Base_SetConfig+0x140>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d007      	beq.n	8004416 <TIM_Base_SetConfig+0x9a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a2d      	ldr	r2, [pc, #180]	@ (80044c0 <TIM_Base_SetConfig+0x144>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d003      	beq.n	8004416 <TIM_Base_SetConfig+0x9a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a2c      	ldr	r2, [pc, #176]	@ (80044c4 <TIM_Base_SetConfig+0x148>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d108      	bne.n	8004428 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800441c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a16      	ldr	r2, [pc, #88]	@ (80044a8 <TIM_Base_SetConfig+0x12c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00f      	beq.n	8004474 <TIM_Base_SetConfig+0xf8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a18      	ldr	r2, [pc, #96]	@ (80044b8 <TIM_Base_SetConfig+0x13c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00b      	beq.n	8004474 <TIM_Base_SetConfig+0xf8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a17      	ldr	r2, [pc, #92]	@ (80044bc <TIM_Base_SetConfig+0x140>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d007      	beq.n	8004474 <TIM_Base_SetConfig+0xf8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a16      	ldr	r2, [pc, #88]	@ (80044c0 <TIM_Base_SetConfig+0x144>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_Base_SetConfig+0xf8>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a15      	ldr	r2, [pc, #84]	@ (80044c4 <TIM_Base_SetConfig+0x148>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d103      	bne.n	800447c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	d105      	bne.n	800449a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f023 0201 	bic.w	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	611a      	str	r2, [r3, #16]
  }
}
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40012c00 	.word	0x40012c00
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40000800 	.word	0x40000800
 80044b4:	40000c00 	.word	0x40000c00
 80044b8:	40013400 	.word	0x40013400
 80044bc:	40014000 	.word	0x40014000
 80044c0:	40014400 	.word	0x40014400
 80044c4:	40014800 	.word	0x40014800

080044c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e040      	b.n	8004598 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fc fda0 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2224      	movs	r2, #36	@ 0x24
 8004530:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0201 	bic.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fe52 	bl	80051f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fb97 	bl	8004c84 <UART_SetConfig>
 8004556:	4603      	mov	r3, r0
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e01b      	b.n	8004598 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800456e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800457e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fed1 	bl	8005338 <UART_CheckIdleState>
 8004596:	4603      	mov	r3, r0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	@ 0x28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	4613      	mov	r3, r2
 80045ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d137      	bne.n	8004628 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <HAL_UART_Receive_IT+0x24>
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e030      	b.n	800462a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a18      	ldr	r2, [pc, #96]	@ (8004634 <HAL_UART_Receive_IT+0x94>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d01f      	beq.n	8004618 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d018      	beq.n	8004618 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	e853 3f00 	ldrex	r3, [r3]
 80045f2:	613b      	str	r3, [r7, #16]
   return(result);
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	461a      	mov	r2, r3
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	623b      	str	r3, [r7, #32]
 8004606:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	69f9      	ldr	r1, [r7, #28]
 800460a:	6a3a      	ldr	r2, [r7, #32]
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	61bb      	str	r3, [r7, #24]
   return(result);
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e6      	bne.n	80045e6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	461a      	mov	r2, r3
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 ffa0 	bl	8005564 <UART_Start_Receive_IT>
 8004624:	4603      	mov	r3, r0
 8004626:	e000      	b.n	800462a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004628:	2302      	movs	r3, #2
  }
}
 800462a:	4618      	mov	r0, r3
 800462c:	3728      	adds	r7, #40	@ 0x28
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40008000 	.word	0x40008000

08004638 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b0ba      	sub	sp, #232	@ 0xe8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800465e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004662:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004666:	4013      	ands	r3, r2
 8004668:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800466c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d115      	bne.n	80046a0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00f      	beq.n	80046a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b00      	cmp	r3, #0
 800468a:	d009      	beq.n	80046a0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 82ca 	beq.w	8004c2a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	4798      	blx	r3
      }
      return;
 800469e:	e2c4      	b.n	8004c2a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80046a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 8117 	beq.w	80048d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80046b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80046ba:	4b85      	ldr	r3, [pc, #532]	@ (80048d0 <HAL_UART_IRQHandler+0x298>)
 80046bc:	4013      	ands	r3, r2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 810a 	beq.w	80048d8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d011      	beq.n	80046f4 <HAL_UART_IRQHandler+0xbc>
 80046d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2201      	movs	r2, #1
 80046e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046ea:	f043 0201 	orr.w	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d011      	beq.n	8004724 <HAL_UART_IRQHandler+0xec>
 8004700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00b      	beq.n	8004724 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2202      	movs	r2, #2
 8004712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800471a:	f043 0204 	orr.w	r2, r3, #4
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d011      	beq.n	8004754 <HAL_UART_IRQHandler+0x11c>
 8004730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00b      	beq.n	8004754 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2204      	movs	r2, #4
 8004742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800474a:	f043 0202 	orr.w	r2, r3, #2
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b00      	cmp	r3, #0
 800475e:	d017      	beq.n	8004790 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b00      	cmp	r3, #0
 800476a:	d105      	bne.n	8004778 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800476c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004770:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00b      	beq.n	8004790 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2208      	movs	r2, #8
 800477e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004786:	f043 0208 	orr.w	r2, r3, #8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004798:	2b00      	cmp	r3, #0
 800479a:	d012      	beq.n	80047c2 <HAL_UART_IRQHandler+0x18a>
 800479c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00c      	beq.n	80047c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047b8:	f043 0220 	orr.w	r2, r3, #32
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8230 	beq.w	8004c2e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00d      	beq.n	80047f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d007      	beq.n	80047f6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800480a:	2b40      	cmp	r3, #64	@ 0x40
 800480c:	d005      	beq.n	800481a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800480e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004812:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004816:	2b00      	cmp	r3, #0
 8004818:	d04f      	beq.n	80048ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 ff68 	bl	80056f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482a:	2b40      	cmp	r3, #64	@ 0x40
 800482c:	d141      	bne.n	80048b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3308      	adds	r3, #8
 8004834:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004844:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004848:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800484c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3308      	adds	r3, #8
 8004856:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800485a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800485e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004866:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1d9      	bne.n	800482e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800487e:	2b00      	cmp	r3, #0
 8004880:	d013      	beq.n	80048aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004886:	4a13      	ldr	r2, [pc, #76]	@ (80048d4 <HAL_UART_IRQHandler+0x29c>)
 8004888:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800488e:	4618      	mov	r0, r3
 8004890:	f7fc ff92 	bl	80017b8 <HAL_DMA_Abort_IT>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d017      	beq.n	80048ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800489e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80048a4:	4610      	mov	r0, r2
 80048a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a8:	e00f      	b.n	80048ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f9d4 	bl	8004c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b0:	e00b      	b.n	80048ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f9d0 	bl	8004c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b8:	e007      	b.n	80048ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f9cc 	bl	8004c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80048c8:	e1b1      	b.n	8004c2e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ca:	bf00      	nop
    return;
 80048cc:	e1af      	b.n	8004c2e <HAL_UART_IRQHandler+0x5f6>
 80048ce:	bf00      	nop
 80048d0:	04000120 	.word	0x04000120
 80048d4:	080057b9 	.word	0x080057b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048dc:	2b01      	cmp	r3, #1
 80048de:	f040 816a 	bne.w	8004bb6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 8163 	beq.w	8004bb6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 815c 	beq.w	8004bb6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2210      	movs	r2, #16
 8004904:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004910:	2b40      	cmp	r3, #64	@ 0x40
 8004912:	f040 80d4 	bne.w	8004abe <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004922:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 80ad 	beq.w	8004a86 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004932:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004936:	429a      	cmp	r2, r3
 8004938:	f080 80a5 	bcs.w	8004a86 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004942:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 8086 	bne.w	8004a64 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800496c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004974:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004982:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004986:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800498e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800499a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1da      	bne.n	8004958 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3308      	adds	r3, #8
 80049a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80049b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049b4:	f023 0301 	bic.w	r3, r3, #1
 80049b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3308      	adds	r3, #8
 80049c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e1      	bne.n	80049a2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3308      	adds	r3, #8
 80049e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80049ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3308      	adds	r3, #8
 80049fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a0a:	e841 2300 	strex	r3, r2, [r1]
 8004a0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e3      	bne.n	80049de <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a34:	f023 0310 	bic.w	r3, r3, #16
 8004a38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e4      	bne.n	8004a24 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fc fe6c 	bl	800173c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f8f4 	bl	8004c6c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004a84:	e0d5      	b.n	8004c32 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a90:	429a      	cmp	r2, r3
 8004a92:	f040 80ce 	bne.w	8004c32 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b20      	cmp	r3, #32
 8004aa4:	f040 80c5 	bne.w	8004c32 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f8d8 	bl	8004c6c <HAL_UARTEx_RxEventCallback>
      return;
 8004abc:	e0b9      	b.n	8004c32 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 80ab 	beq.w	8004c36 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80a6 	beq.w	8004c36 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004afa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004afe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e4      	bne.n	8004aea <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3308      	adds	r3, #8
 8004b26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	f023 0301 	bic.w	r3, r3, #1
 8004b36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	3308      	adds	r3, #8
 8004b40:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b44:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b4c:	e841 2300 	strex	r3, r2, [r1]
 8004b50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1e3      	bne.n	8004b20 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f023 0310 	bic.w	r3, r3, #16
 8004b80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b8e:	61fb      	str	r3, [r7, #28]
 8004b90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	69b9      	ldr	r1, [r7, #24]
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	617b      	str	r3, [r7, #20]
   return(result);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e4      	bne.n	8004b6c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bac:	4619      	mov	r1, r3
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f85c 	bl	8004c6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bb4:	e03f      	b.n	8004c36 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00e      	beq.n	8004be0 <HAL_UART_IRQHandler+0x5a8>
 8004bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d008      	beq.n	8004be0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004bd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 ffe9 	bl	8005bb0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bde:	e02d      	b.n	8004c3c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00e      	beq.n	8004c0a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01c      	beq.n	8004c3a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	4798      	blx	r3
    }
    return;
 8004c08:	e017      	b.n	8004c3a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d012      	beq.n	8004c3c <HAL_UART_IRQHandler+0x604>
 8004c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00c      	beq.n	8004c3c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fdde 	bl	80057e4 <UART_EndTransmit_IT>
    return;
 8004c28:	e008      	b.n	8004c3c <HAL_UART_IRQHandler+0x604>
      return;
 8004c2a:	bf00      	nop
 8004c2c:	e006      	b.n	8004c3c <HAL_UART_IRQHandler+0x604>
    return;
 8004c2e:	bf00      	nop
 8004c30:	e004      	b.n	8004c3c <HAL_UART_IRQHandler+0x604>
      return;
 8004c32:	bf00      	nop
 8004c34:	e002      	b.n	8004c3c <HAL_UART_IRQHandler+0x604>
      return;
 8004c36:	bf00      	nop
 8004c38:	e000      	b.n	8004c3c <HAL_UART_IRQHandler+0x604>
    return;
 8004c3a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004c3c:	37e8      	adds	r7, #232	@ 0xe8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop

08004c44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	460b      	mov	r3, r1
 8004c76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c88:	b08a      	sub	sp, #40	@ 0x28
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	4ba4      	ldr	r3, [pc, #656]	@ (8004f44 <UART_SetConfig+0x2c0>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	6812      	ldr	r2, [r2, #0]
 8004cba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a99      	ldr	r2, [pc, #612]	@ (8004f48 <UART_SetConfig+0x2c4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d004      	beq.n	8004cf0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cec:	4313      	orrs	r3, r2
 8004cee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d00:	430a      	orrs	r2, r1
 8004d02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a90      	ldr	r2, [pc, #576]	@ (8004f4c <UART_SetConfig+0x2c8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d126      	bne.n	8004d5c <UART_SetConfig+0xd8>
 8004d0e:	4b90      	ldr	r3, [pc, #576]	@ (8004f50 <UART_SetConfig+0x2cc>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d81b      	bhi.n	8004d54 <UART_SetConfig+0xd0>
 8004d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d24 <UART_SetConfig+0xa0>)
 8004d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d22:	bf00      	nop
 8004d24:	08004d35 	.word	0x08004d35
 8004d28:	08004d45 	.word	0x08004d45
 8004d2c:	08004d3d 	.word	0x08004d3d
 8004d30:	08004d4d 	.word	0x08004d4d
 8004d34:	2301      	movs	r3, #1
 8004d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d3a:	e116      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d42:	e112      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004d44:	2304      	movs	r3, #4
 8004d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d4a:	e10e      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004d4c:	2308      	movs	r3, #8
 8004d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d52:	e10a      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004d54:	2310      	movs	r3, #16
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d5a:	e106      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a7c      	ldr	r2, [pc, #496]	@ (8004f54 <UART_SetConfig+0x2d0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d138      	bne.n	8004dd8 <UART_SetConfig+0x154>
 8004d66:	4b7a      	ldr	r3, [pc, #488]	@ (8004f50 <UART_SetConfig+0x2cc>)
 8004d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6c:	f003 030c 	and.w	r3, r3, #12
 8004d70:	2b0c      	cmp	r3, #12
 8004d72:	d82d      	bhi.n	8004dd0 <UART_SetConfig+0x14c>
 8004d74:	a201      	add	r2, pc, #4	@ (adr r2, 8004d7c <UART_SetConfig+0xf8>)
 8004d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7a:	bf00      	nop
 8004d7c:	08004db1 	.word	0x08004db1
 8004d80:	08004dd1 	.word	0x08004dd1
 8004d84:	08004dd1 	.word	0x08004dd1
 8004d88:	08004dd1 	.word	0x08004dd1
 8004d8c:	08004dc1 	.word	0x08004dc1
 8004d90:	08004dd1 	.word	0x08004dd1
 8004d94:	08004dd1 	.word	0x08004dd1
 8004d98:	08004dd1 	.word	0x08004dd1
 8004d9c:	08004db9 	.word	0x08004db9
 8004da0:	08004dd1 	.word	0x08004dd1
 8004da4:	08004dd1 	.word	0x08004dd1
 8004da8:	08004dd1 	.word	0x08004dd1
 8004dac:	08004dc9 	.word	0x08004dc9
 8004db0:	2300      	movs	r3, #0
 8004db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004db6:	e0d8      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004db8:	2302      	movs	r3, #2
 8004dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dbe:	e0d4      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004dc0:	2304      	movs	r3, #4
 8004dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dc6:	e0d0      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004dc8:	2308      	movs	r3, #8
 8004dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dce:	e0cc      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004dd0:	2310      	movs	r3, #16
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dd6:	e0c8      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a5e      	ldr	r2, [pc, #376]	@ (8004f58 <UART_SetConfig+0x2d4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d125      	bne.n	8004e2e <UART_SetConfig+0x1aa>
 8004de2:	4b5b      	ldr	r3, [pc, #364]	@ (8004f50 <UART_SetConfig+0x2cc>)
 8004de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004dec:	2b30      	cmp	r3, #48	@ 0x30
 8004dee:	d016      	beq.n	8004e1e <UART_SetConfig+0x19a>
 8004df0:	2b30      	cmp	r3, #48	@ 0x30
 8004df2:	d818      	bhi.n	8004e26 <UART_SetConfig+0x1a2>
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d00a      	beq.n	8004e0e <UART_SetConfig+0x18a>
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d814      	bhi.n	8004e26 <UART_SetConfig+0x1a2>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <UART_SetConfig+0x182>
 8004e00:	2b10      	cmp	r3, #16
 8004e02:	d008      	beq.n	8004e16 <UART_SetConfig+0x192>
 8004e04:	e00f      	b.n	8004e26 <UART_SetConfig+0x1a2>
 8004e06:	2300      	movs	r3, #0
 8004e08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e0c:	e0ad      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e14:	e0a9      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e16:	2304      	movs	r3, #4
 8004e18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e1c:	e0a5      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e1e:	2308      	movs	r3, #8
 8004e20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e24:	e0a1      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e26:	2310      	movs	r3, #16
 8004e28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e2c:	e09d      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a4a      	ldr	r2, [pc, #296]	@ (8004f5c <UART_SetConfig+0x2d8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d125      	bne.n	8004e84 <UART_SetConfig+0x200>
 8004e38:	4b45      	ldr	r3, [pc, #276]	@ (8004f50 <UART_SetConfig+0x2cc>)
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e42:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e44:	d016      	beq.n	8004e74 <UART_SetConfig+0x1f0>
 8004e46:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e48:	d818      	bhi.n	8004e7c <UART_SetConfig+0x1f8>
 8004e4a:	2b80      	cmp	r3, #128	@ 0x80
 8004e4c:	d00a      	beq.n	8004e64 <UART_SetConfig+0x1e0>
 8004e4e:	2b80      	cmp	r3, #128	@ 0x80
 8004e50:	d814      	bhi.n	8004e7c <UART_SetConfig+0x1f8>
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <UART_SetConfig+0x1d8>
 8004e56:	2b40      	cmp	r3, #64	@ 0x40
 8004e58:	d008      	beq.n	8004e6c <UART_SetConfig+0x1e8>
 8004e5a:	e00f      	b.n	8004e7c <UART_SetConfig+0x1f8>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e62:	e082      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e64:	2302      	movs	r3, #2
 8004e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e6a:	e07e      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e6c:	2304      	movs	r3, #4
 8004e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e72:	e07a      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e74:	2308      	movs	r3, #8
 8004e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e7a:	e076      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e82:	e072      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a35      	ldr	r2, [pc, #212]	@ (8004f60 <UART_SetConfig+0x2dc>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d12a      	bne.n	8004ee4 <UART_SetConfig+0x260>
 8004e8e:	4b30      	ldr	r3, [pc, #192]	@ (8004f50 <UART_SetConfig+0x2cc>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e9c:	d01a      	beq.n	8004ed4 <UART_SetConfig+0x250>
 8004e9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ea2:	d81b      	bhi.n	8004edc <UART_SetConfig+0x258>
 8004ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ea8:	d00c      	beq.n	8004ec4 <UART_SetConfig+0x240>
 8004eaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eae:	d815      	bhi.n	8004edc <UART_SetConfig+0x258>
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <UART_SetConfig+0x238>
 8004eb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eb8:	d008      	beq.n	8004ecc <UART_SetConfig+0x248>
 8004eba:	e00f      	b.n	8004edc <UART_SetConfig+0x258>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ec2:	e052      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eca:	e04e      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004ecc:	2304      	movs	r3, #4
 8004ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ed2:	e04a      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004ed4:	2308      	movs	r3, #8
 8004ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eda:	e046      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004edc:	2310      	movs	r3, #16
 8004ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee2:	e042      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a17      	ldr	r2, [pc, #92]	@ (8004f48 <UART_SetConfig+0x2c4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d13a      	bne.n	8004f64 <UART_SetConfig+0x2e0>
 8004eee:	4b18      	ldr	r3, [pc, #96]	@ (8004f50 <UART_SetConfig+0x2cc>)
 8004ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ef8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004efc:	d01a      	beq.n	8004f34 <UART_SetConfig+0x2b0>
 8004efe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f02:	d81b      	bhi.n	8004f3c <UART_SetConfig+0x2b8>
 8004f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f08:	d00c      	beq.n	8004f24 <UART_SetConfig+0x2a0>
 8004f0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f0e:	d815      	bhi.n	8004f3c <UART_SetConfig+0x2b8>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <UART_SetConfig+0x298>
 8004f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f18:	d008      	beq.n	8004f2c <UART_SetConfig+0x2a8>
 8004f1a:	e00f      	b.n	8004f3c <UART_SetConfig+0x2b8>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f22:	e022      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004f24:	2302      	movs	r3, #2
 8004f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2a:	e01e      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f32:	e01a      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004f34:	2308      	movs	r3, #8
 8004f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f3a:	e016      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f42:	e012      	b.n	8004f6a <UART_SetConfig+0x2e6>
 8004f44:	efff69f3 	.word	0xefff69f3
 8004f48:	40008000 	.word	0x40008000
 8004f4c:	40013800 	.word	0x40013800
 8004f50:	40021000 	.word	0x40021000
 8004f54:	40004400 	.word	0x40004400
 8004f58:	40004800 	.word	0x40004800
 8004f5c:	40004c00 	.word	0x40004c00
 8004f60:	40005000 	.word	0x40005000
 8004f64:	2310      	movs	r3, #16
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a9f      	ldr	r2, [pc, #636]	@ (80051ec <UART_SetConfig+0x568>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d17a      	bne.n	800506a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d824      	bhi.n	8004fc6 <UART_SetConfig+0x342>
 8004f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f84 <UART_SetConfig+0x300>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004fa9 	.word	0x08004fa9
 8004f88:	08004fc7 	.word	0x08004fc7
 8004f8c:	08004fb1 	.word	0x08004fb1
 8004f90:	08004fc7 	.word	0x08004fc7
 8004f94:	08004fb7 	.word	0x08004fb7
 8004f98:	08004fc7 	.word	0x08004fc7
 8004f9c:	08004fc7 	.word	0x08004fc7
 8004fa0:	08004fc7 	.word	0x08004fc7
 8004fa4:	08004fbf 	.word	0x08004fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa8:	f7fe fa5e 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8004fac:	61f8      	str	r0, [r7, #28]
        break;
 8004fae:	e010      	b.n	8004fd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb0:	4b8f      	ldr	r3, [pc, #572]	@ (80051f0 <UART_SetConfig+0x56c>)
 8004fb2:	61fb      	str	r3, [r7, #28]
        break;
 8004fb4:	e00d      	b.n	8004fd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fb6:	f7fe f9bf 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 8004fba:	61f8      	str	r0, [r7, #28]
        break;
 8004fbc:	e009      	b.n	8004fd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fc2:	61fb      	str	r3, [r7, #28]
        break;
 8004fc4:	e005      	b.n	8004fd2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004fd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80fb 	beq.w	80051d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	4413      	add	r3, r2
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d305      	bcc.n	8004ff6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d903      	bls.n	8004ffe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ffc:	e0e8      	b.n	80051d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	2200      	movs	r2, #0
 8005002:	461c      	mov	r4, r3
 8005004:	4615      	mov	r5, r2
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	022b      	lsls	r3, r5, #8
 8005010:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005014:	0222      	lsls	r2, r4, #8
 8005016:	68f9      	ldr	r1, [r7, #12]
 8005018:	6849      	ldr	r1, [r1, #4]
 800501a:	0849      	lsrs	r1, r1, #1
 800501c:	2000      	movs	r0, #0
 800501e:	4688      	mov	r8, r1
 8005020:	4681      	mov	r9, r0
 8005022:	eb12 0a08 	adds.w	sl, r2, r8
 8005026:	eb43 0b09 	adc.w	fp, r3, r9
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	603b      	str	r3, [r7, #0]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005038:	4650      	mov	r0, sl
 800503a:	4659      	mov	r1, fp
 800503c:	f7fb f8d8 	bl	80001f0 <__aeabi_uldivmod>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4613      	mov	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800504e:	d308      	bcc.n	8005062 <UART_SetConfig+0x3de>
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005056:	d204      	bcs.n	8005062 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	60da      	str	r2, [r3, #12]
 8005060:	e0b6      	b.n	80051d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005068:	e0b2      	b.n	80051d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005072:	d15e      	bne.n	8005132 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005074:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005078:	2b08      	cmp	r3, #8
 800507a:	d828      	bhi.n	80050ce <UART_SetConfig+0x44a>
 800507c:	a201      	add	r2, pc, #4	@ (adr r2, 8005084 <UART_SetConfig+0x400>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	080050a9 	.word	0x080050a9
 8005088:	080050b1 	.word	0x080050b1
 800508c:	080050b9 	.word	0x080050b9
 8005090:	080050cf 	.word	0x080050cf
 8005094:	080050bf 	.word	0x080050bf
 8005098:	080050cf 	.word	0x080050cf
 800509c:	080050cf 	.word	0x080050cf
 80050a0:	080050cf 	.word	0x080050cf
 80050a4:	080050c7 	.word	0x080050c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a8:	f7fe f9de 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 80050ac:	61f8      	str	r0, [r7, #28]
        break;
 80050ae:	e014      	b.n	80050da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050b0:	f7fe f9f0 	bl	8003494 <HAL_RCC_GetPCLK2Freq>
 80050b4:	61f8      	str	r0, [r7, #28]
        break;
 80050b6:	e010      	b.n	80050da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050b8:	4b4d      	ldr	r3, [pc, #308]	@ (80051f0 <UART_SetConfig+0x56c>)
 80050ba:	61fb      	str	r3, [r7, #28]
        break;
 80050bc:	e00d      	b.n	80050da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050be:	f7fe f93b 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 80050c2:	61f8      	str	r0, [r7, #28]
        break;
 80050c4:	e009      	b.n	80050da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ca:	61fb      	str	r3, [r7, #28]
        break;
 80050cc:	e005      	b.n	80050da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d077      	beq.n	80051d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	005a      	lsls	r2, r3, #1
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	085b      	lsrs	r3, r3, #1
 80050ea:	441a      	add	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b0f      	cmp	r3, #15
 80050fa:	d916      	bls.n	800512a <UART_SetConfig+0x4a6>
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005102:	d212      	bcs.n	800512a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	b29b      	uxth	r3, r3
 8005108:	f023 030f 	bic.w	r3, r3, #15
 800510c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	085b      	lsrs	r3, r3, #1
 8005112:	b29b      	uxth	r3, r3
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	b29a      	uxth	r2, r3
 800511a:	8afb      	ldrh	r3, [r7, #22]
 800511c:	4313      	orrs	r3, r2
 800511e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	8afa      	ldrh	r2, [r7, #22]
 8005126:	60da      	str	r2, [r3, #12]
 8005128:	e052      	b.n	80051d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005130:	e04e      	b.n	80051d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005132:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005136:	2b08      	cmp	r3, #8
 8005138:	d827      	bhi.n	800518a <UART_SetConfig+0x506>
 800513a:	a201      	add	r2, pc, #4	@ (adr r2, 8005140 <UART_SetConfig+0x4bc>)
 800513c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005140:	08005165 	.word	0x08005165
 8005144:	0800516d 	.word	0x0800516d
 8005148:	08005175 	.word	0x08005175
 800514c:	0800518b 	.word	0x0800518b
 8005150:	0800517b 	.word	0x0800517b
 8005154:	0800518b 	.word	0x0800518b
 8005158:	0800518b 	.word	0x0800518b
 800515c:	0800518b 	.word	0x0800518b
 8005160:	08005183 	.word	0x08005183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005164:	f7fe f980 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8005168:	61f8      	str	r0, [r7, #28]
        break;
 800516a:	e014      	b.n	8005196 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800516c:	f7fe f992 	bl	8003494 <HAL_RCC_GetPCLK2Freq>
 8005170:	61f8      	str	r0, [r7, #28]
        break;
 8005172:	e010      	b.n	8005196 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005174:	4b1e      	ldr	r3, [pc, #120]	@ (80051f0 <UART_SetConfig+0x56c>)
 8005176:	61fb      	str	r3, [r7, #28]
        break;
 8005178:	e00d      	b.n	8005196 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800517a:	f7fe f8dd 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 800517e:	61f8      	str	r0, [r7, #28]
        break;
 8005180:	e009      	b.n	8005196 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005186:	61fb      	str	r3, [r7, #28]
        break;
 8005188:	e005      	b.n	8005196 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005194:	bf00      	nop
    }

    if (pclk != 0U)
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d019      	beq.n	80051d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	085a      	lsrs	r2, r3, #1
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	441a      	add	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	2b0f      	cmp	r3, #15
 80051b4:	d909      	bls.n	80051ca <UART_SetConfig+0x546>
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051bc:	d205      	bcs.n	80051ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60da      	str	r2, [r3, #12]
 80051c8:	e002      	b.n	80051d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80051dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3728      	adds	r7, #40	@ 0x28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ea:	bf00      	nop
 80051ec:	40008000 	.word	0x40008000
 80051f0:	00f42400 	.word	0x00f42400

080051f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01a      	beq.n	800530a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052f2:	d10a      	bne.n	800530a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	605a      	str	r2, [r3, #4]
  }
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b098      	sub	sp, #96	@ 0x60
 800533c:	af02      	add	r7, sp, #8
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005348:	f7fc f80e 	bl	8001368 <HAL_GetTick>
 800534c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b08      	cmp	r3, #8
 800535a:	d12e      	bne.n	80053ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800535c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005364:	2200      	movs	r2, #0
 8005366:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f88c 	bl	8005488 <UART_WaitOnFlagUntilTimeout>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d021      	beq.n	80053ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005386:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800538a:	653b      	str	r3, [r7, #80]	@ 0x50
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005394:	647b      	str	r3, [r7, #68]	@ 0x44
 8005396:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800539a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e6      	bne.n	8005376 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e062      	b.n	8005480 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d149      	bne.n	800545c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053d0:	2200      	movs	r2, #0
 80053d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f856 	bl	8005488 <UART_WaitOnFlagUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d03c      	beq.n	800545c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	623b      	str	r3, [r7, #32]
   return(result);
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	461a      	mov	r2, r3
 80053fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005400:	633b      	str	r3, [r7, #48]	@ 0x30
 8005402:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800540e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e6      	bne.n	80053e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3308      	adds	r3, #8
 800541a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	60fb      	str	r3, [r7, #12]
   return(result);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0301 	bic.w	r3, r3, #1
 800542a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3308      	adds	r3, #8
 8005432:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005434:	61fa      	str	r2, [r7, #28]
 8005436:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	69b9      	ldr	r1, [r7, #24]
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	617b      	str	r3, [r7, #20]
   return(result);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e5      	bne.n	8005414 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e011      	b.n	8005480 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2220      	movs	r2, #32
 8005460:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2220      	movs	r2, #32
 8005466:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3758      	adds	r7, #88	@ 0x58
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	4613      	mov	r3, r2
 8005496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005498:	e04f      	b.n	800553a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054a0:	d04b      	beq.n	800553a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a2:	f7fb ff61 	bl	8001368 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d302      	bcc.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e04e      	b.n	800555a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d037      	beq.n	800553a <UART_WaitOnFlagUntilTimeout+0xb2>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b80      	cmp	r3, #128	@ 0x80
 80054ce:	d034      	beq.n	800553a <UART_WaitOnFlagUntilTimeout+0xb2>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b40      	cmp	r3, #64	@ 0x40
 80054d4:	d031      	beq.n	800553a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d110      	bne.n	8005506 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2208      	movs	r2, #8
 80054ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 f8ff 	bl	80056f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2208      	movs	r2, #8
 80054f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e029      	b.n	800555a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005514:	d111      	bne.n	800553a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800551e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 f8e5 	bl	80056f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e00f      	b.n	800555a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4013      	ands	r3, r2
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	429a      	cmp	r2, r3
 8005548:	bf0c      	ite	eq
 800554a:	2301      	moveq	r3, #1
 800554c:	2300      	movne	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	429a      	cmp	r2, r3
 8005556:	d0a0      	beq.n	800549a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005564:	b480      	push	{r7}
 8005566:	b097      	sub	sp, #92	@ 0x5c
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	4613      	mov	r3, r2
 8005570:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	88fa      	ldrh	r2, [r7, #6]
 800557c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	88fa      	ldrh	r2, [r7, #6]
 8005584:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005596:	d10e      	bne.n	80055b6 <UART_Start_Receive_IT+0x52>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d105      	bne.n	80055ac <UART_Start_Receive_IT+0x48>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80055a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055aa:	e02d      	b.n	8005608 <UART_Start_Receive_IT+0xa4>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	22ff      	movs	r2, #255	@ 0xff
 80055b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055b4:	e028      	b.n	8005608 <UART_Start_Receive_IT+0xa4>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10d      	bne.n	80055da <UART_Start_Receive_IT+0x76>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d104      	bne.n	80055d0 <UART_Start_Receive_IT+0x6c>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	22ff      	movs	r2, #255	@ 0xff
 80055ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055ce:	e01b      	b.n	8005608 <UART_Start_Receive_IT+0xa4>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	227f      	movs	r2, #127	@ 0x7f
 80055d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055d8:	e016      	b.n	8005608 <UART_Start_Receive_IT+0xa4>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055e2:	d10d      	bne.n	8005600 <UART_Start_Receive_IT+0x9c>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d104      	bne.n	80055f6 <UART_Start_Receive_IT+0x92>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	227f      	movs	r2, #127	@ 0x7f
 80055f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055f4:	e008      	b.n	8005608 <UART_Start_Receive_IT+0xa4>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	223f      	movs	r2, #63	@ 0x3f
 80055fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055fe:	e003      	b.n	8005608 <UART_Start_Receive_IT+0xa4>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2222      	movs	r2, #34	@ 0x22
 8005614:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3308      	adds	r3, #8
 800561e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3308      	adds	r3, #8
 8005636:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005638:	64ba      	str	r2, [r7, #72]	@ 0x48
 800563a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800563e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e5      	bne.n	8005618 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005654:	d107      	bne.n	8005666 <UART_Start_Receive_IT+0x102>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d103      	bne.n	8005666 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4a21      	ldr	r2, [pc, #132]	@ (80056e8 <UART_Start_Receive_IT+0x184>)
 8005662:	669a      	str	r2, [r3, #104]	@ 0x68
 8005664:	e002      	b.n	800566c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4a20      	ldr	r2, [pc, #128]	@ (80056ec <UART_Start_Receive_IT+0x188>)
 800566a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d019      	beq.n	80056a8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005688:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005692:	637b      	str	r3, [r7, #52]	@ 0x34
 8005694:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005696:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005698:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80056a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e6      	bne.n	8005674 <UART_Start_Receive_IT+0x110>
 80056a6:	e018      	b.n	80056da <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	613b      	str	r3, [r7, #16]
   return(result);
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f043 0320 	orr.w	r3, r3, #32
 80056bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056c6:	623b      	str	r3, [r7, #32]
 80056c8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	69f9      	ldr	r1, [r7, #28]
 80056cc:	6a3a      	ldr	r2, [r7, #32]
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e6      	bne.n	80056a8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	375c      	adds	r7, #92	@ 0x5c
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	080059f5 	.word	0x080059f5
 80056ec:	08005839 	.word	0x08005839

080056f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b095      	sub	sp, #84	@ 0x54
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005700:	e853 3f00 	ldrex	r3, [r3]
 8005704:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005708:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800570c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005716:	643b      	str	r3, [r7, #64]	@ 0x40
 8005718:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800571c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1e6      	bne.n	80056f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3308      	adds	r3, #8
 8005730:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	61fb      	str	r3, [r7, #28]
   return(result);
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	f023 0301 	bic.w	r3, r3, #1
 8005740:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3308      	adds	r3, #8
 8005748:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800574a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800574c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005750:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e5      	bne.n	800572a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005762:	2b01      	cmp	r3, #1
 8005764:	d118      	bne.n	8005798 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	60bb      	str	r3, [r7, #8]
   return(result);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f023 0310 	bic.w	r3, r3, #16
 800577a:	647b      	str	r3, [r7, #68]	@ 0x44
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	6979      	ldr	r1, [r7, #20]
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	613b      	str	r3, [r7, #16]
   return(result);
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e6      	bne.n	8005766 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2220      	movs	r2, #32
 800579c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80057ac:	bf00      	nop
 80057ae:	3754      	adds	r7, #84	@ 0x54
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f7ff fa3e 	bl	8004c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	61bb      	str	r3, [r7, #24]
 800580c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	6979      	ldr	r1, [r7, #20]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	613b      	str	r3, [r7, #16]
   return(result);
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e6      	bne.n	80057ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7ff fa0a 	bl	8004c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005830:	bf00      	nop
 8005832:	3720      	adds	r7, #32
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b09c      	sub	sp, #112	@ 0x70
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005846:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005850:	2b22      	cmp	r3, #34	@ 0x22
 8005852:	f040 80be 	bne.w	80059d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800585c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005860:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005864:	b2d9      	uxtb	r1, r3
 8005866:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800586a:	b2da      	uxtb	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005870:	400a      	ands	r2, r1
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005898:	b29b      	uxth	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	f040 80a3 	bne.w	80059e6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80058ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80058cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e6      	bne.n	80058a0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3308      	adds	r3, #8
 80058d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3308      	adds	r3, #8
 80058f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80058f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80058f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e5      	bne.n	80058d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2220      	movs	r2, #32
 800590a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a34      	ldr	r2, [pc, #208]	@ (80059f0 <UART_RxISR_8BIT+0x1b8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d01f      	beq.n	8005964 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d018      	beq.n	8005964 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	623b      	str	r3, [r7, #32]
   return(result);
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005946:	663b      	str	r3, [r7, #96]	@ 0x60
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	461a      	mov	r2, r3
 800594e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005950:	633b      	str	r3, [r7, #48]	@ 0x30
 8005952:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800595e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e6      	bne.n	8005932 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005968:	2b01      	cmp	r3, #1
 800596a:	d12e      	bne.n	80059ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	e853 3f00 	ldrex	r3, [r3]
 800597e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0310 	bic.w	r3, r3, #16
 8005986:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005990:	61fb      	str	r3, [r7, #28]
 8005992:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005994:	69b9      	ldr	r1, [r7, #24]
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	e841 2300 	strex	r3, r2, [r1]
 800599c:	617b      	str	r3, [r7, #20]
   return(result);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e6      	bne.n	8005972 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	f003 0310 	and.w	r3, r3, #16
 80059ae:	2b10      	cmp	r3, #16
 80059b0:	d103      	bne.n	80059ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2210      	movs	r2, #16
 80059b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff f952 	bl	8004c6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059c8:	e00d      	b.n	80059e6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7fb f962 	bl	8000c94 <HAL_UART_RxCpltCallback>
}
 80059d0:	e009      	b.n	80059e6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	8b1b      	ldrh	r3, [r3, #24]
 80059d8:	b29a      	uxth	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0208 	orr.w	r2, r2, #8
 80059e2:	b292      	uxth	r2, r2
 80059e4:	831a      	strh	r2, [r3, #24]
}
 80059e6:	bf00      	nop
 80059e8:	3770      	adds	r7, #112	@ 0x70
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	40008000 	.word	0x40008000

080059f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b09c      	sub	sp, #112	@ 0x70
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a02:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a0c:	2b22      	cmp	r3, #34	@ 0x22
 8005a0e:	f040 80be 	bne.w	8005b8e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005a18:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a20:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a22:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005a26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a30:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a36:	1c9a      	adds	r2, r3, #2
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f040 80a3 	bne.w	8005ba2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005a6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a70:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a7c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005a80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a82:	e841 2300 	strex	r3, r2, [r1]
 8005a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1e6      	bne.n	8005a5c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3308      	adds	r3, #8
 8005a94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a98:	e853 3f00 	ldrex	r3, [r3]
 8005a9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa0:	f023 0301 	bic.w	r3, r3, #1
 8005aa4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3308      	adds	r3, #8
 8005aac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005aae:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ab4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ab6:	e841 2300 	strex	r3, r2, [r1]
 8005aba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1e5      	bne.n	8005a8e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a34      	ldr	r2, [pc, #208]	@ (8005bac <UART_RxISR_16BIT+0x1b8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d01f      	beq.n	8005b20 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d018      	beq.n	8005b20 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b0e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e6      	bne.n	8005aee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d12e      	bne.n	8005b86 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	e853 3f00 	ldrex	r3, [r3]
 8005b3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f023 0310 	bic.w	r3, r3, #16
 8005b42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b4c:	61bb      	str	r3, [r7, #24]
 8005b4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	6979      	ldr	r1, [r7, #20]
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	e841 2300 	strex	r3, r2, [r1]
 8005b58:	613b      	str	r3, [r7, #16]
   return(result);
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e6      	bne.n	8005b2e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f003 0310 	and.w	r3, r3, #16
 8005b6a:	2b10      	cmp	r3, #16
 8005b6c:	d103      	bne.n	8005b76 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2210      	movs	r2, #16
 8005b74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7ff f874 	bl	8004c6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b84:	e00d      	b.n	8005ba2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fb f884 	bl	8000c94 <HAL_UART_RxCpltCallback>
}
 8005b8c:	e009      	b.n	8005ba2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	8b1b      	ldrh	r3, [r3, #24]
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0208 	orr.w	r2, r2, #8
 8005b9e:	b292      	uxth	r2, r2
 8005ba0:	831a      	strh	r2, [r3, #24]
}
 8005ba2:	bf00      	nop
 8005ba4:	3770      	adds	r7, #112	@ 0x70
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40008000 	.word	0x40008000

08005bb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <__NVIC_SetPriority>:
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	4603      	mov	r3, r0
 8005bcc:	6039      	str	r1, [r7, #0]
 8005bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	db0a      	blt.n	8005bee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	490c      	ldr	r1, [pc, #48]	@ (8005c10 <__NVIC_SetPriority+0x4c>)
 8005bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be2:	0112      	lsls	r2, r2, #4
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	440b      	add	r3, r1
 8005be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005bec:	e00a      	b.n	8005c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	4908      	ldr	r1, [pc, #32]	@ (8005c14 <__NVIC_SetPriority+0x50>)
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	3b04      	subs	r3, #4
 8005bfc:	0112      	lsls	r2, r2, #4
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	440b      	add	r3, r1
 8005c02:	761a      	strb	r2, [r3, #24]
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	e000e100 	.word	0xe000e100
 8005c14:	e000ed00 	.word	0xe000ed00

08005c18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005c1c:	4b05      	ldr	r3, [pc, #20]	@ (8005c34 <SysTick_Handler+0x1c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005c20:	f001 fd46 	bl	80076b0 <xTaskGetSchedulerState>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d001      	beq.n	8005c2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005c2a:	f002 fb3d 	bl	80082a8 <xPortSysTickHandler>
  }
}
 8005c2e:	bf00      	nop
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	e000e010 	.word	0xe000e010

08005c38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	f06f 0004 	mvn.w	r0, #4
 8005c42:	f7ff ffbf 	bl	8005bc4 <__NVIC_SetPriority>
#endif
}
 8005c46:	bf00      	nop
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c52:	f3ef 8305 	mrs	r3, IPSR
 8005c56:	603b      	str	r3, [r7, #0]
  return(result);
 8005c58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005c5e:	f06f 0305 	mvn.w	r3, #5
 8005c62:	607b      	str	r3, [r7, #4]
 8005c64:	e00c      	b.n	8005c80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005c66:	4b0a      	ldr	r3, [pc, #40]	@ (8005c90 <osKernelInitialize+0x44>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d105      	bne.n	8005c7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005c6e:	4b08      	ldr	r3, [pc, #32]	@ (8005c90 <osKernelInitialize+0x44>)
 8005c70:	2201      	movs	r2, #1
 8005c72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	607b      	str	r3, [r7, #4]
 8005c78:	e002      	b.n	8005c80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005c7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c80:	687b      	ldr	r3, [r7, #4]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	20000228 	.word	0x20000228

08005c94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c9a:	f3ef 8305 	mrs	r3, IPSR
 8005c9e:	603b      	str	r3, [r7, #0]
  return(result);
 8005ca0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <osKernelStart+0x1a>
    stat = osErrorISR;
 8005ca6:	f06f 0305 	mvn.w	r3, #5
 8005caa:	607b      	str	r3, [r7, #4]
 8005cac:	e010      	b.n	8005cd0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005cae:	4b0b      	ldr	r3, [pc, #44]	@ (8005cdc <osKernelStart+0x48>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d109      	bne.n	8005cca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005cb6:	f7ff ffbf 	bl	8005c38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005cba:	4b08      	ldr	r3, [pc, #32]	@ (8005cdc <osKernelStart+0x48>)
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005cc0:	f001 f892 	bl	8006de8 <vTaskStartScheduler>
      stat = osOK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	607b      	str	r3, [r7, #4]
 8005cc8:	e002      	b.n	8005cd0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005cca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005cce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005cd0:	687b      	ldr	r3, [r7, #4]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20000228 	.word	0x20000228

08005ce0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08e      	sub	sp, #56	@ 0x38
 8005ce4:	af04      	add	r7, sp, #16
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005cec:	2300      	movs	r3, #0
 8005cee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cf0:	f3ef 8305 	mrs	r3, IPSR
 8005cf4:	617b      	str	r3, [r7, #20]
  return(result);
 8005cf6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d17e      	bne.n	8005dfa <osThreadNew+0x11a>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d07b      	beq.n	8005dfa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005d02:	2380      	movs	r3, #128	@ 0x80
 8005d04:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005d06:	2318      	movs	r3, #24
 8005d08:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005d0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d045      	beq.n	8005da6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <osThreadNew+0x48>
        name = attr->name;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d008      	beq.n	8005d4e <osThreadNew+0x6e>
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	2b38      	cmp	r3, #56	@ 0x38
 8005d40:	d805      	bhi.n	8005d4e <osThreadNew+0x6e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <osThreadNew+0x72>
        return (NULL);
 8005d4e:	2300      	movs	r3, #0
 8005d50:	e054      	b.n	8005dfc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	089b      	lsrs	r3, r3, #2
 8005d60:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00e      	beq.n	8005d88 <osThreadNew+0xa8>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	2ba7      	cmp	r3, #167	@ 0xa7
 8005d70:	d90a      	bls.n	8005d88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d006      	beq.n	8005d88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <osThreadNew+0xa8>
        mem = 1;
 8005d82:	2301      	movs	r3, #1
 8005d84:	61bb      	str	r3, [r7, #24]
 8005d86:	e010      	b.n	8005daa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10c      	bne.n	8005daa <osThreadNew+0xca>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d108      	bne.n	8005daa <osThreadNew+0xca>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d104      	bne.n	8005daa <osThreadNew+0xca>
          mem = 0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	61bb      	str	r3, [r7, #24]
 8005da4:	e001      	b.n	8005daa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d110      	bne.n	8005dd2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005db8:	9202      	str	r2, [sp, #8]
 8005dba:	9301      	str	r3, [sp, #4]
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	6a3a      	ldr	r2, [r7, #32]
 8005dc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 fe1a 	bl	8006a00 <xTaskCreateStatic>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	613b      	str	r3, [r7, #16]
 8005dd0:	e013      	b.n	8005dfa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d110      	bne.n	8005dfa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	f107 0310 	add.w	r3, r7, #16
 8005de0:	9301      	str	r3, [sp, #4]
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 fe68 	bl	8006ac0 <xTaskCreate>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d001      	beq.n	8005dfa <osThreadNew+0x11a>
            hTask = NULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005dfa:	693b      	ldr	r3, [r7, #16]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3728      	adds	r7, #40	@ 0x28
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e0c:	f3ef 8305 	mrs	r3, IPSR
 8005e10:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <osDelay+0x1c>
    stat = osErrorISR;
 8005e18:	f06f 0305 	mvn.w	r3, #5
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	e007      	b.n	8005e30 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 ffa6 	bl	8006d7c <vTaskDelay>
    }
  }

  return (stat);
 8005e30:	68fb      	ldr	r3, [r7, #12]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
	...

08005e3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4a07      	ldr	r2, [pc, #28]	@ (8005e68 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	4a06      	ldr	r2, [pc, #24]	@ (8005e6c <vApplicationGetIdleTaskMemory+0x30>)
 8005e52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2280      	movs	r2, #128	@ 0x80
 8005e58:	601a      	str	r2, [r3, #0]
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	2000022c 	.word	0x2000022c
 8005e6c:	200002d4 	.word	0x200002d4

08005e70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4a07      	ldr	r2, [pc, #28]	@ (8005e9c <vApplicationGetTimerTaskMemory+0x2c>)
 8005e80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	4a06      	ldr	r2, [pc, #24]	@ (8005ea0 <vApplicationGetTimerTaskMemory+0x30>)
 8005e86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e8e:	601a      	str	r2, [r3, #0]
}
 8005e90:	bf00      	nop
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	200004d4 	.word	0x200004d4
 8005ea0:	2000057c 	.word	0x2000057c

08005ea4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f103 0208 	add.w	r2, r3, #8
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ebc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f103 0208 	add.w	r2, r3, #8
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f103 0208 	add.w	r2, r3, #8
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005efe:	b480      	push	{r7}
 8005f00:	b085      	sub	sp, #20
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	601a      	str	r2, [r3, #0]
}
 8005f3a:	bf00      	nop
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f46:	b480      	push	{r7}
 8005f48:	b085      	sub	sp, #20
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f5c:	d103      	bne.n	8005f66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e00c      	b.n	8005f80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3308      	adds	r3, #8
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	e002      	b.n	8005f74 <vListInsert+0x2e>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d2f6      	bcs.n	8005f6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	601a      	str	r2, [r3, #0]
}
 8005fac:	bf00      	nop
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6892      	ldr	r2, [r2, #8]
 8005fce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6852      	ldr	r2, [r2, #4]
 8005fd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d103      	bne.n	8005fec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	1e5a      	subs	r2, r3, #1
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10b      	bne.n	8006038 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006032:	bf00      	nop
 8006034:	bf00      	nop
 8006036:	e7fd      	b.n	8006034 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006038:	f002 f8a6 	bl	8008188 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006044:	68f9      	ldr	r1, [r7, #12]
 8006046:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006048:	fb01 f303 	mul.w	r3, r1, r3
 800604c:	441a      	add	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006068:	3b01      	subs	r3, #1
 800606a:	68f9      	ldr	r1, [r7, #12]
 800606c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800606e:	fb01 f303 	mul.w	r3, r1, r3
 8006072:	441a      	add	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	22ff      	movs	r2, #255	@ 0xff
 800607c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	22ff      	movs	r2, #255	@ 0xff
 8006084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d114      	bne.n	80060b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d01a      	beq.n	80060cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	3310      	adds	r3, #16
 800609a:	4618      	mov	r0, r3
 800609c:	f001 f942 	bl	8007324 <xTaskRemoveFromEventList>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d012      	beq.n	80060cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060a6:	4b0d      	ldr	r3, [pc, #52]	@ (80060dc <xQueueGenericReset+0xd0>)
 80060a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	e009      	b.n	80060cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3310      	adds	r3, #16
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff fef1 	bl	8005ea4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3324      	adds	r3, #36	@ 0x24
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff feec 	bl	8005ea4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060cc:	f002 f88e 	bl	80081ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060d0:	2301      	movs	r3, #1
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	e000ed04 	.word	0xe000ed04

080060e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08e      	sub	sp, #56	@ 0x38
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10b      	bne.n	800610c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006106:	bf00      	nop
 8006108:	bf00      	nop
 800610a:	e7fd      	b.n	8006108 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10b      	bne.n	800612a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	e7fd      	b.n	8006126 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <xQueueGenericCreateStatic+0x56>
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <xQueueGenericCreateStatic+0x5a>
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <xQueueGenericCreateStatic+0x5c>
 800613a:	2300      	movs	r3, #0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10b      	bne.n	8006158 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	623b      	str	r3, [r7, #32]
}
 8006152:	bf00      	nop
 8006154:	bf00      	nop
 8006156:	e7fd      	b.n	8006154 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d102      	bne.n	8006164 <xQueueGenericCreateStatic+0x84>
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <xQueueGenericCreateStatic+0x88>
 8006164:	2301      	movs	r3, #1
 8006166:	e000      	b.n	800616a <xQueueGenericCreateStatic+0x8a>
 8006168:	2300      	movs	r3, #0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10b      	bne.n	8006186 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800616e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	61fb      	str	r3, [r7, #28]
}
 8006180:	bf00      	nop
 8006182:	bf00      	nop
 8006184:	e7fd      	b.n	8006182 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006186:	2350      	movs	r3, #80	@ 0x50
 8006188:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2b50      	cmp	r3, #80	@ 0x50
 800618e:	d00b      	beq.n	80061a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	61bb      	str	r3, [r7, #24]
}
 80061a2:	bf00      	nop
 80061a4:	bf00      	nop
 80061a6:	e7fd      	b.n	80061a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80061ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00d      	beq.n	80061d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80061c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	4613      	mov	r3, r2
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 f805 	bl	80061da <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3730      	adds	r7, #48	@ 0x30
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	60f8      	str	r0, [r7, #12]
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	607a      	str	r2, [r7, #4]
 80061e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d103      	bne.n	80061f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	e002      	b.n	80061fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006208:	2101      	movs	r1, #1
 800620a:	69b8      	ldr	r0, [r7, #24]
 800620c:	f7ff fefe 	bl	800600c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	78fa      	ldrb	r2, [r7, #3]
 8006214:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006218:	bf00      	nop
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08e      	sub	sp, #56	@ 0x38
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800622e:	2300      	movs	r3, #0
 8006230:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10b      	bne.n	8006254 <xQueueGenericSend+0x34>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800624e:	bf00      	nop
 8006250:	bf00      	nop
 8006252:	e7fd      	b.n	8006250 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d103      	bne.n	8006262 <xQueueGenericSend+0x42>
 800625a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <xQueueGenericSend+0x46>
 8006262:	2301      	movs	r3, #1
 8006264:	e000      	b.n	8006268 <xQueueGenericSend+0x48>
 8006266:	2300      	movs	r3, #0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10b      	bne.n	8006284 <xQueueGenericSend+0x64>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800627e:	bf00      	nop
 8006280:	bf00      	nop
 8006282:	e7fd      	b.n	8006280 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b02      	cmp	r3, #2
 8006288:	d103      	bne.n	8006292 <xQueueGenericSend+0x72>
 800628a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <xQueueGenericSend+0x76>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <xQueueGenericSend+0x78>
 8006296:	2300      	movs	r3, #0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10b      	bne.n	80062b4 <xQueueGenericSend+0x94>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	623b      	str	r3, [r7, #32]
}
 80062ae:	bf00      	nop
 80062b0:	bf00      	nop
 80062b2:	e7fd      	b.n	80062b0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062b4:	f001 f9fc 	bl	80076b0 <xTaskGetSchedulerState>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d102      	bne.n	80062c4 <xQueueGenericSend+0xa4>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <xQueueGenericSend+0xa8>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <xQueueGenericSend+0xaa>
 80062c8:	2300      	movs	r3, #0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10b      	bne.n	80062e6 <xQueueGenericSend+0xc6>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	61fb      	str	r3, [r7, #28]
}
 80062e0:	bf00      	nop
 80062e2:	bf00      	nop
 80062e4:	e7fd      	b.n	80062e2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062e6:	f001 ff4f 	bl	8008188 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d302      	bcc.n	80062fc <xQueueGenericSend+0xdc>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d129      	bne.n	8006350 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006302:	f000 fa0f 	bl	8006724 <prvCopyDataToQueue>
 8006306:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630c:	2b00      	cmp	r3, #0
 800630e:	d010      	beq.n	8006332 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006312:	3324      	adds	r3, #36	@ 0x24
 8006314:	4618      	mov	r0, r3
 8006316:	f001 f805 	bl	8007324 <xTaskRemoveFromEventList>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d013      	beq.n	8006348 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006320:	4b3f      	ldr	r3, [pc, #252]	@ (8006420 <xQueueGenericSend+0x200>)
 8006322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	e00a      	b.n	8006348 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006334:	2b00      	cmp	r3, #0
 8006336:	d007      	beq.n	8006348 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006338:	4b39      	ldr	r3, [pc, #228]	@ (8006420 <xQueueGenericSend+0x200>)
 800633a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006348:	f001 ff50 	bl	80081ec <vPortExitCritical>
				return pdPASS;
 800634c:	2301      	movs	r3, #1
 800634e:	e063      	b.n	8006418 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d103      	bne.n	800635e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006356:	f001 ff49 	bl	80081ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800635a:	2300      	movs	r3, #0
 800635c:	e05c      	b.n	8006418 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800635e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006360:	2b00      	cmp	r3, #0
 8006362:	d106      	bne.n	8006372 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006364:	f107 0314 	add.w	r3, r7, #20
 8006368:	4618      	mov	r0, r3
 800636a:	f001 f83f 	bl	80073ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800636e:	2301      	movs	r3, #1
 8006370:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006372:	f001 ff3b 	bl	80081ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006376:	f000 fda7 	bl	8006ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800637a:	f001 ff05 	bl	8008188 <vPortEnterCritical>
 800637e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006380:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006384:	b25b      	sxtb	r3, r3
 8006386:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800638a:	d103      	bne.n	8006394 <xQueueGenericSend+0x174>
 800638c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006396:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800639a:	b25b      	sxtb	r3, r3
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063a0:	d103      	bne.n	80063aa <xQueueGenericSend+0x18a>
 80063a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063aa:	f001 ff1f 	bl	80081ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063ae:	1d3a      	adds	r2, r7, #4
 80063b0:	f107 0314 	add.w	r3, r7, #20
 80063b4:	4611      	mov	r1, r2
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 f82e 	bl	8007418 <xTaskCheckForTimeOut>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d124      	bne.n	800640c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063c4:	f000 faa6 	bl	8006914 <prvIsQueueFull>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d018      	beq.n	8006400 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d0:	3310      	adds	r3, #16
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	4611      	mov	r1, r2
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 ff52 	bl	8007280 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80063dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063de:	f000 fa31 	bl	8006844 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80063e2:	f000 fd7f 	bl	8006ee4 <xTaskResumeAll>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f47f af7c 	bne.w	80062e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80063ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006420 <xQueueGenericSend+0x200>)
 80063f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	e772      	b.n	80062e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006400:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006402:	f000 fa1f 	bl	8006844 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006406:	f000 fd6d 	bl	8006ee4 <xTaskResumeAll>
 800640a:	e76c      	b.n	80062e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800640c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800640e:	f000 fa19 	bl	8006844 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006412:	f000 fd67 	bl	8006ee4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006416:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006418:	4618      	mov	r0, r3
 800641a:	3738      	adds	r7, #56	@ 0x38
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	e000ed04 	.word	0xe000ed04

08006424 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b090      	sub	sp, #64	@ 0x40
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10b      	bne.n	8006454 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800644e:	bf00      	nop
 8006450:	bf00      	nop
 8006452:	e7fd      	b.n	8006450 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d103      	bne.n	8006462 <xQueueGenericSendFromISR+0x3e>
 800645a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <xQueueGenericSendFromISR+0x42>
 8006462:	2301      	movs	r3, #1
 8006464:	e000      	b.n	8006468 <xQueueGenericSendFromISR+0x44>
 8006466:	2300      	movs	r3, #0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10b      	bne.n	8006484 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800647e:	bf00      	nop
 8006480:	bf00      	nop
 8006482:	e7fd      	b.n	8006480 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2b02      	cmp	r3, #2
 8006488:	d103      	bne.n	8006492 <xQueueGenericSendFromISR+0x6e>
 800648a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800648c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648e:	2b01      	cmp	r3, #1
 8006490:	d101      	bne.n	8006496 <xQueueGenericSendFromISR+0x72>
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <xQueueGenericSendFromISR+0x74>
 8006496:	2300      	movs	r3, #0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10b      	bne.n	80064b4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	623b      	str	r3, [r7, #32]
}
 80064ae:	bf00      	nop
 80064b0:	bf00      	nop
 80064b2:	e7fd      	b.n	80064b0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064b4:	f001 ff48 	bl	8008348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064b8:	f3ef 8211 	mrs	r2, BASEPRI
 80064bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	61fa      	str	r2, [r7, #28]
 80064ce:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064d0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064d2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064dc:	429a      	cmp	r2, r3
 80064de:	d302      	bcc.n	80064e6 <xQueueGenericSendFromISR+0xc2>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d12f      	bne.n	8006546 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80064fc:	f000 f912 	bl	8006724 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006500:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006504:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006508:	d112      	bne.n	8006530 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800650a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650e:	2b00      	cmp	r3, #0
 8006510:	d016      	beq.n	8006540 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006514:	3324      	adds	r3, #36	@ 0x24
 8006516:	4618      	mov	r0, r3
 8006518:	f000 ff04 	bl	8007324 <xTaskRemoveFromEventList>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00e      	beq.n	8006540 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	e007      	b.n	8006540 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006530:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006534:	3301      	adds	r3, #1
 8006536:	b2db      	uxtb	r3, r3
 8006538:	b25a      	sxtb	r2, r3
 800653a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006540:	2301      	movs	r3, #1
 8006542:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006544:	e001      	b.n	800654a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006546:	2300      	movs	r3, #0
 8006548:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800654a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800654c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006554:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006558:	4618      	mov	r0, r3
 800655a:	3740      	adds	r7, #64	@ 0x40
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08c      	sub	sp, #48	@ 0x30
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800656c:	2300      	movs	r3, #0
 800656e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10b      	bne.n	8006592 <xQueueReceive+0x32>
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	623b      	str	r3, [r7, #32]
}
 800658c:	bf00      	nop
 800658e:	bf00      	nop
 8006590:	e7fd      	b.n	800658e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d103      	bne.n	80065a0 <xQueueReceive+0x40>
 8006598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <xQueueReceive+0x44>
 80065a0:	2301      	movs	r3, #1
 80065a2:	e000      	b.n	80065a6 <xQueueReceive+0x46>
 80065a4:	2300      	movs	r3, #0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10b      	bne.n	80065c2 <xQueueReceive+0x62>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	61fb      	str	r3, [r7, #28]
}
 80065bc:	bf00      	nop
 80065be:	bf00      	nop
 80065c0:	e7fd      	b.n	80065be <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065c2:	f001 f875 	bl	80076b0 <xTaskGetSchedulerState>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d102      	bne.n	80065d2 <xQueueReceive+0x72>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <xQueueReceive+0x76>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e000      	b.n	80065d8 <xQueueReceive+0x78>
 80065d6:	2300      	movs	r3, #0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10b      	bne.n	80065f4 <xQueueReceive+0x94>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	61bb      	str	r3, [r7, #24]
}
 80065ee:	bf00      	nop
 80065f0:	bf00      	nop
 80065f2:	e7fd      	b.n	80065f0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065f4:	f001 fdc8 	bl	8008188 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01f      	beq.n	8006644 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006604:	68b9      	ldr	r1, [r7, #8]
 8006606:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006608:	f000 f8f6 	bl	80067f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660e:	1e5a      	subs	r2, r3, #1
 8006610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006612:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00f      	beq.n	800663c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800661c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661e:	3310      	adds	r3, #16
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fe7f 	bl	8007324 <xTaskRemoveFromEventList>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d007      	beq.n	800663c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800662c:	4b3c      	ldr	r3, [pc, #240]	@ (8006720 <xQueueReceive+0x1c0>)
 800662e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800663c:	f001 fdd6 	bl	80081ec <vPortExitCritical>
				return pdPASS;
 8006640:	2301      	movs	r3, #1
 8006642:	e069      	b.n	8006718 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d103      	bne.n	8006652 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800664a:	f001 fdcf 	bl	80081ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800664e:	2300      	movs	r3, #0
 8006650:	e062      	b.n	8006718 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006654:	2b00      	cmp	r3, #0
 8006656:	d106      	bne.n	8006666 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006658:	f107 0310 	add.w	r3, r7, #16
 800665c:	4618      	mov	r0, r3
 800665e:	f000 fec5 	bl	80073ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006662:	2301      	movs	r3, #1
 8006664:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006666:	f001 fdc1 	bl	80081ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800666a:	f000 fc2d 	bl	8006ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800666e:	f001 fd8b 	bl	8008188 <vPortEnterCritical>
 8006672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006674:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006678:	b25b      	sxtb	r3, r3
 800667a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800667e:	d103      	bne.n	8006688 <xQueueReceive+0x128>
 8006680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800668e:	b25b      	sxtb	r3, r3
 8006690:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006694:	d103      	bne.n	800669e <xQueueReceive+0x13e>
 8006696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800669e:	f001 fda5 	bl	80081ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066a2:	1d3a      	adds	r2, r7, #4
 80066a4:	f107 0310 	add.w	r3, r7, #16
 80066a8:	4611      	mov	r1, r2
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 feb4 	bl	8007418 <xTaskCheckForTimeOut>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d123      	bne.n	80066fe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066b8:	f000 f916 	bl	80068e8 <prvIsQueueEmpty>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d017      	beq.n	80066f2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c4:	3324      	adds	r3, #36	@ 0x24
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	4611      	mov	r1, r2
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fdd8 	bl	8007280 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066d2:	f000 f8b7 	bl	8006844 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066d6:	f000 fc05 	bl	8006ee4 <xTaskResumeAll>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d189      	bne.n	80065f4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80066e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006720 <xQueueReceive+0x1c0>)
 80066e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	e780      	b.n	80065f4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80066f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066f4:	f000 f8a6 	bl	8006844 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066f8:	f000 fbf4 	bl	8006ee4 <xTaskResumeAll>
 80066fc:	e77a      	b.n	80065f4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80066fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006700:	f000 f8a0 	bl	8006844 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006704:	f000 fbee 	bl	8006ee4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006708:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800670a:	f000 f8ed 	bl	80068e8 <prvIsQueueEmpty>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	f43f af6f 	beq.w	80065f4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006716:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006718:	4618      	mov	r0, r3
 800671a:	3730      	adds	r7, #48	@ 0x30
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	e000ed04 	.word	0xe000ed04

08006724 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006730:	2300      	movs	r3, #0
 8006732:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006738:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10d      	bne.n	800675e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d14d      	bne.n	80067e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	4618      	mov	r0, r3
 8006750:	f000 ffcc 	bl	80076ec <xTaskPriorityDisinherit>
 8006754:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	609a      	str	r2, [r3, #8]
 800675c:	e043      	b.n	80067e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d119      	bne.n	8006798 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6858      	ldr	r0, [r3, #4]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676c:	461a      	mov	r2, r3
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	f002 f89e 	bl	80088b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677c:	441a      	add	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	429a      	cmp	r2, r3
 800678c:	d32b      	bcc.n	80067e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	605a      	str	r2, [r3, #4]
 8006796:	e026      	b.n	80067e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	68d8      	ldr	r0, [r3, #12]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a0:	461a      	mov	r2, r3
 80067a2:	68b9      	ldr	r1, [r7, #8]
 80067a4:	f002 f884 	bl	80088b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b0:	425b      	negs	r3, r3
 80067b2:	441a      	add	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d207      	bcs.n	80067d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067cc:	425b      	negs	r3, r3
 80067ce:	441a      	add	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d105      	bne.n	80067e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80067ee:	697b      	ldr	r3, [r7, #20]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d018      	beq.n	800683c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006812:	441a      	add	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	429a      	cmp	r2, r3
 8006822:	d303      	bcc.n	800682c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68d9      	ldr	r1, [r3, #12]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006834:	461a      	mov	r2, r3
 8006836:	6838      	ldr	r0, [r7, #0]
 8006838:	f002 f83a 	bl	80088b0 <memcpy>
	}
}
 800683c:	bf00      	nop
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800684c:	f001 fc9c 	bl	8008188 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006856:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006858:	e011      	b.n	800687e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685e:	2b00      	cmp	r3, #0
 8006860:	d012      	beq.n	8006888 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3324      	adds	r3, #36	@ 0x24
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fd5c 	bl	8007324 <xTaskRemoveFromEventList>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006872:	f000 fe35 	bl	80074e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	3b01      	subs	r3, #1
 800687a:	b2db      	uxtb	r3, r3
 800687c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800687e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006882:	2b00      	cmp	r3, #0
 8006884:	dce9      	bgt.n	800685a <prvUnlockQueue+0x16>
 8006886:	e000      	b.n	800688a <prvUnlockQueue+0x46>
					break;
 8006888:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	22ff      	movs	r2, #255	@ 0xff
 800688e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006892:	f001 fcab 	bl	80081ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006896:	f001 fc77 	bl	8008188 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068a2:	e011      	b.n	80068c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d012      	beq.n	80068d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3310      	adds	r3, #16
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fd37 	bl	8007324 <xTaskRemoveFromEventList>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068bc:	f000 fe10 	bl	80074e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068c0:	7bbb      	ldrb	r3, [r7, #14]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	dce9      	bgt.n	80068a4 <prvUnlockQueue+0x60>
 80068d0:	e000      	b.n	80068d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	22ff      	movs	r2, #255	@ 0xff
 80068d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80068dc:	f001 fc86 	bl	80081ec <vPortExitCritical>
}
 80068e0:	bf00      	nop
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068f0:	f001 fc4a 	bl	8008188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d102      	bne.n	8006902 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068fc:	2301      	movs	r3, #1
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	e001      	b.n	8006906 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006906:	f001 fc71 	bl	80081ec <vPortExitCritical>

	return xReturn;
 800690a:	68fb      	ldr	r3, [r7, #12]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800691c:	f001 fc34 	bl	8008188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006928:	429a      	cmp	r2, r3
 800692a:	d102      	bne.n	8006932 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800692c:	2301      	movs	r3, #1
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	e001      	b.n	8006936 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006932:	2300      	movs	r3, #0
 8006934:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006936:	f001 fc59 	bl	80081ec <vPortExitCritical>

	return xReturn;
 800693a:	68fb      	ldr	r3, [r7, #12]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	e014      	b.n	800697e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006954:	4a0f      	ldr	r2, [pc, #60]	@ (8006994 <vQueueAddToRegistry+0x50>)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10b      	bne.n	8006978 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006960:	490c      	ldr	r1, [pc, #48]	@ (8006994 <vQueueAddToRegistry+0x50>)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800696a:	4a0a      	ldr	r2, [pc, #40]	@ (8006994 <vQueueAddToRegistry+0x50>)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	4413      	add	r3, r2
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006976:	e006      	b.n	8006986 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3301      	adds	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b07      	cmp	r3, #7
 8006982:	d9e7      	bls.n	8006954 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006984:	bf00      	nop
 8006986:	bf00      	nop
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	2000097c 	.word	0x2000097c

08006998 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069a8:	f001 fbee 	bl	8008188 <vPortEnterCritical>
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069b2:	b25b      	sxtb	r3, r3
 80069b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069b8:	d103      	bne.n	80069c2 <vQueueWaitForMessageRestricted+0x2a>
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069c8:	b25b      	sxtb	r3, r3
 80069ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069ce:	d103      	bne.n	80069d8 <vQueueWaitForMessageRestricted+0x40>
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069d8:	f001 fc08 	bl	80081ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d106      	bne.n	80069f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	3324      	adds	r3, #36	@ 0x24
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fc6d 	bl	80072cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80069f2:	6978      	ldr	r0, [r7, #20]
 80069f4:	f7ff ff26 	bl	8006844 <prvUnlockQueue>
	}
 80069f8:	bf00      	nop
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08e      	sub	sp, #56	@ 0x38
 8006a04:	af04      	add	r7, sp, #16
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10b      	bne.n	8006a2c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	623b      	str	r3, [r7, #32]
}
 8006a26:	bf00      	nop
 8006a28:	bf00      	nop
 8006a2a:	e7fd      	b.n	8006a28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10b      	bne.n	8006a4a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	61fb      	str	r3, [r7, #28]
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop
 8006a48:	e7fd      	b.n	8006a46 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a4a:	23a8      	movs	r3, #168	@ 0xa8
 8006a4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	2ba8      	cmp	r3, #168	@ 0xa8
 8006a52:	d00b      	beq.n	8006a6c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	61bb      	str	r3, [r7, #24]
}
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
 8006a6a:	e7fd      	b.n	8006a68 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01e      	beq.n	8006ab2 <xTaskCreateStatic+0xb2>
 8006a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d01b      	beq.n	8006ab2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a82:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	9303      	str	r3, [sp, #12]
 8006a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a92:	9302      	str	r3, [sp, #8]
 8006a94:	f107 0314 	add.w	r3, r7, #20
 8006a98:	9301      	str	r3, [sp, #4]
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f851 	bl	8006b4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aaa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006aac:	f000 f8f6 	bl	8006c9c <prvAddNewTaskToReadyList>
 8006ab0:	e001      	b.n	8006ab6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ab6:	697b      	ldr	r3, [r7, #20]
	}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3728      	adds	r7, #40	@ 0x28
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08c      	sub	sp, #48	@ 0x30
 8006ac4:	af04      	add	r7, sp, #16
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	4613      	mov	r3, r2
 8006ace:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ad0:	88fb      	ldrh	r3, [r7, #6]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f001 fc79 	bl	80083cc <pvPortMalloc>
 8006ada:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00e      	beq.n	8006b00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ae2:	20a8      	movs	r0, #168	@ 0xa8
 8006ae4:	f001 fc72 	bl	80083cc <pvPortMalloc>
 8006ae8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	631a      	str	r2, [r3, #48]	@ 0x30
 8006af6:	e005      	b.n	8006b04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006af8:	6978      	ldr	r0, [r7, #20]
 8006afa:	f001 fd35 	bl	8008568 <vPortFree>
 8006afe:	e001      	b.n	8006b04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d017      	beq.n	8006b3a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b12:	88fa      	ldrh	r2, [r7, #6]
 8006b14:	2300      	movs	r3, #0
 8006b16:	9303      	str	r3, [sp, #12]
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	9302      	str	r3, [sp, #8]
 8006b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1e:	9301      	str	r3, [sp, #4]
 8006b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	68b9      	ldr	r1, [r7, #8]
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 f80f 	bl	8006b4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b2e:	69f8      	ldr	r0, [r7, #28]
 8006b30:	f000 f8b4 	bl	8006c9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b34:	2301      	movs	r3, #1
 8006b36:	61bb      	str	r3, [r7, #24]
 8006b38:	e002      	b.n	8006b40 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b40:	69bb      	ldr	r3, [r7, #24]
	}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3720      	adds	r7, #32
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
	...

08006b4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	461a      	mov	r2, r3
 8006b64:	21a5      	movs	r1, #165	@ 0xa5
 8006b66:	f001 fe1f 	bl	80087a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b74:	3b01      	subs	r3, #1
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	f023 0307 	bic.w	r3, r3, #7
 8006b82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00b      	beq.n	8006ba6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	617b      	str	r3, [r7, #20]
}
 8006ba0:	bf00      	nop
 8006ba2:	bf00      	nop
 8006ba4:	e7fd      	b.n	8006ba2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01f      	beq.n	8006bec <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bac:	2300      	movs	r3, #0
 8006bae:	61fb      	str	r3, [r7, #28]
 8006bb0:	e012      	b.n	8006bd8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	7819      	ldrb	r1, [r3, #0]
 8006bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	3334      	adds	r3, #52	@ 0x34
 8006bc2:	460a      	mov	r2, r1
 8006bc4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	4413      	add	r3, r2
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d006      	beq.n	8006be0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	61fb      	str	r3, [r7, #28]
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	2b0f      	cmp	r3, #15
 8006bdc:	d9e9      	bls.n	8006bb2 <prvInitialiseNewTask+0x66>
 8006bde:	e000      	b.n	8006be2 <prvInitialiseNewTask+0x96>
			{
				break;
 8006be0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bea:	e003      	b.n	8006bf4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf6:	2b37      	cmp	r3, #55	@ 0x37
 8006bf8:	d901      	bls.n	8006bfe <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bfa:	2337      	movs	r3, #55	@ 0x37
 8006bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c02:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c08:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c12:	3304      	adds	r3, #4
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7ff f965 	bl	8005ee4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1c:	3318      	adds	r3, #24
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff f960 	bl	8005ee4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c28:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c32:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c38:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	3354      	adds	r3, #84	@ 0x54
 8006c4e:	224c      	movs	r2, #76	@ 0x4c
 8006c50:	2100      	movs	r1, #0
 8006c52:	4618      	mov	r0, r3
 8006c54:	f001 fda8 	bl	80087a8 <memset>
 8006c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5a:	4a0d      	ldr	r2, [pc, #52]	@ (8006c90 <prvInitialiseNewTask+0x144>)
 8006c5c:	659a      	str	r2, [r3, #88]	@ 0x58
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c60:	4a0c      	ldr	r2, [pc, #48]	@ (8006c94 <prvInitialiseNewTask+0x148>)
 8006c62:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c66:	4a0c      	ldr	r2, [pc, #48]	@ (8006c98 <prvInitialiseNewTask+0x14c>)
 8006c68:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	68f9      	ldr	r1, [r7, #12]
 8006c6e:	69b8      	ldr	r0, [r7, #24]
 8006c70:	f001 f95a 	bl	8007f28 <pxPortInitialiseStack>
 8006c74:	4602      	mov	r2, r0
 8006c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d002      	beq.n	8006c86 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c86:	bf00      	nop
 8006c88:	3720      	adds	r7, #32
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	20001bc8 	.word	0x20001bc8
 8006c94:	20001c30 	.word	0x20001c30
 8006c98:	20001c98 	.word	0x20001c98

08006c9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ca4:	f001 fa70 	bl	8008188 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8006d60 <prvAddNewTaskToReadyList+0xc4>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3301      	adds	r3, #1
 8006cae:	4a2c      	ldr	r2, [pc, #176]	@ (8006d60 <prvAddNewTaskToReadyList+0xc4>)
 8006cb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8006d64 <prvAddNewTaskToReadyList+0xc8>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d109      	bne.n	8006cce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cba:	4a2a      	ldr	r2, [pc, #168]	@ (8006d64 <prvAddNewTaskToReadyList+0xc8>)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cc0:	4b27      	ldr	r3, [pc, #156]	@ (8006d60 <prvAddNewTaskToReadyList+0xc4>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d110      	bne.n	8006cea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006cc8:	f000 fc2e 	bl	8007528 <prvInitialiseTaskLists>
 8006ccc:	e00d      	b.n	8006cea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cce:	4b26      	ldr	r3, [pc, #152]	@ (8006d68 <prvAddNewTaskToReadyList+0xcc>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cd6:	4b23      	ldr	r3, [pc, #140]	@ (8006d64 <prvAddNewTaskToReadyList+0xc8>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d802      	bhi.n	8006cea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8006d64 <prvAddNewTaskToReadyList+0xc8>)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cea:	4b20      	ldr	r3, [pc, #128]	@ (8006d6c <prvAddNewTaskToReadyList+0xd0>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	4a1e      	ldr	r2, [pc, #120]	@ (8006d6c <prvAddNewTaskToReadyList+0xd0>)
 8006cf2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8006d6c <prvAddNewTaskToReadyList+0xd0>)
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d00:	4b1b      	ldr	r3, [pc, #108]	@ (8006d70 <prvAddNewTaskToReadyList+0xd4>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d903      	bls.n	8006d10 <prvAddNewTaskToReadyList+0x74>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0c:	4a18      	ldr	r2, [pc, #96]	@ (8006d70 <prvAddNewTaskToReadyList+0xd4>)
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d14:	4613      	mov	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4a15      	ldr	r2, [pc, #84]	@ (8006d74 <prvAddNewTaskToReadyList+0xd8>)
 8006d1e:	441a      	add	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	3304      	adds	r3, #4
 8006d24:	4619      	mov	r1, r3
 8006d26:	4610      	mov	r0, r2
 8006d28:	f7ff f8e9 	bl	8005efe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d2c:	f001 fa5e 	bl	80081ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d30:	4b0d      	ldr	r3, [pc, #52]	@ (8006d68 <prvAddNewTaskToReadyList+0xcc>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00e      	beq.n	8006d56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d38:	4b0a      	ldr	r3, [pc, #40]	@ (8006d64 <prvAddNewTaskToReadyList+0xc8>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d207      	bcs.n	8006d56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d46:	4b0c      	ldr	r3, [pc, #48]	@ (8006d78 <prvAddNewTaskToReadyList+0xdc>)
 8006d48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d56:	bf00      	nop
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000e90 	.word	0x20000e90
 8006d64:	200009bc 	.word	0x200009bc
 8006d68:	20000e9c 	.word	0x20000e9c
 8006d6c:	20000eac 	.word	0x20000eac
 8006d70:	20000e98 	.word	0x20000e98
 8006d74:	200009c0 	.word	0x200009c0
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d018      	beq.n	8006dc0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d8e:	4b14      	ldr	r3, [pc, #80]	@ (8006de0 <vTaskDelay+0x64>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00b      	beq.n	8006dae <vTaskDelay+0x32>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	60bb      	str	r3, [r7, #8]
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	e7fd      	b.n	8006daa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006dae:	f000 f88b 	bl	8006ec8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006db2:	2100      	movs	r1, #0
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fd09 	bl	80077cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006dba:	f000 f893 	bl	8006ee4 <xTaskResumeAll>
 8006dbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d107      	bne.n	8006dd6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006dc6:	4b07      	ldr	r3, [pc, #28]	@ (8006de4 <vTaskDelay+0x68>)
 8006dc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dd6:	bf00      	nop
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20000eb8 	.word	0x20000eb8
 8006de4:	e000ed04 	.word	0xe000ed04

08006de8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08a      	sub	sp, #40	@ 0x28
 8006dec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006df6:	463a      	mov	r2, r7
 8006df8:	1d39      	adds	r1, r7, #4
 8006dfa:	f107 0308 	add.w	r3, r7, #8
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7ff f81c 	bl	8005e3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	9202      	str	r2, [sp, #8]
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	2300      	movs	r3, #0
 8006e14:	460a      	mov	r2, r1
 8006e16:	4924      	ldr	r1, [pc, #144]	@ (8006ea8 <vTaskStartScheduler+0xc0>)
 8006e18:	4824      	ldr	r0, [pc, #144]	@ (8006eac <vTaskStartScheduler+0xc4>)
 8006e1a:	f7ff fdf1 	bl	8006a00 <xTaskCreateStatic>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	4a23      	ldr	r2, [pc, #140]	@ (8006eb0 <vTaskStartScheduler+0xc8>)
 8006e22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e24:	4b22      	ldr	r3, [pc, #136]	@ (8006eb0 <vTaskStartScheduler+0xc8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	e001      	b.n	8006e36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d102      	bne.n	8006e42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e3c:	f000 fd1a 	bl	8007874 <xTimerCreateTimerTask>
 8006e40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d11b      	bne.n	8006e80 <vTaskStartScheduler+0x98>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	613b      	str	r3, [r7, #16]
}
 8006e5a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e5c:	4b15      	ldr	r3, [pc, #84]	@ (8006eb4 <vTaskStartScheduler+0xcc>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3354      	adds	r3, #84	@ 0x54
 8006e62:	4a15      	ldr	r2, [pc, #84]	@ (8006eb8 <vTaskStartScheduler+0xd0>)
 8006e64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e66:	4b15      	ldr	r3, [pc, #84]	@ (8006ebc <vTaskStartScheduler+0xd4>)
 8006e68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e6e:	4b14      	ldr	r3, [pc, #80]	@ (8006ec0 <vTaskStartScheduler+0xd8>)
 8006e70:	2201      	movs	r2, #1
 8006e72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e74:	4b13      	ldr	r3, [pc, #76]	@ (8006ec4 <vTaskStartScheduler+0xdc>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e7a:	f001 f8e1 	bl	8008040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e7e:	e00f      	b.n	8006ea0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e86:	d10b      	bne.n	8006ea0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	60fb      	str	r3, [r7, #12]
}
 8006e9a:	bf00      	nop
 8006e9c:	bf00      	nop
 8006e9e:	e7fd      	b.n	8006e9c <vTaskStartScheduler+0xb4>
}
 8006ea0:	bf00      	nop
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	080089dc 	.word	0x080089dc
 8006eac:	080074f9 	.word	0x080074f9
 8006eb0:	20000eb4 	.word	0x20000eb4
 8006eb4:	200009bc 	.word	0x200009bc
 8006eb8:	20000010 	.word	0x20000010
 8006ebc:	20000eb0 	.word	0x20000eb0
 8006ec0:	20000e9c 	.word	0x20000e9c
 8006ec4:	20000e94 	.word	0x20000e94

08006ec8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ec8:	b480      	push	{r7}
 8006eca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ecc:	4b04      	ldr	r3, [pc, #16]	@ (8006ee0 <vTaskSuspendAll+0x18>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	4a03      	ldr	r2, [pc, #12]	@ (8006ee0 <vTaskSuspendAll+0x18>)
 8006ed4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006ed6:	bf00      	nop
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	20000eb8 	.word	0x20000eb8

08006ee4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ef2:	4b42      	ldr	r3, [pc, #264]	@ (8006ffc <xTaskResumeAll+0x118>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10b      	bne.n	8006f12 <xTaskResumeAll+0x2e>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	603b      	str	r3, [r7, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	bf00      	nop
 8006f10:	e7fd      	b.n	8006f0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f12:	f001 f939 	bl	8008188 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f16:	4b39      	ldr	r3, [pc, #228]	@ (8006ffc <xTaskResumeAll+0x118>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	4a37      	ldr	r2, [pc, #220]	@ (8006ffc <xTaskResumeAll+0x118>)
 8006f1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f20:	4b36      	ldr	r3, [pc, #216]	@ (8006ffc <xTaskResumeAll+0x118>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d162      	bne.n	8006fee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f28:	4b35      	ldr	r3, [pc, #212]	@ (8007000 <xTaskResumeAll+0x11c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d05e      	beq.n	8006fee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f30:	e02f      	b.n	8006f92 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f32:	4b34      	ldr	r3, [pc, #208]	@ (8007004 <xTaskResumeAll+0x120>)
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3318      	adds	r3, #24
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7ff f83a 	bl	8005fb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3304      	adds	r3, #4
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff f835 	bl	8005fb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f52:	4b2d      	ldr	r3, [pc, #180]	@ (8007008 <xTaskResumeAll+0x124>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d903      	bls.n	8006f62 <xTaskResumeAll+0x7e>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8007008 <xTaskResumeAll+0x124>)
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f66:	4613      	mov	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4a27      	ldr	r2, [pc, #156]	@ (800700c <xTaskResumeAll+0x128>)
 8006f70:	441a      	add	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3304      	adds	r3, #4
 8006f76:	4619      	mov	r1, r3
 8006f78:	4610      	mov	r0, r2
 8006f7a:	f7fe ffc0 	bl	8005efe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f82:	4b23      	ldr	r3, [pc, #140]	@ (8007010 <xTaskResumeAll+0x12c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d302      	bcc.n	8006f92 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006f8c:	4b21      	ldr	r3, [pc, #132]	@ (8007014 <xTaskResumeAll+0x130>)
 8006f8e:	2201      	movs	r2, #1
 8006f90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f92:	4b1c      	ldr	r3, [pc, #112]	@ (8007004 <xTaskResumeAll+0x120>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1cb      	bne.n	8006f32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006fa0:	f000 fb66 	bl	8007670 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8007018 <xTaskResumeAll+0x134>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d010      	beq.n	8006fd2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006fb0:	f000 f846 	bl	8007040 <xTaskIncrementTick>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006fba:	4b16      	ldr	r3, [pc, #88]	@ (8007014 <xTaskResumeAll+0x130>)
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1f1      	bne.n	8006fb0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006fcc:	4b12      	ldr	r3, [pc, #72]	@ (8007018 <xTaskResumeAll+0x134>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fd2:	4b10      	ldr	r3, [pc, #64]	@ (8007014 <xTaskResumeAll+0x130>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d009      	beq.n	8006fee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fde:	4b0f      	ldr	r3, [pc, #60]	@ (800701c <xTaskResumeAll+0x138>)
 8006fe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fee:	f001 f8fd 	bl	80081ec <vPortExitCritical>

	return xAlreadyYielded;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20000eb8 	.word	0x20000eb8
 8007000:	20000e90 	.word	0x20000e90
 8007004:	20000e50 	.word	0x20000e50
 8007008:	20000e98 	.word	0x20000e98
 800700c:	200009c0 	.word	0x200009c0
 8007010:	200009bc 	.word	0x200009bc
 8007014:	20000ea4 	.word	0x20000ea4
 8007018:	20000ea0 	.word	0x20000ea0
 800701c:	e000ed04 	.word	0xe000ed04

08007020 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007026:	4b05      	ldr	r3, [pc, #20]	@ (800703c <xTaskGetTickCount+0x1c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800702c:	687b      	ldr	r3, [r7, #4]
}
 800702e:	4618      	mov	r0, r3
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	20000e94 	.word	0x20000e94

08007040 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007046:	2300      	movs	r3, #0
 8007048:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800704a:	4b4f      	ldr	r3, [pc, #316]	@ (8007188 <xTaskIncrementTick+0x148>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	f040 8090 	bne.w	8007174 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007054:	4b4d      	ldr	r3, [pc, #308]	@ (800718c <xTaskIncrementTick+0x14c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3301      	adds	r3, #1
 800705a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800705c:	4a4b      	ldr	r2, [pc, #300]	@ (800718c <xTaskIncrementTick+0x14c>)
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d121      	bne.n	80070ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007068:	4b49      	ldr	r3, [pc, #292]	@ (8007190 <xTaskIncrementTick+0x150>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00b      	beq.n	800708a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	603b      	str	r3, [r7, #0]
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop
 8007088:	e7fd      	b.n	8007086 <xTaskIncrementTick+0x46>
 800708a:	4b41      	ldr	r3, [pc, #260]	@ (8007190 <xTaskIncrementTick+0x150>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	4b40      	ldr	r3, [pc, #256]	@ (8007194 <xTaskIncrementTick+0x154>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a3e      	ldr	r2, [pc, #248]	@ (8007190 <xTaskIncrementTick+0x150>)
 8007096:	6013      	str	r3, [r2, #0]
 8007098:	4a3e      	ldr	r2, [pc, #248]	@ (8007194 <xTaskIncrementTick+0x154>)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	4b3e      	ldr	r3, [pc, #248]	@ (8007198 <xTaskIncrementTick+0x158>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3301      	adds	r3, #1
 80070a4:	4a3c      	ldr	r2, [pc, #240]	@ (8007198 <xTaskIncrementTick+0x158>)
 80070a6:	6013      	str	r3, [r2, #0]
 80070a8:	f000 fae2 	bl	8007670 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070ac:	4b3b      	ldr	r3, [pc, #236]	@ (800719c <xTaskIncrementTick+0x15c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d349      	bcc.n	800714a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070b6:	4b36      	ldr	r3, [pc, #216]	@ (8007190 <xTaskIncrementTick+0x150>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d104      	bne.n	80070ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070c0:	4b36      	ldr	r3, [pc, #216]	@ (800719c <xTaskIncrementTick+0x15c>)
 80070c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070c6:	601a      	str	r2, [r3, #0]
					break;
 80070c8:	e03f      	b.n	800714a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ca:	4b31      	ldr	r3, [pc, #196]	@ (8007190 <xTaskIncrementTick+0x150>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d203      	bcs.n	80070ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070e2:	4a2e      	ldr	r2, [pc, #184]	@ (800719c <xTaskIncrementTick+0x15c>)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070e8:	e02f      	b.n	800714a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	3304      	adds	r3, #4
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe ff62 	bl	8005fb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d004      	beq.n	8007106 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	3318      	adds	r3, #24
 8007100:	4618      	mov	r0, r3
 8007102:	f7fe ff59 	bl	8005fb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800710a:	4b25      	ldr	r3, [pc, #148]	@ (80071a0 <xTaskIncrementTick+0x160>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	429a      	cmp	r2, r3
 8007110:	d903      	bls.n	800711a <xTaskIncrementTick+0xda>
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007116:	4a22      	ldr	r2, [pc, #136]	@ (80071a0 <xTaskIncrementTick+0x160>)
 8007118:	6013      	str	r3, [r2, #0]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800711e:	4613      	mov	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4a1f      	ldr	r2, [pc, #124]	@ (80071a4 <xTaskIncrementTick+0x164>)
 8007128:	441a      	add	r2, r3
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	3304      	adds	r3, #4
 800712e:	4619      	mov	r1, r3
 8007130:	4610      	mov	r0, r2
 8007132:	f7fe fee4 	bl	8005efe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800713a:	4b1b      	ldr	r3, [pc, #108]	@ (80071a8 <xTaskIncrementTick+0x168>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007140:	429a      	cmp	r2, r3
 8007142:	d3b8      	bcc.n	80070b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007144:	2301      	movs	r3, #1
 8007146:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007148:	e7b5      	b.n	80070b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800714a:	4b17      	ldr	r3, [pc, #92]	@ (80071a8 <xTaskIncrementTick+0x168>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007150:	4914      	ldr	r1, [pc, #80]	@ (80071a4 <xTaskIncrementTick+0x164>)
 8007152:	4613      	mov	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	440b      	add	r3, r1
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d901      	bls.n	8007166 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007162:	2301      	movs	r3, #1
 8007164:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007166:	4b11      	ldr	r3, [pc, #68]	@ (80071ac <xTaskIncrementTick+0x16c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d007      	beq.n	800717e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800716e:	2301      	movs	r3, #1
 8007170:	617b      	str	r3, [r7, #20]
 8007172:	e004      	b.n	800717e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007174:	4b0e      	ldr	r3, [pc, #56]	@ (80071b0 <xTaskIncrementTick+0x170>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3301      	adds	r3, #1
 800717a:	4a0d      	ldr	r2, [pc, #52]	@ (80071b0 <xTaskIncrementTick+0x170>)
 800717c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800717e:	697b      	ldr	r3, [r7, #20]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	20000eb8 	.word	0x20000eb8
 800718c:	20000e94 	.word	0x20000e94
 8007190:	20000e48 	.word	0x20000e48
 8007194:	20000e4c 	.word	0x20000e4c
 8007198:	20000ea8 	.word	0x20000ea8
 800719c:	20000eb0 	.word	0x20000eb0
 80071a0:	20000e98 	.word	0x20000e98
 80071a4:	200009c0 	.word	0x200009c0
 80071a8:	200009bc 	.word	0x200009bc
 80071ac:	20000ea4 	.word	0x20000ea4
 80071b0:	20000ea0 	.word	0x20000ea0

080071b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071ba:	4b2b      	ldr	r3, [pc, #172]	@ (8007268 <vTaskSwitchContext+0xb4>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071c2:	4b2a      	ldr	r3, [pc, #168]	@ (800726c <vTaskSwitchContext+0xb8>)
 80071c4:	2201      	movs	r2, #1
 80071c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071c8:	e047      	b.n	800725a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80071ca:	4b28      	ldr	r3, [pc, #160]	@ (800726c <vTaskSwitchContext+0xb8>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071d0:	4b27      	ldr	r3, [pc, #156]	@ (8007270 <vTaskSwitchContext+0xbc>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	60fb      	str	r3, [r7, #12]
 80071d6:	e011      	b.n	80071fc <vTaskSwitchContext+0x48>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10b      	bne.n	80071f6 <vTaskSwitchContext+0x42>
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	607b      	str	r3, [r7, #4]
}
 80071f0:	bf00      	nop
 80071f2:	bf00      	nop
 80071f4:	e7fd      	b.n	80071f2 <vTaskSwitchContext+0x3e>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3b01      	subs	r3, #1
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	491d      	ldr	r1, [pc, #116]	@ (8007274 <vTaskSwitchContext+0xc0>)
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4613      	mov	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	440b      	add	r3, r1
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0e3      	beq.n	80071d8 <vTaskSwitchContext+0x24>
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4a16      	ldr	r2, [pc, #88]	@ (8007274 <vTaskSwitchContext+0xc0>)
 800721c:	4413      	add	r3, r2
 800721e:	60bb      	str	r3, [r7, #8]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	605a      	str	r2, [r3, #4]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	3308      	adds	r3, #8
 8007232:	429a      	cmp	r2, r3
 8007234:	d104      	bne.n	8007240 <vTaskSwitchContext+0x8c>
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	605a      	str	r2, [r3, #4]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	4a0c      	ldr	r2, [pc, #48]	@ (8007278 <vTaskSwitchContext+0xc4>)
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	4a09      	ldr	r2, [pc, #36]	@ (8007270 <vTaskSwitchContext+0xbc>)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007250:	4b09      	ldr	r3, [pc, #36]	@ (8007278 <vTaskSwitchContext+0xc4>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	3354      	adds	r3, #84	@ 0x54
 8007256:	4a09      	ldr	r2, [pc, #36]	@ (800727c <vTaskSwitchContext+0xc8>)
 8007258:	6013      	str	r3, [r2, #0]
}
 800725a:	bf00      	nop
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	20000eb8 	.word	0x20000eb8
 800726c:	20000ea4 	.word	0x20000ea4
 8007270:	20000e98 	.word	0x20000e98
 8007274:	200009c0 	.word	0x200009c0
 8007278:	200009bc 	.word	0x200009bc
 800727c:	20000010 	.word	0x20000010

08007280 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10b      	bne.n	80072a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	60fb      	str	r3, [r7, #12]
}
 80072a2:	bf00      	nop
 80072a4:	bf00      	nop
 80072a6:	e7fd      	b.n	80072a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072a8:	4b07      	ldr	r3, [pc, #28]	@ (80072c8 <vTaskPlaceOnEventList+0x48>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3318      	adds	r3, #24
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7fe fe48 	bl	8005f46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072b6:	2101      	movs	r1, #1
 80072b8:	6838      	ldr	r0, [r7, #0]
 80072ba:	f000 fa87 	bl	80077cc <prvAddCurrentTaskToDelayedList>
}
 80072be:	bf00      	nop
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	200009bc 	.word	0x200009bc

080072cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10b      	bne.n	80072f6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	617b      	str	r3, [r7, #20]
}
 80072f0:	bf00      	nop
 80072f2:	bf00      	nop
 80072f4:	e7fd      	b.n	80072f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007320 <vTaskPlaceOnEventListRestricted+0x54>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3318      	adds	r3, #24
 80072fc:	4619      	mov	r1, r3
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f7fe fdfd 	bl	8005efe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800730a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800730e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	68b8      	ldr	r0, [r7, #8]
 8007314:	f000 fa5a 	bl	80077cc <prvAddCurrentTaskToDelayedList>
	}
 8007318:	bf00      	nop
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	200009bc 	.word	0x200009bc

08007324 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10b      	bne.n	8007352 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800733a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	60fb      	str	r3, [r7, #12]
}
 800734c:	bf00      	nop
 800734e:	bf00      	nop
 8007350:	e7fd      	b.n	800734e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	3318      	adds	r3, #24
 8007356:	4618      	mov	r0, r3
 8007358:	f7fe fe2e 	bl	8005fb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800735c:	4b1d      	ldr	r3, [pc, #116]	@ (80073d4 <xTaskRemoveFromEventList+0xb0>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d11d      	bne.n	80073a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	3304      	adds	r3, #4
 8007368:	4618      	mov	r0, r3
 800736a:	f7fe fe25 	bl	8005fb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007372:	4b19      	ldr	r3, [pc, #100]	@ (80073d8 <xTaskRemoveFromEventList+0xb4>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d903      	bls.n	8007382 <xTaskRemoveFromEventList+0x5e>
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737e:	4a16      	ldr	r2, [pc, #88]	@ (80073d8 <xTaskRemoveFromEventList+0xb4>)
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007386:	4613      	mov	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4a13      	ldr	r2, [pc, #76]	@ (80073dc <xTaskRemoveFromEventList+0xb8>)
 8007390:	441a      	add	r2, r3
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	3304      	adds	r3, #4
 8007396:	4619      	mov	r1, r3
 8007398:	4610      	mov	r0, r2
 800739a:	f7fe fdb0 	bl	8005efe <vListInsertEnd>
 800739e:	e005      	b.n	80073ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	3318      	adds	r3, #24
 80073a4:	4619      	mov	r1, r3
 80073a6:	480e      	ldr	r0, [pc, #56]	@ (80073e0 <xTaskRemoveFromEventList+0xbc>)
 80073a8:	f7fe fda9 	bl	8005efe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073b0:	4b0c      	ldr	r3, [pc, #48]	@ (80073e4 <xTaskRemoveFromEventList+0xc0>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d905      	bls.n	80073c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073ba:	2301      	movs	r3, #1
 80073bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073be:	4b0a      	ldr	r3, [pc, #40]	@ (80073e8 <xTaskRemoveFromEventList+0xc4>)
 80073c0:	2201      	movs	r2, #1
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	e001      	b.n	80073ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80073c6:	2300      	movs	r3, #0
 80073c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073ca:	697b      	ldr	r3, [r7, #20]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20000eb8 	.word	0x20000eb8
 80073d8:	20000e98 	.word	0x20000e98
 80073dc:	200009c0 	.word	0x200009c0
 80073e0:	20000e50 	.word	0x20000e50
 80073e4:	200009bc 	.word	0x200009bc
 80073e8:	20000ea4 	.word	0x20000ea4

080073ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073f4:	4b06      	ldr	r3, [pc, #24]	@ (8007410 <vTaskInternalSetTimeOutState+0x24>)
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073fc:	4b05      	ldr	r3, [pc, #20]	@ (8007414 <vTaskInternalSetTimeOutState+0x28>)
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	605a      	str	r2, [r3, #4]
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	20000ea8 	.word	0x20000ea8
 8007414:	20000e94 	.word	0x20000e94

08007418 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10b      	bne.n	8007440 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	613b      	str	r3, [r7, #16]
}
 800743a:	bf00      	nop
 800743c:	bf00      	nop
 800743e:	e7fd      	b.n	800743c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10b      	bne.n	800745e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	60fb      	str	r3, [r7, #12]
}
 8007458:	bf00      	nop
 800745a:	bf00      	nop
 800745c:	e7fd      	b.n	800745a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800745e:	f000 fe93 	bl	8008188 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007462:	4b1d      	ldr	r3, [pc, #116]	@ (80074d8 <xTaskCheckForTimeOut+0xc0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800747a:	d102      	bne.n	8007482 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800747c:	2300      	movs	r3, #0
 800747e:	61fb      	str	r3, [r7, #28]
 8007480:	e023      	b.n	80074ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	4b15      	ldr	r3, [pc, #84]	@ (80074dc <xTaskCheckForTimeOut+0xc4>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	429a      	cmp	r2, r3
 800748c:	d007      	beq.n	800749e <xTaskCheckForTimeOut+0x86>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	429a      	cmp	r2, r3
 8007496:	d302      	bcc.n	800749e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007498:	2301      	movs	r3, #1
 800749a:	61fb      	str	r3, [r7, #28]
 800749c:	e015      	b.n	80074ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d20b      	bcs.n	80074c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	1ad2      	subs	r2, r2, r3
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7ff ff99 	bl	80073ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074ba:	2300      	movs	r3, #0
 80074bc:	61fb      	str	r3, [r7, #28]
 80074be:	e004      	b.n	80074ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074c6:	2301      	movs	r3, #1
 80074c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074ca:	f000 fe8f 	bl	80081ec <vPortExitCritical>

	return xReturn;
 80074ce:	69fb      	ldr	r3, [r7, #28]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3720      	adds	r7, #32
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	20000e94 	.word	0x20000e94
 80074dc:	20000ea8 	.word	0x20000ea8

080074e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074e0:	b480      	push	{r7}
 80074e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074e4:	4b03      	ldr	r3, [pc, #12]	@ (80074f4 <vTaskMissedYield+0x14>)
 80074e6:	2201      	movs	r2, #1
 80074e8:	601a      	str	r2, [r3, #0]
}
 80074ea:	bf00      	nop
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	20000ea4 	.word	0x20000ea4

080074f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007500:	f000 f852 	bl	80075a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007504:	4b06      	ldr	r3, [pc, #24]	@ (8007520 <prvIdleTask+0x28>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d9f9      	bls.n	8007500 <prvIdleTask+0x8>
			{
				taskYIELD();
 800750c:	4b05      	ldr	r3, [pc, #20]	@ (8007524 <prvIdleTask+0x2c>)
 800750e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800751c:	e7f0      	b.n	8007500 <prvIdleTask+0x8>
 800751e:	bf00      	nop
 8007520:	200009c0 	.word	0x200009c0
 8007524:	e000ed04 	.word	0xe000ed04

08007528 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800752e:	2300      	movs	r3, #0
 8007530:	607b      	str	r3, [r7, #4]
 8007532:	e00c      	b.n	800754e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	4613      	mov	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4a12      	ldr	r2, [pc, #72]	@ (8007588 <prvInitialiseTaskLists+0x60>)
 8007540:	4413      	add	r3, r2
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe fcae 	bl	8005ea4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3301      	adds	r3, #1
 800754c:	607b      	str	r3, [r7, #4]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b37      	cmp	r3, #55	@ 0x37
 8007552:	d9ef      	bls.n	8007534 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007554:	480d      	ldr	r0, [pc, #52]	@ (800758c <prvInitialiseTaskLists+0x64>)
 8007556:	f7fe fca5 	bl	8005ea4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800755a:	480d      	ldr	r0, [pc, #52]	@ (8007590 <prvInitialiseTaskLists+0x68>)
 800755c:	f7fe fca2 	bl	8005ea4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007560:	480c      	ldr	r0, [pc, #48]	@ (8007594 <prvInitialiseTaskLists+0x6c>)
 8007562:	f7fe fc9f 	bl	8005ea4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007566:	480c      	ldr	r0, [pc, #48]	@ (8007598 <prvInitialiseTaskLists+0x70>)
 8007568:	f7fe fc9c 	bl	8005ea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800756c:	480b      	ldr	r0, [pc, #44]	@ (800759c <prvInitialiseTaskLists+0x74>)
 800756e:	f7fe fc99 	bl	8005ea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007572:	4b0b      	ldr	r3, [pc, #44]	@ (80075a0 <prvInitialiseTaskLists+0x78>)
 8007574:	4a05      	ldr	r2, [pc, #20]	@ (800758c <prvInitialiseTaskLists+0x64>)
 8007576:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007578:	4b0a      	ldr	r3, [pc, #40]	@ (80075a4 <prvInitialiseTaskLists+0x7c>)
 800757a:	4a05      	ldr	r2, [pc, #20]	@ (8007590 <prvInitialiseTaskLists+0x68>)
 800757c:	601a      	str	r2, [r3, #0]
}
 800757e:	bf00      	nop
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	200009c0 	.word	0x200009c0
 800758c:	20000e20 	.word	0x20000e20
 8007590:	20000e34 	.word	0x20000e34
 8007594:	20000e50 	.word	0x20000e50
 8007598:	20000e64 	.word	0x20000e64
 800759c:	20000e7c 	.word	0x20000e7c
 80075a0:	20000e48 	.word	0x20000e48
 80075a4:	20000e4c 	.word	0x20000e4c

080075a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075ae:	e019      	b.n	80075e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80075b0:	f000 fdea 	bl	8008188 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075b4:	4b10      	ldr	r3, [pc, #64]	@ (80075f8 <prvCheckTasksWaitingTermination+0x50>)
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3304      	adds	r3, #4
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fe fcf9 	bl	8005fb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075c6:	4b0d      	ldr	r3, [pc, #52]	@ (80075fc <prvCheckTasksWaitingTermination+0x54>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	4a0b      	ldr	r2, [pc, #44]	@ (80075fc <prvCheckTasksWaitingTermination+0x54>)
 80075ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007600 <prvCheckTasksWaitingTermination+0x58>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	4a0a      	ldr	r2, [pc, #40]	@ (8007600 <prvCheckTasksWaitingTermination+0x58>)
 80075d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075da:	f000 fe07 	bl	80081ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f810 	bl	8007604 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075e4:	4b06      	ldr	r3, [pc, #24]	@ (8007600 <prvCheckTasksWaitingTermination+0x58>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1e1      	bne.n	80075b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075ec:	bf00      	nop
 80075ee:	bf00      	nop
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20000e64 	.word	0x20000e64
 80075fc:	20000e90 	.word	0x20000e90
 8007600:	20000e78 	.word	0x20000e78

08007604 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	3354      	adds	r3, #84	@ 0x54
 8007610:	4618      	mov	r0, r3
 8007612:	f001 f8d1 	bl	80087b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800761c:	2b00      	cmp	r3, #0
 800761e:	d108      	bne.n	8007632 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007624:	4618      	mov	r0, r3
 8007626:	f000 ff9f 	bl	8008568 <vPortFree>
				vPortFree( pxTCB );
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 ff9c 	bl	8008568 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007630:	e019      	b.n	8007666 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007638:	2b01      	cmp	r3, #1
 800763a:	d103      	bne.n	8007644 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 ff93 	bl	8008568 <vPortFree>
	}
 8007642:	e010      	b.n	8007666 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800764a:	2b02      	cmp	r3, #2
 800764c:	d00b      	beq.n	8007666 <prvDeleteTCB+0x62>
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	60fb      	str	r3, [r7, #12]
}
 8007660:	bf00      	nop
 8007662:	bf00      	nop
 8007664:	e7fd      	b.n	8007662 <prvDeleteTCB+0x5e>
	}
 8007666:	bf00      	nop
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007676:	4b0c      	ldr	r3, [pc, #48]	@ (80076a8 <prvResetNextTaskUnblockTime+0x38>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d104      	bne.n	800768a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007680:	4b0a      	ldr	r3, [pc, #40]	@ (80076ac <prvResetNextTaskUnblockTime+0x3c>)
 8007682:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007686:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007688:	e008      	b.n	800769c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800768a:	4b07      	ldr	r3, [pc, #28]	@ (80076a8 <prvResetNextTaskUnblockTime+0x38>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	4a04      	ldr	r2, [pc, #16]	@ (80076ac <prvResetNextTaskUnblockTime+0x3c>)
 800769a:	6013      	str	r3, [r2, #0]
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	20000e48 	.word	0x20000e48
 80076ac:	20000eb0 	.word	0x20000eb0

080076b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076b6:	4b0b      	ldr	r3, [pc, #44]	@ (80076e4 <xTaskGetSchedulerState+0x34>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d102      	bne.n	80076c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076be:	2301      	movs	r3, #1
 80076c0:	607b      	str	r3, [r7, #4]
 80076c2:	e008      	b.n	80076d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076c4:	4b08      	ldr	r3, [pc, #32]	@ (80076e8 <xTaskGetSchedulerState+0x38>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d102      	bne.n	80076d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076cc:	2302      	movs	r3, #2
 80076ce:	607b      	str	r3, [r7, #4]
 80076d0:	e001      	b.n	80076d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076d2:	2300      	movs	r3, #0
 80076d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076d6:	687b      	ldr	r3, [r7, #4]
	}
 80076d8:	4618      	mov	r0, r3
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	20000e9c 	.word	0x20000e9c
 80076e8:	20000eb8 	.word	0x20000eb8

080076ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076f8:	2300      	movs	r3, #0
 80076fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d058      	beq.n	80077b4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007702:	4b2f      	ldr	r3, [pc, #188]	@ (80077c0 <xTaskPriorityDisinherit+0xd4>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	429a      	cmp	r2, r3
 800770a:	d00b      	beq.n	8007724 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	60fb      	str	r3, [r7, #12]
}
 800771e:	bf00      	nop
 8007720:	bf00      	nop
 8007722:	e7fd      	b.n	8007720 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10b      	bne.n	8007744 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	60bb      	str	r3, [r7, #8]
}
 800773e:	bf00      	nop
 8007740:	bf00      	nop
 8007742:	e7fd      	b.n	8007740 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007748:	1e5a      	subs	r2, r3, #1
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007756:	429a      	cmp	r2, r3
 8007758:	d02c      	beq.n	80077b4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800775e:	2b00      	cmp	r3, #0
 8007760:	d128      	bne.n	80077b4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	3304      	adds	r3, #4
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe fc26 	bl	8005fb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007778:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007784:	4b0f      	ldr	r3, [pc, #60]	@ (80077c4 <xTaskPriorityDisinherit+0xd8>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	429a      	cmp	r2, r3
 800778a:	d903      	bls.n	8007794 <xTaskPriorityDisinherit+0xa8>
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007790:	4a0c      	ldr	r2, [pc, #48]	@ (80077c4 <xTaskPriorityDisinherit+0xd8>)
 8007792:	6013      	str	r3, [r2, #0]
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007798:	4613      	mov	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4a09      	ldr	r2, [pc, #36]	@ (80077c8 <xTaskPriorityDisinherit+0xdc>)
 80077a2:	441a      	add	r2, r3
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	3304      	adds	r3, #4
 80077a8:	4619      	mov	r1, r3
 80077aa:	4610      	mov	r0, r2
 80077ac:	f7fe fba7 	bl	8005efe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077b0:	2301      	movs	r3, #1
 80077b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077b4:	697b      	ldr	r3, [r7, #20]
	}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	200009bc 	.word	0x200009bc
 80077c4:	20000e98 	.word	0x20000e98
 80077c8:	200009c0 	.word	0x200009c0

080077cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077d6:	4b21      	ldr	r3, [pc, #132]	@ (800785c <prvAddCurrentTaskToDelayedList+0x90>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077dc:	4b20      	ldr	r3, [pc, #128]	@ (8007860 <prvAddCurrentTaskToDelayedList+0x94>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3304      	adds	r3, #4
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fe fbe8 	bl	8005fb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077ee:	d10a      	bne.n	8007806 <prvAddCurrentTaskToDelayedList+0x3a>
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d007      	beq.n	8007806 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007860 <prvAddCurrentTaskToDelayedList+0x94>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3304      	adds	r3, #4
 80077fc:	4619      	mov	r1, r3
 80077fe:	4819      	ldr	r0, [pc, #100]	@ (8007864 <prvAddCurrentTaskToDelayedList+0x98>)
 8007800:	f7fe fb7d 	bl	8005efe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007804:	e026      	b.n	8007854 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4413      	add	r3, r2
 800780c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800780e:	4b14      	ldr	r3, [pc, #80]	@ (8007860 <prvAddCurrentTaskToDelayedList+0x94>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	429a      	cmp	r2, r3
 800781c:	d209      	bcs.n	8007832 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800781e:	4b12      	ldr	r3, [pc, #72]	@ (8007868 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	4b0f      	ldr	r3, [pc, #60]	@ (8007860 <prvAddCurrentTaskToDelayedList+0x94>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3304      	adds	r3, #4
 8007828:	4619      	mov	r1, r3
 800782a:	4610      	mov	r0, r2
 800782c:	f7fe fb8b 	bl	8005f46 <vListInsert>
}
 8007830:	e010      	b.n	8007854 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007832:	4b0e      	ldr	r3, [pc, #56]	@ (800786c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	4b0a      	ldr	r3, [pc, #40]	@ (8007860 <prvAddCurrentTaskToDelayedList+0x94>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3304      	adds	r3, #4
 800783c:	4619      	mov	r1, r3
 800783e:	4610      	mov	r0, r2
 8007840:	f7fe fb81 	bl	8005f46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007844:	4b0a      	ldr	r3, [pc, #40]	@ (8007870 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	429a      	cmp	r2, r3
 800784c:	d202      	bcs.n	8007854 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800784e:	4a08      	ldr	r2, [pc, #32]	@ (8007870 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	6013      	str	r3, [r2, #0]
}
 8007854:	bf00      	nop
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	20000e94 	.word	0x20000e94
 8007860:	200009bc 	.word	0x200009bc
 8007864:	20000e7c 	.word	0x20000e7c
 8007868:	20000e4c 	.word	0x20000e4c
 800786c:	20000e48 	.word	0x20000e48
 8007870:	20000eb0 	.word	0x20000eb0

08007874 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b08a      	sub	sp, #40	@ 0x28
 8007878:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800787a:	2300      	movs	r3, #0
 800787c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800787e:	f000 fb13 	bl	8007ea8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007882:	4b1d      	ldr	r3, [pc, #116]	@ (80078f8 <xTimerCreateTimerTask+0x84>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d021      	beq.n	80078ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800788e:	2300      	movs	r3, #0
 8007890:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007892:	1d3a      	adds	r2, r7, #4
 8007894:	f107 0108 	add.w	r1, r7, #8
 8007898:	f107 030c 	add.w	r3, r7, #12
 800789c:	4618      	mov	r0, r3
 800789e:	f7fe fae7 	bl	8005e70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078a2:	6879      	ldr	r1, [r7, #4]
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	9202      	str	r2, [sp, #8]
 80078aa:	9301      	str	r3, [sp, #4]
 80078ac:	2302      	movs	r3, #2
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	2300      	movs	r3, #0
 80078b2:	460a      	mov	r2, r1
 80078b4:	4911      	ldr	r1, [pc, #68]	@ (80078fc <xTimerCreateTimerTask+0x88>)
 80078b6:	4812      	ldr	r0, [pc, #72]	@ (8007900 <xTimerCreateTimerTask+0x8c>)
 80078b8:	f7ff f8a2 	bl	8006a00 <xTaskCreateStatic>
 80078bc:	4603      	mov	r3, r0
 80078be:	4a11      	ldr	r2, [pc, #68]	@ (8007904 <xTimerCreateTimerTask+0x90>)
 80078c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078c2:	4b10      	ldr	r3, [pc, #64]	@ (8007904 <xTimerCreateTimerTask+0x90>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078ca:	2301      	movs	r3, #1
 80078cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10b      	bne.n	80078ec <xTimerCreateTimerTask+0x78>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	613b      	str	r3, [r7, #16]
}
 80078e6:	bf00      	nop
 80078e8:	bf00      	nop
 80078ea:	e7fd      	b.n	80078e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80078ec:	697b      	ldr	r3, [r7, #20]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20000eec 	.word	0x20000eec
 80078fc:	080089e4 	.word	0x080089e4
 8007900:	08007a41 	.word	0x08007a41
 8007904:	20000ef0 	.word	0x20000ef0

08007908 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08a      	sub	sp, #40	@ 0x28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007916:	2300      	movs	r3, #0
 8007918:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10b      	bne.n	8007938 <xTimerGenericCommand+0x30>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	623b      	str	r3, [r7, #32]
}
 8007932:	bf00      	nop
 8007934:	bf00      	nop
 8007936:	e7fd      	b.n	8007934 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007938:	4b19      	ldr	r3, [pc, #100]	@ (80079a0 <xTimerGenericCommand+0x98>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d02a      	beq.n	8007996 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b05      	cmp	r3, #5
 8007950:	dc18      	bgt.n	8007984 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007952:	f7ff fead 	bl	80076b0 <xTaskGetSchedulerState>
 8007956:	4603      	mov	r3, r0
 8007958:	2b02      	cmp	r3, #2
 800795a:	d109      	bne.n	8007970 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800795c:	4b10      	ldr	r3, [pc, #64]	@ (80079a0 <xTimerGenericCommand+0x98>)
 800795e:	6818      	ldr	r0, [r3, #0]
 8007960:	f107 0110 	add.w	r1, r7, #16
 8007964:	2300      	movs	r3, #0
 8007966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007968:	f7fe fc5a 	bl	8006220 <xQueueGenericSend>
 800796c:	6278      	str	r0, [r7, #36]	@ 0x24
 800796e:	e012      	b.n	8007996 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007970:	4b0b      	ldr	r3, [pc, #44]	@ (80079a0 <xTimerGenericCommand+0x98>)
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	f107 0110 	add.w	r1, r7, #16
 8007978:	2300      	movs	r3, #0
 800797a:	2200      	movs	r2, #0
 800797c:	f7fe fc50 	bl	8006220 <xQueueGenericSend>
 8007980:	6278      	str	r0, [r7, #36]	@ 0x24
 8007982:	e008      	b.n	8007996 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007984:	4b06      	ldr	r3, [pc, #24]	@ (80079a0 <xTimerGenericCommand+0x98>)
 8007986:	6818      	ldr	r0, [r3, #0]
 8007988:	f107 0110 	add.w	r1, r7, #16
 800798c:	2300      	movs	r3, #0
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	f7fe fd48 	bl	8006424 <xQueueGenericSendFromISR>
 8007994:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007998:	4618      	mov	r0, r3
 800799a:	3728      	adds	r7, #40	@ 0x28
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	20000eec 	.word	0x20000eec

080079a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b088      	sub	sp, #32
 80079a8:	af02      	add	r7, sp, #8
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ae:	4b23      	ldr	r3, [pc, #140]	@ (8007a3c <prvProcessExpiredTimer+0x98>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	3304      	adds	r3, #4
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fe fafb 	bl	8005fb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d023      	beq.n	8007a18 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	699a      	ldr	r2, [r3, #24]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	18d1      	adds	r1, r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	6978      	ldr	r0, [r7, #20]
 80079de:	f000 f8d5 	bl	8007b8c <prvInsertTimerInActiveList>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d020      	beq.n	8007a2a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079e8:	2300      	movs	r3, #0
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	2300      	movs	r3, #0
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	2100      	movs	r1, #0
 80079f2:	6978      	ldr	r0, [r7, #20]
 80079f4:	f7ff ff88 	bl	8007908 <xTimerGenericCommand>
 80079f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d114      	bne.n	8007a2a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	60fb      	str	r3, [r7, #12]
}
 8007a12:	bf00      	nop
 8007a14:	bf00      	nop
 8007a16:	e7fd      	b.n	8007a14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a1e:	f023 0301 	bic.w	r3, r3, #1
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	6978      	ldr	r0, [r7, #20]
 8007a30:	4798      	blx	r3
}
 8007a32:	bf00      	nop
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000ee4 	.word	0x20000ee4

08007a40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a48:	f107 0308 	add.w	r3, r7, #8
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 f859 	bl	8007b04 <prvGetNextExpireTime>
 8007a52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	4619      	mov	r1, r3
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 f805 	bl	8007a68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a5e:	f000 f8d7 	bl	8007c10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a62:	bf00      	nop
 8007a64:	e7f0      	b.n	8007a48 <prvTimerTask+0x8>
	...

08007a68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a72:	f7ff fa29 	bl	8006ec8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a76:	f107 0308 	add.w	r3, r7, #8
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 f866 	bl	8007b4c <prvSampleTimeNow>
 8007a80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d130      	bne.n	8007aea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10a      	bne.n	8007aa4 <prvProcessTimerOrBlockTask+0x3c>
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d806      	bhi.n	8007aa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a96:	f7ff fa25 	bl	8006ee4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a9a:	68f9      	ldr	r1, [r7, #12]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff ff81 	bl	80079a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007aa2:	e024      	b.n	8007aee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d008      	beq.n	8007abc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007aaa:	4b13      	ldr	r3, [pc, #76]	@ (8007af8 <prvProcessTimerOrBlockTask+0x90>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <prvProcessTimerOrBlockTask+0x50>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e000      	b.n	8007aba <prvProcessTimerOrBlockTask+0x52>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007abc:	4b0f      	ldr	r3, [pc, #60]	@ (8007afc <prvProcessTimerOrBlockTask+0x94>)
 8007abe:	6818      	ldr	r0, [r3, #0]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	f7fe ff65 	bl	8006998 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007ace:	f7ff fa09 	bl	8006ee4 <xTaskResumeAll>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10a      	bne.n	8007aee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ad8:	4b09      	ldr	r3, [pc, #36]	@ (8007b00 <prvProcessTimerOrBlockTask+0x98>)
 8007ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	f3bf 8f6f 	isb	sy
}
 8007ae8:	e001      	b.n	8007aee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007aea:	f7ff f9fb 	bl	8006ee4 <xTaskResumeAll>
}
 8007aee:	bf00      	nop
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20000ee8 	.word	0x20000ee8
 8007afc:	20000eec 	.word	0x20000eec
 8007b00:	e000ed04 	.word	0xe000ed04

08007b04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8007b48 <prvGetNextExpireTime+0x44>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <prvGetNextExpireTime+0x16>
 8007b16:	2201      	movs	r2, #1
 8007b18:	e000      	b.n	8007b1c <prvGetNextExpireTime+0x18>
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d105      	bne.n	8007b34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b28:	4b07      	ldr	r3, [pc, #28]	@ (8007b48 <prvGetNextExpireTime+0x44>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	e001      	b.n	8007b38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b34:	2300      	movs	r3, #0
 8007b36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b38:	68fb      	ldr	r3, [r7, #12]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	20000ee4 	.word	0x20000ee4

08007b4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b54:	f7ff fa64 	bl	8007020 <xTaskGetTickCount>
 8007b58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b88 <prvSampleTimeNow+0x3c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d205      	bcs.n	8007b70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b64:	f000 f93a 	bl	8007ddc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	e002      	b.n	8007b76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b76:	4a04      	ldr	r2, [pc, #16]	@ (8007b88 <prvSampleTimeNow+0x3c>)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20000ef4 	.word	0x20000ef4

08007b8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d812      	bhi.n	8007bd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	1ad2      	subs	r2, r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d302      	bcc.n	8007bc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	617b      	str	r3, [r7, #20]
 8007bc4:	e01b      	b.n	8007bfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007bc6:	4b10      	ldr	r3, [pc, #64]	@ (8007c08 <prvInsertTimerInActiveList+0x7c>)
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3304      	adds	r3, #4
 8007bce:	4619      	mov	r1, r3
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	f7fe f9b8 	bl	8005f46 <vListInsert>
 8007bd6:	e012      	b.n	8007bfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d206      	bcs.n	8007bee <prvInsertTimerInActiveList+0x62>
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d302      	bcc.n	8007bee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007be8:	2301      	movs	r3, #1
 8007bea:	617b      	str	r3, [r7, #20]
 8007bec:	e007      	b.n	8007bfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bee:	4b07      	ldr	r3, [pc, #28]	@ (8007c0c <prvInsertTimerInActiveList+0x80>)
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	f7fe f9a4 	bl	8005f46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007bfe:	697b      	ldr	r3, [r7, #20]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	20000ee8 	.word	0x20000ee8
 8007c0c:	20000ee4 	.word	0x20000ee4

08007c10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08e      	sub	sp, #56	@ 0x38
 8007c14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c16:	e0ce      	b.n	8007db6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	da19      	bge.n	8007c52 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c1e:	1d3b      	adds	r3, r7, #4
 8007c20:	3304      	adds	r3, #4
 8007c22:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10b      	bne.n	8007c42 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	61fb      	str	r3, [r7, #28]
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	e7fd      	b.n	8007c3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c48:	6850      	ldr	r0, [r2, #4]
 8007c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c4c:	6892      	ldr	r2, [r2, #8]
 8007c4e:	4611      	mov	r1, r2
 8007c50:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f2c0 80ae 	blt.w	8007db6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d004      	beq.n	8007c70 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c68:	3304      	adds	r3, #4
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe f9a4 	bl	8005fb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c70:	463b      	mov	r3, r7
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff ff6a 	bl	8007b4c <prvSampleTimeNow>
 8007c78:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b09      	cmp	r3, #9
 8007c7e:	f200 8097 	bhi.w	8007db0 <prvProcessReceivedCommands+0x1a0>
 8007c82:	a201      	add	r2, pc, #4	@ (adr r2, 8007c88 <prvProcessReceivedCommands+0x78>)
 8007c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c88:	08007cb1 	.word	0x08007cb1
 8007c8c:	08007cb1 	.word	0x08007cb1
 8007c90:	08007cb1 	.word	0x08007cb1
 8007c94:	08007d27 	.word	0x08007d27
 8007c98:	08007d3b 	.word	0x08007d3b
 8007c9c:	08007d87 	.word	0x08007d87
 8007ca0:	08007cb1 	.word	0x08007cb1
 8007ca4:	08007cb1 	.word	0x08007cb1
 8007ca8:	08007d27 	.word	0x08007d27
 8007cac:	08007d3b 	.word	0x08007d3b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cb6:	f043 0301 	orr.w	r3, r3, #1
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	18d1      	adds	r1, r2, r3
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cd0:	f7ff ff5c 	bl	8007b8c <prvInsertTimerInActiveList>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d06c      	beq.n	8007db4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ce0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ce8:	f003 0304 	and.w	r3, r3, #4
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d061      	beq.n	8007db4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	441a      	add	r2, r3
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	2100      	movs	r1, #0
 8007d00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d02:	f7ff fe01 	bl	8007908 <xTimerGenericCommand>
 8007d06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d152      	bne.n	8007db4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	61bb      	str	r3, [r7, #24]
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	e7fd      	b.n	8007d22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d2c:	f023 0301 	bic.w	r3, r3, #1
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007d38:	e03d      	b.n	8007db6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d40:	f043 0301 	orr.w	r3, r3, #1
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d50:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10b      	bne.n	8007d72 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	617b      	str	r3, [r7, #20]
}
 8007d6c:	bf00      	nop
 8007d6e:	bf00      	nop
 8007d70:	e7fd      	b.n	8007d6e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d74:	699a      	ldr	r2, [r3, #24]
 8007d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d78:	18d1      	adds	r1, r2, r3
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d80:	f7ff ff04 	bl	8007b8c <prvInsertTimerInActiveList>
					break;
 8007d84:	e017      	b.n	8007db6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d8c:	f003 0302 	and.w	r3, r3, #2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d103      	bne.n	8007d9c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007d94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d96:	f000 fbe7 	bl	8008568 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d9a:	e00c      	b.n	8007db6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007da2:	f023 0301 	bic.w	r3, r3, #1
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007daa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007dae:	e002      	b.n	8007db6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007db0:	bf00      	nop
 8007db2:	e000      	b.n	8007db6 <prvProcessReceivedCommands+0x1a6>
					break;
 8007db4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007db6:	4b08      	ldr	r3, [pc, #32]	@ (8007dd8 <prvProcessReceivedCommands+0x1c8>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	1d39      	adds	r1, r7, #4
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fe fbce 	bl	8006560 <xQueueReceive>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f47f af26 	bne.w	8007c18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007dcc:	bf00      	nop
 8007dce:	bf00      	nop
 8007dd0:	3730      	adds	r7, #48	@ 0x30
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20000eec 	.word	0x20000eec

08007ddc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007de2:	e049      	b.n	8007e78 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007de4:	4b2e      	ldr	r3, [pc, #184]	@ (8007ea0 <prvSwitchTimerLists+0xc4>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dee:	4b2c      	ldr	r3, [pc, #176]	@ (8007ea0 <prvSwitchTimerLists+0xc4>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fe f8db 	bl	8005fb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d02f      	beq.n	8007e78 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	4413      	add	r3, r2
 8007e20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d90e      	bls.n	8007e48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e36:	4b1a      	ldr	r3, [pc, #104]	@ (8007ea0 <prvSwitchTimerLists+0xc4>)
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	4619      	mov	r1, r3
 8007e40:	4610      	mov	r0, r2
 8007e42:	f7fe f880 	bl	8005f46 <vListInsert>
 8007e46:	e017      	b.n	8007e78 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e48:	2300      	movs	r3, #0
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	2100      	movs	r1, #0
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7ff fd58 	bl	8007908 <xTimerGenericCommand>
 8007e58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10b      	bne.n	8007e78 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	603b      	str	r3, [r7, #0]
}
 8007e72:	bf00      	nop
 8007e74:	bf00      	nop
 8007e76:	e7fd      	b.n	8007e74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e78:	4b09      	ldr	r3, [pc, #36]	@ (8007ea0 <prvSwitchTimerLists+0xc4>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1b0      	bne.n	8007de4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e82:	4b07      	ldr	r3, [pc, #28]	@ (8007ea0 <prvSwitchTimerLists+0xc4>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e88:	4b06      	ldr	r3, [pc, #24]	@ (8007ea4 <prvSwitchTimerLists+0xc8>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a04      	ldr	r2, [pc, #16]	@ (8007ea0 <prvSwitchTimerLists+0xc4>)
 8007e8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e90:	4a04      	ldr	r2, [pc, #16]	@ (8007ea4 <prvSwitchTimerLists+0xc8>)
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	6013      	str	r3, [r2, #0]
}
 8007e96:	bf00      	nop
 8007e98:	3718      	adds	r7, #24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20000ee4 	.word	0x20000ee4
 8007ea4:	20000ee8 	.word	0x20000ee8

08007ea8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007eae:	f000 f96b 	bl	8008188 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007eb2:	4b15      	ldr	r3, [pc, #84]	@ (8007f08 <prvCheckForValidListAndQueue+0x60>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d120      	bne.n	8007efc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007eba:	4814      	ldr	r0, [pc, #80]	@ (8007f0c <prvCheckForValidListAndQueue+0x64>)
 8007ebc:	f7fd fff2 	bl	8005ea4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ec0:	4813      	ldr	r0, [pc, #76]	@ (8007f10 <prvCheckForValidListAndQueue+0x68>)
 8007ec2:	f7fd ffef 	bl	8005ea4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ec6:	4b13      	ldr	r3, [pc, #76]	@ (8007f14 <prvCheckForValidListAndQueue+0x6c>)
 8007ec8:	4a10      	ldr	r2, [pc, #64]	@ (8007f0c <prvCheckForValidListAndQueue+0x64>)
 8007eca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ecc:	4b12      	ldr	r3, [pc, #72]	@ (8007f18 <prvCheckForValidListAndQueue+0x70>)
 8007ece:	4a10      	ldr	r2, [pc, #64]	@ (8007f10 <prvCheckForValidListAndQueue+0x68>)
 8007ed0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	4b11      	ldr	r3, [pc, #68]	@ (8007f1c <prvCheckForValidListAndQueue+0x74>)
 8007ed8:	4a11      	ldr	r2, [pc, #68]	@ (8007f20 <prvCheckForValidListAndQueue+0x78>)
 8007eda:	2110      	movs	r1, #16
 8007edc:	200a      	movs	r0, #10
 8007ede:	f7fe f8ff 	bl	80060e0 <xQueueGenericCreateStatic>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	4a08      	ldr	r2, [pc, #32]	@ (8007f08 <prvCheckForValidListAndQueue+0x60>)
 8007ee6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ee8:	4b07      	ldr	r3, [pc, #28]	@ (8007f08 <prvCheckForValidListAndQueue+0x60>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d005      	beq.n	8007efc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ef0:	4b05      	ldr	r3, [pc, #20]	@ (8007f08 <prvCheckForValidListAndQueue+0x60>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	490b      	ldr	r1, [pc, #44]	@ (8007f24 <prvCheckForValidListAndQueue+0x7c>)
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fe fd24 	bl	8006944 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007efc:	f000 f976 	bl	80081ec <vPortExitCritical>
}
 8007f00:	bf00      	nop
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20000eec 	.word	0x20000eec
 8007f0c:	20000ebc 	.word	0x20000ebc
 8007f10:	20000ed0 	.word	0x20000ed0
 8007f14:	20000ee4 	.word	0x20000ee4
 8007f18:	20000ee8 	.word	0x20000ee8
 8007f1c:	20000f98 	.word	0x20000f98
 8007f20:	20000ef8 	.word	0x20000ef8
 8007f24:	080089ec 	.word	0x080089ec

08007f28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	3b04      	subs	r3, #4
 8007f38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3b04      	subs	r3, #4
 8007f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	f023 0201 	bic.w	r2, r3, #1
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	3b04      	subs	r3, #4
 8007f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f58:	4a0c      	ldr	r2, [pc, #48]	@ (8007f8c <pxPortInitialiseStack+0x64>)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3b14      	subs	r3, #20
 8007f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3b04      	subs	r3, #4
 8007f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f06f 0202 	mvn.w	r2, #2
 8007f76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3b20      	subs	r3, #32
 8007f7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	08007f91 	.word	0x08007f91

08007f90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f9a:	4b13      	ldr	r3, [pc, #76]	@ (8007fe8 <prvTaskExitError+0x58>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fa2:	d00b      	beq.n	8007fbc <prvTaskExitError+0x2c>
	__asm volatile
 8007fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	60fb      	str	r3, [r7, #12]
}
 8007fb6:	bf00      	nop
 8007fb8:	bf00      	nop
 8007fba:	e7fd      	b.n	8007fb8 <prvTaskExitError+0x28>
	__asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	60bb      	str	r3, [r7, #8]
}
 8007fce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fd0:	bf00      	nop
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d0fc      	beq.n	8007fd2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fd8:	bf00      	nop
 8007fda:	bf00      	nop
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	2000000c 	.word	0x2000000c
 8007fec:	00000000 	.word	0x00000000

08007ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ff0:	4b07      	ldr	r3, [pc, #28]	@ (8008010 <pxCurrentTCBConst2>)
 8007ff2:	6819      	ldr	r1, [r3, #0]
 8007ff4:	6808      	ldr	r0, [r1, #0]
 8007ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffa:	f380 8809 	msr	PSP, r0
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f04f 0000 	mov.w	r0, #0
 8008006:	f380 8811 	msr	BASEPRI, r0
 800800a:	4770      	bx	lr
 800800c:	f3af 8000 	nop.w

08008010 <pxCurrentTCBConst2>:
 8008010:	200009bc 	.word	0x200009bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008014:	bf00      	nop
 8008016:	bf00      	nop

08008018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008018:	4808      	ldr	r0, [pc, #32]	@ (800803c <prvPortStartFirstTask+0x24>)
 800801a:	6800      	ldr	r0, [r0, #0]
 800801c:	6800      	ldr	r0, [r0, #0]
 800801e:	f380 8808 	msr	MSP, r0
 8008022:	f04f 0000 	mov.w	r0, #0
 8008026:	f380 8814 	msr	CONTROL, r0
 800802a:	b662      	cpsie	i
 800802c:	b661      	cpsie	f
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	df00      	svc	0
 8008038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800803a:	bf00      	nop
 800803c:	e000ed08 	.word	0xe000ed08

08008040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008046:	4b47      	ldr	r3, [pc, #284]	@ (8008164 <xPortStartScheduler+0x124>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a47      	ldr	r2, [pc, #284]	@ (8008168 <xPortStartScheduler+0x128>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d10b      	bne.n	8008068 <xPortStartScheduler+0x28>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	613b      	str	r3, [r7, #16]
}
 8008062:	bf00      	nop
 8008064:	bf00      	nop
 8008066:	e7fd      	b.n	8008064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008068:	4b3e      	ldr	r3, [pc, #248]	@ (8008164 <xPortStartScheduler+0x124>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a3f      	ldr	r2, [pc, #252]	@ (800816c <xPortStartScheduler+0x12c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d10b      	bne.n	800808a <xPortStartScheduler+0x4a>
	__asm volatile
 8008072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008076:	f383 8811 	msr	BASEPRI, r3
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	60fb      	str	r3, [r7, #12]
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop
 8008088:	e7fd      	b.n	8008086 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800808a:	4b39      	ldr	r3, [pc, #228]	@ (8008170 <xPortStartScheduler+0x130>)
 800808c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	b2db      	uxtb	r3, r3
 8008094:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	22ff      	movs	r2, #255	@ 0xff
 800809a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080a4:	78fb      	ldrb	r3, [r7, #3]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	4b31      	ldr	r3, [pc, #196]	@ (8008174 <xPortStartScheduler+0x134>)
 80080b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80080b2:	4b31      	ldr	r3, [pc, #196]	@ (8008178 <xPortStartScheduler+0x138>)
 80080b4:	2207      	movs	r2, #7
 80080b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080b8:	e009      	b.n	80080ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80080ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008178 <xPortStartScheduler+0x138>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3b01      	subs	r3, #1
 80080c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008178 <xPortStartScheduler+0x138>)
 80080c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080c4:	78fb      	ldrb	r3, [r7, #3]
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080d6:	2b80      	cmp	r3, #128	@ 0x80
 80080d8:	d0ef      	beq.n	80080ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080da:	4b27      	ldr	r3, [pc, #156]	@ (8008178 <xPortStartScheduler+0x138>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f1c3 0307 	rsb	r3, r3, #7
 80080e2:	2b04      	cmp	r3, #4
 80080e4:	d00b      	beq.n	80080fe <xPortStartScheduler+0xbe>
	__asm volatile
 80080e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	60bb      	str	r3, [r7, #8]
}
 80080f8:	bf00      	nop
 80080fa:	bf00      	nop
 80080fc:	e7fd      	b.n	80080fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008178 <xPortStartScheduler+0x138>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	021b      	lsls	r3, r3, #8
 8008104:	4a1c      	ldr	r2, [pc, #112]	@ (8008178 <xPortStartScheduler+0x138>)
 8008106:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008108:	4b1b      	ldr	r3, [pc, #108]	@ (8008178 <xPortStartScheduler+0x138>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008110:	4a19      	ldr	r2, [pc, #100]	@ (8008178 <xPortStartScheduler+0x138>)
 8008112:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	b2da      	uxtb	r2, r3
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800811c:	4b17      	ldr	r3, [pc, #92]	@ (800817c <xPortStartScheduler+0x13c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a16      	ldr	r2, [pc, #88]	@ (800817c <xPortStartScheduler+0x13c>)
 8008122:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008126:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008128:	4b14      	ldr	r3, [pc, #80]	@ (800817c <xPortStartScheduler+0x13c>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a13      	ldr	r2, [pc, #76]	@ (800817c <xPortStartScheduler+0x13c>)
 800812e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008132:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008134:	f000 f8da 	bl	80082ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008138:	4b11      	ldr	r3, [pc, #68]	@ (8008180 <xPortStartScheduler+0x140>)
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800813e:	f000 f8f9 	bl	8008334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008142:	4b10      	ldr	r3, [pc, #64]	@ (8008184 <xPortStartScheduler+0x144>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a0f      	ldr	r2, [pc, #60]	@ (8008184 <xPortStartScheduler+0x144>)
 8008148:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800814c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800814e:	f7ff ff63 	bl	8008018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008152:	f7ff f82f 	bl	80071b4 <vTaskSwitchContext>
	prvTaskExitError();
 8008156:	f7ff ff1b 	bl	8007f90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	e000ed00 	.word	0xe000ed00
 8008168:	410fc271 	.word	0x410fc271
 800816c:	410fc270 	.word	0x410fc270
 8008170:	e000e400 	.word	0xe000e400
 8008174:	20000fe8 	.word	0x20000fe8
 8008178:	20000fec 	.word	0x20000fec
 800817c:	e000ed20 	.word	0xe000ed20
 8008180:	2000000c 	.word	0x2000000c
 8008184:	e000ef34 	.word	0xe000ef34

08008188 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	607b      	str	r3, [r7, #4]
}
 80081a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081a2:	4b10      	ldr	r3, [pc, #64]	@ (80081e4 <vPortEnterCritical+0x5c>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3301      	adds	r3, #1
 80081a8:	4a0e      	ldr	r2, [pc, #56]	@ (80081e4 <vPortEnterCritical+0x5c>)
 80081aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081ac:	4b0d      	ldr	r3, [pc, #52]	@ (80081e4 <vPortEnterCritical+0x5c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d110      	bne.n	80081d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081b4:	4b0c      	ldr	r3, [pc, #48]	@ (80081e8 <vPortEnterCritical+0x60>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00b      	beq.n	80081d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	603b      	str	r3, [r7, #0]
}
 80081d0:	bf00      	nop
 80081d2:	bf00      	nop
 80081d4:	e7fd      	b.n	80081d2 <vPortEnterCritical+0x4a>
	}
}
 80081d6:	bf00      	nop
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	2000000c 	.word	0x2000000c
 80081e8:	e000ed04 	.word	0xe000ed04

080081ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081f2:	4b12      	ldr	r3, [pc, #72]	@ (800823c <vPortExitCritical+0x50>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10b      	bne.n	8008212 <vPortExitCritical+0x26>
	__asm volatile
 80081fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081fe:	f383 8811 	msr	BASEPRI, r3
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	607b      	str	r3, [r7, #4]
}
 800820c:	bf00      	nop
 800820e:	bf00      	nop
 8008210:	e7fd      	b.n	800820e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008212:	4b0a      	ldr	r3, [pc, #40]	@ (800823c <vPortExitCritical+0x50>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3b01      	subs	r3, #1
 8008218:	4a08      	ldr	r2, [pc, #32]	@ (800823c <vPortExitCritical+0x50>)
 800821a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800821c:	4b07      	ldr	r3, [pc, #28]	@ (800823c <vPortExitCritical+0x50>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d105      	bne.n	8008230 <vPortExitCritical+0x44>
 8008224:	2300      	movs	r3, #0
 8008226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	f383 8811 	msr	BASEPRI, r3
}
 800822e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	2000000c 	.word	0x2000000c

08008240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008240:	f3ef 8009 	mrs	r0, PSP
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	4b15      	ldr	r3, [pc, #84]	@ (80082a0 <pxCurrentTCBConst>)
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	f01e 0f10 	tst.w	lr, #16
 8008250:	bf08      	it	eq
 8008252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825a:	6010      	str	r0, [r2, #0]
 800825c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008260:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008264:	f380 8811 	msr	BASEPRI, r0
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f7fe ffa0 	bl	80071b4 <vTaskSwitchContext>
 8008274:	f04f 0000 	mov.w	r0, #0
 8008278:	f380 8811 	msr	BASEPRI, r0
 800827c:	bc09      	pop	{r0, r3}
 800827e:	6819      	ldr	r1, [r3, #0]
 8008280:	6808      	ldr	r0, [r1, #0]
 8008282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008286:	f01e 0f10 	tst.w	lr, #16
 800828a:	bf08      	it	eq
 800828c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008290:	f380 8809 	msr	PSP, r0
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	f3af 8000 	nop.w

080082a0 <pxCurrentTCBConst>:
 80082a0:	200009bc 	.word	0x200009bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082a4:	bf00      	nop
 80082a6:	bf00      	nop

080082a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	607b      	str	r3, [r7, #4]
}
 80082c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082c2:	f7fe febd 	bl	8007040 <xTaskIncrementTick>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082cc:	4b06      	ldr	r3, [pc, #24]	@ (80082e8 <xPortSysTickHandler+0x40>)
 80082ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	2300      	movs	r3, #0
 80082d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	f383 8811 	msr	BASEPRI, r3
}
 80082de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	e000ed04 	.word	0xe000ed04

080082ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008320 <vPortSetupTimerInterrupt+0x34>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008324 <vPortSetupTimerInterrupt+0x38>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008328 <vPortSetupTimerInterrupt+0x3c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a0a      	ldr	r2, [pc, #40]	@ (800832c <vPortSetupTimerInterrupt+0x40>)
 8008302:	fba2 2303 	umull	r2, r3, r2, r3
 8008306:	099b      	lsrs	r3, r3, #6
 8008308:	4a09      	ldr	r2, [pc, #36]	@ (8008330 <vPortSetupTimerInterrupt+0x44>)
 800830a:	3b01      	subs	r3, #1
 800830c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800830e:	4b04      	ldr	r3, [pc, #16]	@ (8008320 <vPortSetupTimerInterrupt+0x34>)
 8008310:	2207      	movs	r2, #7
 8008312:	601a      	str	r2, [r3, #0]
}
 8008314:	bf00      	nop
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	e000e010 	.word	0xe000e010
 8008324:	e000e018 	.word	0xe000e018
 8008328:	20000000 	.word	0x20000000
 800832c:	10624dd3 	.word	0x10624dd3
 8008330:	e000e014 	.word	0xe000e014

08008334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008334:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008344 <vPortEnableVFP+0x10>
 8008338:	6801      	ldr	r1, [r0, #0]
 800833a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800833e:	6001      	str	r1, [r0, #0]
 8008340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008342:	bf00      	nop
 8008344:	e000ed88 	.word	0xe000ed88

08008348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800834e:	f3ef 8305 	mrs	r3, IPSR
 8008352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2b0f      	cmp	r3, #15
 8008358:	d915      	bls.n	8008386 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800835a:	4a18      	ldr	r2, [pc, #96]	@ (80083bc <vPortValidateInterruptPriority+0x74>)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4413      	add	r3, r2
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008364:	4b16      	ldr	r3, [pc, #88]	@ (80083c0 <vPortValidateInterruptPriority+0x78>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	7afa      	ldrb	r2, [r7, #11]
 800836a:	429a      	cmp	r2, r3
 800836c:	d20b      	bcs.n	8008386 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	607b      	str	r3, [r7, #4]
}
 8008380:	bf00      	nop
 8008382:	bf00      	nop
 8008384:	e7fd      	b.n	8008382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008386:	4b0f      	ldr	r3, [pc, #60]	@ (80083c4 <vPortValidateInterruptPriority+0x7c>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800838e:	4b0e      	ldr	r3, [pc, #56]	@ (80083c8 <vPortValidateInterruptPriority+0x80>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	429a      	cmp	r2, r3
 8008394:	d90b      	bls.n	80083ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839a:	f383 8811 	msr	BASEPRI, r3
 800839e:	f3bf 8f6f 	isb	sy
 80083a2:	f3bf 8f4f 	dsb	sy
 80083a6:	603b      	str	r3, [r7, #0]
}
 80083a8:	bf00      	nop
 80083aa:	bf00      	nop
 80083ac:	e7fd      	b.n	80083aa <vPortValidateInterruptPriority+0x62>
	}
 80083ae:	bf00      	nop
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	e000e3f0 	.word	0xe000e3f0
 80083c0:	20000fe8 	.word	0x20000fe8
 80083c4:	e000ed0c 	.word	0xe000ed0c
 80083c8:	20000fec 	.word	0x20000fec

080083cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b08a      	sub	sp, #40	@ 0x28
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083d4:	2300      	movs	r3, #0
 80083d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083d8:	f7fe fd76 	bl	8006ec8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083dc:	4b5c      	ldr	r3, [pc, #368]	@ (8008550 <pvPortMalloc+0x184>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083e4:	f000 f924 	bl	8008630 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083e8:	4b5a      	ldr	r3, [pc, #360]	@ (8008554 <pvPortMalloc+0x188>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4013      	ands	r3, r2
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f040 8095 	bne.w	8008520 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d01e      	beq.n	800843a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80083fc:	2208      	movs	r2, #8
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4413      	add	r3, r2
 8008402:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	2b00      	cmp	r3, #0
 800840c:	d015      	beq.n	800843a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f023 0307 	bic.w	r3, r3, #7
 8008414:	3308      	adds	r3, #8
 8008416:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f003 0307 	and.w	r3, r3, #7
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00b      	beq.n	800843a <pvPortMalloc+0x6e>
	__asm volatile
 8008422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008426:	f383 8811 	msr	BASEPRI, r3
 800842a:	f3bf 8f6f 	isb	sy
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	617b      	str	r3, [r7, #20]
}
 8008434:	bf00      	nop
 8008436:	bf00      	nop
 8008438:	e7fd      	b.n	8008436 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d06f      	beq.n	8008520 <pvPortMalloc+0x154>
 8008440:	4b45      	ldr	r3, [pc, #276]	@ (8008558 <pvPortMalloc+0x18c>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	429a      	cmp	r2, r3
 8008448:	d86a      	bhi.n	8008520 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800844a:	4b44      	ldr	r3, [pc, #272]	@ (800855c <pvPortMalloc+0x190>)
 800844c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800844e:	4b43      	ldr	r3, [pc, #268]	@ (800855c <pvPortMalloc+0x190>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008454:	e004      	b.n	8008460 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008458:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800845a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	429a      	cmp	r2, r3
 8008468:	d903      	bls.n	8008472 <pvPortMalloc+0xa6>
 800846a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1f1      	bne.n	8008456 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008472:	4b37      	ldr	r3, [pc, #220]	@ (8008550 <pvPortMalloc+0x184>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008478:	429a      	cmp	r2, r3
 800847a:	d051      	beq.n	8008520 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2208      	movs	r2, #8
 8008482:	4413      	add	r3, r2
 8008484:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800848e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008490:	685a      	ldr	r2, [r3, #4]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	1ad2      	subs	r2, r2, r3
 8008496:	2308      	movs	r3, #8
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	429a      	cmp	r2, r3
 800849c:	d920      	bls.n	80084e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800849e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4413      	add	r3, r2
 80084a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	f003 0307 	and.w	r3, r3, #7
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00b      	beq.n	80084c8 <pvPortMalloc+0xfc>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	613b      	str	r3, [r7, #16]
}
 80084c2:	bf00      	nop
 80084c4:	bf00      	nop
 80084c6:	e7fd      	b.n	80084c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	1ad2      	subs	r2, r2, r3
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084da:	69b8      	ldr	r0, [r7, #24]
 80084dc:	f000 f90a 	bl	80086f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084e0:	4b1d      	ldr	r3, [pc, #116]	@ (8008558 <pvPortMalloc+0x18c>)
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008558 <pvPortMalloc+0x18c>)
 80084ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084ee:	4b1a      	ldr	r3, [pc, #104]	@ (8008558 <pvPortMalloc+0x18c>)
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008560 <pvPortMalloc+0x194>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d203      	bcs.n	8008502 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084fa:	4b17      	ldr	r3, [pc, #92]	@ (8008558 <pvPortMalloc+0x18c>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a18      	ldr	r2, [pc, #96]	@ (8008560 <pvPortMalloc+0x194>)
 8008500:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	4b13      	ldr	r3, [pc, #76]	@ (8008554 <pvPortMalloc+0x188>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	431a      	orrs	r2, r3
 800850c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008512:	2200      	movs	r2, #0
 8008514:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008516:	4b13      	ldr	r3, [pc, #76]	@ (8008564 <pvPortMalloc+0x198>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3301      	adds	r3, #1
 800851c:	4a11      	ldr	r2, [pc, #68]	@ (8008564 <pvPortMalloc+0x198>)
 800851e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008520:	f7fe fce0 	bl	8006ee4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	f003 0307 	and.w	r3, r3, #7
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00b      	beq.n	8008546 <pvPortMalloc+0x17a>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	60fb      	str	r3, [r7, #12]
}
 8008540:	bf00      	nop
 8008542:	bf00      	nop
 8008544:	e7fd      	b.n	8008542 <pvPortMalloc+0x176>
	return pvReturn;
 8008546:	69fb      	ldr	r3, [r7, #28]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3728      	adds	r7, #40	@ 0x28
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	20001bb0 	.word	0x20001bb0
 8008554:	20001bc4 	.word	0x20001bc4
 8008558:	20001bb4 	.word	0x20001bb4
 800855c:	20001ba8 	.word	0x20001ba8
 8008560:	20001bb8 	.word	0x20001bb8
 8008564:	20001bbc 	.word	0x20001bbc

08008568 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d04f      	beq.n	800861a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800857a:	2308      	movs	r3, #8
 800857c:	425b      	negs	r3, r3
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	4413      	add	r3, r2
 8008582:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	4b25      	ldr	r3, [pc, #148]	@ (8008624 <vPortFree+0xbc>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4013      	ands	r3, r2
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10b      	bne.n	80085ae <vPortFree+0x46>
	__asm volatile
 8008596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	60fb      	str	r3, [r7, #12]
}
 80085a8:	bf00      	nop
 80085aa:	bf00      	nop
 80085ac:	e7fd      	b.n	80085aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00b      	beq.n	80085ce <vPortFree+0x66>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	60bb      	str	r3, [r7, #8]
}
 80085c8:	bf00      	nop
 80085ca:	bf00      	nop
 80085cc:	e7fd      	b.n	80085ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	4b14      	ldr	r3, [pc, #80]	@ (8008624 <vPortFree+0xbc>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4013      	ands	r3, r2
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d01e      	beq.n	800861a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d11a      	bne.n	800861a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008624 <vPortFree+0xbc>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	43db      	mvns	r3, r3
 80085ee:	401a      	ands	r2, r3
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085f4:	f7fe fc68 	bl	8006ec8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008628 <vPortFree+0xc0>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4413      	add	r3, r2
 8008602:	4a09      	ldr	r2, [pc, #36]	@ (8008628 <vPortFree+0xc0>)
 8008604:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008606:	6938      	ldr	r0, [r7, #16]
 8008608:	f000 f874 	bl	80086f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800860c:	4b07      	ldr	r3, [pc, #28]	@ (800862c <vPortFree+0xc4>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	3301      	adds	r3, #1
 8008612:	4a06      	ldr	r2, [pc, #24]	@ (800862c <vPortFree+0xc4>)
 8008614:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008616:	f7fe fc65 	bl	8006ee4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800861a:	bf00      	nop
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	20001bc4 	.word	0x20001bc4
 8008628:	20001bb4 	.word	0x20001bb4
 800862c:	20001bc0 	.word	0x20001bc0

08008630 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008636:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800863a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800863c:	4b27      	ldr	r3, [pc, #156]	@ (80086dc <prvHeapInit+0xac>)
 800863e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f003 0307 	and.w	r3, r3, #7
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00c      	beq.n	8008664 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3307      	adds	r3, #7
 800864e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f023 0307 	bic.w	r3, r3, #7
 8008656:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	4a1f      	ldr	r2, [pc, #124]	@ (80086dc <prvHeapInit+0xac>)
 8008660:	4413      	add	r3, r2
 8008662:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008668:	4a1d      	ldr	r2, [pc, #116]	@ (80086e0 <prvHeapInit+0xb0>)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800866e:	4b1c      	ldr	r3, [pc, #112]	@ (80086e0 <prvHeapInit+0xb0>)
 8008670:	2200      	movs	r2, #0
 8008672:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	4413      	add	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800867c:	2208      	movs	r2, #8
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	1a9b      	subs	r3, r3, r2
 8008682:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f023 0307 	bic.w	r3, r3, #7
 800868a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4a15      	ldr	r2, [pc, #84]	@ (80086e4 <prvHeapInit+0xb4>)
 8008690:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008692:	4b14      	ldr	r3, [pc, #80]	@ (80086e4 <prvHeapInit+0xb4>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2200      	movs	r2, #0
 8008698:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800869a:	4b12      	ldr	r3, [pc, #72]	@ (80086e4 <prvHeapInit+0xb4>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	1ad2      	subs	r2, r2, r3
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086b0:	4b0c      	ldr	r3, [pc, #48]	@ (80086e4 <prvHeapInit+0xb4>)
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	4a0a      	ldr	r2, [pc, #40]	@ (80086e8 <prvHeapInit+0xb8>)
 80086be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	4a09      	ldr	r2, [pc, #36]	@ (80086ec <prvHeapInit+0xbc>)
 80086c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086c8:	4b09      	ldr	r3, [pc, #36]	@ (80086f0 <prvHeapInit+0xc0>)
 80086ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80086ce:	601a      	str	r2, [r3, #0]
}
 80086d0:	bf00      	nop
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	20000ff0 	.word	0x20000ff0
 80086e0:	20001ba8 	.word	0x20001ba8
 80086e4:	20001bb0 	.word	0x20001bb0
 80086e8:	20001bb8 	.word	0x20001bb8
 80086ec:	20001bb4 	.word	0x20001bb4
 80086f0:	20001bc4 	.word	0x20001bc4

080086f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086fc:	4b28      	ldr	r3, [pc, #160]	@ (80087a0 <prvInsertBlockIntoFreeList+0xac>)
 80086fe:	60fb      	str	r3, [r7, #12]
 8008700:	e002      	b.n	8008708 <prvInsertBlockIntoFreeList+0x14>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	60fb      	str	r3, [r7, #12]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	429a      	cmp	r2, r3
 8008710:	d8f7      	bhi.n	8008702 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	4413      	add	r3, r2
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	429a      	cmp	r2, r3
 8008722:	d108      	bne.n	8008736 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	441a      	add	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	441a      	add	r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	429a      	cmp	r2, r3
 8008748:	d118      	bne.n	800877c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	4b15      	ldr	r3, [pc, #84]	@ (80087a4 <prvInsertBlockIntoFreeList+0xb0>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	429a      	cmp	r2, r3
 8008754:	d00d      	beq.n	8008772 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	441a      	add	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	601a      	str	r2, [r3, #0]
 8008770:	e008      	b.n	8008784 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008772:	4b0c      	ldr	r3, [pc, #48]	@ (80087a4 <prvInsertBlockIntoFreeList+0xb0>)
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	601a      	str	r2, [r3, #0]
 800877a:	e003      	b.n	8008784 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	429a      	cmp	r2, r3
 800878a:	d002      	beq.n	8008792 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008792:	bf00      	nop
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	20001ba8 	.word	0x20001ba8
 80087a4:	20001bb0 	.word	0x20001bb0

080087a8 <memset>:
 80087a8:	4402      	add	r2, r0
 80087aa:	4603      	mov	r3, r0
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d100      	bne.n	80087b2 <memset+0xa>
 80087b0:	4770      	bx	lr
 80087b2:	f803 1b01 	strb.w	r1, [r3], #1
 80087b6:	e7f9      	b.n	80087ac <memset+0x4>

080087b8 <_reclaim_reent>:
 80087b8:	4b29      	ldr	r3, [pc, #164]	@ (8008860 <_reclaim_reent+0xa8>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4283      	cmp	r3, r0
 80087be:	b570      	push	{r4, r5, r6, lr}
 80087c0:	4604      	mov	r4, r0
 80087c2:	d04b      	beq.n	800885c <_reclaim_reent+0xa4>
 80087c4:	69c3      	ldr	r3, [r0, #28]
 80087c6:	b1ab      	cbz	r3, 80087f4 <_reclaim_reent+0x3c>
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	b16b      	cbz	r3, 80087e8 <_reclaim_reent+0x30>
 80087cc:	2500      	movs	r5, #0
 80087ce:	69e3      	ldr	r3, [r4, #28]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	5959      	ldr	r1, [r3, r5]
 80087d4:	2900      	cmp	r1, #0
 80087d6:	d13b      	bne.n	8008850 <_reclaim_reent+0x98>
 80087d8:	3504      	adds	r5, #4
 80087da:	2d80      	cmp	r5, #128	@ 0x80
 80087dc:	d1f7      	bne.n	80087ce <_reclaim_reent+0x16>
 80087de:	69e3      	ldr	r3, [r4, #28]
 80087e0:	4620      	mov	r0, r4
 80087e2:	68d9      	ldr	r1, [r3, #12]
 80087e4:	f000 f872 	bl	80088cc <_free_r>
 80087e8:	69e3      	ldr	r3, [r4, #28]
 80087ea:	6819      	ldr	r1, [r3, #0]
 80087ec:	b111      	cbz	r1, 80087f4 <_reclaim_reent+0x3c>
 80087ee:	4620      	mov	r0, r4
 80087f0:	f000 f86c 	bl	80088cc <_free_r>
 80087f4:	6961      	ldr	r1, [r4, #20]
 80087f6:	b111      	cbz	r1, 80087fe <_reclaim_reent+0x46>
 80087f8:	4620      	mov	r0, r4
 80087fa:	f000 f867 	bl	80088cc <_free_r>
 80087fe:	69e1      	ldr	r1, [r4, #28]
 8008800:	b111      	cbz	r1, 8008808 <_reclaim_reent+0x50>
 8008802:	4620      	mov	r0, r4
 8008804:	f000 f862 	bl	80088cc <_free_r>
 8008808:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800880a:	b111      	cbz	r1, 8008812 <_reclaim_reent+0x5a>
 800880c:	4620      	mov	r0, r4
 800880e:	f000 f85d 	bl	80088cc <_free_r>
 8008812:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008814:	b111      	cbz	r1, 800881c <_reclaim_reent+0x64>
 8008816:	4620      	mov	r0, r4
 8008818:	f000 f858 	bl	80088cc <_free_r>
 800881c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800881e:	b111      	cbz	r1, 8008826 <_reclaim_reent+0x6e>
 8008820:	4620      	mov	r0, r4
 8008822:	f000 f853 	bl	80088cc <_free_r>
 8008826:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008828:	b111      	cbz	r1, 8008830 <_reclaim_reent+0x78>
 800882a:	4620      	mov	r0, r4
 800882c:	f000 f84e 	bl	80088cc <_free_r>
 8008830:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008832:	b111      	cbz	r1, 800883a <_reclaim_reent+0x82>
 8008834:	4620      	mov	r0, r4
 8008836:	f000 f849 	bl	80088cc <_free_r>
 800883a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800883c:	b111      	cbz	r1, 8008844 <_reclaim_reent+0x8c>
 800883e:	4620      	mov	r0, r4
 8008840:	f000 f844 	bl	80088cc <_free_r>
 8008844:	6a23      	ldr	r3, [r4, #32]
 8008846:	b14b      	cbz	r3, 800885c <_reclaim_reent+0xa4>
 8008848:	4620      	mov	r0, r4
 800884a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800884e:	4718      	bx	r3
 8008850:	680e      	ldr	r6, [r1, #0]
 8008852:	4620      	mov	r0, r4
 8008854:	f000 f83a 	bl	80088cc <_free_r>
 8008858:	4631      	mov	r1, r6
 800885a:	e7bb      	b.n	80087d4 <_reclaim_reent+0x1c>
 800885c:	bd70      	pop	{r4, r5, r6, pc}
 800885e:	bf00      	nop
 8008860:	20000010 	.word	0x20000010

08008864 <__libc_init_array>:
 8008864:	b570      	push	{r4, r5, r6, lr}
 8008866:	4d0d      	ldr	r5, [pc, #52]	@ (800889c <__libc_init_array+0x38>)
 8008868:	4c0d      	ldr	r4, [pc, #52]	@ (80088a0 <__libc_init_array+0x3c>)
 800886a:	1b64      	subs	r4, r4, r5
 800886c:	10a4      	asrs	r4, r4, #2
 800886e:	2600      	movs	r6, #0
 8008870:	42a6      	cmp	r6, r4
 8008872:	d109      	bne.n	8008888 <__libc_init_array+0x24>
 8008874:	4d0b      	ldr	r5, [pc, #44]	@ (80088a4 <__libc_init_array+0x40>)
 8008876:	4c0c      	ldr	r4, [pc, #48]	@ (80088a8 <__libc_init_array+0x44>)
 8008878:	f000 f87e 	bl	8008978 <_init>
 800887c:	1b64      	subs	r4, r4, r5
 800887e:	10a4      	asrs	r4, r4, #2
 8008880:	2600      	movs	r6, #0
 8008882:	42a6      	cmp	r6, r4
 8008884:	d105      	bne.n	8008892 <__libc_init_array+0x2e>
 8008886:	bd70      	pop	{r4, r5, r6, pc}
 8008888:	f855 3b04 	ldr.w	r3, [r5], #4
 800888c:	4798      	blx	r3
 800888e:	3601      	adds	r6, #1
 8008890:	e7ee      	b.n	8008870 <__libc_init_array+0xc>
 8008892:	f855 3b04 	ldr.w	r3, [r5], #4
 8008896:	4798      	blx	r3
 8008898:	3601      	adds	r6, #1
 800889a:	e7f2      	b.n	8008882 <__libc_init_array+0x1e>
 800889c:	08008ab0 	.word	0x08008ab0
 80088a0:	08008ab0 	.word	0x08008ab0
 80088a4:	08008ab0 	.word	0x08008ab0
 80088a8:	08008ab4 	.word	0x08008ab4

080088ac <__retarget_lock_acquire_recursive>:
 80088ac:	4770      	bx	lr

080088ae <__retarget_lock_release_recursive>:
 80088ae:	4770      	bx	lr

080088b0 <memcpy>:
 80088b0:	440a      	add	r2, r1
 80088b2:	4291      	cmp	r1, r2
 80088b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80088b8:	d100      	bne.n	80088bc <memcpy+0xc>
 80088ba:	4770      	bx	lr
 80088bc:	b510      	push	{r4, lr}
 80088be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088c6:	4291      	cmp	r1, r2
 80088c8:	d1f9      	bne.n	80088be <memcpy+0xe>
 80088ca:	bd10      	pop	{r4, pc}

080088cc <_free_r>:
 80088cc:	b538      	push	{r3, r4, r5, lr}
 80088ce:	4605      	mov	r5, r0
 80088d0:	2900      	cmp	r1, #0
 80088d2:	d041      	beq.n	8008958 <_free_r+0x8c>
 80088d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088d8:	1f0c      	subs	r4, r1, #4
 80088da:	2b00      	cmp	r3, #0
 80088dc:	bfb8      	it	lt
 80088de:	18e4      	addlt	r4, r4, r3
 80088e0:	f000 f83e 	bl	8008960 <__malloc_lock>
 80088e4:	4a1d      	ldr	r2, [pc, #116]	@ (800895c <_free_r+0x90>)
 80088e6:	6813      	ldr	r3, [r2, #0]
 80088e8:	b933      	cbnz	r3, 80088f8 <_free_r+0x2c>
 80088ea:	6063      	str	r3, [r4, #4]
 80088ec:	6014      	str	r4, [r2, #0]
 80088ee:	4628      	mov	r0, r5
 80088f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088f4:	f000 b83a 	b.w	800896c <__malloc_unlock>
 80088f8:	42a3      	cmp	r3, r4
 80088fa:	d908      	bls.n	800890e <_free_r+0x42>
 80088fc:	6820      	ldr	r0, [r4, #0]
 80088fe:	1821      	adds	r1, r4, r0
 8008900:	428b      	cmp	r3, r1
 8008902:	bf01      	itttt	eq
 8008904:	6819      	ldreq	r1, [r3, #0]
 8008906:	685b      	ldreq	r3, [r3, #4]
 8008908:	1809      	addeq	r1, r1, r0
 800890a:	6021      	streq	r1, [r4, #0]
 800890c:	e7ed      	b.n	80088ea <_free_r+0x1e>
 800890e:	461a      	mov	r2, r3
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	b10b      	cbz	r3, 8008918 <_free_r+0x4c>
 8008914:	42a3      	cmp	r3, r4
 8008916:	d9fa      	bls.n	800890e <_free_r+0x42>
 8008918:	6811      	ldr	r1, [r2, #0]
 800891a:	1850      	adds	r0, r2, r1
 800891c:	42a0      	cmp	r0, r4
 800891e:	d10b      	bne.n	8008938 <_free_r+0x6c>
 8008920:	6820      	ldr	r0, [r4, #0]
 8008922:	4401      	add	r1, r0
 8008924:	1850      	adds	r0, r2, r1
 8008926:	4283      	cmp	r3, r0
 8008928:	6011      	str	r1, [r2, #0]
 800892a:	d1e0      	bne.n	80088ee <_free_r+0x22>
 800892c:	6818      	ldr	r0, [r3, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	6053      	str	r3, [r2, #4]
 8008932:	4408      	add	r0, r1
 8008934:	6010      	str	r0, [r2, #0]
 8008936:	e7da      	b.n	80088ee <_free_r+0x22>
 8008938:	d902      	bls.n	8008940 <_free_r+0x74>
 800893a:	230c      	movs	r3, #12
 800893c:	602b      	str	r3, [r5, #0]
 800893e:	e7d6      	b.n	80088ee <_free_r+0x22>
 8008940:	6820      	ldr	r0, [r4, #0]
 8008942:	1821      	adds	r1, r4, r0
 8008944:	428b      	cmp	r3, r1
 8008946:	bf04      	itt	eq
 8008948:	6819      	ldreq	r1, [r3, #0]
 800894a:	685b      	ldreq	r3, [r3, #4]
 800894c:	6063      	str	r3, [r4, #4]
 800894e:	bf04      	itt	eq
 8008950:	1809      	addeq	r1, r1, r0
 8008952:	6021      	streq	r1, [r4, #0]
 8008954:	6054      	str	r4, [r2, #4]
 8008956:	e7ca      	b.n	80088ee <_free_r+0x22>
 8008958:	bd38      	pop	{r3, r4, r5, pc}
 800895a:	bf00      	nop
 800895c:	20001d04 	.word	0x20001d04

08008960 <__malloc_lock>:
 8008960:	4801      	ldr	r0, [pc, #4]	@ (8008968 <__malloc_lock+0x8>)
 8008962:	f7ff bfa3 	b.w	80088ac <__retarget_lock_acquire_recursive>
 8008966:	bf00      	nop
 8008968:	20001d00 	.word	0x20001d00

0800896c <__malloc_unlock>:
 800896c:	4801      	ldr	r0, [pc, #4]	@ (8008974 <__malloc_unlock+0x8>)
 800896e:	f7ff bf9e 	b.w	80088ae <__retarget_lock_release_recursive>
 8008972:	bf00      	nop
 8008974:	20001d00 	.word	0x20001d00

08008978 <_init>:
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897a:	bf00      	nop
 800897c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800897e:	bc08      	pop	{r3}
 8008980:	469e      	mov	lr, r3
 8008982:	4770      	bx	lr

08008984 <_fini>:
 8008984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008986:	bf00      	nop
 8008988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898a:	bc08      	pop	{r3}
 800898c:	469e      	mov	lr, r3
 800898e:	4770      	bx	lr
