
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000a030  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800a1e0  0800a1e0  0000b1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a328  0800a328  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a328  0800a328  0000b328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a330  0800a330  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a330  0800a330  0000b330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a334  0800a334  0000b334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a338  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d18  20000060  0800a398  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d78  0800a398  0000cd78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026587  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000495b  00000000  00000000  00032617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002070  00000000  00000000  00036f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001969  00000000  00000000  00038fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd6f  00000000  00000000  0003a951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023cf4  00000000  00000000  000686c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012439b  00000000  00000000  0008c3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b074f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008edc  00000000  00000000  001b0794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001b9670  2**0
=======
  1 .text         0000a160  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800a310  0800a310  0000b310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a428  0800a428  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a428  0800a428  0000b428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a430  0800a430  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a430  0800a430  0000b430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a434  0800a434  0000b434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a438  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d70  20000060  0800a498  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dd0  0800a498  0000cdd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000267e0  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049ae  00000000  00000000  00032870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002098  00000000  00000000  00037220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001978  00000000  00000000  000392b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd6f  00000000  00000000  0003ac30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025929  00000000  00000000  0006899f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124365  00000000  00000000  0008e2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b262d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f90  00000000  00000000  001b2670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001bb600  2**0
>>>>>>> remotes/origin/jayce_working
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001d0:	0800a1c8 	.word	0x0800a1c8
=======
 80001d0:	0800a2f8 	.word	0x0800a2f8
>>>>>>> remotes/origin/jayce_working

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
<<<<<<< HEAD
 80001ec:	0800a1c8 	.word	0x0800a1c8
=======
 80001ec:	0800a2f8 	.word	0x0800a2f8
>>>>>>> remotes/origin/jayce_working

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <TCAL9538RSVR_INIT>:
*/



uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	4611      	mov	r1, r2
 80004ec:	461a      	mov	r2, r3
 80004ee:	460b      	mov	r3, r1
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	4613      	mov	r3, r2
 80004f4:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;
	dev->input = direction_bitMask;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	79ba      	ldrb	r2, [r7, #6]
 80004fe:	719a      	strb	r2, [r3, #6]


    dev->i2cHandle = i2cHandle;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	2200      	movs	r2, #0
 800050a:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	f003 0303 	and.w	r3, r3, #3
 8000512:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress<<1);
<<<<<<< HEAD
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	005b      	lsls	r3, r3, #1
=======
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	b25b      	sxtb	r3, r3
 8000514:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
>>>>>>> remotes/origin/jayce_working
 8000518:	b25b      	sxtb	r3, r3
 800051a:	f063 031f 	orn	r3, r3, #31
 800051e:	b25b      	sxtb	r3, r3
 8000520:	b2da      	uxtb	r2, r3
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	711a      	strb	r2, [r3, #4]
    uint8_t hold_bitMask = direction_bitMask;
 8000526:	79bb      	ldrb	r3, [r7, #6]
 8000528:	757b      	strb	r3, [r7, #21]

    status = TCAL9538RSVR_SetDirection(dev, &hold_bitMask);
 800052a:	f107 0315 	add.w	r3, r7, #21
 800052e:	4619      	mov	r1, r3
 8000530:	68f8      	ldr	r0, [r7, #12]
 8000532:	f000 f83b 	bl	80005ac <TCAL9538RSVR_SetDirection>
 8000536:	4603      	mov	r3, r0
 8000538:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800053a:	7dbb      	ldrb	r3, [r7, #22]
 800053c:	2b00      	cmp	r3, #0
 800053e:	bf14      	ite	ne
 8000540:	2301      	movne	r3, #1
 8000542:	2300      	moveq	r3, #0
 8000544:	b2db      	uxtb	r3, r3
 8000546:	461a      	mov	r2, r3
 8000548:	7dfb      	ldrb	r3, [r7, #23]
 800054a:	4413      	add	r3, r2
 800054c:	75fb      	strb	r3, [r7, #23]

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 800054e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000552:	4619      	mov	r1, r3
 8000554:	68f8      	ldr	r0, [r7, #12]
 8000556:	f000 f838 	bl	80005ca <TCAL9538RSVR_SetInterrupts>
 800055a:	4603      	mov	r3, r0
 800055c:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800055e:	7dbb      	ldrb	r3, [r7, #22]
 8000560:	2b00      	cmp	r3, #0
 8000562:	bf14      	ite	ne
 8000564:	2301      	movne	r3, #1
 8000566:	2300      	moveq	r3, #0
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	7dfb      	ldrb	r3, [r7, #23]
 800056e:	4413      	add	r3, r2
 8000570:	75fb      	strb	r3, [r7, #23]

    if (direction_bitMask == 0xFF) {
 8000572:	79bb      	ldrb	r3, [r7, #6]
 8000574:	2bff      	cmp	r3, #255	@ 0xff
 8000576:	d114      	bne.n	80005a2 <TCAL9538RSVR_INIT+0xc2>
        uint8_t full = 0xFF;
 8000578:	23ff      	movs	r3, #255	@ 0xff
 800057a:	753b      	strb	r3, [r7, #20]
        status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_INVERSION, &full);
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	461a      	mov	r2, r3
 8000582:	2102      	movs	r1, #2
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	f000 f894 	bl	80006b2 <TCAL9538RSVR_WriteRegister>
 800058a:	4603      	mov	r3, r0
 800058c:	75bb      	strb	r3, [r7, #22]
        errNum += (status != HAL_OK);
 800058e:	7dbb      	ldrb	r3, [r7, #22]
 8000590:	2b00      	cmp	r3, #0
 8000592:	bf14      	ite	ne
 8000594:	2301      	movne	r3, #1
 8000596:	2300      	moveq	r3, #0
 8000598:	b2db      	uxtb	r3, r3
 800059a:	461a      	mov	r2, r3
 800059c:	7dfb      	ldrb	r3, [r7, #23]
 800059e:	4413      	add	r3, r2
 80005a0:	75fb      	strb	r3, [r7, #23]
    }

    return (errNum);
 80005a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3718      	adds	r7, #24
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t* bitMask)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, bitMask);
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	2103      	movs	r1, #3
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f000 f879 	bl	80006b2 <TCAL9538RSVR_WriteRegister>
 80005c0:	4603      	mov	r3, r0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 80005d6:	1cfb      	adds	r3, r7, #3
 80005d8:	461a      	mov	r2, r3
 80005da:	2145      	movs	r1, #69	@ 0x45
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f868 	bl	80006b2 <TCAL9538RSVR_WriteRegister>
 80005e2:	4603      	mov	r3, r0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	737b      	strb	r3, [r7, #13]


    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 80005fc:	f107 030d 	add.w	r3, r7, #13
 8000600:	461a      	mov	r2, r3
 8000602:	2146      	movs	r1, #70	@ 0x46
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 f837 	bl	8000678 <TCAL9538RSVR_ReadRegister>
 800060a:	4603      	mov	r3, r0
 800060c:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 800060e:	7bbb      	ldrb	r3, [r7, #14]
 8000610:	2b00      	cmp	r3, #0
 8000612:	bf14      	ite	ne
 8000614:	2301      	movne	r3, #1
 8000616:	2300      	moveq	r3, #0
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	4413      	add	r3, r2
 8000620:	73fb      	strb	r3, [r7, #15]

    // Read updated input values
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3305      	adds	r3, #5
 8000626:	4619      	mov	r1, r3
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f000 f807 	bl	800063c <TCAL9538RSVR_ReadInput>
 800062e:	4603      	mov	r3, r0
 8000630:	73bb      	strb	r3, [r7, #14]


    return (errNum);
 8000632:	7bfb      	ldrb	r3, [r7, #15]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <TCAL9538RSVR_ReadInput>:




HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	2100      	movs	r1, #0
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 f814 	bl	8000678 <TCAL9538RSVR_ReadRegister>
 8000650:	4603      	mov	r3, r0
}
 8000652:	4618      	mov	r0, r3
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <TCAL9538RSVR_SetOutput>:
HAL_StatusTypeDef TCAL9538RSVR_SetOutput(TCAL9538RSVR* dev, uint8_t *data)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
 8000664:	683a      	ldr	r2, [r7, #0]
 8000666:	2101      	movs	r1, #1
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 f822 	bl	80006b2 <TCAL9538RSVR_WriteRegister>
 800066e:	4603      	mov	r3, r0
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <TCAL9538RSVR_ReadRegister>:

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	460b      	mov	r3, r1
 8000682:	607a      	str	r2, [r7, #4]
 8000684:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
<<<<<<< HEAD
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	4619      	mov	r1, r3
 8000690:	7afb      	ldrb	r3, [r7, #11]
 8000692:	b29a      	uxth	r2, r3
 8000694:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2301      	movs	r3, #1
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2301      	movs	r3, #1
 80006a4:	f002 ff00 	bl	80034a8 <HAL_I2C_Mem_Read>
 80006a8:	4603      	mov	r3, r0
=======
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	6818      	ldr	r0, [r3, #0]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	791b      	ldrb	r3, [r3, #4]
 8000658:	4619      	mov	r1, r3
 800065a:	7afb      	ldrb	r3, [r7, #11]
 800065c:	b29a      	uxth	r2, r3
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	9302      	str	r3, [sp, #8]
 8000664:	2301      	movs	r3, #1
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2301      	movs	r3, #1
 800066e:	f003 fc01 	bl	8003e74 <HAL_I2C_Mem_Read>
 8000672:	4603      	mov	r3, r0
>>>>>>> remotes/origin/jayce_working
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b088      	sub	sp, #32
 80006b6:	af04      	add	r7, sp, #16
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	460b      	mov	r3, r1
 80006bc:	607a      	str	r2, [r7, #4]
 80006be:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Write(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
<<<<<<< HEAD
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	791b      	ldrb	r3, [r3, #4]
 80006c8:	4619      	mov	r1, r3
 80006ca:	7afb      	ldrb	r3, [r7, #11]
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006d2:	9302      	str	r3, [sp, #8]
 80006d4:	2301      	movs	r3, #1
 80006d6:	9301      	str	r3, [sp, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2301      	movs	r3, #1
 80006de:	f002 fdcf 	bl	8003280 <HAL_I2C_Mem_Write>
 80006e2:	4603      	mov	r3, r0
=======
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	6818      	ldr	r0, [r3, #0]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	4619      	mov	r1, r3
 8000694:	7afb      	ldrb	r3, [r7, #11]
 8000696:	b29a      	uxth	r2, r3
 8000698:	f04f 33ff 	mov.w	r3, #4294967295
 800069c:	9302      	str	r3, [sp, #8]
 800069e:	2301      	movs	r3, #1
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2301      	movs	r3, #1
 80006a8:	f003 fad0 	bl	8003c4c <HAL_I2C_Mem_Write>
 80006ac:	4603      	mov	r3, r0
>>>>>>> remotes/origin/jayce_working
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Update_CAN_Message1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Update_CAN_Message1(uint8_t flags[8], uint8_t* Input1, uint8_t* Input2)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b087      	sub	sp, #28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]

	static uint8_t prev_input1 = 0;
	static uint8_t prev_input2 = 0;


	flags[3] = 0;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	3303      	adds	r3, #3
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
	flags[4] = 0;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	3304      	adds	r3, #4
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]


	// Detect rising edges for each flag
	uint8_t risingEdges_flag1 = (~prev_input1) & *Input1;
 8000708:	4b4b      	ldr	r3, [pc, #300]	@ (8000838 <Update_CAN_Message1+0x14c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b25b      	sxtb	r3, r3
 800070e:	43db      	mvns	r3, r3
 8000710:	b25a      	sxtb	r2, r3
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b25b      	sxtb	r3, r3
 8000718:	4013      	ands	r3, r2
 800071a:	b25b      	sxtb	r3, r3
 800071c:	75fb      	strb	r3, [r7, #23]
	uint8_t risingEdges_flag2 = (~prev_input2) & *Input2;
 800071e:	4b47      	ldr	r3, [pc, #284]	@ (800083c <Update_CAN_Message1+0x150>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b25b      	sxtb	r3, r3
 8000724:	43db      	mvns	r3, r3
 8000726:	b25a      	sxtb	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b25b      	sxtb	r3, r3
 800072e:	4013      	ands	r3, r2
 8000730:	b25b      	sxtb	r3, r3
 8000732:	75bb      	strb	r3, [r7, #22]


	flags[1] ^= CHECK_BIT(risingEdges_flag2, 4) << 0; // Main
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3301      	adds	r3, #1
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b25a      	sxtb	r2, r3
 800073c:	7dbb      	ldrb	r3, [r7, #22]
 800073e:	f003 0310 	and.w	r3, r3, #16
 8000742:	2b00      	cmp	r3, #0
 8000744:	bf14      	ite	ne
 8000746:	2301      	movne	r3, #1
 8000748:	2300      	moveq	r3, #0
 800074a:	b2db      	uxtb	r3, r3
 800074c:	b25b      	sxtb	r3, r3
 800074e:	4053      	eors	r3, r2
 8000750:	b25a      	sxtb	r2, r3
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	3301      	adds	r3, #1
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 5) << 1; // Break
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3301      	adds	r3, #1
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	b25a      	sxtb	r2, r3
 8000762:	7dbb      	ldrb	r3, [r7, #22]
 8000764:	111b      	asrs	r3, r3, #4
 8000766:	b25b      	sxtb	r3, r3
 8000768:	f003 0302 	and.w	r3, r3, #2
 800076c:	b25b      	sxtb	r3, r3
 800076e:	4053      	eors	r3, r2
 8000770:	b25a      	sxtb	r2, r3
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	3301      	adds	r3, #1
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 0) << 2; // Mode
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3301      	adds	r3, #1
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b25a      	sxtb	r2, r3
 8000782:	7dbb      	ldrb	r3, [r7, #22]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	b25b      	sxtb	r3, r3
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	b25b      	sxtb	r3, r3
 800078e:	4053      	eors	r3, r2
 8000790:	b25a      	sxtb	r2, r3
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	3301      	adds	r3, #1
 8000796:	b2d2      	uxtb	r2, r2
 8000798:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 5) << 3; // MC
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	3301      	adds	r3, #1
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b25a      	sxtb	r2, r3
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	109b      	asrs	r3, r3, #2
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	f003 0308 	and.w	r3, r3, #8
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	4053      	eors	r3, r2
 80007b0:	b25a      	sxtb	r2, r3
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	3301      	adds	r3, #1
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 6) << 4; // Array
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	3301      	adds	r3, #1
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b25a      	sxtb	r2, r3
 80007c2:	7dfb      	ldrb	r3, [r7, #23]
 80007c4:	109b      	asrs	r3, r3, #2
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	f003 0310 	and.w	r3, r3, #16
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	4053      	eors	r3, r2
 80007d0:	b25a      	sxtb	r2, r3
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 4) << 5; // Extra 1
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	3301      	adds	r3, #1
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b25a      	sxtb	r2, r3
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	f003 0320 	and.w	r3, r3, #32
 80007ec:	b25b      	sxtb	r3, r3
 80007ee:	4053      	eors	r3, r2
 80007f0:	b25a      	sxtb	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3301      	adds	r3, #1
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	701a      	strb	r2, [r3, #0]


	//flags[2] |= CHECK_BIT(outputPortState, 2) << 0; // Blinkers
	//flags[2] |= CHECK_BIT(outputPortState, 0) << 1; // Left Turn Signal
	//flags[2] |= CHECK_BIT(outputPortState, 1) << 2; // Right Turn Signal
	flags[2] ^= CHECK_BIT(risingEdges_flag1, 7) << 3; //?
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3302      	adds	r3, #2
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b25a      	sxtb	r2, r3
 8000802:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000806:	111b      	asrs	r3, r3, #4
 8000808:	b25b      	sxtb	r3, r3
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	b25b      	sxtb	r3, r3
 8000810:	4053      	eors	r3, r2
 8000812:	b25a      	sxtb	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3302      	adds	r3, #2
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	701a      	strb	r2, [r3, #0]



	prev_input1 = *Input1;
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	781a      	ldrb	r2, [r3, #0]
 8000820:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <Update_CAN_Message1+0x14c>)
 8000822:	701a      	strb	r2, [r3, #0]
	prev_input2 = *Input2;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	4b04      	ldr	r3, [pc, #16]	@ (800083c <Update_CAN_Message1+0x150>)
 800082a:	701a      	strb	r2, [r3, #0]

}
<<<<<<< HEAD
 800082c:	bf00      	nop
 800082e:	371c      	adds	r7, #28
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	20000241 	.word	0x20000241
 800083c:	20000242 	.word	0x20000242
=======
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	20000280 	.word	0x20000280

08000844 <updateDebounce>:

uint8_t updateDebounce(uint8_t stable, uint8_t newReading, uint8_t *counter) {
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	603a      	str	r2, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	460b      	mov	r3, r1
 8000852:	71bb      	strb	r3, [r7, #6]
    if (newReading != stable) {
 8000854:	79ba      	ldrb	r2, [r7, #6]
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	429a      	cmp	r2, r3
 800085a:	d00e      	beq.n	800087a <updateDebounce+0x36>
        (*counter)++;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	701a      	strb	r2, [r3, #0]
        if (*counter >= 3) {
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d907      	bls.n	8000880 <updateDebounce+0x3c>
            *counter = 0;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
            return newReading;
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	e003      	b.n	8000882 <updateDebounce+0x3e>
        }
    } else {
        *counter = 0;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
    }
    return stable;
 8000880:	79fb      	ldrb	r3, [r7, #7]
}
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <HAL_GPIO_EXTI_Callback>:
>>>>>>> remotes/origin/jayce_working

08000840 <HAL_GPIO_EXTI_Callback>:
	 * */
}

// GPIO Expander Interrupt Handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Triggered = 1;
 800084a:	4b04      	ldr	r3, [pc, #16]	@ (800085c <HAL_GPIO_EXTI_Callback+0x1c>)
 800084c:	2201      	movs	r2, #1
 800084e:	701a      	strb	r2, [r3, #0]
}
<<<<<<< HEAD
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	2000023c 	.word	0x2000023c
=======
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	2000027c 	.word	0x2000027c
>>>>>>> remotes/origin/jayce_working

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000866:	f000 ff12 	bl	800168e <HAL_Init>
=======
 80008b6:	f000 fef0 	bl	800169a <HAL_Init>
>>>>>>> remotes/origin/jayce_working
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 800086a:	f000 f891 	bl	8000990 <SystemClock_Config>
=======
 80008ba:	f000 f865 	bl	8000988 <SystemClock_Config>
>>>>>>> remotes/origin/jayce_working
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 800086e:	f000 fa27 	bl	8000cc0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000872:	f000 f8d3 	bl	8000a1c <MX_ADC1_Init>
  MX_I2C4_Init();
 8000876:	f000 f9b3 	bl	8000be0 <MX_I2C4_Init>
  MX_CAN1_Init();
 800087a:	f000 f945 	bl	8000b08 <MX_CAN1_Init>
  MX_CAN2_Init();
 800087e:	f000 f979 	bl	8000b74 <MX_CAN2_Init>
  MX_UART4_Init();
 8000882:	f000 f9ed 	bl	8000c60 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  if (TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0xFF, 0x00) != HAL_OK) { Error_Handler(); } // inputs
 8000886:	2300      	movs	r3, #0
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	23ff      	movs	r3, #255	@ 0xff
 800088c:	2202      	movs	r2, #2
 800088e:	492b      	ldr	r1, [pc, #172]	@ (800093c <main+0xdc>)
 8000890:	482b      	ldr	r0, [pc, #172]	@ (8000940 <main+0xe0>)
 8000892:	f7ff fe25 	bl	80004e0 <TCAL9538RSVR_INIT>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <main+0x40>
 800089c:	f000 fc08 	bl	80010b0 <Error_Handler>
  uint8_t reg_read_hold;
  TCAL9538RSVR_ReadRegister(&U5, 0x45, &reg_read_hold);
 80008a0:	1dfb      	adds	r3, r7, #7
 80008a2:	461a      	mov	r2, r3
 80008a4:	2145      	movs	r1, #69	@ 0x45
 80008a6:	4826      	ldr	r0, [pc, #152]	@ (8000940 <main+0xe0>)
 80008a8:	f7ff fee6 	bl	8000678 <TCAL9538RSVR_ReadRegister>
  //if (TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b00111111, 0b11000000) != HAL_OK) { Error_Handler(); }
  if (TCAL9538RSVR_INIT(&U7, &hi2c4, 0x00, 0b00000000, 0b00000000) != HAL_OK) { Error_Handler(); } // output
 80008ac:	2300      	movs	r3, #0
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	2300      	movs	r3, #0
 80008b2:	2200      	movs	r2, #0
 80008b4:	4921      	ldr	r1, [pc, #132]	@ (800093c <main+0xdc>)
 80008b6:	4823      	ldr	r0, [pc, #140]	@ (8000944 <main+0xe4>)
 80008b8:	f7ff fe12 	bl	80004e0 <TCAL9538RSVR_INIT>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <main+0x66>
 80008c2:	f000 fbf5 	bl	80010b0 <Error_Handler>

  // set outputs to low to start
  TCAL9538RSVR_SetOutput(&U7, &outputPortState);
 80008c6:	4920      	ldr	r1, [pc, #128]	@ (8000948 <main+0xe8>)
 80008c8:	481e      	ldr	r0, [pc, #120]	@ (8000944 <main+0xe4>)
 80008ca:	f7ff fec6 	bl	800065a <TCAL9538RSVR_SetOutput>

  HAL_CAN_Start(&hcan1);
 80008ce:	481f      	ldr	r0, [pc, #124]	@ (800094c <main+0xec>)
 80008d0:	f001 ffe7 	bl	80028a2 <HAL_CAN_Start>

  HAL_UART_Receive_IT(&huart4, &uart_rx, 1); // enables uart interrupt, it will call the interrupt when one byte is recieved
 80008d4:	2201      	movs	r2, #1
 80008d6:	491e      	ldr	r1, [pc, #120]	@ (8000950 <main+0xf0>)
 80008d8:	481e      	ldr	r0, [pc, #120]	@ (8000954 <main+0xf4>)
 80008da:	f005 f90b 	bl	8005af4 <HAL_UART_Receive_IT>
=======
 80008be:	f000 fa87 	bl	8000dd0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008c2:	f000 fa67 	bl	8000d94 <MX_DMA_Init>
  MX_ADC1_Init();
 80008c6:	f000 f8a5 	bl	8000a14 <MX_ADC1_Init>
  MX_I2C4_Init();
 80008ca:	f000 f9f3 	bl	8000cb4 <MX_I2C4_Init>
  MX_CAN1_Init();
 80008ce:	f000 f989 	bl	8000be4 <MX_CAN1_Init>
  MX_CAN2_Init();
 80008d2:	f000 f9bb 	bl	8000c4c <MX_CAN2_Init>
  MX_UART4_Init();
 80008d6:	f000 fa2d 	bl	8000d34 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  if (TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0b11110000, 0b00001111) != HAL_OK) { Error_Handler(); } // inputs
 80008da:	230f      	movs	r3, #15
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	23f0      	movs	r3, #240	@ 0xf0
 80008e0:	2202      	movs	r2, #2
 80008e2:	491d      	ldr	r1, [pc, #116]	@ (8000958 <main+0xa8>)
 80008e4:	481d      	ldr	r0, [pc, #116]	@ (800095c <main+0xac>)
 80008e6:	f7ff fdfb 	bl	80004e0 <TCAL9538RSVR_INIT>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <main+0x44>
 80008f0:	f000 fbbc 	bl	800106c <Error_Handler>
  uint8_t reg_read_hold;
  TCAL9538RSVR_ReadRegister(&U5, 0x45, &reg_read_hold);
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	461a      	mov	r2, r3
 80008f8:	2145      	movs	r1, #69	@ 0x45
 80008fa:	4818      	ldr	r0, [pc, #96]	@ (800095c <main+0xac>)
 80008fc:	f7ff fea1 	bl	8000642 <TCAL9538RSVR_ReadRegister>
  //if (TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b00111111, 0b11000000) != HAL_OK) { Error_Handler(); }
  if (TCAL9538RSVR_INIT(&U7, &hi2c4, 0x00, 0b00000000, 0b00000000) != HAL_OK) { Error_Handler(); } // output
 8000900:	2300      	movs	r3, #0
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2300      	movs	r3, #0
 8000906:	2200      	movs	r2, #0
 8000908:	4913      	ldr	r1, [pc, #76]	@ (8000958 <main+0xa8>)
 800090a:	4815      	ldr	r0, [pc, #84]	@ (8000960 <main+0xb0>)
 800090c:	f7ff fde8 	bl	80004e0 <TCAL9538RSVR_INIT>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <main+0x6a>
 8000916:	f000 fba9 	bl	800106c <Error_Handler>

  //HAL_UART_Receive_IT(&huart4, &uart_rx, 1); // enables uart interrupt, it will call the interrupt when one byte is recieved
>>>>>>> remotes/origin/jayce_working
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
<<<<<<< HEAD
 80008de:	f006 fc5f 	bl	80071a0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_Mutex */
  CAN_MutexHandle = osSemaphoreNew(1, 1, &CAN_Mutex_attributes);
 80008e2:	4a1d      	ldr	r2, [pc, #116]	@ (8000958 <main+0xf8>)
 80008e4:	2101      	movs	r1, #1
 80008e6:	2001      	movs	r0, #1
 80008e8:	f006 fd51 	bl	800738e <osSemaphoreNew>
 80008ec:	4603      	mov	r3, r0
 80008ee:	4a1b      	ldr	r2, [pc, #108]	@ (800095c <main+0xfc>)
 80008f0:	6013      	str	r3, [r2, #0]
=======
 800091a:	f006 fe59 	bl	80075d0 <osKernelInitialize>
>>>>>>> remotes/origin/jayce_working
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
<<<<<<< HEAD
 80008f2:	4a1b      	ldr	r2, [pc, #108]	@ (8000960 <main+0x100>)
 80008f4:	2100      	movs	r1, #0
 80008f6:	481b      	ldr	r0, [pc, #108]	@ (8000964 <main+0x104>)
 80008f8:	f006 fc9c 	bl	8007234 <osThreadNew>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4a1a      	ldr	r2, [pc, #104]	@ (8000968 <main+0x108>)
 8000900:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 8000902:	4a1a      	ldr	r2, [pc, #104]	@ (800096c <main+0x10c>)
 8000904:	2100      	movs	r1, #0
 8000906:	481a      	ldr	r0, [pc, #104]	@ (8000970 <main+0x110>)
 8000908:	f006 fc94 	bl	8007234 <osThreadNew>
 800090c:	4603      	mov	r3, r0
 800090e:	4a19      	ldr	r2, [pc, #100]	@ (8000974 <main+0x114>)
 8000910:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 8000912:	4a19      	ldr	r2, [pc, #100]	@ (8000978 <main+0x118>)
 8000914:	2100      	movs	r1, #0
 8000916:	4819      	ldr	r0, [pc, #100]	@ (800097c <main+0x11c>)
 8000918:	f006 fc8c 	bl	8007234 <osThreadNew>
 800091c:	4603      	mov	r3, r0
 800091e:	4a18      	ldr	r2, [pc, #96]	@ (8000980 <main+0x120>)
 8000920:	6013      	str	r3, [r2, #0]

  /* creation of Outputs_Control */
  Outputs_ControlHandle = osThreadNew(StartTask04, NULL, &Outputs_Control_attributes);
 8000922:	4a18      	ldr	r2, [pc, #96]	@ (8000984 <main+0x124>)
 8000924:	2100      	movs	r1, #0
 8000926:	4818      	ldr	r0, [pc, #96]	@ (8000988 <main+0x128>)
 8000928:	f006 fc84 	bl	8007234 <osThreadNew>
 800092c:	4603      	mov	r3, r0
 800092e:	4a17      	ldr	r2, [pc, #92]	@ (800098c <main+0x12c>)
 8000930:	6013      	str	r3, [r2, #0]
=======
 800091e:	4a11      	ldr	r2, [pc, #68]	@ (8000964 <main+0xb4>)
 8000920:	2100      	movs	r1, #0
 8000922:	4811      	ldr	r0, [pc, #68]	@ (8000968 <main+0xb8>)
 8000924:	f006 fe9e 	bl	8007664 <osThreadNew>
 8000928:	4603      	mov	r3, r0
 800092a:	4a10      	ldr	r2, [pc, #64]	@ (800096c <main+0xbc>)
 800092c:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 800092e:	4a10      	ldr	r2, [pc, #64]	@ (8000970 <main+0xc0>)
 8000930:	2100      	movs	r1, #0
 8000932:	4810      	ldr	r0, [pc, #64]	@ (8000974 <main+0xc4>)
 8000934:	f006 fe96 	bl	8007664 <osThreadNew>
 8000938:	4603      	mov	r3, r0
 800093a:	4a0f      	ldr	r2, [pc, #60]	@ (8000978 <main+0xc8>)
 800093c:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 800093e:	4a0f      	ldr	r2, [pc, #60]	@ (800097c <main+0xcc>)
 8000940:	2100      	movs	r1, #0
 8000942:	480f      	ldr	r0, [pc, #60]	@ (8000980 <main+0xd0>)
 8000944:	f006 fe8e 	bl	8007664 <osThreadNew>
 8000948:	4603      	mov	r3, r0
 800094a:	4a0e      	ldr	r2, [pc, #56]	@ (8000984 <main+0xd4>)
 800094c:	6013      	str	r3, [r2, #0]
>>>>>>> remotes/origin/jayce_working
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
<<<<<<< HEAD
 8000932:	f006 fc59 	bl	80071e8 <osKernelStart>
=======
 800094e:	f006 fe63 	bl	8007618 <osKernelStart>
>>>>>>> remotes/origin/jayce_working

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
<<<<<<< HEAD
 8000936:	bf00      	nop
 8000938:	e7fd      	b.n	8000936 <main+0xd6>
 800093a:	bf00      	nop
 800093c:	20000134 	.word	0x20000134
 8000940:	20000224 	.word	0x20000224
 8000944:	20000234 	.word	0x20000234
 8000948:	2000023d 	.word	0x2000023d
 800094c:	200000e4 	.word	0x200000e4
 8000950:	2000023e 	.word	0x2000023e
 8000954:	20000188 	.word	0x20000188
 8000958:	0800a2d0 	.word	0x0800a2d0
 800095c:	20000220 	.word	0x20000220
 8000960:	0800a240 	.word	0x0800a240
 8000964:	08000eb9 	.word	0x08000eb9
 8000968:	20000210 	.word	0x20000210
 800096c:	0800a264 	.word	0x0800a264
 8000970:	08000ed9 	.word	0x08000ed9
 8000974:	20000214 	.word	0x20000214
 8000978:	0800a288 	.word	0x0800a288
 800097c:	08000ee9 	.word	0x08000ee9
 8000980:	20000218 	.word	0x20000218
 8000984:	0800a2ac 	.word	0x0800a2ac
 8000988:	08000fdd 	.word	0x08000fdd
 800098c:	2000021c 	.word	0x2000021c
=======
 8000952:	bf00      	nop
 8000954:	e7fd      	b.n	8000952 <main+0xa2>
 8000956:	bf00      	nop
 8000958:	2000017c 	.word	0x2000017c
 800095c:	20000264 	.word	0x20000264
 8000960:	20000274 	.word	0x20000274
 8000964:	0800a374 	.word	0x0800a374
 8000968:	08000e99 	.word	0x08000e99
 800096c:	20000258 	.word	0x20000258
 8000970:	0800a398 	.word	0x0800a398
 8000974:	08000eed 	.word	0x08000eed
 8000978:	2000025c 	.word	0x2000025c
 800097c:	0800a3bc 	.word	0x0800a3bc
 8000980:	08000f8d 	.word	0x08000f8d
 8000984:	20000260 	.word	0x20000260
>>>>>>> remotes/origin/jayce_working

08000988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b096      	sub	sp, #88	@ 0x58
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
<<<<<<< HEAD
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2244      	movs	r2, #68	@ 0x44
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f009 fb2a 	bl	8009ff8 <memset>
=======
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	2244      	movs	r2, #68	@ 0x44
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f009 fbc6 	bl	800a128 <memset>
>>>>>>> remotes/origin/jayce_working
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099c:	463b      	mov	r3, r7
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
<<<<<<< HEAD
 80009b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009b6:	f003 f9f9 	bl	8003dac <HAL_PWREx_ControlVoltageScaling>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009c0:	f000 fb76 	bl	80010b0 <Error_Handler>
=======
 80009aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009ae:	f003 fee3 	bl	8004778 <HAL_PWREx_ControlVoltageScaling>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009b8:	f000 fb58 	bl	800106c <Error_Handler>
>>>>>>> remotes/origin/jayce_working
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009bc:	2310      	movs	r3, #16
 80009be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009c0:	2301      	movs	r3, #1
 80009c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009c8:	2360      	movs	r3, #96	@ 0x60
 80009ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
<<<<<<< HEAD
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 fa3b 	bl	8003e58 <HAL_RCC_OscConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80009e8:	f000 fb62 	bl	80010b0 <Error_Handler>
=======
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4618      	mov	r0, r3
 80009d6:	f003 ff25 	bl	8004824 <HAL_RCC_OscConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80009e0:	f000 fb44 	bl	800106c <Error_Handler>
>>>>>>> remotes/origin/jayce_working
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e4:	230f      	movs	r3, #15
 80009e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
<<<<<<< HEAD
 8000a00:	463b      	mov	r3, r7
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f003 fe41 	bl	800468c <HAL_RCC_ClockConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a10:	f000 fb4e 	bl	80010b0 <Error_Handler>
=======
 80009f8:	463b      	mov	r3, r7
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 fb2b 	bl	8005058 <HAL_RCC_ClockConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a08:	f000 fb30 	bl	800106c <Error_Handler>
>>>>>>> remotes/origin/jayce_working
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3758      	adds	r7, #88	@ 0x58
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08000a1c <MX_ADC1_Init>:
=======
08000a14 <MX_ADC1_Init>:
>>>>>>> remotes/origin/jayce_working
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
<<<<<<< HEAD
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	@ 0x28
 8000a20:	af00      	add	r7, sp, #0
=======
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
<<<<<<< HEAD
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
 8000a3c:	615a      	str	r2, [r3, #20]
=======
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
 8000a34:	615a      	str	r2, [r3, #20]
>>>>>>> remotes/origin/jayce_working

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
<<<<<<< HEAD
 8000a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000afc <MX_ADC1_Init+0xe0>)
 8000a40:	4a2f      	ldr	r2, [pc, #188]	@ (8000b00 <MX_ADC1_Init+0xe4>)
 8000a42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a44:	4b2d      	ldr	r3, [pc, #180]	@ (8000afc <MX_ADC1_Init+0xe0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000afc <MX_ADC1_Init+0xe0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a50:	4b2a      	ldr	r3, [pc, #168]	@ (8000afc <MX_ADC1_Init+0xe0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a56:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <MX_ADC1_Init+0xe0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a5c:	4b27      	ldr	r3, [pc, #156]	@ (8000afc <MX_ADC1_Init+0xe0>)
 8000a5e:	2204      	movs	r2, #4
 8000a60:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a62:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <MX_ADC1_Init+0xe0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a68:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <MX_ADC1_Init+0xe0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a6e:	4b23      	ldr	r3, [pc, #140]	@ (8000afc <MX_ADC1_Init+0xe0>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a74:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <MX_ADC1_Init+0xe0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000afc <MX_ADC1_Init+0xe0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a82:	4b1e      	ldr	r3, [pc, #120]	@ (8000afc <MX_ADC1_Init+0xe0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a88:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <MX_ADC1_Init+0xe0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a90:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <MX_ADC1_Init+0xe0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a96:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <MX_ADC1_Init+0xe0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a9e:	4817      	ldr	r0, [pc, #92]	@ (8000afc <MX_ADC1_Init+0xe0>)
 8000aa0:	f000 ffce 	bl	8001a40 <HAL_ADC_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000aaa:	f000 fb01 	bl	80010b0 <Error_Handler>
=======
 8000a36:	4b68      	ldr	r3, [pc, #416]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000a38:	4a68      	ldr	r2, [pc, #416]	@ (8000bdc <MX_ADC1_Init+0x1c8>)
 8000a3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a3c:	4b66      	ldr	r3, [pc, #408]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a42:	4b65      	ldr	r3, [pc, #404]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a48:	4b63      	ldr	r3, [pc, #396]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a4e:	4b62      	ldr	r3, [pc, #392]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a54:	4b60      	ldr	r3, [pc, #384]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000a56:	2208      	movs	r2, #8
 8000a58:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a60:	4b5d      	ldr	r3, [pc, #372]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 8000a66:	4b5c      	ldr	r3, [pc, #368]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000a68:	220a      	movs	r2, #10
 8000a6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a6c:	4b5a      	ldr	r3, [pc, #360]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a74:	4b58      	ldr	r3, [pc, #352]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a7a:	4b57      	ldr	r3, [pc, #348]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a80:	4b55      	ldr	r3, [pc, #340]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a88:	4b53      	ldr	r3, [pc, #332]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a8e:	4b52      	ldr	r3, [pc, #328]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a96:	4850      	ldr	r0, [pc, #320]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000a98:	f001 f86e 	bl	8001b78 <HAL_ADC_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000aa2:	f000 fae3 	bl	800106c <Error_Handler>
>>>>>>> remotes/origin/jayce_working
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
<<<<<<< HEAD
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4810      	ldr	r0, [pc, #64]	@ (8000afc <MX_ADC1_Init+0xe0>)
 8000aba:	f001 fd47 	bl	800254c <HAL_ADCEx_MultiModeConfigChannel>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ac4:	f000 faf4 	bl	80010b0 <Error_Handler>
=======
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4849      	ldr	r0, [pc, #292]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000ab2:	f002 f94f 	bl	8002d54 <HAL_ADCEx_MultiModeConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000abc:	f000 fad6 	bl	800106c <Error_Handler>
>>>>>>> remotes/origin/jayce_working
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
<<<<<<< HEAD
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <MX_ADC1_Init+0xe8>)
 8000aca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000acc:	2306      	movs	r3, #6
 8000ace:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ad4:	237f      	movs	r3, #127	@ 0x7f
 8000ad6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_ADC1_Init+0xe0>)
 8000ae6:	f001 f8ff 	bl	8001ce8 <HAL_ADC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000af0:	f000 fade 	bl	80010b0 <Error_Handler>
=======
 8000ac0:	4b47      	ldr	r3, [pc, #284]	@ (8000be0 <MX_ADC1_Init+0x1cc>)
 8000ac2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ac4:	2306      	movs	r3, #6
 8000ac6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000acc:	237f      	movs	r3, #127	@ 0x7f
 8000ace:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	4619      	mov	r1, r3
 8000adc:	483e      	ldr	r0, [pc, #248]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000ade:	f001 fad1 	bl	8002084 <HAL_ADC_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ae8:	f000 fac0 	bl	800106c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000aec:	230c      	movs	r3, #12
 8000aee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4619      	mov	r1, r3
 8000af4:	4838      	ldr	r0, [pc, #224]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000af6:	f001 fac5 	bl	8002084 <HAL_ADC_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000b00:	f000 fab4 	bl	800106c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b04:	2312      	movs	r3, #18
 8000b06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4832      	ldr	r0, [pc, #200]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000b0e:	f001 fab9 	bl	8002084 <HAL_ADC_ConfigChannel>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000b18:	f000 faa8 	bl	800106c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b1c:	2318      	movs	r3, #24
 8000b1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	482c      	ldr	r0, [pc, #176]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000b26:	f001 faad 	bl	8002084 <HAL_ADC_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000b30:	f000 fa9c 	bl	800106c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000b34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4826      	ldr	r0, [pc, #152]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000b40:	f001 faa0 	bl	8002084 <HAL_ADC_ConfigChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8000b4a:	f000 fa8f 	bl	800106c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000b4e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000b52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	4619      	mov	r1, r3
 8000b58:	481f      	ldr	r0, [pc, #124]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000b5a:	f001 fa93 	bl	8002084 <HAL_ADC_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000b64:	f000 fa82 	bl	800106c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000b68:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000b6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	4619      	mov	r1, r3
 8000b72:	4819      	ldr	r0, [pc, #100]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000b74:	f001 fa86 	bl	8002084 <HAL_ADC_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000b7e:	f000 fa75 	bl	800106c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000b82:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000b86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4812      	ldr	r0, [pc, #72]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000b8e:	f001 fa79 	bl	8002084 <HAL_ADC_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_ADC1_Init+0x188>
  {
    Error_Handler();
 8000b98:	f000 fa68 	bl	800106c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000b9c:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000ba0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000ba8:	f001 fa6c 	bl	8002084 <HAL_ADC_ConfigChannel>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 8000bb2:	f000 fa5b 	bl	800106c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000bb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <MX_ADC1_Init+0x1c4>)
 8000bc2:	f001 fa5f 	bl	8002084 <HAL_ADC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC1_Init+0x1bc>
  {
    Error_Handler();
 8000bcc:	f000 fa4e 	bl	800106c <Error_Handler>
>>>>>>> remotes/origin/jayce_working
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
<<<<<<< HEAD
 8000af4:	bf00      	nop
 8000af6:	3728      	adds	r7, #40	@ 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000007c 	.word	0x2000007c
 8000b00:	50040000 	.word	0x50040000
 8000b04:	04300002 	.word	0x04300002

08000b08 <MX_CAN1_Init>:
=======
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	@ 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	2000007c 	.word	0x2000007c
 8000bdc:	50040000 	.word	0x50040000
 8000be0:	04300002 	.word	0x04300002

08000be4 <MX_CAN1_Init>:
>>>>>>> remotes/origin/jayce_working
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
<<<<<<< HEAD
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
=======
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
<<<<<<< HEAD
 8000b0c:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <MX_CAN1_Init+0x64>)
 8000b0e:	4a18      	ldr	r2, [pc, #96]	@ (8000b70 <MX_CAN1_Init+0x68>)
 8000b10:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <MX_CAN1_Init+0x64>)
 8000b14:	2202      	movs	r2, #2
 8000b16:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b18:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <MX_CAN1_Init+0x64>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <MX_CAN1_Init+0x64>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_CAN1_Init+0x64>)
 8000b26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b2a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <MX_CAN1_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_CAN1_Init+0x64>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <MX_CAN1_Init+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <MX_CAN1_Init+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b44:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <MX_CAN1_Init+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <MX_CAN1_Init+0x64>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <MX_CAN1_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <MX_CAN1_Init+0x64>)
 8000b58:	f001 fda8 	bl	80026ac <HAL_CAN_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000b62:	f000 faa5 	bl	80010b0 <Error_Handler>
=======
 8000be8:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <MX_CAN1_Init+0x60>)
 8000bea:	4a17      	ldr	r2, [pc, #92]	@ (8000c48 <MX_CAN1_Init+0x64>)
 8000bec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000bee:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <MX_CAN1_Init+0x60>)
 8000bf0:	2210      	movs	r2, #16
 8000bf2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bf4:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <MX_CAN1_Init+0x60>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bfa:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <MX_CAN1_Init+0x60>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000c00:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <MX_CAN1_Init+0x60>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c06:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <MX_CAN1_Init+0x60>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c44 <MX_CAN1_Init+0x60>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c12:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <MX_CAN1_Init+0x60>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <MX_CAN1_Init+0x60>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <MX_CAN1_Init+0x60>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c24:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <MX_CAN1_Init+0x60>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <MX_CAN1_Init+0x60>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c30:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <MX_CAN1_Init+0x60>)
 8000c32:	f002 f93f 	bl	8002eb4 <HAL_CAN_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000c3c:	f000 fa16 	bl	800106c <Error_Handler>
>>>>>>> remotes/origin/jayce_working
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
<<<<<<< HEAD
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000e4 	.word	0x200000e4
 8000b70:	40006400 	.word	0x40006400

08000b74 <MX_CAN2_Init>:
=======
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	2000012c 	.word	0x2000012c
 8000c48:	40006400 	.word	0x40006400

08000c4c <MX_CAN2_Init>:
>>>>>>> remotes/origin/jayce_working
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
<<<<<<< HEAD
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
=======
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
<<<<<<< HEAD
 8000b78:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <MX_CAN2_Init+0x64>)
 8000b7a:	4a18      	ldr	r2, [pc, #96]	@ (8000bdc <MX_CAN2_Init+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <MX_CAN2_Init+0x64>)
 8000b80:	2202      	movs	r2, #2
 8000b82:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000b84:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <MX_CAN2_Init+0x64>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b8a:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <MX_CAN2_Init+0x64>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000b90:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <MX_CAN2_Init+0x64>)
 8000b92:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b96:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <MX_CAN2_Init+0x64>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <MX_CAN2_Init+0x64>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <MX_CAN2_Init+0x64>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <MX_CAN2_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <MX_CAN2_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <MX_CAN2_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <MX_CAN2_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000bc2:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <MX_CAN2_Init+0x64>)
 8000bc4:	f001 fd72 	bl	80026ac <HAL_CAN_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000bce:	f000 fa6f 	bl	80010b0 <Error_Handler>
=======
 8000c50:	4b16      	ldr	r3, [pc, #88]	@ (8000cac <MX_CAN2_Init+0x60>)
 8000c52:	4a17      	ldr	r2, [pc, #92]	@ (8000cb0 <MX_CAN2_Init+0x64>)
 8000c54:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000c56:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <MX_CAN2_Init+0x60>)
 8000c58:	2210      	movs	r2, #16
 8000c5a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000c5c:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <MX_CAN2_Init+0x60>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c62:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <MX_CAN2_Init+0x60>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000c68:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <MX_CAN2_Init+0x60>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <MX_CAN2_Init+0x60>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <MX_CAN2_Init+0x60>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <MX_CAN2_Init+0x60>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <MX_CAN2_Init+0x60>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000c86:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <MX_CAN2_Init+0x60>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <MX_CAN2_Init+0x60>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <MX_CAN2_Init+0x60>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	@ (8000cac <MX_CAN2_Init+0x60>)
 8000c9a:	f002 f90b 	bl	8002eb4 <HAL_CAN_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000ca4:	f000 f9e2 	bl	800106c <Error_Handler>
>>>>>>> remotes/origin/jayce_working
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
<<<<<<< HEAD
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000010c 	.word	0x2000010c
 8000bdc:	40006800 	.word	0x40006800

08000be0 <MX_I2C4_Init>:
=======
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000154 	.word	0x20000154
 8000cb0:	40006800 	.word	0x40006800

08000cb4 <MX_I2C4_Init>:
>>>>>>> remotes/origin/jayce_working
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
<<<<<<< HEAD
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
=======
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
<<<<<<< HEAD
 8000be4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <MX_I2C4_Init+0x74>)
 8000be6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c58 <MX_I2C4_Init+0x78>)
 8000be8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <MX_I2C4_Init+0x74>)
 8000bec:	4a1b      	ldr	r2, [pc, #108]	@ (8000c5c <MX_I2C4_Init+0x7c>)
 8000bee:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <MX_I2C4_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <MX_I2C4_Init+0x74>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <MX_I2C4_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c02:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <MX_I2C4_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <MX_I2C4_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <MX_I2C4_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <MX_I2C4_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c1a:	480e      	ldr	r0, [pc, #56]	@ (8000c54 <MX_I2C4_Init+0x74>)
 8000c1c:	f002 fa94 	bl	8003148 <HAL_I2C_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000c26:	f000 fa43 	bl	80010b0 <Error_Handler>
=======
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <MX_I2C4_Init+0x74>)
 8000cba:	4a1c      	ldr	r2, [pc, #112]	@ (8000d2c <MX_I2C4_Init+0x78>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <MX_I2C4_Init+0x74>)
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d30 <MX_I2C4_Init+0x7c>)
 8000cc2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000cc4:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <MX_I2C4_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cca:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <MX_I2C4_Init+0x74>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd0:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <MX_I2C4_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <MX_I2C4_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <MX_I2C4_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <MX_I2C4_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <MX_I2C4_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000cee:	480e      	ldr	r0, [pc, #56]	@ (8000d28 <MX_I2C4_Init+0x74>)
 8000cf0:	f002 ff10 	bl	8003b14 <HAL_I2C_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000cfa:	f000 f9b7 	bl	800106c <Error_Handler>
>>>>>>> remotes/origin/jayce_working
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
<<<<<<< HEAD
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4809      	ldr	r0, [pc, #36]	@ (8000c54 <MX_I2C4_Init+0x74>)
 8000c2e:	f003 f817 	bl	8003c60 <HAL_I2CEx_ConfigAnalogFilter>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000c38:	f000 fa3a 	bl	80010b0 <Error_Handler>
=======
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4809      	ldr	r0, [pc, #36]	@ (8000d28 <MX_I2C4_Init+0x74>)
 8000d02:	f003 fc93 	bl	800462c <HAL_I2CEx_ConfigAnalogFilter>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d0c:	f000 f9ae 	bl	800106c <Error_Handler>
>>>>>>> remotes/origin/jayce_working
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
<<<<<<< HEAD
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <MX_I2C4_Init+0x74>)
 8000c40:	f003 f859 	bl	8003cf6 <HAL_I2CEx_ConfigDigitalFilter>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000c4a:	f000 fa31 	bl	80010b0 <Error_Handler>
=======
 8000d10:	2100      	movs	r1, #0
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <MX_I2C4_Init+0x74>)
 8000d14:	f003 fcd5 	bl	80046c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d1e:	f000 f9a5 	bl	800106c <Error_Handler>
>>>>>>> remotes/origin/jayce_working
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
<<<<<<< HEAD
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000134 	.word	0x20000134
 8000c58:	40008400 	.word	0x40008400
 8000c5c:	00100d14 	.word	0x00100d14

08000c60 <MX_UART4_Init>:
=======
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2000017c 	.word	0x2000017c
 8000d2c:	40008400 	.word	0x40008400
 8000d30:	00100d14 	.word	0x00100d14

08000d34 <MX_UART4_Init>:
>>>>>>> remotes/origin/jayce_working
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
<<<<<<< HEAD
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
=======
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
<<<<<<< HEAD
 8000c64:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <MX_UART4_Init+0x58>)
 8000c66:	4a15      	ldr	r2, [pc, #84]	@ (8000cbc <MX_UART4_Init+0x5c>)
 8000c68:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000c6a:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <MX_UART4_Init+0x58>)
 8000c6c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c70:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <MX_UART4_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <MX_UART4_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <MX_UART4_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <MX_UART4_Init+0x58>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <MX_UART4_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c90:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <MX_UART4_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <MX_UART4_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <MX_UART4_Init+0x58>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <MX_UART4_Init+0x58>)
 8000ca4:	f004 fed8 	bl	8005a58 <HAL_UART_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000cae:	f000 f9ff 	bl	80010b0 <Error_Handler>
=======
 8000d38:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <MX_UART4_Init+0x58>)
 8000d3a:	4a15      	ldr	r2, [pc, #84]	@ (8000d90 <MX_UART4_Init+0x5c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <MX_UART4_Init+0x58>)
 8000d40:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d44:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_UART4_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <MX_UART4_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <MX_UART4_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <MX_UART4_Init+0x58>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <MX_UART4_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <MX_UART4_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <MX_UART4_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <MX_UART4_Init+0x58>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_UART4_Init+0x58>)
 8000d78:	f005 fb54 	bl	8006424 <HAL_UART_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000d82:	f000 f973 	bl	800106c <Error_Handler>
>>>>>>> remotes/origin/jayce_working
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
<<<<<<< HEAD
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000188 	.word	0x20000188
 8000cbc:	40004c00 	.word	0x40004c00

08000cc0 <MX_GPIO_Init>:
=======
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200001d0 	.word	0x200001d0
 8000d90:	40004c00 	.word	0x40004c00

08000d94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <MX_DMA_Init+0x38>)
 8000d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000dcc <MX_DMA_Init+0x38>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000da6:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <MX_DMA_Init+0x38>)
 8000da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2105      	movs	r1, #5
 8000db6:	200b      	movs	r0, #11
 8000db8:	f002 fa30 	bl	800321c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dbc:	200b      	movs	r0, #11
 8000dbe:	f002 fa49 	bl	8003254 <HAL_NVIC_EnableIRQ>

}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <MX_GPIO_Init>:
>>>>>>> remotes/origin/jayce_working
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]
=======
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]
>>>>>>> remotes/origin/jayce_working
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< HEAD
 8000cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d80 <MX_GPIO_Init+0xc0>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	4a29      	ldr	r2, [pc, #164]	@ (8000d80 <MX_GPIO_Init+0xc0>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce2:	4b27      	ldr	r3, [pc, #156]	@ (8000d80 <MX_GPIO_Init+0xc0>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b24      	ldr	r3, [pc, #144]	@ (8000d80 <MX_GPIO_Init+0xc0>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	4a23      	ldr	r2, [pc, #140]	@ (8000d80 <MX_GPIO_Init+0xc0>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfa:	4b21      	ldr	r3, [pc, #132]	@ (8000d80 <MX_GPIO_Init+0xc0>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b1e      	ldr	r3, [pc, #120]	@ (8000d80 <MX_GPIO_Init+0xc0>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8000d80 <MX_GPIO_Init+0xc0>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d12:	4b1b      	ldr	r3, [pc, #108]	@ (8000d80 <MX_GPIO_Init+0xc0>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OK_LED_GPIO_Port, OK_LED_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d28:	f002 f9c4 	bl	80030b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Alert1_Pin */
  GPIO_InitStruct.Pin = Alert1_Pin;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d30:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alert1_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4810      	ldr	r0, [pc, #64]	@ (8000d84 <MX_GPIO_Init+0xc4>)
 8000d42:	f002 f825 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OK_LED_Pin */
  GPIO_InitStruct.Pin = OK_LED_Pin;
 8000d46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OK_LED_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d62:	f002 f815 	bl	8002d90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2105      	movs	r1, #5
 8000d6a:	2008      	movs	r0, #8
 8000d6c:	f001 ff66 	bl	8002c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d70:	2008      	movs	r0, #8
 8000d72:	f001 ff7f 	bl	8002c74 <HAL_NVIC_EnableIRQ>
=======
 8000de6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e90 <MX_GPIO_Init+0xc0>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	4a29      	ldr	r2, [pc, #164]	@ (8000e90 <MX_GPIO_Init+0xc0>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df2:	4b27      	ldr	r3, [pc, #156]	@ (8000e90 <MX_GPIO_Init+0xc0>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4b24      	ldr	r3, [pc, #144]	@ (8000e90 <MX_GPIO_Init+0xc0>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	4a23      	ldr	r2, [pc, #140]	@ (8000e90 <MX_GPIO_Init+0xc0>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0a:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <MX_GPIO_Init+0xc0>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <MX_GPIO_Init+0xc0>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8000e90 <MX_GPIO_Init+0xc0>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e22:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <MX_GPIO_Init+0xc0>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OK_LED_GPIO_Port, OK_LED_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e38:	f002 fe22 	bl	8003a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Alert1_Pin */
  GPIO_InitStruct.Pin = Alert1_Pin;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e40:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alert1_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4810      	ldr	r0, [pc, #64]	@ (8000e94 <MX_GPIO_Init+0xc4>)
 8000e52:	f002 fc83 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pin : OK_LED_Pin */
  GPIO_InitStruct.Pin = OK_LED_Pin;
 8000e56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OK_LED_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e72:	f002 fc73 	bl	800375c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2105      	movs	r1, #5
 8000e7a:	2008      	movs	r0, #8
 8000e7c:	f002 f9ce 	bl	800321c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e80:	2008      	movs	r0, #8
 8000e82:	f002 f9e7 	bl	8003254 <HAL_NVIC_EnableIRQ>
>>>>>>> remotes/origin/jayce_working

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
 8000d76:	bf00      	nop
 8000d78:	3720      	adds	r7, #32
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40021000 	.word	0x40021000
 8000d84:	48000800 	.word	0x48000800

08000d88 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

  if (huart->Instance == UART4)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a42      	ldr	r2, [pc, #264]	@ (8000ea0 <HAL_UART_RxCpltCallback+0x118>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d179      	bne.n	8000e8e <HAL_UART_RxCpltCallback+0x106>
  {
    uint8_t new_presses = uart_rx & ~prev_uart_rx;
 8000d9a:	4b42      	ldr	r3, [pc, #264]	@ (8000ea4 <HAL_UART_RxCpltCallback+0x11c>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b25b      	sxtb	r3, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	b25a      	sxtb	r2, r3
 8000da4:	4b40      	ldr	r3, [pc, #256]	@ (8000ea8 <HAL_UART_RxCpltCallback+0x120>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	4013      	ands	r3, r2
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	73fb      	strb	r3, [r7, #15]

    // if left turn button was pressed
    if (new_presses & BUTTON_LEFT_TURN)
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00a      	beq.n	8000dd0 <HAL_UART_RxCpltCallback+0x48>
    {
      if (lightState == LIGHTS_LEFT)
 8000dba:	4b3c      	ldr	r3, [pc, #240]	@ (8000eac <HAL_UART_RxCpltCallback+0x124>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d103      	bne.n	8000dca <HAL_UART_RxCpltCallback+0x42>
        lightState = LIGHTS_NONE;
 8000dc2:	4b3a      	ldr	r3, [pc, #232]	@ (8000eac <HAL_UART_RxCpltCallback+0x124>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	e002      	b.n	8000dd0 <HAL_UART_RxCpltCallback+0x48>
      else
        lightState = LIGHTS_LEFT;
 8000dca:	4b38      	ldr	r3, [pc, #224]	@ (8000eac <HAL_UART_RxCpltCallback+0x124>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
    }

    // if right turn button was pressed
    if (new_presses & BUTTON_RIGHT_TURN)
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00a      	beq.n	8000df0 <HAL_UART_RxCpltCallback+0x68>
    {
      if (lightState == LIGHTS_RIGHT)
 8000dda:	4b34      	ldr	r3, [pc, #208]	@ (8000eac <HAL_UART_RxCpltCallback+0x124>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d103      	bne.n	8000dea <HAL_UART_RxCpltCallback+0x62>
        lightState = LIGHTS_NONE;
 8000de2:	4b32      	ldr	r3, [pc, #200]	@ (8000eac <HAL_UART_RxCpltCallback+0x124>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	e002      	b.n	8000df0 <HAL_UART_RxCpltCallback+0x68>
      else
        lightState = LIGHTS_RIGHT;
 8000dea:	4b30      	ldr	r3, [pc, #192]	@ (8000eac <HAL_UART_RxCpltCallback+0x124>)
 8000dec:	2202      	movs	r2, #2
 8000dee:	701a      	strb	r2, [r3, #0]
    }

    // if hazard button was pressed
    if (new_presses & BUTTON_HAZARD)
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d00a      	beq.n	8000e10 <HAL_UART_RxCpltCallback+0x88>
    {
      if (lightState == LIGHTS_HAZARD)
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	@ (8000eac <HAL_UART_RxCpltCallback+0x124>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d103      	bne.n	8000e0a <HAL_UART_RxCpltCallback+0x82>
        lightState = LIGHTS_NONE;
 8000e02:	4b2a      	ldr	r3, [pc, #168]	@ (8000eac <HAL_UART_RxCpltCallback+0x124>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
 8000e08:	e002      	b.n	8000e10 <HAL_UART_RxCpltCallback+0x88>
      else
        lightState = LIGHTS_HAZARD;
 8000e0a:	4b28      	ldr	r3, [pc, #160]	@ (8000eac <HAL_UART_RxCpltCallback+0x124>)
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	701a      	strb	r2, [r3, #0]
    }

    // if headlight button was pressed
    if (new_presses & BUTTON_HEADLIGHTS)
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d00d      	beq.n	8000e36 <HAL_UART_RxCpltCallback+0xae>
    {
      // toggle headlight state
      outputPortState ^= OUTPUT_R_HEAD_CTRL;
 8000e1a:	4b25      	ldr	r3, [pc, #148]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x128>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	f083 0308 	eor.w	r3, r3, #8
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b22      	ldr	r3, [pc, #136]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x128>)
 8000e26:	701a      	strb	r2, [r3, #0]
      outputPortState ^= OUTPUT_L_HEAD_CTRL;
 8000e28:	4b21      	ldr	r3, [pc, #132]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x128>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	f083 0304 	eor.w	r3, r3, #4
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x128>)
 8000e34:	701a      	strb	r2, [r3, #0]
    }

    // if display button was pressed, (I think this is toggle)
    if (new_presses & BUTTON_DISPLAY)
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	f003 0310 	and.w	r3, r3, #16
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00d      	beq.n	8000e5c <HAL_UART_RxCpltCallback+0xd4>
    {
      // toggle display state
      outputPortState ^= OUTPUT_FL_LIGHT_CTRL;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x128>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	f083 0310 	eor.w	r3, r3, #16
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x128>)
 8000e4c:	701a      	strb	r2, [r3, #0]
      outputPortState ^= OUTPUT_FR_LIGHT_CTRL;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x128>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	f083 0320 	eor.w	r3, r3, #32
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x128>)
 8000e5a:	701a      	strb	r2, [r3, #0]
    }

    // if horn button is being pressed currently
    if (uart_rx & BUTTON_HORN)
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <HAL_UART_RxCpltCallback+0x120>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	f003 0320 	and.w	r3, r3, #32
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d007      	beq.n	8000e78 <HAL_UART_RxCpltCallback+0xf0>
      outputPortState |= OUTPUT_HORN_CTRL;
 8000e68:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x128>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x128>)
 8000e74:	701a      	strb	r2, [r3, #0]
 8000e76:	e006      	b.n	8000e86 <HAL_UART_RxCpltCallback+0xfe>
    else
      outputPortState &= ~OUTPUT_HORN_CTRL;
 8000e78:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x128>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	f023 0301 	bic.w	r3, r3, #1
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x128>)
 8000e84:	701a      	strb	r2, [r3, #0]
    TODO: Some code with PTT button (does this just go over can what even is PTT)
    TODO: Some code with Fan (where does fan come from) 
    */


    prev_uart_rx = uart_rx;
 8000e86:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <HAL_UART_RxCpltCallback+0x120>)
 8000e88:	781a      	ldrb	r2, [r3, #0]
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_UART_RxCpltCallback+0x11c>)
 8000e8c:	701a      	strb	r2, [r3, #0]
  }

  HAL_UART_Receive_IT(&huart4, &uart_rx, 1); // reenables uart interrupt
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4905      	ldr	r1, [pc, #20]	@ (8000ea8 <HAL_UART_RxCpltCallback+0x120>)
 8000e92:	4808      	ldr	r0, [pc, #32]	@ (8000eb4 <HAL_UART_RxCpltCallback+0x12c>)
 8000e94:	f004 fe2e 	bl	8005af4 <HAL_UART_Receive_IT>
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40004c00 	.word	0x40004c00
 8000ea4:	2000023f 	.word	0x2000023f
 8000ea8:	2000023e 	.word	0x2000023e
 8000eac:	20000240 	.word	0x20000240
 8000eb0:	2000023d 	.word	0x2000023d
 8000eb4:	20000188 	.word	0x20000188

08000eb8 <StartTask01>:
=======
 8000e86:	bf00      	nop
 8000e88:	3720      	adds	r7, #32
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48000800 	.word	0x48000800

08000e98 <StartTask01>:
>>>>>>> remotes/origin/jayce_working
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
<<<<<<< HEAD
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000ec0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec8:	f002 f90c 	bl	80030e4 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000ecc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ed0:	f006 fa42 	bl	8007358 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000ed4:	bf00      	nop
 8000ed6:	e7f3      	b.n	8000ec0 <StartTask01+0x8>

08000ed8 <StartTask02>:
=======
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint8_t var = 0b11111111;
 8000ea0:	23ff      	movs	r3, #255	@ 0xff
 8000ea2:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000ea4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ea8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eac:	f002 fe00 	bl	8003ab0 <HAL_GPIO_TogglePin>
	//var = ~var;
	TCAL9538RSVR_SetOutput(&U7, &var);
 8000eb0:	f107 030f 	add.w	r3, r7, #15
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4804      	ldr	r0, [pc, #16]	@ (8000ec8 <StartTask01+0x30>)
 8000eb8:	f7ff fbb4 	bl	8000624 <TCAL9538RSVR_SetOutput>
    osDelay(500);
 8000ebc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ec0:	f006 fc62 	bl	8007788 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000ec4:	bf00      	nop
 8000ec6:	e7ed      	b.n	8000ea4 <StartTask01+0xc>
 8000ec8:	20000274 	.word	0x20000274

08000ecc <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_StartTask02 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	dma_flag = 1;
 8000ed4:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000298 	.word	0x20000298

08000eec <StartTask02>:
>>>>>>> remotes/origin/jayce_working
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
<<<<<<< HEAD
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	//Code for reading ADC values

	  //TCAL9538RSVR_ReadInput(&U5, &var);
	//code sending data over CAN

    osDelay(1);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f006 fa39 	bl	8007358 <osDelay>
 8000ee6:	e7fb      	b.n	8000ee0 <StartTask02+0x8>

08000ee8 <StartTask03>:
=======
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08e      	sub	sp, #56	@ 0x38
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

  uint16_t adc_var_avg = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  CAN_TxHeaderTypeDef TxHeader;
  uint8_t adc_data[2];
  uint32_t TxMailbox;
  uint8_t can_data[5];

  TxHeader.StdId = 0x0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
  TxHeader.DLC = 5;
 8000efc:	2305      	movs	r3, #5
 8000efe:	62bb      	str	r3, [r7, #40]	@ 0x28

  adc_data[0] = adc_var_avg & 0xFF;
 8000f00:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	753b      	strb	r3, [r7, #20]
  adc_data[1] = (adc_var_avg >> 8) & 0x0F;
 8000f06:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	757b      	strb	r3, [r7, #21]

  can_data[0] = TxHeader.StdId;
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	733b      	strb	r3, [r7, #12]
  can_data[1] = adc_data[0];
 8000f1c:	7d3b      	ldrb	r3, [r7, #20]
 8000f1e:	737b      	strb	r3, [r7, #13]
  can_data[2] = adc_data[1];
 8000f20:	7d7b      	ldrb	r3, [r7, #21]
 8000f22:	73bb      	strb	r3, [r7, #14]


  for (;;)
  {

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000f24:	220a      	movs	r2, #10
 8000f26:	4915      	ldr	r1, [pc, #84]	@ (8000f7c <StartTask02+0x90>)
 8000f28:	4815      	ldr	r0, [pc, #84]	@ (8000f80 <StartTask02+0x94>)
 8000f2a:	f000 ff79 	bl	8001e20 <HAL_ADC_Start_DMA>
	// Start ADC with DMA
	while (!(dma_flag));
 8000f2e:	bf00      	nop
 8000f30:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <StartTask02+0x98>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d0fa      	beq.n	8000f30 <StartTask02+0x44>

	// Stop ADC with DMA
	HAL_ADC_Stop_DMA(&hadc1);
 8000f3a:	4811      	ldr	r0, [pc, #68]	@ (8000f80 <StartTask02+0x94>)
 8000f3c:	f001 f82c 	bl	8001f98 <HAL_ADC_Stop_DMA>
	dma_flag = 0;
 8000f40:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <StartTask02+0x98>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
	// Copy ADC buffer and compute average
	for (int i = 0; i < ADC_BUF_LEN; i++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f4a:	e009      	b.n	8000f60 <StartTask02+0x74>
	{
		adc_var_avg += adc_buf[i];
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <StartTask02+0x90>)
 8000f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f50:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000f56:	4413      	add	r3, r2
 8000f58:	86fb      	strh	r3, [r7, #54]	@ 0x36
	for (int i = 0; i < ADC_BUF_LEN; i++)
 8000f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f62:	2b09      	cmp	r3, #9
 8000f64:	ddf2      	ble.n	8000f4c <StartTask02+0x60>
	}
	adc_var_avg /= ADC_BUF_LEN;
 8000f66:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000f68:	4a07      	ldr	r2, [pc, #28]	@ (8000f88 <StartTask02+0x9c>)
 8000f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6e:	08db      	lsrs	r3, r3, #3
 8000f70:	86fb      	strh	r3, [r7, #54]	@ 0x36
    // Wait until the ADC DMA completes
    osDelay(10); // Adjust delay if necessary
 8000f72:	200a      	movs	r0, #10
 8000f74:	f006 fc08 	bl	8007788 <osDelay>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000f78:	e7d4      	b.n	8000f24 <StartTask02+0x38>
 8000f7a:	bf00      	nop
 8000f7c:	20000284 	.word	0x20000284
 8000f80:	2000007c 	.word	0x2000007c
 8000f84:	20000298 	.word	0x20000298
 8000f88:	cccccccd 	.word	0xcccccccd

08000f8c <StartTask03>:
>>>>>>> remotes/origin/jayce_working
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
<<<<<<< HEAD
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	b090      	sub	sp, #64	@ 0x40
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
=======
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	@ 0x30
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  /* USER CODE BEGIN StartTask03 */

	int debounce_count = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int HAL_CAN_BUSY = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint64_t messages_sent = 0;
 8000ef8:	f04f 0200 	mov.w	r2, #0
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
<<<<<<< HEAD
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox = { 0 };
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = 0x7FF; // 11 bit Identifier !!Change!!
 8000f14:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000f18:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000f1e:	2308      	movs	r3, #8
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
	TxData[0] = 1;
 8000f22:	2301      	movs	r3, #1
 8000f24:	733b      	strb	r3, [r7, #12]

	Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	4a27      	ldr	r2, [pc, #156]	@ (8000fc8 <StartTask03+0xe0>)
 8000f2c:	4927      	ldr	r1, [pc, #156]	@ (8000fcc <StartTask03+0xe4>)
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fbdc 	bl	80006ec <Update_CAN_Message1>
=======
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox;

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = 0x3FF; // 11 bit Identifier !!Change!!
 8000fa0:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000fa4:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000faa:	2308      	movs	r3, #8
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24

	Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001028 <StartTask03+0x9c>)
 8000fb4:	491d      	ldr	r1, [pc, #116]	@ (800102c <StartTask03+0xa0>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fb7e 	bl	80006b8 <Update_CAN_Message1>
	stableInput1 = U5.portValues;
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <StartTask03+0xa4>)
 8000fbe:	795a      	ldrb	r2, [r3, #5]
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <StartTask03+0xa8>)
 8000fc2:	701a      	strb	r2, [r3, #0]
	stableInput2 = U16.portValues;
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <StartTask03+0xac>)
 8000fc6:	795a      	ldrb	r2, [r3, #5]
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800103c <StartTask03+0xb0>)
 8000fca:	701a      	strb	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working

	/* Infinite loop */
	for(;;)
	{
	  // Read TCAL Input and update flags
<<<<<<< HEAD
	  if (GPIO_Interrupt_Triggered)
 8000f34:	4b26      	ldr	r3, [pc, #152]	@ (8000fd0 <StartTask03+0xe8>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d01e      	beq.n	8000f7a <StartTask03+0x92>
=======
	  if (GPIO_Interrupt_Triggered != 0)
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8001040 <StartTask03+0xb4>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d025      	beq.n	8001020 <StartTask03+0x94>
>>>>>>> remotes/origin/jayce_working
	  {
		  if (debounce_count++ <= 2) {continue;}
 8000f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	dd3e      	ble.n	8000fc4 <StartTask03+0xdc>
		  if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK){ Error_Handler(); }
<<<<<<< HEAD
 8000f46:	4823      	ldr	r0, [pc, #140]	@ (8000fd4 <StartTask03+0xec>)
 8000f48:	f7ff fb50 	bl	80005ec <TCAL9538RSVR_HandleInterrupt>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <StartTask03+0x6e>
 8000f52:	f000 f8ad 	bl	80010b0 <Error_Handler>
		  //if (TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK){ Error_Handler(); }


		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc8 <StartTask03+0xe0>)
 8000f5c:	491b      	ldr	r1, [pc, #108]	@ (8000fcc <StartTask03+0xe4>)
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fbc4 	bl	80006ec <Update_CAN_Message1>
		  uint8_t val = TxData[1];
 8000f64:	7b7b      	ldrb	r3, [r7, #13]
 8000f66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  uint8_t val2 = TxData[2];
 8000f6a:	7bbb      	ldrb	r3, [r7, #14]
 8000f6c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		  GPIO_Interrupt_Triggered = 0;
 8000f70:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <StartTask03+0xe8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
		  debounce_count = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  }

	  // Send CAN messages
//	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	f107 020c 	add.w	r2, r7, #12
 8000f82:	f107 0114 	add.w	r1, r7, #20
 8000f86:	4814      	ldr	r0, [pc, #80]	@ (8000fd8 <StartTask03+0xf0>)
 8000f88:	f001 fccf 	bl	800292a <HAL_CAN_AddTxMessage>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	  messages_sent++;
 8000f92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000f96:	1c54      	adds	r4, r2, #1
 8000f98:	f143 0500 	adc.w	r5, r3, #0
 8000f9c:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	  if (status == HAL_ERROR)
 8000fa0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d102      	bne.n	8000fae <StartTask03+0xc6>
	  {
		  Error_Handler();
 8000fa8:	f000 f882 	bl	80010b0 <Error_Handler>
 8000fac:	e006      	b.n	8000fbc <StartTask03+0xd4>
	  }
	  else if (status == HAL_BUSY)
 8000fae:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d102      	bne.n	8000fbc <StartTask03+0xd4>
	  {
		  HAL_CAN_BUSY++;
 8000fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fb8:	3301      	adds	r3, #1
 8000fba:	63bb      	str	r3, [r7, #56]	@ 0x38
	  }
	  osDelay(1);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f006 f9cb 	bl	8007358 <osDelay>
 8000fc2:	e7b7      	b.n	8000f34 <StartTask03+0x4c>
		  if (debounce_count++ <= 2) {continue;}
 8000fc4:	bf00      	nop
	{
 8000fc6:	e7b5      	b.n	8000f34 <StartTask03+0x4c>
 8000fc8:	20000231 	.word	0x20000231
 8000fcc:	20000229 	.word	0x20000229
 8000fd0:	2000023c 	.word	0x2000023c
 8000fd4:	20000224 	.word	0x20000224
 8000fd8:	200000e4 	.word	0x200000e4

08000fdc <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */

  uint32_t lastBlinkTime = HAL_GetTick();
 8000fe4:	f000 fb80 	bl	80016e8 <HAL_GetTick>
 8000fe8:	6178      	str	r0, [r7, #20]
  const uint32_t blinkInterval = 500;
 8000fea:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000fee:	613b      	str	r3, [r7, #16]

    // blinking logic needs to be done here now
    // use lightState variable to see what should be turned on and then 
    // update outputPortState

    uint32_t currentTick = HAL_GetTick();
 8000ff0:	f000 fb7a 	bl	80016e8 <HAL_GetTick>
 8000ff4:	60f8      	str	r0, [r7, #12]

    if (currentTick - lastBlinkTime > blinkInterval)
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d230      	bcs.n	8001064 <StartTask04+0x88>
    {
      lastBlinkTime = currentTick;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	617b      	str	r3, [r7, #20]
      if (lightState == LIGHTS_LEFT)
 8001006:	4b1e      	ldr	r3, [pc, #120]	@ (8001080 <StartTask04+0xa4>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d107      	bne.n	800101e <StartTask04+0x42>
        outputPortState ^= OUTPUT_FL_LIGHT_CTRL;
 800100e:	4b1d      	ldr	r3, [pc, #116]	@ (8001084 <StartTask04+0xa8>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	f083 0310 	eor.w	r3, r3, #16
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <StartTask04+0xa8>)
 800101a:	701a      	strb	r2, [r3, #0]
 800101c:	e022      	b.n	8001064 <StartTask04+0x88>
      else if (lightState == LIGHTS_RIGHT)
 800101e:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <StartTask04+0xa4>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d107      	bne.n	8001036 <StartTask04+0x5a>
        outputPortState ^= OUTPUT_FR_LIGHT_CTRL;
 8001026:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <StartTask04+0xa8>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f083 0320 	eor.w	r3, r3, #32
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <StartTask04+0xa8>)
 8001032:	701a      	strb	r2, [r3, #0]
 8001034:	e016      	b.n	8001064 <StartTask04+0x88>
      else if (lightState == LIGHTS_HAZARD)
 8001036:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <StartTask04+0xa4>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b03      	cmp	r3, #3
 800103c:	d107      	bne.n	800104e <StartTask04+0x72>
        outputPortState ^= (OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <StartTask04+0xa8>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <StartTask04+0xa8>)
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	e00a      	b.n	8001064 <StartTask04+0x88>
      else if (lightState == LIGHTS_NONE)
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <StartTask04+0xa4>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d106      	bne.n	8001064 <StartTask04+0x88>
        outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <StartTask04+0xa8>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <StartTask04+0xa8>)
 8001062:	701a      	strb	r2, [r3, #0]
    }

    if(TCAL9538RSVR_SetOutput(&U7, &outputPortState) != HAL_OK)
 8001064:	4907      	ldr	r1, [pc, #28]	@ (8001084 <StartTask04+0xa8>)
 8001066:	4808      	ldr	r0, [pc, #32]	@ (8001088 <StartTask04+0xac>)
 8001068:	f7ff faf7 	bl	800065a <TCAL9538RSVR_SetOutput>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <StartTask04+0x9a>
    {
    	Error_Handler();
 8001072:	f000 f81d 	bl	80010b0 <Error_Handler>
    }

    osDelay(1);
 8001076:	2001      	movs	r0, #1
 8001078:	f006 f96e 	bl	8007358 <osDelay>
  {
 800107c:	e7b8      	b.n	8000ff0 <StartTask04+0x14>
 800107e:	bf00      	nop
 8001080:	20000240 	.word	0x20000240
 8001084:	2000023d 	.word	0x2000023d
 8001088:	20000234 	.word	0x20000234

0800108c <HAL_TIM_PeriodElapsedCallback>:
=======
 8000fd4:	4816      	ldr	r0, [pc, #88]	@ (8001030 <StartTask03+0xa4>)
 8000fd6:	f7ff faee 	bl	80005b6 <TCAL9538RSVR_HandleInterrupt>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <StartTask03+0x58>
 8000fe0:	f000 f844 	bl	800106c <Error_Handler>
		  //if (TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK){ Error_Handler(); }

		  uint8_t newInput1 = U5.portValues;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <StartTask03+0xa4>)
 8000fe6:	795b      	ldrb	r3, [r3, #5]
 8000fe8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  uint8_t newInput2 = U16.portValues;
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <StartTask03+0xac>)
 8000fee:	795b      	ldrb	r3, [r3, #5]
 8000ff0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

		  stableInput1 = updateDebounce(stableInput1, newInput1, &debounceCount1);
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <StartTask03+0xa8>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8000ffc:	4a11      	ldr	r2, [pc, #68]	@ (8001044 <StartTask03+0xb8>)
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fc20 	bl	8000844 <updateDebounce>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <StartTask03+0xa8>)
 800100a:	701a      	strb	r2, [r3, #0]
		  //stableInput2 = updateDebounce(stableInput2, newInput2, &debounceCount2);

		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	4a05      	ldr	r2, [pc, #20]	@ (8001028 <StartTask03+0x9c>)
 8001012:	4906      	ldr	r1, [pc, #24]	@ (800102c <StartTask03+0xa0>)
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fb4f 	bl	80006b8 <Update_CAN_Message1>

		  GPIO_Interrupt_Triggered = 0;
 800101a:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <StartTask03+0xb4>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
	  //while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
//	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
//	  {
//		  Error_Handler();
//	  }
	  osDelay(1);
 8001020:	2001      	movs	r0, #1
 8001022:	f006 fbb1 	bl	8007788 <osDelay>
	  if (GPIO_Interrupt_Triggered != 0)
 8001026:	e7d1      	b.n	8000fcc <StartTask03+0x40>
 8001028:	20000271 	.word	0x20000271
 800102c:	20000269 	.word	0x20000269
 8001030:	20000264 	.word	0x20000264
 8001034:	2000027d 	.word	0x2000027d
 8001038:	2000026c 	.word	0x2000026c
 800103c:	2000027e 	.word	0x2000027e
 8001040:	2000027c 	.word	0x2000027c
 8001044:	2000027f 	.word	0x2000027f

08001048 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> remotes/origin/jayce_working
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
=======
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
<<<<<<< HEAD
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a04      	ldr	r2, [pc, #16]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800109e:	f000 fb0f 	bl	80016c0 <HAL_IncTick>
=======
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d101      	bne.n	800105e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800105a:	f000 fb37 	bl	80016cc <HAL_IncTick>
>>>>>>> remotes/origin/jayce_working
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
<<<<<<< HEAD
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40000400 	.word	0x40000400

080010b0 <Error_Handler>:
=======
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40000400 	.word	0x40000400

0800106c <Error_Handler>:
>>>>>>> remotes/origin/jayce_working
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
=======
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
=======
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
>>>>>>> remotes/origin/jayce_working
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <Error_Handler+0x8>

080010bc <HAL_MspInit>:
=======
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <Error_Handler+0x8>

08001078 <HAL_MspInit>:
>>>>>>> remotes/origin/jayce_working
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
=======
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 80010c2:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <HAL_MspInit+0x4c>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c6:	4a10      	ldr	r2, [pc, #64]	@ (8001108 <HAL_MspInit+0x4c>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <HAL_MspInit+0x4c>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <HAL_MspInit+0x4c>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010de:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <HAL_MspInit+0x4c>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010e6:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <HAL_MspInit+0x4c>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]
=======
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <HAL_MspInit+0x4c>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001082:	4a10      	ldr	r2, [pc, #64]	@ (80010c4 <HAL_MspInit+0x4c>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6613      	str	r3, [r2, #96]	@ 0x60
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <HAL_MspInit+0x4c>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <HAL_MspInit+0x4c>)
 8001098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <HAL_MspInit+0x4c>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <HAL_MspInit+0x4c>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
>>>>>>> remotes/origin/jayce_working

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< HEAD
 80010f2:	2200      	movs	r2, #0
 80010f4:	210f      	movs	r1, #15
 80010f6:	f06f 0001 	mvn.w	r0, #1
 80010fa:	f001 fd9f 	bl	8002c3c <HAL_NVIC_SetPriority>
=======
 80010ae:	2200      	movs	r2, #0
 80010b0:	210f      	movs	r1, #15
 80010b2:	f06f 0001 	mvn.w	r0, #1
 80010b6:	f002 f8b1 	bl	800321c <HAL_NVIC_SetPriority>
>>>>>>> remotes/origin/jayce_working

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_ADC_MspInit>:
=======
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000

080010c8 <HAL_ADC_MspInit>:
>>>>>>> remotes/origin/jayce_working
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 800110c:	b580      	push	{r7, lr}
 800110e:	b0ac      	sub	sp, #176	@ 0xb0
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	228c      	movs	r2, #140	@ 0x8c
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f008 ff63 	bl	8009ff8 <memset>
  if(hadc->Instance==ADC1)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a1f      	ldr	r2, [pc, #124]	@ (80011b4 <HAL_ADC_MspInit+0xa8>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d137      	bne.n	80011ac <HAL_ADC_MspInit+0xa0>
=======
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0ac      	sub	sp, #176	@ 0xb0
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	228c      	movs	r2, #140	@ 0x8c
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f009 f81d 	bl	800a128 <memset>
  if(hadc->Instance==ADC1)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a35      	ldr	r2, [pc, #212]	@ (80011c8 <HAL_ADC_MspInit+0x100>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d163      	bne.n	80011c0 <HAL_ADC_MspInit+0xf8>
>>>>>>> remotes/origin/jayce_working

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
<<<<<<< HEAD
 800113c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001140:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001142:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001146:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	4618      	mov	r0, r3
 8001150:	f003 fcf2 	bl	8004b38 <HAL_RCCEx_PeriphCLKConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800115a:	f7ff ffa9 	bl	80010b0 <Error_Handler>
=======
 80010f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80010fe:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001102:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4618      	mov	r0, r3
 800110c:	f004 f9fa 	bl	8005504 <HAL_RCCEx_PeriphCLKConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001116:	f7ff ffa9 	bl	800106c <Error_Handler>
>>>>>>> remotes/origin/jayce_working
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
<<<<<<< HEAD
 800115e:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <HAL_ADC_MspInit+0xac>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001162:	4a15      	ldr	r2, [pc, #84]	@ (80011b8 <HAL_ADC_MspInit+0xac>)
 8001164:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001168:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116a:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <HAL_ADC_MspInit+0xac>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <HAL_ADC_MspInit+0xac>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117a:	4a0f      	ldr	r2, [pc, #60]	@ (80011b8 <HAL_ADC_MspInit+0xac>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001182:	4b0d      	ldr	r3, [pc, #52]	@ (80011b8 <HAL_ADC_MspInit+0xac>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
=======
 800111a:	4b2c      	ldr	r3, [pc, #176]	@ (80011cc <HAL_ADC_MspInit+0x104>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4a2b      	ldr	r2, [pc, #172]	@ (80011cc <HAL_ADC_MspInit+0x104>)
 8001120:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <HAL_ADC_MspInit+0x104>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	4b26      	ldr	r3, [pc, #152]	@ (80011cc <HAL_ADC_MspInit+0x104>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	4a25      	ldr	r2, [pc, #148]	@ (80011cc <HAL_ADC_MspInit+0x104>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113e:	4b23      	ldr	r3, [pc, #140]	@ (80011cc <HAL_ADC_MspInit+0x104>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
>>>>>>> remotes/origin/jayce_working
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
<<<<<<< HEAD
 800118e:	2301      	movs	r3, #1
 8001190:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001194:	2303      	movs	r3, #3
 8001196:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011a4:	4619      	mov	r1, r3
 80011a6:	4805      	ldr	r0, [pc, #20]	@ (80011bc <HAL_ADC_MspInit+0xb0>)
 80011a8:	f001 fdf2 	bl	8002d90 <HAL_GPIO_Init>
=======
 800114a:	2301      	movs	r3, #1
 800114c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001150:	2303      	movs	r3, #3
 8001152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001160:	4619      	mov	r1, r3
 8001162:	481b      	ldr	r0, [pc, #108]	@ (80011d0 <HAL_ADC_MspInit+0x108>)
 8001164:	f002 fafa 	bl	800375c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <HAL_ADC_MspInit+0x10c>)
 800116a:	4a1b      	ldr	r2, [pc, #108]	@ (80011d8 <HAL_ADC_MspInit+0x110>)
 800116c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800116e:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <HAL_ADC_MspInit+0x10c>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001174:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <HAL_ADC_MspInit+0x10c>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800117a:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <HAL_ADC_MspInit+0x10c>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <HAL_ADC_MspInit+0x10c>)
 8001182:	2280      	movs	r2, #128	@ 0x80
 8001184:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001186:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <HAL_ADC_MspInit+0x10c>)
 8001188:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800118c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <HAL_ADC_MspInit+0x10c>)
 8001190:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001194:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <HAL_ADC_MspInit+0x10c>)
 8001198:	2220      	movs	r2, #32
 800119a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800119c:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <HAL_ADC_MspInit+0x10c>)
 800119e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011a4:	480b      	ldr	r0, [pc, #44]	@ (80011d4 <HAL_ADC_MspInit+0x10c>)
 80011a6:	f002 f863 	bl	8003270 <HAL_DMA_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 80011b0:	f7ff ff5c 	bl	800106c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a07      	ldr	r2, [pc, #28]	@ (80011d4 <HAL_ADC_MspInit+0x10c>)
 80011b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80011ba:	4a06      	ldr	r2, [pc, #24]	@ (80011d4 <HAL_ADC_MspInit+0x10c>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6293      	str	r3, [r2, #40]	@ 0x28
>>>>>>> remotes/origin/jayce_working

  /* USER CODE END ADC1_MspInit 1 */

  }

}
<<<<<<< HEAD
 80011ac:	bf00      	nop
 80011ae:	37b0      	adds	r7, #176	@ 0xb0
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	50040000 	.word	0x50040000
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000800 	.word	0x48000800

080011c0 <HAL_CAN_MspInit>:
=======
 80011c0:	bf00      	nop
 80011c2:	37b0      	adds	r7, #176	@ 0xb0
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	50040000 	.word	0x50040000
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48000800 	.word	0x48000800
 80011d4:	200000e4 	.word	0x200000e4
 80011d8:	40020008 	.word	0x40020008

080011dc <HAL_CAN_MspInit>:
>>>>>>> remotes/origin/jayce_working
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
<<<<<<< HEAD
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	@ 0x30
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001318 <HAL_CAN_MspInit+0x158>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d143      	bne.n	800126a <HAL_CAN_MspInit+0xaa>
=======
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	@ 0x30
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a45      	ldr	r2, [pc, #276]	@ (8001310 <HAL_CAN_MspInit+0x134>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d132      	bne.n	8001264 <HAL_CAN_MspInit+0x88>
>>>>>>> remotes/origin/jayce_working
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
<<<<<<< HEAD
 80011e2:	4b4e      	ldr	r3, [pc, #312]	@ (800131c <HAL_CAN_MspInit+0x15c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	4a4c      	ldr	r2, [pc, #304]	@ (800131c <HAL_CAN_MspInit+0x15c>)
 80011ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80011ec:	4b4b      	ldr	r3, [pc, #300]	@ (800131c <HAL_CAN_MspInit+0x15c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d10b      	bne.n	800120c <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80011f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001320 <HAL_CAN_MspInit+0x160>)
 80011f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f8:	4a49      	ldr	r2, [pc, #292]	@ (8001320 <HAL_CAN_MspInit+0x160>)
 80011fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001200:	4b47      	ldr	r3, [pc, #284]	@ (8001320 <HAL_CAN_MspInit+0x160>)
 8001202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001208:	61bb      	str	r3, [r7, #24]
 800120a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120c:	4b44      	ldr	r3, [pc, #272]	@ (8001320 <HAL_CAN_MspInit+0x160>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001210:	4a43      	ldr	r2, [pc, #268]	@ (8001320 <HAL_CAN_MspInit+0x160>)
 8001212:	f043 0302 	orr.w	r3, r3, #2
 8001216:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001218:	4b41      	ldr	r3, [pc, #260]	@ (8001320 <HAL_CAN_MspInit+0x160>)
 800121a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	697b      	ldr	r3, [r7, #20]
=======
 80011fe:	4b45      	ldr	r3, [pc, #276]	@ (8001314 <HAL_CAN_MspInit+0x138>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	4a43      	ldr	r2, [pc, #268]	@ (8001314 <HAL_CAN_MspInit+0x138>)
 8001206:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001208:	4b42      	ldr	r3, [pc, #264]	@ (8001314 <HAL_CAN_MspInit+0x138>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d10b      	bne.n	8001228 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001210:	4b41      	ldr	r3, [pc, #260]	@ (8001318 <HAL_CAN_MspInit+0x13c>)
 8001212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001214:	4a40      	ldr	r2, [pc, #256]	@ (8001318 <HAL_CAN_MspInit+0x13c>)
 8001216:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800121a:	6593      	str	r3, [r2, #88]	@ 0x58
 800121c:	4b3e      	ldr	r3, [pc, #248]	@ (8001318 <HAL_CAN_MspInit+0x13c>)
 800121e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001224:	61bb      	str	r3, [r7, #24]
 8001226:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001228:	4b3b      	ldr	r3, [pc, #236]	@ (8001318 <HAL_CAN_MspInit+0x13c>)
 800122a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122c:	4a3a      	ldr	r2, [pc, #232]	@ (8001318 <HAL_CAN_MspInit+0x13c>)
 800122e:	f043 0302 	orr.w	r3, r3, #2
 8001232:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001234:	4b38      	ldr	r3, [pc, #224]	@ (8001318 <HAL_CAN_MspInit+0x13c>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	697b      	ldr	r3, [r7, #20]
>>>>>>> remotes/origin/jayce_working
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
<<<<<<< HEAD
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001224:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800122e:	2301      	movs	r3, #1
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001236:	2309      	movs	r3, #9
 8001238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	4838      	ldr	r0, [pc, #224]	@ (8001324 <HAL_CAN_MspInit+0x164>)
 8001242:	f001 fda5 	bl	8002d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001246:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001258:	2309      	movs	r3, #9
 800125a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	4830      	ldr	r0, [pc, #192]	@ (8001324 <HAL_CAN_MspInit+0x164>)
 8001264:	f001 fd94 	bl	8002d90 <HAL_GPIO_Init>
=======
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001240:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001252:	2309      	movs	r3, #9
 8001254:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	482f      	ldr	r0, [pc, #188]	@ (800131c <HAL_CAN_MspInit+0x140>)
 800125e:	f002 fa7d 	bl	800375c <HAL_GPIO_Init>
>>>>>>> remotes/origin/jayce_working
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001268:	e051      	b.n	800130e <HAL_CAN_MspInit+0x14e>
  else if(hcan->Instance==CAN2)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a2e      	ldr	r2, [pc, #184]	@ (8001328 <HAL_CAN_MspInit+0x168>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d14c      	bne.n	800130e <HAL_CAN_MspInit+0x14e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001274:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <HAL_CAN_MspInit+0x160>)
 8001276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001278:	4a29      	ldr	r2, [pc, #164]	@ (8001320 <HAL_CAN_MspInit+0x160>)
 800127a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800127e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001280:	4b27      	ldr	r3, [pc, #156]	@ (8001320 <HAL_CAN_MspInit+0x160>)
 8001282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001284:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800128c:	4b23      	ldr	r3, [pc, #140]	@ (800131c <HAL_CAN_MspInit+0x15c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	4a22      	ldr	r2, [pc, #136]	@ (800131c <HAL_CAN_MspInit+0x15c>)
 8001294:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001296:	4b21      	ldr	r3, [pc, #132]	@ (800131c <HAL_CAN_MspInit+0x15c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d10b      	bne.n	80012b6 <HAL_CAN_MspInit+0xf6>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800129e:	4b20      	ldr	r3, [pc, #128]	@ (8001320 <HAL_CAN_MspInit+0x160>)
 80012a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001320 <HAL_CAN_MspInit+0x160>)
 80012a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001320 <HAL_CAN_MspInit+0x160>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <HAL_CAN_MspInit+0x160>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ba:	4a19      	ldr	r2, [pc, #100]	@ (8001320 <HAL_CAN_MspInit+0x160>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c2:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <HAL_CAN_MspInit+0x160>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012ce:	2320      	movs	r3, #32
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 80012de:	2303      	movs	r3, #3
 80012e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	480e      	ldr	r0, [pc, #56]	@ (8001324 <HAL_CAN_MspInit+0x164>)
 80012ea:	f001 fd51 	bl	8002d90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ee:	2340      	movs	r3, #64	@ 0x40
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 80012fe:	2308      	movs	r3, #8
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4806      	ldr	r0, [pc, #24]	@ (8001324 <HAL_CAN_MspInit+0x164>)
 800130a:	f001 fd41 	bl	8002d90 <HAL_GPIO_Init>
}
 800130e:	bf00      	nop
 8001310:	3730      	adds	r7, #48	@ 0x30
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40006400 	.word	0x40006400
 800131c:	20000244 	.word	0x20000244
 8001320:	40021000 	.word	0x40021000
 8001324:	48000400 	.word	0x48000400
 8001328:	40006800 	.word	0x40006800

0800132c <HAL_I2C_MspInit>:
=======
 8001262:	e051      	b.n	8001308 <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a2d      	ldr	r2, [pc, #180]	@ (8001320 <HAL_CAN_MspInit+0x144>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d14c      	bne.n	8001308 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800126e:	4b2a      	ldr	r3, [pc, #168]	@ (8001318 <HAL_CAN_MspInit+0x13c>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	4a29      	ldr	r2, [pc, #164]	@ (8001318 <HAL_CAN_MspInit+0x13c>)
 8001274:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001278:	6593      	str	r3, [r2, #88]	@ 0x58
 800127a:	4b27      	ldr	r3, [pc, #156]	@ (8001318 <HAL_CAN_MspInit+0x13c>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001286:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <HAL_CAN_MspInit+0x138>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	4a21      	ldr	r2, [pc, #132]	@ (8001314 <HAL_CAN_MspInit+0x138>)
 800128e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001290:	4b20      	ldr	r3, [pc, #128]	@ (8001314 <HAL_CAN_MspInit+0x138>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d10b      	bne.n	80012b0 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001298:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <HAL_CAN_MspInit+0x13c>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129c:	4a1e      	ldr	r2, [pc, #120]	@ (8001318 <HAL_CAN_MspInit+0x13c>)
 800129e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80012a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <HAL_CAN_MspInit+0x13c>)
 80012a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <HAL_CAN_MspInit+0x13c>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b4:	4a18      	ldr	r2, [pc, #96]	@ (8001318 <HAL_CAN_MspInit+0x13c>)
 80012b6:	f043 0302 	orr.w	r3, r3, #2
 80012ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012bc:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <HAL_CAN_MspInit+0x13c>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012c8:	2320      	movs	r3, #32
 80012ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 80012d8:	2303      	movs	r3, #3
 80012da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	4619      	mov	r1, r3
 80012e2:	480e      	ldr	r0, [pc, #56]	@ (800131c <HAL_CAN_MspInit+0x140>)
 80012e4:	f002 fa3a 	bl	800375c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012e8:	2340      	movs	r3, #64	@ 0x40
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 80012f8:	2308      	movs	r3, #8
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	4806      	ldr	r0, [pc, #24]	@ (800131c <HAL_CAN_MspInit+0x140>)
 8001304:	f002 fa2a 	bl	800375c <HAL_GPIO_Init>
}
 8001308:	bf00      	nop
 800130a:	3730      	adds	r7, #48	@ 0x30
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40006400 	.word	0x40006400
 8001314:	2000029c 	.word	0x2000029c
 8001318:	40021000 	.word	0x40021000
 800131c:	48000400 	.word	0x48000400
 8001320:	40006800 	.word	0x40006800

08001324 <HAL_I2C_MspInit>:
>>>>>>> remotes/origin/jayce_working
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< HEAD
 800132c:	b580      	push	{r7, lr}
 800132e:	b0ac      	sub	sp, #176	@ 0xb0
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	228c      	movs	r2, #140	@ 0x8c
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f008 fe53 	bl	8009ff8 <memset>
  if(hi2c->Instance==I2C4)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a22      	ldr	r2, [pc, #136]	@ (80013e0 <HAL_I2C_MspInit+0xb4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d13c      	bne.n	80013d6 <HAL_I2C_MspInit+0xaa>
=======
 8001324:	b580      	push	{r7, lr}
 8001326:	b0ac      	sub	sp, #176	@ 0xb0
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	228c      	movs	r2, #140	@ 0x8c
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f008 feef 	bl	800a128 <memset>
  if(hi2c->Instance==I2C4)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a22      	ldr	r2, [pc, #136]	@ (80013d8 <HAL_I2C_MspInit+0xb4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d13c      	bne.n	80013ce <HAL_I2C_MspInit+0xaa>
>>>>>>> remotes/origin/jayce_working

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
<<<<<<< HEAD
 800135c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001360:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001362:	2300      	movs	r3, #0
 8001364:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	4618      	mov	r0, r3
 800136c:	f003 fbe4 	bl	8004b38 <HAL_RCCEx_PeriphCLKConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001376:	f7ff fe9b 	bl	80010b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <HAL_I2C_MspInit+0xb8>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	4a19      	ldr	r2, [pc, #100]	@ (80013e4 <HAL_I2C_MspInit+0xb8>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001386:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <HAL_I2C_MspInit+0xb8>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
=======
 8001354:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001358:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800135a:	2300      	movs	r3, #0
 800135c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	4618      	mov	r0, r3
 8001364:	f004 f8ce 	bl	8005504 <HAL_RCCEx_PeriphCLKConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800136e:	f7ff fe7d 	bl	800106c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <HAL_I2C_MspInit+0xb8>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	4a19      	ldr	r2, [pc, #100]	@ (80013dc <HAL_I2C_MspInit+0xb8>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137e:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <HAL_I2C_MspInit+0xb8>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
>>>>>>> remotes/origin/jayce_working
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
<<<<<<< HEAD
 8001392:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001396:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139a:	2312      	movs	r3, #18
 800139c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80013ac:	2303      	movs	r3, #3
 80013ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013b6:	4619      	mov	r1, r3
 80013b8:	480b      	ldr	r0, [pc, #44]	@ (80013e8 <HAL_I2C_MspInit+0xbc>)
 80013ba:	f001 fce9 	bl	8002d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80013be:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <HAL_I2C_MspInit+0xb8>)
 80013c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013c2:	4a08      	ldr	r2, [pc, #32]	@ (80013e4 <HAL_I2C_MspInit+0xb8>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_I2C_MspInit+0xb8>)
 80013cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
=======
 800138a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800138e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001392:	2312      	movs	r3, #18
 8001394:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80013a4:	2303      	movs	r3, #3
 80013a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013ae:	4619      	mov	r1, r3
 80013b0:	480b      	ldr	r0, [pc, #44]	@ (80013e0 <HAL_I2C_MspInit+0xbc>)
 80013b2:	f002 f9d3 	bl	800375c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <HAL_I2C_MspInit+0xb8>)
 80013b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ba:	4a08      	ldr	r2, [pc, #32]	@ (80013dc <HAL_I2C_MspInit+0xb8>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_I2C_MspInit+0xb8>)
 80013c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
>>>>>>> remotes/origin/jayce_working

  /* USER CODE END I2C4_MspInit 1 */

  }

}
<<<<<<< HEAD
 80013d6:	bf00      	nop
 80013d8:	37b0      	adds	r7, #176	@ 0xb0
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40008400 	.word	0x40008400
 80013e4:	40021000 	.word	0x40021000
 80013e8:	48000400 	.word	0x48000400

080013ec <HAL_UART_MspInit>:
=======
 80013ce:	bf00      	nop
 80013d0:	37b0      	adds	r7, #176	@ 0xb0
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40008400 	.word	0x40008400
 80013dc:	40021000 	.word	0x40021000
 80013e0:	48000400 	.word	0x48000400

080013e4 <HAL_UART_MspInit>:
>>>>>>> remotes/origin/jayce_working
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0ac      	sub	sp, #176	@ 0xb0
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	228c      	movs	r2, #140	@ 0x8c
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f008 fdf3 	bl	8009ff8 <memset>
  if(huart->Instance==UART4)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a25      	ldr	r2, [pc, #148]	@ (80014ac <HAL_UART_MspInit+0xc0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d143      	bne.n	80014a4 <HAL_UART_MspInit+0xb8>
=======
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0ac      	sub	sp, #176	@ 0xb0
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	228c      	movs	r2, #140	@ 0x8c
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f008 fe8f 	bl	800a128 <memset>
  if(huart->Instance==UART4)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a25      	ldr	r2, [pc, #148]	@ (80014a4 <HAL_UART_MspInit+0xc0>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d143      	bne.n	800149c <HAL_UART_MspInit+0xb8>
>>>>>>> remotes/origin/jayce_working

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
<<<<<<< HEAD
 800141c:	2308      	movs	r3, #8
 800141e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001420:	2300      	movs	r3, #0
 8001422:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	4618      	mov	r0, r3
 800142a:	f003 fb85 	bl	8004b38 <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001434:	f7ff fe3c 	bl	80010b0 <Error_Handler>
=======
 8001414:	2308      	movs	r3, #8
 8001416:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001418:	2300      	movs	r3, #0
 800141a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4618      	mov	r0, r3
 8001422:	f004 f86f 	bl	8005504 <HAL_RCCEx_PeriphCLKConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800142c:	f7ff fe1e 	bl	800106c <Error_Handler>
>>>>>>> remotes/origin/jayce_working
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
<<<<<<< HEAD
 8001438:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <HAL_UART_MspInit+0xc4>)
 800143a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143c:	4a1c      	ldr	r2, [pc, #112]	@ (80014b0 <HAL_UART_MspInit+0xc4>)
 800143e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001442:	6593      	str	r3, [r2, #88]	@ 0x58
 8001444:	4b1a      	ldr	r3, [pc, #104]	@ (80014b0 <HAL_UART_MspInit+0xc4>)
 8001446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001448:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001450:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <HAL_UART_MspInit+0xc4>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001454:	4a16      	ldr	r2, [pc, #88]	@ (80014b0 <HAL_UART_MspInit+0xc4>)
 8001456:	f043 0304 	orr.w	r3, r3, #4
 800145a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145c:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <HAL_UART_MspInit+0xc4>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
=======
 8001430:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <HAL_UART_MspInit+0xc4>)
 8001432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001434:	4a1c      	ldr	r2, [pc, #112]	@ (80014a8 <HAL_UART_MspInit+0xc4>)
 8001436:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800143a:	6593      	str	r3, [r2, #88]	@ 0x58
 800143c:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <HAL_UART_MspInit+0xc4>)
 800143e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001440:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001448:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <HAL_UART_MspInit+0xc4>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144c:	4a16      	ldr	r2, [pc, #88]	@ (80014a8 <HAL_UART_MspInit+0xc4>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001454:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <HAL_UART_MspInit+0xc4>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
>>>>>>> remotes/origin/jayce_working
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
<<<<<<< HEAD
 8001468:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800146c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001482:	2308      	movs	r3, #8
 8001484:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001488:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800148c:	4619      	mov	r1, r3
 800148e:	4809      	ldr	r0, [pc, #36]	@ (80014b4 <HAL_UART_MspInit+0xc8>)
 8001490:	f001 fc7e 	bl	8002d90 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2105      	movs	r1, #5
 8001498:	2034      	movs	r0, #52	@ 0x34
 800149a:	f001 fbcf 	bl	8002c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800149e:	2034      	movs	r0, #52	@ 0x34
 80014a0:	f001 fbe8 	bl	8002c74 <HAL_NVIC_EnableIRQ>
=======
 8001460:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001464:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800147a:	2308      	movs	r3, #8
 800147c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001480:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001484:	4619      	mov	r1, r3
 8001486:	4809      	ldr	r0, [pc, #36]	@ (80014ac <HAL_UART_MspInit+0xc8>)
 8001488:	f002 f968 	bl	800375c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2105      	movs	r1, #5
 8001490:	2034      	movs	r0, #52	@ 0x34
 8001492:	f001 fec3 	bl	800321c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001496:	2034      	movs	r0, #52	@ 0x34
 8001498:	f001 fedc 	bl	8003254 <HAL_NVIC_EnableIRQ>
>>>>>>> remotes/origin/jayce_working

  /* USER CODE END UART4_MspInit 1 */

  }

}
<<<<<<< HEAD
 80014a4:	bf00      	nop
 80014a6:	37b0      	adds	r7, #176	@ 0xb0
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40004c00 	.word	0x40004c00
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48000800 	.word	0x48000800

080014b8 <HAL_InitTick>:
=======
 800149c:	bf00      	nop
 800149e:	37b0      	adds	r7, #176	@ 0xb0
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40004c00 	.word	0x40004c00
 80014a8:	40021000 	.word	0x40021000
 80014ac:	48000800 	.word	0x48000800

080014b0 <HAL_InitTick>:
>>>>>>> remotes/origin/jayce_working
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08e      	sub	sp, #56	@ 0x38
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
=======
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08e      	sub	sp, #56	@ 0x38
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
<<<<<<< HEAD
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80014c6:	4b34      	ldr	r3, [pc, #208]	@ (8001598 <HAL_InitTick+0xe0>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ca:	4a33      	ldr	r2, [pc, #204]	@ (8001598 <HAL_InitTick+0xe0>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014d2:	4b31      	ldr	r3, [pc, #196]	@ (8001598 <HAL_InitTick+0xe0>)
 80014d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014de:	f107 0210 	add.w	r2, r7, #16
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 fa93 	bl	8004a14 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d103      	bne.n	8001500 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014f8:	f003 fa60 	bl	80049bc <HAL_RCC_GetPCLK1Freq>
 80014fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80014fe:	e004      	b.n	800150a <HAL_InitTick+0x52>
=======
 80014b8:	2300      	movs	r3, #0
 80014ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80014be:	4b34      	ldr	r3, [pc, #208]	@ (8001590 <HAL_InitTick+0xe0>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c2:	4a33      	ldr	r2, [pc, #204]	@ (8001590 <HAL_InitTick+0xe0>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ca:	4b31      	ldr	r3, [pc, #196]	@ (8001590 <HAL_InitTick+0xe0>)
 80014cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014d6:	f107 0210 	add.w	r2, r7, #16
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f003 ff7d 	bl	80053e0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d103      	bne.n	80014f8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014f0:	f003 ff4a 	bl	8005388 <HAL_RCC_GetPCLK1Freq>
 80014f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80014f6:	e004      	b.n	8001502 <HAL_InitTick+0x52>
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8001500:	f003 fa5c 	bl	80049bc <HAL_RCC_GetPCLK1Freq>
 8001504:	4603      	mov	r3, r0
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 80014f8:	f003 ff46 	bl	8005388 <HAL_RCC_GetPCLK1Freq>
 80014fc:	4603      	mov	r3, r0
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	637b      	str	r3, [r7, #52]	@ 0x34
>>>>>>> remotes/origin/jayce_working
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
<<<<<<< HEAD
 800150a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800150c:	4a23      	ldr	r2, [pc, #140]	@ (800159c <HAL_InitTick+0xe4>)
 800150e:	fba2 2303 	umull	r2, r3, r2, r3
 8001512:	0c9b      	lsrs	r3, r3, #18
 8001514:	3b01      	subs	r3, #1
 8001516:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001518:	4b21      	ldr	r3, [pc, #132]	@ (80015a0 <HAL_InitTick+0xe8>)
 800151a:	4a22      	ldr	r2, [pc, #136]	@ (80015a4 <HAL_InitTick+0xec>)
 800151c:	601a      	str	r2, [r3, #0]
=======
 8001502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001504:	4a23      	ldr	r2, [pc, #140]	@ (8001594 <HAL_InitTick+0xe4>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	0c9b      	lsrs	r3, r3, #18
 800150c:	3b01      	subs	r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001510:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <HAL_InitTick+0xe8>)
 8001512:	4a22      	ldr	r2, [pc, #136]	@ (800159c <HAL_InitTick+0xec>)
 8001514:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
<<<<<<< HEAD
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <HAL_InitTick+0xe8>)
 8001520:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001524:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001526:	4a1e      	ldr	r2, [pc, #120]	@ (80015a0 <HAL_InitTick+0xe8>)
 8001528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800152a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800152c:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <HAL_InitTick+0xe8>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b1b      	ldr	r3, [pc, #108]	@ (80015a0 <HAL_InitTick+0xe8>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001538:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <HAL_InitTick+0xe8>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800153e:	4818      	ldr	r0, [pc, #96]	@ (80015a0 <HAL_InitTick+0xe8>)
 8001540:	f003 ffc4 	bl	80054cc <HAL_TIM_Base_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800154a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800154e:	2b00      	cmp	r3, #0
 8001550:	d11b      	bne.n	800158a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001552:	4813      	ldr	r0, [pc, #76]	@ (80015a0 <HAL_InitTick+0xe8>)
 8001554:	f004 f81c 	bl	8005590 <HAL_TIM_Base_Start_IT>
 8001558:	4603      	mov	r3, r0
 800155a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800155e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001562:	2b00      	cmp	r3, #0
 8001564:	d111      	bne.n	800158a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001566:	201d      	movs	r0, #29
 8001568:	f001 fb84 	bl	8002c74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b0f      	cmp	r3, #15
 8001570:	d808      	bhi.n	8001584 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001572:	2200      	movs	r2, #0
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	201d      	movs	r0, #29
 8001578:	f001 fb60 	bl	8002c3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800157c:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <HAL_InitTick+0xf0>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e002      	b.n	800158a <HAL_InitTick+0xd2>
=======
 8001516:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <HAL_InitTick+0xe8>)
 8001518:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800151c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800151e:	4a1e      	ldr	r2, [pc, #120]	@ (8001598 <HAL_InitTick+0xe8>)
 8001520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001522:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001524:	4b1c      	ldr	r3, [pc, #112]	@ (8001598 <HAL_InitTick+0xe8>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	4b1b      	ldr	r3, [pc, #108]	@ (8001598 <HAL_InitTick+0xe8>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001530:	4b19      	ldr	r3, [pc, #100]	@ (8001598 <HAL_InitTick+0xe8>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001536:	4818      	ldr	r0, [pc, #96]	@ (8001598 <HAL_InitTick+0xe8>)
 8001538:	f004 fcae 	bl	8005e98 <HAL_TIM_Base_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001542:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001546:	2b00      	cmp	r3, #0
 8001548:	d11b      	bne.n	8001582 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800154a:	4813      	ldr	r0, [pc, #76]	@ (8001598 <HAL_InitTick+0xe8>)
 800154c:	f004 fd06 	bl	8005f5c <HAL_TIM_Base_Start_IT>
 8001550:	4603      	mov	r3, r0
 8001552:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001556:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800155a:	2b00      	cmp	r3, #0
 800155c:	d111      	bne.n	8001582 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800155e:	201d      	movs	r0, #29
 8001560:	f001 fe78 	bl	8003254 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b0f      	cmp	r3, #15
 8001568:	d808      	bhi.n	800157c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800156a:	2200      	movs	r2, #0
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	201d      	movs	r0, #29
 8001570:	f001 fe54 	bl	800321c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001574:	4a0a      	ldr	r2, [pc, #40]	@ (80015a0 <HAL_InitTick+0xf0>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e002      	b.n	8001582 <HAL_InitTick+0xd2>
>>>>>>> remotes/origin/jayce_working
      }
      else
      {
        status = HAL_ERROR;
<<<<<<< HEAD
 8001584:	2301      	movs	r3, #1
 8001586:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
=======
 800157c:	2301      	movs	r3, #1
 800157e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
>>>>>>> remotes/origin/jayce_working
      }
    }
  }

 /* Return function status */
  return status;
<<<<<<< HEAD
 800158a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800158e:	4618      	mov	r0, r3
 8001590:	3738      	adds	r7, #56	@ 0x38
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	431bde83 	.word	0x431bde83
 80015a0:	20000248 	.word	0x20000248
 80015a4:	40000400 	.word	0x40000400
 80015a8:	20000004 	.word	0x20000004

080015ac <NMI_Handler>:
=======
 8001582:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001586:	4618      	mov	r0, r3
 8001588:	3738      	adds	r7, #56	@ 0x38
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	431bde83 	.word	0x431bde83
 8001598:	200002a0 	.word	0x200002a0
 800159c:	40000400 	.word	0x40000400
 80015a0:	20000004 	.word	0x20000004

080015a4 <NMI_Handler>:
>>>>>>> remotes/origin/jayce_working
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
=======
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< HEAD
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <NMI_Handler+0x4>

080015b4 <HardFault_Handler>:
=======
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <NMI_Handler+0x4>

080015ac <HardFault_Handler>:
>>>>>>> remotes/origin/jayce_working

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
=======
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:
=======
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:
>>>>>>> remotes/origin/jayce_working

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
=======
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <MemManage_Handler+0x4>

080015c4 <BusFault_Handler>:
=======
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <MemManage_Handler+0x4>

080015bc <BusFault_Handler>:
>>>>>>> remotes/origin/jayce_working

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
=======
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:
=======
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:
>>>>>>> remotes/origin/jayce_working

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
=======
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d4 <DebugMon_Handler>:
=======
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <UsageFault_Handler+0x4>

080015cc <DebugMon_Handler>:
>>>>>>> remotes/origin/jayce_working

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
=======
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <EXTI2_IRQHandler>:
=======
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <EXTI2_IRQHandler>:
>>>>>>> remotes/origin/jayce_working

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
<<<<<<< HEAD
 80015e2:	b580      	push	{r7, lr}
 80015e4:	af00      	add	r7, sp, #0
=======
 80015da:	b580      	push	{r7, lr}
 80015dc:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alert1_Pin);
<<<<<<< HEAD
 80015e6:	2004      	movs	r0, #4
 80015e8:	f001 fd96 	bl	8003118 <HAL_GPIO_EXTI_IRQHandler>
=======
 80015de:	2004      	movs	r0, #4
 80015e0:	f002 fa80 	bl	8003ae4 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> remotes/origin/jayce_working
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
<<<<<<< HEAD
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <TIM3_IRQHandler>:
=======
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015ec:	4802      	ldr	r0, [pc, #8]	@ (80015f8 <DMA1_Channel1_IRQHandler+0x10>)
 80015ee:	f001 ffd6 	bl	800359e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200000e4 	.word	0x200000e4

080015fc <TIM3_IRQHandler>:
>>>>>>> remotes/origin/jayce_working

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
<<<<<<< HEAD
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
=======
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
<<<<<<< HEAD
 80015f4:	4802      	ldr	r0, [pc, #8]	@ (8001600 <TIM3_IRQHandler+0x10>)
 80015f6:	f004 f83b 	bl	8005670 <HAL_TIM_IRQHandler>
=======
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <TIM3_IRQHandler+0x10>)
 8001602:	f004 fd1b 	bl	800603c <HAL_TIM_IRQHandler>
>>>>>>> remotes/origin/jayce_working
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
<<<<<<< HEAD
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000248 	.word	0x20000248

08001604 <UART4_IRQHandler>:
=======
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200002a0 	.word	0x200002a0

08001610 <UART4_IRQHandler>:
>>>>>>> remotes/origin/jayce_working

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
<<<<<<< HEAD
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
=======
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
<<<<<<< HEAD
 8001608:	4802      	ldr	r0, [pc, #8]	@ (8001614 <UART4_IRQHandler+0x10>)
 800160a:	f004 fabf 	bl	8005b8c <HAL_UART_IRQHandler>
=======
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <UART4_IRQHandler+0x10>)
 8001616:	f004 ff53 	bl	80064c0 <HAL_UART_IRQHandler>
>>>>>>> remotes/origin/jayce_working
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
<<<<<<< HEAD
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000188 	.word	0x20000188

08001618 <SystemInit>:
=======
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200001d0 	.word	0x200001d0

08001624 <SystemInit>:
>>>>>>> remotes/origin/jayce_working
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
<<<<<<< HEAD
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
=======
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
<<<<<<< HEAD
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <SystemInit+0x20>)
 800161e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001622:	4a05      	ldr	r2, [pc, #20]	@ (8001638 <SystemInit+0x20>)
 8001624:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001628:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <Reset_Handler>:
=======
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <SystemInit+0x20>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800162e:	4a05      	ldr	r2, [pc, #20]	@ (8001644 <SystemInit+0x20>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <Reset_Handler>:
>>>>>>> remotes/origin/jayce_working

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
<<<<<<< HEAD
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001674 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001640:	f7ff ffea 	bl	8001618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001644:	480c      	ldr	r0, [pc, #48]	@ (8001678 <LoopForever+0x6>)
  ldr r1, =_edata
 8001646:	490d      	ldr	r1, [pc, #52]	@ (800167c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001648:	4a0d      	ldr	r2, [pc, #52]	@ (8001680 <LoopForever+0xe>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800164c:	e002      	b.n	8001654 <LoopCopyDataInit>

0800164e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001652:	3304      	adds	r3, #4

08001654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001658:	d3f9      	bcc.n	800164e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165a:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <LoopForever+0x12>)
  ldr r4, =_ebss
 800165c:	4c0a      	ldr	r4, [pc, #40]	@ (8001688 <LoopForever+0x16>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001660:	e001      	b.n	8001666 <LoopFillZerobss>

08001662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001664:	3204      	adds	r2, #4

08001666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001668:	d3fb      	bcc.n	8001662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166a:	f008 fd23 	bl	800a0b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800166e:	f7ff f8f7 	bl	8000860 <main>

08001672 <LoopForever>:

LoopForever:
    b LoopForever
 8001672:	e7fe      	b.n	8001672 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001674:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001680:	0800a338 	.word	0x0800a338
  ldr r2, =_sbss
 8001684:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001688:	20001d78 	.word	0x20001d78

0800168c <ADC1_2_IRQHandler>:
=======
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001680 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800164c:	f7ff ffea 	bl	8001624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001650:	480c      	ldr	r0, [pc, #48]	@ (8001684 <LoopForever+0x6>)
  ldr r1, =_edata
 8001652:	490d      	ldr	r1, [pc, #52]	@ (8001688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001654:	4a0d      	ldr	r2, [pc, #52]	@ (800168c <LoopForever+0xe>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001668:	4c0a      	ldr	r4, [pc, #40]	@ (8001694 <LoopForever+0x16>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001676:	f008 fdb5 	bl	800a1e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800167a:	f7ff f919 	bl	80008b0 <main>

0800167e <LoopForever>:

LoopForever:
    b LoopForever
 800167e:	e7fe      	b.n	800167e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001680:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800168c:	0800a438 	.word	0x0800a438
  ldr r2, =_sbss
 8001690:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001694:	20001dd0 	.word	0x20001dd0

08001698 <ADC1_2_IRQHandler>:
>>>>>>> remotes/origin/jayce_working
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
<<<<<<< HEAD
 800168c:	e7fe      	b.n	800168c <ADC1_2_IRQHandler>

0800168e <HAL_Init>:
=======
 8001698:	e7fe      	b.n	8001698 <ADC1_2_IRQHandler>

0800169a <HAL_Init>:
>>>>>>> remotes/origin/jayce_working
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	71fb      	strb	r3, [r7, #7]
=======
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	71fb      	strb	r3, [r7, #7]
>>>>>>> remotes/origin/jayce_working
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8001698:	2003      	movs	r0, #3
 800169a:	f001 fac4 	bl	8002c26 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800169e:	200f      	movs	r0, #15
 80016a0:	f7ff ff0a 	bl	80014b8 <HAL_InitTick>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d002      	beq.n	80016b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	e001      	b.n	80016b4 <HAL_Init+0x26>
=======
 80016a4:	2003      	movs	r0, #3
 80016a6:	f001 fdae 	bl	8003206 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016aa:	200f      	movs	r0, #15
 80016ac:	f7ff ff00 	bl	80014b0 <HAL_InitTick>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d002      	beq.n	80016bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	71fb      	strb	r3, [r7, #7]
 80016ba:	e001      	b.n	80016c0 <HAL_Init+0x26>
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< HEAD
 80016b0:	f7ff fd04 	bl	80010bc <HAL_MspInit>
=======
 80016bc:	f7ff fcdc 	bl	8001078 <HAL_MspInit>
>>>>>>> remotes/origin/jayce_working
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 80016b4:	79fb      	ldrb	r3, [r7, #7]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_IncTick>:
=======
 80016c0:	79fb      	ldrb	r3, [r7, #7]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_IncTick>:
>>>>>>> remotes/origin/jayce_working
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_IncTick+0x20>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_IncTick+0x24>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <HAL_IncTick+0x24>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000294 	.word	0x20000294

080016e8 <HAL_GetTick>:
=======
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_IncTick+0x20>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_IncTick+0x24>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a04      	ldr	r2, [pc, #16]	@ (80016f0 <HAL_IncTick+0x24>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000008 	.word	0x20000008
 80016f0:	200002ec 	.word	0x200002ec

080016f4 <HAL_GetTick>:
>>>>>>> remotes/origin/jayce_working
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b03      	ldr	r3, [pc, #12]	@ (80016fc <HAL_GetTick+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000294 	.word	0x20000294

08001700 <LL_ADC_SetCommonClock>:
=======
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	200002ec 	.word	0x200002ec

0800170c <LL_ADC_SetCommonClock>:
>>>>>>> remotes/origin/jayce_working
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
<<<<<<< HEAD
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	609a      	str	r2, [r3, #8]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <LL_ADC_SetCommonPathInternalCh>:
=======
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	609a      	str	r2, [r3, #8]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <LL_ADC_SetCommonPathInternalCh>:
>>>>>>> remotes/origin/jayce_working
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
<<<<<<< HEAD
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	609a      	str	r2, [r3, #8]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_GetCommonPathInternalCh>:
=======
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	609a      	str	r2, [r3, #8]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_ADC_GetCommonPathInternalCh>:
>>>>>>> remotes/origin/jayce_working
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
<<<<<<< HEAD
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_SetOffset>:
=======
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_SetOffset>:
>>>>>>> remotes/origin/jayce_working
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
<<<<<<< HEAD
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3360      	adds	r3, #96	@ 0x60
 800177a:	461a      	mov	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <LL_ADC_SetOffset+0x44>)
 800178a:	4013      	ands	r3, r2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	4313      	orrs	r3, r2
 8001798:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017a0:	bf00      	nop
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	03fff000 	.word	0x03fff000

080017b0 <LL_ADC_GetOffsetChannel>:
=======
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3360      	adds	r3, #96	@ 0x60
 8001786:	461a      	mov	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <LL_ADC_SetOffset+0x44>)
 8001796:	4013      	ands	r3, r2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	4313      	orrs	r3, r2
 80017a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017ac:	bf00      	nop
 80017ae:	371c      	adds	r7, #28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	03fff000 	.word	0x03fff000

080017bc <LL_ADC_GetOffsetChannel>:
>>>>>>> remotes/origin/jayce_working
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
<<<<<<< HEAD
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3360      	adds	r3, #96	@ 0x60
 80017be:	461a      	mov	r2, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_ADC_SetOffsetState>:
=======
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3360      	adds	r3, #96	@ 0x60
 80017ca:	461a      	mov	r2, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_ADC_SetOffsetState>:
>>>>>>> remotes/origin/jayce_working
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
<<<<<<< HEAD
 80017dc:	b480      	push	{r7}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3360      	adds	r3, #96	@ 0x60
 80017ec:	461a      	mov	r2, r3
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	431a      	orrs	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001806:	bf00      	nop
 8001808:	371c      	adds	r7, #28
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_ADC_SetSamplingTimeCommonConfig>:
=======
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3360      	adds	r3, #96	@ 0x60
 80017f8:	461a      	mov	r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	431a      	orrs	r2, r3
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001812:	bf00      	nop
 8001814:	371c      	adds	r7, #28
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_ADC_SetSamplingTimeCommonConfig>:
>>>>>>> remotes/origin/jayce_working
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
<<<<<<< HEAD
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	615a      	str	r2, [r3, #20]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_ADC_REG_SetSequencerRanks>:
=======
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	615a      	str	r2, [r3, #20]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <LL_ADC_REG_SetSequencerRanks>:
>>>>>>> remotes/origin/jayce_working
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
<<<<<<< HEAD
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
=======
 800186a:	b480      	push	{r7}
 800186c:	b087      	sub	sp, #28
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
<<<<<<< HEAD
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3330      	adds	r3, #48	@ 0x30
 8001848:	461a      	mov	r2, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	4413      	add	r3, r2
 8001856:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	211f      	movs	r1, #31
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	401a      	ands	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	0e9b      	lsrs	r3, r3, #26
 8001870:	f003 011f 	and.w	r1, r3, #31
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	f003 031f 	and.w	r3, r3, #31
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	431a      	orrs	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	601a      	str	r2, [r3, #0]
=======
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3330      	adds	r3, #48	@ 0x30
 800187a:	461a      	mov	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	0a1b      	lsrs	r3, r3, #8
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	4413      	add	r3, r2
 8001888:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f003 031f 	and.w	r3, r3, #31
 8001894:	211f      	movs	r1, #31
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	401a      	ands	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	0e9b      	lsrs	r3, r3, #26
 80018a2:	f003 011f 	and.w	r1, r3, #31
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f003 031f 	and.w	r3, r3, #31
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	431a      	orrs	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
<<<<<<< HEAD
 8001884:	bf00      	nop
 8001886:	371c      	adds	r7, #28
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_SetChannelSamplingTime>:
=======
 80018b6:	bf00      	nop
 80018b8:	371c      	adds	r7, #28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_ADC_SetChannelSamplingTime>:
>>>>>>> remotes/origin/jayce_working
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
<<<<<<< HEAD
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
=======
 80018c2:	b480      	push	{r7}
 80018c4:	b087      	sub	sp, #28
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
<<<<<<< HEAD
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3314      	adds	r3, #20
 80018a0:	461a      	mov	r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	0e5b      	lsrs	r3, r3, #25
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	4413      	add	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	0d1b      	lsrs	r3, r3, #20
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	2107      	movs	r1, #7
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	401a      	ands	r2, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	0d1b      	lsrs	r3, r3, #20
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	431a      	orrs	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018da:	bf00      	nop
 80018dc:	371c      	adds	r7, #28
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <LL_ADC_SetChannelSingleDiff>:
=======
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3314      	adds	r3, #20
 80018d2:	461a      	mov	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	0e5b      	lsrs	r3, r3, #25
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	4413      	add	r3, r2
 80018e0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	0d1b      	lsrs	r3, r3, #20
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	2107      	movs	r1, #7
 80018f0:	fa01 f303 	lsl.w	r3, r1, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	401a      	ands	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	0d1b      	lsrs	r3, r3, #20
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	431a      	orrs	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800190c:	bf00      	nop
 800190e:	371c      	adds	r7, #28
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_ADC_SetChannelSingleDiff>:
>>>>>>> remotes/origin/jayce_working
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
<<<<<<< HEAD
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
=======
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
<<<<<<< HEAD
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001900:	43db      	mvns	r3, r3
 8001902:	401a      	ands	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0318 	and.w	r3, r3, #24
 800190a:	4908      	ldr	r1, [pc, #32]	@ (800192c <LL_ADC_SetChannelSingleDiff+0x44>)
 800190c:	40d9      	lsrs	r1, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	400b      	ands	r3, r1
 8001912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001916:	431a      	orrs	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
=======
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001930:	43db      	mvns	r3, r3
 8001932:	401a      	ands	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0318 	and.w	r3, r3, #24
 800193a:	4908      	ldr	r1, [pc, #32]	@ (800195c <LL_ADC_SetChannelSingleDiff+0x44>)
 800193c:	40d9      	lsrs	r1, r3
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	400b      	ands	r3, r1
 8001942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001946:	431a      	orrs	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
>>>>>>> remotes/origin/jayce_working
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
<<<<<<< HEAD
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	0007ffff 	.word	0x0007ffff

08001930 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001940:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6093      	str	r3, [r2, #8]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001968:	d101      	bne.n	800196e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800196e:	2300      	movs	r3, #0
=======
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	0007ffff 	.word	0x0007ffff

08001960 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 031f 	and.w	r3, r3, #31
>>>>>>> remotes/origin/jayce_working
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

<<<<<<< HEAD
0800197c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
=======
0800197c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
>>>>>>> remotes/origin/jayce_working
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
<<<<<<< HEAD
  MODIFY_REG(ADCx->CR,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800198c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001990:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_IsInternalRegulatorEnabled>:
=======
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800198c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6093      	str	r3, [r2, #8]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019b4:	d101      	bne.n	80019ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80019d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_IsInternalRegulatorEnabled>:
>>>>>>> remotes/origin/jayce_working
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80019b8:	d101      	bne.n	80019be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <LL_ADC_IsEnabled+0x18>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <LL_ADC_IsEnabled+0x1a>
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d101      	bne.n	8001a0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <LL_ADC_REG_IsConversionOngoing+0x1a>
=======
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001a04:	d101      	bne.n	8001a0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
>>>>>>> remotes/origin/jayce_working
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

<<<<<<< HEAD
08001a18 <LL_ADC_INJ_IsConversionOngoing>:
=======
08001a18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a54:	f043 0202 	orr.w	r2, r3, #2
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <LL_ADC_IsEnabled+0x18>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <LL_ADC_IsEnabled+0x1a>
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d101      	bne.n	8001aa6 <LL_ADC_IsDisableOngoing+0x18>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <LL_ADC_IsDisableOngoing+0x1a>
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ac4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ac8:	f043 0204 	orr.w	r2, r3, #4
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001aec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001af0:	f043 0210 	orr.w	r2, r3, #16
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d101      	bne.n	8001b1c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b3a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b3e:	f043 0220 	orr.w	r2, r3, #32
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_ADC_INJ_IsConversionOngoing>:
>>>>>>> remotes/origin/jayce_working
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d101      	bne.n	8001a30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <HAL_ADC_Init>:
=======
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d101      	bne.n	8001b6a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_ADC_Init>:
>>>>>>> remotes/origin/jayce_working
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b089      	sub	sp, #36	@ 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	77fb      	strb	r3, [r7, #31]
=======
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b089      	sub	sp, #36	@ 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	77fb      	strb	r3, [r7, #31]
>>>>>>> remotes/origin/jayce_working
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
<<<<<<< HEAD
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e133      	b.n	8001cc2 <HAL_ADC_Init+0x282>
=======
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e133      	b.n	8001dfa <HAL_ADC_Init+0x282>
>>>>>>> remotes/origin/jayce_working
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
<<<<<<< HEAD
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
=======
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	2b00      	cmp	r3, #0
>>>>>>> remotes/origin/jayce_working
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <HAL_ADC_Init+0x3c>
=======
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d109      	bne.n	8001bb4 <HAL_ADC_Init+0x3c>
>>>>>>> remotes/origin/jayce_working

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff fb4f 	bl	800110c <HAL_ADC_MspInit>
=======
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff fa91 	bl	80010c8 <HAL_ADC_MspInit>
>>>>>>> remotes/origin/jayce_working
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
=======
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
>>>>>>> remotes/origin/jayce_working
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
<<<<<<< HEAD
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff67 	bl	8001954 <LL_ADC_IsDeepPowerDownEnabled>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff4d 	bl	8001930 <LL_ADC_DisableDeepPowerDown>
=======
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fef1 	bl	80019a0 <LL_ADC_IsDeepPowerDownEnabled>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d004      	beq.n	8001bce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fed7 	bl	800197c <LL_ADC_DisableDeepPowerDown>
>>>>>>> remotes/origin/jayce_working
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ff82 	bl	80019a4 <LL_ADC_IsInternalRegulatorEnabled>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d115      	bne.n	8001ad2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff66 	bl	800197c <LL_ADC_EnableInternalRegulator>
=======
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ff0c 	bl	80019f0 <LL_ADC_IsInternalRegulatorEnabled>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d115      	bne.n	8001c0a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fef0 	bl	80019c8 <LL_ADC_EnableInternalRegulator>
>>>>>>> remotes/origin/jayce_working

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 8001ab0:	4b86      	ldr	r3, [pc, #536]	@ (8001ccc <HAL_ADC_Init+0x28c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	099b      	lsrs	r3, r3, #6
 8001ab6:	4a86      	ldr	r2, [pc, #536]	@ (8001cd0 <HAL_ADC_Init+0x290>)
 8001ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8001abc:	099b      	lsrs	r3, r3, #6
 8001abe:	3301      	adds	r3, #1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ac4:	e002      	b.n	8001acc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f9      	bne.n	8001ac6 <HAL_ADC_Init+0x86>
=======
 8001be8:	4b86      	ldr	r3, [pc, #536]	@ (8001e04 <HAL_ADC_Init+0x28c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	099b      	lsrs	r3, r3, #6
 8001bee:	4a86      	ldr	r2, [pc, #536]	@ (8001e08 <HAL_ADC_Init+0x290>)
 8001bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf4:	099b      	lsrs	r3, r3, #6
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bfc:	e002      	b.n	8001c04 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f9      	bne.n	8001bfe <HAL_ADC_Init+0x86>
>>>>>>> remotes/origin/jayce_working
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff64 	bl	80019a4 <LL_ADC_IsInternalRegulatorEnabled>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10d      	bne.n	8001afe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae6:	f043 0210 	orr.w	r2, r3, #16
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	77fb      	strb	r3, [r7, #31]
=======
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff feee 	bl	80019f0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10d      	bne.n	8001c36 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1e:	f043 0210 	orr.w	r2, r3, #16
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c2a:	f043 0201 	orr.w	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	77fb      	strb	r3, [r7, #31]
>>>>>>> remotes/origin/jayce_working

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff75 	bl	80019f2 <LL_ADC_REG_IsConversionOngoing>
 8001b08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 80cc 	bne.w	8001cb0 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 80c8 	bne.w	8001cb0 <HAL_ADC_Init+0x270>
=======
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ff62 	bl	8001b04 <LL_ADC_REG_IsConversionOngoing>
 8001c40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f040 80cc 	bne.w	8001de8 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 80c8 	bne.w	8001de8 <HAL_ADC_Init+0x270>
>>>>>>> remotes/origin/jayce_working
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b24:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b28:	f043 0202 	orr.w	r2, r3, #2
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	659a      	str	r2, [r3, #88]	@ 0x58
=======
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c60:	f043 0202 	orr.w	r2, r3, #2
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	659a      	str	r2, [r3, #88]	@ 0x58
>>>>>>> remotes/origin/jayce_working
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff49 	bl	80019cc <LL_ADC_IsEnabled>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d115      	bne.n	8001b6c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b40:	4864      	ldr	r0, [pc, #400]	@ (8001cd4 <HAL_ADC_Init+0x294>)
 8001b42:	f7ff ff43 	bl	80019cc <LL_ADC_IsEnabled>
 8001b46:	4604      	mov	r4, r0
 8001b48:	4863      	ldr	r0, [pc, #396]	@ (8001cd8 <HAL_ADC_Init+0x298>)
 8001b4a:	f7ff ff3f 	bl	80019cc <LL_ADC_IsEnabled>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	431c      	orrs	r4, r3
 8001b52:	4862      	ldr	r0, [pc, #392]	@ (8001cdc <HAL_ADC_Init+0x29c>)
 8001b54:	f7ff ff3a 	bl	80019cc <LL_ADC_IsEnabled>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4323      	orrs	r3, r4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d105      	bne.n	8001b6c <HAL_ADC_Init+0x12c>
=======
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fefb 	bl	8001a68 <LL_ADC_IsEnabled>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d115      	bne.n	8001ca4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c78:	4864      	ldr	r0, [pc, #400]	@ (8001e0c <HAL_ADC_Init+0x294>)
 8001c7a:	f7ff fef5 	bl	8001a68 <LL_ADC_IsEnabled>
 8001c7e:	4604      	mov	r4, r0
 8001c80:	4863      	ldr	r0, [pc, #396]	@ (8001e10 <HAL_ADC_Init+0x298>)
 8001c82:	f7ff fef1 	bl	8001a68 <LL_ADC_IsEnabled>
 8001c86:	4603      	mov	r3, r0
 8001c88:	431c      	orrs	r4, r3
 8001c8a:	4862      	ldr	r0, [pc, #392]	@ (8001e14 <HAL_ADC_Init+0x29c>)
 8001c8c:	f7ff feec 	bl	8001a68 <LL_ADC_IsEnabled>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4323      	orrs	r3, r4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d105      	bne.n	8001ca4 <HAL_ADC_Init+0x12c>
>>>>>>> remotes/origin/jayce_working
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
<<<<<<< HEAD
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	4619      	mov	r1, r3
 8001b66:	485e      	ldr	r0, [pc, #376]	@ (8001ce0 <HAL_ADC_Init+0x2a0>)
 8001b68:	f7ff fdca 	bl	8001700 <LL_ADC_SetCommonClock>
=======
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	485e      	ldr	r0, [pc, #376]	@ (8001e18 <HAL_ADC_Init+0x2a0>)
 8001ca0:	f7ff fd34 	bl	800170c <LL_ADC_SetCommonClock>
>>>>>>> remotes/origin/jayce_working
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
<<<<<<< HEAD
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	7e5b      	ldrb	r3, [r3, #25]
 8001b70:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b76:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b7c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b82:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b8a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d106      	bne.n	8001ba8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	045b      	lsls	r3, r3, #17
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
=======
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	7e5b      	ldrb	r3, [r3, #25]
 8001ca8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001cb4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001cba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d106      	bne.n	8001ce0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	045b      	lsls	r3, r3, #17
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
>>>>>>> remotes/origin/jayce_working
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d009      	beq.n	8001bc4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bbc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
=======
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d009      	beq.n	8001cfc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cec:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
>>>>>>> remotes/origin/jayce_working
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
<<<<<<< HEAD
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	4b46      	ldr	r3, [pc, #280]	@ (8001ce4 <HAL_ADC_Init+0x2a4>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	69b9      	ldr	r1, [r7, #24]
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	60d3      	str	r3, [r2, #12]
=======
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	4b46      	ldr	r3, [pc, #280]	@ (8001e1c <HAL_ADC_Init+0x2a4>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	69b9      	ldr	r1, [r7, #24]
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	60d3      	str	r3, [r2, #12]
>>>>>>> remotes/origin/jayce_working
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff1b 	bl	8001a18 <LL_ADC_INJ_IsConversionOngoing>
 8001be2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d140      	bne.n	8001c6c <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d13d      	bne.n	8001c6c <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	7e1b      	ldrb	r3, [r3, #24]
 8001bf8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bfa:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c02:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c12:	f023 0306 	bic.w	r3, r3, #6
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	69b9      	ldr	r1, [r7, #24]
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d118      	bne.n	8001c5c <HAL_ADC_Init+0x21c>
=======
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff1c 	bl	8001b52 <LL_ADC_INJ_IsConversionOngoing>
 8001d1a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d140      	bne.n	8001da4 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d13d      	bne.n	8001da4 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	7e1b      	ldrb	r3, [r3, #24]
 8001d30:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d32:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d3a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d4a:	f023 0306 	bic.w	r3, r3, #6
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	69b9      	ldr	r1, [r7, #24]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d118      	bne.n	8001d94 <HAL_ADC_Init+0x21c>
>>>>>>> remotes/origin/jayce_working
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
<<<<<<< HEAD
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c34:	f023 0304 	bic.w	r3, r3, #4
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c40:	4311      	orrs	r1, r2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c46:	4311      	orrs	r1, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0201 	orr.w	r2, r2, #1
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	e007      	b.n	8001c6c <HAL_ADC_Init+0x22c>
=======
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001d6c:	f023 0304 	bic.w	r3, r3, #4
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d78:	4311      	orrs	r1, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d7e:	4311      	orrs	r1, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d84:	430a      	orrs	r2, r1
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	611a      	str	r2, [r3, #16]
 8001d92:	e007      	b.n	8001da4 <HAL_ADC_Init+0x22c>
>>>>>>> remotes/origin/jayce_working
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
<<<<<<< HEAD
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0201 	bic.w	r2, r2, #1
 8001c6a:	611a      	str	r2, [r3, #16]
=======
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	611a      	str	r2, [r3, #16]
>>>>>>> remotes/origin/jayce_working
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
<<<<<<< HEAD
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d10c      	bne.n	8001c8e <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	f023 010f 	bic.w	r1, r3, #15
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	1e5a      	subs	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c8c:	e007      	b.n	8001c9e <HAL_ADC_Init+0x25e>
=======
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d10c      	bne.n	8001dc6 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f023 010f 	bic.w	r1, r3, #15
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	1e5a      	subs	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dc4:	e007      	b.n	8001dd6 <HAL_ADC_Init+0x25e>
>>>>>>> remotes/origin/jayce_working
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
<<<<<<< HEAD
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 020f 	bic.w	r2, r2, #15
 8001c9c:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 020f 	bic.w	r2, r2, #15
 8001dd4:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> remotes/origin/jayce_working
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
<<<<<<< HEAD
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca2:	f023 0303 	bic.w	r3, r3, #3
 8001ca6:	f043 0201 	orr.w	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cae:	e007      	b.n	8001cc0 <HAL_ADC_Init+0x280>
=======
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dda:	f023 0303 	bic.w	r3, r3, #3
 8001dde:	f043 0201 	orr.w	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	659a      	str	r2, [r3, #88]	@ 0x58
 8001de6:	e007      	b.n	8001df8 <HAL_ADC_Init+0x280>
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb4:	f043 0210 	orr.w	r2, r3, #16
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	77fb      	strb	r3, [r7, #31]
=======
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dec:	f043 0210 	orr.w	r2, r3, #16
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	77fb      	strb	r3, [r7, #31]
>>>>>>> remotes/origin/jayce_working
  }

  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 8001cc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	@ 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd90      	pop	{r4, r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	053e2d63 	.word	0x053e2d63
 8001cd4:	50040000 	.word	0x50040000
 8001cd8:	50040100 	.word	0x50040100
 8001cdc:	50040200 	.word	0x50040200
 8001ce0:	50040300 	.word	0x50040300
 8001ce4:	fff0c007 	.word	0xfff0c007

08001ce8 <HAL_ADC_ConfigChannel>:
=======
 8001df8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	@ 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd90      	pop	{r4, r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000000 	.word	0x20000000
 8001e08:	053e2d63 	.word	0x053e2d63
 8001e0c:	50040000 	.word	0x50040000
 8001e10:	50040100 	.word	0x50040100
 8001e14:	50040200 	.word	0x50040200
 8001e18:	50040300 	.word	0x50040300
 8001e1c:	fff0c007 	.word	0xfff0c007

08001e20 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e2c:	4853      	ldr	r0, [pc, #332]	@ (8001f7c <HAL_ADC_Start_DMA+0x15c>)
 8001e2e:	f7ff fd97 	bl	8001960 <LL_ADC_GetMultimode>
 8001e32:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fe63 	bl	8001b04 <LL_ADC_REG_IsConversionOngoing>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f040 8093 	bne.w	8001f6c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_ADC_Start_DMA+0x34>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e08e      	b.n	8001f72 <HAL_ADC_Start_DMA+0x152>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a47      	ldr	r2, [pc, #284]	@ (8001f80 <HAL_ADC_Start_DMA+0x160>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d008      	beq.n	8001e78 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b05      	cmp	r3, #5
 8001e70:	d002      	beq.n	8001e78 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	2b09      	cmp	r3, #9
 8001e76:	d172      	bne.n	8001f5e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 fdcb 	bl	8002a14 <ADC_Enable>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d165      	bne.n	8001f54 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a38      	ldr	r2, [pc, #224]	@ (8001f84 <HAL_ADC_Start_DMA+0x164>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d002      	beq.n	8001eac <HAL_ADC_Start_DMA+0x8c>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	e000      	b.n	8001eae <HAL_ADC_Start_DMA+0x8e>
 8001eac:	4b36      	ldr	r3, [pc, #216]	@ (8001f88 <HAL_ADC_Start_DMA+0x168>)
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d002      	beq.n	8001ebc <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d105      	bne.n	8001ec8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ecc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d006      	beq.n	8001ee2 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed8:	f023 0206 	bic.w	r2, r3, #6
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ee0:	e002      	b.n	8001ee8 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eec:	4a27      	ldr	r2, [pc, #156]	@ (8001f8c <HAL_ADC_Start_DMA+0x16c>)
 8001eee:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ef4:	4a26      	ldr	r2, [pc, #152]	@ (8001f90 <HAL_ADC_Start_DMA+0x170>)
 8001ef6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001efc:	4a25      	ldr	r2, [pc, #148]	@ (8001f94 <HAL_ADC_Start_DMA+0x174>)
 8001efe:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	221c      	movs	r2, #28
 8001f06:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0210 	orr.w	r2, r2, #16
 8001f1e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	3340      	adds	r3, #64	@ 0x40
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f001 fa4e 	bl	80033e0 <HAL_DMA_Start_IT>
 8001f44:	4603      	mov	r3, r0
 8001f46:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fdb1 	bl	8001ab4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001f52:	e00d      	b.n	8001f70 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8001f5c:	e008      	b.n	8001f70 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001f6a:	e001      	b.n	8001f70 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	50040300 	.word	0x50040300
 8001f80:	50040200 	.word	0x50040200
 8001f84:	50040100 	.word	0x50040100
 8001f88:	50040000 	.word	0x50040000
 8001f8c:	08002bdf 	.word	0x08002bdf
 8001f90:	08002cb7 	.word	0x08002cb7
 8001f94:	08002cd3 	.word	0x08002cd3

08001f98 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <HAL_ADC_Stop_DMA+0x16>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e051      	b.n	8002052 <HAL_ADC_Stop_DMA+0xba>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001fb6:	2103      	movs	r1, #3
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fc6f 	bl	800289c <ADC_ConversionStop>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d13f      	bne.n	8002048 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fdc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d10f      	bne.n	8002006 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fea:	4618      	mov	r0, r3
 8001fec:	f001 fa58 	bl	80034a0 <HAL_DMA_Abort>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0210 	bic.w	r2, r2, #16
 8002014:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d105      	bne.n	8002028 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 fd7f 	bl	8002b20 <ADC_Disable>
 8002022:	4603      	mov	r3, r0
 8002024:	73fb      	strb	r3, [r7, #15]
 8002026:	e002      	b.n	800202e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fd79 	bl	8002b20 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d109      	bne.n	8002048 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002038:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	f043 0201 	orr.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002050:	7bfb      	ldrb	r3, [r7, #15]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <HAL_ADC_ConfigChannel>:
>>>>>>> remotes/origin/jayce_working
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
<<<<<<< HEAD
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b0b6      	sub	sp, #216	@ 0xd8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
=======
 8002084:	b580      	push	{r7, lr}
 8002086:	b0b6      	sub	sp, #216	@ 0xd8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002094:	2300      	movs	r3, #0
 8002096:	60bb      	str	r3, [r7, #8]
>>>>>>> remotes/origin/jayce_working
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x22>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e3e3      	b.n	80024d2 <HAL_ADC_ConfigChannel+0x7ea>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
=======
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x22>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e3e3      	b.n	800286e <HAL_ADC_ConfigChannel+0x7ea>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
>>>>>>> remotes/origin/jayce_working
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fe6b 	bl	80019f2 <LL_ADC_REG_IsConversionOngoing>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f040 83c4 	bne.w	80024ac <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
=======
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fd26 	bl	8001b04 <LL_ADC_REG_IsConversionOngoing>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 83c4 	bne.w	8002848 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
>>>>>>> remotes/origin/jayce_working
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
<<<<<<< HEAD
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b05      	cmp	r3, #5
 8001d32:	d824      	bhi.n	8001d7e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	3b02      	subs	r3, #2
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d81b      	bhi.n	8001d76 <HAL_ADC_ConfigChannel+0x8e>
 8001d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d44 <HAL_ADC_ConfigChannel+0x5c>)
 8001d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d44:	08001d55 	.word	0x08001d55
 8001d48:	08001d5d 	.word	0x08001d5d
 8001d4c:	08001d65 	.word	0x08001d65
 8001d50:	08001d6d 	.word	0x08001d6d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001d54:	230c      	movs	r3, #12
 8001d56:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d5a:	e010      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001d5c:	2312      	movs	r3, #18
 8001d5e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d62:	e00c      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001d64:	2318      	movs	r3, #24
 8001d66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d6a:	e008      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001d6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d74:	e003      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001d76:	2306      	movs	r3, #6
 8001d78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d7c:	bf00      	nop
=======
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b05      	cmp	r3, #5
 80020ce:	d824      	bhi.n	800211a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	3b02      	subs	r3, #2
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d81b      	bhi.n	8002112 <HAL_ADC_ConfigChannel+0x8e>
 80020da:	a201      	add	r2, pc, #4	@ (adr r2, 80020e0 <HAL_ADC_ConfigChannel+0x5c>)
 80020dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e0:	080020f1 	.word	0x080020f1
 80020e4:	080020f9 	.word	0x080020f9
 80020e8:	08002101 	.word	0x08002101
 80020ec:	08002109 	.word	0x08002109
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80020f0:	230c      	movs	r3, #12
 80020f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020f6:	e010      	b.n	800211a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80020f8:	2312      	movs	r3, #18
 80020fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020fe:	e00c      	b.n	800211a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002100:	2318      	movs	r3, #24
 8002102:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002106:	e008      	b.n	800211a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002108:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800210c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002110:	e003      	b.n	800211a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002112:	2306      	movs	r3, #6
 8002114:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002118:	bf00      	nop
>>>>>>> remotes/origin/jayce_working
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
<<<<<<< HEAD
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001d8c:	f7ff fd54 	bl	8001838 <LL_ADC_REG_SetSequencerRanks>
=======
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002128:	f7ff fb9f 	bl	800186a <LL_ADC_REG_SetSequencerRanks>
>>>>>>> remotes/origin/jayce_working
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fe2c 	bl	80019f2 <LL_ADC_REG_IsConversionOngoing>
 8001d9a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fe38 	bl	8001a18 <LL_ADC_INJ_IsConversionOngoing>
 8001da8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f040 81bf 	bne.w	8002134 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001db6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 81ba 	bne.w	8002134 <HAL_ADC_ConfigChannel+0x44c>
=======
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fce7 	bl	8001b04 <LL_ADC_REG_IsConversionOngoing>
 8002136:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fd07 	bl	8001b52 <LL_ADC_INJ_IsConversionOngoing>
 8002144:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002148:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800214c:	2b00      	cmp	r3, #0
 800214e:	f040 81bf 	bne.w	80024d0 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002152:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002156:	2b00      	cmp	r3, #0
 8002158:	f040 81ba 	bne.w	80024d0 <HAL_ADC_ConfigChannel+0x44c>
>>>>>>> remotes/origin/jayce_working
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
<<<<<<< HEAD
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001dc8:	d10f      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f7ff fd5b 	bl	8001890 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fd15 	bl	8001812 <LL_ADC_SetSamplingTimeCommonConfig>
 8001de8:	e00e      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x120>
=======
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002164:	d10f      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	4619      	mov	r1, r3
 8002172:	f7ff fba6 	bl	80018c2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fb4d 	bl	800181e <LL_ADC_SetSamplingTimeCommonConfig>
 8002184:	e00e      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x120>
>>>>>>> remotes/origin/jayce_working
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
<<<<<<< HEAD
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6819      	ldr	r1, [r3, #0]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	461a      	mov	r2, r3
 8001df8:	f7ff fd4a 	bl	8001890 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fd05 	bl	8001812 <LL_ADC_SetSamplingTimeCommonConfig>
=======
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6819      	ldr	r1, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	461a      	mov	r2, r3
 8002194:	f7ff fb95 	bl	80018c2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fb3d 	bl	800181e <LL_ADC_SetSamplingTimeCommonConfig>
>>>>>>> remotes/origin/jayce_working

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
<<<<<<< HEAD
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	695a      	ldr	r2, [r3, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	08db      	lsrs	r3, r3, #3
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d00a      	beq.n	8001e40 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6919      	ldr	r1, [r3, #16]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e3a:	f7ff fc95 	bl	8001768 <LL_ADC_SetOffset>
 8001e3e:	e179      	b.n	8002134 <HAL_ADC_ConfigChannel+0x44c>
=======
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	08db      	lsrs	r3, r3, #3
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d00a      	beq.n	80021dc <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6919      	ldr	r1, [r3, #16]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021d6:	f7ff facd 	bl	8001774 <LL_ADC_SetOffset>
 80021da:	e179      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x44c>
>>>>>>> remotes/origin/jayce_working
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
<<<<<<< HEAD
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fcb2 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10a      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x184>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fca7 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	0e9b      	lsrs	r3, r3, #26
 8001e66:	f003 021f 	and.w	r2, r3, #31
 8001e6a:	e01e      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x1c2>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fc9c 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
=======
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff faea 	bl	80017bc <LL_ADC_GetOffsetChannel>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10a      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x184>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2100      	movs	r1, #0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fadf 	bl	80017bc <LL_ADC_GetOffsetChannel>
 80021fe:	4603      	mov	r3, r0
 8002200:	0e9b      	lsrs	r3, r3, #26
 8002202:	f003 021f 	and.w	r2, r3, #31
 8002206:	e01e      	b.n	8002246 <HAL_ADC_ConfigChannel+0x1c2>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fad4 	bl	80017bc <LL_ADC_GetOffsetChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
>>>>>>> remotes/origin/jayce_working
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
<<<<<<< HEAD
 8001e7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
=======
 800221a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
>>>>>>> remotes/origin/jayce_working
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
<<<<<<< HEAD
 8001e8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e8e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
=======
 8002226:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800222a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
>>>>>>> remotes/origin/jayce_working
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
<<<<<<< HEAD
 8001e92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001e9a:	2320      	movs	r3, #32
 8001e9c:	e004      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001e9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d105      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x1da>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0e9b      	lsrs	r3, r3, #26
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	e018      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x20c>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001ed6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001eda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001ede:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001ee6:	2320      	movs	r3, #32
 8001ee8:	e004      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001eea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d106      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fc6b 	bl	80017dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fc4f 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10a      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x24a>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2101      	movs	r1, #1
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fc44 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	0e9b      	lsrs	r3, r3, #26
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	e01e      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x288>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2101      	movs	r1, #1
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fc39 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f48:	fa93 f3a3 	rbit	r3, r3
 8001f4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001f58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001f60:	2320      	movs	r3, #32
 8001f62:	e004      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001f64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f68:	fab3 f383 	clz	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x2a0>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0e9b      	lsrs	r3, r3, #26
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	e018      	b.n	8001fba <HAL_ADC_ConfigChannel+0x2d2>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001fa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001fac:	2320      	movs	r3, #32
 8001fae:	e004      	b.n	8001fba <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fb4:	fab3 f383 	clz	r3, r3
 8001fb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d106      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fc08 	bl	80017dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fbec 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10a      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x310>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fbe1 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	0e9b      	lsrs	r3, r3, #26
 8001ff2:	f003 021f 	and.w	r2, r3, #31
 8001ff6:	e01e      	b.n	8002036 <HAL_ADC_ConfigChannel+0x34e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2102      	movs	r1, #2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fbd6 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8002004:	4603      	mov	r3, r0
 8002006:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002016:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800201a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800201e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002026:	2320      	movs	r3, #32
 8002028:	e004      	b.n	8002034 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800202a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800202e:	fab3 f383 	clz	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800203e:	2b00      	cmp	r3, #0
 8002040:	d105      	bne.n	800204e <HAL_ADC_ConfigChannel+0x366>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	0e9b      	lsrs	r3, r3, #26
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	e014      	b.n	8002078 <HAL_ADC_ConfigChannel+0x390>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800205c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800205e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002062:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800206a:	2320      	movs	r3, #32
 800206c:	e004      	b.n	8002078 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800206e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002078:	429a      	cmp	r2, r3
 800207a:	d106      	bne.n	800208a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2200      	movs	r2, #0
 8002082:	2102      	movs	r1, #2
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fba9 	bl	80017dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2103      	movs	r1, #3
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fb8d 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8002096:	4603      	mov	r3, r0
 8002098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10a      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x3ce>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2103      	movs	r1, #3
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fb82 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	0e9b      	lsrs	r3, r3, #26
 80020b0:	f003 021f 	and.w	r2, r3, #31
 80020b4:	e017      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x3fe>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2103      	movs	r1, #3
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fb77 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 80020c2:	4603      	mov	r3, r0
 80020c4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80020ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020d0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80020d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80020d8:	2320      	movs	r3, #32
 80020da:	e003      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80020dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d105      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x416>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	0e9b      	lsrs	r3, r3, #26
 80020f8:	f003 031f 	and.w	r3, r3, #31
 80020fc:	e011      	b.n	8002122 <HAL_ADC_ConfigChannel+0x43a>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800210c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800210e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002110:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002116:	2320      	movs	r3, #32
 8002118:	e003      	b.n	8002122 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800211a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002122:	429a      	cmp	r2, r3
 8002124:	d106      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2200      	movs	r2, #0
 800212c:	2103      	movs	r1, #3
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fb54 	bl	80017dc <LL_ADC_SetOffsetState>
=======
 800222e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002236:	2320      	movs	r3, #32
 8002238:	e004      	b.n	8002244 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800223a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224e:	2b00      	cmp	r3, #0
 8002250:	d105      	bne.n	800225e <HAL_ADC_ConfigChannel+0x1da>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	0e9b      	lsrs	r3, r3, #26
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	e018      	b.n	8002290 <HAL_ADC_ConfigChannel+0x20c>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002272:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002276:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800227a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002282:	2320      	movs	r3, #32
 8002284:	e004      	b.n	8002290 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002286:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002290:	429a      	cmp	r2, r3
 8002292:	d106      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2200      	movs	r2, #0
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff faa3 	bl	80017e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2101      	movs	r1, #1
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fa87 	bl	80017bc <LL_ADC_GetOffsetChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10a      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x24a>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2101      	movs	r1, #1
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fa7c 	bl	80017bc <LL_ADC_GetOffsetChannel>
 80022c4:	4603      	mov	r3, r0
 80022c6:	0e9b      	lsrs	r3, r3, #26
 80022c8:	f003 021f 	and.w	r2, r3, #31
 80022cc:	e01e      	b.n	800230c <HAL_ADC_ConfigChannel+0x288>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2101      	movs	r1, #1
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fa71 	bl	80017bc <LL_ADC_GetOffsetChannel>
 80022da:	4603      	mov	r3, r0
 80022dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80022ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80022f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e004      	b.n	800230a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002300:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002314:	2b00      	cmp	r3, #0
 8002316:	d105      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x2a0>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	0e9b      	lsrs	r3, r3, #26
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	e018      	b.n	8002356 <HAL_ADC_ConfigChannel+0x2d2>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002338:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800233c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002348:	2320      	movs	r3, #32
 800234a:	e004      	b.n	8002356 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800234c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002350:	fab3 f383 	clz	r3, r3
 8002354:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002356:	429a      	cmp	r2, r3
 8002358:	d106      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2200      	movs	r2, #0
 8002360:	2101      	movs	r1, #1
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fa40 	bl	80017e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2102      	movs	r1, #2
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fa24 	bl	80017bc <LL_ADC_GetOffsetChannel>
 8002374:	4603      	mov	r3, r0
 8002376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10a      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x310>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2102      	movs	r1, #2
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fa19 	bl	80017bc <LL_ADC_GetOffsetChannel>
 800238a:	4603      	mov	r3, r0
 800238c:	0e9b      	lsrs	r3, r3, #26
 800238e:	f003 021f 	and.w	r2, r3, #31
 8002392:	e01e      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x34e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2102      	movs	r1, #2
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fa0e 	bl	80017bc <LL_ADC_GetOffsetChannel>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80023b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80023ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80023c2:	2320      	movs	r3, #32
 80023c4:	e004      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80023c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d105      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x366>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	0e9b      	lsrs	r3, r3, #26
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	e014      	b.n	8002414 <HAL_ADC_ConfigChannel+0x390>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80023f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80023fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002406:	2320      	movs	r3, #32
 8002408:	e004      	b.n	8002414 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800240a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002414:	429a      	cmp	r2, r3
 8002416:	d106      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2200      	movs	r2, #0
 800241e:	2102      	movs	r1, #2
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff f9e1 	bl	80017e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2103      	movs	r1, #3
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff f9c5 	bl	80017bc <LL_ADC_GetOffsetChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10a      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x3ce>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2103      	movs	r1, #3
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff f9ba 	bl	80017bc <LL_ADC_GetOffsetChannel>
 8002448:	4603      	mov	r3, r0
 800244a:	0e9b      	lsrs	r3, r3, #26
 800244c:	f003 021f 	and.w	r2, r3, #31
 8002450:	e017      	b.n	8002482 <HAL_ADC_ConfigChannel+0x3fe>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2103      	movs	r1, #3
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff f9af 	bl	80017bc <LL_ADC_GetOffsetChannel>
 800245e:	4603      	mov	r3, r0
 8002460:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800246a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800246c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800246e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002474:	2320      	movs	r3, #32
 8002476:	e003      	b.n	8002480 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002478:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248a:	2b00      	cmp	r3, #0
 800248c:	d105      	bne.n	800249a <HAL_ADC_ConfigChannel+0x416>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	0e9b      	lsrs	r3, r3, #26
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	e011      	b.n	80024be <HAL_ADC_ConfigChannel+0x43a>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80024a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024aa:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80024ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80024b2:	2320      	movs	r3, #32
 80024b4:	e003      	b.n	80024be <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80024b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024be:	429a      	cmp	r2, r3
 80024c0:	d106      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2200      	movs	r2, #0
 80024c8:	2103      	movs	r1, #3
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff f98c 	bl	80017e8 <LL_ADC_SetOffsetState>
>>>>>>> remotes/origin/jayce_working
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fc47 	bl	80019cc <LL_ADC_IsEnabled>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	f040 813f 	bne.w	80023c4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6819      	ldr	r1, [r3, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	461a      	mov	r2, r3
 8002154:	f7ff fbc8 	bl	80018e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a8e      	ldr	r2, [pc, #568]	@ (8002398 <HAL_ADC_ConfigChannel+0x6b0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	f040 8130 	bne.w	80023c4 <HAL_ADC_ConfigChannel+0x6dc>
=======
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fac7 	bl	8001a68 <LL_ADC_IsEnabled>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f040 813f 	bne.w	8002760 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	461a      	mov	r2, r3
 80024f0:	f7ff fa12 	bl	8001918 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a8e      	ldr	r2, [pc, #568]	@ (8002734 <HAL_ADC_ConfigChannel+0x6b0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	f040 8130 	bne.w	8002760 <HAL_ADC_ConfigChannel+0x6dc>
>>>>>>> remotes/origin/jayce_working
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
<<<<<<< HEAD
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10b      	bne.n	800218c <HAL_ADC_ConfigChannel+0x4a4>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	0e9b      	lsrs	r3, r3, #26
 800217a:	3301      	adds	r3, #1
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	2b09      	cmp	r3, #9
 8002182:	bf94      	ite	ls
 8002184:	2301      	movls	r3, #1
 8002186:	2300      	movhi	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	e019      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x4d8>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800219a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800219c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800219e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80021a4:	2320      	movs	r3, #32
 80021a6:	e003      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80021a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	f003 031f 	and.w	r3, r3, #31
 80021b6:	2b09      	cmp	r3, #9
 80021b8:	bf94      	ite	ls
 80021ba:	2301      	movls	r3, #1
 80021bc:	2300      	movhi	r3, #0
 80021be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d079      	beq.n	80022b8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d107      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x4f8>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0e9b      	lsrs	r3, r3, #26
 80021d6:	3301      	adds	r3, #1
 80021d8:	069b      	lsls	r3, r3, #26
 80021da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021de:	e015      	b.n	800220c <HAL_ADC_ConfigChannel+0x524>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80021ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021f0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80021f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80021f8:	2320      	movs	r3, #32
 80021fa:	e003      	b.n	8002204 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80021fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	3301      	adds	r3, #1
 8002206:	069b      	lsls	r3, r3, #26
 8002208:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002214:	2b00      	cmp	r3, #0
 8002216:	d109      	bne.n	800222c <HAL_ADC_ConfigChannel+0x544>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	0e9b      	lsrs	r3, r3, #26
 800221e:	3301      	adds	r3, #1
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	2101      	movs	r1, #1
 8002226:	fa01 f303 	lsl.w	r3, r1, r3
 800222a:	e017      	b.n	800225c <HAL_ADC_ConfigChannel+0x574>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002232:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800223a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800223c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800223e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002244:	2320      	movs	r3, #32
 8002246:	e003      	b.n	8002250 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	3301      	adds	r3, #1
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	2101      	movs	r1, #1
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	ea42 0103 	orr.w	r1, r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x59a>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0e9b      	lsrs	r3, r3, #26
 8002272:	3301      	adds	r3, #1
 8002274:	f003 021f 	and.w	r2, r3, #31
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	051b      	lsls	r3, r3, #20
 8002280:	e018      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x5cc>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002292:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800229a:	2320      	movs	r3, #32
 800229c:	e003      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800229e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b4:	430b      	orrs	r3, r1
 80022b6:	e080      	b.n	80023ba <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d107      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x5ec>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	0e9b      	lsrs	r3, r3, #26
 80022ca:	3301      	adds	r3, #1
 80022cc:	069b      	lsls	r3, r3, #26
 80022ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022d2:	e015      	b.n	8002300 <HAL_ADC_ConfigChannel+0x618>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80022e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80022ec:	2320      	movs	r3, #32
 80022ee:	e003      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80022f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	3301      	adds	r3, #1
 80022fa:	069b      	lsls	r3, r3, #26
 80022fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002308:	2b00      	cmp	r3, #0
 800230a:	d109      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x638>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0e9b      	lsrs	r3, r3, #26
 8002312:	3301      	adds	r3, #1
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	2101      	movs	r1, #1
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	e017      	b.n	8002350 <HAL_ADC_ConfigChannel+0x668>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	61bb      	str	r3, [r7, #24]
  return result;
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002338:	2320      	movs	r3, #32
 800233a:	e003      	b.n	8002344 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	3301      	adds	r3, #1
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	2101      	movs	r1, #1
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	ea42 0103 	orr.w	r1, r2, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10d      	bne.n	800237c <HAL_ADC_ConfigChannel+0x694>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	0e9b      	lsrs	r3, r3, #26
 8002366:	3301      	adds	r3, #1
 8002368:	f003 021f 	and.w	r2, r3, #31
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	3b1e      	subs	r3, #30
 8002374:	051b      	lsls	r3, r3, #20
 8002376:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800237a:	e01d      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x6d0>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	60fb      	str	r3, [r7, #12]
  return result;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d103      	bne.n	800239c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002394:	2320      	movs	r3, #32
 8002396:	e005      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x6bc>
 8002398:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	3301      	adds	r3, #1
 80023a6:	f003 021f 	and.w	r2, r3, #31
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	3b1e      	subs	r3, #30
 80023b2:	051b      	lsls	r3, r3, #20
 80023b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023b8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023be:	4619      	mov	r1, r3
 80023c0:	f7ff fa66 	bl	8001890 <LL_ADC_SetChannelSamplingTime>
=======
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10b      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x4a4>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0e9b      	lsrs	r3, r3, #26
 8002516:	3301      	adds	r3, #1
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	2b09      	cmp	r3, #9
 800251e:	bf94      	ite	ls
 8002520:	2301      	movls	r3, #1
 8002522:	2300      	movhi	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	e019      	b.n	800255c <HAL_ADC_ConfigChannel+0x4d8>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002538:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800253a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002540:	2320      	movs	r3, #32
 8002542:	e003      	b.n	800254c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002544:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	3301      	adds	r3, #1
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	2b09      	cmp	r3, #9
 8002554:	bf94      	ite	ls
 8002556:	2301      	movls	r3, #1
 8002558:	2300      	movhi	r3, #0
 800255a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800255c:	2b00      	cmp	r3, #0
 800255e:	d079      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002568:	2b00      	cmp	r3, #0
 800256a:	d107      	bne.n	800257c <HAL_ADC_ConfigChannel+0x4f8>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0e9b      	lsrs	r3, r3, #26
 8002572:	3301      	adds	r3, #1
 8002574:	069b      	lsls	r3, r3, #26
 8002576:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800257a:	e015      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x524>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002584:	fa93 f3a3 	rbit	r3, r3
 8002588:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800258a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800258c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800258e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002594:	2320      	movs	r3, #32
 8002596:	e003      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	3301      	adds	r3, #1
 80025a2:	069b      	lsls	r3, r3, #26
 80025a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d109      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x544>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0e9b      	lsrs	r3, r3, #26
 80025ba:	3301      	adds	r3, #1
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	2101      	movs	r1, #1
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	e017      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x574>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025d0:	fa93 f3a3 	rbit	r3, r3
 80025d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80025d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025d8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80025da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80025e0:	2320      	movs	r3, #32
 80025e2:	e003      	b.n	80025ec <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80025e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	3301      	adds	r3, #1
 80025ee:	f003 031f 	and.w	r3, r3, #31
 80025f2:	2101      	movs	r1, #1
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	ea42 0103 	orr.w	r1, r2, r3
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10a      	bne.n	800261e <HAL_ADC_ConfigChannel+0x59a>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0e9b      	lsrs	r3, r3, #26
 800260e:	3301      	adds	r3, #1
 8002610:	f003 021f 	and.w	r2, r3, #31
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	051b      	lsls	r3, r3, #20
 800261c:	e018      	b.n	8002650 <HAL_ADC_ConfigChannel+0x5cc>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800262c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002636:	2320      	movs	r3, #32
 8002638:	e003      	b.n	8002642 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800263a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	3301      	adds	r3, #1
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002650:	430b      	orrs	r3, r1
 8002652:	e080      	b.n	8002756 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265c:	2b00      	cmp	r3, #0
 800265e:	d107      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x5ec>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0e9b      	lsrs	r3, r3, #26
 8002666:	3301      	adds	r3, #1
 8002668:	069b      	lsls	r3, r3, #26
 800266a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800266e:	e015      	b.n	800269c <HAL_ADC_ConfigChannel+0x618>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002688:	2320      	movs	r3, #32
 800268a:	e003      	b.n	8002694 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800268c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	3301      	adds	r3, #1
 8002696:	069b      	lsls	r3, r3, #26
 8002698:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d109      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x638>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	0e9b      	lsrs	r3, r3, #26
 80026ae:	3301      	adds	r3, #1
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	2101      	movs	r1, #1
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	e017      	b.n	80026ec <HAL_ADC_ConfigChannel+0x668>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	61bb      	str	r3, [r7, #24]
  return result;
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80026d4:	2320      	movs	r3, #32
 80026d6:	e003      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	fab3 f383 	clz	r3, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	3301      	adds	r3, #1
 80026e2:	f003 031f 	and.w	r3, r3, #31
 80026e6:	2101      	movs	r1, #1
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	ea42 0103 	orr.w	r1, r2, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10d      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x694>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	0e9b      	lsrs	r3, r3, #26
 8002702:	3301      	adds	r3, #1
 8002704:	f003 021f 	and.w	r2, r3, #31
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	3b1e      	subs	r3, #30
 8002710:	051b      	lsls	r3, r3, #20
 8002712:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002716:	e01d      	b.n	8002754 <HAL_ADC_ConfigChannel+0x6d0>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	60fb      	str	r3, [r7, #12]
  return result;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d103      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002730:	2320      	movs	r3, #32
 8002732:	e005      	b.n	8002740 <HAL_ADC_ConfigChannel+0x6bc>
 8002734:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	3301      	adds	r3, #1
 8002742:	f003 021f 	and.w	r2, r3, #31
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	3b1e      	subs	r3, #30
 800274e:	051b      	lsls	r3, r3, #20
 8002750:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002754:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800275a:	4619      	mov	r1, r3
 800275c:	f7ff f8b1 	bl	80018c2 <LL_ADC_SetChannelSamplingTime>
>>>>>>> remotes/origin/jayce_working
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
<<<<<<< HEAD
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b44      	ldr	r3, [pc, #272]	@ (80024dc <HAL_ADC_ConfigChannel+0x7f4>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d07a      	beq.n	80024c6 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023d0:	4843      	ldr	r0, [pc, #268]	@ (80024e0 <HAL_ADC_ConfigChannel+0x7f8>)
 80023d2:	f7ff f9bb 	bl	800174c <LL_ADC_GetCommonPathInternalCh>
 80023d6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
=======
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b44      	ldr	r3, [pc, #272]	@ (8002878 <HAL_ADC_ConfigChannel+0x7f4>)
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d07a      	beq.n	8002862 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800276c:	4843      	ldr	r0, [pc, #268]	@ (800287c <HAL_ADC_ConfigChannel+0x7f8>)
 800276e:	f7fe fff3 	bl	8001758 <LL_ADC_GetCommonPathInternalCh>
 8002772:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
>>>>>>> remotes/origin/jayce_working

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
<<<<<<< HEAD
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a41      	ldr	r2, [pc, #260]	@ (80024e4 <HAL_ADC_ConfigChannel+0x7fc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d12c      	bne.n	800243e <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d126      	bne.n	800243e <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a3c      	ldr	r2, [pc, #240]	@ (80024e8 <HAL_ADC_ConfigChannel+0x800>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d004      	beq.n	8002404 <HAL_ADC_ConfigChannel+0x71c>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a3b      	ldr	r2, [pc, #236]	@ (80024ec <HAL_ADC_ConfigChannel+0x804>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d15d      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002404:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002408:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800240c:	4619      	mov	r1, r3
 800240e:	4834      	ldr	r0, [pc, #208]	@ (80024e0 <HAL_ADC_ConfigChannel+0x7f8>)
 8002410:	f7ff f989 	bl	8001726 <LL_ADC_SetCommonPathInternalCh>
=======
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a41      	ldr	r2, [pc, #260]	@ (8002880 <HAL_ADC_ConfigChannel+0x7fc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d12c      	bne.n	80027da <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002780:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002784:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d126      	bne.n	80027da <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a3c      	ldr	r2, [pc, #240]	@ (8002884 <HAL_ADC_ConfigChannel+0x800>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d004      	beq.n	80027a0 <HAL_ADC_ConfigChannel+0x71c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a3b      	ldr	r2, [pc, #236]	@ (8002888 <HAL_ADC_ConfigChannel+0x804>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d15d      	bne.n	800285c <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027a8:	4619      	mov	r1, r3
 80027aa:	4834      	ldr	r0, [pc, #208]	@ (800287c <HAL_ADC_ConfigChannel+0x7f8>)
 80027ac:	f7fe ffc1 	bl	8001732 <LL_ADC_SetCommonPathInternalCh>
>>>>>>> remotes/origin/jayce_working
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 8002414:	4b36      	ldr	r3, [pc, #216]	@ (80024f0 <HAL_ADC_ConfigChannel+0x808>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	099b      	lsrs	r3, r3, #6
 800241a:	4a36      	ldr	r2, [pc, #216]	@ (80024f4 <HAL_ADC_ConfigChannel+0x80c>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	099b      	lsrs	r3, r3, #6
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	4613      	mov	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800242e:	e002      	b.n	8002436 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	3b01      	subs	r3, #1
 8002434:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f9      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800243c:	e040      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x7d8>
=======
 80027b0:	4b36      	ldr	r3, [pc, #216]	@ (800288c <HAL_ADC_ConfigChannel+0x808>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	4a36      	ldr	r2, [pc, #216]	@ (8002890 <HAL_ADC_ConfigChannel+0x80c>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	099b      	lsrs	r3, r3, #6
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027ca:	e002      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f9      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027d8:	e040      	b.n	800285c <HAL_ADC_ConfigChannel+0x7d8>
>>>>>>> remotes/origin/jayce_working
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
<<<<<<< HEAD
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a2d      	ldr	r2, [pc, #180]	@ (80024f8 <HAL_ADC_ConfigChannel+0x810>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d118      	bne.n	800247a <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002448:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800244c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d112      	bne.n	800247a <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a23      	ldr	r2, [pc, #140]	@ (80024e8 <HAL_ADC_ConfigChannel+0x800>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d004      	beq.n	8002468 <HAL_ADC_ConfigChannel+0x780>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a22      	ldr	r2, [pc, #136]	@ (80024ec <HAL_ADC_ConfigChannel+0x804>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d12d      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002468:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800246c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002470:	4619      	mov	r1, r3
 8002472:	481b      	ldr	r0, [pc, #108]	@ (80024e0 <HAL_ADC_ConfigChannel+0x7f8>)
 8002474:	f7ff f957 	bl	8001726 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002478:	e024      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x7dc>
=======
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a2d      	ldr	r2, [pc, #180]	@ (8002894 <HAL_ADC_ConfigChannel+0x810>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d118      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d112      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a23      	ldr	r2, [pc, #140]	@ (8002884 <HAL_ADC_ConfigChannel+0x800>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d004      	beq.n	8002804 <HAL_ADC_ConfigChannel+0x780>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a22      	ldr	r2, [pc, #136]	@ (8002888 <HAL_ADC_ConfigChannel+0x804>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d12d      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002804:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002808:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800280c:	4619      	mov	r1, r3
 800280e:	481b      	ldr	r0, [pc, #108]	@ (800287c <HAL_ADC_ConfigChannel+0x7f8>)
 8002810:	f7fe ff8f 	bl	8001732 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002814:	e024      	b.n	8002860 <HAL_ADC_ConfigChannel+0x7dc>
>>>>>>> remotes/origin/jayce_working
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
<<<<<<< HEAD
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a1f      	ldr	r2, [pc, #124]	@ (80024fc <HAL_ADC_ConfigChannel+0x814>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d120      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002484:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002488:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d11a      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a14      	ldr	r2, [pc, #80]	@ (80024e8 <HAL_ADC_ConfigChannel+0x800>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d115      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800249a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800249e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024a2:	4619      	mov	r1, r3
 80024a4:	480e      	ldr	r0, [pc, #56]	@ (80024e0 <HAL_ADC_ConfigChannel+0x7f8>)
 80024a6:	f7ff f93e 	bl	8001726 <LL_ADC_SetCommonPathInternalCh>
 80024aa:	e00c      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x7de>
=======
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a1f      	ldr	r2, [pc, #124]	@ (8002898 <HAL_ADC_ConfigChannel+0x814>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d120      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002820:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002824:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d11a      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a14      	ldr	r2, [pc, #80]	@ (8002884 <HAL_ADC_ConfigChannel+0x800>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d115      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002836:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800283a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800283e:	4619      	mov	r1, r3
 8002840:	480e      	ldr	r0, [pc, #56]	@ (800287c <HAL_ADC_ConfigChannel+0x7f8>)
 8002842:	f7fe ff76 	bl	8001732 <LL_ADC_SetCommonPathInternalCh>
 8002846:	e00c      	b.n	8002862 <HAL_ADC_ConfigChannel+0x7de>
>>>>>>> remotes/origin/jayce_working
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b0:	f043 0220 	orr.w	r2, r3, #32
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80024be:	e002      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024c0:	bf00      	nop
 80024c2:	e000      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024c4:	bf00      	nop
=======
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284c:	f043 0220 	orr.w	r2, r3, #32
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800285a:	e002      	b.n	8002862 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800285c:	bf00      	nop
 800285e:	e000      	b.n	8002862 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002860:	bf00      	nop
>>>>>>> remotes/origin/jayce_working
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80024ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	37d8      	adds	r7, #216	@ 0xd8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	80080000 	.word	0x80080000
 80024e0:	50040300 	.word	0x50040300
 80024e4:	c7520000 	.word	0xc7520000
 80024e8:	50040000 	.word	0x50040000
 80024ec:	50040200 	.word	0x50040200
 80024f0:	20000000 	.word	0x20000000
 80024f4:	053e2d63 	.word	0x053e2d63
 80024f8:	cb840000 	.word	0xcb840000
 80024fc:	80000001 	.word	0x80000001

08002500 <LL_ADC_IsEnabled>:
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <LL_ADC_IsEnabled+0x18>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <LL_ADC_IsEnabled+0x1a>
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <LL_ADC_REG_IsConversionOngoing>:
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b04      	cmp	r3, #4
 8002538:	d101      	bne.n	800253e <LL_ADC_REG_IsConversionOngoing+0x18>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_ADCEx_MultiModeConfigChannel>:
=======
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800286a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800286e:	4618      	mov	r0, r3
 8002870:	37d8      	adds	r7, #216	@ 0xd8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	80080000 	.word	0x80080000
 800287c:	50040300 	.word	0x50040300
 8002880:	c7520000 	.word	0xc7520000
 8002884:	50040000 	.word	0x50040000
 8002888:	50040200 	.word	0x50040200
 800288c:	20000000 	.word	0x20000000
 8002890:	053e2d63 	.word	0x053e2d63
 8002894:	cb840000 	.word	0xcb840000
 8002898:	80000001 	.word	0x80000001

0800289c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff f926 	bl	8001b04 <LL_ADC_REG_IsConversionOngoing>
 80028b8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff f947 	bl	8001b52 <LL_ADC_INJ_IsConversionOngoing>
 80028c4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d103      	bne.n	80028d4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8098 	beq.w	8002a04 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d02a      	beq.n	8002938 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	7e5b      	ldrb	r3, [r3, #25]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d126      	bne.n	8002938 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	7e1b      	ldrb	r3, [r3, #24]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d122      	bne.n	8002938 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80028f2:	2301      	movs	r3, #1
 80028f4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028f6:	e014      	b.n	8002922 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	4a45      	ldr	r2, [pc, #276]	@ (8002a10 <ADC_ConversionStop+0x174>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d90d      	bls.n	800291c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002904:	f043 0210 	orr.w	r2, r3, #16
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002910:	f043 0201 	orr.w	r2, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e074      	b.n	8002a06 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	3301      	adds	r3, #1
 8002920:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800292c:	2b40      	cmp	r3, #64	@ 0x40
 800292e:	d1e3      	bne.n	80028f8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2240      	movs	r2, #64	@ 0x40
 8002936:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d014      	beq.n	8002968 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff f8de 	bl	8001b04 <LL_ADC_REG_IsConversionOngoing>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00c      	beq.n	8002968 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff f89b 	bl	8001a8e <LL_ADC_IsDisableOngoing>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d104      	bne.n	8002968 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff f8ba 	bl	8001adc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d014      	beq.n	8002998 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff f8ed 	bl	8001b52 <LL_ADC_INJ_IsConversionOngoing>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00c      	beq.n	8002998 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff f883 	bl	8001a8e <LL_ADC_IsDisableOngoing>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d104      	bne.n	8002998 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff f8c9 	bl	8001b2a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d005      	beq.n	80029aa <ADC_ConversionStop+0x10e>
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d105      	bne.n	80029b0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80029a4:	230c      	movs	r3, #12
 80029a6:	617b      	str	r3, [r7, #20]
        break;
 80029a8:	e005      	b.n	80029b6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80029aa:	2308      	movs	r3, #8
 80029ac:	617b      	str	r3, [r7, #20]
        break;
 80029ae:	e002      	b.n	80029b6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80029b0:	2304      	movs	r3, #4
 80029b2:	617b      	str	r3, [r7, #20]
        break;
 80029b4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80029b6:	f7fe fe9d 	bl	80016f4 <HAL_GetTick>
 80029ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029bc:	e01b      	b.n	80029f6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80029be:	f7fe fe99 	bl	80016f4 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b05      	cmp	r3, #5
 80029ca:	d914      	bls.n	80029f6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00d      	beq.n	80029f6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029de:	f043 0210 	orr.w	r2, r3, #16
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ea:	f043 0201 	orr.w	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e007      	b.n	8002a06 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1dc      	bne.n	80029be <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3720      	adds	r7, #32
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	a33fffff 	.word	0xa33fffff

08002a14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff f81f 	bl	8001a68 <LL_ADC_IsEnabled>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d169      	bne.n	8002b04 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	4b36      	ldr	r3, [pc, #216]	@ (8002b10 <ADC_Enable+0xfc>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00d      	beq.n	8002a5a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a42:	f043 0210 	orr.w	r2, r3, #16
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4e:	f043 0201 	orr.w	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e055      	b.n	8002b06 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe ffda 	bl	8001a18 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a64:	482b      	ldr	r0, [pc, #172]	@ (8002b14 <ADC_Enable+0x100>)
 8002a66:	f7fe fe77 	bl	8001758 <LL_ADC_GetCommonPathInternalCh>
 8002a6a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a74:	4b28      	ldr	r3, [pc, #160]	@ (8002b18 <ADC_Enable+0x104>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	099b      	lsrs	r3, r3, #6
 8002a7a:	4a28      	ldr	r2, [pc, #160]	@ (8002b1c <ADC_Enable+0x108>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	099b      	lsrs	r3, r3, #6
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a8e:	e002      	b.n	8002a96 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f9      	bne.n	8002a90 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a9c:	f7fe fe2a 	bl	80016f4 <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aa2:	e028      	b.n	8002af6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe ffdd 	bl	8001a68 <LL_ADC_IsEnabled>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d104      	bne.n	8002abe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe ffad 	bl	8001a18 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002abe:	f7fe fe19 	bl	80016f4 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d914      	bls.n	8002af6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d00d      	beq.n	8002af6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ade:	f043 0210 	orr.w	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aea:	f043 0201 	orr.w	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e007      	b.n	8002b06 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d1cf      	bne.n	8002aa4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	8000003f 	.word	0x8000003f
 8002b14:	50040300 	.word	0x50040300
 8002b18:	20000000 	.word	0x20000000
 8002b1c:	053e2d63 	.word	0x053e2d63

08002b20 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe ffae 	bl	8001a8e <LL_ADC_IsDisableOngoing>
 8002b32:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe ff95 	bl	8001a68 <LL_ADC_IsEnabled>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d047      	beq.n	8002bd4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d144      	bne.n	8002bd4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 030d 	and.w	r3, r3, #13
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d10c      	bne.n	8002b72 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe ff6f 	bl	8001a40 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2203      	movs	r2, #3
 8002b68:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b6a:	f7fe fdc3 	bl	80016f4 <HAL_GetTick>
 8002b6e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b70:	e029      	b.n	8002bc6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b76:	f043 0210 	orr.w	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b82:	f043 0201 	orr.w	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e023      	b.n	8002bd6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b8e:	f7fe fdb1 	bl	80016f4 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d914      	bls.n	8002bc6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00d      	beq.n	8002bc6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bae:	f043 0210 	orr.w	r2, r3, #16
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bba:	f043 0201 	orr.w	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e007      	b.n	8002bd6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1dc      	bne.n	8002b8e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d14b      	bne.n	8002c90 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d021      	beq.n	8002c56 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe fe14 	bl	8001844 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d032      	beq.n	8002c88 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d12b      	bne.n	8002c88 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d11f      	bne.n	8002c88 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4c:	f043 0201 	orr.w	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c54:	e018      	b.n	8002c88 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d111      	bne.n	8002c88 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d105      	bne.n	8002c88 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c80:	f043 0201 	orr.w	r2, r3, #1
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f7fe f91f 	bl	8000ecc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c8e:	e00e      	b.n	8002cae <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f7ff f9e6 	bl	800206e <HAL_ADC_ErrorCallback>
}
 8002ca2:	e004      	b.n	8002cae <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f7ff f9c8 	bl	800205a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf0:	f043 0204 	orr.w	r2, r3, #4
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f7ff f9b8 	bl	800206e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cfe:	bf00      	nop
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <LL_ADC_IsEnabled>:
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <LL_ADC_IsEnabled+0x18>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <LL_ADC_IsEnabled+0x1a>
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_ADC_REG_IsConversionOngoing>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d101      	bne.n	8002d44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <HAL_ADCEx_MultiModeConfigChannel>:
>>>>>>> remotes/origin/jayce_working
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
<<<<<<< HEAD
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b0a1      	sub	sp, #132	@ 0x84
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
=======
 8002d54:	b590      	push	{r4, r7, lr}
 8002d56:	b0a1      	sub	sp, #132	@ 0x84
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
>>>>>>> remotes/origin/jayce_working
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002566:	2302      	movs	r3, #2
 8002568:	e093      	b.n	8002692 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002572:	2300      	movs	r3, #0
 8002574:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002576:	2300      	movs	r3, #0
 8002578:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a47      	ldr	r2, [pc, #284]	@ (800269c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d102      	bne.n	800258a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002584:	4b46      	ldr	r3, [pc, #280]	@ (80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	e001      	b.n	800258e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10b      	bne.n	80025ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002598:	f043 0220 	orr.w	r2, r3, #32
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e072      	b.n	8002692 <HAL_ADCEx_MultiModeConfigChannel+0x146>
=======
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e093      	b.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d7e:	2300      	movs	r3, #0
 8002d80:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a47      	ldr	r2, [pc, #284]	@ (8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d102      	bne.n	8002d92 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d8c:	4b46      	ldr	r3, [pc, #280]	@ (8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	e001      	b.n	8002d96 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10b      	bne.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da0:	f043 0220 	orr.w	r2, r3, #32
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e072      	b.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0x146>
>>>>>>> remotes/origin/jayce_working
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
<<<<<<< HEAD
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ffb9 	bl	8002526 <LL_ADC_REG_IsConversionOngoing>
 80025b4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ffb3 	bl	8002526 <LL_ADC_REG_IsConversionOngoing>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d154      	bne.n	8002670 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80025c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d151      	bne.n	8002670 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025cc:	4b35      	ldr	r3, [pc, #212]	@ (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80025ce:	677b      	str	r3, [r7, #116]	@ 0x74
=======
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff ffb8 	bl	8002d2c <LL_ADC_REG_IsConversionOngoing>
 8002dbc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ffb2 	bl	8002d2c <LL_ADC_REG_IsConversionOngoing>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d154      	bne.n	8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002dce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d151      	bne.n	8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002dd4:	4b35      	ldr	r3, [pc, #212]	@ (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002dd6:	677b      	str	r3, [r7, #116]	@ 0x74
>>>>>>> remotes/origin/jayce_working

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
<<<<<<< HEAD
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d02c      	beq.n	8002632 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80025d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025ea:	035b      	lsls	r3, r3, #13
 80025ec:	430b      	orrs	r3, r1
 80025ee:	431a      	orrs	r2, r3
 80025f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025f2:	609a      	str	r2, [r3, #8]
=======
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d02c      	beq.n	8002e3a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002de0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002df2:	035b      	lsls	r3, r3, #13
 8002df4:	430b      	orrs	r3, r1
 8002df6:	431a      	orrs	r2, r3
 8002df8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dfa:	609a      	str	r2, [r3, #8]
>>>>>>> remotes/origin/jayce_working
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
<<<<<<< HEAD
 80025f4:	4829      	ldr	r0, [pc, #164]	@ (800269c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025f6:	f7ff ff83 	bl	8002500 <LL_ADC_IsEnabled>
 80025fa:	4604      	mov	r4, r0
 80025fc:	4828      	ldr	r0, [pc, #160]	@ (80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025fe:	f7ff ff7f 	bl	8002500 <LL_ADC_IsEnabled>
 8002602:	4603      	mov	r3, r0
 8002604:	431c      	orrs	r4, r3
 8002606:	4828      	ldr	r0, [pc, #160]	@ (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002608:	f7ff ff7a 	bl	8002500 <LL_ADC_IsEnabled>
 800260c:	4603      	mov	r3, r0
 800260e:	4323      	orrs	r3, r4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d137      	bne.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002614:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800261c:	f023 030f 	bic.w	r3, r3, #15
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	6811      	ldr	r1, [r2, #0]
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	6892      	ldr	r2, [r2, #8]
 8002628:	430a      	orrs	r2, r1
 800262a:	431a      	orrs	r2, r3
 800262c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800262e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002630:	e028      	b.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x138>
=======
 8002dfc:	4829      	ldr	r0, [pc, #164]	@ (8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002dfe:	f7ff ff82 	bl	8002d06 <LL_ADC_IsEnabled>
 8002e02:	4604      	mov	r4, r0
 8002e04:	4828      	ldr	r0, [pc, #160]	@ (8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e06:	f7ff ff7e 	bl	8002d06 <LL_ADC_IsEnabled>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	431c      	orrs	r4, r3
 8002e0e:	4828      	ldr	r0, [pc, #160]	@ (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e10:	f7ff ff79 	bl	8002d06 <LL_ADC_IsEnabled>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4323      	orrs	r3, r4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d137      	bne.n	8002e8c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e24:	f023 030f 	bic.w	r3, r3, #15
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	6811      	ldr	r1, [r2, #0]
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	6892      	ldr	r2, [r2, #8]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	431a      	orrs	r2, r3
 8002e34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e36:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e38:	e028      	b.n	8002e8c <HAL_ADCEx_MultiModeConfigChannel+0x138>
>>>>>>> remotes/origin/jayce_working
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
<<<<<<< HEAD
 8002632:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800263a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800263c:	609a      	str	r2, [r3, #8]
=======
 8002e3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e44:	609a      	str	r2, [r3, #8]
>>>>>>> remotes/origin/jayce_working

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
<<<<<<< HEAD
 800263e:	4817      	ldr	r0, [pc, #92]	@ (800269c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002640:	f7ff ff5e 	bl	8002500 <LL_ADC_IsEnabled>
 8002644:	4604      	mov	r4, r0
 8002646:	4816      	ldr	r0, [pc, #88]	@ (80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002648:	f7ff ff5a 	bl	8002500 <LL_ADC_IsEnabled>
 800264c:	4603      	mov	r3, r0
 800264e:	431c      	orrs	r4, r3
 8002650:	4815      	ldr	r0, [pc, #84]	@ (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002652:	f7ff ff55 	bl	8002500 <LL_ADC_IsEnabled>
 8002656:	4603      	mov	r3, r0
 8002658:	4323      	orrs	r3, r4
 800265a:	2b00      	cmp	r3, #0
 800265c:	d112      	bne.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800265e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002666:	f023 030f 	bic.w	r3, r3, #15
 800266a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800266c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800266e:	e009      	b.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x138>
=======
 8002e46:	4817      	ldr	r0, [pc, #92]	@ (8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e48:	f7ff ff5d 	bl	8002d06 <LL_ADC_IsEnabled>
 8002e4c:	4604      	mov	r4, r0
 8002e4e:	4816      	ldr	r0, [pc, #88]	@ (8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e50:	f7ff ff59 	bl	8002d06 <LL_ADC_IsEnabled>
 8002e54:	4603      	mov	r3, r0
 8002e56:	431c      	orrs	r4, r3
 8002e58:	4815      	ldr	r0, [pc, #84]	@ (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e5a:	f7ff ff54 	bl	8002d06 <LL_ADC_IsEnabled>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4323      	orrs	r3, r4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d112      	bne.n	8002e8c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e6e:	f023 030f 	bic.w	r3, r3, #15
 8002e72:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002e74:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e76:	e009      	b.n	8002e8c <HAL_ADCEx_MultiModeConfigChannel+0x138>
>>>>>>> remotes/origin/jayce_working
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002674:	f043 0220 	orr.w	r2, r3, #32
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002682:	e000      	b.n	8002686 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002684:	bf00      	nop
=======
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002e8a:	e000      	b.n	8002e8e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e8c:	bf00      	nop
>>>>>>> remotes/origin/jayce_working
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800268e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002692:	4618      	mov	r0, r3
 8002694:	3784      	adds	r7, #132	@ 0x84
 8002696:	46bd      	mov	sp, r7
 8002698:	bd90      	pop	{r4, r7, pc}
 800269a:	bf00      	nop
 800269c:	50040000 	.word	0x50040000
 80026a0:	50040100 	.word	0x50040100
 80026a4:	50040300 	.word	0x50040300
 80026a8:	50040200 	.word	0x50040200

080026ac <HAL_CAN_Init>:
=======
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002e96:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3784      	adds	r7, #132	@ 0x84
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd90      	pop	{r4, r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	50040000 	.word	0x50040000
 8002ea8:	50040100 	.word	0x50040100
 8002eac:	50040300 	.word	0x50040300
 8002eb0:	50040200 	.word	0x50040200

08002eb4 <HAL_CAN_Init>:
>>>>>>> remotes/origin/jayce_working
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
=======
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
<<<<<<< HEAD
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0ed      	b.n	800289a <HAL_CAN_Init+0x1ee>
=======
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0ed      	b.n	80030a2 <HAL_CAN_Init+0x1ee>
>>>>>>> remotes/origin/jayce_working
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
<<<<<<< HEAD
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d102      	bne.n	80026d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7fe fd78 	bl	80011c0 <HAL_CAN_MspInit>
=======
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d102      	bne.n	8002ed8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe f982 	bl	80011dc <HAL_CAN_MspInit>
>>>>>>> remotes/origin/jayce_working
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
<<<<<<< HEAD
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026e0:	f7ff f802 	bl	80016e8 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026e6:	e012      	b.n	800270e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026e8:	f7fe fffe 	bl	80016e8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b0a      	cmp	r3, #10
 80026f4:	d90b      	bls.n	800270e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2205      	movs	r2, #5
 8002706:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e0c5      	b.n	800289a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0e5      	beq.n	80026e8 <HAL_CAN_Init+0x3c>
=======
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ee8:	f7fe fc04 	bl	80016f4 <HAL_GetTick>
 8002eec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002eee:	e012      	b.n	8002f16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ef0:	f7fe fc00 	bl	80016f4 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b0a      	cmp	r3, #10
 8002efc:	d90b      	bls.n	8002f16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2205      	movs	r2, #5
 8002f0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e0c5      	b.n	80030a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0e5      	beq.n	8002ef0 <HAL_CAN_Init+0x3c>
>>>>>>> remotes/origin/jayce_working
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
<<<<<<< HEAD
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0202 	bic.w	r2, r2, #2
 800272a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800272c:	f7fe ffdc 	bl	80016e8 <HAL_GetTick>
 8002730:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002732:	e012      	b.n	800275a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002734:	f7fe ffd8 	bl	80016e8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b0a      	cmp	r3, #10
 8002740:	d90b      	bls.n	800275a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2205      	movs	r2, #5
 8002752:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e09f      	b.n	800289a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e5      	bne.n	8002734 <HAL_CAN_Init+0x88>
=======
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0202 	bic.w	r2, r2, #2
 8002f32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f34:	f7fe fbde 	bl	80016f4 <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f3a:	e012      	b.n	8002f62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f3c:	f7fe fbda 	bl	80016f4 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b0a      	cmp	r3, #10
 8002f48:	d90b      	bls.n	8002f62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2205      	movs	r2, #5
 8002f5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e09f      	b.n	80030a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e5      	bne.n	8002f3c <HAL_CAN_Init+0x88>
>>>>>>> remotes/origin/jayce_working
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
<<<<<<< HEAD
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7e1b      	ldrb	r3, [r3, #24]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d108      	bne.n	8002782 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e007      	b.n	8002792 <HAL_CAN_Init+0xe6>
=======
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	7e1b      	ldrb	r3, [r3, #24]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d108      	bne.n	8002f8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	e007      	b.n	8002f9a <HAL_CAN_Init+0xe6>
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
<<<<<<< HEAD
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002790:	601a      	str	r2, [r3, #0]
=======
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f98:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
<<<<<<< HEAD
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	7e5b      	ldrb	r3, [r3, #25]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d108      	bne.n	80027ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e007      	b.n	80027bc <HAL_CAN_Init+0x110>
=======
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	7e5b      	ldrb	r3, [r3, #25]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d108      	bne.n	8002fb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e007      	b.n	8002fc4 <HAL_CAN_Init+0x110>
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
<<<<<<< HEAD
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027ba:	601a      	str	r2, [r3, #0]
=======
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fc2:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
<<<<<<< HEAD
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7e9b      	ldrb	r3, [r3, #26]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d108      	bne.n	80027d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0220 	orr.w	r2, r2, #32
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e007      	b.n	80027e6 <HAL_CAN_Init+0x13a>
=======
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7e9b      	ldrb	r3, [r3, #26]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d108      	bne.n	8002fde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0220 	orr.w	r2, r2, #32
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	e007      	b.n	8002fee <HAL_CAN_Init+0x13a>
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
<<<<<<< HEAD
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0220 	bic.w	r2, r2, #32
 80027e4:	601a      	str	r2, [r3, #0]
=======
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0220 	bic.w	r2, r2, #32
 8002fec:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
<<<<<<< HEAD
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	7edb      	ldrb	r3, [r3, #27]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d108      	bne.n	8002800 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0210 	bic.w	r2, r2, #16
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	e007      	b.n	8002810 <HAL_CAN_Init+0x164>
=======
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	7edb      	ldrb	r3, [r3, #27]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d108      	bne.n	8003008 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0210 	bic.w	r2, r2, #16
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e007      	b.n	8003018 <HAL_CAN_Init+0x164>
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
<<<<<<< HEAD
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0210 	orr.w	r2, r2, #16
 800280e:	601a      	str	r2, [r3, #0]
=======
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0210 	orr.w	r2, r2, #16
 8003016:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
<<<<<<< HEAD
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7f1b      	ldrb	r3, [r3, #28]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d108      	bne.n	800282a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0208 	orr.w	r2, r2, #8
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	e007      	b.n	800283a <HAL_CAN_Init+0x18e>
=======
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	7f1b      	ldrb	r3, [r3, #28]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d108      	bne.n	8003032 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0208 	orr.w	r2, r2, #8
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e007      	b.n	8003042 <HAL_CAN_Init+0x18e>
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
<<<<<<< HEAD
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0208 	bic.w	r2, r2, #8
 8002838:	601a      	str	r2, [r3, #0]
=======
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0208 	bic.w	r2, r2, #8
 8003040:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
<<<<<<< HEAD
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	7f5b      	ldrb	r3, [r3, #29]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d108      	bne.n	8002854 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0204 	orr.w	r2, r2, #4
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e007      	b.n	8002864 <HAL_CAN_Init+0x1b8>
=======
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	7f5b      	ldrb	r3, [r3, #29]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d108      	bne.n	800305c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0204 	orr.w	r2, r2, #4
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e007      	b.n	800306c <HAL_CAN_Init+0x1b8>
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
<<<<<<< HEAD
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0204 	bic.w	r2, r2, #4
 8002862:	601a      	str	r2, [r3, #0]
=======
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0204 	bic.w	r2, r2, #4
 800306a:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
<<<<<<< HEAD
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	ea42 0103 	orr.w	r1, r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	1e5a      	subs	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	61da      	str	r2, [r3, #28]
=======
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	ea42 0103 	orr.w	r1, r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	1e5a      	subs	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	61da      	str	r2, [r3, #28]
>>>>>>> remotes/origin/jayce_working
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< HEAD
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d12e      	bne.n	8002914 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0201 	bic.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028ce:	f7fe ff0b 	bl	80016e8 <HAL_GetTick>
 80028d2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028d4:	e012      	b.n	80028fc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028d6:	f7fe ff07 	bl	80016e8 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b0a      	cmp	r3, #10
 80028e2:	d90b      	bls.n	80028fc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2205      	movs	r2, #5
 80028f4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e012      	b.n	8002922 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1e5      	bne.n	80028d6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e006      	b.n	8002922 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
  }
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800292a:	b480      	push	{r7}
 800292c:	b089      	sub	sp, #36	@ 0x24
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800293e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002948:	7ffb      	ldrb	r3, [r7, #31]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d003      	beq.n	8002956 <HAL_CAN_AddTxMessage+0x2c>
 800294e:	7ffb      	ldrb	r3, [r7, #31]
 8002950:	2b02      	cmp	r3, #2
 8002952:	f040 80ad 	bne.w	8002ab0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8095 	beq.w	8002aa0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	0e1b      	lsrs	r3, r3, #24
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002980:	2201      	movs	r2, #1
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	409a      	lsls	r2, r3
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10d      	bne.n	80029ae <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800299c:	68f9      	ldr	r1, [r7, #12]
 800299e:	6809      	ldr	r1, [r1, #0]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	3318      	adds	r3, #24
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	440b      	add	r3, r1
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	e00f      	b.n	80029ce <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029b8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029be:	68f9      	ldr	r1, [r7, #12]
 80029c0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80029c2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	3318      	adds	r3, #24
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	440b      	add	r3, r1
 80029cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6819      	ldr	r1, [r3, #0]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	3318      	adds	r3, #24
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	440b      	add	r3, r1
 80029de:	3304      	adds	r3, #4
 80029e0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	7d1b      	ldrb	r3, [r3, #20]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d111      	bne.n	8002a0e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	3318      	adds	r3, #24
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	4413      	add	r3, r2
 80029f6:	3304      	adds	r3, #4
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	6811      	ldr	r1, [r2, #0]
 80029fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3318      	adds	r3, #24
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	440b      	add	r3, r1
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3307      	adds	r3, #7
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	061a      	lsls	r2, r3, #24
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3306      	adds	r3, #6
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	041b      	lsls	r3, r3, #16
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3305      	adds	r3, #5
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	3204      	adds	r2, #4
 8002a2e:	7812      	ldrb	r2, [r2, #0]
 8002a30:	4610      	mov	r0, r2
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	6811      	ldr	r1, [r2, #0]
 8002a36:	ea43 0200 	orr.w	r2, r3, r0
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	440b      	add	r3, r1
 8002a40:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002a44:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3303      	adds	r3, #3
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	061a      	lsls	r2, r3, #24
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3302      	adds	r3, #2
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	041b      	lsls	r3, r3, #16
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	4313      	orrs	r3, r2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	7812      	ldrb	r2, [r2, #0]
 8002a66:	4610      	mov	r0, r2
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	6811      	ldr	r1, [r2, #0]
 8002a6c:	ea43 0200 	orr.w	r2, r3, r0
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	440b      	add	r3, r1
 8002a76:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002a7a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	3318      	adds	r3, #24
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	4413      	add	r3, r2
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	6811      	ldr	r1, [r2, #0]
 8002a8e:	f043 0201 	orr.w	r2, r3, #1
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	3318      	adds	r3, #24
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	440b      	add	r3, r1
 8002a9a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	e00e      	b.n	8002abe <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e006      	b.n	8002abe <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
  }
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3724      	adds	r7, #36	@ 0x24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <__NVIC_SetPriorityGrouping>:
=======
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <__NVIC_SetPriorityGrouping>:
>>>>>>> remotes/origin/jayce_working
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002adc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <__NVIC_SetPriorityGrouping+0x44>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ae8:	4013      	ands	r3, r2
 8002aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002afe:	4a04      	ldr	r2, [pc, #16]	@ (8002b10 <__NVIC_SetPriorityGrouping+0x44>)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	60d3      	str	r3, [r2, #12]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <__NVIC_GetPriorityGrouping>:
=======
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030bc:	4b0c      	ldr	r3, [pc, #48]	@ (80030f0 <__NVIC_SetPriorityGrouping+0x44>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030c8:	4013      	ands	r3, r2
 80030ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030de:	4a04      	ldr	r2, [pc, #16]	@ (80030f0 <__NVIC_SetPriorityGrouping+0x44>)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	60d3      	str	r3, [r2, #12]
}
 80030e4:	bf00      	nop
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <__NVIC_GetPriorityGrouping>:
>>>>>>> remotes/origin/jayce_working
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b18:	4b04      	ldr	r3, [pc, #16]	@ (8002b2c <__NVIC_GetPriorityGrouping+0x18>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	f003 0307 	and.w	r3, r3, #7
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_EnableIRQ>:
=======
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f8:	4b04      	ldr	r3, [pc, #16]	@ (800310c <__NVIC_GetPriorityGrouping+0x18>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	0a1b      	lsrs	r3, r3, #8
 80030fe:	f003 0307 	and.w	r3, r3, #7
}
 8003102:	4618      	mov	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <__NVIC_EnableIRQ>:
>>>>>>> remotes/origin/jayce_working
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	db0b      	blt.n	8002b5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	4907      	ldr	r1, [pc, #28]	@ (8002b68 <__NVIC_EnableIRQ+0x38>)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	2001      	movs	r0, #1
 8002b52:	fa00 f202 	lsl.w	r2, r0, r2
 8002b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	e000e100 	.word	0xe000e100

08002b6c <__NVIC_SetPriority>:
=======
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	2b00      	cmp	r3, #0
 8003120:	db0b      	blt.n	800313a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	f003 021f 	and.w	r2, r3, #31
 8003128:	4907      	ldr	r1, [pc, #28]	@ (8003148 <__NVIC_EnableIRQ+0x38>)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	2001      	movs	r0, #1
 8003132:	fa00 f202 	lsl.w	r2, r0, r2
 8003136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	e000e100 	.word	0xe000e100

0800314c <__NVIC_SetPriority>:
>>>>>>> remotes/origin/jayce_working
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	6039      	str	r1, [r7, #0]
 8002b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	db0a      	blt.n	8002b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	490c      	ldr	r1, [pc, #48]	@ (8002bb8 <__NVIC_SetPriority+0x4c>)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	0112      	lsls	r2, r2, #4
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	440b      	add	r3, r1
 8002b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	6039      	str	r1, [r7, #0]
 8003156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315c:	2b00      	cmp	r3, #0
 800315e:	db0a      	blt.n	8003176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	b2da      	uxtb	r2, r3
 8003164:	490c      	ldr	r1, [pc, #48]	@ (8003198 <__NVIC_SetPriority+0x4c>)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	0112      	lsls	r2, r2, #4
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	440b      	add	r3, r1
 8003170:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8002b94:	e00a      	b.n	8002bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	4908      	ldr	r1, [pc, #32]	@ (8002bbc <__NVIC_SetPriority+0x50>)
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	3b04      	subs	r3, #4
 8002ba4:	0112      	lsls	r2, r2, #4
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	440b      	add	r3, r1
 8002baa:	761a      	strb	r2, [r3, #24]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000e100 	.word	0xe000e100
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <NVIC_EncodePriority>:
=======
 8003174:	e00a      	b.n	800318c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	b2da      	uxtb	r2, r3
 800317a:	4908      	ldr	r1, [pc, #32]	@ (800319c <__NVIC_SetPriority+0x50>)
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	3b04      	subs	r3, #4
 8003184:	0112      	lsls	r2, r2, #4
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	440b      	add	r3, r1
 800318a:	761a      	strb	r2, [r3, #24]
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	e000e100 	.word	0xe000e100
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <NVIC_EncodePriority>:
>>>>>>> remotes/origin/jayce_working
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	@ 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	61fb      	str	r3, [r7, #28]
=======
 80031a0:	b480      	push	{r7}
 80031a2:	b089      	sub	sp, #36	@ 0x24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	61fb      	str	r3, [r7, #28]
>>>>>>> remotes/origin/jayce_working
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f1c3 0307 	rsb	r3, r3, #7
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	bf28      	it	cs
 8002bde:	2304      	movcs	r3, #4
 8002be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3304      	adds	r3, #4
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d902      	bls.n	8002bf0 <NVIC_EncodePriority+0x30>
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3b03      	subs	r3, #3
 8002bee:	e000      	b.n	8002bf2 <NVIC_EncodePriority+0x32>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	401a      	ands	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c12:	43d9      	mvns	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	4313      	orrs	r3, r2
         );
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3724      	adds	r7, #36	@ 0x24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <HAL_NVIC_SetPriorityGrouping>:
=======
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f1c3 0307 	rsb	r3, r3, #7
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	bf28      	it	cs
 80031be:	2304      	movcs	r3, #4
 80031c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3304      	adds	r3, #4
 80031c6:	2b06      	cmp	r3, #6
 80031c8:	d902      	bls.n	80031d0 <NVIC_EncodePriority+0x30>
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3b03      	subs	r3, #3
 80031ce:	e000      	b.n	80031d2 <NVIC_EncodePriority+0x32>
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d4:	f04f 32ff 	mov.w	r2, #4294967295
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43da      	mvns	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	401a      	ands	r2, r3
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e8:	f04f 31ff 	mov.w	r1, #4294967295
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	fa01 f303 	lsl.w	r3, r1, r3
 80031f2:	43d9      	mvns	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f8:	4313      	orrs	r3, r2
         );
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3724      	adds	r7, #36	@ 0x24
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> remotes/origin/jayce_working
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
=======
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff ff4c 	bl	8002acc <__NVIC_SetPriorityGrouping>
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_NVIC_SetPriority>:
=======
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff ff4c 	bl	80030ac <__NVIC_SetPriorityGrouping>
}
 8003214:	bf00      	nop
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_NVIC_SetPriority>:
>>>>>>> remotes/origin/jayce_working
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
=======
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
>>>>>>> remotes/origin/jayce_working

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002c4e:	f7ff ff61 	bl	8002b14 <__NVIC_GetPriorityGrouping>
 8002c52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	68b9      	ldr	r1, [r7, #8]
 8002c58:	6978      	ldr	r0, [r7, #20]
 8002c5a:	f7ff ffb1 	bl	8002bc0 <NVIC_EncodePriority>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff ff80 	bl	8002b6c <__NVIC_SetPriority>
}
 8002c6c:	bf00      	nop
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_NVIC_EnableIRQ>:
=======
 800322e:	f7ff ff61 	bl	80030f4 <__NVIC_GetPriorityGrouping>
 8003232:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	6978      	ldr	r0, [r7, #20]
 800323a:	f7ff ffb1 	bl	80031a0 <NVIC_EncodePriority>
 800323e:	4602      	mov	r2, r0
 8003240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003244:	4611      	mov	r1, r2
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff ff80 	bl	800314c <__NVIC_SetPriority>
}
 800324c:	bf00      	nop
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_NVIC_EnableIRQ>:
>>>>>>> remotes/origin/jayce_working
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
=======
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]
>>>>>>> remotes/origin/jayce_working
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff ff54 	bl	8002b30 <__NVIC_EnableIRQ>
}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_DMA_Abort>:
=======
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff ff54 	bl	8003110 <__NVIC_EnableIRQ>
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e098      	b.n	80033b4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	4b4d      	ldr	r3, [pc, #308]	@ (80033c0 <HAL_DMA_Init+0x150>)
 800328a:	429a      	cmp	r2, r3
 800328c:	d80f      	bhi.n	80032ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	4b4b      	ldr	r3, [pc, #300]	@ (80033c4 <HAL_DMA_Init+0x154>)
 8003296:	4413      	add	r3, r2
 8003298:	4a4b      	ldr	r2, [pc, #300]	@ (80033c8 <HAL_DMA_Init+0x158>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	009a      	lsls	r2, r3, #2
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a48      	ldr	r2, [pc, #288]	@ (80033cc <HAL_DMA_Init+0x15c>)
 80032aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80032ac:	e00e      	b.n	80032cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	4b46      	ldr	r3, [pc, #280]	@ (80033d0 <HAL_DMA_Init+0x160>)
 80032b6:	4413      	add	r3, r2
 80032b8:	4a43      	ldr	r2, [pc, #268]	@ (80033c8 <HAL_DMA_Init+0x158>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	009a      	lsls	r2, r3, #2
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a42      	ldr	r2, [pc, #264]	@ (80033d4 <HAL_DMA_Init+0x164>)
 80032ca:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80032e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80032f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003326:	d039      	beq.n	800339c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332c:	4a27      	ldr	r2, [pc, #156]	@ (80033cc <HAL_DMA_Init+0x15c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d11a      	bne.n	8003368 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003332:	4b29      	ldr	r3, [pc, #164]	@ (80033d8 <HAL_DMA_Init+0x168>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333a:	f003 031c 	and.w	r3, r3, #28
 800333e:	210f      	movs	r1, #15
 8003340:	fa01 f303 	lsl.w	r3, r1, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	4924      	ldr	r1, [pc, #144]	@ (80033d8 <HAL_DMA_Init+0x168>)
 8003348:	4013      	ands	r3, r2
 800334a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800334c:	4b22      	ldr	r3, [pc, #136]	@ (80033d8 <HAL_DMA_Init+0x168>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003358:	f003 031c 	and.w	r3, r3, #28
 800335c:	fa01 f303 	lsl.w	r3, r1, r3
 8003360:	491d      	ldr	r1, [pc, #116]	@ (80033d8 <HAL_DMA_Init+0x168>)
 8003362:	4313      	orrs	r3, r2
 8003364:	600b      	str	r3, [r1, #0]
 8003366:	e019      	b.n	800339c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003368:	4b1c      	ldr	r3, [pc, #112]	@ (80033dc <HAL_DMA_Init+0x16c>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003370:	f003 031c 	and.w	r3, r3, #28
 8003374:	210f      	movs	r1, #15
 8003376:	fa01 f303 	lsl.w	r3, r1, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	4917      	ldr	r1, [pc, #92]	@ (80033dc <HAL_DMA_Init+0x16c>)
 800337e:	4013      	ands	r3, r2
 8003380:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003382:	4b16      	ldr	r3, [pc, #88]	@ (80033dc <HAL_DMA_Init+0x16c>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6859      	ldr	r1, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	f003 031c 	and.w	r3, r3, #28
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	4911      	ldr	r1, [pc, #68]	@ (80033dc <HAL_DMA_Init+0x16c>)
 8003398:	4313      	orrs	r3, r2
 800339a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40020407 	.word	0x40020407
 80033c4:	bffdfff8 	.word	0xbffdfff8
 80033c8:	cccccccd 	.word	0xcccccccd
 80033cc:	40020000 	.word	0x40020000
 80033d0:	bffdfbf8 	.word	0xbffdfbf8
 80033d4:	40020400 	.word	0x40020400
 80033d8:	400200a8 	.word	0x400200a8
 80033dc:	400204a8 	.word	0x400204a8

080033e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_DMA_Start_IT+0x20>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e04b      	b.n	8003498 <HAL_DMA_Start_IT+0xb8>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b01      	cmp	r3, #1
 8003412:	d13a      	bne.n	800348a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0201 	bic.w	r2, r2, #1
 8003430:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f95f 	bl	80036fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003442:	2b00      	cmp	r3, #0
 8003444:	d008      	beq.n	8003458 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 020e 	orr.w	r2, r2, #14
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	e00f      	b.n	8003478 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0204 	bic.w	r2, r2, #4
 8003466:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 020a 	orr.w	r2, r2, #10
 8003476:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e005      	b.n	8003496 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003492:	2302      	movs	r3, #2
 8003494:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003496:	7dfb      	ldrb	r3, [r7, #23]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_DMA_Abort>:
>>>>>>> remotes/origin/jayce_working
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d008      	beq.n	8002cba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2204      	movs	r2, #4
 8002cac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e022      	b.n	8002d00 <HAL_DMA_Abort+0x70>
=======
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d008      	beq.n	80034ca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2204      	movs	r2, #4
 80034bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e022      	b.n	8003510 <HAL_DMA_Abort+0x70>
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 020e 	bic.w	r2, r2, #14
 8002cc8:	601a      	str	r2, [r3, #0]
=======
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 020e 	bic.w	r2, r2, #14
 80034d8:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cde:	f003 021c 	and.w	r2, r3, #28
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cec:	605a      	str	r2, [r3, #4]
=======
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0201 	bic.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ee:	f003 021c 	and.w	r2, r3, #28
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	2101      	movs	r1, #1
 80034f8:	fa01 f202 	lsl.w	r2, r1, r2
 80034fc:	605a      	str	r2, [r3, #4]
>>>>>>> remotes/origin/jayce_working
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_DMA_Abort_IT>:
=======
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003510:	4618      	mov	r0, r3
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_DMA_Abort_IT>:
>>>>>>> remotes/origin/jayce_working
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d005      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2204      	movs	r2, #4
 8002d28:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
 8002d2e:	e029      	b.n	8002d84 <HAL_DMA_Abort_IT+0x78>
=======
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d005      	beq.n	8003540 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2204      	movs	r2, #4
 8003538:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
 800353e:	e029      	b.n	8003594 <HAL_DMA_Abort_IT+0x78>
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 020e 	bic.w	r2, r2, #14
 8002d3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
=======
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 020e 	bic.w	r2, r2, #14
 800354e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
<<<<<<< HEAD
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d54:	f003 021c 	and.w	r2, r3, #28
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d62:	605a      	str	r2, [r3, #4]
=======
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003564:	f003 021c 	and.w	r2, r3, #28
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f202 	lsl.w	r2, r1, r2
 8003572:	605a      	str	r2, [r3, #4]
>>>>>>> remotes/origin/jayce_working
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
    }
  }
  return status;
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <HAL_GPIO_Init>:
=======
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	4798      	blx	r3
    }
  }
  return status;
 8003594:	7bfb      	ldrb	r3, [r7, #15]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ba:	f003 031c 	and.w	r3, r3, #28
 80035be:	2204      	movs	r2, #4
 80035c0:	409a      	lsls	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d026      	beq.n	8003618 <HAL_DMA_IRQHandler+0x7a>
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d021      	beq.n	8003618 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d107      	bne.n	80035f2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0204 	bic.w	r2, r2, #4
 80035f0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f6:	f003 021c 	and.w	r2, r3, #28
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	2104      	movs	r1, #4
 8003600:	fa01 f202 	lsl.w	r2, r1, r2
 8003604:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	2b00      	cmp	r3, #0
 800360c:	d071      	beq.n	80036f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003616:	e06c      	b.n	80036f2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361c:	f003 031c 	and.w	r3, r3, #28
 8003620:	2202      	movs	r2, #2
 8003622:	409a      	lsls	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d02e      	beq.n	800368a <HAL_DMA_IRQHandler+0xec>
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d029      	beq.n	800368a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0320 	and.w	r3, r3, #32
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10b      	bne.n	800365c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 020a 	bic.w	r2, r2, #10
 8003652:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003660:	f003 021c 	and.w	r2, r3, #28
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003668:	2102      	movs	r1, #2
 800366a:	fa01 f202 	lsl.w	r2, r1, r2
 800366e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d038      	beq.n	80036f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003688:	e033      	b.n	80036f2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f003 031c 	and.w	r3, r3, #28
 8003692:	2208      	movs	r2, #8
 8003694:	409a      	lsls	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d02a      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x156>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d025      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 020e 	bic.w	r2, r2, #14
 80036b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036bc:	f003 021c 	and.w	r2, r3, #28
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c4:	2101      	movs	r1, #1
 80036c6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d004      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036f2:	bf00      	nop
 80036f4:	bf00      	nop
}
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370e:	f003 021c 	and.w	r2, r3, #28
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	2101      	movs	r1, #1
 8003718:	fa01 f202 	lsl.w	r2, r1, r2
 800371c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b10      	cmp	r3, #16
 800372c:	d108      	bne.n	8003740 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800373e:	e007      	b.n	8003750 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	60da      	str	r2, [r3, #12]
}
 8003750:	bf00      	nop
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_GPIO_Init>:
>>>>>>> remotes/origin/jayce_working
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
=======
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
>>>>>>> remotes/origin/jayce_working
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8002d9e:	e166      	b.n	800306e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	2101      	movs	r1, #1
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	4013      	ands	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8158 	beq.w	8003068 <HAL_GPIO_Init+0x2d8>
=======
 800376a:	e166      	b.n	8003a3a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	2101      	movs	r1, #1
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	fa01 f303 	lsl.w	r3, r1, r3
 8003778:	4013      	ands	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8158 	beq.w	8003a34 <HAL_GPIO_Init+0x2d8>
>>>>>>> remotes/origin/jayce_working
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< HEAD
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d005      	beq.n	8002dd0 <HAL_GPIO_Init+0x40>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d130      	bne.n	8002e32 <HAL_GPIO_Init+0xa2>
=======
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	2b01      	cmp	r3, #1
 800378e:	d005      	beq.n	800379c <HAL_GPIO_Init+0x40>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d130      	bne.n	80037fe <HAL_GPIO_Init+0xa2>
>>>>>>> remotes/origin/jayce_working
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< HEAD
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2203      	movs	r2, #3
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e06:	2201      	movs	r2, #1
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	091b      	lsrs	r3, r3, #4
 8002e1c:	f003 0201 	and.w	r2, r3, #1
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	605a      	str	r2, [r3, #4]
=======
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2203      	movs	r2, #3
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037d2:	2201      	movs	r2, #1
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	f003 0201 	and.w	r2, r3, #1
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	605a      	str	r2, [r3, #4]
>>>>>>> remotes/origin/jayce_working
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
<<<<<<< HEAD
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d017      	beq.n	8002e6e <HAL_GPIO_Init+0xde>
=======
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b03      	cmp	r3, #3
 8003808:	d017      	beq.n	800383a <HAL_GPIO_Init+0xde>
>>>>>>> remotes/origin/jayce_working
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	2203      	movs	r2, #3
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4013      	ands	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	60da      	str	r2, [r3, #12]
=======
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	2203      	movs	r2, #3
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	60da      	str	r2, [r3, #12]
>>>>>>> remotes/origin/jayce_working
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d123      	bne.n	8002ec2 <HAL_GPIO_Init+0x132>
=======
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d123      	bne.n	800388e <HAL_GPIO_Init+0x132>
>>>>>>> remotes/origin/jayce_working
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
<<<<<<< HEAD
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	08da      	lsrs	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3208      	adds	r2, #8
 8002e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	220f      	movs	r2, #15
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	08da      	lsrs	r2, r3, #3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3208      	adds	r2, #8
 8002ebc:	6939      	ldr	r1, [r7, #16]
 8002ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	08da      	lsrs	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3208      	adds	r2, #8
 800384e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003852:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	220f      	movs	r2, #15
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	08da      	lsrs	r2, r3, #3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3208      	adds	r2, #8
 8003888:	6939      	ldr	r1, [r7, #16]
 800388a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> remotes/origin/jayce_working
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	2203      	movs	r2, #3
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 0203 	and.w	r2, r3, #3
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	601a      	str	r2, [r3, #0]
=======
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	2203      	movs	r2, #3
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0203 	and.w	r2, r3, #3
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< HEAD
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 80b2 	beq.w	8003068 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f04:	4b61      	ldr	r3, [pc, #388]	@ (800308c <HAL_GPIO_Init+0x2fc>)
 8002f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f08:	4a60      	ldr	r2, [pc, #384]	@ (800308c <HAL_GPIO_Init+0x2fc>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f10:	4b5e      	ldr	r3, [pc, #376]	@ (800308c <HAL_GPIO_Init+0x2fc>)
 8002f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f1c:	4a5c      	ldr	r2, [pc, #368]	@ (8003090 <HAL_GPIO_Init+0x300>)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	089b      	lsrs	r3, r3, #2
 8002f22:	3302      	adds	r3, #2
 8002f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	220f      	movs	r2, #15
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f46:	d02b      	beq.n	8002fa0 <HAL_GPIO_Init+0x210>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a52      	ldr	r2, [pc, #328]	@ (8003094 <HAL_GPIO_Init+0x304>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d025      	beq.n	8002f9c <HAL_GPIO_Init+0x20c>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a51      	ldr	r2, [pc, #324]	@ (8003098 <HAL_GPIO_Init+0x308>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d01f      	beq.n	8002f98 <HAL_GPIO_Init+0x208>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a50      	ldr	r2, [pc, #320]	@ (800309c <HAL_GPIO_Init+0x30c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d019      	beq.n	8002f94 <HAL_GPIO_Init+0x204>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a4f      	ldr	r2, [pc, #316]	@ (80030a0 <HAL_GPIO_Init+0x310>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d013      	beq.n	8002f90 <HAL_GPIO_Init+0x200>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a4e      	ldr	r2, [pc, #312]	@ (80030a4 <HAL_GPIO_Init+0x314>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d00d      	beq.n	8002f8c <HAL_GPIO_Init+0x1fc>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a4d      	ldr	r2, [pc, #308]	@ (80030a8 <HAL_GPIO_Init+0x318>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d007      	beq.n	8002f88 <HAL_GPIO_Init+0x1f8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a4c      	ldr	r2, [pc, #304]	@ (80030ac <HAL_GPIO_Init+0x31c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d101      	bne.n	8002f84 <HAL_GPIO_Init+0x1f4>
 8002f80:	2307      	movs	r3, #7
 8002f82:	e00e      	b.n	8002fa2 <HAL_GPIO_Init+0x212>
 8002f84:	2308      	movs	r3, #8
 8002f86:	e00c      	b.n	8002fa2 <HAL_GPIO_Init+0x212>
 8002f88:	2306      	movs	r3, #6
 8002f8a:	e00a      	b.n	8002fa2 <HAL_GPIO_Init+0x212>
 8002f8c:	2305      	movs	r3, #5
 8002f8e:	e008      	b.n	8002fa2 <HAL_GPIO_Init+0x212>
 8002f90:	2304      	movs	r3, #4
 8002f92:	e006      	b.n	8002fa2 <HAL_GPIO_Init+0x212>
 8002f94:	2303      	movs	r3, #3
 8002f96:	e004      	b.n	8002fa2 <HAL_GPIO_Init+0x212>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e002      	b.n	8002fa2 <HAL_GPIO_Init+0x212>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <HAL_GPIO_Init+0x212>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	f002 0203 	and.w	r2, r2, #3
 8002fa8:	0092      	lsls	r2, r2, #2
 8002faa:	4093      	lsls	r3, r2
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fb2:	4937      	ldr	r1, [pc, #220]	@ (8003090 <HAL_GPIO_Init+0x300>)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	3302      	adds	r3, #2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80030b0 <HAL_GPIO_Init+0x320>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fe4:	4a32      	ldr	r2, [pc, #200]	@ (80030b0 <HAL_GPIO_Init+0x320>)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fea:	4b31      	ldr	r3, [pc, #196]	@ (80030b0 <HAL_GPIO_Init+0x320>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800300e:	4a28      	ldr	r2, [pc, #160]	@ (80030b0 <HAL_GPIO_Init+0x320>)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003014:	4b26      	ldr	r3, [pc, #152]	@ (80030b0 <HAL_GPIO_Init+0x320>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	43db      	mvns	r3, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003038:	4a1d      	ldr	r2, [pc, #116]	@ (80030b0 <HAL_GPIO_Init+0x320>)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800303e:	4b1c      	ldr	r3, [pc, #112]	@ (80030b0 <HAL_GPIO_Init+0x320>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	43db      	mvns	r3, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4013      	ands	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003062:	4a13      	ldr	r2, [pc, #76]	@ (80030b0 <HAL_GPIO_Init+0x320>)
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	6013      	str	r3, [r2, #0]
=======
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 80b2 	beq.w	8003a34 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d0:	4b61      	ldr	r3, [pc, #388]	@ (8003a58 <HAL_GPIO_Init+0x2fc>)
 80038d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d4:	4a60      	ldr	r2, [pc, #384]	@ (8003a58 <HAL_GPIO_Init+0x2fc>)
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	6613      	str	r3, [r2, #96]	@ 0x60
 80038dc:	4b5e      	ldr	r3, [pc, #376]	@ (8003a58 <HAL_GPIO_Init+0x2fc>)
 80038de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	60bb      	str	r3, [r7, #8]
 80038e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038e8:	4a5c      	ldr	r2, [pc, #368]	@ (8003a5c <HAL_GPIO_Init+0x300>)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	3302      	adds	r3, #2
 80038f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	220f      	movs	r2, #15
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003912:	d02b      	beq.n	800396c <HAL_GPIO_Init+0x210>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a52      	ldr	r2, [pc, #328]	@ (8003a60 <HAL_GPIO_Init+0x304>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d025      	beq.n	8003968 <HAL_GPIO_Init+0x20c>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a51      	ldr	r2, [pc, #324]	@ (8003a64 <HAL_GPIO_Init+0x308>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d01f      	beq.n	8003964 <HAL_GPIO_Init+0x208>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a50      	ldr	r2, [pc, #320]	@ (8003a68 <HAL_GPIO_Init+0x30c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d019      	beq.n	8003960 <HAL_GPIO_Init+0x204>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a4f      	ldr	r2, [pc, #316]	@ (8003a6c <HAL_GPIO_Init+0x310>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d013      	beq.n	800395c <HAL_GPIO_Init+0x200>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a4e      	ldr	r2, [pc, #312]	@ (8003a70 <HAL_GPIO_Init+0x314>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00d      	beq.n	8003958 <HAL_GPIO_Init+0x1fc>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a4d      	ldr	r2, [pc, #308]	@ (8003a74 <HAL_GPIO_Init+0x318>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d007      	beq.n	8003954 <HAL_GPIO_Init+0x1f8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a4c      	ldr	r2, [pc, #304]	@ (8003a78 <HAL_GPIO_Init+0x31c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d101      	bne.n	8003950 <HAL_GPIO_Init+0x1f4>
 800394c:	2307      	movs	r3, #7
 800394e:	e00e      	b.n	800396e <HAL_GPIO_Init+0x212>
 8003950:	2308      	movs	r3, #8
 8003952:	e00c      	b.n	800396e <HAL_GPIO_Init+0x212>
 8003954:	2306      	movs	r3, #6
 8003956:	e00a      	b.n	800396e <HAL_GPIO_Init+0x212>
 8003958:	2305      	movs	r3, #5
 800395a:	e008      	b.n	800396e <HAL_GPIO_Init+0x212>
 800395c:	2304      	movs	r3, #4
 800395e:	e006      	b.n	800396e <HAL_GPIO_Init+0x212>
 8003960:	2303      	movs	r3, #3
 8003962:	e004      	b.n	800396e <HAL_GPIO_Init+0x212>
 8003964:	2302      	movs	r3, #2
 8003966:	e002      	b.n	800396e <HAL_GPIO_Init+0x212>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <HAL_GPIO_Init+0x212>
 800396c:	2300      	movs	r3, #0
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	f002 0203 	and.w	r2, r2, #3
 8003974:	0092      	lsls	r2, r2, #2
 8003976:	4093      	lsls	r3, r2
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800397e:	4937      	ldr	r1, [pc, #220]	@ (8003a5c <HAL_GPIO_Init+0x300>)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	3302      	adds	r3, #2
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800398c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a7c <HAL_GPIO_Init+0x320>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	43db      	mvns	r3, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039b0:	4a32      	ldr	r2, [pc, #200]	@ (8003a7c <HAL_GPIO_Init+0x320>)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039b6:	4b31      	ldr	r3, [pc, #196]	@ (8003a7c <HAL_GPIO_Init+0x320>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039da:	4a28      	ldr	r2, [pc, #160]	@ (8003a7c <HAL_GPIO_Init+0x320>)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039e0:	4b26      	ldr	r3, [pc, #152]	@ (8003a7c <HAL_GPIO_Init+0x320>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4013      	ands	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a04:	4a1d      	ldr	r2, [pc, #116]	@ (8003a7c <HAL_GPIO_Init+0x320>)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003a7c <HAL_GPIO_Init+0x320>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4013      	ands	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a2e:	4a13      	ldr	r2, [pc, #76]	@ (8003a7c <HAL_GPIO_Init+0x320>)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	6013      	str	r3, [r2, #0]
>>>>>>> remotes/origin/jayce_working
      }
    }

    position++;
<<<<<<< HEAD
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	3301      	adds	r3, #1
 800306c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	f47f ae91 	bne.w	8002da0 <HAL_GPIO_Init+0x10>
  }
}
 800307e:	bf00      	nop
 8003080:	bf00      	nop
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	40021000 	.word	0x40021000
 8003090:	40010000 	.word	0x40010000
 8003094:	48000400 	.word	0x48000400
 8003098:	48000800 	.word	0x48000800
 800309c:	48000c00 	.word	0x48000c00
 80030a0:	48001000 	.word	0x48001000
 80030a4:	48001400 	.word	0x48001400
 80030a8:	48001800 	.word	0x48001800
 80030ac:	48001c00 	.word	0x48001c00
 80030b0:	40010400 	.word	0x40010400

080030b4 <HAL_GPIO_WritePin>:
=======
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	3301      	adds	r3, #1
 8003a38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f47f ae91 	bne.w	800376c <HAL_GPIO_Init+0x10>
  }
}
 8003a4a:	bf00      	nop
 8003a4c:	bf00      	nop
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	48000400 	.word	0x48000400
 8003a64:	48000800 	.word	0x48000800
 8003a68:	48000c00 	.word	0x48000c00
 8003a6c:	48001000 	.word	0x48001000
 8003a70:	48001400 	.word	0x48001400
 8003a74:	48001800 	.word	0x48001800
 8003a78:	48001c00 	.word	0x48001c00
 8003a7c:	40010400 	.word	0x40010400

08003a80 <HAL_GPIO_WritePin>:
>>>>>>> remotes/origin/jayce_working
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	807b      	strh	r3, [r7, #2]
 80030c0:	4613      	mov	r3, r2
 80030c2:	707b      	strb	r3, [r7, #1]
=======
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	807b      	strh	r3, [r7, #2]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	707b      	strb	r3, [r7, #1]
>>>>>>> remotes/origin/jayce_working
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 80030c4:	787b      	ldrb	r3, [r7, #1]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030ca:	887a      	ldrh	r2, [r7, #2]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	619a      	str	r2, [r3, #24]
=======
 8003a90:	787b      	ldrb	r3, [r7, #1]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a96:	887a      	ldrh	r2, [r7, #2]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	619a      	str	r2, [r3, #24]
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< HEAD
 80030d0:	e002      	b.n	80030d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_GPIO_TogglePin>:
=======
 8003a9c:	e002      	b.n	8003aa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a9e:	887a      	ldrh	r2, [r7, #2]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_GPIO_TogglePin>:
>>>>>>> remotes/origin/jayce_working
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	807b      	strh	r3, [r7, #2]
=======
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	807b      	strh	r3, [r7, #2]
>>>>>>> remotes/origin/jayce_working

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
<<<<<<< HEAD
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030f6:	887a      	ldrh	r2, [r7, #2]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4013      	ands	r3, r2
 80030fc:	041a      	lsls	r2, r3, #16
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	43d9      	mvns	r1, r3
 8003102:	887b      	ldrh	r3, [r7, #2]
 8003104:	400b      	ands	r3, r1
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	619a      	str	r2, [r3, #24]
}
 800310c:	bf00      	nop
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_GPIO_EXTI_IRQHandler>:
=======
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ac2:	887a      	ldrh	r2, [r7, #2]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	041a      	lsls	r2, r3, #16
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	43d9      	mvns	r1, r3
 8003ace:	887b      	ldrh	r3, [r7, #2]
 8003ad0:	400b      	ands	r3, r1
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	619a      	str	r2, [r3, #24]
}
 8003ad8:	bf00      	nop
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> remotes/origin/jayce_working
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003122:	4b08      	ldr	r3, [pc, #32]	@ (8003144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	88fb      	ldrh	r3, [r7, #6]
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d006      	beq.n	800313c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800312e:	4a05      	ldr	r2, [pc, #20]	@ (8003144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd fb82 	bl	8000840 <HAL_GPIO_EXTI_Callback>
  }
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40010400 	.word	0x40010400

08003148 <HAL_I2C_Init>:
=======
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003aee:	4b08      	ldr	r3, [pc, #32]	@ (8003b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	88fb      	ldrh	r3, [r7, #6]
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d006      	beq.n	8003b08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003afa:	4a05      	ldr	r2, [pc, #20]	@ (8003b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b00:	88fb      	ldrh	r3, [r7, #6]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fc fec4 	bl	8000890 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40010400 	.word	0x40010400

08003b14 <HAL_I2C_Init>:
>>>>>>> remotes/origin/jayce_working
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e08d      	b.n	8003276 <HAL_I2C_Init+0x12e>
=======
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e08d      	b.n	8003c42 <HAL_I2C_Init+0x12e>
>>>>>>> remotes/origin/jayce_working
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
=======
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
>>>>>>> remotes/origin/jayce_working

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fe f8dc 	bl	800132c <HAL_I2C_MspInit>
=======
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fd fbf2 	bl	8001324 <HAL_I2C_MspInit>
>>>>>>> remotes/origin/jayce_working
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2224      	movs	r2, #36	@ 0x24
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0201 	bic.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]
=======
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2224      	movs	r2, #36	@ 0x24
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0201 	bic.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
<<<<<<< HEAD
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003198:	611a      	str	r2, [r3, #16]
=======
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b64:	611a      	str	r2, [r3, #16]
>>>>>>> remotes/origin/jayce_working

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
<<<<<<< HEAD
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d107      	bne.n	80031c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	e006      	b.n	80031d0 <HAL_I2C_Init+0x88>
=======
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d107      	bne.n	8003b8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	e006      	b.n	8003b9c <HAL_I2C_Init+0x88>
>>>>>>> remotes/origin/jayce_working
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
<<<<<<< HEAD
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80031ce:	609a      	str	r2, [r3, #8]
=======
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b9a:	609a      	str	r2, [r3, #8]
>>>>>>> remotes/origin/jayce_working
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
<<<<<<< HEAD
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d108      	bne.n	80031ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	e007      	b.n	80031fa <HAL_I2C_Init+0xb2>
=======
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d108      	bne.n	8003bb6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bb2:	605a      	str	r2, [r3, #4]
 8003bb4:	e007      	b.n	8003bc6 <HAL_I2C_Init+0xb2>
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
<<<<<<< HEAD
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003208:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800320c:	6053      	str	r3, [r2, #4]
=======
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003bd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bd8:	6053      	str	r3, [r2, #4]
>>>>>>> remotes/origin/jayce_working

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
<<<<<<< HEAD
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800321c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	60da      	str	r2, [r3, #12]
=======
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003be8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	60da      	str	r2, [r3, #12]
>>>>>>> remotes/origin/jayce_working

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
<<<<<<< HEAD
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69d9      	ldr	r1, [r3, #28]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1a      	ldr	r2, [r3, #32]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <HAL_I2C_Mem_Write>:
=======
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69d9      	ldr	r1, [r3, #28]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1a      	ldr	r2, [r3, #32]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <HAL_I2C_Mem_Write>:
>>>>>>> remotes/origin/jayce_working
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	4608      	mov	r0, r1
 800328a:	4611      	mov	r1, r2
 800328c:	461a      	mov	r2, r3
 800328e:	4603      	mov	r3, r0
 8003290:	817b      	strh	r3, [r7, #10]
 8003292:	460b      	mov	r3, r1
 8003294:	813b      	strh	r3, [r7, #8]
 8003296:	4613      	mov	r3, r2
 8003298:	80fb      	strh	r3, [r7, #6]
=======
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b088      	sub	sp, #32
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	4608      	mov	r0, r1
 8003c56:	4611      	mov	r1, r2
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	817b      	strh	r3, [r7, #10]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	813b      	strh	r3, [r7, #8]
 8003c62:	4613      	mov	r3, r2
 8003c64:	80fb      	strh	r3, [r7, #6]
>>>>>>> remotes/origin/jayce_working
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	f040 80f9 	bne.w	800349a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_I2C_Mem_Write+0x34>
 80032ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d105      	bne.n	80032c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032ba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0ed      	b.n	800349c <HAL_I2C_Mem_Write+0x21c>
=======
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b20      	cmp	r3, #32
 8003c70:	f040 80f9 	bne.w	8003e66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_I2C_Mem_Write+0x34>
 8003c7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c86:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0ed      	b.n	8003e68 <HAL_I2C_Mem_Write+0x21c>
>>>>>>> remotes/origin/jayce_working
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_I2C_Mem_Write+0x4e>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e0e6      	b.n	800349c <HAL_I2C_Mem_Write+0x21c>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032d6:	f7fe fa07 	bl	80016e8 <HAL_GetTick>
 80032da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	2319      	movs	r3, #25
 80032e2:	2201      	movs	r2, #1
 80032e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 fac3 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0d1      	b.n	800349c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2221      	movs	r2, #33	@ 0x21
 80032fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2240      	movs	r2, #64	@ 0x40
 8003304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a3a      	ldr	r2, [r7, #32]
 8003312:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003318:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003320:	88f8      	ldrh	r0, [r7, #6]
 8003322:	893a      	ldrh	r2, [r7, #8]
 8003324:	8979      	ldrh	r1, [r7, #10]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	4603      	mov	r3, r0
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f9d3 	bl	80036dc <I2C_RequestMemoryWrite>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0a9      	b.n	800349c <HAL_I2C_Mem_Write+0x21c>
=======
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d101      	bne.n	8003c9a <HAL_I2C_Mem_Write+0x4e>
 8003c96:	2302      	movs	r3, #2
 8003c98:	e0e6      	b.n	8003e68 <HAL_I2C_Mem_Write+0x21c>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ca2:	f7fd fd27 	bl	80016f4 <HAL_GetTick>
 8003ca6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	2319      	movs	r3, #25
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 fac3 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0d1      	b.n	8003e68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2221      	movs	r2, #33	@ 0x21
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2240      	movs	r2, #64	@ 0x40
 8003cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a3a      	ldr	r2, [r7, #32]
 8003cde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ce4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cec:	88f8      	ldrh	r0, [r7, #6]
 8003cee:	893a      	ldrh	r2, [r7, #8]
 8003cf0:	8979      	ldrh	r1, [r7, #10]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f9d3 	bl	80040a8 <I2C_RequestMemoryWrite>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0a9      	b.n	8003e68 <HAL_I2C_Mem_Write+0x21c>
>>>>>>> remotes/origin/jayce_working
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
<<<<<<< HEAD
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	2bff      	cmp	r3, #255	@ 0xff
 8003350:	d90e      	bls.n	8003370 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	22ff      	movs	r2, #255	@ 0xff
 8003356:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335c:	b2da      	uxtb	r2, r3
 800335e:	8979      	ldrh	r1, [r7, #10]
 8003360:	2300      	movs	r3, #0
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 fc47 	bl	8003bfc <I2C_TransferConfig>
 800336e:	e00f      	b.n	8003390 <HAL_I2C_Mem_Write+0x110>
=======
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2bff      	cmp	r3, #255	@ 0xff
 8003d1c:	d90e      	bls.n	8003d3c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	22ff      	movs	r2, #255	@ 0xff
 8003d22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	8979      	ldrh	r1, [r7, #10]
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 fc47 	bl	80045c8 <I2C_TransferConfig>
 8003d3a:	e00f      	b.n	8003d5c <HAL_I2C_Mem_Write+0x110>
>>>>>>> remotes/origin/jayce_working
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< HEAD
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337e:	b2da      	uxtb	r2, r3
 8003380:	8979      	ldrh	r1, [r7, #10]
 8003382:	2300      	movs	r3, #0
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fc36 	bl	8003bfc <I2C_TransferConfig>
=======
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	8979      	ldrh	r1, [r7, #10]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 fc36 	bl	80045c8 <I2C_TransferConfig>
>>>>>>> remotes/origin/jayce_working
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 fac6 	bl	8003926 <I2C_WaitOnTXISFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e07b      	b.n	800349c <HAL_I2C_Mem_Write+0x21c>
=======
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 fac6 	bl	80042f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e07b      	b.n	8003e68 <HAL_I2C_Mem_Write+0x21c>
>>>>>>> remotes/origin/jayce_working
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
<<<<<<< HEAD
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	781a      	ldrb	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d034      	beq.n	8003448 <HAL_I2C_Mem_Write+0x1c8>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d130      	bne.n	8003448 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ec:	2200      	movs	r2, #0
 80033ee:	2180      	movs	r1, #128	@ 0x80
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fa3f 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e04d      	b.n	800349c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	2bff      	cmp	r3, #255	@ 0xff
 8003408:	d90e      	bls.n	8003428 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	22ff      	movs	r2, #255	@ 0xff
 800340e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003414:	b2da      	uxtb	r2, r3
 8003416:	8979      	ldrh	r1, [r7, #10]
 8003418:	2300      	movs	r3, #0
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 fbeb 	bl	8003bfc <I2C_TransferConfig>
 8003426:	e00f      	b.n	8003448 <HAL_I2C_Mem_Write+0x1c8>
=======
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	781a      	ldrb	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d034      	beq.n	8003e14 <HAL_I2C_Mem_Write+0x1c8>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d130      	bne.n	8003e14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db8:	2200      	movs	r2, #0
 8003dba:	2180      	movs	r1, #128	@ 0x80
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fa3f 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e04d      	b.n	8003e68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2bff      	cmp	r3, #255	@ 0xff
 8003dd4:	d90e      	bls.n	8003df4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	22ff      	movs	r2, #255	@ 0xff
 8003dda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	8979      	ldrh	r1, [r7, #10]
 8003de4:	2300      	movs	r3, #0
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 fbeb 	bl	80045c8 <I2C_TransferConfig>
 8003df2:	e00f      	b.n	8003e14 <HAL_I2C_Mem_Write+0x1c8>
>>>>>>> remotes/origin/jayce_working
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
<<<<<<< HEAD
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003436:	b2da      	uxtb	r2, r3
 8003438:	8979      	ldrh	r1, [r7, #10]
 800343a:	2300      	movs	r3, #0
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fbda 	bl	8003bfc <I2C_TransferConfig>
=======
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	8979      	ldrh	r1, [r7, #10]
 8003e06:	2300      	movs	r3, #0
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 fbda 	bl	80045c8 <I2C_TransferConfig>
>>>>>>> remotes/origin/jayce_working
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
<<<<<<< HEAD
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d19e      	bne.n	8003390 <HAL_I2C_Mem_Write+0x110>
=======
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d19e      	bne.n	8003d5c <HAL_I2C_Mem_Write+0x110>
>>>>>>> remotes/origin/jayce_working

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 faac 	bl	80039b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e01a      	b.n	800349c <HAL_I2C_Mem_Write+0x21c>
=======
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 faac 	bl	8004380 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e01a      	b.n	8003e68 <HAL_I2C_Mem_Write+0x21c>
>>>>>>> remotes/origin/jayce_working
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< HEAD
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2220      	movs	r2, #32
 800346c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6859      	ldr	r1, [r3, #4]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	4b0a      	ldr	r3, [pc, #40]	@ (80034a4 <HAL_I2C_Mem_Write+0x224>)
 800347a:	400b      	ands	r3, r1
 800347c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	e000      	b.n	800349c <HAL_I2C_Mem_Write+0x21c>
=======
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2220      	movs	r2, #32
 8003e38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b0a      	ldr	r3, [pc, #40]	@ (8003e70 <HAL_I2C_Mem_Write+0x224>)
 8003e46:	400b      	ands	r3, r1
 8003e48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e000      	b.n	8003e68 <HAL_I2C_Mem_Write+0x21c>
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800349a:	2302      	movs	r3, #2
  }
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	fe00e800 	.word	0xfe00e800

080034a8 <HAL_I2C_Mem_Read>:
=======
 8003e66:	2302      	movs	r3, #2
  }
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	fe00e800 	.word	0xfe00e800

08003e74 <HAL_I2C_Mem_Read>:
>>>>>>> remotes/origin/jayce_working
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	4608      	mov	r0, r1
 80034b2:	4611      	mov	r1, r2
 80034b4:	461a      	mov	r2, r3
 80034b6:	4603      	mov	r3, r0
 80034b8:	817b      	strh	r3, [r7, #10]
 80034ba:	460b      	mov	r3, r1
 80034bc:	813b      	strh	r3, [r7, #8]
 80034be:	4613      	mov	r3, r2
 80034c0:	80fb      	strh	r3, [r7, #6]
=======
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	4611      	mov	r1, r2
 8003e80:	461a      	mov	r2, r3
 8003e82:	4603      	mov	r3, r0
 8003e84:	817b      	strh	r3, [r7, #10]
 8003e86:	460b      	mov	r3, r1
 8003e88:	813b      	strh	r3, [r7, #8]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	80fb      	strh	r3, [r7, #6]
>>>>>>> remotes/origin/jayce_working
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	f040 80fd 	bne.w	80036ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <HAL_I2C_Mem_Read+0x34>
 80034d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034e2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0f1      	b.n	80036cc <HAL_I2C_Mem_Read+0x224>
=======
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	f040 80fd 	bne.w	8004096 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_I2C_Mem_Read+0x34>
 8003ea2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d105      	bne.n	8003eb4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0f1      	b.n	8004098 <HAL_I2C_Mem_Read+0x224>
>>>>>>> remotes/origin/jayce_working
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_I2C_Mem_Read+0x4e>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e0ea      	b.n	80036cc <HAL_I2C_Mem_Read+0x224>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034fe:	f7fe f8f3 	bl	80016e8 <HAL_GetTick>
 8003502:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2319      	movs	r3, #25
 800350a:	2201      	movs	r2, #1
 800350c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f9af 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0d5      	b.n	80036cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2222      	movs	r2, #34	@ 0x22
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2240      	movs	r2, #64	@ 0x40
 800352c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a3a      	ldr	r2, [r7, #32]
 800353a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003540:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003548:	88f8      	ldrh	r0, [r7, #6]
 800354a:	893a      	ldrh	r2, [r7, #8]
 800354c:	8979      	ldrh	r1, [r7, #10]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	4603      	mov	r3, r0
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 f913 	bl	8003784 <I2C_RequestMemoryRead>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0ad      	b.n	80036cc <HAL_I2C_Mem_Read+0x224>
=======
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_I2C_Mem_Read+0x4e>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e0ea      	b.n	8004098 <HAL_I2C_Mem_Read+0x224>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003eca:	f7fd fc13 	bl	80016f4 <HAL_GetTick>
 8003ece:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	2319      	movs	r3, #25
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f9af 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0d5      	b.n	8004098 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2222      	movs	r2, #34	@ 0x22
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2240      	movs	r2, #64	@ 0x40
 8003ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a3a      	ldr	r2, [r7, #32]
 8003f06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f14:	88f8      	ldrh	r0, [r7, #6]
 8003f16:	893a      	ldrh	r2, [r7, #8]
 8003f18:	8979      	ldrh	r1, [r7, #10]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	4603      	mov	r3, r0
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 f913 	bl	8004150 <I2C_RequestMemoryRead>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0ad      	b.n	8004098 <HAL_I2C_Mem_Read+0x224>
>>>>>>> remotes/origin/jayce_working
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
<<<<<<< HEAD
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	2bff      	cmp	r3, #255	@ 0xff
 8003578:	d90e      	bls.n	8003598 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003584:	b2da      	uxtb	r2, r3
 8003586:	8979      	ldrh	r1, [r7, #10]
 8003588:	4b52      	ldr	r3, [pc, #328]	@ (80036d4 <HAL_I2C_Mem_Read+0x22c>)
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fb33 	bl	8003bfc <I2C_TransferConfig>
 8003596:	e00f      	b.n	80035b8 <HAL_I2C_Mem_Read+0x110>
=======
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2bff      	cmp	r3, #255	@ 0xff
 8003f44:	d90e      	bls.n	8003f64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	8979      	ldrh	r1, [r7, #10]
 8003f54:	4b52      	ldr	r3, [pc, #328]	@ (80040a0 <HAL_I2C_Mem_Read+0x22c>)
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 fb33 	bl	80045c8 <I2C_TransferConfig>
 8003f62:	e00f      	b.n	8003f84 <HAL_I2C_Mem_Read+0x110>
>>>>>>> remotes/origin/jayce_working
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< HEAD
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	8979      	ldrh	r1, [r7, #10]
 80035aa:	4b4a      	ldr	r3, [pc, #296]	@ (80036d4 <HAL_I2C_Mem_Read+0x22c>)
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 fb22 	bl	8003bfc <I2C_TransferConfig>
=======
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	8979      	ldrh	r1, [r7, #10]
 8003f76:	4b4a      	ldr	r3, [pc, #296]	@ (80040a0 <HAL_I2C_Mem_Read+0x22c>)
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fb22 	bl	80045c8 <I2C_TransferConfig>
>>>>>>> remotes/origin/jayce_working
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035be:	2200      	movs	r2, #0
 80035c0:	2104      	movs	r1, #4
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f956 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e07c      	b.n	80036cc <HAL_I2C_Mem_Read+0x224>
=======
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2104      	movs	r1, #4
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f956 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e07c      	b.n	8004098 <HAL_I2C_Mem_Read+0x224>
>>>>>>> remotes/origin/jayce_working
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
<<<<<<< HEAD
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d034      	beq.n	8003678 <HAL_I2C_Mem_Read+0x1d0>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003612:	2b00      	cmp	r3, #0
 8003614:	d130      	bne.n	8003678 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361c:	2200      	movs	r2, #0
 800361e:	2180      	movs	r1, #128	@ 0x80
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f927 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e04d      	b.n	80036cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	2bff      	cmp	r3, #255	@ 0xff
 8003638:	d90e      	bls.n	8003658 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2201      	movs	r2, #1
 800363e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003644:	b2da      	uxtb	r2, r3
 8003646:	8979      	ldrh	r1, [r7, #10]
 8003648:	2300      	movs	r3, #0
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 fad3 	bl	8003bfc <I2C_TransferConfig>
 8003656:	e00f      	b.n	8003678 <HAL_I2C_Mem_Read+0x1d0>
=======
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d034      	beq.n	8004044 <HAL_I2C_Mem_Read+0x1d0>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d130      	bne.n	8004044 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2180      	movs	r1, #128	@ 0x80
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f927 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e04d      	b.n	8004098 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	2bff      	cmp	r3, #255	@ 0xff
 8004004:	d90e      	bls.n	8004024 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004010:	b2da      	uxtb	r2, r3
 8004012:	8979      	ldrh	r1, [r7, #10]
 8004014:	2300      	movs	r3, #0
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 fad3 	bl	80045c8 <I2C_TransferConfig>
 8004022:	e00f      	b.n	8004044 <HAL_I2C_Mem_Read+0x1d0>
>>>>>>> remotes/origin/jayce_working
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
<<<<<<< HEAD
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003666:	b2da      	uxtb	r2, r3
 8003668:	8979      	ldrh	r1, [r7, #10]
 800366a:	2300      	movs	r3, #0
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fac2 	bl	8003bfc <I2C_TransferConfig>
=======
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004032:	b2da      	uxtb	r2, r3
 8004034:	8979      	ldrh	r1, [r7, #10]
 8004036:	2300      	movs	r3, #0
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fac2 	bl	80045c8 <I2C_TransferConfig>
>>>>>>> remotes/origin/jayce_working
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
<<<<<<< HEAD
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d19a      	bne.n	80035b8 <HAL_I2C_Mem_Read+0x110>
=======
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d19a      	bne.n	8003f84 <HAL_I2C_Mem_Read+0x110>
>>>>>>> remotes/origin/jayce_working

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f994 	bl	80039b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e01a      	b.n	80036cc <HAL_I2C_Mem_Read+0x224>
=======
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 f994 	bl	8004380 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e01a      	b.n	8004098 <HAL_I2C_Mem_Read+0x224>
>>>>>>> remotes/origin/jayce_working
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< HEAD
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2220      	movs	r2, #32
 800369c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <HAL_I2C_Mem_Read+0x230>)
 80036aa:	400b      	ands	r3, r1
 80036ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	e000      	b.n	80036cc <HAL_I2C_Mem_Read+0x224>
=======
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2220      	movs	r2, #32
 8004068:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6859      	ldr	r1, [r3, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b0b      	ldr	r3, [pc, #44]	@ (80040a4 <HAL_I2C_Mem_Read+0x230>)
 8004076:	400b      	ands	r3, r1
 8004078:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	e000      	b.n	8004098 <HAL_I2C_Mem_Read+0x224>
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80036ca:	2302      	movs	r3, #2
  }
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	80002400 	.word	0x80002400
 80036d8:	fe00e800 	.word	0xfe00e800

080036dc <I2C_RequestMemoryWrite>:
=======
 8004096:	2302      	movs	r3, #2
  }
}
 8004098:	4618      	mov	r0, r3
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	80002400 	.word	0x80002400
 80040a4:	fe00e800 	.word	0xfe00e800

080040a8 <I2C_RequestMemoryWrite>:
>>>>>>> remotes/origin/jayce_working
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
<<<<<<< HEAD
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	4608      	mov	r0, r1
 80036e6:	4611      	mov	r1, r2
 80036e8:	461a      	mov	r2, r3
 80036ea:	4603      	mov	r3, r0
 80036ec:	817b      	strh	r3, [r7, #10]
 80036ee:	460b      	mov	r3, r1
 80036f0:	813b      	strh	r3, [r7, #8]
 80036f2:	4613      	mov	r3, r2
 80036f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	8979      	ldrh	r1, [r7, #10]
 80036fc:	4b20      	ldr	r3, [pc, #128]	@ (8003780 <I2C_RequestMemoryWrite+0xa4>)
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 fa79 	bl	8003bfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	69b9      	ldr	r1, [r7, #24]
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 f909 	bl	8003926 <I2C_WaitOnTXISFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e02c      	b.n	8003778 <I2C_RequestMemoryWrite+0x9c>
=======
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	4608      	mov	r0, r1
 80040b2:	4611      	mov	r1, r2
 80040b4:	461a      	mov	r2, r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	817b      	strh	r3, [r7, #10]
 80040ba:	460b      	mov	r3, r1
 80040bc:	813b      	strh	r3, [r7, #8]
 80040be:	4613      	mov	r3, r2
 80040c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80040c2:	88fb      	ldrh	r3, [r7, #6]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	8979      	ldrh	r1, [r7, #10]
 80040c8:	4b20      	ldr	r3, [pc, #128]	@ (800414c <I2C_RequestMemoryWrite+0xa4>)
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 fa79 	bl	80045c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	69b9      	ldr	r1, [r7, #24]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f909 	bl	80042f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e02c      	b.n	8004144 <I2C_RequestMemoryWrite+0x9c>
>>>>>>> remotes/origin/jayce_working
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< HEAD
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d105      	bne.n	8003730 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003724:	893b      	ldrh	r3, [r7, #8]
 8003726:	b2da      	uxtb	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	629a      	str	r2, [r3, #40]	@ 0x28
 800372e:	e015      	b.n	800375c <I2C_RequestMemoryWrite+0x80>
=======
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d105      	bne.n	80040fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040f0:	893b      	ldrh	r3, [r7, #8]
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80040fa:	e015      	b.n	8004128 <I2C_RequestMemoryWrite+0x80>
>>>>>>> remotes/origin/jayce_working
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< HEAD
 8003730:	893b      	ldrh	r3, [r7, #8]
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	b29b      	uxth	r3, r3
 8003736:	b2da      	uxtb	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800373e:	69fa      	ldr	r2, [r7, #28]
 8003740:	69b9      	ldr	r1, [r7, #24]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f8ef 	bl	8003926 <I2C_WaitOnTXISFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e012      	b.n	8003778 <I2C_RequestMemoryWrite+0x9c>
=======
 80040fc:	893b      	ldrh	r3, [r7, #8]
 80040fe:	0a1b      	lsrs	r3, r3, #8
 8004100:	b29b      	uxth	r3, r3
 8004102:	b2da      	uxtb	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	69b9      	ldr	r1, [r7, #24]
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f8ef 	bl	80042f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e012      	b.n	8004144 <I2C_RequestMemoryWrite+0x9c>
>>>>>>> remotes/origin/jayce_working
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< HEAD
 8003752:	893b      	ldrh	r3, [r7, #8]
 8003754:	b2da      	uxtb	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 800411e:	893b      	ldrh	r3, [r7, #8]
 8004120:	b2da      	uxtb	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> remotes/origin/jayce_working
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	2200      	movs	r2, #0
 8003764:	2180      	movs	r1, #128	@ 0x80
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f884 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	80002000 	.word	0x80002000

08003784 <I2C_RequestMemoryRead>:
=======
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2200      	movs	r2, #0
 8004130:	2180      	movs	r1, #128	@ 0x80
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f884 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e000      	b.n	8004144 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	80002000 	.word	0x80002000

08004150 <I2C_RequestMemoryRead>:
>>>>>>> remotes/origin/jayce_working
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
<<<<<<< HEAD
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	4608      	mov	r0, r1
 800378e:	4611      	mov	r1, r2
 8003790:	461a      	mov	r2, r3
 8003792:	4603      	mov	r3, r0
 8003794:	817b      	strh	r3, [r7, #10]
 8003796:	460b      	mov	r3, r1
 8003798:	813b      	strh	r3, [r7, #8]
 800379a:	4613      	mov	r3, r2
 800379c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	8979      	ldrh	r1, [r7, #10]
 80037a4:	4b20      	ldr	r3, [pc, #128]	@ (8003828 <I2C_RequestMemoryRead+0xa4>)
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	2300      	movs	r3, #0
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fa26 	bl	8003bfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	69b9      	ldr	r1, [r7, #24]
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f8b6 	bl	8003926 <I2C_WaitOnTXISFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e02c      	b.n	800381e <I2C_RequestMemoryRead+0x9a>
=======
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af02      	add	r7, sp, #8
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	4608      	mov	r0, r1
 800415a:	4611      	mov	r1, r2
 800415c:	461a      	mov	r2, r3
 800415e:	4603      	mov	r3, r0
 8004160:	817b      	strh	r3, [r7, #10]
 8004162:	460b      	mov	r3, r1
 8004164:	813b      	strh	r3, [r7, #8]
 8004166:	4613      	mov	r3, r2
 8004168:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800416a:	88fb      	ldrh	r3, [r7, #6]
 800416c:	b2da      	uxtb	r2, r3
 800416e:	8979      	ldrh	r1, [r7, #10]
 8004170:	4b20      	ldr	r3, [pc, #128]	@ (80041f4 <I2C_RequestMemoryRead+0xa4>)
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	2300      	movs	r3, #0
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 fa26 	bl	80045c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	69b9      	ldr	r1, [r7, #24]
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f8b6 	bl	80042f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e02c      	b.n	80041ea <I2C_RequestMemoryRead+0x9a>
>>>>>>> remotes/origin/jayce_working
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< HEAD
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d105      	bne.n	80037d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037ca:	893b      	ldrh	r3, [r7, #8]
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80037d4:	e015      	b.n	8003802 <I2C_RequestMemoryRead+0x7e>
=======
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d105      	bne.n	80041a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004196:	893b      	ldrh	r3, [r7, #8]
 8004198:	b2da      	uxtb	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	629a      	str	r2, [r3, #40]	@ 0x28
 80041a0:	e015      	b.n	80041ce <I2C_RequestMemoryRead+0x7e>
>>>>>>> remotes/origin/jayce_working
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< HEAD
 80037d6:	893b      	ldrh	r3, [r7, #8]
 80037d8:	0a1b      	lsrs	r3, r3, #8
 80037da:	b29b      	uxth	r3, r3
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	69b9      	ldr	r1, [r7, #24]
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f89c 	bl	8003926 <I2C_WaitOnTXISFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e012      	b.n	800381e <I2C_RequestMemoryRead+0x9a>
=======
 80041a2:	893b      	ldrh	r3, [r7, #8]
 80041a4:	0a1b      	lsrs	r3, r3, #8
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	69b9      	ldr	r1, [r7, #24]
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f89c 	bl	80042f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e012      	b.n	80041ea <I2C_RequestMemoryRead+0x9a>
>>>>>>> remotes/origin/jayce_working
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< HEAD
 80037f8:	893b      	ldrh	r3, [r7, #8]
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 80041c4:	893b      	ldrh	r3, [r7, #8]
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> remotes/origin/jayce_working
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2200      	movs	r2, #0
 800380a:	2140      	movs	r1, #64	@ 0x40
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f831 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	80002000 	.word	0x80002000

0800382c <I2C_Flush_TXDR>:
=======
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2140      	movs	r1, #64	@ 0x40
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f831 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	80002000 	.word	0x80002000

080041f8 <I2C_Flush_TXDR>:
>>>>>>> remotes/origin/jayce_working
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b02      	cmp	r3, #2
 8003840:	d103      	bne.n	800384a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2200      	movs	r2, #0
 8003848:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b02      	cmp	r3, #2
 800420c:	d103      	bne.n	8004216 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2200      	movs	r2, #0
 8004214:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> remotes/origin/jayce_working
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
<<<<<<< HEAD
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d007      	beq.n	8003868 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	619a      	str	r2, [r3, #24]
  }
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <I2C_WaitOnFlagUntilTimeout>:
=======
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b01      	cmp	r3, #1
 8004222:	d007      	beq.n	8004234 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	619a      	str	r2, [r3, #24]
  }
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> remotes/origin/jayce_working
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003884:	e03b      	b.n	80038fe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	6839      	ldr	r1, [r7, #0]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f8d6 	bl	8003a3c <I2C_IsErrorOccurred>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e041      	b.n	800391e <I2C_WaitOnFlagUntilTimeout+0xaa>
=======
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	4613      	mov	r3, r2
 800424e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004250:	e03b      	b.n	80042ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	6839      	ldr	r1, [r7, #0]
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f8d6 	bl	8004408 <I2C_IsErrorOccurred>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e041      	b.n	80042ea <I2C_WaitOnFlagUntilTimeout+0xaa>
>>>>>>> remotes/origin/jayce_working
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038a0:	d02d      	beq.n	80038fe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a2:	f7fd ff21 	bl	80016e8 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d122      	bne.n	80038fe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699a      	ldr	r2, [r3, #24]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4013      	ands	r3, r2
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d113      	bne.n	80038fe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038da:	f043 0220 	orr.w	r2, r3, #32
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e00f      	b.n	800391e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699a      	ldr	r2, [r3, #24]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4013      	ands	r3, r2
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	429a      	cmp	r2, r3
 800390c:	bf0c      	ite	eq
 800390e:	2301      	moveq	r3, #1
 8003910:	2300      	movne	r3, #0
 8003912:	b2db      	uxtb	r3, r3
 8003914:	461a      	mov	r2, r3
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	429a      	cmp	r2, r3
 800391a:	d0b4      	beq.n	8003886 <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d02d      	beq.n	80042ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426e:	f7fd fa41 	bl	80016f4 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d302      	bcc.n	8004284 <I2C_WaitOnFlagUntilTimeout+0x44>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d122      	bne.n	80042ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4013      	ands	r3, r2
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	429a      	cmp	r2, r3
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d113      	bne.n	80042ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a6:	f043 0220 	orr.w	r2, r3, #32
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e00f      	b.n	80042ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699a      	ldr	r2, [r3, #24]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4013      	ands	r3, r2
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	bf0c      	ite	eq
 80042da:	2301      	moveq	r3, #1
 80042dc:	2300      	movne	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	461a      	mov	r2, r3
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d0b4      	beq.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> remotes/origin/jayce_working
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <I2C_WaitOnTXISFlagUntilTimeout>:
=======
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <I2C_WaitOnTXISFlagUntilTimeout>:
>>>>>>> remotes/origin/jayce_working
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
<<<<<<< HEAD
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003932:	e033      	b.n	800399c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f87f 	bl	8003a3c <I2C_IsErrorOccurred>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e031      	b.n	80039ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
=======
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042fe:	e033      	b.n	8004368 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	68b9      	ldr	r1, [r7, #8]
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 f87f 	bl	8004408 <I2C_IsErrorOccurred>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e031      	b.n	8004378 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
>>>>>>> remotes/origin/jayce_working
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800394e:	d025      	beq.n	800399c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003950:	f7fd feca 	bl	80016e8 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	429a      	cmp	r2, r3
 800395e:	d302      	bcc.n	8003966 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d11a      	bne.n	800399c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b02      	cmp	r3, #2
 8003972:	d013      	beq.n	800399c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003978:	f043 0220 	orr.w	r2, r3, #32
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e007      	b.n	80039ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d1c4      	bne.n	8003934 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
=======
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431a:	d025      	beq.n	8004368 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431c:	f7fd f9ea 	bl	80016f4 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	429a      	cmp	r2, r3
 800432a:	d302      	bcc.n	8004332 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d11a      	bne.n	8004368 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b02      	cmp	r3, #2
 800433e:	d013      	beq.n	8004368 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004344:	f043 0220 	orr.w	r2, r3, #32
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e007      	b.n	8004378 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b02      	cmp	r3, #2
 8004374:	d1c4      	bne.n	8004300 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
>>>>>>> remotes/origin/jayce_working
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
=======
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <I2C_WaitOnSTOPFlagUntilTimeout>:
>>>>>>> remotes/origin/jayce_working
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
<<<<<<< HEAD
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039c0:	e02f      	b.n	8003a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f838 	bl	8003a3c <I2C_IsErrorOccurred>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e02d      	b.n	8003a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
=======
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800438c:	e02f      	b.n	80043ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f838 	bl	8004408 <I2C_IsErrorOccurred>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e02d      	b.n	80043fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
>>>>>>> remotes/origin/jayce_working
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< HEAD
 80039d6:	f7fd fe87 	bl	80016e8 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d302      	bcc.n	80039ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d11a      	bne.n	8003a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d013      	beq.n	8003a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fe:	f043 0220 	orr.w	r2, r3, #32
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e007      	b.n	8003a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	d1c8      	bne.n	80039c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
=======
 80043a2:	f7fd f9a7 	bl	80016f4 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d302      	bcc.n	80043b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d11a      	bne.n	80043ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d013      	beq.n	80043ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ca:	f043 0220 	orr.w	r2, r3, #32
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e007      	b.n	80043fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	f003 0320 	and.w	r3, r3, #32
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d1c8      	bne.n	800438e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
>>>>>>> remotes/origin/jayce_working
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <I2C_IsErrorOccurred>:
=======
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <I2C_IsErrorOccurred>:
>>>>>>> remotes/origin/jayce_working
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	@ 0x28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	61fb      	str	r3, [r7, #28]
=======
 8004408:	b580      	push	{r7, lr}
 800440a:	b08a      	sub	sp, #40	@ 0x28
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004422:	2300      	movs	r3, #0
 8004424:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	61fb      	str	r3, [r7, #28]
>>>>>>> remotes/origin/jayce_working
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
<<<<<<< HEAD
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d068      	beq.n	8003b3a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2210      	movs	r2, #16
 8003a6e:	61da      	str	r2, [r3, #28]
=======
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	2b00      	cmp	r3, #0
 8004432:	d068      	beq.n	8004506 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2210      	movs	r2, #16
 800443a:	61da      	str	r2, [r3, #28]
>>>>>>> remotes/origin/jayce_working

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
<<<<<<< HEAD
 8003a70:	e049      	b.n	8003b06 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a78:	d045      	beq.n	8003b06 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a7a:	f7fd fe35 	bl	80016e8 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d302      	bcc.n	8003a90 <I2C_IsErrorOccurred+0x54>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d13a      	bne.n	8003b06 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003aa2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab2:	d121      	bne.n	8003af8 <I2C_IsErrorOccurred+0xbc>
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003aba:	d01d      	beq.n	8003af8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003abc:	7cfb      	ldrb	r3, [r7, #19]
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d01a      	beq.n	8003af8 <I2C_IsErrorOccurred+0xbc>
=======
 800443c:	e049      	b.n	80044d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d045      	beq.n	80044d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004446:	f7fd f955 	bl	80016f4 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	429a      	cmp	r2, r3
 8004454:	d302      	bcc.n	800445c <I2C_IsErrorOccurred+0x54>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d13a      	bne.n	80044d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004466:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800446e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800447a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800447e:	d121      	bne.n	80044c4 <I2C_IsErrorOccurred+0xbc>
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004486:	d01d      	beq.n	80044c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	2b20      	cmp	r3, #32
 800448c:	d01a      	beq.n	80044c4 <I2C_IsErrorOccurred+0xbc>
>>>>>>> remotes/origin/jayce_working
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
<<<<<<< HEAD
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ad0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ad2:	f7fd fe09 	bl	80016e8 <HAL_GetTick>
 8003ad6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ad8:	e00e      	b.n	8003af8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ada:	f7fd fe05 	bl	80016e8 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b19      	cmp	r3, #25
 8003ae6:	d907      	bls.n	8003af8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	f043 0320 	orr.w	r3, r3, #32
 8003aee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003af6:	e006      	b.n	8003b06 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b20      	cmp	r3, #32
 8003b04:	d1e9      	bne.n	8003ada <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d003      	beq.n	8003b1c <I2C_IsErrorOccurred+0xe0>
 8003b14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0aa      	beq.n	8003a72 <I2C_IsErrorOccurred+0x36>
=======
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800449c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800449e:	f7fd f929 	bl	80016f4 <HAL_GetTick>
 80044a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044a4:	e00e      	b.n	80044c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80044a6:	f7fd f925 	bl	80016f4 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b19      	cmp	r3, #25
 80044b2:	d907      	bls.n	80044c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	f043 0320 	orr.w	r3, r3, #32
 80044ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80044c2:	e006      	b.n	80044d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d1e9      	bne.n	80044a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d003      	beq.n	80044e8 <I2C_IsErrorOccurred+0xe0>
 80044e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0aa      	beq.n	800443e <I2C_IsErrorOccurred+0x36>
>>>>>>> remotes/origin/jayce_working
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
<<<<<<< HEAD
 8003b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d103      	bne.n	8003b2c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	f043 0304 	orr.w	r3, r3, #4
 8003b32:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
=======
 80044e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d103      	bne.n	80044f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2220      	movs	r2, #32
 80044f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	f043 0304 	orr.w	r3, r3, #4
 80044fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
>>>>>>> remotes/origin/jayce_working
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
<<<<<<< HEAD
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	61bb      	str	r3, [r7, #24]
=======
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	61bb      	str	r3, [r7, #24]
>>>>>>> remotes/origin/jayce_working

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
<<<<<<< HEAD
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00b      	beq.n	8003b64 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
=======
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00b      	beq.n	8004530 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004528:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
>>>>>>> remotes/origin/jayce_working
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
<<<<<<< HEAD
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	f043 0308 	orr.w	r3, r3, #8
 8003b74:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
=======
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00b      	beq.n	8004552 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	f043 0308 	orr.w	r3, r3, #8
 8004540:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800454a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
>>>>>>> remotes/origin/jayce_working
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
<<<<<<< HEAD
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00b      	beq.n	8003ba8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	f043 0302 	orr.w	r3, r3, #2
 8003b96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ba0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01c      	beq.n	8003bea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f7ff fe3b 	bl	800382c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6859      	ldr	r1, [r3, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf8 <I2C_IsErrorOccurred+0x1bc>)
 8003bc2:	400b      	ands	r3, r1
 8003bc4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003bea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3728      	adds	r7, #40	@ 0x28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	fe00e800 	.word	0xfe00e800

08003bfc <I2C_TransferConfig>:
=======
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00b      	beq.n	8004574 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	f043 0302 	orr.w	r3, r3, #2
 8004562:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800456c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01c      	beq.n	80045b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f7ff fe3b 	bl	80041f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6859      	ldr	r1, [r3, #4]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	4b0d      	ldr	r3, [pc, #52]	@ (80045c4 <I2C_IsErrorOccurred+0x1bc>)
 800458e:	400b      	ands	r3, r1
 8004590:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	431a      	orrs	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80045b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3728      	adds	r7, #40	@ 0x28
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	fe00e800 	.word	0xfe00e800

080045c8 <I2C_TransferConfig>:
>>>>>>> remotes/origin/jayce_working
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
<<<<<<< HEAD
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	607b      	str	r3, [r7, #4]
 8003c06:	460b      	mov	r3, r1
 8003c08:	817b      	strh	r3, [r7, #10]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	727b      	strb	r3, [r7, #9]
=======
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	460b      	mov	r3, r1
 80045d4:	817b      	strh	r3, [r7, #10]
 80045d6:	4613      	mov	r3, r2
 80045d8:	727b      	strb	r3, [r7, #9]
>>>>>>> remotes/origin/jayce_working
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
<<<<<<< HEAD
 8003c0e:	897b      	ldrh	r3, [r7, #10]
 8003c10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c14:	7a7b      	ldrb	r3, [r7, #9]
 8003c16:	041b      	lsls	r3, r3, #16
 8003c18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c1c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c2a:	617b      	str	r3, [r7, #20]
=======
 80045da:	897b      	ldrh	r3, [r7, #10]
 80045dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045e0:	7a7b      	ldrb	r3, [r7, #9]
 80045e2:	041b      	lsls	r3, r3, #16
 80045e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045f6:	617b      	str	r3, [r7, #20]
>>>>>>> remotes/origin/jayce_working
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
<<<<<<< HEAD
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	0d5b      	lsrs	r3, r3, #21
 8003c36:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003c3a:	4b08      	ldr	r3, [pc, #32]	@ (8003c5c <I2C_TransferConfig+0x60>)
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	ea02 0103 	and.w	r1, r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
=======
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	0d5b      	lsrs	r3, r3, #21
 8004602:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004606:	4b08      	ldr	r3, [pc, #32]	@ (8004628 <I2C_TransferConfig+0x60>)
 8004608:	430b      	orrs	r3, r1
 800460a:	43db      	mvns	r3, r3
 800460c:	ea02 0103 	and.w	r1, r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	430a      	orrs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]
>>>>>>> remotes/origin/jayce_working
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
<<<<<<< HEAD
 8003c4e:	bf00      	nop
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	03ff63ff 	.word	0x03ff63ff

08003c60 <HAL_I2CEx_ConfigAnalogFilter>:
=======
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	03ff63ff 	.word	0x03ff63ff

0800462c <HAL_I2CEx_ConfigAnalogFilter>:
>>>>>>> remotes/origin/jayce_working
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
<<<<<<< HEAD
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
=======
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
>>>>>>> remotes/origin/jayce_working
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d138      	bne.n	8003ce8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e032      	b.n	8003cea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2224      	movs	r2, #36	@ 0x24
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003cb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6819      	ldr	r1, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e000      	b.n	8003cea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
=======
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b20      	cmp	r3, #32
 8004640:	d138      	bne.n	80046b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800464c:	2302      	movs	r3, #2
 800464e:	e032      	b.n	80046b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2224      	movs	r2, #36	@ 0x24
 800465c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0201 	bic.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800467e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6819      	ldr	r1, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	e000      	b.n	80046b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8003ce8:	2302      	movs	r3, #2
  }
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_I2CEx_ConfigDigitalFilter>:
=======
 80046b4:	2302      	movs	r3, #2
  }
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <HAL_I2CEx_ConfigDigitalFilter>:
>>>>>>> remotes/origin/jayce_working
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
<<<<<<< HEAD
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	6039      	str	r1, [r7, #0]
=======
 80046c2:	b480      	push	{r7}
 80046c4:	b085      	sub	sp, #20
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	6039      	str	r1, [r7, #0]
>>>>>>> remotes/origin/jayce_working

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d139      	bne.n	8003d80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e033      	b.n	8003d82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2224      	movs	r2, #36	@ 0x24
 8003d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0201 	bic.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e000      	b.n	8003d82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
=======
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d139      	bne.n	800474c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e033      	b.n	800474e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2224      	movs	r2, #36	@ 0x24
 80046f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0201 	bic.w	r2, r2, #1
 8004704:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004714:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	021b      	lsls	r3, r3, #8
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4313      	orrs	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	e000      	b.n	800474e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8003d80:	2302      	movs	r3, #2
  }
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <HAL_PWREx_GetVoltageRange>:
=======
 800474c:	2302      	movs	r3, #2
  }
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
	...

0800475c <HAL_PWREx_GetVoltageRange>:
>>>>>>> remotes/origin/jayce_working
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
<<<<<<< HEAD
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
=======
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
<<<<<<< HEAD
 8003d94:	4b04      	ldr	r3, [pc, #16]	@ (8003da8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40007000 	.word	0x40007000

08003dac <HAL_PWREx_ControlVoltageScaling>:
=======
 8004760:	4b04      	ldr	r3, [pc, #16]	@ (8004774 <HAL_PWREx_GetVoltageRange+0x18>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004768:	4618      	mov	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40007000 	.word	0x40007000

08004778 <HAL_PWREx_ControlVoltageScaling>:
>>>>>>> remotes/origin/jayce_working
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
<<<<<<< HEAD
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
=======
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
<<<<<<< HEAD
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dba:	d130      	bne.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dbc:	4b23      	ldr	r3, [pc, #140]	@ (8003e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dc8:	d038      	beq.n	8003e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dca:	4b20      	ldr	r3, [pc, #128]	@ (8003e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dda:	4b1d      	ldr	r3, [pc, #116]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2232      	movs	r2, #50	@ 0x32
 8003de0:	fb02 f303 	mul.w	r3, r2, r3
 8003de4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	0c9b      	lsrs	r3, r3, #18
 8003dec:	3301      	adds	r3, #1
 8003dee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003df0:	e002      	b.n	8003df8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003df8:	4b14      	ldr	r3, [pc, #80]	@ (8003e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e04:	d102      	bne.n	8003e0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f2      	bne.n	8003df2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e18:	d110      	bne.n	8003e3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e00f      	b.n	8003e3e <HAL_PWREx_ControlVoltageScaling+0x92>
=======
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004786:	d130      	bne.n	80047ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004788:	4b23      	ldr	r3, [pc, #140]	@ (8004818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004794:	d038      	beq.n	8004808 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004796:	4b20      	ldr	r3, [pc, #128]	@ (8004818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800479e:	4a1e      	ldr	r2, [pc, #120]	@ (8004818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047a6:	4b1d      	ldr	r3, [pc, #116]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2232      	movs	r2, #50	@ 0x32
 80047ac:	fb02 f303 	mul.w	r3, r2, r3
 80047b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004820 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	0c9b      	lsrs	r3, r3, #18
 80047b8:	3301      	adds	r3, #1
 80047ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047bc:	e002      	b.n	80047c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047c4:	4b14      	ldr	r3, [pc, #80]	@ (8004818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047d0:	d102      	bne.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1f2      	bne.n	80047be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e4:	d110      	bne.n	8004808 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e00f      	b.n	800480a <HAL_PWREx_ControlVoltageScaling+0x92>
>>>>>>> remotes/origin/jayce_working
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
<<<<<<< HEAD
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e2a:	d007      	beq.n	8003e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e2c:	4b07      	ldr	r3, [pc, #28]	@ (8003e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e34:	4a05      	ldr	r2, [pc, #20]	@ (8003e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e3a:	6013      	str	r3, [r2, #0]
=======
 80047ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f6:	d007      	beq.n	8004808 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047f8:	4b07      	ldr	r3, [pc, #28]	@ (8004818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004800:	4a05      	ldr	r2, [pc, #20]	@ (8004818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004802:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004806:	6013      	str	r3, [r2, #0]
>>>>>>> remotes/origin/jayce_working
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
<<<<<<< HEAD
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40007000 	.word	0x40007000
 8003e50:	20000000 	.word	0x20000000
 8003e54:	431bde83 	.word	0x431bde83

08003e58 <HAL_RCC_OscConfig>:
=======
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40007000 	.word	0x40007000
 800481c:	20000000 	.word	0x20000000
 8004820:	431bde83 	.word	0x431bde83

08004824 <HAL_RCC_OscConfig>:
>>>>>>> remotes/origin/jayce_working
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
=======
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d102      	bne.n	8003e6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	f000 bc08 	b.w	800467c <HAL_RCC_OscConfig+0x824>
=======
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d102      	bne.n	8004838 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	f000 bc08 	b.w	8005048 <HAL_RCC_OscConfig+0x824>
>>>>>>> remotes/origin/jayce_working
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8003e6c:	4b96      	ldr	r3, [pc, #600]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 030c 	and.w	r3, r3, #12
 8003e74:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e76:	4b94      	ldr	r3, [pc, #592]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 80e4 	beq.w	8004056 <HAL_RCC_OscConfig+0x1fe>
=======
 8004838:	4b96      	ldr	r3, [pc, #600]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 030c 	and.w	r3, r3, #12
 8004840:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004842:	4b94      	ldr	r3, [pc, #592]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 80e4 	beq.w	8004a22 <HAL_RCC_OscConfig+0x1fe>
>>>>>>> remotes/origin/jayce_working
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
<<<<<<< HEAD
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x4c>
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2b0c      	cmp	r3, #12
 8003e98:	f040 808b 	bne.w	8003fb2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	f040 8087 	bne.w	8003fb2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ea4:	4b88      	ldr	r3, [pc, #544]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_OscConfig+0x64>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e3df      	b.n	800467c <HAL_RCC_OscConfig+0x824>
=======
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <HAL_RCC_OscConfig+0x4c>
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	2b0c      	cmp	r3, #12
 8004864:	f040 808b 	bne.w	800497e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	2b01      	cmp	r3, #1
 800486c:	f040 8087 	bne.w	800497e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004870:	4b88      	ldr	r3, [pc, #544]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_RCC_OscConfig+0x64>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e3df      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
>>>>>>> remotes/origin/jayce_working
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
<<<<<<< HEAD
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1a      	ldr	r2, [r3, #32]
 8003ec0:	4b81      	ldr	r3, [pc, #516]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d004      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x7e>
 8003ecc:	4b7e      	ldr	r3, [pc, #504]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ed4:	e005      	b.n	8003ee2 <HAL_RCC_OscConfig+0x8a>
 8003ed6:	4b7c      	ldr	r3, [pc, #496]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d223      	bcs.n	8003f2e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fdc4 	bl	8004a78 <RCC_SetFlashLatencyFromMSIRange>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e3c0      	b.n	800467c <HAL_RCC_OscConfig+0x824>
=======
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1a      	ldr	r2, [r3, #32]
 800488c:	4b81      	ldr	r3, [pc, #516]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d004      	beq.n	80048a2 <HAL_RCC_OscConfig+0x7e>
 8004898:	4b7e      	ldr	r3, [pc, #504]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048a0:	e005      	b.n	80048ae <HAL_RCC_OscConfig+0x8a>
 80048a2:	4b7c      	ldr	r3, [pc, #496]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 80048a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048a8:	091b      	lsrs	r3, r3, #4
 80048aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d223      	bcs.n	80048fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fdc4 	bl	8005444 <RCC_SetFlashLatencyFromMSIRange>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e3c0      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
>>>>>>> remotes/origin/jayce_working
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8003efa:	4b73      	ldr	r3, [pc, #460]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a72      	ldr	r2, [pc, #456]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f00:	f043 0308 	orr.w	r3, r3, #8
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	4b70      	ldr	r3, [pc, #448]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	496d      	ldr	r1, [pc, #436]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f18:	4b6b      	ldr	r3, [pc, #428]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	4968      	ldr	r1, [pc, #416]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]
 8003f2c:	e025      	b.n	8003f7a <HAL_RCC_OscConfig+0x122>
=======
 80048c6:	4b73      	ldr	r3, [pc, #460]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a72      	ldr	r2, [pc, #456]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 80048cc:	f043 0308 	orr.w	r3, r3, #8
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	4b70      	ldr	r3, [pc, #448]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	496d      	ldr	r1, [pc, #436]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048e4:	4b6b      	ldr	r3, [pc, #428]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	021b      	lsls	r3, r3, #8
 80048f2:	4968      	ldr	r1, [pc, #416]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	604b      	str	r3, [r1, #4]
 80048f8:	e025      	b.n	8004946 <HAL_RCC_OscConfig+0x122>
>>>>>>> remotes/origin/jayce_working
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8003f2e:	4b66      	ldr	r3, [pc, #408]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a65      	ldr	r2, [pc, #404]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f34:	f043 0308 	orr.w	r3, r3, #8
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b63      	ldr	r3, [pc, #396]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4960      	ldr	r1, [pc, #384]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f4c:	4b5e      	ldr	r3, [pc, #376]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	495b      	ldr	r1, [pc, #364]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	604b      	str	r3, [r1, #4]
=======
 80048fa:	4b66      	ldr	r3, [pc, #408]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a65      	ldr	r2, [pc, #404]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 8004900:	f043 0308 	orr.w	r3, r3, #8
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4b63      	ldr	r3, [pc, #396]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	4960      	ldr	r1, [pc, #384]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 8004914:	4313      	orrs	r3, r2
 8004916:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004918:	4b5e      	ldr	r3, [pc, #376]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	021b      	lsls	r3, r3, #8
 8004926:	495b      	ldr	r1, [pc, #364]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 8004928:	4313      	orrs	r3, r2
 800492a:	604b      	str	r3, [r1, #4]
>>>>>>> remotes/origin/jayce_working

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
<<<<<<< HEAD
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d109      	bne.n	8003f7a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fd84 	bl	8004a78 <RCC_SetFlashLatencyFromMSIRange>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e380      	b.n	800467c <HAL_RCC_OscConfig+0x824>
=======
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fd84 	bl	8005444 <RCC_SetFlashLatencyFromMSIRange>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e380      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
>>>>>>> remotes/origin/jayce_working
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< HEAD
 8003f7a:	f000 fc87 	bl	800488c <HAL_RCC_GetSysClockFreq>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	4b51      	ldr	r3, [pc, #324]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	091b      	lsrs	r3, r3, #4
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	4950      	ldr	r1, [pc, #320]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003f8c:	5ccb      	ldrb	r3, [r1, r3]
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	fa22 f303 	lsr.w	r3, r2, r3
 8003f96:	4a4e      	ldr	r2, [pc, #312]	@ (80040d0 <HAL_RCC_OscConfig+0x278>)
 8003f98:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f9a:	4b4e      	ldr	r3, [pc, #312]	@ (80040d4 <HAL_RCC_OscConfig+0x27c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fd fa8a 	bl	80014b8 <HAL_InitTick>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d052      	beq.n	8004054 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	e364      	b.n	800467c <HAL_RCC_OscConfig+0x824>
=======
 8004946:	f000 fc87 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 800494a:	4602      	mov	r2, r0
 800494c:	4b51      	ldr	r3, [pc, #324]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	091b      	lsrs	r3, r3, #4
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	4950      	ldr	r1, [pc, #320]	@ (8004a98 <HAL_RCC_OscConfig+0x274>)
 8004958:	5ccb      	ldrb	r3, [r1, r3]
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	fa22 f303 	lsr.w	r3, r2, r3
 8004962:	4a4e      	ldr	r2, [pc, #312]	@ (8004a9c <HAL_RCC_OscConfig+0x278>)
 8004964:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004966:	4b4e      	ldr	r3, [pc, #312]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7fc fda0 	bl	80014b0 <HAL_InitTick>
 8004970:	4603      	mov	r3, r0
 8004972:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d052      	beq.n	8004a20 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	e364      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
>>>>>>> remotes/origin/jayce_working
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
<<<<<<< HEAD
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d032      	beq.n	8004020 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003fba:	4b43      	ldr	r3, [pc, #268]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a42      	ldr	r2, [pc, #264]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fc6:	f7fd fb8f 	bl	80016e8 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fce:	f7fd fb8b 	bl	80016e8 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e34d      	b.n	800467c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fe0:	4b39      	ldr	r3, [pc, #228]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x176>
=======
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d032      	beq.n	80049ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004986:	4b43      	ldr	r3, [pc, #268]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a42      	ldr	r2, [pc, #264]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004992:	f7fc feaf 	bl	80016f4 <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800499a:	f7fc feab 	bl	80016f4 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e34d      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049ac:	4b39      	ldr	r3, [pc, #228]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0f0      	beq.n	800499a <HAL_RCC_OscConfig+0x176>
>>>>>>> remotes/origin/jayce_working
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8003fec:	4b36      	ldr	r3, [pc, #216]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a35      	ldr	r2, [pc, #212]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003ff2:	f043 0308 	orr.w	r3, r3, #8
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	4b33      	ldr	r3, [pc, #204]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	4930      	ldr	r1, [pc, #192]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800400a:	4b2f      	ldr	r3, [pc, #188]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	492b      	ldr	r1, [pc, #172]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 800401a:	4313      	orrs	r3, r2
 800401c:	604b      	str	r3, [r1, #4]
 800401e:	e01a      	b.n	8004056 <HAL_RCC_OscConfig+0x1fe>
=======
 80049b8:	4b36      	ldr	r3, [pc, #216]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a35      	ldr	r2, [pc, #212]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 80049be:	f043 0308 	orr.w	r3, r3, #8
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	4b33      	ldr	r3, [pc, #204]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	4930      	ldr	r1, [pc, #192]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	021b      	lsls	r3, r3, #8
 80049e4:	492b      	ldr	r1, [pc, #172]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	604b      	str	r3, [r1, #4]
 80049ea:	e01a      	b.n	8004a22 <HAL_RCC_OscConfig+0x1fe>
>>>>>>> remotes/origin/jayce_working

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
<<<<<<< HEAD
 8004020:	4b29      	ldr	r3, [pc, #164]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a28      	ldr	r2, [pc, #160]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800402c:	f7fd fb5c 	bl	80016e8 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004034:	f7fd fb58 	bl	80016e8 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e31a      	b.n	800467c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004046:	4b20      	ldr	r3, [pc, #128]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x1dc>
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004054:	bf00      	nop
=======
 80049ec:	4b29      	ldr	r3, [pc, #164]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a28      	ldr	r2, [pc, #160]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 80049f2:	f023 0301 	bic.w	r3, r3, #1
 80049f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049f8:	f7fc fe7c 	bl	80016f4 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a00:	f7fc fe78 	bl	80016f4 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e31a      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a12:	4b20      	ldr	r3, [pc, #128]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0x1dc>
 8004a1e:	e000      	b.n	8004a22 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a20:	bf00      	nop
>>>>>>> remotes/origin/jayce_working
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d073      	beq.n	800414a <HAL_RCC_OscConfig+0x2f2>
=======
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d073      	beq.n	8004b16 <HAL_RCC_OscConfig+0x2f2>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
<<<<<<< HEAD
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	2b08      	cmp	r3, #8
 8004066:	d005      	beq.n	8004074 <HAL_RCC_OscConfig+0x21c>
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	2b0c      	cmp	r3, #12
 800406c:	d10e      	bne.n	800408c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2b03      	cmp	r3, #3
 8004072:	d10b      	bne.n	800408c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	4b14      	ldr	r3, [pc, #80]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d063      	beq.n	8004148 <HAL_RCC_OscConfig+0x2f0>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d15f      	bne.n	8004148 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e2f7      	b.n	800467c <HAL_RCC_OscConfig+0x824>
=======
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_OscConfig+0x21c>
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b0c      	cmp	r3, #12
 8004a38:	d10e      	bne.n	8004a58 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d10b      	bne.n	8004a58 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a40:	4b14      	ldr	r3, [pc, #80]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d063      	beq.n	8004b14 <HAL_RCC_OscConfig+0x2f0>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d15f      	bne.n	8004b14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e2f7      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
>>>>>>> remotes/origin/jayce_working
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004094:	d106      	bne.n	80040a4 <HAL_RCC_OscConfig+0x24c>
 8004096:	4b0c      	ldr	r3, [pc, #48]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a0b      	ldr	r2, [pc, #44]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e025      	b.n	80040f0 <HAL_RCC_OscConfig+0x298>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040ac:	d114      	bne.n	80040d8 <HAL_RCC_OscConfig+0x280>
 80040ae:	4b06      	ldr	r3, [pc, #24]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a05      	ldr	r2, [pc, #20]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 80040b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	4b03      	ldr	r3, [pc, #12]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a02      	ldr	r2, [pc, #8]	@ (80040c8 <HAL_RCC_OscConfig+0x270>)
 80040c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	e013      	b.n	80040f0 <HAL_RCC_OscConfig+0x298>
 80040c8:	40021000 	.word	0x40021000
 80040cc:	0800a2e0 	.word	0x0800a2e0
 80040d0:	20000000 	.word	0x20000000
 80040d4:	20000004 	.word	0x20000004
 80040d8:	4ba0      	ldr	r3, [pc, #640]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a9f      	ldr	r2, [pc, #636]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 80040de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	4b9d      	ldr	r3, [pc, #628]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a9c      	ldr	r2, [pc, #624]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 80040ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d013      	beq.n	8004120 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7fd faf6 	bl	80016e8 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004100:	f7fd faf2 	bl	80016e8 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b64      	cmp	r3, #100	@ 0x64
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e2b4      	b.n	800467c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004112:	4b92      	ldr	r3, [pc, #584]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0x2a8>
 800411e:	e014      	b.n	800414a <HAL_RCC_OscConfig+0x2f2>
=======
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a60:	d106      	bne.n	8004a70 <HAL_RCC_OscConfig+0x24c>
 8004a62:	4b0c      	ldr	r3, [pc, #48]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a0b      	ldr	r2, [pc, #44]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 8004a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	e025      	b.n	8004abc <HAL_RCC_OscConfig+0x298>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a78:	d114      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x280>
 8004a7a:	4b06      	ldr	r3, [pc, #24]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a05      	ldr	r2, [pc, #20]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 8004a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	4b03      	ldr	r3, [pc, #12]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a02      	ldr	r2, [pc, #8]	@ (8004a94 <HAL_RCC_OscConfig+0x270>)
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	e013      	b.n	8004abc <HAL_RCC_OscConfig+0x298>
 8004a94:	40021000 	.word	0x40021000
 8004a98:	0800a3e0 	.word	0x0800a3e0
 8004a9c:	20000000 	.word	0x20000000
 8004aa0:	20000004 	.word	0x20000004
 8004aa4:	4ba0      	ldr	r3, [pc, #640]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a9f      	ldr	r2, [pc, #636]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004aaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	4b9d      	ldr	r3, [pc, #628]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a9c      	ldr	r2, [pc, #624]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004ab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d013      	beq.n	8004aec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac4:	f7fc fe16 	bl	80016f4 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004acc:	f7fc fe12 	bl	80016f4 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b64      	cmp	r3, #100	@ 0x64
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e2b4      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ade:	4b92      	ldr	r3, [pc, #584]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f0      	beq.n	8004acc <HAL_RCC_OscConfig+0x2a8>
 8004aea:	e014      	b.n	8004b16 <HAL_RCC_OscConfig+0x2f2>
>>>>>>> remotes/origin/jayce_working
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8004120:	f7fd fae2 	bl	80016e8 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004128:	f7fd fade 	bl	80016e8 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	@ 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e2a0      	b.n	800467c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800413a:	4b88      	ldr	r3, [pc, #544]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x2d0>
 8004146:	e000      	b.n	800414a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004148:	bf00      	nop
=======
 8004aec:	f7fc fe02 	bl	80016f4 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af4:	f7fc fdfe 	bl	80016f4 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b64      	cmp	r3, #100	@ 0x64
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e2a0      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b06:	4b88      	ldr	r3, [pc, #544]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f0      	bne.n	8004af4 <HAL_RCC_OscConfig+0x2d0>
 8004b12:	e000      	b.n	8004b16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b14:	bf00      	nop
>>>>>>> remotes/origin/jayce_working
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d060      	beq.n	8004218 <HAL_RCC_OscConfig+0x3c0>
=======
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d060      	beq.n	8004be4 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> remotes/origin/jayce_working
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
<<<<<<< HEAD
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2b04      	cmp	r3, #4
 800415a:	d005      	beq.n	8004168 <HAL_RCC_OscConfig+0x310>
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b0c      	cmp	r3, #12
 8004160:	d119      	bne.n	8004196 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d116      	bne.n	8004196 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004168:	4b7c      	ldr	r3, [pc, #496]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_OscConfig+0x328>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e27d      	b.n	800467c <HAL_RCC_OscConfig+0x824>
=======
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d005      	beq.n	8004b34 <HAL_RCC_OscConfig+0x310>
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b0c      	cmp	r3, #12
 8004b2c:	d119      	bne.n	8004b62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d116      	bne.n	8004b62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b34:	4b7c      	ldr	r3, [pc, #496]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <HAL_RCC_OscConfig+0x328>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e27d      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
>>>>>>> remotes/origin/jayce_working
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8004180:	4b76      	ldr	r3, [pc, #472]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	061b      	lsls	r3, r3, #24
 800418e:	4973      	ldr	r1, [pc, #460]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 8004190:	4313      	orrs	r3, r2
 8004192:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004194:	e040      	b.n	8004218 <HAL_RCC_OscConfig+0x3c0>
=======
 8004b4c:	4b76      	ldr	r3, [pc, #472]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	061b      	lsls	r3, r3, #24
 8004b5a:	4973      	ldr	r1, [pc, #460]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b60:	e040      	b.n	8004be4 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> remotes/origin/jayce_working
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d023      	beq.n	80041e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800419e:	4b6f      	ldr	r3, [pc, #444]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a6e      	ldr	r2, [pc, #440]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 80041a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041aa:	f7fd fa9d 	bl	80016e8 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b2:	f7fd fa99 	bl	80016e8 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e25b      	b.n	800467c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c4:	4b65      	ldr	r3, [pc, #404]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x35a>
=======
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d023      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b6a:	4b6f      	ldr	r3, [pc, #444]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a6e      	ldr	r2, [pc, #440]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fc fdbd 	bl	80016f4 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b7e:	f7fc fdb9 	bl	80016f4 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e25b      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b90:	4b65      	ldr	r3, [pc, #404]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x35a>
>>>>>>> remotes/origin/jayce_working
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80041d0:	4b62      	ldr	r3, [pc, #392]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	495f      	ldr	r1, [pc, #380]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]
 80041e4:	e018      	b.n	8004218 <HAL_RCC_OscConfig+0x3c0>
=======
 8004b9c:	4b62      	ldr	r3, [pc, #392]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	061b      	lsls	r3, r3, #24
 8004baa:	495f      	ldr	r1, [pc, #380]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	604b      	str	r3, [r1, #4]
 8004bb0:	e018      	b.n	8004be4 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> remotes/origin/jayce_working
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 80041e6:	4b5d      	ldr	r3, [pc, #372]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a5c      	ldr	r2, [pc, #368]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 80041ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f2:	f7fd fa79 	bl	80016e8 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041fa:	f7fd fa75 	bl	80016e8 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e237      	b.n	800467c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800420c:	4b53      	ldr	r3, [pc, #332]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f0      	bne.n	80041fa <HAL_RCC_OscConfig+0x3a2>
=======
 8004bb2:	4b5d      	ldr	r3, [pc, #372]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a5c      	ldr	r2, [pc, #368]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004bb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbe:	f7fc fd99 	bl	80016f4 <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc6:	f7fc fd95 	bl	80016f4 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e237      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bd8:	4b53      	ldr	r3, [pc, #332]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1f0      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x3a2>
>>>>>>> remotes/origin/jayce_working
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d03c      	beq.n	800429e <HAL_RCC_OscConfig+0x446>
=======
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d03c      	beq.n	8004c6a <HAL_RCC_OscConfig+0x446>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01c      	beq.n	8004266 <HAL_RCC_OscConfig+0x40e>
=======
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01c      	beq.n	8004c32 <HAL_RCC_OscConfig+0x40e>
>>>>>>> remotes/origin/jayce_working
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
<<<<<<< HEAD
 800422c:	4b4b      	ldr	r3, [pc, #300]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 800422e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004232:	4a4a      	ldr	r2, [pc, #296]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423c:	f7fd fa54 	bl	80016e8 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004244:	f7fd fa50 	bl	80016e8 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e212      	b.n	800467c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004256:	4b41      	ldr	r3, [pc, #260]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 8004258:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0ef      	beq.n	8004244 <HAL_RCC_OscConfig+0x3ec>
 8004264:	e01b      	b.n	800429e <HAL_RCC_OscConfig+0x446>
=======
 8004bf8:	4b4b      	ldr	r3, [pc, #300]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bfe:	4a4a      	ldr	r2, [pc, #296]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c08:	f7fc fd74 	bl	80016f4 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c10:	f7fc fd70 	bl	80016f4 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e212      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c22:	4b41      	ldr	r3, [pc, #260]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0ef      	beq.n	8004c10 <HAL_RCC_OscConfig+0x3ec>
 8004c30:	e01b      	b.n	8004c6a <HAL_RCC_OscConfig+0x446>
>>>>>>> remotes/origin/jayce_working
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8004266:	4b3d      	ldr	r3, [pc, #244]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 8004268:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800426c:	4a3b      	ldr	r2, [pc, #236]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 800426e:	f023 0301 	bic.w	r3, r3, #1
 8004272:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004276:	f7fd fa37 	bl	80016e8 <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427e:	f7fd fa33 	bl	80016e8 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e1f5      	b.n	800467c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004290:	4b32      	ldr	r3, [pc, #200]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 8004292:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1ef      	bne.n	800427e <HAL_RCC_OscConfig+0x426>
=======
 8004c32:	4b3d      	ldr	r3, [pc, #244]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c38:	4a3b      	ldr	r2, [pc, #236]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004c3a:	f023 0301 	bic.w	r3, r3, #1
 8004c3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c42:	f7fc fd57 	bl	80016f4 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c4a:	f7fc fd53 	bl	80016f4 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e1f5      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c5c:	4b32      	ldr	r3, [pc, #200]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1ef      	bne.n	8004c4a <HAL_RCC_OscConfig+0x426>
>>>>>>> remotes/origin/jayce_working
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80a6 	beq.w	80043f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ac:	2300      	movs	r3, #0
 80042ae:	77fb      	strb	r3, [r7, #31]
=======
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0304 	and.w	r3, r3, #4
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 80a6 	beq.w	8004dc4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	77fb      	strb	r3, [r7, #31]
>>>>>>> remotes/origin/jayce_working
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
<<<<<<< HEAD
 80042b0:	4b2a      	ldr	r3, [pc, #168]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 80042b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10d      	bne.n	80042d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042bc:	4b27      	ldr	r3, [pc, #156]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 80042be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c0:	4a26      	ldr	r2, [pc, #152]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 80042c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80042c8:	4b24      	ldr	r3, [pc, #144]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 80042ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d4:	2301      	movs	r3, #1
 80042d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d8:	4b21      	ldr	r3, [pc, #132]	@ (8004360 <HAL_RCC_OscConfig+0x508>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d118      	bne.n	8004316 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004360 <HAL_RCC_OscConfig+0x508>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004360 <HAL_RCC_OscConfig+0x508>)
 80042ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f0:	f7fd f9fa 	bl	80016e8 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f8:	f7fd f9f6 	bl	80016e8 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e1b8      	b.n	800467c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800430a:	4b15      	ldr	r3, [pc, #84]	@ (8004360 <HAL_RCC_OscConfig+0x508>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0x4a0>
=======
 8004c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10d      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c88:	4b27      	ldr	r3, [pc, #156]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8c:	4a26      	ldr	r2, [pc, #152]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004c8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c92:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c94:	4b24      	ldr	r3, [pc, #144]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ca4:	4b21      	ldr	r3, [pc, #132]	@ (8004d2c <HAL_RCC_OscConfig+0x508>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d118      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8004d2c <HAL_RCC_OscConfig+0x508>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d2c <HAL_RCC_OscConfig+0x508>)
 8004cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cbc:	f7fc fd1a 	bl	80016f4 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc4:	f7fc fd16 	bl	80016f4 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e1b8      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cd6:	4b15      	ldr	r3, [pc, #84]	@ (8004d2c <HAL_RCC_OscConfig+0x508>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x4a0>
>>>>>>> remotes/origin/jayce_working
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d108      	bne.n	8004330 <HAL_RCC_OscConfig+0x4d8>
 800431e:	4b0f      	ldr	r3, [pc, #60]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004324:	4a0d      	ldr	r2, [pc, #52]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800432e:	e029      	b.n	8004384 <HAL_RCC_OscConfig+0x52c>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2b05      	cmp	r3, #5
 8004336:	d115      	bne.n	8004364 <HAL_RCC_OscConfig+0x50c>
 8004338:	4b08      	ldr	r3, [pc, #32]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433e:	4a07      	ldr	r2, [pc, #28]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 8004340:	f043 0304 	orr.w	r3, r3, #4
 8004344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004348:	4b04      	ldr	r3, [pc, #16]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434e:	4a03      	ldr	r2, [pc, #12]	@ (800435c <HAL_RCC_OscConfig+0x504>)
 8004350:	f043 0301 	orr.w	r3, r3, #1
 8004354:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004358:	e014      	b.n	8004384 <HAL_RCC_OscConfig+0x52c>
 800435a:	bf00      	nop
 800435c:	40021000 	.word	0x40021000
 8004360:	40007000 	.word	0x40007000
 8004364:	4b9d      	ldr	r3, [pc, #628]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 8004366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800436a:	4a9c      	ldr	r2, [pc, #624]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004374:	4b99      	ldr	r3, [pc, #612]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 8004376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800437a:	4a98      	ldr	r2, [pc, #608]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 800437c:	f023 0304 	bic.w	r3, r3, #4
 8004380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
=======
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d108      	bne.n	8004cfc <HAL_RCC_OscConfig+0x4d8>
 8004cea:	4b0f      	ldr	r3, [pc, #60]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cfa:	e029      	b.n	8004d50 <HAL_RCC_OscConfig+0x52c>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b05      	cmp	r3, #5
 8004d02:	d115      	bne.n	8004d30 <HAL_RCC_OscConfig+0x50c>
 8004d04:	4b08      	ldr	r3, [pc, #32]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d0a:	4a07      	ldr	r2, [pc, #28]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004d0c:	f043 0304 	orr.w	r3, r3, #4
 8004d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d14:	4b04      	ldr	r3, [pc, #16]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1a:	4a03      	ldr	r2, [pc, #12]	@ (8004d28 <HAL_RCC_OscConfig+0x504>)
 8004d1c:	f043 0301 	orr.w	r3, r3, #1
 8004d20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d24:	e014      	b.n	8004d50 <HAL_RCC_OscConfig+0x52c>
 8004d26:	bf00      	nop
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	40007000 	.word	0x40007000
 8004d30:	4b9d      	ldr	r3, [pc, #628]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d36:	4a9c      	ldr	r2, [pc, #624]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004d38:	f023 0301 	bic.w	r3, r3, #1
 8004d3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d40:	4b99      	ldr	r3, [pc, #612]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d46:	4a98      	ldr	r2, [pc, #608]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004d48:	f023 0304 	bic.w	r3, r3, #4
 8004d4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
>>>>>>> remotes/origin/jayce_working
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
<<<<<<< HEAD
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d016      	beq.n	80043ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438c:	f7fd f9ac 	bl	80016e8 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004392:	e00a      	b.n	80043aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004394:	f7fd f9a8 	bl	80016e8 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e168      	b.n	800467c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043aa:	4b8c      	ldr	r3, [pc, #560]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0ed      	beq.n	8004394 <HAL_RCC_OscConfig+0x53c>
 80043b8:	e015      	b.n	80043e6 <HAL_RCC_OscConfig+0x58e>
=======
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d016      	beq.n	8004d86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d58:	f7fc fccc 	bl	80016f4 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d5e:	e00a      	b.n	8004d76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d60:	f7fc fcc8 	bl	80016f4 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e168      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d76:	4b8c      	ldr	r3, [pc, #560]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0ed      	beq.n	8004d60 <HAL_RCC_OscConfig+0x53c>
 8004d84:	e015      	b.n	8004db2 <HAL_RCC_OscConfig+0x58e>
>>>>>>> remotes/origin/jayce_working
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 80043ba:	f7fd f995 	bl	80016e8 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043c0:	e00a      	b.n	80043d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c2:	f7fd f991 	bl	80016e8 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e151      	b.n	800467c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043d8:	4b80      	ldr	r3, [pc, #512]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1ed      	bne.n	80043c2 <HAL_RCC_OscConfig+0x56a>
=======
 8004d86:	f7fc fcb5 	bl	80016f4 <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d8c:	e00a      	b.n	8004da4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8e:	f7fc fcb1 	bl	80016f4 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e151      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004da4:	4b80      	ldr	r3, [pc, #512]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1ed      	bne.n	8004d8e <HAL_RCC_OscConfig+0x56a>
>>>>>>> remotes/origin/jayce_working
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 80043e6:	7ffb      	ldrb	r3, [r7, #31]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d105      	bne.n	80043f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ec:	4b7b      	ldr	r3, [pc, #492]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f0:	4a7a      	ldr	r2, [pc, #488]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 80043f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043f6:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 8004db2:	7ffb      	ldrb	r3, [r7, #31]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d105      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004db8:	4b7b      	ldr	r3, [pc, #492]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dbc:	4a7a      	ldr	r2, [pc, #488]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004dbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dc2:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> remotes/origin/jayce_working
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< HEAD
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d03c      	beq.n	800447e <HAL_RCC_OscConfig+0x626>
=======
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0320 	and.w	r3, r3, #32
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d03c      	beq.n	8004e4a <HAL_RCC_OscConfig+0x626>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< HEAD
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01c      	beq.n	8004446 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800440c:	4b73      	ldr	r3, [pc, #460]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 800440e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004412:	4a72      	ldr	r2, [pc, #456]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 8004414:	f043 0301 	orr.w	r3, r3, #1
 8004418:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441c:	f7fd f964 	bl	80016e8 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004424:	f7fd f960 	bl	80016e8 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e122      	b.n	800467c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004436:	4b69      	ldr	r3, [pc, #420]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 8004438:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0ef      	beq.n	8004424 <HAL_RCC_OscConfig+0x5cc>
 8004444:	e01b      	b.n	800447e <HAL_RCC_OscConfig+0x626>
=======
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01c      	beq.n	8004e12 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dd8:	4b73      	ldr	r3, [pc, #460]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dde:	4a72      	ldr	r2, [pc, #456]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004de0:	f043 0301 	orr.w	r3, r3, #1
 8004de4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de8:	f7fc fc84 	bl	80016f4 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004df0:	f7fc fc80 	bl	80016f4 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e122      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e02:	4b69      	ldr	r3, [pc, #420]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004e04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0ef      	beq.n	8004df0 <HAL_RCC_OscConfig+0x5cc>
 8004e10:	e01b      	b.n	8004e4a <HAL_RCC_OscConfig+0x626>
>>>>>>> remotes/origin/jayce_working
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< HEAD
 8004446:	4b65      	ldr	r3, [pc, #404]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 8004448:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800444c:	4a63      	ldr	r2, [pc, #396]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 800444e:	f023 0301 	bic.w	r3, r3, #1
 8004452:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004456:	f7fd f947 	bl	80016e8 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800445e:	f7fd f943 	bl	80016e8 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e105      	b.n	800467c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004470:	4b5a      	ldr	r3, [pc, #360]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 8004472:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1ef      	bne.n	800445e <HAL_RCC_OscConfig+0x606>
=======
 8004e12:	4b65      	ldr	r3, [pc, #404]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004e14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e18:	4a63      	ldr	r2, [pc, #396]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004e1a:	f023 0301 	bic.w	r3, r3, #1
 8004e1e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e22:	f7fc fc67 	bl	80016f4 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e2a:	f7fc fc63 	bl	80016f4 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e105      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004e3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1ef      	bne.n	8004e2a <HAL_RCC_OscConfig+0x606>
>>>>>>> remotes/origin/jayce_working
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< HEAD
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 80f9 	beq.w	800467a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	2b02      	cmp	r3, #2
 800448e:	f040 80cf 	bne.w	8004630 <HAL_RCC_OscConfig+0x7d8>
=======
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 80f9 	beq.w	8005046 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	f040 80cf 	bne.w	8004ffc <HAL_RCC_OscConfig+0x7d8>
>>>>>>> remotes/origin/jayce_working
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8004492:	4b52      	ldr	r3, [pc, #328]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f003 0203 	and.w	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d12c      	bne.n	8004500 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b0:	3b01      	subs	r3, #1
 80044b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d123      	bne.n	8004500 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d11b      	bne.n	8004500 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d113      	bne.n	8004500 <HAL_RCC_OscConfig+0x6a8>
=======
 8004e5e:	4b52      	ldr	r3, [pc, #328]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f003 0203 	and.w	r2, r3, #3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d12c      	bne.n	8004ecc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d123      	bne.n	8004ecc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e8e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d11b      	bne.n	8004ecc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d113      	bne.n	8004ecc <HAL_RCC_OscConfig+0x6a8>
>>>>>>> remotes/origin/jayce_working
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
<<<<<<< HEAD
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e2:	085b      	lsrs	r3, r3, #1
 80044e4:	3b01      	subs	r3, #1
 80044e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d109      	bne.n	8004500 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	3b01      	subs	r3, #1
 80044fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d071      	beq.n	80045e4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b0c      	cmp	r3, #12
 8004504:	d068      	beq.n	80045d8 <HAL_RCC_OscConfig+0x780>
=======
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d109      	bne.n	8004ecc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d071      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2b0c      	cmp	r3, #12
 8004ed0:	d068      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x780>
>>>>>>> remotes/origin/jayce_working
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
<<<<<<< HEAD
 8004506:	4b35      	ldr	r3, [pc, #212]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d105      	bne.n	800451e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004512:	4b32      	ldr	r3, [pc, #200]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_RCC_OscConfig+0x6ca>
=======
 8004ed2:	4b35      	ldr	r3, [pc, #212]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d105      	bne.n	8004eea <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ede:	4b32      	ldr	r3, [pc, #200]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <HAL_RCC_OscConfig+0x6ca>
>>>>>>> remotes/origin/jayce_working
#endif
            )
          {
            return HAL_ERROR;
<<<<<<< HEAD
 800451e:	2301      	movs	r3, #1
 8004520:	e0ac      	b.n	800467c <HAL_RCC_OscConfig+0x824>
=======
 8004eea:	2301      	movs	r3, #1
 8004eec:	e0ac      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
>>>>>>> remotes/origin/jayce_working
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8004522:	4b2e      	ldr	r3, [pc, #184]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2d      	ldr	r2, [pc, #180]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 8004528:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800452c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800452e:	f7fd f8db 	bl	80016e8 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004536:	f7fd f8d7 	bl	80016e8 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e099      	b.n	800467c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004548:	4b24      	ldr	r3, [pc, #144]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1f0      	bne.n	8004536 <HAL_RCC_OscConfig+0x6de>
=======
 8004eee:	4b2e      	ldr	r3, [pc, #184]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a2d      	ldr	r2, [pc, #180]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004ef4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ef8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004efa:	f7fc fbfb 	bl	80016f4 <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f02:	f7fc fbf7 	bl	80016f4 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e099      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f14:	4b24      	ldr	r3, [pc, #144]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1f0      	bne.n	8004f02 <HAL_RCC_OscConfig+0x6de>
>>>>>>> remotes/origin/jayce_working
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8004554:	4b21      	ldr	r3, [pc, #132]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	4b21      	ldr	r3, [pc, #132]	@ (80045e0 <HAL_RCC_OscConfig+0x788>)
 800455a:	4013      	ands	r3, r2
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004564:	3a01      	subs	r2, #1
 8004566:	0112      	lsls	r2, r2, #4
 8004568:	4311      	orrs	r1, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800456e:	0212      	lsls	r2, r2, #8
 8004570:	4311      	orrs	r1, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004576:	0852      	lsrs	r2, r2, #1
 8004578:	3a01      	subs	r2, #1
 800457a:	0552      	lsls	r2, r2, #21
 800457c:	4311      	orrs	r1, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004582:	0852      	lsrs	r2, r2, #1
 8004584:	3a01      	subs	r2, #1
 8004586:	0652      	lsls	r2, r2, #25
 8004588:	4311      	orrs	r1, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800458e:	06d2      	lsls	r2, r2, #27
 8004590:	430a      	orrs	r2, r1
 8004592:	4912      	ldr	r1, [pc, #72]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 8004594:	4313      	orrs	r3, r2
 8004596:	60cb      	str	r3, [r1, #12]
=======
 8004f20:	4b21      	ldr	r3, [pc, #132]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	4b21      	ldr	r3, [pc, #132]	@ (8004fac <HAL_RCC_OscConfig+0x788>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f30:	3a01      	subs	r2, #1
 8004f32:	0112      	lsls	r2, r2, #4
 8004f34:	4311      	orrs	r1, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f3a:	0212      	lsls	r2, r2, #8
 8004f3c:	4311      	orrs	r1, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f42:	0852      	lsrs	r2, r2, #1
 8004f44:	3a01      	subs	r2, #1
 8004f46:	0552      	lsls	r2, r2, #21
 8004f48:	4311      	orrs	r1, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004f4e:	0852      	lsrs	r2, r2, #1
 8004f50:	3a01      	subs	r2, #1
 8004f52:	0652      	lsls	r2, r2, #25
 8004f54:	4311      	orrs	r1, r2
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f5a:	06d2      	lsls	r2, r2, #27
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	4912      	ldr	r1, [pc, #72]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60cb      	str	r3, [r1, #12]
>>>>>>> remotes/origin/jayce_working
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8004598:	4b10      	ldr	r3, [pc, #64]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a0f      	ldr	r2, [pc, #60]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 800459e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045a4:	4b0d      	ldr	r3, [pc, #52]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4a0c      	ldr	r2, [pc, #48]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 80045aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045b0:	f7fd f89a 	bl	80016e8 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fd f896 	bl	80016e8 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e058      	b.n	800467c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ca:	4b04      	ldr	r3, [pc, #16]	@ (80045dc <HAL_RCC_OscConfig+0x784>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045d6:	e050      	b.n	800467a <HAL_RCC_OscConfig+0x822>
=======
 8004f64:	4b10      	ldr	r3, [pc, #64]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a0f      	ldr	r2, [pc, #60]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f70:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	4a0c      	ldr	r2, [pc, #48]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004f76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f7c:	f7fc fbba 	bl	80016f4 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f84:	f7fc fbb6 	bl	80016f4 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e058      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f96:	4b04      	ldr	r3, [pc, #16]	@ (8004fa8 <HAL_RCC_OscConfig+0x784>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0f0      	beq.n	8004f84 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fa2:	e050      	b.n	8005046 <HAL_RCC_OscConfig+0x822>
>>>>>>> remotes/origin/jayce_working
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
<<<<<<< HEAD
 80045d8:	2301      	movs	r3, #1
 80045da:	e04f      	b.n	800467c <HAL_RCC_OscConfig+0x824>
 80045dc:	40021000 	.word	0x40021000
 80045e0:	019d808c 	.word	0x019d808c
=======
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e04f      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	019d808c 	.word	0x019d808c
>>>>>>> remotes/origin/jayce_working
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
<<<<<<< HEAD
 80045e4:	4b27      	ldr	r3, [pc, #156]	@ (8004684 <HAL_RCC_OscConfig+0x82c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d144      	bne.n	800467a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045f0:	4b24      	ldr	r3, [pc, #144]	@ (8004684 <HAL_RCC_OscConfig+0x82c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a23      	ldr	r2, [pc, #140]	@ (8004684 <HAL_RCC_OscConfig+0x82c>)
 80045f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045fc:	4b21      	ldr	r3, [pc, #132]	@ (8004684 <HAL_RCC_OscConfig+0x82c>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	4a20      	ldr	r2, [pc, #128]	@ (8004684 <HAL_RCC_OscConfig+0x82c>)
 8004602:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004606:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004608:	f7fd f86e 	bl	80016e8 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004610:	f7fd f86a 	bl	80016e8 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e02c      	b.n	800467c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004622:	4b18      	ldr	r3, [pc, #96]	@ (8004684 <HAL_RCC_OscConfig+0x82c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x7b8>
 800462e:	e024      	b.n	800467a <HAL_RCC_OscConfig+0x822>
=======
 8004fb0:	4b27      	ldr	r3, [pc, #156]	@ (8005050 <HAL_RCC_OscConfig+0x82c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d144      	bne.n	8005046 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004fbc:	4b24      	ldr	r3, [pc, #144]	@ (8005050 <HAL_RCC_OscConfig+0x82c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a23      	ldr	r2, [pc, #140]	@ (8005050 <HAL_RCC_OscConfig+0x82c>)
 8004fc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fc8:	4b21      	ldr	r3, [pc, #132]	@ (8005050 <HAL_RCC_OscConfig+0x82c>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	4a20      	ldr	r2, [pc, #128]	@ (8005050 <HAL_RCC_OscConfig+0x82c>)
 8004fce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fd4:	f7fc fb8e 	bl	80016f4 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fdc:	f7fc fb8a 	bl	80016f4 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e02c      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fee:	4b18      	ldr	r3, [pc, #96]	@ (8005050 <HAL_RCC_OscConfig+0x82c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0x7b8>
 8004ffa:	e024      	b.n	8005046 <HAL_RCC_OscConfig+0x822>
>>>>>>> remotes/origin/jayce_working
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
<<<<<<< HEAD
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b0c      	cmp	r3, #12
 8004634:	d01f      	beq.n	8004676 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004636:	4b13      	ldr	r3, [pc, #76]	@ (8004684 <HAL_RCC_OscConfig+0x82c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a12      	ldr	r2, [pc, #72]	@ (8004684 <HAL_RCC_OscConfig+0x82c>)
 800463c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004642:	f7fd f851 	bl	80016e8 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464a:	f7fd f84d 	bl	80016e8 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e00f      	b.n	800467c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800465c:	4b09      	ldr	r3, [pc, #36]	@ (8004684 <HAL_RCC_OscConfig+0x82c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f0      	bne.n	800464a <HAL_RCC_OscConfig+0x7f2>
=======
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	2b0c      	cmp	r3, #12
 8005000:	d01f      	beq.n	8005042 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005002:	4b13      	ldr	r3, [pc, #76]	@ (8005050 <HAL_RCC_OscConfig+0x82c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a12      	ldr	r2, [pc, #72]	@ (8005050 <HAL_RCC_OscConfig+0x82c>)
 8005008:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800500c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500e:	f7fc fb71 	bl	80016f4 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005016:	f7fc fb6d 	bl	80016f4 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e00f      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005028:	4b09      	ldr	r3, [pc, #36]	@ (8005050 <HAL_RCC_OscConfig+0x82c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1f0      	bne.n	8005016 <HAL_RCC_OscConfig+0x7f2>
>>>>>>> remotes/origin/jayce_working
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
<<<<<<< HEAD
 8004668:	4b06      	ldr	r3, [pc, #24]	@ (8004684 <HAL_RCC_OscConfig+0x82c>)
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	4905      	ldr	r1, [pc, #20]	@ (8004684 <HAL_RCC_OscConfig+0x82c>)
 800466e:	4b06      	ldr	r3, [pc, #24]	@ (8004688 <HAL_RCC_OscConfig+0x830>)
 8004670:	4013      	ands	r3, r2
 8004672:	60cb      	str	r3, [r1, #12]
 8004674:	e001      	b.n	800467a <HAL_RCC_OscConfig+0x822>
=======
 8005034:	4b06      	ldr	r3, [pc, #24]	@ (8005050 <HAL_RCC_OscConfig+0x82c>)
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	4905      	ldr	r1, [pc, #20]	@ (8005050 <HAL_RCC_OscConfig+0x82c>)
 800503a:	4b06      	ldr	r3, [pc, #24]	@ (8005054 <HAL_RCC_OscConfig+0x830>)
 800503c:	4013      	ands	r3, r2
 800503e:	60cb      	str	r3, [r1, #12]
 8005040:	e001      	b.n	8005046 <HAL_RCC_OscConfig+0x822>
>>>>>>> remotes/origin/jayce_working
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
<<<<<<< HEAD
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_RCC_OscConfig+0x824>
=======
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <HAL_RCC_OscConfig+0x824>
>>>>>>> remotes/origin/jayce_working
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3720      	adds	r7, #32
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40021000 	.word	0x40021000
 8004688:	feeefffc 	.word	0xfeeefffc

0800468c <HAL_RCC_ClockConfig>:
=======
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3720      	adds	r7, #32
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40021000 	.word	0x40021000
 8005054:	feeefffc 	.word	0xfeeefffc

08005058 <HAL_RCC_ClockConfig>:
>>>>>>> remotes/origin/jayce_working
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
=======
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
>>>>>>> remotes/origin/jayce_working
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0e7      	b.n	8004870 <HAL_RCC_ClockConfig+0x1e4>
=======
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0e7      	b.n	800523c <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> remotes/origin/jayce_working
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80046a0:	4b75      	ldr	r3, [pc, #468]	@ (8004878 <HAL_RCC_ClockConfig+0x1ec>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d910      	bls.n	80046d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ae:	4b72      	ldr	r3, [pc, #456]	@ (8004878 <HAL_RCC_ClockConfig+0x1ec>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 0207 	bic.w	r2, r3, #7
 80046b6:	4970      	ldr	r1, [pc, #448]	@ (8004878 <HAL_RCC_ClockConfig+0x1ec>)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	600b      	str	r3, [r1, #0]
=======
 800506c:	4b75      	ldr	r3, [pc, #468]	@ (8005244 <HAL_RCC_ClockConfig+0x1ec>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d910      	bls.n	800509c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507a:	4b72      	ldr	r3, [pc, #456]	@ (8005244 <HAL_RCC_ClockConfig+0x1ec>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f023 0207 	bic.w	r2, r3, #7
 8005082:	4970      	ldr	r1, [pc, #448]	@ (8005244 <HAL_RCC_ClockConfig+0x1ec>)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	4313      	orrs	r3, r2
 8005088:	600b      	str	r3, [r1, #0]
>>>>>>> remotes/origin/jayce_working

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80046be:	4b6e      	ldr	r3, [pc, #440]	@ (8004878 <HAL_RCC_ClockConfig+0x1ec>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d001      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0cf      	b.n	8004870 <HAL_RCC_ClockConfig+0x1e4>
=======
 800508a:	4b6e      	ldr	r3, [pc, #440]	@ (8005244 <HAL_RCC_ClockConfig+0x1ec>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d001      	beq.n	800509c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e0cf      	b.n	800523c <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> remotes/origin/jayce_working
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d010      	beq.n	80046fe <HAL_RCC_ClockConfig+0x72>
=======
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d010      	beq.n	80050ca <HAL_RCC_ClockConfig+0x72>
>>>>>>> remotes/origin/jayce_working
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
<<<<<<< HEAD
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	4b66      	ldr	r3, [pc, #408]	@ (800487c <HAL_RCC_ClockConfig+0x1f0>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d908      	bls.n	80046fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ec:	4b63      	ldr	r3, [pc, #396]	@ (800487c <HAL_RCC_ClockConfig+0x1f0>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	4960      	ldr	r1, [pc, #384]	@ (800487c <HAL_RCC_ClockConfig+0x1f0>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	608b      	str	r3, [r1, #8]
=======
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	4b66      	ldr	r3, [pc, #408]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d908      	bls.n	80050ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b8:	4b63      	ldr	r3, [pc, #396]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	4960      	ldr	r1, [pc, #384]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	608b      	str	r3, [r1, #8]
>>>>>>> remotes/origin/jayce_working
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d04c      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x118>
=======
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d04c      	beq.n	8005170 <HAL_RCC_ClockConfig+0x118>
>>>>>>> remotes/origin/jayce_working
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b03      	cmp	r3, #3
 8004710:	d107      	bne.n	8004722 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004712:	4b5a      	ldr	r3, [pc, #360]	@ (800487c <HAL_RCC_ClockConfig+0x1f0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d121      	bne.n	8004762 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e0a6      	b.n	8004870 <HAL_RCC_ClockConfig+0x1e4>
=======
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d107      	bne.n	80050ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050de:	4b5a      	ldr	r3, [pc, #360]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d121      	bne.n	800512e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e0a6      	b.n	800523c <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> remotes/origin/jayce_working
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d107      	bne.n	800473a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800472a:	4b54      	ldr	r3, [pc, #336]	@ (800487c <HAL_RCC_ClockConfig+0x1f0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d115      	bne.n	8004762 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e09a      	b.n	8004870 <HAL_RCC_ClockConfig+0x1e4>
=======
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d107      	bne.n	8005106 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050f6:	4b54      	ldr	r3, [pc, #336]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d115      	bne.n	800512e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e09a      	b.n	800523c <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> remotes/origin/jayce_working
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
<<<<<<< HEAD
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d107      	bne.n	8004752 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004742:	4b4e      	ldr	r3, [pc, #312]	@ (800487c <HAL_RCC_ClockConfig+0x1f0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e08e      	b.n	8004870 <HAL_RCC_ClockConfig+0x1e4>
=======
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d107      	bne.n	800511e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800510e:	4b4e      	ldr	r3, [pc, #312]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e08e      	b.n	800523c <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> remotes/origin/jayce_working
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
<<<<<<< HEAD
 8004752:	4b4a      	ldr	r3, [pc, #296]	@ (800487c <HAL_RCC_ClockConfig+0x1f0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e086      	b.n	8004870 <HAL_RCC_ClockConfig+0x1e4>
=======
 800511e:	4b4a      	ldr	r3, [pc, #296]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e086      	b.n	800523c <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> remotes/origin/jayce_working
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8004762:	4b46      	ldr	r3, [pc, #280]	@ (800487c <HAL_RCC_ClockConfig+0x1f0>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f023 0203 	bic.w	r2, r3, #3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	4943      	ldr	r1, [pc, #268]	@ (800487c <HAL_RCC_ClockConfig+0x1f0>)
 8004770:	4313      	orrs	r3, r2
 8004772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004774:	f7fc ffb8 	bl	80016e8 <HAL_GetTick>
 8004778:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477a:	e00a      	b.n	8004792 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800477c:	f7fc ffb4 	bl	80016e8 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800478a:	4293      	cmp	r3, r2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e06e      	b.n	8004870 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004792:	4b3a      	ldr	r3, [pc, #232]	@ (800487c <HAL_RCC_ClockConfig+0x1f0>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 020c 	and.w	r2, r3, #12
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d1eb      	bne.n	800477c <HAL_RCC_ClockConfig+0xf0>
=======
 800512e:	4b46      	ldr	r3, [pc, #280]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f023 0203 	bic.w	r2, r3, #3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4943      	ldr	r1, [pc, #268]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 800513c:	4313      	orrs	r3, r2
 800513e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005140:	f7fc fad8 	bl	80016f4 <HAL_GetTick>
 8005144:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005146:	e00a      	b.n	800515e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005148:	f7fc fad4 	bl	80016f4 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e06e      	b.n	800523c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515e:	4b3a      	ldr	r3, [pc, #232]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 020c 	and.w	r2, r3, #12
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	429a      	cmp	r2, r3
 800516e:	d1eb      	bne.n	8005148 <HAL_RCC_ClockConfig+0xf0>
>>>>>>> remotes/origin/jayce_working
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d010      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	4b31      	ldr	r3, [pc, #196]	@ (800487c <HAL_RCC_ClockConfig+0x1f0>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047bc:	429a      	cmp	r2, r3
 80047be:	d208      	bcs.n	80047d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c0:	4b2e      	ldr	r3, [pc, #184]	@ (800487c <HAL_RCC_ClockConfig+0x1f0>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	492b      	ldr	r1, [pc, #172]	@ (800487c <HAL_RCC_ClockConfig+0x1f0>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	608b      	str	r3, [r1, #8]
=======
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d010      	beq.n	800519e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	4b31      	ldr	r3, [pc, #196]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005188:	429a      	cmp	r2, r3
 800518a:	d208      	bcs.n	800519e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800518c:	4b2e      	ldr	r3, [pc, #184]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	492b      	ldr	r1, [pc, #172]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 800519a:	4313      	orrs	r3, r2
 800519c:	608b      	str	r3, [r1, #8]
>>>>>>> remotes/origin/jayce_working
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80047d2:	4b29      	ldr	r3, [pc, #164]	@ (8004878 <HAL_RCC_ClockConfig+0x1ec>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d210      	bcs.n	8004802 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e0:	4b25      	ldr	r3, [pc, #148]	@ (8004878 <HAL_RCC_ClockConfig+0x1ec>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f023 0207 	bic.w	r2, r3, #7
 80047e8:	4923      	ldr	r1, [pc, #140]	@ (8004878 <HAL_RCC_ClockConfig+0x1ec>)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	600b      	str	r3, [r1, #0]
=======
 800519e:	4b29      	ldr	r3, [pc, #164]	@ (8005244 <HAL_RCC_ClockConfig+0x1ec>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d210      	bcs.n	80051ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ac:	4b25      	ldr	r3, [pc, #148]	@ (8005244 <HAL_RCC_ClockConfig+0x1ec>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f023 0207 	bic.w	r2, r3, #7
 80051b4:	4923      	ldr	r1, [pc, #140]	@ (8005244 <HAL_RCC_ClockConfig+0x1ec>)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	600b      	str	r3, [r1, #0]
>>>>>>> remotes/origin/jayce_working

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80047f0:	4b21      	ldr	r3, [pc, #132]	@ (8004878 <HAL_RCC_ClockConfig+0x1ec>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d001      	beq.n	8004802 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e036      	b.n	8004870 <HAL_RCC_ClockConfig+0x1e4>
=======
 80051bc:	4b21      	ldr	r3, [pc, #132]	@ (8005244 <HAL_RCC_ClockConfig+0x1ec>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d001      	beq.n	80051ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e036      	b.n	800523c <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> remotes/origin/jayce_working
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800480e:	4b1b      	ldr	r3, [pc, #108]	@ (800487c <HAL_RCC_ClockConfig+0x1f0>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	4918      	ldr	r1, [pc, #96]	@ (800487c <HAL_RCC_ClockConfig+0x1f0>)
 800481c:	4313      	orrs	r3, r2
 800481e:	608b      	str	r3, [r1, #8]
=======
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d008      	beq.n	80051ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051da:	4b1b      	ldr	r3, [pc, #108]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	4918      	ldr	r1, [pc, #96]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	608b      	str	r3, [r1, #8]
>>>>>>> remotes/origin/jayce_working
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800482c:	4b13      	ldr	r3, [pc, #76]	@ (800487c <HAL_RCC_ClockConfig+0x1f0>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	4910      	ldr	r1, [pc, #64]	@ (800487c <HAL_RCC_ClockConfig+0x1f0>)
 800483c:	4313      	orrs	r3, r2
 800483e:	608b      	str	r3, [r1, #8]
=======
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d009      	beq.n	800520c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051f8:	4b13      	ldr	r3, [pc, #76]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	4910      	ldr	r1, [pc, #64]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 8005208:	4313      	orrs	r3, r2
 800520a:	608b      	str	r3, [r1, #8]
>>>>>>> remotes/origin/jayce_working
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< HEAD
 8004840:	f000 f824 	bl	800488c <HAL_RCC_GetSysClockFreq>
 8004844:	4602      	mov	r2, r0
 8004846:	4b0d      	ldr	r3, [pc, #52]	@ (800487c <HAL_RCC_ClockConfig+0x1f0>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	490b      	ldr	r1, [pc, #44]	@ (8004880 <HAL_RCC_ClockConfig+0x1f4>)
 8004852:	5ccb      	ldrb	r3, [r1, r3]
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
 800485c:	4a09      	ldr	r2, [pc, #36]	@ (8004884 <HAL_RCC_ClockConfig+0x1f8>)
 800485e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004860:	4b09      	ldr	r3, [pc, #36]	@ (8004888 <HAL_RCC_ClockConfig+0x1fc>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4618      	mov	r0, r3
 8004866:	f7fc fe27 	bl	80014b8 <HAL_InitTick>
 800486a:	4603      	mov	r3, r0
 800486c:	72fb      	strb	r3, [r7, #11]

  return status;
 800486e:	7afb      	ldrb	r3, [r7, #11]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40022000 	.word	0x40022000
 800487c:	40021000 	.word	0x40021000
 8004880:	0800a2e0 	.word	0x0800a2e0
 8004884:	20000000 	.word	0x20000000
 8004888:	20000004 	.word	0x20000004

0800488c <HAL_RCC_GetSysClockFreq>:
=======
 800520c:	f000 f824 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8005210:	4602      	mov	r2, r0
 8005212:	4b0d      	ldr	r3, [pc, #52]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	091b      	lsrs	r3, r3, #4
 8005218:	f003 030f 	and.w	r3, r3, #15
 800521c:	490b      	ldr	r1, [pc, #44]	@ (800524c <HAL_RCC_ClockConfig+0x1f4>)
 800521e:	5ccb      	ldrb	r3, [r1, r3]
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	fa22 f303 	lsr.w	r3, r2, r3
 8005228:	4a09      	ldr	r2, [pc, #36]	@ (8005250 <HAL_RCC_ClockConfig+0x1f8>)
 800522a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800522c:	4b09      	ldr	r3, [pc, #36]	@ (8005254 <HAL_RCC_ClockConfig+0x1fc>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f7fc f93d 	bl	80014b0 <HAL_InitTick>
 8005236:	4603      	mov	r3, r0
 8005238:	72fb      	strb	r3, [r7, #11]

  return status;
 800523a:	7afb      	ldrb	r3, [r7, #11]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40022000 	.word	0x40022000
 8005248:	40021000 	.word	0x40021000
 800524c:	0800a3e0 	.word	0x0800a3e0
 8005250:	20000000 	.word	0x20000000
 8005254:	20000004 	.word	0x20000004

08005258 <HAL_RCC_GetSysClockFreq>:
>>>>>>> remotes/origin/jayce_working
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 800488c:	b480      	push	{r7}
 800488e:	b089      	sub	sp, #36	@ 0x24
 8004890:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
 8004896:	2300      	movs	r3, #0
 8004898:	61bb      	str	r3, [r7, #24]
=======
 8005258:	b480      	push	{r7}
 800525a:	b089      	sub	sp, #36	@ 0x24
 800525c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
 8005262:	2300      	movs	r3, #0
 8005264:	61bb      	str	r3, [r7, #24]
>>>>>>> remotes/origin/jayce_working
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 800489a:	4b3e      	ldr	r3, [pc, #248]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x108>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
 80048a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x108>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <HAL_RCC_GetSysClockFreq+0x34>
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	2b0c      	cmp	r3, #12
 80048b8:	d121      	bne.n	80048fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d11e      	bne.n	80048fe <HAL_RCC_GetSysClockFreq+0x72>
=======
 8005266:	4b3e      	ldr	r3, [pc, #248]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x108>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 030c 	and.w	r3, r3, #12
 800526e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005270:	4b3b      	ldr	r3, [pc, #236]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x108>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d005      	beq.n	800528c <HAL_RCC_GetSysClockFreq+0x34>
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	2b0c      	cmp	r3, #12
 8005284:	d121      	bne.n	80052ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d11e      	bne.n	80052ca <HAL_RCC_GetSysClockFreq+0x72>
>>>>>>> remotes/origin/jayce_working
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
<<<<<<< HEAD
 80048c0:	4b34      	ldr	r3, [pc, #208]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x108>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d107      	bne.n	80048dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048cc:	4b31      	ldr	r3, [pc, #196]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048d2:	0a1b      	lsrs	r3, r3, #8
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	61fb      	str	r3, [r7, #28]
 80048da:	e005      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x5c>
=======
 800528c:	4b34      	ldr	r3, [pc, #208]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x108>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d107      	bne.n	80052a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005298:	4b31      	ldr	r3, [pc, #196]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x108>)
 800529a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	61fb      	str	r3, [r7, #28]
 80052a6:	e005      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x5c>
>>>>>>> remotes/origin/jayce_working
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
<<<<<<< HEAD
 80048dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x108>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	091b      	lsrs	r3, r3, #4
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004998 <HAL_RCC_GetSysClockFreq+0x10c>)
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10d      	bne.n	8004914 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048fc:	e00a      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b04      	cmp	r3, #4
 8004902:	d102      	bne.n	800490a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004904:	4b25      	ldr	r3, [pc, #148]	@ (800499c <HAL_RCC_GetSysClockFreq+0x110>)
 8004906:	61bb      	str	r3, [r7, #24]
 8004908:	e004      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d101      	bne.n	8004914 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004910:	4b23      	ldr	r3, [pc, #140]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004912:	61bb      	str	r3, [r7, #24]
=======
 80052a8:	4b2d      	ldr	r3, [pc, #180]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x108>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	091b      	lsrs	r3, r3, #4
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005364 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10d      	bne.n	80052e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052c8:	e00a      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d102      	bne.n	80052d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052d0:	4b25      	ldr	r3, [pc, #148]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x110>)
 80052d2:	61bb      	str	r3, [r7, #24]
 80052d4:	e004      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d101      	bne.n	80052e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052dc:	4b23      	ldr	r3, [pc, #140]	@ (800536c <HAL_RCC_GetSysClockFreq+0x114>)
 80052de:	61bb      	str	r3, [r7, #24]
>>>>>>> remotes/origin/jayce_working
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
<<<<<<< HEAD
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b0c      	cmp	r3, #12
 8004918:	d134      	bne.n	8004984 <HAL_RCC_GetSysClockFreq+0xf8>
=======
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	2b0c      	cmp	r3, #12
 80052e4:	d134      	bne.n	8005350 <HAL_RCC_GetSysClockFreq+0xf8>
>>>>>>> remotes/origin/jayce_working
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< HEAD
 800491a:	4b1e      	ldr	r3, [pc, #120]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x108>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d003      	beq.n	8004932 <HAL_RCC_GetSysClockFreq+0xa6>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b03      	cmp	r3, #3
 800492e:	d003      	beq.n	8004938 <HAL_RCC_GetSysClockFreq+0xac>
 8004930:	e005      	b.n	800493e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004932:	4b1a      	ldr	r3, [pc, #104]	@ (800499c <HAL_RCC_GetSysClockFreq+0x110>)
 8004934:	617b      	str	r3, [r7, #20]
      break;
 8004936:	e005      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004938:	4b19      	ldr	r3, [pc, #100]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800493a:	617b      	str	r3, [r7, #20]
      break;
 800493c:	e002      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0xb8>
=======
 80052e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x108>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d003      	beq.n	80052fe <HAL_RCC_GetSysClockFreq+0xa6>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d003      	beq.n	8005304 <HAL_RCC_GetSysClockFreq+0xac>
 80052fc:	e005      	b.n	800530a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x110>)
 8005300:	617b      	str	r3, [r7, #20]
      break;
 8005302:	e005      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005304:	4b19      	ldr	r3, [pc, #100]	@ (800536c <HAL_RCC_GetSysClockFreq+0x114>)
 8005306:	617b      	str	r3, [r7, #20]
      break;
 8005308:	e002      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0xb8>
>>>>>>> remotes/origin/jayce_working

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
<<<<<<< HEAD
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	617b      	str	r3, [r7, #20]
      break;
 8004942:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004944:	4b13      	ldr	r3, [pc, #76]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x108>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	3301      	adds	r3, #1
 8004950:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004952:	4b10      	ldr	r3, [pc, #64]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x108>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	0a1b      	lsrs	r3, r3, #8
 8004958:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	fb03 f202 	mul.w	r2, r3, r2
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800496a:	4b0a      	ldr	r3, [pc, #40]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x108>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	0e5b      	lsrs	r3, r3, #25
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	3301      	adds	r3, #1
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004982:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004984:	69bb      	ldr	r3, [r7, #24]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3724      	adds	r7, #36	@ 0x24
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40021000 	.word	0x40021000
 8004998:	0800a2f8 	.word	0x0800a2f8
 800499c:	00f42400 	.word	0x00f42400
 80049a0:	007a1200 	.word	0x007a1200

080049a4 <HAL_RCC_GetHCLKFreq>:
=======
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	617b      	str	r3, [r7, #20]
      break;
 800530e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005310:	4b13      	ldr	r3, [pc, #76]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x108>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	091b      	lsrs	r3, r3, #4
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	3301      	adds	r3, #1
 800531c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800531e:	4b10      	ldr	r3, [pc, #64]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x108>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	0a1b      	lsrs	r3, r3, #8
 8005324:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	fb03 f202 	mul.w	r2, r3, r2
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	fbb2 f3f3 	udiv	r3, r2, r3
 8005334:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005336:	4b0a      	ldr	r3, [pc, #40]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x108>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	0e5b      	lsrs	r3, r3, #25
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	3301      	adds	r3, #1
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	fbb2 f3f3 	udiv	r3, r2, r3
 800534e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005350:	69bb      	ldr	r3, [r7, #24]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3724      	adds	r7, #36	@ 0x24
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40021000 	.word	0x40021000
 8005364:	0800a3f8 	.word	0x0800a3f8
 8005368:	00f42400 	.word	0x00f42400
 800536c:	007a1200 	.word	0x007a1200

08005370 <HAL_RCC_GetHCLKFreq>:
>>>>>>> remotes/origin/jayce_working
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049a8:	4b03      	ldr	r3, [pc, #12]	@ (80049b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80049aa:	681b      	ldr	r3, [r3, #0]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	20000000 	.word	0x20000000

080049bc <HAL_RCC_GetPCLK1Freq>:
=======
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005374:	4b03      	ldr	r3, [pc, #12]	@ (8005384 <HAL_RCC_GetHCLKFreq+0x14>)
 8005376:	681b      	ldr	r3, [r3, #0]
}
 8005378:	4618      	mov	r0, r3
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	20000000 	.word	0x20000000

08005388 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> remotes/origin/jayce_working
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049c0:	f7ff fff0 	bl	80049a4 <HAL_RCC_GetHCLKFreq>
 80049c4:	4602      	mov	r2, r0
 80049c6:	4b06      	ldr	r3, [pc, #24]	@ (80049e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	0a1b      	lsrs	r3, r3, #8
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	4904      	ldr	r1, [pc, #16]	@ (80049e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049d2:	5ccb      	ldrb	r3, [r1, r3]
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049dc:	4618      	mov	r0, r3
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40021000 	.word	0x40021000
 80049e4:	0800a2f0 	.word	0x0800a2f0

080049e8 <HAL_RCC_GetPCLK2Freq>:
=======
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800538c:	f7ff fff0 	bl	8005370 <HAL_RCC_GetHCLKFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b06      	ldr	r3, [pc, #24]	@ (80053ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	0a1b      	lsrs	r3, r3, #8
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4904      	ldr	r1, [pc, #16]	@ (80053b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40021000 	.word	0x40021000
 80053b0:	0800a3f0 	.word	0x0800a3f0

080053b4 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> remotes/origin/jayce_working
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049ec:	f7ff ffda 	bl	80049a4 <HAL_RCC_GetHCLKFreq>
 80049f0:	4602      	mov	r2, r0
 80049f2:	4b06      	ldr	r3, [pc, #24]	@ (8004a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	0adb      	lsrs	r3, r3, #11
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	4904      	ldr	r1, [pc, #16]	@ (8004a10 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049fe:	5ccb      	ldrb	r3, [r1, r3]
 8004a00:	f003 031f 	and.w	r3, r3, #31
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	0800a2f0 	.word	0x0800a2f0

08004a14 <HAL_RCC_GetClockConfig>:
=======
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053b8:	f7ff ffda 	bl	8005370 <HAL_RCC_GetHCLKFreq>
 80053bc:	4602      	mov	r2, r0
 80053be:	4b06      	ldr	r3, [pc, #24]	@ (80053d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	0adb      	lsrs	r3, r3, #11
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	4904      	ldr	r1, [pc, #16]	@ (80053dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ca:	5ccb      	ldrb	r3, [r1, r3]
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40021000 	.word	0x40021000
 80053dc:	0800a3f0 	.word	0x0800a3f0

080053e0 <HAL_RCC_GetClockConfig>:
>>>>>>> remotes/origin/jayce_working
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< HEAD
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
=======
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
>>>>>>> remotes/origin/jayce_working
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
<<<<<<< HEAD
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	220f      	movs	r2, #15
 8004a22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a24:	4b12      	ldr	r3, [pc, #72]	@ (8004a70 <HAL_RCC_GetClockConfig+0x5c>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 0203 	and.w	r2, r3, #3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004a30:	4b0f      	ldr	r3, [pc, #60]	@ (8004a70 <HAL_RCC_GetClockConfig+0x5c>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a70 <HAL_RCC_GetClockConfig+0x5c>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a48:	4b09      	ldr	r3, [pc, #36]	@ (8004a70 <HAL_RCC_GetClockConfig+0x5c>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	08db      	lsrs	r3, r3, #3
 8004a4e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a56:	4b07      	ldr	r3, [pc, #28]	@ (8004a74 <HAL_RCC_GetClockConfig+0x60>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0207 	and.w	r2, r3, #7
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	601a      	str	r2, [r3, #0]
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40022000 	.word	0x40022000

08004a78 <RCC_SetFlashLatencyFromMSIRange>:
=======
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	220f      	movs	r2, #15
 80053ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80053f0:	4b12      	ldr	r3, [pc, #72]	@ (800543c <HAL_RCC_GetClockConfig+0x5c>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f003 0203 	and.w	r2, r3, #3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80053fc:	4b0f      	ldr	r3, [pc, #60]	@ (800543c <HAL_RCC_GetClockConfig+0x5c>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005408:	4b0c      	ldr	r3, [pc, #48]	@ (800543c <HAL_RCC_GetClockConfig+0x5c>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005414:	4b09      	ldr	r3, [pc, #36]	@ (800543c <HAL_RCC_GetClockConfig+0x5c>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	08db      	lsrs	r3, r3, #3
 800541a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005422:	4b07      	ldr	r3, [pc, #28]	@ (8005440 <HAL_RCC_GetClockConfig+0x60>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0207 	and.w	r2, r3, #7
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	601a      	str	r2, [r3, #0]
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40021000 	.word	0x40021000
 8005440:	40022000 	.word	0x40022000

08005444 <RCC_SetFlashLatencyFromMSIRange>:
>>>>>>> remotes/origin/jayce_working
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
<<<<<<< HEAD
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a80:	2300      	movs	r3, #0
 8004a82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a84:	4b2a      	ldr	r3, [pc, #168]	@ (8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a90:	f7ff f97e 	bl	8003d90 <HAL_PWREx_GetVoltageRange>
 8004a94:	6178      	str	r0, [r7, #20]
 8004a96:	e014      	b.n	8004ac2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
=======
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800544c:	2300      	movs	r3, #0
 800544e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005450:	4b2a      	ldr	r3, [pc, #168]	@ (80054fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800545c:	f7ff f97e 	bl	800475c <HAL_PWREx_GetVoltageRange>
 8005460:	6178      	str	r0, [r7, #20]
 8005462:	e014      	b.n	800548e <RCC_SetFlashLatencyFromMSIRange+0x4a>
>>>>>>> remotes/origin/jayce_working
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8004a98:	4b25      	ldr	r3, [pc, #148]	@ (8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a9c:	4a24      	ldr	r2, [pc, #144]	@ (8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aa4:	4b22      	ldr	r3, [pc, #136]	@ (8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ab0:	f7ff f96e 	bl	8003d90 <HAL_PWREx_GetVoltageRange>
 8004ab4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aba:	4a1d      	ldr	r2, [pc, #116]	@ (8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004abc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ac0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ac8:	d10b      	bne.n	8004ae2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b80      	cmp	r3, #128	@ 0x80
 8004ace:	d919      	bls.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2ba0      	cmp	r3, #160	@ 0xa0
 8004ad4:	d902      	bls.n	8004adc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	e013      	b.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 8005464:	4b25      	ldr	r3, [pc, #148]	@ (80054fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005468:	4a24      	ldr	r2, [pc, #144]	@ (80054fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800546a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800546e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005470:	4b22      	ldr	r3, [pc, #136]	@ (80054fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800547c:	f7ff f96e 	bl	800475c <HAL_PWREx_GetVoltageRange>
 8005480:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005482:	4b1e      	ldr	r3, [pc, #120]	@ (80054fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005486:	4a1d      	ldr	r2, [pc, #116]	@ (80054fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005488:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800548c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005494:	d10b      	bne.n	80054ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b80      	cmp	r3, #128	@ 0x80
 800549a:	d919      	bls.n	80054d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2ba0      	cmp	r3, #160	@ 0xa0
 80054a0:	d902      	bls.n	80054a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054a2:	2302      	movs	r3, #2
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	e013      	b.n	80054d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> remotes/origin/jayce_working
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
<<<<<<< HEAD
 8004adc:	2301      	movs	r3, #1
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	e010      	b.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 80054a8:	2301      	movs	r3, #1
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	e010      	b.n	80054d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> remotes/origin/jayce_working
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
<<<<<<< HEAD
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b80      	cmp	r3, #128	@ 0x80
 8004ae6:	d902      	bls.n	8004aee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ae8:	2303      	movs	r3, #3
 8004aea:	613b      	str	r3, [r7, #16]
 8004aec:	e00a      	b.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b80      	cmp	r3, #128	@ 0x80
 80054b2:	d902      	bls.n	80054ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80054b4:	2303      	movs	r3, #3
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	e00a      	b.n	80054d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> remotes/origin/jayce_working
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
<<<<<<< HEAD
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b80      	cmp	r3, #128	@ 0x80
 8004af2:	d102      	bne.n	8004afa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004af4:	2302      	movs	r3, #2
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	e004      	b.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b70      	cmp	r3, #112	@ 0x70
 8004afe:	d101      	bne.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b00:	2301      	movs	r3, #1
 8004b02:	613b      	str	r3, [r7, #16]
=======
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b80      	cmp	r3, #128	@ 0x80
 80054be:	d102      	bne.n	80054c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054c0:	2302      	movs	r3, #2
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	e004      	b.n	80054d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b70      	cmp	r3, #112	@ 0x70
 80054ca:	d101      	bne.n	80054d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054cc:	2301      	movs	r3, #1
 80054ce:	613b      	str	r3, [r7, #16]
>>>>>>> remotes/origin/jayce_working
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
<<<<<<< HEAD
 8004b04:	4b0b      	ldr	r3, [pc, #44]	@ (8004b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f023 0207 	bic.w	r2, r3, #7
 8004b0c:	4909      	ldr	r1, [pc, #36]	@ (8004b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	600b      	str	r3, [r1, #0]
=======
 80054d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005500 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f023 0207 	bic.w	r2, r3, #7
 80054d8:	4909      	ldr	r1, [pc, #36]	@ (8005500 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	4313      	orrs	r3, r2
 80054de:	600b      	str	r3, [r1, #0]
>>>>>>> remotes/origin/jayce_working

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
<<<<<<< HEAD
 8004b14:	4b07      	ldr	r3, [pc, #28]	@ (8004b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d001      	beq.n	8004b26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40021000 	.word	0x40021000
 8004b34:	40022000 	.word	0x40022000

08004b38 <HAL_RCCEx_PeriphCLKConfig>:
=======
 80054e0:	4b07      	ldr	r3, [pc, #28]	@ (8005500 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d001      	beq.n	80054f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	40021000 	.word	0x40021000
 8005500:	40022000 	.word	0x40022000

08005504 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> remotes/origin/jayce_working
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b40:	2300      	movs	r3, #0
 8004b42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b44:	2300      	movs	r3, #0
 8004b46:	74bb      	strb	r3, [r7, #18]
=======
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800550c:	2300      	movs	r3, #0
 800550e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005510:	2300      	movs	r3, #0
 8005512:	74bb      	strb	r3, [r7, #18]
>>>>>>> remotes/origin/jayce_working
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
<<<<<<< HEAD
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d041      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
=======
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800551c:	2b00      	cmp	r3, #0
 800551e:	d041      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
<<<<<<< HEAD
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b58:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004b5c:	d02a      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004b5e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004b62:	d824      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b68:	d008      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b6e:	d81e      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b78:	d010      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b7a:	e018      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x76>
=======
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005524:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005528:	d02a      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800552a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800552e:	d824      	bhi.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005530:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005534:	d008      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005536:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800553a:	d81e      	bhi.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005540:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005544:	d010      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005546:	e018      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x76>
>>>>>>> remotes/origin/jayce_working
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
<<<<<<< HEAD
 8004b7c:	4b86      	ldr	r3, [pc, #536]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4a85      	ldr	r2, [pc, #532]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b86:	60d3      	str	r3, [r2, #12]
=======
 8005548:	4b86      	ldr	r3, [pc, #536]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	4a85      	ldr	r2, [pc, #532]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800554e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005552:	60d3      	str	r3, [r2, #12]
>>>>>>> remotes/origin/jayce_working
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
<<<<<<< HEAD
 8004b88:	e015      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
=======
 8005554:	e015      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
>>>>>>> remotes/origin/jayce_working

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	2100      	movs	r1, #0
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 facd 	bl	8005130 <RCCEx_PLLSAI1_Config>
 8004b96:	4603      	mov	r3, r0
 8004b98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b9a:	e00c      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
=======
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3304      	adds	r3, #4
 800555a:	2100      	movs	r1, #0
 800555c:	4618      	mov	r0, r3
 800555e:	f000 facd 	bl	8005afc <RCCEx_PLLSAI1_Config>
 8005562:	4603      	mov	r3, r0
 8005564:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005566:	e00c      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
>>>>>>> remotes/origin/jayce_working

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3320      	adds	r3, #32
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fbb6 	bl	8005314 <RCCEx_PLLSAI2_Config>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bac:	e003      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
=======
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3320      	adds	r3, #32
 800556c:	2100      	movs	r1, #0
 800556e:	4618      	mov	r0, r3
 8005570:	f000 fbb6 	bl	8005ce0 <RCCEx_PLLSAI2_Config>
 8005574:	4603      	mov	r3, r0
 8005576:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005578:	e003      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
>>>>>>> remotes/origin/jayce_working
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< HEAD
 8004bae:	2301      	movs	r3, #1
 8004bb0:	74fb      	strb	r3, [r7, #19]
      break;
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bb6:	7cfb      	ldrb	r3, [r7, #19]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10b      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bbc:	4b76      	ldr	r3, [pc, #472]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bca:	4973      	ldr	r1, [pc, #460]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004bd2:	e001      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
=======
 800557a:	2301      	movs	r3, #1
 800557c:	74fb      	strb	r3, [r7, #19]
      break;
 800557e:	e000      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005582:	7cfb      	ldrb	r3, [r7, #19]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10b      	bne.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005588:	4b76      	ldr	r3, [pc, #472]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005596:	4973      	ldr	r1, [pc, #460]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005598:	4313      	orrs	r3, r2
 800559a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800559e:	e001      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
>>>>>>> remotes/origin/jayce_working
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8004bd4:	7cfb      	ldrb	r3, [r7, #19]
 8004bd6:	74bb      	strb	r3, [r7, #18]
=======
 80055a0:	7cfb      	ldrb	r3, [r7, #19]
 80055a2:	74bb      	strb	r3, [r7, #18]
>>>>>>> remotes/origin/jayce_working
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
<<<<<<< HEAD
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d041      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>
=======
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d041      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
<<<<<<< HEAD
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004be8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004bec:	d02a      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004bee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004bf2:	d824      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004bf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bf8:	d008      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bfe:	d81e      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004c04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c08:	d010      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c0a:	e018      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x106>
=======
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80055b8:	d02a      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80055ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80055be:	d824      	bhi.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80055c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055c4:	d008      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80055c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055ca:	d81e      	bhi.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80055d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055d4:	d010      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80055d6:	e018      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x106>
>>>>>>> remotes/origin/jayce_working
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
<<<<<<< HEAD
 8004c0c:	4b62      	ldr	r3, [pc, #392]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4a61      	ldr	r2, [pc, #388]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c18:	e015      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
=======
 80055d8:	4b62      	ldr	r3, [pc, #392]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	4a61      	ldr	r2, [pc, #388]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055e4:	e015      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x10e>
>>>>>>> remotes/origin/jayce_working

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fa85 	bl	8005130 <RCCEx_PLLSAI1_Config>
 8004c26:	4603      	mov	r3, r0
 8004c28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c2a:	e00c      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
=======
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3304      	adds	r3, #4
 80055ea:	2100      	movs	r1, #0
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fa85 	bl	8005afc <RCCEx_PLLSAI1_Config>
 80055f2:	4603      	mov	r3, r0
 80055f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055f6:	e00c      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x10e>
>>>>>>> remotes/origin/jayce_working

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3320      	adds	r3, #32
 8004c30:	2100      	movs	r1, #0
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fb6e 	bl	8005314 <RCCEx_PLLSAI2_Config>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c3c:	e003      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
=======
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3320      	adds	r3, #32
 80055fc:	2100      	movs	r1, #0
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 fb6e 	bl	8005ce0 <RCCEx_PLLSAI2_Config>
 8005604:	4603      	mov	r3, r0
 8005606:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005608:	e003      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x10e>
>>>>>>> remotes/origin/jayce_working
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< HEAD
 8004c3e:	2301      	movs	r3, #1
 8004c40:	74fb      	strb	r3, [r7, #19]
      break;
 8004c42:	e000      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c46:	7cfb      	ldrb	r3, [r7, #19]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10b      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c4c:	4b52      	ldr	r3, [pc, #328]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c52:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c5a:	494f      	ldr	r1, [pc, #316]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004c62:	e001      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>
=======
 800560a:	2301      	movs	r3, #1
 800560c:	74fb      	strb	r3, [r7, #19]
      break;
 800560e:	e000      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005612:	7cfb      	ldrb	r3, [r7, #19]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10b      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005618:	4b52      	ldr	r3, [pc, #328]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800561a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005626:	494f      	ldr	r1, [pc, #316]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005628:	4313      	orrs	r3, r2
 800562a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800562e:	e001      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>
>>>>>>> remotes/origin/jayce_working
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8004c64:	7cfb      	ldrb	r3, [r7, #19]
 8004c66:	74bb      	strb	r3, [r7, #18]
=======
 8005630:	7cfb      	ldrb	r3, [r7, #19]
 8005632:	74bb      	strb	r3, [r7, #18]
>>>>>>> remotes/origin/jayce_working
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< HEAD
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 80a0 	beq.w	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c76:	2300      	movs	r3, #0
 8004c78:	747b      	strb	r3, [r7, #17]
=======
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 80a0 	beq.w	8005782 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005642:	2300      	movs	r3, #0
 8005644:	747b      	strb	r3, [r7, #17]
>>>>>>> remotes/origin/jayce_working

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
<<<<<<< HEAD
 8004c7a:	4b47      	ldr	r3, [pc, #284]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00d      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c90:	4b41      	ldr	r3, [pc, #260]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c94:	4a40      	ldr	r2, [pc, #256]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c9c:	4b3e      	ldr	r3, [pc, #248]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	747b      	strb	r3, [r7, #17]
=======
 8005646:	4b47      	ldr	r3, [pc, #284]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005656:	2300      	movs	r3, #0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00d      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800565c:	4b41      	ldr	r3, [pc, #260]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800565e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005660:	4a40      	ldr	r2, [pc, #256]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005666:	6593      	str	r3, [r2, #88]	@ 0x58
 8005668:	4b3e      	ldr	r3, [pc, #248]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800566a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800566c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005674:	2301      	movs	r3, #1
 8005676:	747b      	strb	r3, [r7, #17]
>>>>>>> remotes/origin/jayce_working
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< HEAD
 8004cac:	4b3b      	ldr	r3, [pc, #236]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a3a      	ldr	r2, [pc, #232]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cb8:	f7fc fd16 	bl	80016e8 <HAL_GetTick>
 8004cbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cbe:	e009      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc0:	f7fc fd12 	bl	80016e8 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d902      	bls.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	74fb      	strb	r3, [r7, #19]
        break;
 8004cd2:	e005      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cd4:	4b31      	ldr	r3, [pc, #196]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0ef      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
=======
 8005678:	4b3b      	ldr	r3, [pc, #236]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a3a      	ldr	r2, [pc, #232]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800567e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005682:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005684:	f7fc f836 	bl	80016f4 <HAL_GetTick>
 8005688:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800568a:	e009      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800568c:	f7fc f832 	bl	80016f4 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d902      	bls.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	74fb      	strb	r3, [r7, #19]
        break;
 800569e:	e005      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056a0:	4b31      	ldr	r3, [pc, #196]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0ef      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x188>
>>>>>>> remotes/origin/jayce_working
      }
    }

    if(ret == HAL_OK)
<<<<<<< HEAD
 8004ce0:	7cfb      	ldrb	r3, [r7, #19]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d15c      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cf0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01f      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d019      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d04:	4b24      	ldr	r3, [pc, #144]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d10:	4b21      	ldr	r3, [pc, #132]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d16:	4a20      	ldr	r2, [pc, #128]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d20:	4b1d      	ldr	r3, [pc, #116]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d26:	4a1c      	ldr	r2, [pc, #112]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d30:	4a19      	ldr	r2, [pc, #100]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
=======
 80056ac:	7cfb      	ldrb	r3, [r7, #19]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d15c      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056b2:	4b2c      	ldr	r3, [pc, #176]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01f      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d019      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056d0:	4b24      	ldr	r3, [pc, #144]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056dc:	4b21      	ldr	r3, [pc, #132]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e2:	4a20      	ldr	r2, [pc, #128]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056fc:	4a19      	ldr	r2, [pc, #100]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
>>>>>>> remotes/origin/jayce_working
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
<<<<<<< HEAD
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d016      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d42:	f7fc fcd1 	bl	80016e8 <HAL_GetTick>
 8004d46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d48:	e00b      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4a:	f7fc fccd 	bl	80016e8 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d902      	bls.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	74fb      	strb	r3, [r7, #19]
            break;
 8004d60:	e006      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d62:	4b0d      	ldr	r3, [pc, #52]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0ec      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x212>
=======
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d016      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570e:	f7fb fff1 	bl	80016f4 <HAL_GetTick>
 8005712:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005714:	e00b      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005716:	f7fb ffed 	bl	80016f4 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005724:	4293      	cmp	r3, r2
 8005726:	d902      	bls.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	74fb      	strb	r3, [r7, #19]
            break;
 800572c:	e006      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800572e:	4b0d      	ldr	r3, [pc, #52]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0ec      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x212>
>>>>>>> remotes/origin/jayce_working
          }
        }
      }

      if(ret == HAL_OK)
<<<<<<< HEAD
 8004d70:	7cfb      	ldrb	r3, [r7, #19]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10c      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d76:	4b08      	ldr	r3, [pc, #32]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d86:	4904      	ldr	r1, [pc, #16]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d8e:	e009      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
=======
 800573c:	7cfb      	ldrb	r3, [r7, #19]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10c      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005742:	4b08      	ldr	r3, [pc, #32]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005748:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005752:	4904      	ldr	r1, [pc, #16]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800575a:	e009      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x26c>
>>>>>>> remotes/origin/jayce_working
      }
      else
      {
        /* set overall return value */
        status = ret;
<<<<<<< HEAD
 8004d90:	7cfb      	ldrb	r3, [r7, #19]
 8004d92:	74bb      	strb	r3, [r7, #18]
 8004d94:	e006      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004d96:	bf00      	nop
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40007000 	.word	0x40007000
=======
 800575c:	7cfb      	ldrb	r3, [r7, #19]
 800575e:	74bb      	strb	r3, [r7, #18]
 8005760:	e006      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005762:	bf00      	nop
 8005764:	40021000 	.word	0x40021000
 8005768:	40007000 	.word	0x40007000
>>>>>>> remotes/origin/jayce_working
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	74bb      	strb	r3, [r7, #18]
=======
 800576c:	7cfb      	ldrb	r3, [r7, #19]
 800576e:	74bb      	strb	r3, [r7, #18]
>>>>>>> remotes/origin/jayce_working
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8004da4:	7c7b      	ldrb	r3, [r7, #17]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d105      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004daa:	4ba6      	ldr	r3, [pc, #664]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dae:	4aa5      	ldr	r2, [pc, #660]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004db0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004db4:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 8005770:	7c7b      	ldrb	r3, [r7, #17]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d105      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005776:	4ba6      	ldr	r3, [pc, #664]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800577a:	4aa5      	ldr	r2, [pc, #660]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800577c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005780:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> remotes/origin/jayce_working
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< HEAD
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
=======
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< HEAD
 8004dc2:	4ba0      	ldr	r3, [pc, #640]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc8:	f023 0203 	bic.w	r2, r3, #3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd0:	499c      	ldr	r1, [pc, #624]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800578e:	4ba0      	ldr	r3, [pc, #640]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005794:	f023 0203 	bic.w	r2, r3, #3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579c:	499c      	ldr	r1, [pc, #624]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> remotes/origin/jayce_working
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< HEAD
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
=======
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< HEAD
 8004de4:	4b97      	ldr	r3, [pc, #604]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dea:	f023 020c 	bic.w	r2, r3, #12
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df2:	4994      	ldr	r1, [pc, #592]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80057b0:	4b97      	ldr	r3, [pc, #604]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b6:	f023 020c 	bic.w	r2, r3, #12
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057be:	4994      	ldr	r1, [pc, #592]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> remotes/origin/jayce_working
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< HEAD
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
=======
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< HEAD
 8004e06:	4b8f      	ldr	r3, [pc, #572]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e0c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e14:	498b      	ldr	r1, [pc, #556]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80057d2:	4b8f      	ldr	r3, [pc, #572]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e0:	498b      	ldr	r1, [pc, #556]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> remotes/origin/jayce_working
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< HEAD
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x306>
=======
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0308 	and.w	r3, r3, #8
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x306>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< HEAD
 8004e28:	4b86      	ldr	r3, [pc, #536]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e2e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e36:	4983      	ldr	r1, [pc, #524]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80057f4:	4b86      	ldr	r3, [pc, #536]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005802:	4983      	ldr	r1, [pc, #524]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> remotes/origin/jayce_working
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
<<<<<<< HEAD
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x328>
=======
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x328>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
<<<<<<< HEAD
 8004e4a:	4b7e      	ldr	r3, [pc, #504]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e58:	497a      	ldr	r1, [pc, #488]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8005816:	4b7e      	ldr	r3, [pc, #504]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005824:	497a      	ldr	r1, [pc, #488]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> remotes/origin/jayce_working
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< HEAD
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0320 	and.w	r3, r3, #32
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
=======
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x34a>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< HEAD
 8004e6c:	4b75      	ldr	r3, [pc, #468]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e72:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e7a:	4972      	ldr	r1, [pc, #456]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8005838:	4b75      	ldr	r3, [pc, #468]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800583e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005846:	4972      	ldr	r1, [pc, #456]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> remotes/origin/jayce_working
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
<<<<<<< HEAD
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e8e:	4b6d      	ldr	r3, [pc, #436]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e94:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e9c:	4969      	ldr	r1, [pc, #420]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800585a:	4b6d      	ldr	r3, [pc, #436]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800585c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005860:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005868:	4969      	ldr	r1, [pc, #420]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> remotes/origin/jayce_working
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
<<<<<<< HEAD
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004eb0:	4b64      	ldr	r3, [pc, #400]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ebe:	4961      	ldr	r1, [pc, #388]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800587c:	4b64      	ldr	r3, [pc, #400]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005882:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800588a:	4961      	ldr	r1, [pc, #388]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> remotes/origin/jayce_working
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< HEAD
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
=======
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< HEAD
 8004ed2:	4b5c      	ldr	r3, [pc, #368]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee0:	4958      	ldr	r1, [pc, #352]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800589e:	4b5c      	ldr	r3, [pc, #368]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ac:	4958      	ldr	r1, [pc, #352]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> remotes/origin/jayce_working
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< HEAD
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
=======
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< HEAD
 8004ef4:	4b53      	ldr	r3, [pc, #332]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004efa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f02:	4950      	ldr	r1, [pc, #320]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80058c0:	4b53      	ldr	r3, [pc, #332]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ce:	4950      	ldr	r1, [pc, #320]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> remotes/origin/jayce_working
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< HEAD
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
=======
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< HEAD
 8004f16:	4b4b      	ldr	r3, [pc, #300]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f24:	4947      	ldr	r1, [pc, #284]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80058e2:	4b4b      	ldr	r3, [pc, #300]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f0:	4947      	ldr	r1, [pc, #284]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> remotes/origin/jayce_working
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
<<<<<<< HEAD
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x416>
=======
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x416>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
<<<<<<< HEAD
 8004f38:	4b42      	ldr	r3, [pc, #264]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f3e:	f023 0203 	bic.w	r2, r3, #3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f46:	493f      	ldr	r1, [pc, #252]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
=======
 8005904:	4b42      	ldr	r3, [pc, #264]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005906:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800590a:	f023 0203 	bic.w	r2, r3, #3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005912:	493f      	ldr	r1, [pc, #252]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
>>>>>>> remotes/origin/jayce_working
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< HEAD
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d028      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f5a:	4b3a      	ldr	r3, [pc, #232]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f60:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f68:	4936      	ldr	r1, [pc, #216]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f78:	d106      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f7a:	4b32      	ldr	r3, [pc, #200]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	4a31      	ldr	r2, [pc, #196]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f84:	60d3      	str	r3, [r2, #12]
 8004f86:	e011      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x474>
=======
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d028      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005926:	4b3a      	ldr	r3, [pc, #232]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800592c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005934:	4936      	ldr	r1, [pc, #216]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005940:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005944:	d106      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005946:	4b32      	ldr	r3, [pc, #200]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	4a31      	ldr	r2, [pc, #196]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800594c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005950:	60d3      	str	r3, [r2, #12]
 8005952:	e011      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x474>
>>>>>>> remotes/origin/jayce_working
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
<<<<<<< HEAD
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f90:	d10c      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3304      	adds	r3, #4
 8004f96:	2101      	movs	r1, #1
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 f8c9 	bl	8005130 <RCCEx_PLLSAI1_Config>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004fa2:	7cfb      	ldrb	r3, [r7, #19]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004fa8:	7cfb      	ldrb	r3, [r7, #19]
 8004faa:	74bb      	strb	r3, [r7, #18]
=======
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005958:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800595c:	d10c      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3304      	adds	r3, #4
 8005962:	2101      	movs	r1, #1
 8005964:	4618      	mov	r0, r3
 8005966:	f000 f8c9 	bl	8005afc <RCCEx_PLLSAI1_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800596e:	7cfb      	ldrb	r3, [r7, #19]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005974:	7cfb      	ldrb	r3, [r7, #19]
 8005976:	74bb      	strb	r3, [r7, #18]
>>>>>>> remotes/origin/jayce_working
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
<<<<<<< HEAD
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d028      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fb8:	4b22      	ldr	r3, [pc, #136]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fbe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fc6:	491f      	ldr	r1, [pc, #124]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fd6:	d106      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	4a19      	ldr	r2, [pc, #100]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004fde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fe2:	60d3      	str	r3, [r2, #12]
 8004fe4:	e011      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
=======
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d028      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005984:	4b22      	ldr	r3, [pc, #136]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005992:	491f      	ldr	r1, [pc, #124]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800599e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059a2:	d106      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	4a19      	ldr	r2, [pc, #100]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059ae:	60d3      	str	r3, [r2, #12]
 80059b0:	e011      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
>>>>>>> remotes/origin/jayce_working
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
<<<<<<< HEAD
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004fee:	d10c      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 f89a 	bl	8005130 <RCCEx_PLLSAI1_Config>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005000:	7cfb      	ldrb	r3, [r7, #19]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005006:	7cfb      	ldrb	r3, [r7, #19]
 8005008:	74bb      	strb	r3, [r7, #18]
=======
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059ba:	d10c      	bne.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3304      	adds	r3, #4
 80059c0:	2101      	movs	r1, #1
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f89a 	bl	8005afc <RCCEx_PLLSAI1_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059cc:	7cfb      	ldrb	r3, [r7, #19]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80059d2:	7cfb      	ldrb	r3, [r7, #19]
 80059d4:	74bb      	strb	r3, [r7, #18]
>>>>>>> remotes/origin/jayce_working
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< HEAD
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d02a      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005016:	4b0b      	ldr	r3, [pc, #44]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800501c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005024:	4907      	ldr	r1, [pc, #28]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005030:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005034:	d108      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005036:	4b03      	ldr	r3, [pc, #12]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	4a02      	ldr	r2, [pc, #8]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800503c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005040:	60d3      	str	r3, [r2, #12]
 8005042:	e013      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005044:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800504c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005050:	d10c      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3304      	adds	r3, #4
 8005056:	2101      	movs	r1, #1
 8005058:	4618      	mov	r0, r3
 800505a:	f000 f869 	bl	8005130 <RCCEx_PLLSAI1_Config>
 800505e:	4603      	mov	r3, r0
 8005060:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005062:	7cfb      	ldrb	r3, [r7, #19]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005068:	7cfb      	ldrb	r3, [r7, #19]
 800506a:	74bb      	strb	r3, [r7, #18]
=======
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d02a      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059f0:	4907      	ldr	r1, [pc, #28]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a00:	d108      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a02:	4b03      	ldr	r3, [pc, #12]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	4a02      	ldr	r2, [pc, #8]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a0c:	60d3      	str	r3, [r2, #12]
 8005a0e:	e013      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005a10:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a1c:	d10c      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3304      	adds	r3, #4
 8005a22:	2101      	movs	r1, #1
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 f869 	bl	8005afc <RCCEx_PLLSAI1_Config>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a2e:	7cfb      	ldrb	r3, [r7, #19]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005a34:	7cfb      	ldrb	r3, [r7, #19]
 8005a36:	74bb      	strb	r3, [r7, #18]
>>>>>>> remotes/origin/jayce_working
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< HEAD
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d02f      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
=======
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d02f      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
<<<<<<< HEAD
 8005078:	4b2c      	ldr	r3, [pc, #176]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005086:	4929      	ldr	r1, [pc, #164]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005092:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005096:	d10d      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3304      	adds	r3, #4
 800509c:	2102      	movs	r1, #2
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 f846 	bl	8005130 <RCCEx_PLLSAI1_Config>
 80050a4:	4603      	mov	r3, r0
 80050a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050a8:	7cfb      	ldrb	r3, [r7, #19]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d014      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80050ae:	7cfb      	ldrb	r3, [r7, #19]
 80050b0:	74bb      	strb	r3, [r7, #18]
 80050b2:	e011      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
=======
 8005a44:	4b2c      	ldr	r3, [pc, #176]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a52:	4929      	ldr	r1, [pc, #164]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a62:	d10d      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3304      	adds	r3, #4
 8005a68:	2102      	movs	r1, #2
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 f846 	bl	8005afc <RCCEx_PLLSAI1_Config>
 8005a70:	4603      	mov	r3, r0
 8005a72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a74:	7cfb      	ldrb	r3, [r7, #19]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d014      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005a7a:	7cfb      	ldrb	r3, [r7, #19]
 8005a7c:	74bb      	strb	r3, [r7, #18]
 8005a7e:	e011      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
>>>>>>> remotes/origin/jayce_working
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
<<<<<<< HEAD
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050bc:	d10c      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3320      	adds	r3, #32
 80050c2:	2102      	movs	r1, #2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 f925 	bl	8005314 <RCCEx_PLLSAI2_Config>
 80050ca:	4603      	mov	r3, r0
 80050cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050ce:	7cfb      	ldrb	r3, [r7, #19]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80050d4:	7cfb      	ldrb	r3, [r7, #19]
 80050d6:	74bb      	strb	r3, [r7, #18]
=======
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a88:	d10c      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3320      	adds	r3, #32
 8005a8e:	2102      	movs	r1, #2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 f925 	bl	8005ce0 <RCCEx_PLLSAI2_Config>
 8005a96:	4603      	mov	r3, r0
 8005a98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a9a:	7cfb      	ldrb	r3, [r7, #19]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005aa0:	7cfb      	ldrb	r3, [r7, #19]
 8005aa2:	74bb      	strb	r3, [r7, #18]
>>>>>>> remotes/origin/jayce_working
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
<<<<<<< HEAD
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00b      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
=======
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00b      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
<<<<<<< HEAD
 80050e4:	4b11      	ldr	r3, [pc, #68]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050f4:	490d      	ldr	r1, [pc, #52]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8005ab0:	4b11      	ldr	r3, [pc, #68]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ac0:	490d      	ldr	r1, [pc, #52]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> remotes/origin/jayce_working
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
<<<<<<< HEAD
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00b      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
=======
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00b      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x5e8>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
<<<<<<< HEAD
 8005108:	4b08      	ldr	r3, [pc, #32]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005118:	4904      	ldr	r1, [pc, #16]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8005ad4:	4b08      	ldr	r3, [pc, #32]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ada:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ae4:	4904      	ldr	r1, [pc, #16]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> remotes/origin/jayce_working
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
<<<<<<< HEAD
 8005120:	7cbb      	ldrb	r3, [r7, #18]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40021000 	.word	0x40021000

08005130 <RCCEx_PLLSAI1_Config>:
=======
 8005aec:	7cbb      	ldrb	r3, [r7, #18]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40021000 	.word	0x40021000

08005afc <RCCEx_PLLSAI1_Config>:
>>>>>>> remotes/origin/jayce_working
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
<<<<<<< HEAD
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	73fb      	strb	r3, [r7, #15]
=======
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	73fb      	strb	r3, [r7, #15]
>>>>>>> remotes/origin/jayce_working
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
<<<<<<< HEAD
 800513e:	4b74      	ldr	r3, [pc, #464]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d018      	beq.n	800517c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800514a:	4b71      	ldr	r3, [pc, #452]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f003 0203 	and.w	r2, r3, #3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d10d      	bne.n	8005176 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
       ||
 800515e:	2b00      	cmp	r3, #0
 8005160:	d009      	beq.n	8005176 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005162:	4b6b      	ldr	r3, [pc, #428]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	091b      	lsrs	r3, r3, #4
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
       ||
 8005172:	429a      	cmp	r2, r3
 8005174:	d047      	beq.n	8005206 <RCCEx_PLLSAI1_Config+0xd6>
=======
 8005b0a:	4b74      	ldr	r3, [pc, #464]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d018      	beq.n	8005b48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b16:	4b71      	ldr	r3, [pc, #452]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f003 0203 	and.w	r2, r3, #3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d10d      	bne.n	8005b42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
       ||
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d009      	beq.n	8005b42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005b2e:	4b6b      	ldr	r3, [pc, #428]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	091b      	lsrs	r3, r3, #4
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
       ||
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d047      	beq.n	8005bd2 <RCCEx_PLLSAI1_Config+0xd6>
>>>>>>> remotes/origin/jayce_working
#endif
      )
    {
      status = HAL_ERROR;
<<<<<<< HEAD
 8005176:	2301      	movs	r3, #1
 8005178:	73fb      	strb	r3, [r7, #15]
 800517a:	e044      	b.n	8005206 <RCCEx_PLLSAI1_Config+0xd6>
=======
 8005b42:	2301      	movs	r3, #1
 8005b44:	73fb      	strb	r3, [r7, #15]
 8005b46:	e044      	b.n	8005bd2 <RCCEx_PLLSAI1_Config+0xd6>
>>>>>>> remotes/origin/jayce_working
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
<<<<<<< HEAD
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b03      	cmp	r3, #3
 8005182:	d018      	beq.n	80051b6 <RCCEx_PLLSAI1_Config+0x86>
 8005184:	2b03      	cmp	r3, #3
 8005186:	d825      	bhi.n	80051d4 <RCCEx_PLLSAI1_Config+0xa4>
 8005188:	2b01      	cmp	r3, #1
 800518a:	d002      	beq.n	8005192 <RCCEx_PLLSAI1_Config+0x62>
 800518c:	2b02      	cmp	r3, #2
 800518e:	d009      	beq.n	80051a4 <RCCEx_PLLSAI1_Config+0x74>
 8005190:	e020      	b.n	80051d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005192:	4b5f      	ldr	r3, [pc, #380]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d11d      	bne.n	80051da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051a2:	e01a      	b.n	80051da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d116      	bne.n	80051de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b4:	e013      	b.n	80051de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051b6:	4b56      	ldr	r3, [pc, #344]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10f      	bne.n	80051e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051c2:	4b53      	ldr	r3, [pc, #332]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051d2:	e006      	b.n	80051e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
      break;
 80051d8:	e004      	b.n	80051e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051da:	bf00      	nop
 80051dc:	e002      	b.n	80051e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051de:	bf00      	nop
 80051e0:	e000      	b.n	80051e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10d      	bne.n	8005206 <RCCEx_PLLSAI1_Config+0xd6>
=======
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d018      	beq.n	8005b82 <RCCEx_PLLSAI1_Config+0x86>
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d825      	bhi.n	8005ba0 <RCCEx_PLLSAI1_Config+0xa4>
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d002      	beq.n	8005b5e <RCCEx_PLLSAI1_Config+0x62>
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d009      	beq.n	8005b70 <RCCEx_PLLSAI1_Config+0x74>
 8005b5c:	e020      	b.n	8005ba0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b5e:	4b5f      	ldr	r3, [pc, #380]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d11d      	bne.n	8005ba6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b6e:	e01a      	b.n	8005ba6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b70:	4b5a      	ldr	r3, [pc, #360]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d116      	bne.n	8005baa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b80:	e013      	b.n	8005baa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b82:	4b56      	ldr	r3, [pc, #344]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10f      	bne.n	8005bae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b8e:	4b53      	ldr	r3, [pc, #332]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b9e:	e006      	b.n	8005bae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba4:	e004      	b.n	8005bb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ba6:	bf00      	nop
 8005ba8:	e002      	b.n	8005bb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005baa:	bf00      	nop
 8005bac:	e000      	b.n	8005bb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bae:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10d      	bne.n	8005bd2 <RCCEx_PLLSAI1_Config+0xd6>
>>>>>>> remotes/origin/jayce_working
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
<<<<<<< HEAD
 80051ea:	4b49      	ldr	r3, [pc, #292]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6819      	ldr	r1, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	430b      	orrs	r3, r1
 8005200:	4943      	ldr	r1, [pc, #268]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005202:	4313      	orrs	r3, r2
 8005204:	60cb      	str	r3, [r1, #12]
=======
 8005bb6:	4b49      	ldr	r3, [pc, #292]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6819      	ldr	r1, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	430b      	orrs	r3, r1
 8005bcc:	4943      	ldr	r1, [pc, #268]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60cb      	str	r3, [r1, #12]
>>>>>>> remotes/origin/jayce_working
#endif
    }
  }

  if(status == HAL_OK)
<<<<<<< HEAD
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d17c      	bne.n	8005306 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800520c:	4b40      	ldr	r3, [pc, #256]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a3f      	ldr	r2, [pc, #252]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005212:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005218:	f7fc fa66 	bl	80016e8 <HAL_GetTick>
 800521c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800521e:	e009      	b.n	8005234 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005220:	f7fc fa62 	bl	80016e8 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d902      	bls.n	8005234 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	73fb      	strb	r3, [r7, #15]
        break;
 8005232:	e005      	b.n	8005240 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005234:	4b36      	ldr	r3, [pc, #216]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1ef      	bne.n	8005220 <RCCEx_PLLSAI1_Config+0xf0>
=======
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d17c      	bne.n	8005cd2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005bd8:	4b40      	ldr	r3, [pc, #256]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a3f      	ldr	r2, [pc, #252]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bde:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be4:	f7fb fd86 	bl	80016f4 <HAL_GetTick>
 8005be8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bea:	e009      	b.n	8005c00 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bec:	f7fb fd82 	bl	80016f4 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d902      	bls.n	8005c00 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	73fb      	strb	r3, [r7, #15]
        break;
 8005bfe:	e005      	b.n	8005c0c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c00:	4b36      	ldr	r3, [pc, #216]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1ef      	bne.n	8005bec <RCCEx_PLLSAI1_Config+0xf0>
>>>>>>> remotes/origin/jayce_working
      }
    }

    if(status == HAL_OK)
<<<<<<< HEAD
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d15f      	bne.n	8005306 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d110      	bne.n	800526e <RCCEx_PLLSAI1_Config+0x13e>
=======
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d15f      	bne.n	8005cd2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d110      	bne.n	8005c3a <RCCEx_PLLSAI1_Config+0x13e>
>>>>>>> remotes/origin/jayce_working
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< HEAD
 800524c:	4b30      	ldr	r3, [pc, #192]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005254:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6892      	ldr	r2, [r2, #8]
 800525c:	0211      	lsls	r1, r2, #8
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	68d2      	ldr	r2, [r2, #12]
 8005262:	06d2      	lsls	r2, r2, #27
 8005264:	430a      	orrs	r2, r1
 8005266:	492a      	ldr	r1, [pc, #168]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005268:	4313      	orrs	r3, r2
 800526a:	610b      	str	r3, [r1, #16]
 800526c:	e027      	b.n	80052be <RCCEx_PLLSAI1_Config+0x18e>
=======
 8005c18:	4b30      	ldr	r3, [pc, #192]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005c20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6892      	ldr	r2, [r2, #8]
 8005c28:	0211      	lsls	r1, r2, #8
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	68d2      	ldr	r2, [r2, #12]
 8005c2e:	06d2      	lsls	r2, r2, #27
 8005c30:	430a      	orrs	r2, r1
 8005c32:	492a      	ldr	r1, [pc, #168]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	610b      	str	r3, [r1, #16]
 8005c38:	e027      	b.n	8005c8a <RCCEx_PLLSAI1_Config+0x18e>
>>>>>>> remotes/origin/jayce_working
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
<<<<<<< HEAD
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d112      	bne.n	800529a <RCCEx_PLLSAI1_Config+0x16a>
=======
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d112      	bne.n	8005c66 <RCCEx_PLLSAI1_Config+0x16a>
>>>>>>> remotes/origin/jayce_working
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< HEAD
 8005274:	4b26      	ldr	r3, [pc, #152]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800527c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6892      	ldr	r2, [r2, #8]
 8005284:	0211      	lsls	r1, r2, #8
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6912      	ldr	r2, [r2, #16]
 800528a:	0852      	lsrs	r2, r2, #1
 800528c:	3a01      	subs	r2, #1
 800528e:	0552      	lsls	r2, r2, #21
 8005290:	430a      	orrs	r2, r1
 8005292:	491f      	ldr	r1, [pc, #124]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005294:	4313      	orrs	r3, r2
 8005296:	610b      	str	r3, [r1, #16]
 8005298:	e011      	b.n	80052be <RCCEx_PLLSAI1_Config+0x18e>
=======
 8005c40:	4b26      	ldr	r3, [pc, #152]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005c48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6892      	ldr	r2, [r2, #8]
 8005c50:	0211      	lsls	r1, r2, #8
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6912      	ldr	r2, [r2, #16]
 8005c56:	0852      	lsrs	r2, r2, #1
 8005c58:	3a01      	subs	r2, #1
 8005c5a:	0552      	lsls	r2, r2, #21
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	491f      	ldr	r1, [pc, #124]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	610b      	str	r3, [r1, #16]
 8005c64:	e011      	b.n	8005c8a <RCCEx_PLLSAI1_Config+0x18e>
>>>>>>> remotes/origin/jayce_working
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< HEAD
 800529a:	4b1d      	ldr	r3, [pc, #116]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80052a2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6892      	ldr	r2, [r2, #8]
 80052aa:	0211      	lsls	r1, r2, #8
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6952      	ldr	r2, [r2, #20]
 80052b0:	0852      	lsrs	r2, r2, #1
 80052b2:	3a01      	subs	r2, #1
 80052b4:	0652      	lsls	r2, r2, #25
 80052b6:	430a      	orrs	r2, r1
 80052b8:	4915      	ldr	r1, [pc, #84]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	610b      	str	r3, [r1, #16]
=======
 8005c66:	4b1d      	ldr	r3, [pc, #116]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005c6e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6892      	ldr	r2, [r2, #8]
 8005c76:	0211      	lsls	r1, r2, #8
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6952      	ldr	r2, [r2, #20]
 8005c7c:	0852      	lsrs	r2, r2, #1
 8005c7e:	3a01      	subs	r2, #1
 8005c80:	0652      	lsls	r2, r2, #25
 8005c82:	430a      	orrs	r2, r1
 8005c84:	4915      	ldr	r1, [pc, #84]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	610b      	str	r3, [r1, #16]
>>>>>>> remotes/origin/jayce_working
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
<<<<<<< HEAD
 80052be:	4b14      	ldr	r3, [pc, #80]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a13      	ldr	r2, [pc, #76]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ca:	f7fc fa0d 	bl	80016e8 <HAL_GetTick>
 80052ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052d0:	e009      	b.n	80052e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052d2:	f7fc fa09 	bl	80016e8 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d902      	bls.n	80052e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	73fb      	strb	r3, [r7, #15]
          break;
 80052e4:	e005      	b.n	80052f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0ef      	beq.n	80052d2 <RCCEx_PLLSAI1_Config+0x1a2>
=======
 8005c8a:	4b14      	ldr	r3, [pc, #80]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a13      	ldr	r2, [pc, #76]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c96:	f7fb fd2d 	bl	80016f4 <HAL_GetTick>
 8005c9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c9c:	e009      	b.n	8005cb2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c9e:	f7fb fd29 	bl	80016f4 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d902      	bls.n	8005cb2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	73fb      	strb	r3, [r7, #15]
          break;
 8005cb0:	e005      	b.n	8005cbe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0ef      	beq.n	8005c9e <RCCEx_PLLSAI1_Config+0x1a2>
>>>>>>> remotes/origin/jayce_working
        }
      }

      if(status == HAL_OK)
<<<<<<< HEAD
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d106      	bne.n	8005306 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052f8:	4b05      	ldr	r3, [pc, #20]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	4903      	ldr	r1, [pc, #12]	@ (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005302:	4313      	orrs	r3, r2
 8005304:	610b      	str	r3, [r1, #16]
=======
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d106      	bne.n	8005cd2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005cc4:	4b05      	ldr	r3, [pc, #20]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	4903      	ldr	r1, [pc, #12]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	610b      	str	r3, [r1, #16]
>>>>>>> remotes/origin/jayce_working
      }
    }
  }

  return status;
<<<<<<< HEAD
 8005306:	7bfb      	ldrb	r3, [r7, #15]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40021000 	.word	0x40021000

08005314 <RCCEx_PLLSAI2_Config>:
=======
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40021000 	.word	0x40021000

08005ce0 <RCCEx_PLLSAI2_Config>:
>>>>>>> remotes/origin/jayce_working
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
<<<<<<< HEAD
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	73fb      	strb	r3, [r7, #15]
=======
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	73fb      	strb	r3, [r7, #15]
>>>>>>> remotes/origin/jayce_working
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
<<<<<<< HEAD
 8005322:	4b69      	ldr	r3, [pc, #420]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d018      	beq.n	8005360 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800532e:	4b66      	ldr	r3, [pc, #408]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f003 0203 	and.w	r2, r3, #3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d10d      	bne.n	800535a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
       ||
 8005342:	2b00      	cmp	r3, #0
 8005344:	d009      	beq.n	800535a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005346:	4b60      	ldr	r3, [pc, #384]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	091b      	lsrs	r3, r3, #4
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
       ||
 8005356:	429a      	cmp	r2, r3
 8005358:	d047      	beq.n	80053ea <RCCEx_PLLSAI2_Config+0xd6>
=======
 8005cee:	4b69      	ldr	r3, [pc, #420]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d018      	beq.n	8005d2c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005cfa:	4b66      	ldr	r3, [pc, #408]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f003 0203 	and.w	r2, r3, #3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d10d      	bne.n	8005d26 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
       ||
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005d12:	4b60      	ldr	r3, [pc, #384]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	091b      	lsrs	r3, r3, #4
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
       ||
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d047      	beq.n	8005db6 <RCCEx_PLLSAI2_Config+0xd6>
>>>>>>> remotes/origin/jayce_working
#endif
      )
    {
      status = HAL_ERROR;
<<<<<<< HEAD
 800535a:	2301      	movs	r3, #1
 800535c:	73fb      	strb	r3, [r7, #15]
 800535e:	e044      	b.n	80053ea <RCCEx_PLLSAI2_Config+0xd6>
=======
 8005d26:	2301      	movs	r3, #1
 8005d28:	73fb      	strb	r3, [r7, #15]
 8005d2a:	e044      	b.n	8005db6 <RCCEx_PLLSAI2_Config+0xd6>
>>>>>>> remotes/origin/jayce_working
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
<<<<<<< HEAD
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b03      	cmp	r3, #3
 8005366:	d018      	beq.n	800539a <RCCEx_PLLSAI2_Config+0x86>
 8005368:	2b03      	cmp	r3, #3
 800536a:	d825      	bhi.n	80053b8 <RCCEx_PLLSAI2_Config+0xa4>
 800536c:	2b01      	cmp	r3, #1
 800536e:	d002      	beq.n	8005376 <RCCEx_PLLSAI2_Config+0x62>
 8005370:	2b02      	cmp	r3, #2
 8005372:	d009      	beq.n	8005388 <RCCEx_PLLSAI2_Config+0x74>
 8005374:	e020      	b.n	80053b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005376:	4b54      	ldr	r3, [pc, #336]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d11d      	bne.n	80053be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005386:	e01a      	b.n	80053be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005388:	4b4f      	ldr	r3, [pc, #316]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005390:	2b00      	cmp	r3, #0
 8005392:	d116      	bne.n	80053c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005398:	e013      	b.n	80053c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800539a:	4b4b      	ldr	r3, [pc, #300]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10f      	bne.n	80053c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053a6:	4b48      	ldr	r3, [pc, #288]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d109      	bne.n	80053c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053b6:	e006      	b.n	80053c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	73fb      	strb	r3, [r7, #15]
      break;
 80053bc:	e004      	b.n	80053c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053be:	bf00      	nop
 80053c0:	e002      	b.n	80053c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053c2:	bf00      	nop
 80053c4:	e000      	b.n	80053c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10d      	bne.n	80053ea <RCCEx_PLLSAI2_Config+0xd6>
=======
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d018      	beq.n	8005d66 <RCCEx_PLLSAI2_Config+0x86>
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d825      	bhi.n	8005d84 <RCCEx_PLLSAI2_Config+0xa4>
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d002      	beq.n	8005d42 <RCCEx_PLLSAI2_Config+0x62>
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d009      	beq.n	8005d54 <RCCEx_PLLSAI2_Config+0x74>
 8005d40:	e020      	b.n	8005d84 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d42:	4b54      	ldr	r3, [pc, #336]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d11d      	bne.n	8005d8a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d52:	e01a      	b.n	8005d8a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d54:	4b4f      	ldr	r3, [pc, #316]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d116      	bne.n	8005d8e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d64:	e013      	b.n	8005d8e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d66:	4b4b      	ldr	r3, [pc, #300]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10f      	bne.n	8005d92 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d72:	4b48      	ldr	r3, [pc, #288]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d109      	bne.n	8005d92 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d82:	e006      	b.n	8005d92 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	73fb      	strb	r3, [r7, #15]
      break;
 8005d88:	e004      	b.n	8005d94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d8a:	bf00      	nop
 8005d8c:	e002      	b.n	8005d94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d8e:	bf00      	nop
 8005d90:	e000      	b.n	8005d94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d92:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10d      	bne.n	8005db6 <RCCEx_PLLSAI2_Config+0xd6>
>>>>>>> remotes/origin/jayce_working
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
<<<<<<< HEAD
 80053ce:	4b3e      	ldr	r3, [pc, #248]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6819      	ldr	r1, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	3b01      	subs	r3, #1
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	430b      	orrs	r3, r1
 80053e4:	4938      	ldr	r1, [pc, #224]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60cb      	str	r3, [r1, #12]
=======
 8005d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6819      	ldr	r1, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	430b      	orrs	r3, r1
 8005db0:	4938      	ldr	r1, [pc, #224]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60cb      	str	r3, [r1, #12]
>>>>>>> remotes/origin/jayce_working
#endif
    }
  }

  if(status == HAL_OK)
<<<<<<< HEAD
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d166      	bne.n	80054be <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80053f0:	4b35      	ldr	r3, [pc, #212]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a34      	ldr	r2, [pc, #208]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80053f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fc:	f7fc f974 	bl	80016e8 <HAL_GetTick>
 8005400:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005402:	e009      	b.n	8005418 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005404:	f7fc f970 	bl	80016e8 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d902      	bls.n	8005418 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	73fb      	strb	r3, [r7, #15]
        break;
 8005416:	e005      	b.n	8005424 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005418:	4b2b      	ldr	r3, [pc, #172]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1ef      	bne.n	8005404 <RCCEx_PLLSAI2_Config+0xf0>
=======
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d166      	bne.n	8005e8a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005dbc:	4b35      	ldr	r3, [pc, #212]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a34      	ldr	r2, [pc, #208]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005dc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc8:	f7fb fc94 	bl	80016f4 <HAL_GetTick>
 8005dcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005dce:	e009      	b.n	8005de4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005dd0:	f7fb fc90 	bl	80016f4 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d902      	bls.n	8005de4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	73fb      	strb	r3, [r7, #15]
        break;
 8005de2:	e005      	b.n	8005df0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005de4:	4b2b      	ldr	r3, [pc, #172]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1ef      	bne.n	8005dd0 <RCCEx_PLLSAI2_Config+0xf0>
>>>>>>> remotes/origin/jayce_working
      }
    }

    if(status == HAL_OK)
<<<<<<< HEAD
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d149      	bne.n	80054be <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d110      	bne.n	8005452 <RCCEx_PLLSAI2_Config+0x13e>
=======
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d149      	bne.n	8005e8a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d110      	bne.n	8005e1e <RCCEx_PLLSAI2_Config+0x13e>
>>>>>>> remotes/origin/jayce_working
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
<<<<<<< HEAD
 8005430:	4b25      	ldr	r3, [pc, #148]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005438:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6892      	ldr	r2, [r2, #8]
 8005440:	0211      	lsls	r1, r2, #8
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	68d2      	ldr	r2, [r2, #12]
 8005446:	06d2      	lsls	r2, r2, #27
 8005448:	430a      	orrs	r2, r1
 800544a:	491f      	ldr	r1, [pc, #124]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800544c:	4313      	orrs	r3, r2
 800544e:	614b      	str	r3, [r1, #20]
 8005450:	e011      	b.n	8005476 <RCCEx_PLLSAI2_Config+0x162>
=======
 8005dfc:	4b25      	ldr	r3, [pc, #148]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005e04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6892      	ldr	r2, [r2, #8]
 8005e0c:	0211      	lsls	r1, r2, #8
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68d2      	ldr	r2, [r2, #12]
 8005e12:	06d2      	lsls	r2, r2, #27
 8005e14:	430a      	orrs	r2, r1
 8005e16:	491f      	ldr	r1, [pc, #124]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	614b      	str	r3, [r1, #20]
 8005e1c:	e011      	b.n	8005e42 <RCCEx_PLLSAI2_Config+0x162>
>>>>>>> remotes/origin/jayce_working
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
<<<<<<< HEAD
 8005452:	4b1d      	ldr	r3, [pc, #116]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800545a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6892      	ldr	r2, [r2, #8]
 8005462:	0211      	lsls	r1, r2, #8
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6912      	ldr	r2, [r2, #16]
 8005468:	0852      	lsrs	r2, r2, #1
 800546a:	3a01      	subs	r2, #1
 800546c:	0652      	lsls	r2, r2, #25
 800546e:	430a      	orrs	r2, r1
 8005470:	4915      	ldr	r1, [pc, #84]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005472:	4313      	orrs	r3, r2
 8005474:	614b      	str	r3, [r1, #20]
=======
 8005e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005e26:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6892      	ldr	r2, [r2, #8]
 8005e2e:	0211      	lsls	r1, r2, #8
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6912      	ldr	r2, [r2, #16]
 8005e34:	0852      	lsrs	r2, r2, #1
 8005e36:	3a01      	subs	r2, #1
 8005e38:	0652      	lsls	r2, r2, #25
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	4915      	ldr	r1, [pc, #84]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	614b      	str	r3, [r1, #20]
>>>>>>> remotes/origin/jayce_working
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
<<<<<<< HEAD
 8005476:	4b14      	ldr	r3, [pc, #80]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a13      	ldr	r2, [pc, #76]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800547c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005480:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005482:	f7fc f931 	bl	80016e8 <HAL_GetTick>
 8005486:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005488:	e009      	b.n	800549e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800548a:	f7fc f92d 	bl	80016e8 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d902      	bls.n	800549e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	73fb      	strb	r3, [r7, #15]
          break;
 800549c:	e005      	b.n	80054aa <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800549e:	4b0a      	ldr	r3, [pc, #40]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0ef      	beq.n	800548a <RCCEx_PLLSAI2_Config+0x176>
=======
 8005e42:	4b14      	ldr	r3, [pc, #80]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a13      	ldr	r2, [pc, #76]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e4e:	f7fb fc51 	bl	80016f4 <HAL_GetTick>
 8005e52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e54:	e009      	b.n	8005e6a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e56:	f7fb fc4d 	bl	80016f4 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d902      	bls.n	8005e6a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	73fb      	strb	r3, [r7, #15]
          break;
 8005e68:	e005      	b.n	8005e76 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0ef      	beq.n	8005e56 <RCCEx_PLLSAI2_Config+0x176>
>>>>>>> remotes/origin/jayce_working
        }
      }

      if(status == HAL_OK)
<<<<<<< HEAD
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d106      	bne.n	80054be <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80054b0:	4b05      	ldr	r3, [pc, #20]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80054b2:	695a      	ldr	r2, [r3, #20]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	4903      	ldr	r1, [pc, #12]	@ (80054c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	614b      	str	r3, [r1, #20]
=======
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d106      	bne.n	8005e8a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005e7c:	4b05      	ldr	r3, [pc, #20]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e7e:	695a      	ldr	r2, [r3, #20]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	4903      	ldr	r1, [pc, #12]	@ (8005e94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	614b      	str	r3, [r1, #20]
>>>>>>> remotes/origin/jayce_working
      }
    }
  }

  return status;
<<<<<<< HEAD
 80054be:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40021000 	.word	0x40021000

080054cc <HAL_TIM_Base_Init>:
=======
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	40021000 	.word	0x40021000

08005e98 <HAL_TIM_Base_Init>:
>>>>>>> remotes/origin/jayce_working
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e049      	b.n	8005572 <HAL_TIM_Base_Init+0xa6>
=======
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e049      	b.n	8005f3e <HAL_TIM_Base_Init+0xa6>
>>>>>>> remotes/origin/jayce_working
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d106      	bne.n	80054f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> remotes/origin/jayce_working
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f841 	bl	800557a <HAL_TIM_Base_MspInit>
=======
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f841 	bl	8005f46 <HAL_TIM_Base_MspInit>
>>>>>>> remotes/origin/jayce_working
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3304      	adds	r3, #4
 8005508:	4619      	mov	r1, r3
 800550a:	4610      	mov	r0, r2
 800550c:	f000 f9e0 	bl	80058d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_TIM_Base_MspInit>:
=======
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	f000 f9e0 	bl	800629c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <HAL_TIM_Base_MspInit>:
>>>>>>> remotes/origin/jayce_working
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
=======
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <HAL_TIM_Base_Start_IT>:
=======
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
	...

08005f5c <HAL_TIM_Base_Start_IT>:
>>>>>>> remotes/origin/jayce_working
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
=======
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d001      	beq.n	80055a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e04f      	b.n	8005648 <HAL_TIM_Base_Start_IT+0xb8>
=======
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d001      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e04f      	b.n	8006014 <HAL_TIM_Base_Start_IT+0xb8>
>>>>>>> remotes/origin/jayce_working
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0201 	orr.w	r2, r2, #1
 80055be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a23      	ldr	r2, [pc, #140]	@ (8005654 <HAL_TIM_Base_Start_IT+0xc4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d01d      	beq.n	8005606 <HAL_TIM_Base_Start_IT+0x76>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055d2:	d018      	beq.n	8005606 <HAL_TIM_Base_Start_IT+0x76>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005658 <HAL_TIM_Base_Start_IT+0xc8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <HAL_TIM_Base_Start_IT+0x76>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a1e      	ldr	r2, [pc, #120]	@ (800565c <HAL_TIM_Base_Start_IT+0xcc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00e      	beq.n	8005606 <HAL_TIM_Base_Start_IT+0x76>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005660 <HAL_TIM_Base_Start_IT+0xd0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d009      	beq.n	8005606 <HAL_TIM_Base_Start_IT+0x76>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005664 <HAL_TIM_Base_Start_IT+0xd4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_TIM_Base_Start_IT+0x76>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a19      	ldr	r2, [pc, #100]	@ (8005668 <HAL_TIM_Base_Start_IT+0xd8>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d115      	bne.n	8005632 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	4b17      	ldr	r3, [pc, #92]	@ (800566c <HAL_TIM_Base_Start_IT+0xdc>)
 800560e:	4013      	ands	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b06      	cmp	r3, #6
 8005616:	d015      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0xb4>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800561e:	d011      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005630:	e008      	b.n	8005644 <HAL_TIM_Base_Start_IT+0xb4>
=======
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a23      	ldr	r2, [pc, #140]	@ (8006020 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d01d      	beq.n	8005fd2 <HAL_TIM_Base_Start_IT+0x76>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f9e:	d018      	beq.n	8005fd2 <HAL_TIM_Base_Start_IT+0x76>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8006024 <HAL_TIM_Base_Start_IT+0xc8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d013      	beq.n	8005fd2 <HAL_TIM_Base_Start_IT+0x76>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a1e      	ldr	r2, [pc, #120]	@ (8006028 <HAL_TIM_Base_Start_IT+0xcc>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d00e      	beq.n	8005fd2 <HAL_TIM_Base_Start_IT+0x76>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1c      	ldr	r2, [pc, #112]	@ (800602c <HAL_TIM_Base_Start_IT+0xd0>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d009      	beq.n	8005fd2 <HAL_TIM_Base_Start_IT+0x76>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8006030 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d004      	beq.n	8005fd2 <HAL_TIM_Base_Start_IT+0x76>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a19      	ldr	r2, [pc, #100]	@ (8006034 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d115      	bne.n	8005ffe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	4b17      	ldr	r3, [pc, #92]	@ (8006038 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fda:	4013      	ands	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b06      	cmp	r3, #6
 8005fe2:	d015      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0xb4>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fea:	d011      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0201 	orr.w	r2, r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ffc:	e008      	b.n	8006010 <HAL_TIM_Base_Start_IT+0xb4>
>>>>>>> remotes/origin/jayce_working
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 0201 	orr.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	e000      	b.n	8005646 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005644:	bf00      	nop
=======
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f042 0201 	orr.w	r2, r2, #1
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e000      	b.n	8006012 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006010:	bf00      	nop
>>>>>>> remotes/origin/jayce_working
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	40012c00 	.word	0x40012c00
 8005658:	40000400 	.word	0x40000400
 800565c:	40000800 	.word	0x40000800
 8005660:	40000c00 	.word	0x40000c00
 8005664:	40013400 	.word	0x40013400
 8005668:	40014000 	.word	0x40014000
 800566c:	00010007 	.word	0x00010007

08005670 <HAL_TIM_IRQHandler>:
=======
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	40012c00 	.word	0x40012c00
 8006024:	40000400 	.word	0x40000400
 8006028:	40000800 	.word	0x40000800
 800602c:	40000c00 	.word	0x40000c00
 8006030:	40013400 	.word	0x40013400
 8006034:	40014000 	.word	0x40014000
 8006038:	00010007 	.word	0x00010007

0800603c <HAL_TIM_IRQHandler>:
>>>>>>> remotes/origin/jayce_working
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d020      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01b      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0202 	mvn.w	r2, #2
 80056a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x52>
=======
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d020      	beq.n	80060a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d01b      	beq.n	80060a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0202 	mvn.w	r2, #2
 8006070:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_TIM_IRQHandler+0x52>
>>>>>>> remotes/origin/jayce_working
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f8e9 	bl	8005892 <HAL_TIM_IC_CaptureCallback>
 80056c0:	e005      	b.n	80056ce <HAL_TIM_IRQHandler+0x5e>
=======
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f8e9 	bl	800625e <HAL_TIM_IC_CaptureCallback>
 800608c:	e005      	b.n	800609a <HAL_TIM_IRQHandler+0x5e>
>>>>>>> remotes/origin/jayce_working
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f8db 	bl	800587e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f8ec 	bl	80058a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	771a      	strb	r2, [r3, #28]
=======
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f8db 	bl	800624a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f8ec 	bl	8006272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	771a      	strb	r2, [r3, #28]
>>>>>>> remotes/origin/jayce_working
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
<<<<<<< HEAD
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d020      	beq.n	8005720 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01b      	beq.n	8005720 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0204 	mvn.w	r2, #4
 80056f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2202      	movs	r2, #2
 80056f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_TIM_IRQHandler+0x9e>
=======
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d020      	beq.n	80060ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01b      	beq.n	80060ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0204 	mvn.w	r2, #4
 80060bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2202      	movs	r2, #2
 80060c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_TIM_IRQHandler+0x9e>
>>>>>>> remotes/origin/jayce_working
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f8c3 	bl	8005892 <HAL_TIM_IC_CaptureCallback>
 800570c:	e005      	b.n	800571a <HAL_TIM_IRQHandler+0xaa>
=======
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f8c3 	bl	800625e <HAL_TIM_IC_CaptureCallback>
 80060d8:	e005      	b.n	80060e6 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> remotes/origin/jayce_working
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f8b5 	bl	800587e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f8c6 	bl	80058a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	771a      	strb	r2, [r3, #28]
=======
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f8b5 	bl	800624a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f8c6 	bl	8006272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	771a      	strb	r2, [r3, #28]
>>>>>>> remotes/origin/jayce_working
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
<<<<<<< HEAD
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d020      	beq.n	800576c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f003 0308 	and.w	r3, r3, #8
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01b      	beq.n	800576c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0208 	mvn.w	r2, #8
 800573c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2204      	movs	r2, #4
 8005742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_TIM_IRQHandler+0xea>
=======
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d020      	beq.n	8006138 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f003 0308 	and.w	r3, r3, #8
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d01b      	beq.n	8006138 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0208 	mvn.w	r2, #8
 8006108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2204      	movs	r2, #4
 800610e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_TIM_IRQHandler+0xea>
>>>>>>> remotes/origin/jayce_working
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f89d 	bl	8005892 <HAL_TIM_IC_CaptureCallback>
 8005758:	e005      	b.n	8005766 <HAL_TIM_IRQHandler+0xf6>
=======
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f89d 	bl	800625e <HAL_TIM_IC_CaptureCallback>
 8006124:	e005      	b.n	8006132 <HAL_TIM_IRQHandler+0xf6>
>>>>>>> remotes/origin/jayce_working
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f88f 	bl	800587e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f8a0 	bl	80058a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	771a      	strb	r2, [r3, #28]
=======
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f88f 	bl	800624a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f8a0 	bl	8006272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	771a      	strb	r2, [r3, #28]
>>>>>>> remotes/origin/jayce_working
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
<<<<<<< HEAD
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f003 0310 	and.w	r3, r3, #16
 8005772:	2b00      	cmp	r3, #0
 8005774:	d020      	beq.n	80057b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01b      	beq.n	80057b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0210 	mvn.w	r2, #16
 8005788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2208      	movs	r2, #8
 800578e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_TIM_IRQHandler+0x136>
=======
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f003 0310 	and.w	r3, r3, #16
 800613e:	2b00      	cmp	r3, #0
 8006140:	d020      	beq.n	8006184 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f003 0310 	and.w	r3, r3, #16
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01b      	beq.n	8006184 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f06f 0210 	mvn.w	r2, #16
 8006154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2208      	movs	r2, #8
 800615a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_TIM_IRQHandler+0x136>
>>>>>>> remotes/origin/jayce_working
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f877 	bl	8005892 <HAL_TIM_IC_CaptureCallback>
 80057a4:	e005      	b.n	80057b2 <HAL_TIM_IRQHandler+0x142>
=======
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f877 	bl	800625e <HAL_TIM_IC_CaptureCallback>
 8006170:	e005      	b.n	800617e <HAL_TIM_IRQHandler+0x142>
>>>>>>> remotes/origin/jayce_working
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f869 	bl	800587e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f87a 	bl	80058a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	771a      	strb	r2, [r3, #28]
=======
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f869 	bl	800624a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f87a 	bl	8006272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	771a      	strb	r2, [r3, #28]
>>>>>>> remotes/origin/jayce_working
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
<<<<<<< HEAD
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00c      	beq.n	80057dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d007      	beq.n	80057dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0201 	mvn.w	r2, #1
 80057d4:	611a      	str	r2, [r3, #16]
=======
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00c      	beq.n	80061a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d007      	beq.n	80061a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f06f 0201 	mvn.w	r2, #1
 80061a0:	611a      	str	r2, [r3, #16]
>>>>>>> remotes/origin/jayce_working
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fb fc58 	bl	800108c <HAL_TIM_PeriodElapsedCallback>
=======
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fa ff50 	bl	8001048 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> remotes/origin/jayce_working
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
<<<<<<< HEAD
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d104      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00c      	beq.n	800580a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d007      	beq.n	800580a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005802:	611a      	str	r2, [r3, #16]
=======
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d104      	bne.n	80061bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00c      	beq.n	80061d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80061ce:	611a      	str	r2, [r3, #16]
>>>>>>> remotes/origin/jayce_working
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f913 	bl	8005a30 <HAL_TIMEx_BreakCallback>
=======
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f913 	bl	80063fc <HAL_TIMEx_BreakCallback>
>>>>>>> remotes/origin/jayce_working
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
<<<<<<< HEAD
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00c      	beq.n	800582e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800581a:	2b00      	cmp	r3, #0
 800581c:	d007      	beq.n	800582e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005826:	611a      	str	r2, [r3, #16]
=======
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00c      	beq.n	80061fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d007      	beq.n	80061fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80061f2:	611a      	str	r2, [r3, #16]
>>>>>>> remotes/origin/jayce_working
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< HEAD
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f90b 	bl	8005a44 <HAL_TIMEx_Break2Callback>
=======
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f90b 	bl	8006410 <HAL_TIMEx_Break2Callback>
>>>>>>> remotes/origin/jayce_working
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
<<<<<<< HEAD
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00c      	beq.n	8005852 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	d007      	beq.n	8005852 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800584a:	611a      	str	r2, [r3, #16]
=======
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00c      	beq.n	800621e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800620a:	2b00      	cmp	r3, #0
 800620c:	d007      	beq.n	800621e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006216:	611a      	str	r2, [r3, #16]
>>>>>>> remotes/origin/jayce_working
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f834 	bl	80058ba <HAL_TIM_TriggerCallback>
=======
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f834 	bl	8006286 <HAL_TIM_TriggerCallback>
>>>>>>> remotes/origin/jayce_working
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
<<<<<<< HEAD
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f003 0320 	and.w	r3, r3, #32
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00c      	beq.n	8005876 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d007      	beq.n	8005876 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f06f 0220 	mvn.w	r2, #32
 800586e:	611a      	str	r2, [r3, #16]
=======
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f003 0320 	and.w	r3, r3, #32
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00c      	beq.n	8006242 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d007      	beq.n	8006242 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f06f 0220 	mvn.w	r2, #32
 800623a:	611a      	str	r2, [r3, #16]
>>>>>>> remotes/origin/jayce_working
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f8d3 	bl	8005a1c <HAL_TIMEx_CommutCallback>
=======
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f8d3 	bl	80063e8 <HAL_TIMEx_CommutCallback>
>>>>>>> remotes/origin/jayce_working
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8005876:	bf00      	nop
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8006242:	bf00      	nop
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> remotes/origin/jayce_working
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
=======
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <HAL_TIM_IC_CaptureCallback>:
=======
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_TIM_IC_CaptureCallback>:
>>>>>>> remotes/origin/jayce_working
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
=======
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> remotes/origin/jayce_working
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
=======
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <HAL_TIM_TriggerCallback>:
=======
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <HAL_TIM_TriggerCallback>:
>>>>>>> remotes/origin/jayce_working
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
=======
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80058c2:	bf00      	nop
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
	...

080058d0 <TIM_Base_SetConfig>:
=======
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
	...

0800629c <TIM_Base_SetConfig>:
>>>>>>> remotes/origin/jayce_working
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a46      	ldr	r2, [pc, #280]	@ (80059fc <TIM_Base_SetConfig+0x12c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d013      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ee:	d00f      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a43      	ldr	r2, [pc, #268]	@ (8005a00 <TIM_Base_SetConfig+0x130>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00b      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a42      	ldr	r2, [pc, #264]	@ (8005a04 <TIM_Base_SetConfig+0x134>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d007      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a41      	ldr	r2, [pc, #260]	@ (8005a08 <TIM_Base_SetConfig+0x138>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a40      	ldr	r2, [pc, #256]	@ (8005a0c <TIM_Base_SetConfig+0x13c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d108      	bne.n	8005922 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a35      	ldr	r2, [pc, #212]	@ (80059fc <TIM_Base_SetConfig+0x12c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d01f      	beq.n	800596a <TIM_Base_SetConfig+0x9a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005930:	d01b      	beq.n	800596a <TIM_Base_SetConfig+0x9a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a32      	ldr	r2, [pc, #200]	@ (8005a00 <TIM_Base_SetConfig+0x130>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d017      	beq.n	800596a <TIM_Base_SetConfig+0x9a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a31      	ldr	r2, [pc, #196]	@ (8005a04 <TIM_Base_SetConfig+0x134>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d013      	beq.n	800596a <TIM_Base_SetConfig+0x9a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a30      	ldr	r2, [pc, #192]	@ (8005a08 <TIM_Base_SetConfig+0x138>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00f      	beq.n	800596a <TIM_Base_SetConfig+0x9a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a2f      	ldr	r2, [pc, #188]	@ (8005a0c <TIM_Base_SetConfig+0x13c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00b      	beq.n	800596a <TIM_Base_SetConfig+0x9a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a2e      	ldr	r2, [pc, #184]	@ (8005a10 <TIM_Base_SetConfig+0x140>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d007      	beq.n	800596a <TIM_Base_SetConfig+0x9a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a2d      	ldr	r2, [pc, #180]	@ (8005a14 <TIM_Base_SetConfig+0x144>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d003      	beq.n	800596a <TIM_Base_SetConfig+0x9a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a2c      	ldr	r2, [pc, #176]	@ (8005a18 <TIM_Base_SetConfig+0x148>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d108      	bne.n	800597c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
=======
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a46      	ldr	r2, [pc, #280]	@ (80063c8 <TIM_Base_SetConfig+0x12c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d013      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ba:	d00f      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a43      	ldr	r2, [pc, #268]	@ (80063cc <TIM_Base_SetConfig+0x130>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00b      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a42      	ldr	r2, [pc, #264]	@ (80063d0 <TIM_Base_SetConfig+0x134>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d007      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a41      	ldr	r2, [pc, #260]	@ (80063d4 <TIM_Base_SetConfig+0x138>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d003      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a40      	ldr	r2, [pc, #256]	@ (80063d8 <TIM_Base_SetConfig+0x13c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d108      	bne.n	80062ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a35      	ldr	r2, [pc, #212]	@ (80063c8 <TIM_Base_SetConfig+0x12c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01f      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062fc:	d01b      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a32      	ldr	r2, [pc, #200]	@ (80063cc <TIM_Base_SetConfig+0x130>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d017      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a31      	ldr	r2, [pc, #196]	@ (80063d0 <TIM_Base_SetConfig+0x134>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d013      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a30      	ldr	r2, [pc, #192]	@ (80063d4 <TIM_Base_SetConfig+0x138>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00f      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a2f      	ldr	r2, [pc, #188]	@ (80063d8 <TIM_Base_SetConfig+0x13c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00b      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a2e      	ldr	r2, [pc, #184]	@ (80063dc <TIM_Base_SetConfig+0x140>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d007      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a2d      	ldr	r2, [pc, #180]	@ (80063e0 <TIM_Base_SetConfig+0x144>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d003      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a2c      	ldr	r2, [pc, #176]	@ (80063e4 <TIM_Base_SetConfig+0x148>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d108      	bne.n	8006348 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800633c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
>>>>>>> remotes/origin/jayce_working
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a16      	ldr	r2, [pc, #88]	@ (80059fc <TIM_Base_SetConfig+0x12c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d00f      	beq.n	80059c8 <TIM_Base_SetConfig+0xf8>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a18      	ldr	r2, [pc, #96]	@ (8005a0c <TIM_Base_SetConfig+0x13c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00b      	beq.n	80059c8 <TIM_Base_SetConfig+0xf8>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a17      	ldr	r2, [pc, #92]	@ (8005a10 <TIM_Base_SetConfig+0x140>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d007      	beq.n	80059c8 <TIM_Base_SetConfig+0xf8>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a16      	ldr	r2, [pc, #88]	@ (8005a14 <TIM_Base_SetConfig+0x144>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d003      	beq.n	80059c8 <TIM_Base_SetConfig+0xf8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a15      	ldr	r2, [pc, #84]	@ (8005a18 <TIM_Base_SetConfig+0x148>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d103      	bne.n	80059d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a16      	ldr	r2, [pc, #88]	@ (80063c8 <TIM_Base_SetConfig+0x12c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00f      	beq.n	8006394 <TIM_Base_SetConfig+0xf8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a18      	ldr	r2, [pc, #96]	@ (80063d8 <TIM_Base_SetConfig+0x13c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00b      	beq.n	8006394 <TIM_Base_SetConfig+0xf8>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a17      	ldr	r2, [pc, #92]	@ (80063dc <TIM_Base_SetConfig+0x140>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d007      	beq.n	8006394 <TIM_Base_SetConfig+0xf8>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a16      	ldr	r2, [pc, #88]	@ (80063e0 <TIM_Base_SetConfig+0x144>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d003      	beq.n	8006394 <TIM_Base_SetConfig+0xf8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a15      	ldr	r2, [pc, #84]	@ (80063e4 <TIM_Base_SetConfig+0x148>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d103      	bne.n	800639c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	691a      	ldr	r2, [r3, #16]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> remotes/origin/jayce_working
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d105      	bne.n	80059ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f023 0201 	bic.w	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	611a      	str	r2, [r3, #16]
  }
}
 80059ee:	bf00      	nop
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40012c00 	.word	0x40012c00
 8005a00:	40000400 	.word	0x40000400
 8005a04:	40000800 	.word	0x40000800
 8005a08:	40000c00 	.word	0x40000c00
 8005a0c:	40013400 	.word	0x40013400
 8005a10:	40014000 	.word	0x40014000
 8005a14:	40014400 	.word	0x40014400
 8005a18:	40014800 	.word	0x40014800

08005a1c <HAL_TIMEx_CommutCallback>:
=======
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d105      	bne.n	80063ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f023 0201 	bic.w	r2, r3, #1
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	611a      	str	r2, [r3, #16]
  }
}
 80063ba:	bf00      	nop
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	40012c00 	.word	0x40012c00
 80063cc:	40000400 	.word	0x40000400
 80063d0:	40000800 	.word	0x40000800
 80063d4:	40000c00 	.word	0x40000c00
 80063d8:	40013400 	.word	0x40013400
 80063dc:	40014000 	.word	0x40014000
 80063e0:	40014400 	.word	0x40014400
 80063e4:	40014800 	.word	0x40014800

080063e8 <HAL_TIMEx_CommutCallback>:
>>>>>>> remotes/origin/jayce_working
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
=======
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_TIMEx_BreakCallback>:
=======
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_TIMEx_BreakCallback>:
>>>>>>> remotes/origin/jayce_working
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
=======
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_TIMEx_Break2Callback>:
=======
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_TIMEx_Break2Callback>:
>>>>>>> remotes/origin/jayce_working
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
=======
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_UART_Init>:
=======
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_UART_Init>:
>>>>>>> remotes/origin/jayce_working
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e040      	b.n	8005aec <HAL_UART_Init+0x94>
=======
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e040      	b.n	80064b8 <HAL_UART_Init+0x94>
>>>>>>> remotes/origin/jayce_working
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d106      	bne.n	8005a80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
=======
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800643a:	2b00      	cmp	r3, #0
 800643c:	d106      	bne.n	800644c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
>>>>>>> remotes/origin/jayce_working

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fb fcb6 	bl	80013ec <HAL_UART_MspInit>
=======
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7fa ffcc 	bl	80013e4 <HAL_UART_MspInit>
>>>>>>> remotes/origin/jayce_working
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2224      	movs	r2, #36	@ 0x24
 8005a84:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0201 	bic.w	r2, r2, #1
 8005a94:	601a      	str	r2, [r3, #0]
=======
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2224      	movs	r2, #36	@ 0x24
 8006450:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0201 	bic.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
<<<<<<< HEAD
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fe52 	bl	8006748 <UART_AdvFeatureConfig>
=======
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fe06 	bl	800707c <UART_AdvFeatureConfig>
>>>>>>> remotes/origin/jayce_working
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
<<<<<<< HEAD
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fb97 	bl	80061d8 <UART_SetConfig>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d101      	bne.n	8005ab4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e01b      	b.n	8005aec <HAL_UART_Init+0x94>
=======
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fb4b 	bl	8006b0c <UART_SetConfig>
 8006476:	4603      	mov	r3, r0
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e01b      	b.n	80064b8 <HAL_UART_Init+0x94>
>>>>>>> remotes/origin/jayce_working
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ac2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ad2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fed1 	bl	800688c <UART_CheckIdleState>
 8005aea:	4603      	mov	r3, r0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08a      	sub	sp, #40	@ 0x28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	4613      	mov	r3, r2
 8005b00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d137      	bne.n	8005b7c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_UART_Receive_IT+0x24>
 8005b12:	88fb      	ldrh	r3, [r7, #6]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e030      	b.n	8005b7e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a18      	ldr	r2, [pc, #96]	@ (8005b88 <HAL_UART_Receive_IT+0x94>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d01f      	beq.n	8005b6c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d018      	beq.n	8005b6c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	613b      	str	r3, [r7, #16]
   return(result);
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b58:	623b      	str	r3, [r7, #32]
 8005b5a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	69f9      	ldr	r1, [r7, #28]
 8005b5e:	6a3a      	ldr	r2, [r7, #32]
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e6      	bne.n	8005b3a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b6c:	88fb      	ldrh	r3, [r7, #6]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 ffa0 	bl	8006ab8 <UART_Start_Receive_IT>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	e000      	b.n	8005b7e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b7c:	2302      	movs	r3, #2
  }
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3728      	adds	r7, #40	@ 0x28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40008000 	.word	0x40008000

08005b8c <HAL_UART_IRQHandler>:
=======
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800648e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800649e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0201 	orr.w	r2, r2, #1
 80064ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fe85 	bl	80071c0 <UART_CheckIdleState>
 80064b6:	4603      	mov	r3, r0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <HAL_UART_IRQHandler>:
>>>>>>> remotes/origin/jayce_working
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b0ba      	sub	sp, #232	@ 0xe8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
=======
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b0ba      	sub	sp, #232	@ 0xe8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
>>>>>>> remotes/origin/jayce_working

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< HEAD
 8005bb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005bb6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005bba:	4013      	ands	r3, r2
 8005bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005bc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d115      	bne.n	8005bf4 <HAL_UART_IRQHandler+0x68>
=======
 80064e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80064ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80064ee:	4013      	ands	r3, r2
 80064f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80064f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d115      	bne.n	8006528 <HAL_UART_IRQHandler+0x68>
>>>>>>> remotes/origin/jayce_working
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
<<<<<<< HEAD
 8005bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bcc:	f003 0320 	and.w	r3, r3, #32
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00f      	beq.n	8005bf4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d009      	beq.n	8005bf4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 82ca 	beq.w	800617e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	4798      	blx	r3
      }
      return;
 8005bf2:	e2c4      	b.n	800617e <HAL_UART_IRQHandler+0x5f2>
=======
 80064fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006500:	f003 0320 	and.w	r3, r3, #32
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00f      	beq.n	8006528 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b00      	cmp	r3, #0
 8006512:	d009      	beq.n	8006528 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 82ca 	beq.w	8006ab2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	4798      	blx	r3
      }
      return;
 8006526:	e2c4      	b.n	8006ab2 <HAL_UART_IRQHandler+0x5f2>
>>>>>>> remotes/origin/jayce_working
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
<<<<<<< HEAD
 8005bf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8117 	beq.w	8005e2c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005c0e:	4b85      	ldr	r3, [pc, #532]	@ (8005e24 <HAL_UART_IRQHandler+0x298>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 810a 	beq.w	8005e2c <HAL_UART_IRQHandler+0x2a0>
=======
 8006528:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 8117 	beq.w	8006760 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800653e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006542:	4b85      	ldr	r3, [pc, #532]	@ (8006758 <HAL_UART_IRQHandler+0x298>)
 8006544:	4013      	ands	r3, r2
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 810a 	beq.w	8006760 <HAL_UART_IRQHandler+0x2a0>
>>>>>>> remotes/origin/jayce_working
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
<<<<<<< HEAD
 8005c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d011      	beq.n	8005c48 <HAL_UART_IRQHandler+0xbc>
 8005c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2201      	movs	r2, #1
 8005c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c3e:	f043 0201 	orr.w	r2, r3, #1
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
=======
 800654c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d011      	beq.n	800657c <HAL_UART_IRQHandler+0xbc>
 8006558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800655c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00b      	beq.n	800657c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2201      	movs	r2, #1
 800656a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006572:	f043 0201 	orr.w	r2, r3, #1
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
>>>>>>> remotes/origin/jayce_working
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8005c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d011      	beq.n	8005c78 <HAL_UART_IRQHandler+0xec>
 8005c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00b      	beq.n	8005c78 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2202      	movs	r2, #2
 8005c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c6e:	f043 0204 	orr.w	r2, r3, #4
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
=======
 800657c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d011      	beq.n	80065ac <HAL_UART_IRQHandler+0xec>
 8006588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00b      	beq.n	80065ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2202      	movs	r2, #2
 800659a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065a2:	f043 0204 	orr.w	r2, r3, #4
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
>>>>>>> remotes/origin/jayce_working
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8005c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d011      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x11c>
 8005c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00b      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2204      	movs	r2, #4
 8005c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c9e:	f043 0202 	orr.w	r2, r3, #2
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
=======
 80065ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d011      	beq.n	80065dc <HAL_UART_IRQHandler+0x11c>
 80065b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00b      	beq.n	80065dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2204      	movs	r2, #4
 80065ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065d2:	f043 0202 	orr.w	r2, r3, #2
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
>>>>>>> remotes/origin/jayce_working
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< HEAD
 8005ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d017      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d105      	bne.n	8005ccc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cc4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00b      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cda:	f043 0208 	orr.w	r2, r3, #8
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
=======
 80065dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065e0:	f003 0308 	and.w	r3, r3, #8
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d017      	beq.n	8006618 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80065f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00b      	beq.n	8006618 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2208      	movs	r2, #8
 8006606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800660e:	f043 0208 	orr.w	r2, r3, #8
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
>>>>>>> remotes/origin/jayce_working
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< HEAD
 8005ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ce8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d012      	beq.n	8005d16 <HAL_UART_IRQHandler+0x18a>
 8005cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cf4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00c      	beq.n	8005d16 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d0c:	f043 0220 	orr.w	r2, r3, #32
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
=======
 8006618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800661c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006620:	2b00      	cmp	r3, #0
 8006622:	d012      	beq.n	800664a <HAL_UART_IRQHandler+0x18a>
 8006624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006628:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00c      	beq.n	800664a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006638:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006640:	f043 0220 	orr.w	r2, r3, #32
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
>>>>>>> remotes/origin/jayce_working
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8230 	beq.w	8006182 <HAL_UART_IRQHandler+0x5f6>
=======
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8230 	beq.w	8006ab6 <HAL_UART_IRQHandler+0x5f6>
>>>>>>> remotes/origin/jayce_working
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
<<<<<<< HEAD
 8005d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00d      	beq.n	8005d4a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	4798      	blx	r3
=======
 8006656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800665a:	f003 0320 	and.w	r3, r3, #32
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00d      	beq.n	800667e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d007      	beq.n	800667e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	4798      	blx	r3
>>>>>>> remotes/origin/jayce_working
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< HEAD
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d5e:	2b40      	cmp	r3, #64	@ 0x40
 8005d60:	d005      	beq.n	8005d6e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d66:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d04f      	beq.n	8005e0e <HAL_UART_IRQHandler+0x282>
=======
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006684:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006692:	2b40      	cmp	r3, #64	@ 0x40
 8006694:	d005      	beq.n	80066a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800669a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d04f      	beq.n	8006742 <HAL_UART_IRQHandler+0x282>
>>>>>>> remotes/origin/jayce_working
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 ff68 	bl	8006c44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d7e:	2b40      	cmp	r3, #64	@ 0x40
 8005d80:	d141      	bne.n	8005e06 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3308      	adds	r3, #8
 8005d88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005da0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3308      	adds	r3, #8
 8005daa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005dae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005db2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005dba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005dc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1d9      	bne.n	8005d82 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d013      	beq.n	8005dfe <HAL_UART_IRQHandler+0x272>
=======
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fea1 	bl	80073ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066b2:	2b40      	cmp	r3, #64	@ 0x40
 80066b4:	d141      	bne.n	800673a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3308      	adds	r3, #8
 80066bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80066cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3308      	adds	r3, #8
 80066de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80066e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80066e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80066ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80066fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1d9      	bne.n	80066b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006706:	2b00      	cmp	r3, #0
 8006708:	d013      	beq.n	8006732 <HAL_UART_IRQHandler+0x272>
>>>>>>> remotes/origin/jayce_working
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dda:	4a13      	ldr	r2, [pc, #76]	@ (8005e28 <HAL_UART_IRQHandler+0x29c>)
 8005ddc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fc ff92 	bl	8002d0c <HAL_DMA_Abort_IT>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d017      	beq.n	8005e1e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005df8:	4610      	mov	r0, r2
 8005dfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dfc:	e00f      	b.n	8005e1e <HAL_UART_IRQHandler+0x292>
=======
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800670e:	4a13      	ldr	r2, [pc, #76]	@ (800675c <HAL_UART_IRQHandler+0x29c>)
 8006710:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006716:	4618      	mov	r0, r3
 8006718:	f7fc ff00 	bl	800351c <HAL_DMA_Abort_IT>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d017      	beq.n	8006752 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800672c:	4610      	mov	r0, r2
 800672e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006730:	e00f      	b.n	8006752 <HAL_UART_IRQHandler+0x292>
>>>>>>> remotes/origin/jayce_working
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f9d4 	bl	80061ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e04:	e00b      	b.n	8005e1e <HAL_UART_IRQHandler+0x292>
=======
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f9d4 	bl	8006ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006738:	e00b      	b.n	8006752 <HAL_UART_IRQHandler+0x292>
>>>>>>> remotes/origin/jayce_working
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f9d0 	bl	80061ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0c:	e007      	b.n	8005e1e <HAL_UART_IRQHandler+0x292>
=======
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f9d0 	bl	8006ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006740:	e007      	b.n	8006752 <HAL_UART_IRQHandler+0x292>
>>>>>>> remotes/origin/jayce_working
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f9cc 	bl	80061ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005e1c:	e1b1      	b.n	8006182 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e1e:	bf00      	nop
    return;
 8005e20:	e1af      	b.n	8006182 <HAL_UART_IRQHandler+0x5f6>
 8005e22:	bf00      	nop
 8005e24:	04000120 	.word	0x04000120
 8005e28:	08006d0d 	.word	0x08006d0d
=======
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f9cc 	bl	8006ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006750:	e1b1      	b.n	8006ab6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006752:	bf00      	nop
    return;
 8006754:	e1af      	b.n	8006ab6 <HAL_UART_IRQHandler+0x5f6>
 8006756:	bf00      	nop
 8006758:	04000120 	.word	0x04000120
 800675c:	080074b3 	.word	0x080074b3
>>>>>>> remotes/origin/jayce_working

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	f040 816a 	bne.w	800610a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e3a:	f003 0310 	and.w	r3, r3, #16
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 8163 	beq.w	800610a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 815c 	beq.w	800610a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2210      	movs	r2, #16
 8005e58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e64:	2b40      	cmp	r3, #64	@ 0x40
 8005e66:	f040 80d4 	bne.w	8006012 <HAL_UART_IRQHandler+0x486>
=======
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006764:	2b01      	cmp	r3, #1
 8006766:	f040 816a 	bne.w	8006a3e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800676a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800676e:	f003 0310 	and.w	r3, r3, #16
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 8163 	beq.w	8006a3e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 815c 	beq.w	8006a3e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2210      	movs	r2, #16
 800678c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006798:	2b40      	cmp	r3, #64	@ 0x40
 800679a:	f040 80d4 	bne.w	8006946 <HAL_UART_IRQHandler+0x486>
>>>>>>> remotes/origin/jayce_working
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 80ad 	beq.w	8005fda <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005e86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	f080 80a5 	bcs.w	8005fda <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e96:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f040 8086 	bne.w	8005fb8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ed6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005eda:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ee2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1da      	bne.n	8005eac <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3308      	adds	r3, #8
 8005efc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f08:	f023 0301 	bic.w	r3, r3, #1
 8005f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3308      	adds	r3, #8
 8005f16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e1      	bne.n	8005ef6 <HAL_UART_IRQHandler+0x36a>
=======
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 80ad 	beq.w	800690e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80067ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067be:	429a      	cmp	r2, r3
 80067c0:	f080 80a5 	bcs.w	800690e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0320 	and.w	r3, r3, #32
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f040 8086 	bne.w	80068ec <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80067ec:	e853 3f00 	ldrex	r3, [r3]
 80067f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80067f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	461a      	mov	r2, r3
 8006806:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800680a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800680e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006816:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006822:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1da      	bne.n	80067e0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3308      	adds	r3, #8
 8006830:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800683a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800683c:	f023 0301 	bic.w	r3, r3, #1
 8006840:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3308      	adds	r3, #8
 800684a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800684e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006852:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006856:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006860:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e1      	bne.n	800682a <HAL_UART_IRQHandler+0x36a>
>>>>>>> remotes/origin/jayce_working

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3308      	adds	r3, #8
 8005f38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3308      	adds	r3, #8
 8005f52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1e3      	bne.n	8005f32 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f88:	f023 0310 	bic.w	r3, r3, #16
 8005f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005fa0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005fa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e4      	bne.n	8005f78 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fc fe6c 	bl	8002c90 <HAL_DMA_Abort>
=======
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3308      	adds	r3, #8
 800686c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006878:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800687c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3308      	adds	r3, #8
 8006886:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800688a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800688c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006890:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006898:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1e3      	bne.n	8006866 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80068ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068bc:	f023 0310 	bic.w	r3, r3, #16
 80068c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068d6:	e841 2300 	strex	r3, r2, [r1]
 80068da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80068dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1e4      	bne.n	80068ac <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fc fdda 	bl	80034a0 <HAL_DMA_Abort>
>>>>>>> remotes/origin/jayce_working
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	665a      	str	r2, [r3, #100]	@ 0x64
=======
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	665a      	str	r2, [r3, #100]	@ 0x64
>>>>>>> remotes/origin/jayce_working
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f8f4 	bl	80061c0 <HAL_UARTEx_RxEventCallback>
=======
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068fe:	b29b      	uxth	r3, r3
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	b29b      	uxth	r3, r3
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f8f4 	bl	8006af4 <HAL_UARTEx_RxEventCallback>
>>>>>>> remotes/origin/jayce_working
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
<<<<<<< HEAD
 8005fd8:	e0d5      	b.n	8006186 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005fe0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	f040 80ce 	bne.w	8006186 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b20      	cmp	r3, #32
 8005ff8:	f040 80c5 	bne.w	8006186 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f8d8 	bl	80061c0 <HAL_UARTEx_RxEventCallback>
      return;
 8006010:	e0b9      	b.n	8006186 <HAL_UART_IRQHandler+0x5fa>
=======
 800690c:	e0d5      	b.n	8006aba <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006914:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006918:	429a      	cmp	r2, r3
 800691a:	f040 80ce 	bne.w	8006aba <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b20      	cmp	r3, #32
 800692c:	f040 80c5 	bne.w	8006aba <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800693c:	4619      	mov	r1, r3
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f8d8 	bl	8006af4 <HAL_UARTEx_RxEventCallback>
      return;
 8006944:	e0b9      	b.n	8006aba <HAL_UART_IRQHandler+0x5fa>
>>>>>>> remotes/origin/jayce_working
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800601e:	b29b      	uxth	r3, r3
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800602c:	b29b      	uxth	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 80ab 	beq.w	800618a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006034:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 80a6 	beq.w	800618a <HAL_UART_IRQHandler+0x5fe>
=======
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006952:	b29b      	uxth	r3, r3
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006960:	b29b      	uxth	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 80ab 	beq.w	8006abe <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006968:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 80a6 	beq.w	8006abe <HAL_UART_IRQHandler+0x5fe>
>>>>>>> remotes/origin/jayce_working

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800604c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800604e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006052:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006060:	647b      	str	r3, [r7, #68]	@ 0x44
 8006062:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006064:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006066:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006068:	e841 2300 	strex	r3, r2, [r1]
 800606c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800606e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e4      	bne.n	800603e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3308      	adds	r3, #8
 800607a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607e:	e853 3f00 	ldrex	r3, [r3]
 8006082:	623b      	str	r3, [r7, #32]
   return(result);
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	f023 0301 	bic.w	r3, r3, #1
 800608a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3308      	adds	r3, #8
 8006094:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006098:	633a      	str	r2, [r7, #48]	@ 0x30
 800609a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800609e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060a0:	e841 2300 	strex	r3, r2, [r1]
 80060a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e3      	bne.n	8006074 <HAL_UART_IRQHandler+0x4e8>
=======
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697a:	e853 3f00 	ldrex	r3, [r3]
 800697e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006982:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006986:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006994:	647b      	str	r3, [r7, #68]	@ 0x44
 8006996:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800699a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800699c:	e841 2300 	strex	r3, r2, [r1]
 80069a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e4      	bne.n	8006972 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3308      	adds	r3, #8
 80069ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b2:	e853 3f00 	ldrex	r3, [r3]
 80069b6:	623b      	str	r3, [r7, #32]
   return(result);
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	f023 0301 	bic.w	r3, r3, #1
 80069be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3308      	adds	r3, #8
 80069c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80069cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80069ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e3      	bne.n	80069a8 <HAL_UART_IRQHandler+0x4e8>
>>>>>>> remotes/origin/jayce_working
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f023 0310 	bic.w	r3, r3, #16
 80060d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	461a      	mov	r2, r3
 80060de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80060e2:	61fb      	str	r3, [r7, #28]
 80060e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	69b9      	ldr	r1, [r7, #24]
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	617b      	str	r3, [r7, #20]
   return(result);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e4      	bne.n	80060c0 <HAL_UART_IRQHandler+0x534>
=======
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f023 0310 	bic.w	r3, r3, #16
 8006a08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006a16:	61fb      	str	r3, [r7, #28]
 8006a18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	69b9      	ldr	r1, [r7, #24]
 8006a1c:	69fa      	ldr	r2, [r7, #28]
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	617b      	str	r3, [r7, #20]
   return(result);
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e4      	bne.n	80069f4 <HAL_UART_IRQHandler+0x534>
>>>>>>> remotes/origin/jayce_working

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2202      	movs	r2, #2
 80060fa:	665a      	str	r2, [r3, #100]	@ 0x64
=======
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	665a      	str	r2, [r3, #100]	@ 0x64
>>>>>>> remotes/origin/jayce_working
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 80060fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f85c 	bl	80061c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006108:	e03f      	b.n	800618a <HAL_UART_IRQHandler+0x5fe>
=======
 8006a30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f85c 	bl	8006af4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a3c:	e03f      	b.n	8006abe <HAL_UART_IRQHandler+0x5fe>
>>>>>>> remotes/origin/jayce_working
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
<<<<<<< HEAD
 800610a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800610e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00e      	beq.n	8006134 <HAL_UART_IRQHandler+0x5a8>
 8006116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800611a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d008      	beq.n	8006134 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800612a:	621a      	str	r2, [r3, #32]
=======
 8006a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00e      	beq.n	8006a68 <HAL_UART_IRQHandler+0x5a8>
 8006a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d008      	beq.n	8006a68 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006a5e:	621a      	str	r2, [r3, #32]
>>>>>>> remotes/origin/jayce_working
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
<<<<<<< HEAD
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 ffe9 	bl	8007104 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006132:	e02d      	b.n	8006190 <HAL_UART_IRQHandler+0x604>
=======
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fd66 	bl	8007532 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a66:	e02d      	b.n	8006ac4 <HAL_UART_IRQHandler+0x604>
>>>>>>> remotes/origin/jayce_working
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
<<<<<<< HEAD
 8006134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00e      	beq.n	800615e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006148:	2b00      	cmp	r3, #0
 800614a:	d008      	beq.n	800615e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01c      	beq.n	800618e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	4798      	blx	r3
    }
    return;
 800615c:	e017      	b.n	800618e <HAL_UART_IRQHandler+0x602>
=======
 8006a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00e      	beq.n	8006a92 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d008      	beq.n	8006a92 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01c      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	4798      	blx	r3
    }
    return;
 8006a90:	e017      	b.n	8006ac2 <HAL_UART_IRQHandler+0x602>
>>>>>>> remotes/origin/jayce_working
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< HEAD
 800615e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006166:	2b00      	cmp	r3, #0
 8006168:	d012      	beq.n	8006190 <HAL_UART_IRQHandler+0x604>
 800616a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800616e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00c      	beq.n	8006190 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fdde 	bl	8006d38 <UART_EndTransmit_IT>
    return;
 800617c:	e008      	b.n	8006190 <HAL_UART_IRQHandler+0x604>
      return;
 800617e:	bf00      	nop
 8006180:	e006      	b.n	8006190 <HAL_UART_IRQHandler+0x604>
    return;
 8006182:	bf00      	nop
 8006184:	e004      	b.n	8006190 <HAL_UART_IRQHandler+0x604>
      return;
 8006186:	bf00      	nop
 8006188:	e002      	b.n	8006190 <HAL_UART_IRQHandler+0x604>
      return;
 800618a:	bf00      	nop
 800618c:	e000      	b.n	8006190 <HAL_UART_IRQHandler+0x604>
    return;
 800618e:	bf00      	nop
=======
 8006a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d012      	beq.n	8006ac4 <HAL_UART_IRQHandler+0x604>
 8006a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00c      	beq.n	8006ac4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fd17 	bl	80074de <UART_EndTransmit_IT>
    return;
 8006ab0:	e008      	b.n	8006ac4 <HAL_UART_IRQHandler+0x604>
      return;
 8006ab2:	bf00      	nop
 8006ab4:	e006      	b.n	8006ac4 <HAL_UART_IRQHandler+0x604>
    return;
 8006ab6:	bf00      	nop
 8006ab8:	e004      	b.n	8006ac4 <HAL_UART_IRQHandler+0x604>
      return;
 8006aba:	bf00      	nop
 8006abc:	e002      	b.n	8006ac4 <HAL_UART_IRQHandler+0x604>
      return;
 8006abe:	bf00      	nop
 8006ac0:	e000      	b.n	8006ac4 <HAL_UART_IRQHandler+0x604>
    return;
 8006ac2:	bf00      	nop
>>>>>>> remotes/origin/jayce_working
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
<<<<<<< HEAD
 8006190:	37e8      	adds	r7, #232	@ 0xe8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop

08006198 <HAL_UART_TxCpltCallback>:
=======
 8006ac4:	37e8      	adds	r7, #232	@ 0xe8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop

08006acc <HAL_UART_TxCpltCallback>:
>>>>>>> remotes/origin/jayce_working
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
=======
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_UART_ErrorCallback>:
=======
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_UART_ErrorCallback>:
>>>>>>> remotes/origin/jayce_working
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
=======
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_UARTEx_RxEventCallback>:
=======
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_UARTEx_RxEventCallback>:
>>>>>>> remotes/origin/jayce_working
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	807b      	strh	r3, [r7, #2]
=======
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	807b      	strh	r3, [r7, #2]
>>>>>>> remotes/origin/jayce_working
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <UART_SetConfig>:
=======
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <UART_SetConfig>:
>>>>>>> remotes/origin/jayce_working
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80061d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061dc:	b08a      	sub	sp, #40	@ 0x28
 80061de:	af00      	add	r7, sp, #0
 80061e0:	60f8      	str	r0, [r7, #12]
=======
 8006b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b10:	b08a      	sub	sp, #40	@ 0x28
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60f8      	str	r0, [r7, #12]
>>>>>>> remotes/origin/jayce_working
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< HEAD
 80061e2:	2300      	movs	r3, #0
 80061e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
=======
 8006b16:	2300      	movs	r3, #0
 8006b18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
>>>>>>> remotes/origin/jayce_working
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< HEAD
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	431a      	orrs	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	431a      	orrs	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	4ba4      	ldr	r3, [pc, #656]	@ (8006498 <UART_SetConfig+0x2c0>)
 8006208:	4013      	ands	r3, r2
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	6812      	ldr	r2, [r2, #0]
 800620e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006210:	430b      	orrs	r3, r1
 8006212:	6013      	str	r3, [r2, #0]
=======
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	431a      	orrs	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	4ba4      	ldr	r3, [pc, #656]	@ (8006dcc <UART_SetConfig+0x2c0>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	6812      	ldr	r2, [r2, #0]
 8006b42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b44:	430b      	orrs	r3, r1
 8006b46:	6013      	str	r3, [r2, #0]
>>>>>>> remotes/origin/jayce_working

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
=======
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	605a      	str	r2, [r3, #4]
>>>>>>> remotes/origin/jayce_working
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< HEAD
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a99      	ldr	r2, [pc, #612]	@ (800649c <UART_SetConfig+0x2c4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006240:	4313      	orrs	r3, r2
 8006242:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006254:	430a      	orrs	r2, r1
 8006256:	609a      	str	r2, [r3, #8]
=======
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a99      	ldr	r2, [pc, #612]	@ (8006dd0 <UART_SetConfig+0x2c4>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d004      	beq.n	8006b78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b74:	4313      	orrs	r3, r2
 8006b76:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	609a      	str	r2, [r3, #8]
>>>>>>> remotes/origin/jayce_working
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
<<<<<<< HEAD
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a90      	ldr	r2, [pc, #576]	@ (80064a0 <UART_SetConfig+0x2c8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d126      	bne.n	80062b0 <UART_SetConfig+0xd8>
 8006262:	4b90      	ldr	r3, [pc, #576]	@ (80064a4 <UART_SetConfig+0x2cc>)
 8006264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006268:	f003 0303 	and.w	r3, r3, #3
 800626c:	2b03      	cmp	r3, #3
 800626e:	d81b      	bhi.n	80062a8 <UART_SetConfig+0xd0>
 8006270:	a201      	add	r2, pc, #4	@ (adr r2, 8006278 <UART_SetConfig+0xa0>)
 8006272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006276:	bf00      	nop
 8006278:	08006289 	.word	0x08006289
 800627c:	08006299 	.word	0x08006299
 8006280:	08006291 	.word	0x08006291
 8006284:	080062a1 	.word	0x080062a1
 8006288:	2301      	movs	r3, #1
 800628a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800628e:	e116      	b.n	80064be <UART_SetConfig+0x2e6>
 8006290:	2302      	movs	r3, #2
 8006292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006296:	e112      	b.n	80064be <UART_SetConfig+0x2e6>
 8006298:	2304      	movs	r3, #4
 800629a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800629e:	e10e      	b.n	80064be <UART_SetConfig+0x2e6>
 80062a0:	2308      	movs	r3, #8
 80062a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062a6:	e10a      	b.n	80064be <UART_SetConfig+0x2e6>
 80062a8:	2310      	movs	r3, #16
 80062aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ae:	e106      	b.n	80064be <UART_SetConfig+0x2e6>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a7c      	ldr	r2, [pc, #496]	@ (80064a8 <UART_SetConfig+0x2d0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d138      	bne.n	800632c <UART_SetConfig+0x154>
 80062ba:	4b7a      	ldr	r3, [pc, #488]	@ (80064a4 <UART_SetConfig+0x2cc>)
 80062bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c0:	f003 030c 	and.w	r3, r3, #12
 80062c4:	2b0c      	cmp	r3, #12
 80062c6:	d82d      	bhi.n	8006324 <UART_SetConfig+0x14c>
 80062c8:	a201      	add	r2, pc, #4	@ (adr r2, 80062d0 <UART_SetConfig+0xf8>)
 80062ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ce:	bf00      	nop
 80062d0:	08006305 	.word	0x08006305
 80062d4:	08006325 	.word	0x08006325
 80062d8:	08006325 	.word	0x08006325
 80062dc:	08006325 	.word	0x08006325
 80062e0:	08006315 	.word	0x08006315
 80062e4:	08006325 	.word	0x08006325
 80062e8:	08006325 	.word	0x08006325
 80062ec:	08006325 	.word	0x08006325
 80062f0:	0800630d 	.word	0x0800630d
 80062f4:	08006325 	.word	0x08006325
 80062f8:	08006325 	.word	0x08006325
 80062fc:	08006325 	.word	0x08006325
 8006300:	0800631d 	.word	0x0800631d
 8006304:	2300      	movs	r3, #0
 8006306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800630a:	e0d8      	b.n	80064be <UART_SetConfig+0x2e6>
 800630c:	2302      	movs	r3, #2
 800630e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006312:	e0d4      	b.n	80064be <UART_SetConfig+0x2e6>
 8006314:	2304      	movs	r3, #4
 8006316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800631a:	e0d0      	b.n	80064be <UART_SetConfig+0x2e6>
 800631c:	2308      	movs	r3, #8
 800631e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006322:	e0cc      	b.n	80064be <UART_SetConfig+0x2e6>
 8006324:	2310      	movs	r3, #16
 8006326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800632a:	e0c8      	b.n	80064be <UART_SetConfig+0x2e6>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a5e      	ldr	r2, [pc, #376]	@ (80064ac <UART_SetConfig+0x2d4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d125      	bne.n	8006382 <UART_SetConfig+0x1aa>
 8006336:	4b5b      	ldr	r3, [pc, #364]	@ (80064a4 <UART_SetConfig+0x2cc>)
 8006338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800633c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006340:	2b30      	cmp	r3, #48	@ 0x30
 8006342:	d016      	beq.n	8006372 <UART_SetConfig+0x19a>
 8006344:	2b30      	cmp	r3, #48	@ 0x30
 8006346:	d818      	bhi.n	800637a <UART_SetConfig+0x1a2>
 8006348:	2b20      	cmp	r3, #32
 800634a:	d00a      	beq.n	8006362 <UART_SetConfig+0x18a>
 800634c:	2b20      	cmp	r3, #32
 800634e:	d814      	bhi.n	800637a <UART_SetConfig+0x1a2>
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <UART_SetConfig+0x182>
 8006354:	2b10      	cmp	r3, #16
 8006356:	d008      	beq.n	800636a <UART_SetConfig+0x192>
 8006358:	e00f      	b.n	800637a <UART_SetConfig+0x1a2>
 800635a:	2300      	movs	r3, #0
 800635c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006360:	e0ad      	b.n	80064be <UART_SetConfig+0x2e6>
 8006362:	2302      	movs	r3, #2
 8006364:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006368:	e0a9      	b.n	80064be <UART_SetConfig+0x2e6>
 800636a:	2304      	movs	r3, #4
 800636c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006370:	e0a5      	b.n	80064be <UART_SetConfig+0x2e6>
 8006372:	2308      	movs	r3, #8
 8006374:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006378:	e0a1      	b.n	80064be <UART_SetConfig+0x2e6>
 800637a:	2310      	movs	r3, #16
 800637c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006380:	e09d      	b.n	80064be <UART_SetConfig+0x2e6>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a4a      	ldr	r2, [pc, #296]	@ (80064b0 <UART_SetConfig+0x2d8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d125      	bne.n	80063d8 <UART_SetConfig+0x200>
 800638c:	4b45      	ldr	r3, [pc, #276]	@ (80064a4 <UART_SetConfig+0x2cc>)
 800638e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006392:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006396:	2bc0      	cmp	r3, #192	@ 0xc0
 8006398:	d016      	beq.n	80063c8 <UART_SetConfig+0x1f0>
 800639a:	2bc0      	cmp	r3, #192	@ 0xc0
 800639c:	d818      	bhi.n	80063d0 <UART_SetConfig+0x1f8>
 800639e:	2b80      	cmp	r3, #128	@ 0x80
 80063a0:	d00a      	beq.n	80063b8 <UART_SetConfig+0x1e0>
 80063a2:	2b80      	cmp	r3, #128	@ 0x80
 80063a4:	d814      	bhi.n	80063d0 <UART_SetConfig+0x1f8>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <UART_SetConfig+0x1d8>
 80063aa:	2b40      	cmp	r3, #64	@ 0x40
 80063ac:	d008      	beq.n	80063c0 <UART_SetConfig+0x1e8>
 80063ae:	e00f      	b.n	80063d0 <UART_SetConfig+0x1f8>
 80063b0:	2300      	movs	r3, #0
 80063b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063b6:	e082      	b.n	80064be <UART_SetConfig+0x2e6>
 80063b8:	2302      	movs	r3, #2
 80063ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063be:	e07e      	b.n	80064be <UART_SetConfig+0x2e6>
 80063c0:	2304      	movs	r3, #4
 80063c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063c6:	e07a      	b.n	80064be <UART_SetConfig+0x2e6>
 80063c8:	2308      	movs	r3, #8
 80063ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ce:	e076      	b.n	80064be <UART_SetConfig+0x2e6>
 80063d0:	2310      	movs	r3, #16
 80063d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063d6:	e072      	b.n	80064be <UART_SetConfig+0x2e6>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a35      	ldr	r2, [pc, #212]	@ (80064b4 <UART_SetConfig+0x2dc>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d12a      	bne.n	8006438 <UART_SetConfig+0x260>
 80063e2:	4b30      	ldr	r3, [pc, #192]	@ (80064a4 <UART_SetConfig+0x2cc>)
 80063e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063f0:	d01a      	beq.n	8006428 <UART_SetConfig+0x250>
 80063f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063f6:	d81b      	bhi.n	8006430 <UART_SetConfig+0x258>
 80063f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063fc:	d00c      	beq.n	8006418 <UART_SetConfig+0x240>
 80063fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006402:	d815      	bhi.n	8006430 <UART_SetConfig+0x258>
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <UART_SetConfig+0x238>
 8006408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800640c:	d008      	beq.n	8006420 <UART_SetConfig+0x248>
 800640e:	e00f      	b.n	8006430 <UART_SetConfig+0x258>
 8006410:	2300      	movs	r3, #0
 8006412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006416:	e052      	b.n	80064be <UART_SetConfig+0x2e6>
 8006418:	2302      	movs	r3, #2
 800641a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800641e:	e04e      	b.n	80064be <UART_SetConfig+0x2e6>
 8006420:	2304      	movs	r3, #4
 8006422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006426:	e04a      	b.n	80064be <UART_SetConfig+0x2e6>
 8006428:	2308      	movs	r3, #8
 800642a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800642e:	e046      	b.n	80064be <UART_SetConfig+0x2e6>
 8006430:	2310      	movs	r3, #16
 8006432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006436:	e042      	b.n	80064be <UART_SetConfig+0x2e6>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a17      	ldr	r2, [pc, #92]	@ (800649c <UART_SetConfig+0x2c4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d13a      	bne.n	80064b8 <UART_SetConfig+0x2e0>
 8006442:	4b18      	ldr	r3, [pc, #96]	@ (80064a4 <UART_SetConfig+0x2cc>)
 8006444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006448:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800644c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006450:	d01a      	beq.n	8006488 <UART_SetConfig+0x2b0>
 8006452:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006456:	d81b      	bhi.n	8006490 <UART_SetConfig+0x2b8>
 8006458:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800645c:	d00c      	beq.n	8006478 <UART_SetConfig+0x2a0>
 800645e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006462:	d815      	bhi.n	8006490 <UART_SetConfig+0x2b8>
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <UART_SetConfig+0x298>
 8006468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800646c:	d008      	beq.n	8006480 <UART_SetConfig+0x2a8>
 800646e:	e00f      	b.n	8006490 <UART_SetConfig+0x2b8>
 8006470:	2300      	movs	r3, #0
 8006472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006476:	e022      	b.n	80064be <UART_SetConfig+0x2e6>
 8006478:	2302      	movs	r3, #2
 800647a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800647e:	e01e      	b.n	80064be <UART_SetConfig+0x2e6>
 8006480:	2304      	movs	r3, #4
 8006482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006486:	e01a      	b.n	80064be <UART_SetConfig+0x2e6>
 8006488:	2308      	movs	r3, #8
 800648a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800648e:	e016      	b.n	80064be <UART_SetConfig+0x2e6>
 8006490:	2310      	movs	r3, #16
 8006492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006496:	e012      	b.n	80064be <UART_SetConfig+0x2e6>
 8006498:	efff69f3 	.word	0xefff69f3
 800649c:	40008000 	.word	0x40008000
 80064a0:	40013800 	.word	0x40013800
 80064a4:	40021000 	.word	0x40021000
 80064a8:	40004400 	.word	0x40004400
 80064ac:	40004800 	.word	0x40004800
 80064b0:	40004c00 	.word	0x40004c00
 80064b4:	40005000 	.word	0x40005000
 80064b8:	2310      	movs	r3, #16
 80064ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a9f      	ldr	r2, [pc, #636]	@ (8006740 <UART_SetConfig+0x568>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d17a      	bne.n	80065be <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d824      	bhi.n	800651a <UART_SetConfig+0x342>
 80064d0:	a201      	add	r2, pc, #4	@ (adr r2, 80064d8 <UART_SetConfig+0x300>)
 80064d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d6:	bf00      	nop
 80064d8:	080064fd 	.word	0x080064fd
 80064dc:	0800651b 	.word	0x0800651b
 80064e0:	08006505 	.word	0x08006505
 80064e4:	0800651b 	.word	0x0800651b
 80064e8:	0800650b 	.word	0x0800650b
 80064ec:	0800651b 	.word	0x0800651b
 80064f0:	0800651b 	.word	0x0800651b
 80064f4:	0800651b 	.word	0x0800651b
 80064f8:	08006513 	.word	0x08006513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064fc:	f7fe fa5e 	bl	80049bc <HAL_RCC_GetPCLK1Freq>
 8006500:	61f8      	str	r0, [r7, #28]
        break;
 8006502:	e010      	b.n	8006526 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006504:	4b8f      	ldr	r3, [pc, #572]	@ (8006744 <UART_SetConfig+0x56c>)
 8006506:	61fb      	str	r3, [r7, #28]
        break;
 8006508:	e00d      	b.n	8006526 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800650a:	f7fe f9bf 	bl	800488c <HAL_RCC_GetSysClockFreq>
 800650e:	61f8      	str	r0, [r7, #28]
        break;
 8006510:	e009      	b.n	8006526 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006516:	61fb      	str	r3, [r7, #28]
        break;
 8006518:	e005      	b.n	8006526 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006524:	bf00      	nop
=======
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a90      	ldr	r2, [pc, #576]	@ (8006dd4 <UART_SetConfig+0x2c8>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d126      	bne.n	8006be4 <UART_SetConfig+0xd8>
 8006b96:	4b90      	ldr	r3, [pc, #576]	@ (8006dd8 <UART_SetConfig+0x2cc>)
 8006b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b9c:	f003 0303 	and.w	r3, r3, #3
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	d81b      	bhi.n	8006bdc <UART_SetConfig+0xd0>
 8006ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bac <UART_SetConfig+0xa0>)
 8006ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006baa:	bf00      	nop
 8006bac:	08006bbd 	.word	0x08006bbd
 8006bb0:	08006bcd 	.word	0x08006bcd
 8006bb4:	08006bc5 	.word	0x08006bc5
 8006bb8:	08006bd5 	.word	0x08006bd5
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bc2:	e116      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bca:	e112      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006bcc:	2304      	movs	r3, #4
 8006bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bd2:	e10e      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006bd4:	2308      	movs	r3, #8
 8006bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bda:	e10a      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006bdc:	2310      	movs	r3, #16
 8006bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006be2:	e106      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a7c      	ldr	r2, [pc, #496]	@ (8006ddc <UART_SetConfig+0x2d0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d138      	bne.n	8006c60 <UART_SetConfig+0x154>
 8006bee:	4b7a      	ldr	r3, [pc, #488]	@ (8006dd8 <UART_SetConfig+0x2cc>)
 8006bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bf4:	f003 030c 	and.w	r3, r3, #12
 8006bf8:	2b0c      	cmp	r3, #12
 8006bfa:	d82d      	bhi.n	8006c58 <UART_SetConfig+0x14c>
 8006bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8006c04 <UART_SetConfig+0xf8>)
 8006bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c02:	bf00      	nop
 8006c04:	08006c39 	.word	0x08006c39
 8006c08:	08006c59 	.word	0x08006c59
 8006c0c:	08006c59 	.word	0x08006c59
 8006c10:	08006c59 	.word	0x08006c59
 8006c14:	08006c49 	.word	0x08006c49
 8006c18:	08006c59 	.word	0x08006c59
 8006c1c:	08006c59 	.word	0x08006c59
 8006c20:	08006c59 	.word	0x08006c59
 8006c24:	08006c41 	.word	0x08006c41
 8006c28:	08006c59 	.word	0x08006c59
 8006c2c:	08006c59 	.word	0x08006c59
 8006c30:	08006c59 	.word	0x08006c59
 8006c34:	08006c51 	.word	0x08006c51
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c3e:	e0d8      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006c40:	2302      	movs	r3, #2
 8006c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c46:	e0d4      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006c48:	2304      	movs	r3, #4
 8006c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c4e:	e0d0      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006c50:	2308      	movs	r3, #8
 8006c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c56:	e0cc      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006c58:	2310      	movs	r3, #16
 8006c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c5e:	e0c8      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a5e      	ldr	r2, [pc, #376]	@ (8006de0 <UART_SetConfig+0x2d4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d125      	bne.n	8006cb6 <UART_SetConfig+0x1aa>
 8006c6a:	4b5b      	ldr	r3, [pc, #364]	@ (8006dd8 <UART_SetConfig+0x2cc>)
 8006c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006c74:	2b30      	cmp	r3, #48	@ 0x30
 8006c76:	d016      	beq.n	8006ca6 <UART_SetConfig+0x19a>
 8006c78:	2b30      	cmp	r3, #48	@ 0x30
 8006c7a:	d818      	bhi.n	8006cae <UART_SetConfig+0x1a2>
 8006c7c:	2b20      	cmp	r3, #32
 8006c7e:	d00a      	beq.n	8006c96 <UART_SetConfig+0x18a>
 8006c80:	2b20      	cmp	r3, #32
 8006c82:	d814      	bhi.n	8006cae <UART_SetConfig+0x1a2>
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d002      	beq.n	8006c8e <UART_SetConfig+0x182>
 8006c88:	2b10      	cmp	r3, #16
 8006c8a:	d008      	beq.n	8006c9e <UART_SetConfig+0x192>
 8006c8c:	e00f      	b.n	8006cae <UART_SetConfig+0x1a2>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c94:	e0ad      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006c96:	2302      	movs	r3, #2
 8006c98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c9c:	e0a9      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006c9e:	2304      	movs	r3, #4
 8006ca0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ca4:	e0a5      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006ca6:	2308      	movs	r3, #8
 8006ca8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cac:	e0a1      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006cae:	2310      	movs	r3, #16
 8006cb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cb4:	e09d      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a4a      	ldr	r2, [pc, #296]	@ (8006de4 <UART_SetConfig+0x2d8>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d125      	bne.n	8006d0c <UART_SetConfig+0x200>
 8006cc0:	4b45      	ldr	r3, [pc, #276]	@ (8006dd8 <UART_SetConfig+0x2cc>)
 8006cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cc6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006cca:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ccc:	d016      	beq.n	8006cfc <UART_SetConfig+0x1f0>
 8006cce:	2bc0      	cmp	r3, #192	@ 0xc0
 8006cd0:	d818      	bhi.n	8006d04 <UART_SetConfig+0x1f8>
 8006cd2:	2b80      	cmp	r3, #128	@ 0x80
 8006cd4:	d00a      	beq.n	8006cec <UART_SetConfig+0x1e0>
 8006cd6:	2b80      	cmp	r3, #128	@ 0x80
 8006cd8:	d814      	bhi.n	8006d04 <UART_SetConfig+0x1f8>
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <UART_SetConfig+0x1d8>
 8006cde:	2b40      	cmp	r3, #64	@ 0x40
 8006ce0:	d008      	beq.n	8006cf4 <UART_SetConfig+0x1e8>
 8006ce2:	e00f      	b.n	8006d04 <UART_SetConfig+0x1f8>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cea:	e082      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006cec:	2302      	movs	r3, #2
 8006cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cf2:	e07e      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006cf4:	2304      	movs	r3, #4
 8006cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cfa:	e07a      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006cfc:	2308      	movs	r3, #8
 8006cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d02:	e076      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006d04:	2310      	movs	r3, #16
 8006d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d0a:	e072      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a35      	ldr	r2, [pc, #212]	@ (8006de8 <UART_SetConfig+0x2dc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d12a      	bne.n	8006d6c <UART_SetConfig+0x260>
 8006d16:	4b30      	ldr	r3, [pc, #192]	@ (8006dd8 <UART_SetConfig+0x2cc>)
 8006d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d24:	d01a      	beq.n	8006d5c <UART_SetConfig+0x250>
 8006d26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d2a:	d81b      	bhi.n	8006d64 <UART_SetConfig+0x258>
 8006d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d30:	d00c      	beq.n	8006d4c <UART_SetConfig+0x240>
 8006d32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d36:	d815      	bhi.n	8006d64 <UART_SetConfig+0x258>
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <UART_SetConfig+0x238>
 8006d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d40:	d008      	beq.n	8006d54 <UART_SetConfig+0x248>
 8006d42:	e00f      	b.n	8006d64 <UART_SetConfig+0x258>
 8006d44:	2300      	movs	r3, #0
 8006d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d4a:	e052      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d52:	e04e      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006d54:	2304      	movs	r3, #4
 8006d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d5a:	e04a      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006d5c:	2308      	movs	r3, #8
 8006d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d62:	e046      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006d64:	2310      	movs	r3, #16
 8006d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d6a:	e042      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a17      	ldr	r2, [pc, #92]	@ (8006dd0 <UART_SetConfig+0x2c4>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d13a      	bne.n	8006dec <UART_SetConfig+0x2e0>
 8006d76:	4b18      	ldr	r3, [pc, #96]	@ (8006dd8 <UART_SetConfig+0x2cc>)
 8006d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006d80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d84:	d01a      	beq.n	8006dbc <UART_SetConfig+0x2b0>
 8006d86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d8a:	d81b      	bhi.n	8006dc4 <UART_SetConfig+0x2b8>
 8006d8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d90:	d00c      	beq.n	8006dac <UART_SetConfig+0x2a0>
 8006d92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d96:	d815      	bhi.n	8006dc4 <UART_SetConfig+0x2b8>
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <UART_SetConfig+0x298>
 8006d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006da0:	d008      	beq.n	8006db4 <UART_SetConfig+0x2a8>
 8006da2:	e00f      	b.n	8006dc4 <UART_SetConfig+0x2b8>
 8006da4:	2300      	movs	r3, #0
 8006da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006daa:	e022      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006dac:	2302      	movs	r3, #2
 8006dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006db2:	e01e      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006db4:	2304      	movs	r3, #4
 8006db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dba:	e01a      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006dbc:	2308      	movs	r3, #8
 8006dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dc2:	e016      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006dc4:	2310      	movs	r3, #16
 8006dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dca:	e012      	b.n	8006df2 <UART_SetConfig+0x2e6>
 8006dcc:	efff69f3 	.word	0xefff69f3
 8006dd0:	40008000 	.word	0x40008000
 8006dd4:	40013800 	.word	0x40013800
 8006dd8:	40021000 	.word	0x40021000
 8006ddc:	40004400 	.word	0x40004400
 8006de0:	40004800 	.word	0x40004800
 8006de4:	40004c00 	.word	0x40004c00
 8006de8:	40005000 	.word	0x40005000
 8006dec:	2310      	movs	r3, #16
 8006dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a9f      	ldr	r2, [pc, #636]	@ (8007074 <UART_SetConfig+0x568>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d17a      	bne.n	8006ef2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006dfc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	d824      	bhi.n	8006e4e <UART_SetConfig+0x342>
 8006e04:	a201      	add	r2, pc, #4	@ (adr r2, 8006e0c <UART_SetConfig+0x300>)
 8006e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0a:	bf00      	nop
 8006e0c:	08006e31 	.word	0x08006e31
 8006e10:	08006e4f 	.word	0x08006e4f
 8006e14:	08006e39 	.word	0x08006e39
 8006e18:	08006e4f 	.word	0x08006e4f
 8006e1c:	08006e3f 	.word	0x08006e3f
 8006e20:	08006e4f 	.word	0x08006e4f
 8006e24:	08006e4f 	.word	0x08006e4f
 8006e28:	08006e4f 	.word	0x08006e4f
 8006e2c:	08006e47 	.word	0x08006e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e30:	f7fe faaa 	bl	8005388 <HAL_RCC_GetPCLK1Freq>
 8006e34:	61f8      	str	r0, [r7, #28]
        break;
 8006e36:	e010      	b.n	8006e5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e38:	4b8f      	ldr	r3, [pc, #572]	@ (8007078 <UART_SetConfig+0x56c>)
 8006e3a:	61fb      	str	r3, [r7, #28]
        break;
 8006e3c:	e00d      	b.n	8006e5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e3e:	f7fe fa0b 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8006e42:	61f8      	str	r0, [r7, #28]
        break;
 8006e44:	e009      	b.n	8006e5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e4a:	61fb      	str	r3, [r7, #28]
        break;
 8006e4c:	e005      	b.n	8006e5a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006e58:	bf00      	nop
>>>>>>> remotes/origin/jayce_working
    }

    /* If proper clock source reported */
    if (pclk != 0U)
<<<<<<< HEAD
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 80fb 	beq.w	8006724 <UART_SetConfig+0x54c>
=======
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 80fb 	beq.w	8007058 <UART_SetConfig+0x54c>
>>>>>>> remotes/origin/jayce_working
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
<<<<<<< HEAD
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	4613      	mov	r3, r2
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	4413      	add	r3, r2
 8006538:	69fa      	ldr	r2, [r7, #28]
 800653a:	429a      	cmp	r2, r3
 800653c:	d305      	bcc.n	800654a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006544:	69fa      	ldr	r2, [r7, #28]
 8006546:	429a      	cmp	r2, r3
 8006548:	d903      	bls.n	8006552 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006550:	e0e8      	b.n	8006724 <UART_SetConfig+0x54c>
=======
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	4613      	mov	r3, r2
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	4413      	add	r3, r2
 8006e6c:	69fa      	ldr	r2, [r7, #28]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d305      	bcc.n	8006e7e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d903      	bls.n	8006e86 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006e84:	e0e8      	b.n	8007058 <UART_SetConfig+0x54c>
>>>>>>> remotes/origin/jayce_working
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
<<<<<<< HEAD
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	2200      	movs	r2, #0
 8006556:	461c      	mov	r4, r3
 8006558:	4615      	mov	r5, r2
 800655a:	f04f 0200 	mov.w	r2, #0
 800655e:	f04f 0300 	mov.w	r3, #0
 8006562:	022b      	lsls	r3, r5, #8
 8006564:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006568:	0222      	lsls	r2, r4, #8
 800656a:	68f9      	ldr	r1, [r7, #12]
 800656c:	6849      	ldr	r1, [r1, #4]
 800656e:	0849      	lsrs	r1, r1, #1
 8006570:	2000      	movs	r0, #0
 8006572:	4688      	mov	r8, r1
 8006574:	4681      	mov	r9, r0
 8006576:	eb12 0a08 	adds.w	sl, r2, r8
 800657a:	eb43 0b09 	adc.w	fp, r3, r9
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	603b      	str	r3, [r7, #0]
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800658c:	4650      	mov	r0, sl
 800658e:	4659      	mov	r1, fp
 8006590:	f7f9 fe2e 	bl	80001f0 <__aeabi_uldivmod>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4613      	mov	r3, r2
 800659a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065a2:	d308      	bcc.n	80065b6 <UART_SetConfig+0x3de>
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065aa:	d204      	bcs.n	80065b6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	60da      	str	r2, [r3, #12]
 80065b4:	e0b6      	b.n	8006724 <UART_SetConfig+0x54c>
=======
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	461c      	mov	r4, r3
 8006e8c:	4615      	mov	r5, r2
 8006e8e:	f04f 0200 	mov.w	r2, #0
 8006e92:	f04f 0300 	mov.w	r3, #0
 8006e96:	022b      	lsls	r3, r5, #8
 8006e98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006e9c:	0222      	lsls	r2, r4, #8
 8006e9e:	68f9      	ldr	r1, [r7, #12]
 8006ea0:	6849      	ldr	r1, [r1, #4]
 8006ea2:	0849      	lsrs	r1, r1, #1
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	4688      	mov	r8, r1
 8006ea8:	4681      	mov	r9, r0
 8006eaa:	eb12 0a08 	adds.w	sl, r2, r8
 8006eae:	eb43 0b09 	adc.w	fp, r3, r9
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	603b      	str	r3, [r7, #0]
 8006eba:	607a      	str	r2, [r7, #4]
 8006ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ec0:	4650      	mov	r0, sl
 8006ec2:	4659      	mov	r1, fp
 8006ec4:	f7f9 f994 	bl	80001f0 <__aeabi_uldivmod>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4613      	mov	r3, r2
 8006ece:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ed6:	d308      	bcc.n	8006eea <UART_SetConfig+0x3de>
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ede:	d204      	bcs.n	8006eea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	60da      	str	r2, [r3, #12]
 8006ee8:	e0b6      	b.n	8007058 <UART_SetConfig+0x54c>
>>>>>>> remotes/origin/jayce_working
        }
        else
        {
          ret = HAL_ERROR;
<<<<<<< HEAD
 80065b6:	2301      	movs	r3, #1
 80065b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80065bc:	e0b2      	b.n	8006724 <UART_SetConfig+0x54c>
=======
 8006eea:	2301      	movs	r3, #1
 8006eec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006ef0:	e0b2      	b.n	8007058 <UART_SetConfig+0x54c>
>>>>>>> remotes/origin/jayce_working
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< HEAD
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065c6:	d15e      	bne.n	8006686 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80065c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d828      	bhi.n	8006622 <UART_SetConfig+0x44a>
 80065d0:	a201      	add	r2, pc, #4	@ (adr r2, 80065d8 <UART_SetConfig+0x400>)
 80065d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d6:	bf00      	nop
 80065d8:	080065fd 	.word	0x080065fd
 80065dc:	08006605 	.word	0x08006605
 80065e0:	0800660d 	.word	0x0800660d
 80065e4:	08006623 	.word	0x08006623
 80065e8:	08006613 	.word	0x08006613
 80065ec:	08006623 	.word	0x08006623
 80065f0:	08006623 	.word	0x08006623
 80065f4:	08006623 	.word	0x08006623
 80065f8:	0800661b 	.word	0x0800661b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065fc:	f7fe f9de 	bl	80049bc <HAL_RCC_GetPCLK1Freq>
 8006600:	61f8      	str	r0, [r7, #28]
        break;
 8006602:	e014      	b.n	800662e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006604:	f7fe f9f0 	bl	80049e8 <HAL_RCC_GetPCLK2Freq>
 8006608:	61f8      	str	r0, [r7, #28]
        break;
 800660a:	e010      	b.n	800662e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800660c:	4b4d      	ldr	r3, [pc, #308]	@ (8006744 <UART_SetConfig+0x56c>)
 800660e:	61fb      	str	r3, [r7, #28]
        break;
 8006610:	e00d      	b.n	800662e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006612:	f7fe f93b 	bl	800488c <HAL_RCC_GetSysClockFreq>
 8006616:	61f8      	str	r0, [r7, #28]
        break;
 8006618:	e009      	b.n	800662e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800661a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800661e:	61fb      	str	r3, [r7, #28]
        break;
 8006620:	e005      	b.n	800662e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800662c:	bf00      	nop
=======
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006efa:	d15e      	bne.n	8006fba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006efc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d828      	bhi.n	8006f56 <UART_SetConfig+0x44a>
 8006f04:	a201      	add	r2, pc, #4	@ (adr r2, 8006f0c <UART_SetConfig+0x400>)
 8006f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0a:	bf00      	nop
 8006f0c:	08006f31 	.word	0x08006f31
 8006f10:	08006f39 	.word	0x08006f39
 8006f14:	08006f41 	.word	0x08006f41
 8006f18:	08006f57 	.word	0x08006f57
 8006f1c:	08006f47 	.word	0x08006f47
 8006f20:	08006f57 	.word	0x08006f57
 8006f24:	08006f57 	.word	0x08006f57
 8006f28:	08006f57 	.word	0x08006f57
 8006f2c:	08006f4f 	.word	0x08006f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f30:	f7fe fa2a 	bl	8005388 <HAL_RCC_GetPCLK1Freq>
 8006f34:	61f8      	str	r0, [r7, #28]
        break;
 8006f36:	e014      	b.n	8006f62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f38:	f7fe fa3c 	bl	80053b4 <HAL_RCC_GetPCLK2Freq>
 8006f3c:	61f8      	str	r0, [r7, #28]
        break;
 8006f3e:	e010      	b.n	8006f62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f40:	4b4d      	ldr	r3, [pc, #308]	@ (8007078 <UART_SetConfig+0x56c>)
 8006f42:	61fb      	str	r3, [r7, #28]
        break;
 8006f44:	e00d      	b.n	8006f62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f46:	f7fe f987 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8006f4a:	61f8      	str	r0, [r7, #28]
        break;
 8006f4c:	e009      	b.n	8006f62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f52:	61fb      	str	r3, [r7, #28]
        break;
 8006f54:	e005      	b.n	8006f62 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006f60:	bf00      	nop
>>>>>>> remotes/origin/jayce_working
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< HEAD
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d077      	beq.n	8006724 <UART_SetConfig+0x54c>
=======
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d077      	beq.n	8007058 <UART_SetConfig+0x54c>
>>>>>>> remotes/origin/jayce_working
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
<<<<<<< HEAD
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	005a      	lsls	r2, r3, #1
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	085b      	lsrs	r3, r3, #1
 800663e:	441a      	add	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	fbb2 f3f3 	udiv	r3, r2, r3
 8006648:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	2b0f      	cmp	r3, #15
 800664e:	d916      	bls.n	800667e <UART_SetConfig+0x4a6>
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006656:	d212      	bcs.n	800667e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	b29b      	uxth	r3, r3
 800665c:	f023 030f 	bic.w	r3, r3, #15
 8006660:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	085b      	lsrs	r3, r3, #1
 8006666:	b29b      	uxth	r3, r3
 8006668:	f003 0307 	and.w	r3, r3, #7
 800666c:	b29a      	uxth	r2, r3
 800666e:	8afb      	ldrh	r3, [r7, #22]
 8006670:	4313      	orrs	r3, r2
 8006672:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	8afa      	ldrh	r2, [r7, #22]
 800667a:	60da      	str	r2, [r3, #12]
 800667c:	e052      	b.n	8006724 <UART_SetConfig+0x54c>
=======
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	005a      	lsls	r2, r3, #1
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	085b      	lsrs	r3, r3, #1
 8006f72:	441a      	add	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2b0f      	cmp	r3, #15
 8006f82:	d916      	bls.n	8006fb2 <UART_SetConfig+0x4a6>
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f8a:	d212      	bcs.n	8006fb2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f023 030f 	bic.w	r3, r3, #15
 8006f94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	085b      	lsrs	r3, r3, #1
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	8afb      	ldrh	r3, [r7, #22]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	8afa      	ldrh	r2, [r7, #22]
 8006fae:	60da      	str	r2, [r3, #12]
 8006fb0:	e052      	b.n	8007058 <UART_SetConfig+0x54c>
>>>>>>> remotes/origin/jayce_working
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 800667e:	2301      	movs	r3, #1
 8006680:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006684:	e04e      	b.n	8006724 <UART_SetConfig+0x54c>
=======
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006fb8:	e04e      	b.n	8007058 <UART_SetConfig+0x54c>
>>>>>>> remotes/origin/jayce_working
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< HEAD
 8006686:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800668a:	2b08      	cmp	r3, #8
 800668c:	d827      	bhi.n	80066de <UART_SetConfig+0x506>
 800668e:	a201      	add	r2, pc, #4	@ (adr r2, 8006694 <UART_SetConfig+0x4bc>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066b9 	.word	0x080066b9
 8006698:	080066c1 	.word	0x080066c1
 800669c:	080066c9 	.word	0x080066c9
 80066a0:	080066df 	.word	0x080066df
 80066a4:	080066cf 	.word	0x080066cf
 80066a8:	080066df 	.word	0x080066df
 80066ac:	080066df 	.word	0x080066df
 80066b0:	080066df 	.word	0x080066df
 80066b4:	080066d7 	.word	0x080066d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066b8:	f7fe f980 	bl	80049bc <HAL_RCC_GetPCLK1Freq>
 80066bc:	61f8      	str	r0, [r7, #28]
        break;
 80066be:	e014      	b.n	80066ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066c0:	f7fe f992 	bl	80049e8 <HAL_RCC_GetPCLK2Freq>
 80066c4:	61f8      	str	r0, [r7, #28]
        break;
 80066c6:	e010      	b.n	80066ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066c8:	4b1e      	ldr	r3, [pc, #120]	@ (8006744 <UART_SetConfig+0x56c>)
 80066ca:	61fb      	str	r3, [r7, #28]
        break;
 80066cc:	e00d      	b.n	80066ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ce:	f7fe f8dd 	bl	800488c <HAL_RCC_GetSysClockFreq>
 80066d2:	61f8      	str	r0, [r7, #28]
        break;
 80066d4:	e009      	b.n	80066ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066da:	61fb      	str	r3, [r7, #28]
        break;
 80066dc:	e005      	b.n	80066ea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80066e8:	bf00      	nop
    }

    if (pclk != 0U)
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d019      	beq.n	8006724 <UART_SetConfig+0x54c>
=======
 8006fba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006fbe:	2b08      	cmp	r3, #8
 8006fc0:	d827      	bhi.n	8007012 <UART_SetConfig+0x506>
 8006fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fc8 <UART_SetConfig+0x4bc>)
 8006fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc8:	08006fed 	.word	0x08006fed
 8006fcc:	08006ff5 	.word	0x08006ff5
 8006fd0:	08006ffd 	.word	0x08006ffd
 8006fd4:	08007013 	.word	0x08007013
 8006fd8:	08007003 	.word	0x08007003
 8006fdc:	08007013 	.word	0x08007013
 8006fe0:	08007013 	.word	0x08007013
 8006fe4:	08007013 	.word	0x08007013
 8006fe8:	0800700b 	.word	0x0800700b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fec:	f7fe f9cc 	bl	8005388 <HAL_RCC_GetPCLK1Freq>
 8006ff0:	61f8      	str	r0, [r7, #28]
        break;
 8006ff2:	e014      	b.n	800701e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ff4:	f7fe f9de 	bl	80053b4 <HAL_RCC_GetPCLK2Freq>
 8006ff8:	61f8      	str	r0, [r7, #28]
        break;
 8006ffa:	e010      	b.n	800701e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8007078 <UART_SetConfig+0x56c>)
 8006ffe:	61fb      	str	r3, [r7, #28]
        break;
 8007000:	e00d      	b.n	800701e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007002:	f7fe f929 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8007006:	61f8      	str	r0, [r7, #28]
        break;
 8007008:	e009      	b.n	800701e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800700a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800700e:	61fb      	str	r3, [r7, #28]
        break;
 8007010:	e005      	b.n	800701e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800701c:	bf00      	nop
    }

    if (pclk != 0U)
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d019      	beq.n	8007058 <UART_SetConfig+0x54c>
>>>>>>> remotes/origin/jayce_working
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
<<<<<<< HEAD
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	085a      	lsrs	r2, r3, #1
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	441a      	add	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006702:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	2b0f      	cmp	r3, #15
 8006708:	d909      	bls.n	800671e <UART_SetConfig+0x546>
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006710:	d205      	bcs.n	800671e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60da      	str	r2, [r3, #12]
 800671c:	e002      	b.n	8006724 <UART_SetConfig+0x54c>
=======
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	085a      	lsrs	r2, r3, #1
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	441a      	add	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	fbb2 f3f3 	udiv	r3, r2, r3
 8007036:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	2b0f      	cmp	r3, #15
 800703c:	d909      	bls.n	8007052 <UART_SetConfig+0x546>
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007044:	d205      	bcs.n	8007052 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	b29a      	uxth	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	60da      	str	r2, [r3, #12]
 8007050:	e002      	b.n	8007058 <UART_SetConfig+0x54c>
>>>>>>> remotes/origin/jayce_working
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 800671e:	2301      	movs	r3, #1
 8006720:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
=======
 8007052:	2301      	movs	r3, #1
 8007054:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
>>>>>>> remotes/origin/jayce_working
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
<<<<<<< HEAD
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006730:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006734:	4618      	mov	r0, r3
 8006736:	3728      	adds	r7, #40	@ 0x28
 8006738:	46bd      	mov	sp, r7
 800673a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800673e:	bf00      	nop
 8006740:	40008000 	.word	0x40008000
 8006744:	00f42400 	.word	0x00f42400

08006748 <UART_AdvFeatureConfig>:
=======
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007064:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007068:	4618      	mov	r0, r3
 800706a:	3728      	adds	r7, #40	@ 0x28
 800706c:	46bd      	mov	sp, r7
 800706e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007072:	bf00      	nop
 8007074:	40008000 	.word	0x40008000
 8007078:	00f42400 	.word	0x00f42400

0800707c <UART_AdvFeatureConfig>:
>>>>>>> remotes/origin/jayce_working
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
=======
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< HEAD
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00a      	beq.n	8006772 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	605a      	str	r2, [r3, #4]
=======
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007088:	f003 0308 	and.w	r3, r3, #8
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00a      	beq.n	80070a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	605a      	str	r2, [r3, #4]
>>>>>>> remotes/origin/jayce_working
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< HEAD
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	605a      	str	r2, [r3, #4]
=======
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	605a      	str	r2, [r3, #4]
>>>>>>> remotes/origin/jayce_working
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< HEAD
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
=======
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00a      	beq.n	80070ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	605a      	str	r2, [r3, #4]
>>>>>>> remotes/origin/jayce_working
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< HEAD
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ba:	f003 0304 	and.w	r3, r3, #4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	605a      	str	r2, [r3, #4]
=======
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ee:	f003 0304 	and.w	r3, r3, #4
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	605a      	str	r2, [r3, #4]
>>>>>>> remotes/origin/jayce_working
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< HEAD
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067dc:	f003 0310 	and.w	r3, r3, #16
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	609a      	str	r2, [r3, #8]
=======
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007110:	f003 0310 	and.w	r3, r3, #16
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00a      	beq.n	800712e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	609a      	str	r2, [r3, #8]
>>>>>>> remotes/origin/jayce_working
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< HEAD
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	609a      	str	r2, [r3, #8]
=======
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	609a      	str	r2, [r3, #8]
>>>>>>> remotes/origin/jayce_working
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< HEAD
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01a      	beq.n	800685e <UART_AdvFeatureConfig+0x116>
=======
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007158:	2b00      	cmp	r3, #0
 800715a:	d01a      	beq.n	8007192 <UART_AdvFeatureConfig+0x116>
>>>>>>> remotes/origin/jayce_working
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< HEAD
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006842:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006846:	d10a      	bne.n	800685e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	605a      	str	r2, [r3, #4]
=======
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	430a      	orrs	r2, r1
 8007170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007176:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800717a:	d10a      	bne.n	8007192 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	605a      	str	r2, [r3, #4]
>>>>>>> remotes/origin/jayce_working
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< HEAD
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00a      	beq.n	8006880 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	605a      	str	r2, [r3, #4]
  }
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <UART_CheckIdleState>:
=======
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	605a      	str	r2, [r3, #4]
  }
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <UART_CheckIdleState>:
>>>>>>> remotes/origin/jayce_working
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800688c:	b580      	push	{r7, lr}
 800688e:	b098      	sub	sp, #96	@ 0x60
 8006890:	af02      	add	r7, sp, #8
 8006892:	6078      	str	r0, [r7, #4]
=======
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b098      	sub	sp, #96	@ 0x60
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800689c:	f7fa ff24 	bl	80016e8 <HAL_GetTick>
 80068a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d12e      	bne.n	800690e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068b8:	2200      	movs	r2, #0
 80068ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f88c 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d021      	beq.n	800690e <UART_CheckIdleState+0x82>
=======
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071d0:	f7fa fa90 	bl	80016f4 <HAL_GetTick>
 80071d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0308 	and.w	r3, r3, #8
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d12e      	bne.n	8007242 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071ec:	2200      	movs	r2, #0
 80071ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f88c 	bl	8007310 <UART_WaitOnFlagUntilTimeout>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d021      	beq.n	8007242 <UART_CheckIdleState+0x82>
>>>>>>> remotes/origin/jayce_working
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
<<<<<<< HEAD
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068de:	653b      	str	r3, [r7, #80]	@ 0x50
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e6      	bne.n	80068ca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e062      	b.n	80069d4 <UART_CheckIdleState+0x148>
=======
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800720c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800720e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007212:	653b      	str	r3, [r7, #80]	@ 0x50
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	461a      	mov	r2, r3
 800721a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800721c:	647b      	str	r3, [r7, #68]	@ 0x44
 800721e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800722a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e6      	bne.n	80071fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2220      	movs	r2, #32
 8007234:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e062      	b.n	8007308 <UART_CheckIdleState+0x148>
>>>>>>> remotes/origin/jayce_working
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< HEAD
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b04      	cmp	r3, #4
 800691a:	d149      	bne.n	80069b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800691c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006924:	2200      	movs	r2, #0
 8006926:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f856 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d03c      	beq.n	80069b0 <UART_CheckIdleState+0x124>
=======
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b04      	cmp	r3, #4
 800724e:	d149      	bne.n	80072e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007250:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007258:	2200      	movs	r2, #0
 800725a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f856 	bl	8007310 <UART_WaitOnFlagUntilTimeout>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d03c      	beq.n	80072e4 <UART_CheckIdleState+0x124>
>>>>>>> remotes/origin/jayce_working
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693e:	e853 3f00 	ldrex	r3, [r3]
 8006942:	623b      	str	r3, [r7, #32]
   return(result);
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800694a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	461a      	mov	r2, r3
 8006952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006954:	633b      	str	r3, [r7, #48]	@ 0x30
 8006956:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006958:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800695a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800695c:	e841 2300 	strex	r3, r2, [r1]
 8006960:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e6      	bne.n	8006936 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3308      	adds	r3, #8
 800696e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	60fb      	str	r3, [r7, #12]
   return(result);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0301 	bic.w	r3, r3, #1
 800697e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3308      	adds	r3, #8
 8006986:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006988:	61fa      	str	r2, [r7, #28]
 800698a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	69b9      	ldr	r1, [r7, #24]
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	617b      	str	r3, [r7, #20]
   return(result);
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e5      	bne.n	8006968 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e011      	b.n	80069d4 <UART_CheckIdleState+0x148>
=======
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	623b      	str	r3, [r7, #32]
   return(result);
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800727e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007288:	633b      	str	r3, [r7, #48]	@ 0x30
 800728a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800728e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e6      	bne.n	800726a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3308      	adds	r3, #8
 80072a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	e853 3f00 	ldrex	r3, [r3]
 80072aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f023 0301 	bic.w	r3, r3, #1
 80072b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3308      	adds	r3, #8
 80072ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072bc:	61fa      	str	r2, [r7, #28]
 80072be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	69b9      	ldr	r1, [r7, #24]
 80072c2:	69fa      	ldr	r2, [r7, #28]
 80072c4:	e841 2300 	strex	r3, r2, [r1]
 80072c8:	617b      	str	r3, [r7, #20]
   return(result);
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1e5      	bne.n	800729c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2220      	movs	r2, #32
 80072d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e011      	b.n	8007308 <UART_CheckIdleState+0x148>
>>>>>>> remotes/origin/jayce_working
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2220      	movs	r2, #32
 80069b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3758      	adds	r7, #88	@ 0x58
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <UART_WaitOnFlagUntilTimeout>:
=======
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2220      	movs	r2, #32
 80072e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2220      	movs	r2, #32
 80072ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3758      	adds	r7, #88	@ 0x58
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> remotes/origin/jayce_working
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	603b      	str	r3, [r7, #0]
 80069e8:	4613      	mov	r3, r2
 80069ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ec:	e04f      	b.n	8006a8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069f4:	d04b      	beq.n	8006a8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f6:	f7fa fe77 	bl	80016e8 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d302      	bcc.n	8006a0c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e04e      	b.n	8006aae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0304 	and.w	r3, r3, #4
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d037      	beq.n	8006a8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b80      	cmp	r3, #128	@ 0x80
 8006a22:	d034      	beq.n	8006a8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2b40      	cmp	r3, #64	@ 0x40
 8006a28:	d031      	beq.n	8006a8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d110      	bne.n	8006a5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2208      	movs	r2, #8
 8006a3e:	621a      	str	r2, [r3, #32]
=======
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	4613      	mov	r3, r2
 800731e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007320:	e04f      	b.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007328:	d04b      	beq.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732a:	f7fa f9e3 	bl	80016f4 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	429a      	cmp	r2, r3
 8007338:	d302      	bcc.n	8007340 <UART_WaitOnFlagUntilTimeout+0x30>
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e04e      	b.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0304 	and.w	r3, r3, #4
 800734e:	2b00      	cmp	r3, #0
 8007350:	d037      	beq.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2b80      	cmp	r3, #128	@ 0x80
 8007356:	d034      	beq.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b40      	cmp	r3, #64	@ 0x40
 800735c:	d031      	beq.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b08      	cmp	r3, #8
 800736a:	d110      	bne.n	800738e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2208      	movs	r2, #8
 8007372:	621a      	str	r2, [r3, #32]
>>>>>>> remotes/origin/jayce_working

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 f8ff 	bl	8006c44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2208      	movs	r2, #8
 8006a4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e029      	b.n	8006aae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a68:	d111      	bne.n	8006a8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a72:	621a      	str	r2, [r3, #32]
=======
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 f838 	bl	80073ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2208      	movs	r2, #8
 800737e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e029      	b.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800739c:	d111      	bne.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80073a6:	621a      	str	r2, [r3, #32]
>>>>>>> remotes/origin/jayce_working

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 f8e5 	bl	8006c44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e00f      	b.n	8006aae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69da      	ldr	r2, [r3, #28]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	4013      	ands	r3, r2
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	bf0c      	ite	eq
 8006a9e:	2301      	moveq	r3, #1
 8006aa0:	2300      	movne	r3, #0
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	79fb      	ldrb	r3, [r7, #7]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d0a0      	beq.n	80069ee <UART_WaitOnFlagUntilTimeout+0x12>
=======
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f81e 	bl	80073ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e00f      	b.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69da      	ldr	r2, [r3, #28]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	4013      	ands	r3, r2
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	bf0c      	ite	eq
 80073d2:	2301      	moveq	r3, #1
 80073d4:	2300      	movne	r3, #0
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	461a      	mov	r2, r3
 80073da:	79fb      	ldrb	r3, [r7, #7]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d0a0      	beq.n	8007322 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> remotes/origin/jayce_working
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b097      	sub	sp, #92	@ 0x5c
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	88fa      	ldrh	r2, [r7, #6]
 8006ad0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	88fa      	ldrh	r2, [r7, #6]
 8006ad8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aea:	d10e      	bne.n	8006b0a <UART_Start_Receive_IT+0x52>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d105      	bne.n	8006b00 <UART_Start_Receive_IT+0x48>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006afa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006afe:	e02d      	b.n	8006b5c <UART_Start_Receive_IT+0xa4>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	22ff      	movs	r2, #255	@ 0xff
 8006b04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b08:	e028      	b.n	8006b5c <UART_Start_Receive_IT+0xa4>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10d      	bne.n	8006b2e <UART_Start_Receive_IT+0x76>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d104      	bne.n	8006b24 <UART_Start_Receive_IT+0x6c>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	22ff      	movs	r2, #255	@ 0xff
 8006b1e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b22:	e01b      	b.n	8006b5c <UART_Start_Receive_IT+0xa4>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	227f      	movs	r2, #127	@ 0x7f
 8006b28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b2c:	e016      	b.n	8006b5c <UART_Start_Receive_IT+0xa4>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b36:	d10d      	bne.n	8006b54 <UART_Start_Receive_IT+0x9c>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d104      	bne.n	8006b4a <UART_Start_Receive_IT+0x92>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	227f      	movs	r2, #127	@ 0x7f
 8006b44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b48:	e008      	b.n	8006b5c <UART_Start_Receive_IT+0xa4>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	223f      	movs	r2, #63	@ 0x3f
 8006b4e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b52:	e003      	b.n	8006b5c <UART_Start_Receive_IT+0xa4>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2222      	movs	r2, #34	@ 0x22
 8006b68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3308      	adds	r3, #8
 8006b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7e:	f043 0301 	orr.w	r3, r3, #1
 8006b82:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3308      	adds	r3, #8
 8006b8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b8c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006b8e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006b9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e5      	bne.n	8006b6c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ba8:	d107      	bne.n	8006bba <UART_Start_Receive_IT+0x102>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d103      	bne.n	8006bba <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4a21      	ldr	r2, [pc, #132]	@ (8006c3c <UART_Start_Receive_IT+0x184>)
 8006bb6:	669a      	str	r2, [r3, #104]	@ 0x68
 8006bb8:	e002      	b.n	8006bc0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4a20      	ldr	r2, [pc, #128]	@ (8006c40 <UART_Start_Receive_IT+0x188>)
 8006bbe:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d019      	beq.n	8006bfc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006bec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e6      	bne.n	8006bc8 <UART_Start_Receive_IT+0x110>
 8006bfa:	e018      	b.n	8006c2e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	e853 3f00 	ldrex	r3, [r3]
 8006c08:	613b      	str	r3, [r7, #16]
   return(result);
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f043 0320 	orr.w	r3, r3, #32
 8006c10:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c1a:	623b      	str	r3, [r7, #32]
 8006c1c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1e:	69f9      	ldr	r1, [r7, #28]
 8006c20:	6a3a      	ldr	r2, [r7, #32]
 8006c22:	e841 2300 	strex	r3, r2, [r1]
 8006c26:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1e6      	bne.n	8006bfc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	375c      	adds	r7, #92	@ 0x5c
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	08006f49 	.word	0x08006f49
 8006c40:	08006d8d 	.word	0x08006d8d

08006c44 <UART_EndRxTransfer>:
=======
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <UART_EndRxTransfer>:
>>>>>>> remotes/origin/jayce_working
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006c44:	b480      	push	{r7}
 8006c46:	b095      	sub	sp, #84	@ 0x54
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
=======
 80073ea:	b480      	push	{r7}
 80073ec:	b095      	sub	sp, #84	@ 0x54
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e6      	bne.n	8006c4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3308      	adds	r3, #8
 8006c84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	f023 0301 	bic.w	r3, r3, #1
 8006c94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ca4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e5      	bne.n	8006c7e <UART_EndRxTransfer+0x3a>
=======
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073fa:	e853 3f00 	ldrex	r3, [r3]
 80073fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007402:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	461a      	mov	r2, r3
 800740e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007410:	643b      	str	r3, [r7, #64]	@ 0x40
 8007412:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007416:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007418:	e841 2300 	strex	r3, r2, [r1]
 800741c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800741e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e6      	bne.n	80073f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3308      	adds	r3, #8
 800742a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	61fb      	str	r3, [r7, #28]
   return(result);
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	f023 0301 	bic.w	r3, r3, #1
 800743a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3308      	adds	r3, #8
 8007442:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007444:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007446:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800744a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e5      	bne.n	8007424 <UART_EndRxTransfer+0x3a>
>>>>>>> remotes/origin/jayce_working
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d118      	bne.n	8006cec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	f023 0310 	bic.w	r3, r3, #16
 8006cce:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cd8:	61bb      	str	r3, [r7, #24]
 8006cda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cdc:	6979      	ldr	r1, [r7, #20]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	e841 2300 	strex	r3, r2, [r1]
 8006ce4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e6      	bne.n	8006cba <UART_EndRxTransfer+0x76>
=======
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800745c:	2b01      	cmp	r3, #1
 800745e:	d118      	bne.n	8007492 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	e853 3f00 	ldrex	r3, [r3]
 800746c:	60bb      	str	r3, [r7, #8]
   return(result);
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f023 0310 	bic.w	r3, r3, #16
 8007474:	647b      	str	r3, [r7, #68]	@ 0x44
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800747e:	61bb      	str	r3, [r7, #24]
 8007480:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007482:	6979      	ldr	r1, [r7, #20]
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	e841 2300 	strex	r3, r2, [r1]
 800748a:	613b      	str	r3, [r7, #16]
   return(result);
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1e6      	bne.n	8007460 <UART_EndRxTransfer+0x76>
>>>>>>> remotes/origin/jayce_working
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006d00:	bf00      	nop
 8006d02:	3754      	adds	r7, #84	@ 0x54
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <UART_DMAAbortOnError>:
=======
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2220      	movs	r2, #32
 8007496:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80074a6:	bf00      	nop
 80074a8:	3754      	adds	r7, #84	@ 0x54
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <UART_DMAAbortOnError>:
>>>>>>> remotes/origin/jayce_working
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
=======
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
>>>>>>> remotes/origin/jayce_working
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff fa3e 	bl	80061ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d30:	bf00      	nop
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <UART_EndTransmit_IT>:
=======
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f7ff fb05 	bl	8006ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074d6:	bf00      	nop
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <UART_EndTransmit_IT>:
>>>>>>> remotes/origin/jayce_working
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d54:	61fb      	str	r3, [r7, #28]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	61bb      	str	r3, [r7, #24]
 8006d60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d62:	6979      	ldr	r1, [r7, #20]
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e6      	bne.n	8006d40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2220      	movs	r2, #32
 8006d76:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	66da      	str	r2, [r3, #108]	@ 0x6c
=======
 80074de:	b580      	push	{r7, lr}
 80074e0:	b088      	sub	sp, #32
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074fa:	61fb      	str	r3, [r7, #28]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	61bb      	str	r3, [r7, #24]
 8007506:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	6979      	ldr	r1, [r7, #20]
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	613b      	str	r3, [r7, #16]
   return(result);
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e6      	bne.n	80074e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2220      	movs	r2, #32
 800751c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	66da      	str	r2, [r3, #108]	@ 0x6c
>>>>>>> remotes/origin/jayce_working
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7ff fa0a 	bl	8006198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d84:	bf00      	nop
 8006d86:	3720      	adds	r7, #32
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b09c      	sub	sp, #112	@ 0x70
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d9a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006da4:	2b22      	cmp	r3, #34	@ 0x22
 8006da6:	f040 80be 	bne.w	8006f26 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006db0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006db4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006db8:	b2d9      	uxtb	r1, r3
 8006dba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dc4:	400a      	ands	r2, r1
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f040 80a3 	bne.w	8006f3a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e6      	bne.n	8006df4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e38:	f023 0301 	bic.w	r3, r3, #1
 8006e3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3308      	adds	r3, #8
 8006e44:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006e46:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e5      	bne.n	8006e26 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a34      	ldr	r2, [pc, #208]	@ (8006f44 <UART_RxISR_8BIT+0x1b8>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d01f      	beq.n	8006eb8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d018      	beq.n	8006eb8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	623b      	str	r3, [r7, #32]
   return(result);
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ea4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ea6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eac:	e841 2300 	strex	r3, r2, [r1]
 8006eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e6      	bne.n	8006e86 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d12e      	bne.n	8006f1e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0310 	bic.w	r3, r3, #16
 8006eda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ee4:	61fb      	str	r3, [r7, #28]
 8006ee6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	69b9      	ldr	r1, [r7, #24]
 8006eea:	69fa      	ldr	r2, [r7, #28]
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e6      	bne.n	8006ec6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f003 0310 	and.w	r3, r3, #16
 8006f02:	2b10      	cmp	r3, #16
 8006f04:	d103      	bne.n	8006f0e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2210      	movs	r2, #16
 8006f0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff f952 	bl	80061c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f1c:	e00d      	b.n	8006f3a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7f9 ff32 	bl	8000d88 <HAL_UART_RxCpltCallback>
}
 8006f24:	e009      	b.n	8006f3a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	8b1b      	ldrh	r3, [r3, #24]
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0208 	orr.w	r2, r2, #8
 8006f36:	b292      	uxth	r2, r2
 8006f38:	831a      	strh	r2, [r3, #24]
}
 8006f3a:	bf00      	nop
 8006f3c:	3770      	adds	r7, #112	@ 0x70
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	40008000 	.word	0x40008000

08006f48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b09c      	sub	sp, #112	@ 0x70
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f56:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f60:	2b22      	cmp	r3, #34	@ 0x22
 8006f62:	f040 80be 	bne.w	80070e2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006f6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f74:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f76:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006f7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006f7e:	4013      	ands	r3, r2
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f84:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8a:	1c9a      	adds	r2, r3, #2
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f040 80a3 	bne.w	80070f6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006fbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fce:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fd0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006fd4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e6      	bne.n	8006fb0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff4:	f023 0301 	bic.w	r3, r3, #1
 8006ff8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3308      	adds	r3, #8
 8007000:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007002:	643a      	str	r2, [r7, #64]	@ 0x40
 8007004:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007008:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e5      	bne.n	8006fe2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2220      	movs	r2, #32
 800701a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a34      	ldr	r2, [pc, #208]	@ (8007100 <UART_RxISR_16BIT+0x1b8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d01f      	beq.n	8007074 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d018      	beq.n	8007074 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	e853 3f00 	ldrex	r3, [r3]
 800704e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007056:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	461a      	mov	r2, r3
 800705e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007062:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e6      	bne.n	8007042 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007078:	2b01      	cmp	r3, #1
 800707a:	d12e      	bne.n	80070da <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	e853 3f00 	ldrex	r3, [r3]
 800708e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f023 0310 	bic.w	r3, r3, #16
 8007096:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070a0:	61bb      	str	r3, [r7, #24]
 80070a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a4:	6979      	ldr	r1, [r7, #20]
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	e841 2300 	strex	r3, r2, [r1]
 80070ac:	613b      	str	r3, [r7, #16]
   return(result);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1e6      	bne.n	8007082 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	f003 0310 	and.w	r3, r3, #16
 80070be:	2b10      	cmp	r3, #16
 80070c0:	d103      	bne.n	80070ca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2210      	movs	r2, #16
 80070c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7ff f874 	bl	80061c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070d8:	e00d      	b.n	80070f6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7f9 fe54 	bl	8000d88 <HAL_UART_RxCpltCallback>
}
 80070e0:	e009      	b.n	80070f6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	8b1b      	ldrh	r3, [r3, #24]
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0208 	orr.w	r2, r2, #8
 80070f2:	b292      	uxth	r2, r2
 80070f4:	831a      	strh	r2, [r3, #24]
}
 80070f6:	bf00      	nop
 80070f8:	3770      	adds	r7, #112	@ 0x70
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	40008000 	.word	0x40008000

08007104 <HAL_UARTEx_WakeupCallback>:
=======
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff fad1 	bl	8006acc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800752a:	bf00      	nop
 800752c:	3720      	adds	r7, #32
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <HAL_UARTEx_WakeupCallback>:
>>>>>>> remotes/origin/jayce_working
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
=======
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <__NVIC_SetPriority>:
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	6039      	str	r1, [r7, #0]
 8007122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007128:	2b00      	cmp	r3, #0
 800712a:	db0a      	blt.n	8007142 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	b2da      	uxtb	r2, r3
 8007130:	490c      	ldr	r1, [pc, #48]	@ (8007164 <__NVIC_SetPriority+0x4c>)
 8007132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007136:	0112      	lsls	r2, r2, #4
 8007138:	b2d2      	uxtb	r2, r2
 800713a:	440b      	add	r3, r1
 800713c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007140:	e00a      	b.n	8007158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	b2da      	uxtb	r2, r3
 8007146:	4908      	ldr	r1, [pc, #32]	@ (8007168 <__NVIC_SetPriority+0x50>)
 8007148:	79fb      	ldrb	r3, [r7, #7]
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	3b04      	subs	r3, #4
 8007150:	0112      	lsls	r2, r2, #4
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	440b      	add	r3, r1
 8007156:	761a      	strb	r2, [r3, #24]
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	e000e100 	.word	0xe000e100
 8007168:	e000ed00 	.word	0xe000ed00

0800716c <SysTick_Handler>:
=======
 800753a:	bf00      	nop
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
	...

08007548 <__NVIC_SetPriority>:
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	4603      	mov	r3, r0
 8007550:	6039      	str	r1, [r7, #0]
 8007552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007558:	2b00      	cmp	r3, #0
 800755a:	db0a      	blt.n	8007572 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	b2da      	uxtb	r2, r3
 8007560:	490c      	ldr	r1, [pc, #48]	@ (8007594 <__NVIC_SetPriority+0x4c>)
 8007562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007566:	0112      	lsls	r2, r2, #4
 8007568:	b2d2      	uxtb	r2, r2
 800756a:	440b      	add	r3, r1
 800756c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007570:	e00a      	b.n	8007588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	b2da      	uxtb	r2, r3
 8007576:	4908      	ldr	r1, [pc, #32]	@ (8007598 <__NVIC_SetPriority+0x50>)
 8007578:	79fb      	ldrb	r3, [r7, #7]
 800757a:	f003 030f 	and.w	r3, r3, #15
 800757e:	3b04      	subs	r3, #4
 8007580:	0112      	lsls	r2, r2, #4
 8007582:	b2d2      	uxtb	r2, r2
 8007584:	440b      	add	r3, r1
 8007586:	761a      	strb	r2, [r3, #24]
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	e000e100 	.word	0xe000e100
 8007598:	e000ed00 	.word	0xe000ed00

0800759c <SysTick_Handler>:
>>>>>>> remotes/origin/jayce_working

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
<<<<<<< HEAD
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007170:	4b05      	ldr	r3, [pc, #20]	@ (8007188 <SysTick_Handler+0x1c>)
 8007172:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007174:	f001 fec6 	bl	8008f04 <xTaskGetSchedulerState>
 8007178:	4603      	mov	r3, r0
 800717a:	2b01      	cmp	r3, #1
 800717c:	d001      	beq.n	8007182 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800717e:	f002 fcbb 	bl	8009af8 <xPortSysTickHandler>
  }
}
 8007182:	bf00      	nop
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	e000e010 	.word	0xe000e010

0800718c <SVC_Setup>:
=======
 800759c:	b580      	push	{r7, lr}
 800759e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80075a0:	4b05      	ldr	r3, [pc, #20]	@ (80075b8 <SysTick_Handler+0x1c>)
 80075a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80075a4:	f001 fd46 	bl	8009034 <xTaskGetSchedulerState>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d001      	beq.n	80075b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80075ae:	f002 fb3b 	bl	8009c28 <xPortSysTickHandler>
  }
}
 80075b2:	bf00      	nop
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	e000e010 	.word	0xe000e010

080075bc <SVC_Setup>:
>>>>>>> remotes/origin/jayce_working
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
<<<<<<< HEAD
 800718c:	b580      	push	{r7, lr}
 800718e:	af00      	add	r7, sp, #0
=======
 80075bc:	b580      	push	{r7, lr}
 80075be:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
<<<<<<< HEAD
 8007190:	2100      	movs	r1, #0
 8007192:	f06f 0004 	mvn.w	r0, #4
 8007196:	f7ff ffbf 	bl	8007118 <__NVIC_SetPriority>
#endif
}
 800719a:	bf00      	nop
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <osKernelInitialize>:
=======
 80075c0:	2100      	movs	r1, #0
 80075c2:	f06f 0004 	mvn.w	r0, #4
 80075c6:	f7ff ffbf 	bl	8007548 <__NVIC_SetPriority>
#endif
}
 80075ca:	bf00      	nop
 80075cc:	bd80      	pop	{r7, pc}
	...

080075d0 <osKernelInitialize>:
>>>>>>> remotes/origin/jayce_working
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
<<<<<<< HEAD
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071a6:	f3ef 8305 	mrs	r3, IPSR
 80071aa:	603b      	str	r3, [r7, #0]
  return(result);
 80071ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80071b2:	f06f 0305 	mvn.w	r3, #5
 80071b6:	607b      	str	r3, [r7, #4]
 80071b8:	e00c      	b.n	80071d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80071ba:	4b0a      	ldr	r3, [pc, #40]	@ (80071e4 <osKernelInitialize+0x44>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d105      	bne.n	80071ce <osKernelInitialize+0x2e>
=======
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075d6:	f3ef 8305 	mrs	r3, IPSR
 80075da:	603b      	str	r3, [r7, #0]
  return(result);
 80075dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80075e2:	f06f 0305 	mvn.w	r3, #5
 80075e6:	607b      	str	r3, [r7, #4]
 80075e8:	e00c      	b.n	8007604 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80075ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007614 <osKernelInitialize+0x44>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d105      	bne.n	80075fe <osKernelInitialize+0x2e>
>>>>>>> remotes/origin/jayce_working
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
<<<<<<< HEAD
 80071c2:	4b08      	ldr	r3, [pc, #32]	@ (80071e4 <osKernelInitialize+0x44>)
 80071c4:	2201      	movs	r2, #1
 80071c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	607b      	str	r3, [r7, #4]
 80071cc:	e002      	b.n	80071d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80071ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071d2:	607b      	str	r3, [r7, #4]
=======
 80075f2:	4b08      	ldr	r3, [pc, #32]	@ (8007614 <osKernelInitialize+0x44>)
 80075f4:	2201      	movs	r2, #1
 80075f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	607b      	str	r3, [r7, #4]
 80075fc:	e002      	b.n	8007604 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80075fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007602:	607b      	str	r3, [r7, #4]
>>>>>>> remotes/origin/jayce_working
    }
  }

  return (stat);
<<<<<<< HEAD
 80071d4:	687b      	ldr	r3, [r7, #4]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	20000298 	.word	0x20000298

080071e8 <osKernelStart>:
=======
 8007604:	687b      	ldr	r3, [r7, #4]
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	200002f0 	.word	0x200002f0

08007618 <osKernelStart>:
>>>>>>> remotes/origin/jayce_working
  }

  return (state);
}

osStatus_t osKernelStart (void) {
<<<<<<< HEAD
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071ee:	f3ef 8305 	mrs	r3, IPSR
 80071f2:	603b      	str	r3, [r7, #0]
  return(result);
 80071f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <osKernelStart+0x1a>
    stat = osErrorISR;
 80071fa:	f06f 0305 	mvn.w	r3, #5
 80071fe:	607b      	str	r3, [r7, #4]
 8007200:	e010      	b.n	8007224 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007202:	4b0b      	ldr	r3, [pc, #44]	@ (8007230 <osKernelStart+0x48>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d109      	bne.n	800721e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800720a:	f7ff ffbf 	bl	800718c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800720e:	4b08      	ldr	r3, [pc, #32]	@ (8007230 <osKernelStart+0x48>)
 8007210:	2202      	movs	r2, #2
 8007212:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007214:	f001 fa12 	bl	800863c <vTaskStartScheduler>
      stat = osOK;
 8007218:	2300      	movs	r3, #0
 800721a:	607b      	str	r3, [r7, #4]
 800721c:	e002      	b.n	8007224 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800721e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007222:	607b      	str	r3, [r7, #4]
=======
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800761e:	f3ef 8305 	mrs	r3, IPSR
 8007622:	603b      	str	r3, [r7, #0]
  return(result);
 8007624:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <osKernelStart+0x1a>
    stat = osErrorISR;
 800762a:	f06f 0305 	mvn.w	r3, #5
 800762e:	607b      	str	r3, [r7, #4]
 8007630:	e010      	b.n	8007654 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007632:	4b0b      	ldr	r3, [pc, #44]	@ (8007660 <osKernelStart+0x48>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d109      	bne.n	800764e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800763a:	f7ff ffbf 	bl	80075bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800763e:	4b08      	ldr	r3, [pc, #32]	@ (8007660 <osKernelStart+0x48>)
 8007640:	2202      	movs	r2, #2
 8007642:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007644:	f001 f892 	bl	800876c <vTaskStartScheduler>
      stat = osOK;
 8007648:	2300      	movs	r3, #0
 800764a:	607b      	str	r3, [r7, #4]
 800764c:	e002      	b.n	8007654 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800764e:	f04f 33ff 	mov.w	r3, #4294967295
 8007652:	607b      	str	r3, [r7, #4]
>>>>>>> remotes/origin/jayce_working
    }
  }

  return (stat);
<<<<<<< HEAD
 8007224:	687b      	ldr	r3, [r7, #4]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20000298 	.word	0x20000298

08007234 <osThreadNew>:
=======
 8007654:	687b      	ldr	r3, [r7, #4]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	200002f0 	.word	0x200002f0

08007664 <osThreadNew>:
>>>>>>> remotes/origin/jayce_working
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
<<<<<<< HEAD
 8007234:	b580      	push	{r7, lr}
 8007236:	b08e      	sub	sp, #56	@ 0x38
 8007238:	af04      	add	r7, sp, #16
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
=======
 8007664:	b580      	push	{r7, lr}
 8007666:	b08e      	sub	sp, #56	@ 0x38
 8007668:	af04      	add	r7, sp, #16
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
<<<<<<< HEAD
 8007240:	2300      	movs	r3, #0
 8007242:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007244:	f3ef 8305 	mrs	r3, IPSR
 8007248:	617b      	str	r3, [r7, #20]
  return(result);
 800724a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800724c:	2b00      	cmp	r3, #0
 800724e:	d17e      	bne.n	800734e <osThreadNew+0x11a>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d07b      	beq.n	800734e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007256:	2380      	movs	r3, #128	@ 0x80
 8007258:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800725a:	2318      	movs	r3, #24
 800725c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800725e:	2300      	movs	r3, #0
 8007260:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007266:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d045      	beq.n	80072fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <osThreadNew+0x48>
        name = attr->name;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d008      	beq.n	80072a2 <osThreadNew+0x6e>
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	2b38      	cmp	r3, #56	@ 0x38
 8007294:	d805      	bhi.n	80072a2 <osThreadNew+0x6e>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <osThreadNew+0x72>
        return (NULL);
 80072a2:	2300      	movs	r3, #0
 80072a4:	e054      	b.n	8007350 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	089b      	lsrs	r3, r3, #2
 80072b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00e      	beq.n	80072dc <osThreadNew+0xa8>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	2ba7      	cmp	r3, #167	@ 0xa7
 80072c4:	d90a      	bls.n	80072dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d006      	beq.n	80072dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d002      	beq.n	80072dc <osThreadNew+0xa8>
        mem = 1;
 80072d6:	2301      	movs	r3, #1
 80072d8:	61bb      	str	r3, [r7, #24]
 80072da:	e010      	b.n	80072fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10c      	bne.n	80072fe <osThreadNew+0xca>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d108      	bne.n	80072fe <osThreadNew+0xca>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d104      	bne.n	80072fe <osThreadNew+0xca>
          mem = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	61bb      	str	r3, [r7, #24]
 80072f8:	e001      	b.n	80072fe <osThreadNew+0xca>
=======
 8007670:	2300      	movs	r3, #0
 8007672:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007674:	f3ef 8305 	mrs	r3, IPSR
 8007678:	617b      	str	r3, [r7, #20]
  return(result);
 800767a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800767c:	2b00      	cmp	r3, #0
 800767e:	d17e      	bne.n	800777e <osThreadNew+0x11a>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d07b      	beq.n	800777e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007686:	2380      	movs	r3, #128	@ 0x80
 8007688:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800768a:	2318      	movs	r3, #24
 800768c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800768e:	2300      	movs	r3, #0
 8007690:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007692:	f04f 33ff 	mov.w	r3, #4294967295
 8007696:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d045      	beq.n	800772a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <osThreadNew+0x48>
        name = attr->name;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d002      	beq.n	80076ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d008      	beq.n	80076d2 <osThreadNew+0x6e>
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	2b38      	cmp	r3, #56	@ 0x38
 80076c4:	d805      	bhi.n	80076d2 <osThreadNew+0x6e>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <osThreadNew+0x72>
        return (NULL);
 80076d2:	2300      	movs	r3, #0
 80076d4:	e054      	b.n	8007780 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	089b      	lsrs	r3, r3, #2
 80076e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00e      	beq.n	800770c <osThreadNew+0xa8>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	2ba7      	cmp	r3, #167	@ 0xa7
 80076f4:	d90a      	bls.n	800770c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d006      	beq.n	800770c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <osThreadNew+0xa8>
        mem = 1;
 8007706:	2301      	movs	r3, #1
 8007708:	61bb      	str	r3, [r7, #24]
 800770a:	e010      	b.n	800772e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10c      	bne.n	800772e <osThreadNew+0xca>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d108      	bne.n	800772e <osThreadNew+0xca>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d104      	bne.n	800772e <osThreadNew+0xca>
          mem = 0;
 8007724:	2300      	movs	r3, #0
 8007726:	61bb      	str	r3, [r7, #24]
 8007728:	e001      	b.n	800772e <osThreadNew+0xca>
>>>>>>> remotes/origin/jayce_working
        }
      }
    }
    else {
      mem = 0;
<<<<<<< HEAD
 80072fa:	2300      	movs	r3, #0
 80072fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d110      	bne.n	8007326 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800730c:	9202      	str	r2, [sp, #8]
 800730e:	9301      	str	r3, [sp, #4]
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	6a3a      	ldr	r2, [r7, #32]
 8007318:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 ff9a 	bl	8008254 <xTaskCreateStatic>
 8007320:	4603      	mov	r3, r0
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	e013      	b.n	800734e <osThreadNew+0x11a>
=======
 800772a:	2300      	movs	r3, #0
 800772c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d110      	bne.n	8007756 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800773c:	9202      	str	r2, [sp, #8]
 800773e:	9301      	str	r3, [sp, #4]
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	6a3a      	ldr	r2, [r7, #32]
 8007748:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 fe1a 	bl	8008384 <xTaskCreateStatic>
 8007750:	4603      	mov	r3, r0
 8007752:	613b      	str	r3, [r7, #16]
 8007754:	e013      	b.n	800777e <osThreadNew+0x11a>
>>>>>>> remotes/origin/jayce_working
      #endif
    }
    else {
      if (mem == 0) {
<<<<<<< HEAD
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d110      	bne.n	800734e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	b29a      	uxth	r2, r3
 8007330:	f107 0310 	add.w	r3, r7, #16
 8007334:	9301      	str	r3, [sp, #4]
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 ffe8 	bl	8008314 <xTaskCreate>
 8007344:	4603      	mov	r3, r0
 8007346:	2b01      	cmp	r3, #1
 8007348:	d001      	beq.n	800734e <osThreadNew+0x11a>
            hTask = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	613b      	str	r3, [r7, #16]
=======
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d110      	bne.n	800777e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	b29a      	uxth	r2, r3
 8007760:	f107 0310 	add.w	r3, r7, #16
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 fe68 	bl	8008444 <xTaskCreate>
 8007774:	4603      	mov	r3, r0
 8007776:	2b01      	cmp	r3, #1
 8007778:	d001      	beq.n	800777e <osThreadNew+0x11a>
            hTask = NULL;
 800777a:	2300      	movs	r3, #0
 800777c:	613b      	str	r3, [r7, #16]
>>>>>>> remotes/origin/jayce_working
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
<<<<<<< HEAD
 800734e:	693b      	ldr	r3, [r7, #16]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3728      	adds	r7, #40	@ 0x28
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <osDelay>:
=======
 800777e:	693b      	ldr	r3, [r7, #16]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3728      	adds	r7, #40	@ 0x28
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <osDelay>:
>>>>>>> remotes/origin/jayce_working
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
<<<<<<< HEAD
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007360:	f3ef 8305 	mrs	r3, IPSR
 8007364:	60bb      	str	r3, [r7, #8]
  return(result);
 8007366:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <osDelay+0x1c>
    stat = osErrorISR;
 800736c:	f06f 0305 	mvn.w	r3, #5
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	e007      	b.n	8007384 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <osDelay+0x2c>
      vTaskDelay(ticks);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 f926 	bl	80085d0 <vTaskDelay>
=======
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007790:	f3ef 8305 	mrs	r3, IPSR
 8007794:	60bb      	str	r3, [r7, #8]
  return(result);
 8007796:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007798:	2b00      	cmp	r3, #0
 800779a:	d003      	beq.n	80077a4 <osDelay+0x1c>
    stat = osErrorISR;
 800779c:	f06f 0305 	mvn.w	r3, #5
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	e007      	b.n	80077b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 ffa6 	bl	8008700 <vTaskDelay>
>>>>>>> remotes/origin/jayce_working
    }
  }

  return (stat);
<<<<<<< HEAD
 8007384:	68fb      	ldr	r3, [r7, #12]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800738e:	b580      	push	{r7, lr}
 8007390:	b08a      	sub	sp, #40	@ 0x28
 8007392:	af02      	add	r7, sp, #8
 8007394:	60f8      	str	r0, [r7, #12]
 8007396:	60b9      	str	r1, [r7, #8]
 8007398:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800739a:	2300      	movs	r3, #0
 800739c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800739e:	f3ef 8305 	mrs	r3, IPSR
 80073a2:	613b      	str	r3, [r7, #16]
  return(result);
 80073a4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d175      	bne.n	8007496 <osSemaphoreNew+0x108>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d072      	beq.n	8007496 <osSemaphoreNew+0x108>
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d86e      	bhi.n	8007496 <osSemaphoreNew+0x108>
    mem = -1;
 80073b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073bc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d015      	beq.n	80073f0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d006      	beq.n	80073da <osSemaphoreNew+0x4c>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	2b4f      	cmp	r3, #79	@ 0x4f
 80073d2:	d902      	bls.n	80073da <osSemaphoreNew+0x4c>
        mem = 1;
 80073d4:	2301      	movs	r3, #1
 80073d6:	61bb      	str	r3, [r7, #24]
 80073d8:	e00c      	b.n	80073f4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d108      	bne.n	80073f4 <osSemaphoreNew+0x66>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d104      	bne.n	80073f4 <osSemaphoreNew+0x66>
          mem = 0;
 80073ea:	2300      	movs	r3, #0
 80073ec:	61bb      	str	r3, [r7, #24]
 80073ee:	e001      	b.n	80073f4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073fa:	d04c      	beq.n	8007496 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d128      	bne.n	8007454 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d10a      	bne.n	800741e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	2203      	movs	r2, #3
 800740e:	9200      	str	r2, [sp, #0]
 8007410:	2200      	movs	r2, #0
 8007412:	2100      	movs	r1, #0
 8007414:	2001      	movs	r0, #1
 8007416:	f000 f995 	bl	8007744 <xQueueGenericCreateStatic>
 800741a:	61f8      	str	r0, [r7, #28]
 800741c:	e005      	b.n	800742a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800741e:	2203      	movs	r2, #3
 8007420:	2100      	movs	r1, #0
 8007422:	2001      	movs	r0, #1
 8007424:	f000 fa0b 	bl	800783e <xQueueGenericCreate>
 8007428:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d022      	beq.n	8007476 <osSemaphoreNew+0xe8>
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d01f      	beq.n	8007476 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007436:	2300      	movs	r3, #0
 8007438:	2200      	movs	r2, #0
 800743a:	2100      	movs	r1, #0
 800743c:	69f8      	ldr	r0, [r7, #28]
 800743e:	f000 facb 	bl	80079d8 <xQueueGenericSend>
 8007442:	4603      	mov	r3, r0
 8007444:	2b01      	cmp	r3, #1
 8007446:	d016      	beq.n	8007476 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007448:	69f8      	ldr	r0, [r7, #28]
 800744a:	f000 fd47 	bl	8007edc <vQueueDelete>
            hSemaphore = NULL;
 800744e:	2300      	movs	r3, #0
 8007450:	61fb      	str	r3, [r7, #28]
 8007452:	e010      	b.n	8007476 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d108      	bne.n	800746c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	461a      	mov	r2, r3
 8007460:	68b9      	ldr	r1, [r7, #8]
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 fa49 	bl	80078fa <xQueueCreateCountingSemaphoreStatic>
 8007468:	61f8      	str	r0, [r7, #28]
 800746a:	e004      	b.n	8007476 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 fa7c 	bl	800796c <xQueueCreateCountingSemaphore>
 8007474:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00c      	beq.n	8007496 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <osSemaphoreNew+0xfc>
          name = attr->name;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	617b      	str	r3, [r7, #20]
 8007488:	e001      	b.n	800748e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800748a:	2300      	movs	r3, #0
 800748c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800748e:	6979      	ldr	r1, [r7, #20]
 8007490:	69f8      	ldr	r0, [r7, #28]
 8007492:	f000 fe57 	bl	8008144 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007496:	69fb      	ldr	r3, [r7, #28]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3720      	adds	r7, #32
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <vApplicationGetIdleTaskMemory>:
=======
 80077b4:	68fb      	ldr	r3, [r7, #12]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <vApplicationGetIdleTaskMemory>:
>>>>>>> remotes/origin/jayce_working

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
<<<<<<< HEAD
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
=======
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
<<<<<<< HEAD
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4a07      	ldr	r2, [pc, #28]	@ (80074cc <vApplicationGetIdleTaskMemory+0x2c>)
 80074b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	4a06      	ldr	r2, [pc, #24]	@ (80074d0 <vApplicationGetIdleTaskMemory+0x30>)
 80074b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2280      	movs	r2, #128	@ 0x80
 80074bc:	601a      	str	r2, [r3, #0]
}
 80074be:	bf00      	nop
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	2000029c 	.word	0x2000029c
 80074d0:	20000344 	.word	0x20000344

080074d4 <vApplicationGetTimerTaskMemory>:
=======
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4a07      	ldr	r2, [pc, #28]	@ (80077ec <vApplicationGetIdleTaskMemory+0x2c>)
 80077d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	4a06      	ldr	r2, [pc, #24]	@ (80077f0 <vApplicationGetIdleTaskMemory+0x30>)
 80077d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2280      	movs	r2, #128	@ 0x80
 80077dc:	601a      	str	r2, [r3, #0]
}
 80077de:	bf00      	nop
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	200002f4 	.word	0x200002f4
 80077f0:	2000039c 	.word	0x2000039c

080077f4 <vApplicationGetTimerTaskMemory>:
>>>>>>> remotes/origin/jayce_working

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
<<<<<<< HEAD
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
=======
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
>>>>>>> remotes/origin/jayce_working
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
<<<<<<< HEAD
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4a07      	ldr	r2, [pc, #28]	@ (8007500 <vApplicationGetTimerTaskMemory+0x2c>)
 80074e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	4a06      	ldr	r2, [pc, #24]	@ (8007504 <vApplicationGetTimerTaskMemory+0x30>)
 80074ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074f2:	601a      	str	r2, [r3, #0]
}
 80074f4:	bf00      	nop
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	20000544 	.word	0x20000544
 8007504:	200005ec 	.word	0x200005ec

08007508 <vListInitialise>:
=======
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	4a07      	ldr	r2, [pc, #28]	@ (8007820 <vApplicationGetTimerTaskMemory+0x2c>)
 8007804:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	4a06      	ldr	r2, [pc, #24]	@ (8007824 <vApplicationGetTimerTaskMemory+0x30>)
 800780a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007812:	601a      	str	r2, [r3, #0]
}
 8007814:	bf00      	nop
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	2000059c 	.word	0x2000059c
 8007824:	20000644 	.word	0x20000644

08007828 <vListInitialise>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< HEAD
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
=======
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f103 0208 	add.w	r2, r3, #8
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	605a      	str	r2, [r3, #4]
=======
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f103 0208 	add.w	r2, r3, #8
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	605a      	str	r2, [r3, #4]
>>>>>>> remotes/origin/jayce_working

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< HEAD
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007520:	609a      	str	r2, [r3, #8]
=======
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f04f 32ff 	mov.w	r2, #4294967295
 8007840:	609a      	str	r2, [r3, #8]
>>>>>>> remotes/origin/jayce_working

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f103 0208 	add.w	r2, r3, #8
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f103 0208 	add.w	r2, r3, #8
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]
=======
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f103 0208 	add.w	r2, r3, #8
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f103 0208 	add.w	r2, r3, #8
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< HEAD
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <vListInitialiseItem>:
=======
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <vListInitialiseItem>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< HEAD
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	611a      	str	r2, [r3, #16]
=======
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	611a      	str	r2, [r3, #16]
>>>>>>> remotes/origin/jayce_working

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< HEAD
 8007556:	bf00      	nop
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <vListInsertEnd>:
=======
 8007876:	bf00      	nop
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <vListInsertEnd>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8007562:	b480      	push	{r7}
 8007564:	b085      	sub	sp, #20
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	60fb      	str	r3, [r7, #12]
=======
 8007882:	b480      	push	{r7}
 8007884:	b085      	sub	sp, #20
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	60fb      	str	r3, [r7, #12]
>>>>>>> remotes/origin/jayce_working
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< HEAD
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	689a      	ldr	r2, [r3, #8]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	609a      	str	r2, [r3, #8]
=======
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	689a      	ldr	r2, [r3, #8]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	609a      	str	r2, [r3, #8]
>>>>>>> remotes/origin/jayce_working

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< HEAD
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	601a      	str	r2, [r3, #0]
}
 800759e:	bf00      	nop
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <vListInsert>:
=======
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	1c5a      	adds	r2, r3, #1
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	601a      	str	r2, [r3, #0]
}
 80078be:	bf00      	nop
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <vListInsert>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 80075aa:	b480      	push	{r7}
 80075ac:	b085      	sub	sp, #20
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	60bb      	str	r3, [r7, #8]
=======
 80078ca:	b480      	push	{r7}
 80078cc:	b085      	sub	sp, #20
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	60bb      	str	r3, [r7, #8]
>>>>>>> remotes/origin/jayce_working
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< HEAD
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075c0:	d103      	bne.n	80075ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	e00c      	b.n	80075e4 <vListInsert+0x3a>
=======
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e0:	d103      	bne.n	80078ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	e00c      	b.n	8007904 <vListInsert+0x3a>
>>>>>>> remotes/origin/jayce_working
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< HEAD
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3308      	adds	r3, #8
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	e002      	b.n	80075d8 <vListInsert+0x2e>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d2f6      	bcs.n	80075d2 <vListInsert+0x28>
=======
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	3308      	adds	r3, #8
 80078ee:	60fb      	str	r3, [r7, #12]
 80078f0:	e002      	b.n	80078f8 <vListInsert+0x2e>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	60fb      	str	r3, [r7, #12]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	429a      	cmp	r2, r3
 8007902:	d2f6      	bcs.n	80078f2 <vListInsert+0x28>
>>>>>>> remotes/origin/jayce_working
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< HEAD
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	605a      	str	r2, [r3, #4]
=======
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	605a      	str	r2, [r3, #4]
>>>>>>> remotes/origin/jayce_working

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< HEAD
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	1c5a      	adds	r2, r3, #1
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	601a      	str	r2, [r3, #0]
}
 8007610:	bf00      	nop
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <uxListRemove>:
=======
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	601a      	str	r2, [r3, #0]
}
 8007930:	bf00      	nop
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <uxListRemove>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< HEAD
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	6892      	ldr	r2, [r2, #8]
 8007632:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6852      	ldr	r2, [r2, #4]
 800763c:	605a      	str	r2, [r3, #4]
=======
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	6892      	ldr	r2, [r2, #8]
 8007952:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	6852      	ldr	r2, [r2, #4]
 800795c:	605a      	str	r2, [r3, #4]
>>>>>>> remotes/origin/jayce_working

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< HEAD
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	429a      	cmp	r2, r3
 8007646:	d103      	bne.n	8007650 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	605a      	str	r2, [r3, #4]
=======
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	429a      	cmp	r2, r3
 8007966:	d103      	bne.n	8007970 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	605a      	str	r2, [r3, #4]
>>>>>>> remotes/origin/jayce_working
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< HEAD
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	1e5a      	subs	r2, r3, #1
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <xQueueGenericReset>:
=======
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	1e5a      	subs	r2, r3, #1
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <xQueueGenericReset>:
>>>>>>> remotes/origin/jayce_working
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< HEAD
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10b      	bne.n	800769c <xQueueGenericReset+0x2c>
=======
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10b      	bne.n	80079bc <xQueueGenericReset+0x2c>
>>>>>>> remotes/origin/jayce_working

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 8007684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	60bb      	str	r3, [r7, #8]
=======
 80079a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	60bb      	str	r3, [r7, #8]
>>>>>>> remotes/origin/jayce_working
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
<<<<<<< HEAD
 8007696:	bf00      	nop
 8007698:	bf00      	nop
 800769a:	e7fd      	b.n	8007698 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800769c:	f002 f99c 	bl	80099d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076a8:	68f9      	ldr	r1, [r7, #12]
 80076aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80076ac:	fb01 f303 	mul.w	r3, r1, r3
 80076b0:	441a      	add	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076cc:	3b01      	subs	r3, #1
 80076ce:	68f9      	ldr	r1, [r7, #12]
 80076d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80076d2:	fb01 f303 	mul.w	r3, r1, r3
 80076d6:	441a      	add	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	22ff      	movs	r2, #255	@ 0xff
 80076e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	22ff      	movs	r2, #255	@ 0xff
 80076e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d114      	bne.n	800771c <xQueueGenericReset+0xac>
=======
 80079b6:	bf00      	nop
 80079b8:	bf00      	nop
 80079ba:	e7fd      	b.n	80079b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80079bc:	f002 f8a4 	bl	8009b08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c8:	68f9      	ldr	r1, [r7, #12]
 80079ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80079cc:	fb01 f303 	mul.w	r3, r1, r3
 80079d0:	441a      	add	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ec:	3b01      	subs	r3, #1
 80079ee:	68f9      	ldr	r1, [r7, #12]
 80079f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80079f2:	fb01 f303 	mul.w	r3, r1, r3
 80079f6:	441a      	add	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	22ff      	movs	r2, #255	@ 0xff
 8007a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	22ff      	movs	r2, #255	@ 0xff
 8007a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d114      	bne.n	8007a3c <xQueueGenericReset+0xac>
>>>>>>> remotes/origin/jayce_working
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d01a      	beq.n	8007730 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	3310      	adds	r3, #16
 80076fe:	4618      	mov	r0, r3
 8007700:	f001 fa3a 	bl	8008b78 <xTaskRemoveFromEventList>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d012      	beq.n	8007730 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800770a:	4b0d      	ldr	r3, [pc, #52]	@ (8007740 <xQueueGenericReset+0xd0>)
 800770c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	e009      	b.n	8007730 <xQueueGenericReset+0xc0>
=======
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d01a      	beq.n	8007a50 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	3310      	adds	r3, #16
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f001 f942 	bl	8008ca8 <xTaskRemoveFromEventList>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d012      	beq.n	8007a50 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a60 <xQueueGenericReset+0xd0>)
 8007a2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	e009      	b.n	8007a50 <xQueueGenericReset+0xc0>
>>>>>>> remotes/origin/jayce_working
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< HEAD
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3310      	adds	r3, #16
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff fef1 	bl	8007508 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3324      	adds	r3, #36	@ 0x24
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff feec 	bl	8007508 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007730:	f002 f984 	bl	8009a3c <vPortExitCritical>
=======
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3310      	adds	r3, #16
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff fef1 	bl	8007828 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	3324      	adds	r3, #36	@ 0x24
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7ff feec 	bl	8007828 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a50:	f002 f88c 	bl	8009b6c <vPortExitCritical>
>>>>>>> remotes/origin/jayce_working

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< HEAD
 8007734:	2301      	movs	r3, #1
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	e000ed04 	.word	0xe000ed04

08007744 <xQueueGenericCreateStatic>:
=======
 8007a54:	2301      	movs	r3, #1
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	e000ed04 	.word	0xe000ed04

08007a64 <xQueueGenericCreateStatic>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 8007744:	b580      	push	{r7, lr}
 8007746:	b08e      	sub	sp, #56	@ 0x38
 8007748:	af02      	add	r7, sp, #8
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10b      	bne.n	8007770 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800776a:	bf00      	nop
 800776c:	bf00      	nop
 800776e:	e7fd      	b.n	800776c <xQueueGenericCreateStatic+0x28>
=======
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08e      	sub	sp, #56	@ 0x38
 8007a68:	af02      	add	r7, sp, #8
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10b      	bne.n	8007a90 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a8a:	bf00      	nop
 8007a8c:	bf00      	nop
 8007a8e:	e7fd      	b.n	8007a8c <xQueueGenericCreateStatic+0x28>
>>>>>>> remotes/origin/jayce_working

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
<<<<<<< HEAD
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10b      	bne.n	800778e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007788:	bf00      	nop
 800778a:	bf00      	nop
 800778c:	e7fd      	b.n	800778a <xQueueGenericCreateStatic+0x46>
=======
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10b      	bne.n	8007aae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007aa8:	bf00      	nop
 8007aaa:	bf00      	nop
 8007aac:	e7fd      	b.n	8007aaa <xQueueGenericCreateStatic+0x46>
>>>>>>> remotes/origin/jayce_working

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
<<<<<<< HEAD
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <xQueueGenericCreateStatic+0x56>
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <xQueueGenericCreateStatic+0x5a>
 800779a:	2301      	movs	r3, #1
 800779c:	e000      	b.n	80077a0 <xQueueGenericCreateStatic+0x5c>
 800779e:	2300      	movs	r3, #0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10b      	bne.n	80077bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80077a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	623b      	str	r3, [r7, #32]
}
 80077b6:	bf00      	nop
 80077b8:	bf00      	nop
 80077ba:	e7fd      	b.n	80077b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d102      	bne.n	80077c8 <xQueueGenericCreateStatic+0x84>
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <xQueueGenericCreateStatic+0x88>
 80077c8:	2301      	movs	r3, #1
 80077ca:	e000      	b.n	80077ce <xQueueGenericCreateStatic+0x8a>
 80077cc:	2300      	movs	r3, #0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10b      	bne.n	80077ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	61fb      	str	r3, [r7, #28]
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop
 80077e8:	e7fd      	b.n	80077e6 <xQueueGenericCreateStatic+0xa2>
=======
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <xQueueGenericCreateStatic+0x56>
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <xQueueGenericCreateStatic+0x5a>
 8007aba:	2301      	movs	r3, #1
 8007abc:	e000      	b.n	8007ac0 <xQueueGenericCreateStatic+0x5c>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10b      	bne.n	8007adc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	623b      	str	r3, [r7, #32]
}
 8007ad6:	bf00      	nop
 8007ad8:	bf00      	nop
 8007ada:	e7fd      	b.n	8007ad8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d102      	bne.n	8007ae8 <xQueueGenericCreateStatic+0x84>
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d101      	bne.n	8007aec <xQueueGenericCreateStatic+0x88>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e000      	b.n	8007aee <xQueueGenericCreateStatic+0x8a>
 8007aec:	2300      	movs	r3, #0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10b      	bne.n	8007b0a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	61fb      	str	r3, [r7, #28]
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop
 8007b08:	e7fd      	b.n	8007b06 <xQueueGenericCreateStatic+0xa2>
>>>>>>> remotes/origin/jayce_working
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
<<<<<<< HEAD
 80077ea:	2350      	movs	r3, #80	@ 0x50
 80077ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b50      	cmp	r3, #80	@ 0x50
 80077f2:	d00b      	beq.n	800780c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80077f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	61bb      	str	r3, [r7, #24]
}
 8007806:	bf00      	nop
 8007808:	bf00      	nop
 800780a:	e7fd      	b.n	8007808 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800780c:	697b      	ldr	r3, [r7, #20]
=======
 8007b0a:	2350      	movs	r3, #80	@ 0x50
 8007b0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2b50      	cmp	r3, #80	@ 0x50
 8007b12:	d00b      	beq.n	8007b2c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	61bb      	str	r3, [r7, #24]
}
 8007b26:	bf00      	nop
 8007b28:	bf00      	nop
 8007b2a:	e7fd      	b.n	8007b28 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007b2c:	697b      	ldr	r3, [r7, #20]
>>>>>>> remotes/origin/jayce_working
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00d      	beq.n	8007834 <xQueueGenericCreateStatic+0xf0>
=======
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00d      	beq.n	8007b54 <xQueueGenericCreateStatic+0xf0>
>>>>>>> remotes/origin/jayce_working
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
<<<<<<< HEAD
 8007818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
=======
 8007b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
>>>>>>> remotes/origin/jayce_working
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 8007820:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	4613      	mov	r3, r2
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	68b9      	ldr	r1, [r7, #8]
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 f840 	bl	80078b4 <prvInitialiseNewQueue>
=======
 8007b40:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	68b9      	ldr	r1, [r7, #8]
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f000 f805 	bl	8007b5e <prvInitialiseNewQueue>
>>>>>>> remotes/origin/jayce_working
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< HEAD
 8007834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007836:	4618      	mov	r0, r3
 8007838:	3730      	adds	r7, #48	@ 0x30
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800783e:	b580      	push	{r7, lr}
 8007840:	b08a      	sub	sp, #40	@ 0x28
 8007842:	af02      	add	r7, sp, #8
 8007844:	60f8      	str	r0, [r7, #12]
 8007846:	60b9      	str	r1, [r7, #8]
 8007848:	4613      	mov	r3, r2
 800784a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10b      	bne.n	800786a <xQueueGenericCreate+0x2c>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	613b      	str	r3, [r7, #16]
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop
 8007868:	e7fd      	b.n	8007866 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	fb02 f303 	mul.w	r3, r2, r3
 8007872:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	3350      	adds	r3, #80	@ 0x50
 8007878:	4618      	mov	r0, r3
 800787a:	f002 f9cf 	bl	8009c1c <pvPortMalloc>
 800787e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d011      	beq.n	80078aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	3350      	adds	r3, #80	@ 0x50
 800788e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007898:	79fa      	ldrb	r2, [r7, #7]
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	4613      	mov	r3, r2
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	68b9      	ldr	r1, [r7, #8]
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 f805 	bl	80078b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078aa:	69bb      	ldr	r3, [r7, #24]
	}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3720      	adds	r7, #32
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <prvInitialiseNewQueue>:
=======
 8007b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3730      	adds	r7, #48	@ 0x30
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <prvInitialiseNewQueue>:
>>>>>>> remotes/origin/jayce_working

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< HEAD
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
 80078c0:	70fb      	strb	r3, [r7, #3]
=======
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b084      	sub	sp, #16
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	60f8      	str	r0, [r7, #12]
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	607a      	str	r2, [r7, #4]
 8007b6a:	70fb      	strb	r3, [r7, #3]
>>>>>>> remotes/origin/jayce_working
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d103      	bne.n	80078d0 <prvInitialiseNewQueue+0x1c>
=======
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d103      	bne.n	8007b7a <prvInitialiseNewQueue+0x1c>
>>>>>>> remotes/origin/jayce_working
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< HEAD
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	e002      	b.n	80078d6 <prvInitialiseNewQueue+0x22>
=======
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	e002      	b.n	8007b80 <prvInitialiseNewQueue+0x22>
>>>>>>> remotes/origin/jayce_working
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< HEAD
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	601a      	str	r2, [r3, #0]
=======
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< HEAD
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078e2:	2101      	movs	r1, #1
 80078e4:	69b8      	ldr	r0, [r7, #24]
 80078e6:	f7ff fec3 	bl	8007670 <xQueueGenericReset>
=======
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	69b8      	ldr	r0, [r7, #24]
 8007b90:	f7ff fefe 	bl	8007990 <xQueueGenericReset>
>>>>>>> remotes/origin/jayce_working

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
<<<<<<< HEAD
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	78fa      	ldrb	r2, [r7, #3]
 80078ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
=======
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	78fa      	ldrb	r2, [r7, #3]
 8007b98:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
>>>>>>> remotes/origin/jayce_working
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< HEAD
 80078f2:	bf00      	nop
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b08a      	sub	sp, #40	@ 0x28
 80078fe:	af02      	add	r7, sp, #8
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10b      	bne.n	8007924 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	61bb      	str	r3, [r7, #24]
}
 800791e:	bf00      	nop
 8007920:	bf00      	nop
 8007922:	e7fd      	b.n	8007920 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	429a      	cmp	r2, r3
 800792a:	d90b      	bls.n	8007944 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	617b      	str	r3, [r7, #20]
}
 800793e:	bf00      	nop
 8007940:	bf00      	nop
 8007942:	e7fd      	b.n	8007940 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007944:	2302      	movs	r3, #2
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	2100      	movs	r1, #0
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f7ff fef8 	bl	8007744 <xQueueGenericCreateStatic>
 8007954:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007962:	69fb      	ldr	r3, [r7, #28]
	}
 8007964:	4618      	mov	r0, r3
 8007966:	3720      	adds	r7, #32
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10b      	bne.n	8007994 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	613b      	str	r3, [r7, #16]
}
 800798e:	bf00      	nop
 8007990:	bf00      	nop
 8007992:	e7fd      	b.n	8007990 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	429a      	cmp	r2, r3
 800799a:	d90b      	bls.n	80079b4 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	60fb      	str	r3, [r7, #12]
}
 80079ae:	bf00      	nop
 80079b0:	bf00      	nop
 80079b2:	e7fd      	b.n	80079b0 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80079b4:	2202      	movs	r2, #2
 80079b6:	2100      	movs	r1, #0
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff ff40 	bl	800783e <xQueueGenericCreate>
 80079be:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d002      	beq.n	80079cc <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80079cc:	697b      	ldr	r3, [r7, #20]
	}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
	...

080079d8 <xQueueGenericSend>:
=======
 8007b9c:	bf00      	nop
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <xQueueGenericSend>:
>>>>>>> remotes/origin/jayce_working

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 80079d8:	b580      	push	{r7, lr}
 80079da:	b08e      	sub	sp, #56	@ 0x38
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80079e6:	2300      	movs	r3, #0
 80079e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80079ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10b      	bne.n	8007a0c <xQueueGenericSend+0x34>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a06:	bf00      	nop
 8007a08:	bf00      	nop
 8007a0a:	e7fd      	b.n	8007a08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d103      	bne.n	8007a1a <xQueueGenericSend+0x42>
 8007a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <xQueueGenericSend+0x46>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <xQueueGenericSend+0x48>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10b      	bne.n	8007a3c <xQueueGenericSend+0x64>
	__asm volatile
 8007a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a28:	f383 8811 	msr	BASEPRI, r3
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a36:	bf00      	nop
 8007a38:	bf00      	nop
 8007a3a:	e7fd      	b.n	8007a38 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d103      	bne.n	8007a4a <xQueueGenericSend+0x72>
 8007a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d101      	bne.n	8007a4e <xQueueGenericSend+0x76>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e000      	b.n	8007a50 <xQueueGenericSend+0x78>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d10b      	bne.n	8007a6c <xQueueGenericSend+0x94>
	__asm volatile
 8007a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	623b      	str	r3, [r7, #32]
}
 8007a66:	bf00      	nop
 8007a68:	bf00      	nop
 8007a6a:	e7fd      	b.n	8007a68 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a6c:	f001 fa4a 	bl	8008f04 <xTaskGetSchedulerState>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d102      	bne.n	8007a7c <xQueueGenericSend+0xa4>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <xQueueGenericSend+0xa8>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e000      	b.n	8007a82 <xQueueGenericSend+0xaa>
 8007a80:	2300      	movs	r3, #0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10b      	bne.n	8007a9e <xQueueGenericSend+0xc6>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	61fb      	str	r3, [r7, #28]
}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	e7fd      	b.n	8007a9a <xQueueGenericSend+0xc2>
=======
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08e      	sub	sp, #56	@ 0x38
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
 8007bb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10b      	bne.n	8007bd8 <xQueueGenericSend+0x34>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007bd2:	bf00      	nop
 8007bd4:	bf00      	nop
 8007bd6:	e7fd      	b.n	8007bd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d103      	bne.n	8007be6 <xQueueGenericSend+0x42>
 8007bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <xQueueGenericSend+0x46>
 8007be6:	2301      	movs	r3, #1
 8007be8:	e000      	b.n	8007bec <xQueueGenericSend+0x48>
 8007bea:	2300      	movs	r3, #0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10b      	bne.n	8007c08 <xQueueGenericSend+0x64>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c02:	bf00      	nop
 8007c04:	bf00      	nop
 8007c06:	e7fd      	b.n	8007c04 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d103      	bne.n	8007c16 <xQueueGenericSend+0x72>
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d101      	bne.n	8007c1a <xQueueGenericSend+0x76>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e000      	b.n	8007c1c <xQueueGenericSend+0x78>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10b      	bne.n	8007c38 <xQueueGenericSend+0x94>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	623b      	str	r3, [r7, #32]
}
 8007c32:	bf00      	nop
 8007c34:	bf00      	nop
 8007c36:	e7fd      	b.n	8007c34 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c38:	f001 f9fc 	bl	8009034 <xTaskGetSchedulerState>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d102      	bne.n	8007c48 <xQueueGenericSend+0xa4>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <xQueueGenericSend+0xa8>
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e000      	b.n	8007c4e <xQueueGenericSend+0xaa>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10b      	bne.n	8007c6a <xQueueGenericSend+0xc6>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	61fb      	str	r3, [r7, #28]
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop
 8007c68:	e7fd      	b.n	8007c66 <xQueueGenericSend+0xc2>
>>>>>>> remotes/origin/jayce_working
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 8007a9e:	f001 ff9b 	bl	80099d8 <vPortEnterCritical>
=======
 8007c6a:	f001 ff4d 	bl	8009b08 <vPortEnterCritical>
>>>>>>> remotes/origin/jayce_working
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< HEAD
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d302      	bcc.n	8007ab4 <xQueueGenericSend+0xdc>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d129      	bne.n	8007b08 <xQueueGenericSend+0x130>
=======
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d302      	bcc.n	8007c80 <xQueueGenericSend+0xdc>
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d129      	bne.n	8007cd4 <xQueueGenericSend+0x130>
>>>>>>> remotes/origin/jayce_working
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	68b9      	ldr	r1, [r7, #8]
 8007ab8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007aba:	f000 fa33 	bl	8007f24 <prvCopyDataToQueue>
 8007abe:	62f8      	str	r0, [r7, #44]	@ 0x2c
=======
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	68b9      	ldr	r1, [r7, #8]
 8007c84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c86:	f000 fa0f 	bl	80080a8 <prvCopyDataToQueue>
 8007c8a:	62f8      	str	r0, [r7, #44]	@ 0x2c
>>>>>>> remotes/origin/jayce_working

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d010      	beq.n	8007aea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aca:	3324      	adds	r3, #36	@ 0x24
 8007acc:	4618      	mov	r0, r3
 8007ace:	f001 f853 	bl	8008b78 <xTaskRemoveFromEventList>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d013      	beq.n	8007b00 <xQueueGenericSend+0x128>
=======
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d010      	beq.n	8007cb6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c96:	3324      	adds	r3, #36	@ 0x24
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f001 f805 	bl	8008ca8 <xTaskRemoveFromEventList>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d013      	beq.n	8007ccc <xQueueGenericSend+0x128>
>>>>>>> remotes/origin/jayce_working
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 8007ad8:	4b3f      	ldr	r3, [pc, #252]	@ (8007bd8 <xQueueGenericSend+0x200>)
 8007ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	e00a      	b.n	8007b00 <xQueueGenericSend+0x128>
=======
 8007ca4:	4b3f      	ldr	r3, [pc, #252]	@ (8007da4 <xQueueGenericSend+0x200>)
 8007ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007caa:	601a      	str	r2, [r3, #0]
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	e00a      	b.n	8007ccc <xQueueGenericSend+0x128>
>>>>>>> remotes/origin/jayce_working
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< HEAD
 8007aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d007      	beq.n	8007b00 <xQueueGenericSend+0x128>
=======
 8007cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d007      	beq.n	8007ccc <xQueueGenericSend+0x128>
>>>>>>> remotes/origin/jayce_working
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 8007af0:	4b39      	ldr	r3, [pc, #228]	@ (8007bd8 <xQueueGenericSend+0x200>)
 8007af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	f3bf 8f6f 	isb	sy
=======
 8007cbc:	4b39      	ldr	r3, [pc, #228]	@ (8007da4 <xQueueGenericSend+0x200>)
 8007cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	f3bf 8f6f 	isb	sy
>>>>>>> remotes/origin/jayce_working
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 8007b00:	f001 ff9c 	bl	8009a3c <vPortExitCritical>
				return pdPASS;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e063      	b.n	8007bd0 <xQueueGenericSend+0x1f8>
=======
 8007ccc:	f001 ff4e 	bl	8009b6c <vPortExitCritical>
				return pdPASS;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e063      	b.n	8007d9c <xQueueGenericSend+0x1f8>
>>>>>>> remotes/origin/jayce_working
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d103      	bne.n	8007b16 <xQueueGenericSend+0x13e>
=======
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d103      	bne.n	8007ce2 <xQueueGenericSend+0x13e>
>>>>>>> remotes/origin/jayce_working
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 8007b0e:	f001 ff95 	bl	8009a3c <vPortExitCritical>
=======
 8007cda:	f001 ff47 	bl	8009b6c <vPortExitCritical>
>>>>>>> remotes/origin/jayce_working

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< HEAD
 8007b12:	2300      	movs	r3, #0
 8007b14:	e05c      	b.n	8007bd0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d106      	bne.n	8007b2a <xQueueGenericSend+0x152>
=======
 8007cde:	2300      	movs	r3, #0
 8007ce0:	e05c      	b.n	8007d9c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d106      	bne.n	8007cf6 <xQueueGenericSend+0x152>
>>>>>>> remotes/origin/jayce_working
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 8007b1c:	f107 0314 	add.w	r3, r7, #20
 8007b20:	4618      	mov	r0, r3
 8007b22:	f001 f88d 	bl	8008c40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b26:	2301      	movs	r3, #1
 8007b28:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 8007ce8:	f107 0314 	add.w	r3, r7, #20
 8007cec:	4618      	mov	r0, r3
 8007cee:	f001 f83f 	bl	8008d70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	637b      	str	r3, [r7, #52]	@ 0x34
>>>>>>> remotes/origin/jayce_working
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 8007b2a:	f001 ff87 	bl	8009a3c <vPortExitCritical>
=======
 8007cf6:	f001 ff39 	bl	8009b6c <vPortExitCritical>
>>>>>>> remotes/origin/jayce_working

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 8007b2e:	f000 fdf5 	bl	800871c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b32:	f001 ff51 	bl	80099d8 <vPortEnterCritical>
 8007b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b3c:	b25b      	sxtb	r3, r3
 8007b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b42:	d103      	bne.n	8007b4c <xQueueGenericSend+0x174>
 8007b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b52:	b25b      	sxtb	r3, r3
 8007b54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b58:	d103      	bne.n	8007b62 <xQueueGenericSend+0x18a>
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b62:	f001 ff6b 	bl	8009a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b66:	1d3a      	adds	r2, r7, #4
 8007b68:	f107 0314 	add.w	r3, r7, #20
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f001 f87c 	bl	8008c6c <xTaskCheckForTimeOut>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d124      	bne.n	8007bc4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b7c:	f000 faca 	bl	8008114 <prvIsQueueFull>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d018      	beq.n	8007bb8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b88:	3310      	adds	r3, #16
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 ffa0 	bl	8008ad4 <vTaskPlaceOnEventList>
=======
 8007cfa:	f000 fda7 	bl	800884c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cfe:	f001 ff03 	bl	8009b08 <vPortEnterCritical>
 8007d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d08:	b25b      	sxtb	r3, r3
 8007d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0e:	d103      	bne.n	8007d18 <xQueueGenericSend+0x174>
 8007d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d1e:	b25b      	sxtb	r3, r3
 8007d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d24:	d103      	bne.n	8007d2e <xQueueGenericSend+0x18a>
 8007d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d2e:	f001 ff1d 	bl	8009b6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d32:	1d3a      	adds	r2, r7, #4
 8007d34:	f107 0314 	add.w	r3, r7, #20
 8007d38:	4611      	mov	r1, r2
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f001 f82e 	bl	8008d9c <xTaskCheckForTimeOut>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d124      	bne.n	8007d90 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d48:	f000 faa6 	bl	8008298 <prvIsQueueFull>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d018      	beq.n	8007d84 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d54:	3310      	adds	r3, #16
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	4611      	mov	r1, r2
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 ff52 	bl	8008c04 <vTaskPlaceOnEventList>
>>>>>>> remotes/origin/jayce_working
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8007b94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b96:	f000 fa55 	bl	8008044 <prvUnlockQueue>
=======
 8007d60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d62:	f000 fa31 	bl	80081c8 <prvUnlockQueue>
>>>>>>> remotes/origin/jayce_working
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< HEAD
 8007b9a:	f000 fdcd 	bl	8008738 <xTaskResumeAll>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f47f af7c 	bne.w	8007a9e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd8 <xQueueGenericSend+0x200>)
 8007ba8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	e772      	b.n	8007a9e <xQueueGenericSend+0xc6>
=======
 8007d66:	f000 fd7f 	bl	8008868 <xTaskResumeAll>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f47f af7c 	bne.w	8007c6a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007d72:	4b0c      	ldr	r3, [pc, #48]	@ (8007da4 <xQueueGenericSend+0x200>)
 8007d74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	e772      	b.n	8007c6a <xQueueGenericSend+0xc6>
>>>>>>> remotes/origin/jayce_working
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8007bb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bba:	f000 fa43 	bl	8008044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bbe:	f000 fdbb 	bl	8008738 <xTaskResumeAll>
 8007bc2:	e76c      	b.n	8007a9e <xQueueGenericSend+0xc6>
=======
 8007d84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d86:	f000 fa1f 	bl	80081c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d8a:	f000 fd6d 	bl	8008868 <xTaskResumeAll>
 8007d8e:	e76c      	b.n	8007c6a <xQueueGenericSend+0xc6>
>>>>>>> remotes/origin/jayce_working
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8007bc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bc6:	f000 fa3d 	bl	8008044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bca:	f000 fdb5 	bl	8008738 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007bce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3738      	adds	r7, #56	@ 0x38
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	e000ed04 	.word	0xe000ed04

08007bdc <xQueueGenericSendFromISR>:
=======
 8007d90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d92:	f000 fa19 	bl	80081c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d96:	f000 fd67 	bl	8008868 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3738      	adds	r7, #56	@ 0x38
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	e000ed04 	.word	0xe000ed04

08007da8 <xQueueGenericSendFromISR>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b090      	sub	sp, #64	@ 0x40
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
 8007be8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10b      	bne.n	8007c0c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c06:	bf00      	nop
 8007c08:	bf00      	nop
 8007c0a:	e7fd      	b.n	8007c08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d103      	bne.n	8007c1a <xQueueGenericSendFromISR+0x3e>
 8007c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <xQueueGenericSendFromISR+0x42>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e000      	b.n	8007c20 <xQueueGenericSendFromISR+0x44>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10b      	bne.n	8007c3c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c36:	bf00      	nop
 8007c38:	bf00      	nop
 8007c3a:	e7fd      	b.n	8007c38 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d103      	bne.n	8007c4a <xQueueGenericSendFromISR+0x6e>
 8007c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d101      	bne.n	8007c4e <xQueueGenericSendFromISR+0x72>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e000      	b.n	8007c50 <xQueueGenericSendFromISR+0x74>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10b      	bne.n	8007c6c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	623b      	str	r3, [r7, #32]
}
 8007c66:	bf00      	nop
 8007c68:	bf00      	nop
 8007c6a:	e7fd      	b.n	8007c68 <xQueueGenericSendFromISR+0x8c>
=======
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b090      	sub	sp, #64	@ 0x40
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10b      	bne.n	8007dd8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007dd2:	bf00      	nop
 8007dd4:	bf00      	nop
 8007dd6:	e7fd      	b.n	8007dd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d103      	bne.n	8007de6 <xQueueGenericSendFromISR+0x3e>
 8007dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <xQueueGenericSendFromISR+0x42>
 8007de6:	2301      	movs	r3, #1
 8007de8:	e000      	b.n	8007dec <xQueueGenericSendFromISR+0x44>
 8007dea:	2300      	movs	r3, #0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10b      	bne.n	8007e08 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e02:	bf00      	nop
 8007e04:	bf00      	nop
 8007e06:	e7fd      	b.n	8007e04 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d103      	bne.n	8007e16 <xQueueGenericSendFromISR+0x6e>
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d101      	bne.n	8007e1a <xQueueGenericSendFromISR+0x72>
 8007e16:	2301      	movs	r3, #1
 8007e18:	e000      	b.n	8007e1c <xQueueGenericSendFromISR+0x74>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10b      	bne.n	8007e38 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	623b      	str	r3, [r7, #32]
}
 8007e32:	bf00      	nop
 8007e34:	bf00      	nop
 8007e36:	e7fd      	b.n	8007e34 <xQueueGenericSendFromISR+0x8c>
>>>>>>> remotes/origin/jayce_working
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 8007c6c:	f001 ff94 	bl	8009b98 <vPortValidateInterruptPriority>
=======
 8007e38:	f001 ff46 	bl	8009cc8 <vPortValidateInterruptPriority>
>>>>>>> remotes/origin/jayce_working

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 8007c70:	f3ef 8211 	mrs	r2, BASEPRI
 8007c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	61fa      	str	r2, [r7, #28]
 8007c86:	61bb      	str	r3, [r7, #24]
=======
 8007e3c:	f3ef 8211 	mrs	r2, BASEPRI
 8007e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	61fa      	str	r2, [r7, #28]
 8007e52:	61bb      	str	r3, [r7, #24]
>>>>>>> remotes/origin/jayce_working
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< HEAD
 8007c88:	69fb      	ldr	r3, [r7, #28]
=======
 8007e54:	69fb      	ldr	r3, [r7, #28]
>>>>>>> remotes/origin/jayce_working
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< HEAD
 8007c8a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d302      	bcc.n	8007c9e <xQueueGenericSendFromISR+0xc2>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d12f      	bne.n	8007cfe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ca4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 8007e56:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d302      	bcc.n	8007e6a <xQueueGenericSendFromISR+0xc2>
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d12f      	bne.n	8007eca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> remotes/origin/jayce_working
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	68b9      	ldr	r1, [r7, #8]
 8007cb2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007cb4:	f000 f936 	bl	8007f24 <prvCopyDataToQueue>
=======
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	68b9      	ldr	r1, [r7, #8]
 8007e7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007e80:	f000 f912 	bl	80080a8 <prvCopyDataToQueue>
>>>>>>> remotes/origin/jayce_working

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< HEAD
 8007cb8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cc0:	d112      	bne.n	8007ce8 <xQueueGenericSendFromISR+0x10c>
=======
 8007e84:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8c:	d112      	bne.n	8007eb4 <xQueueGenericSendFromISR+0x10c>
>>>>>>> remotes/origin/jayce_working
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d016      	beq.n	8007cf8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ccc:	3324      	adds	r3, #36	@ 0x24
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 ff52 	bl	8008b78 <xTaskRemoveFromEventList>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00e      	beq.n	8007cf8 <xQueueGenericSendFromISR+0x11c>
=======
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d016      	beq.n	8007ec4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e98:	3324      	adds	r3, #36	@ 0x24
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 ff04 	bl	8008ca8 <xTaskRemoveFromEventList>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00e      	beq.n	8007ec4 <xQueueGenericSendFromISR+0x11c>
>>>>>>> remotes/origin/jayce_working
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00b      	beq.n	8007cf8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]
 8007ce6:	e007      	b.n	8007cf8 <xQueueGenericSendFromISR+0x11c>
=======
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00b      	beq.n	8007ec4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	601a      	str	r2, [r3, #0]
 8007eb2:	e007      	b.n	8007ec4 <xQueueGenericSendFromISR+0x11c>
>>>>>>> remotes/origin/jayce_working
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< HEAD
 8007ce8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007cec:	3301      	adds	r3, #1
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	b25a      	sxtb	r2, r3
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007cfc:	e001      	b.n	8007d02 <xQueueGenericSendFromISR+0x126>
=======
 8007eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007eb8:	3301      	adds	r3, #1
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	b25a      	sxtb	r2, r3
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007ec8:	e001      	b.n	8007ece <xQueueGenericSendFromISR+0x126>
>>>>>>> remotes/origin/jayce_working
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< HEAD
 8007cfe:	2300      	movs	r3, #0
 8007d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d04:	617b      	str	r3, [r7, #20]
=======
 8007eca:	2300      	movs	r3, #0
 8007ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed0:	617b      	str	r3, [r7, #20]
>>>>>>> remotes/origin/jayce_working
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< HEAD
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f383 8811 	msr	BASEPRI, r3
=======
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f383 8811 	msr	BASEPRI, r3
>>>>>>> remotes/origin/jayce_working
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
<<<<<<< HEAD
 8007d0c:	bf00      	nop
=======
 8007ed8:	bf00      	nop
>>>>>>> remotes/origin/jayce_working
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 8007d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3740      	adds	r7, #64	@ 0x40
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <xQueueReceive>:
=======
 8007eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3740      	adds	r7, #64	@ 0x40
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <xQueueReceive>:
>>>>>>> remotes/origin/jayce_working
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b08c      	sub	sp, #48	@ 0x30
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d24:	2300      	movs	r3, #0
 8007d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10b      	bne.n	8007d4a <xQueueReceive+0x32>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	623b      	str	r3, [r7, #32]
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	e7fd      	b.n	8007d46 <xQueueReceive+0x2e>
=======
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08c      	sub	sp, #48	@ 0x30
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10b      	bne.n	8007f16 <xQueueReceive+0x32>
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	623b      	str	r3, [r7, #32]
}
 8007f10:	bf00      	nop
 8007f12:	bf00      	nop
 8007f14:	e7fd      	b.n	8007f12 <xQueueReceive+0x2e>
>>>>>>> remotes/origin/jayce_working

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< HEAD
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d103      	bne.n	8007d58 <xQueueReceive+0x40>
 8007d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <xQueueReceive+0x44>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e000      	b.n	8007d5e <xQueueReceive+0x46>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10b      	bne.n	8007d7a <xQueueReceive+0x62>
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	61fb      	str	r3, [r7, #28]
}
 8007d74:	bf00      	nop
 8007d76:	bf00      	nop
 8007d78:	e7fd      	b.n	8007d76 <xQueueReceive+0x5e>
=======
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d103      	bne.n	8007f24 <xQueueReceive+0x40>
 8007f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d101      	bne.n	8007f28 <xQueueReceive+0x44>
 8007f24:	2301      	movs	r3, #1
 8007f26:	e000      	b.n	8007f2a <xQueueReceive+0x46>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10b      	bne.n	8007f46 <xQueueReceive+0x62>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	61fb      	str	r3, [r7, #28]
}
 8007f40:	bf00      	nop
 8007f42:	bf00      	nop
 8007f44:	e7fd      	b.n	8007f42 <xQueueReceive+0x5e>
>>>>>>> remotes/origin/jayce_working

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 8007d7a:	f001 f8c3 	bl	8008f04 <xTaskGetSchedulerState>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d102      	bne.n	8007d8a <xQueueReceive+0x72>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <xQueueReceive+0x76>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e000      	b.n	8007d90 <xQueueReceive+0x78>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10b      	bne.n	8007dac <xQueueReceive+0x94>
	__asm volatile
 8007d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	61bb      	str	r3, [r7, #24]
}
 8007da6:	bf00      	nop
 8007da8:	bf00      	nop
 8007daa:	e7fd      	b.n	8007da8 <xQueueReceive+0x90>
=======
 8007f46:	f001 f875 	bl	8009034 <xTaskGetSchedulerState>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d102      	bne.n	8007f56 <xQueueReceive+0x72>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <xQueueReceive+0x76>
 8007f56:	2301      	movs	r3, #1
 8007f58:	e000      	b.n	8007f5c <xQueueReceive+0x78>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10b      	bne.n	8007f78 <xQueueReceive+0x94>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	61bb      	str	r3, [r7, #24]
}
 8007f72:	bf00      	nop
 8007f74:	bf00      	nop
 8007f76:	e7fd      	b.n	8007f74 <xQueueReceive+0x90>
>>>>>>> remotes/origin/jayce_working
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 8007dac:	f001 fe14 	bl	80099d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db4:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8007f78:	f001 fdc6 	bl	8009b08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f80:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> remotes/origin/jayce_working

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8007db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d01f      	beq.n	8007dfc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007dbc:	68b9      	ldr	r1, [r7, #8]
 8007dbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dc0:	f000 f91a 	bl	8007ff8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc6:	1e5a      	subs	r2, r3, #1
 8007dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dca:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d01f      	beq.n	8007fc8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f88:	68b9      	ldr	r1, [r7, #8]
 8007f8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f8c:	f000 f8f6 	bl	800817c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f92:	1e5a      	subs	r2, r3, #1
 8007f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f96:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> remotes/origin/jayce_working

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 8007dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00f      	beq.n	8007df4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd6:	3310      	adds	r3, #16
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 fecd 	bl	8008b78 <xTaskRemoveFromEventList>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d007      	beq.n	8007df4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007de4:	4b3c      	ldr	r3, [pc, #240]	@ (8007ed8 <xQueueReceive+0x1c0>)
 8007de6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dea:	601a      	str	r2, [r3, #0]
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	f3bf 8f6f 	isb	sy
=======
 8007f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00f      	beq.n	8007fc0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa2:	3310      	adds	r3, #16
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 fe7f 	bl	8008ca8 <xTaskRemoveFromEventList>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d007      	beq.n	8007fc0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007fb0:	4b3c      	ldr	r3, [pc, #240]	@ (80080a4 <xQueueReceive+0x1c0>)
 8007fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fb6:	601a      	str	r2, [r3, #0]
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	f3bf 8f6f 	isb	sy
>>>>>>> remotes/origin/jayce_working
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 8007df4:	f001 fe22 	bl	8009a3c <vPortExitCritical>
				return pdPASS;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e069      	b.n	8007ed0 <xQueueReceive+0x1b8>
=======
 8007fc0:	f001 fdd4 	bl	8009b6c <vPortExitCritical>
				return pdPASS;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e069      	b.n	800809c <xQueueReceive+0x1b8>
>>>>>>> remotes/origin/jayce_working
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d103      	bne.n	8007e0a <xQueueReceive+0xf2>
=======
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d103      	bne.n	8007fd6 <xQueueReceive+0xf2>
>>>>>>> remotes/origin/jayce_working
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 8007e02:	f001 fe1b 	bl	8009a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e06:	2300      	movs	r3, #0
 8007e08:	e062      	b.n	8007ed0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d106      	bne.n	8007e1e <xQueueReceive+0x106>
=======
 8007fce:	f001 fdcd 	bl	8009b6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	e062      	b.n	800809c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d106      	bne.n	8007fea <xQueueReceive+0x106>
>>>>>>> remotes/origin/jayce_working
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 8007e10:	f107 0310 	add.w	r3, r7, #16
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 ff13 	bl	8008c40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 8007fdc:	f107 0310 	add.w	r3, r7, #16
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 fec5 	bl	8008d70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> remotes/origin/jayce_working
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 8007e1e:	f001 fe0d 	bl	8009a3c <vPortExitCritical>
=======
 8007fea:	f001 fdbf 	bl	8009b6c <vPortExitCritical>
>>>>>>> remotes/origin/jayce_working

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 8007e22:	f000 fc7b 	bl	800871c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e26:	f001 fdd7 	bl	80099d8 <vPortEnterCritical>
 8007e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e30:	b25b      	sxtb	r3, r3
 8007e32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e36:	d103      	bne.n	8007e40 <xQueueReceive+0x128>
 8007e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e46:	b25b      	sxtb	r3, r3
 8007e48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e4c:	d103      	bne.n	8007e56 <xQueueReceive+0x13e>
 8007e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e56:	f001 fdf1 	bl	8009a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e5a:	1d3a      	adds	r2, r7, #4
 8007e5c:	f107 0310 	add.w	r3, r7, #16
 8007e60:	4611      	mov	r1, r2
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 ff02 	bl	8008c6c <xTaskCheckForTimeOut>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d123      	bne.n	8007eb6 <xQueueReceive+0x19e>
=======
 8007fee:	f000 fc2d 	bl	800884c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ff2:	f001 fd89 	bl	8009b08 <vPortEnterCritical>
 8007ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ffc:	b25b      	sxtb	r3, r3
 8007ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008002:	d103      	bne.n	800800c <xQueueReceive+0x128>
 8008004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800800c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008012:	b25b      	sxtb	r3, r3
 8008014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008018:	d103      	bne.n	8008022 <xQueueReceive+0x13e>
 800801a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800801c:	2200      	movs	r2, #0
 800801e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008022:	f001 fda3 	bl	8009b6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008026:	1d3a      	adds	r2, r7, #4
 8008028:	f107 0310 	add.w	r3, r7, #16
 800802c:	4611      	mov	r1, r2
 800802e:	4618      	mov	r0, r3
 8008030:	f000 feb4 	bl	8008d9c <xTaskCheckForTimeOut>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d123      	bne.n	8008082 <xQueueReceive+0x19e>
>>>>>>> remotes/origin/jayce_working
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 8007e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e70:	f000 f93a 	bl	80080e8 <prvIsQueueEmpty>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d017      	beq.n	8007eaa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7c:	3324      	adds	r3, #36	@ 0x24
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	4611      	mov	r1, r2
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 fe26 	bl	8008ad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e8a:	f000 f8db 	bl	8008044 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e8e:	f000 fc53 	bl	8008738 <xTaskResumeAll>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d189      	bne.n	8007dac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007e98:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed8 <xQueueReceive+0x1c0>)
 8007e9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	e780      	b.n	8007dac <xQueueReceive+0x94>
=======
 800803a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800803c:	f000 f916 	bl	800826c <prvIsQueueEmpty>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d017      	beq.n	8008076 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008048:	3324      	adds	r3, #36	@ 0x24
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	4611      	mov	r1, r2
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fdd8 	bl	8008c04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008054:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008056:	f000 f8b7 	bl	80081c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800805a:	f000 fc05 	bl	8008868 <xTaskResumeAll>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d189      	bne.n	8007f78 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008064:	4b0f      	ldr	r3, [pc, #60]	@ (80080a4 <xQueueReceive+0x1c0>)
 8008066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	e780      	b.n	8007f78 <xQueueReceive+0x94>
>>>>>>> remotes/origin/jayce_working
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8007eaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007eac:	f000 f8ca 	bl	8008044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007eb0:	f000 fc42 	bl	8008738 <xTaskResumeAll>
 8007eb4:	e77a      	b.n	8007dac <xQueueReceive+0x94>
=======
 8008076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008078:	f000 f8a6 	bl	80081c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800807c:	f000 fbf4 	bl	8008868 <xTaskResumeAll>
 8008080:	e77a      	b.n	8007f78 <xQueueReceive+0x94>
>>>>>>> remotes/origin/jayce_working
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8007eb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007eb8:	f000 f8c4 	bl	8008044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ebc:	f000 fc3c 	bl	8008738 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ec0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ec2:	f000 f911 	bl	80080e8 <prvIsQueueEmpty>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f43f af6f 	beq.w	8007dac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ece:	2300      	movs	r3, #0
=======
 8008082:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008084:	f000 f8a0 	bl	80081c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008088:	f000 fbee 	bl	8008868 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800808c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800808e:	f000 f8ed 	bl	800826c <prvIsQueueEmpty>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	f43f af6f 	beq.w	8007f78 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800809a:	2300      	movs	r3, #0
>>>>>>> remotes/origin/jayce_working
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< HEAD
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3730      	adds	r7, #48	@ 0x30
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	e000ed04 	.word	0xe000ed04

08007edc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10b      	bne.n	8007f06 <vQueueDelete+0x2a>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	60bb      	str	r3, [r7, #8]
}
 8007f00:	bf00      	nop
 8007f02:	bf00      	nop
 8007f04:	e7fd      	b.n	8007f02 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 f946 	bl	8008198 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d102      	bne.n	8007f1c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f001 ff4e 	bl	8009db8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007f1c:	bf00      	nop
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <prvCopyDataToQueue>:
=======
 800809c:	4618      	mov	r0, r3
 800809e:	3730      	adds	r7, #48	@ 0x30
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	e000ed04 	.word	0xe000ed04

080080a8 <prvCopyDataToQueue>:
>>>>>>> remotes/origin/jayce_working

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< HEAD
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f30:	2300      	movs	r3, #0
 8007f32:	617b      	str	r3, [r7, #20]
=======
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80080b4:	2300      	movs	r3, #0
 80080b6:	617b      	str	r3, [r7, #20]
>>>>>>> remotes/origin/jayce_working
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10d      	bne.n	8007f5e <prvCopyDataToQueue+0x3a>
=======
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10d      	bne.n	80080e2 <prvCopyDataToQueue+0x3a>
>>>>>>> remotes/origin/jayce_working
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d14d      	bne.n	8007fe6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 fff6 	bl	8008f40 <xTaskPriorityDisinherit>
 8007f54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	609a      	str	r2, [r3, #8]
 8007f5c:	e043      	b.n	8007fe6 <prvCopyDataToQueue+0xc2>
=======
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d14d      	bne.n	800816a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 ffcc 	bl	8009070 <xTaskPriorityDisinherit>
 80080d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	609a      	str	r2, [r3, #8]
 80080e0:	e043      	b.n	800816a <prvCopyDataToQueue+0xc2>
>>>>>>> remotes/origin/jayce_working
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< HEAD
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d119      	bne.n	8007f98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6858      	ldr	r0, [r3, #4]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	68b9      	ldr	r1, [r7, #8]
 8007f70:	f002 f8c6 	bl	800a100 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f7c:	441a      	add	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d32b      	bcc.n	8007fe6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	605a      	str	r2, [r3, #4]
 8007f96:	e026      	b.n	8007fe6 <prvCopyDataToQueue+0xc2>
=======
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d119      	bne.n	800811c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6858      	ldr	r0, [r3, #4]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080f0:	461a      	mov	r2, r3
 80080f2:	68b9      	ldr	r1, [r7, #8]
 80080f4:	f002 f89c 	bl	800a230 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008100:	441a      	add	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	685a      	ldr	r2, [r3, #4]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	429a      	cmp	r2, r3
 8008110:	d32b      	bcc.n	800816a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	605a      	str	r2, [r3, #4]
 800811a:	e026      	b.n	800816a <prvCopyDataToQueue+0xc2>
>>>>>>> remotes/origin/jayce_working
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
<<<<<<< HEAD
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	68d8      	ldr	r0, [r3, #12]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	68b9      	ldr	r1, [r7, #8]
 8007fa4:	f002 f8ac 	bl	800a100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb0:	425b      	negs	r3, r3
 8007fb2:	441a      	add	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	68da      	ldr	r2, [r3, #12]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d207      	bcs.n	8007fd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fcc:	425b      	negs	r3, r3
 8007fce:	441a      	add	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	60da      	str	r2, [r3, #12]
=======
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	68d8      	ldr	r0, [r3, #12]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008124:	461a      	mov	r2, r3
 8008126:	68b9      	ldr	r1, [r7, #8]
 8008128:	f002 f882 	bl	800a230 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	68da      	ldr	r2, [r3, #12]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008134:	425b      	negs	r3, r3
 8008136:	441a      	add	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	68da      	ldr	r2, [r3, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	429a      	cmp	r2, r3
 8008146:	d207      	bcs.n	8008158 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	689a      	ldr	r2, [r3, #8]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008150:	425b      	negs	r3, r3
 8008152:	441a      	add	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	60da      	str	r2, [r3, #12]
>>>>>>> remotes/origin/jayce_working
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< HEAD
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d105      	bne.n	8007fe6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d002      	beq.n	8007fe6 <prvCopyDataToQueue+0xc2>
=======
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b02      	cmp	r3, #2
 800815c:	d105      	bne.n	800816a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d002      	beq.n	800816a <prvCopyDataToQueue+0xc2>
>>>>>>> remotes/origin/jayce_working
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< HEAD
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	613b      	str	r3, [r7, #16]
=======
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	3b01      	subs	r3, #1
 8008168:	613b      	str	r3, [r7, #16]
>>>>>>> remotes/origin/jayce_working
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< HEAD
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	1c5a      	adds	r2, r3, #1
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007fee:	697b      	ldr	r3, [r7, #20]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3718      	adds	r7, #24
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <prvCopyDataFromQueue>:
=======
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008172:	697b      	ldr	r3, [r7, #20]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <prvCopyDataFromQueue>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
<<<<<<< HEAD
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008006:	2b00      	cmp	r3, #0
 8008008:	d018      	beq.n	800803c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68da      	ldr	r2, [r3, #12]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008012:	441a      	add	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68da      	ldr	r2, [r3, #12]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	429a      	cmp	r2, r3
 8008022:	d303      	bcc.n	800802c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	60da      	str	r2, [r3, #12]
=======
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800818a:	2b00      	cmp	r3, #0
 800818c:	d018      	beq.n	80081c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008196:	441a      	add	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	68da      	ldr	r2, [r3, #12]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d303      	bcc.n	80081b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	60da      	str	r2, [r3, #12]
>>>>>>> remotes/origin/jayce_working
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
<<<<<<< HEAD
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68d9      	ldr	r1, [r3, #12]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008034:	461a      	mov	r2, r3
 8008036:	6838      	ldr	r0, [r7, #0]
 8008038:	f002 f862 	bl	800a100 <memcpy>
	}
}
 800803c:	bf00      	nop
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <prvUnlockQueue>:
=======
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	68d9      	ldr	r1, [r3, #12]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b8:	461a      	mov	r2, r3
 80081ba:	6838      	ldr	r0, [r7, #0]
 80081bc:	f002 f838 	bl	800a230 <memcpy>
	}
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <prvUnlockQueue>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< HEAD
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
=======
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 800804c:	f001 fcc4 	bl	80099d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008056:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008058:	e011      	b.n	800807e <prvUnlockQueue+0x3a>
=======
 80081d0:	f001 fc9a 	bl	8009b08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081dc:	e011      	b.n	8008202 <prvUnlockQueue+0x3a>
>>>>>>> remotes/origin/jayce_working
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800805e:	2b00      	cmp	r3, #0
 8008060:	d012      	beq.n	8008088 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	3324      	adds	r3, #36	@ 0x24
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fd86 	bl	8008b78 <xTaskRemoveFromEventList>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <prvUnlockQueue+0x32>
=======
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d012      	beq.n	800820c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	3324      	adds	r3, #36	@ 0x24
 80081ea:	4618      	mov	r0, r3
 80081ec:	f000 fd5c 	bl	8008ca8 <xTaskRemoveFromEventList>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <prvUnlockQueue+0x32>
>>>>>>> remotes/origin/jayce_working
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< HEAD
 8008072:	f000 fe5f 	bl	8008d34 <vTaskMissedYield>
=======
 80081f6:	f000 fe35 	bl	8008e64 <vTaskMissedYield>
>>>>>>> remotes/origin/jayce_working
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< HEAD
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	3b01      	subs	r3, #1
 800807a:	b2db      	uxtb	r3, r3
 800807c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800807e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008082:	2b00      	cmp	r3, #0
 8008084:	dce9      	bgt.n	800805a <prvUnlockQueue+0x16>
 8008086:	e000      	b.n	800808a <prvUnlockQueue+0x46>
					break;
 8008088:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	22ff      	movs	r2, #255	@ 0xff
 800808e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008092:	f001 fcd3 	bl	8009a3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008096:	f001 fc9f 	bl	80099d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080a2:	e011      	b.n	80080c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d012      	beq.n	80080d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	3310      	adds	r3, #16
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 fd61 	bl	8008b78 <xTaskRemoveFromEventList>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080bc:	f000 fe3a 	bl	8008d34 <vTaskMissedYield>
=======
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	3b01      	subs	r3, #1
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008206:	2b00      	cmp	r3, #0
 8008208:	dce9      	bgt.n	80081de <prvUnlockQueue+0x16>
 800820a:	e000      	b.n	800820e <prvUnlockQueue+0x46>
					break;
 800820c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	22ff      	movs	r2, #255	@ 0xff
 8008212:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008216:	f001 fca9 	bl	8009b6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800821a:	f001 fc75 	bl	8009b08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008224:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008226:	e011      	b.n	800824c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d012      	beq.n	8008256 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	3310      	adds	r3, #16
 8008234:	4618      	mov	r0, r3
 8008236:	f000 fd37 	bl	8008ca8 <xTaskRemoveFromEventList>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008240:	f000 fe10 	bl	8008e64 <vTaskMissedYield>
>>>>>>> remotes/origin/jayce_working
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< HEAD
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	3b01      	subs	r3, #1
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	dce9      	bgt.n	80080a4 <prvUnlockQueue+0x60>
 80080d0:	e000      	b.n	80080d4 <prvUnlockQueue+0x90>
=======
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	3b01      	subs	r3, #1
 8008248:	b2db      	uxtb	r3, r3
 800824a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800824c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008250:	2b00      	cmp	r3, #0
 8008252:	dce9      	bgt.n	8008228 <prvUnlockQueue+0x60>
 8008254:	e000      	b.n	8008258 <prvUnlockQueue+0x90>
>>>>>>> remotes/origin/jayce_working
			}
			else
			{
				break;
<<<<<<< HEAD
 80080d2:	bf00      	nop
=======
 8008256:	bf00      	nop
>>>>>>> remotes/origin/jayce_working
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< HEAD
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	22ff      	movs	r2, #255	@ 0xff
 80080d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80080dc:	f001 fcae 	bl	8009a3c <vPortExitCritical>
}
 80080e0:	bf00      	nop
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <prvIsQueueEmpty>:
=======
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	22ff      	movs	r2, #255	@ 0xff
 800825c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008260:	f001 fc84 	bl	8009b6c <vPortExitCritical>
}
 8008264:	bf00      	nop
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <prvIsQueueEmpty>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080f0:	f001 fc72 	bl	80099d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d102      	bne.n	8008102 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80080fc:	2301      	movs	r3, #1
 80080fe:	60fb      	str	r3, [r7, #12]
 8008100:	e001      	b.n	8008106 <prvIsQueueEmpty+0x1e>
=======
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008274:	f001 fc48 	bl	8009b08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800827c:	2b00      	cmp	r3, #0
 800827e:	d102      	bne.n	8008286 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008280:	2301      	movs	r3, #1
 8008282:	60fb      	str	r3, [r7, #12]
 8008284:	e001      	b.n	800828a <prvIsQueueEmpty+0x1e>
>>>>>>> remotes/origin/jayce_working
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008106:	f001 fc99 	bl	8009a3c <vPortExitCritical>

	return xReturn;
 800810a:	68fb      	ldr	r3, [r7, #12]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <prvIsQueueFull>:
=======
 8008286:	2300      	movs	r3, #0
 8008288:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800828a:	f001 fc6f 	bl	8009b6c <vPortExitCritical>

	return xReturn;
 800828e:	68fb      	ldr	r3, [r7, #12]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <prvIsQueueFull>:
>>>>>>> remotes/origin/jayce_working
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800811c:	f001 fc5c 	bl	80099d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008128:	429a      	cmp	r2, r3
 800812a:	d102      	bne.n	8008132 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800812c:	2301      	movs	r3, #1
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	e001      	b.n	8008136 <prvIsQueueFull+0x22>
=======
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082a0:	f001 fc32 	bl	8009b08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d102      	bne.n	80082b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80082b0:	2301      	movs	r3, #1
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e001      	b.n	80082ba <prvIsQueueFull+0x22>
>>>>>>> remotes/origin/jayce_working
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 8008132:	2300      	movs	r3, #0
 8008134:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008136:	f001 fc81 	bl	8009a3c <vPortExitCritical>

	return xReturn;
 800813a:	68fb      	ldr	r3, [r7, #12]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <vQueueAddToRegistry>:
=======
 80082b6:	2300      	movs	r3, #0
 80082b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082ba:	f001 fc57 	bl	8009b6c <vPortExitCritical>

	return xReturn;
 80082be:	68fb      	ldr	r3, [r7, #12]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <vQueueAddToRegistry>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
<<<<<<< HEAD
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
=======
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
>>>>>>> remotes/origin/jayce_working
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
<<<<<<< HEAD
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
 8008152:	e014      	b.n	800817e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008154:	4a0f      	ldr	r2, [pc, #60]	@ (8008194 <vQueueAddToRegistry+0x50>)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10b      	bne.n	8008178 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008160:	490c      	ldr	r1, [pc, #48]	@ (8008194 <vQueueAddToRegistry+0x50>)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800816a:	4a0a      	ldr	r2, [pc, #40]	@ (8008194 <vQueueAddToRegistry+0x50>)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	00db      	lsls	r3, r3, #3
 8008170:	4413      	add	r3, r2
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008176:	e006      	b.n	8008186 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	3301      	adds	r3, #1
 800817c:	60fb      	str	r3, [r7, #12]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2b07      	cmp	r3, #7
 8008182:	d9e7      	bls.n	8008154 <vQueueAddToRegistry+0x10>
=======
 80082d2:	2300      	movs	r3, #0
 80082d4:	60fb      	str	r3, [r7, #12]
 80082d6:	e014      	b.n	8008302 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80082d8:	4a0f      	ldr	r2, [pc, #60]	@ (8008318 <vQueueAddToRegistry+0x50>)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10b      	bne.n	80082fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80082e4:	490c      	ldr	r1, [pc, #48]	@ (8008318 <vQueueAddToRegistry+0x50>)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	683a      	ldr	r2, [r7, #0]
 80082ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80082ee:	4a0a      	ldr	r2, [pc, #40]	@ (8008318 <vQueueAddToRegistry+0x50>)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	4413      	add	r3, r2
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80082fa:	e006      	b.n	800830a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	3301      	adds	r3, #1
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2b07      	cmp	r3, #7
 8008306:	d9e7      	bls.n	80082d8 <vQueueAddToRegistry+0x10>
>>>>>>> remotes/origin/jayce_working
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
<<<<<<< HEAD
 8008184:	bf00      	nop
 8008186:	bf00      	nop
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	200009ec 	.word	0x200009ec

08008198 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081a0:	2300      	movs	r3, #0
 80081a2:	60fb      	str	r3, [r7, #12]
 80081a4:	e016      	b.n	80081d4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80081a6:	4a10      	ldr	r2, [pc, #64]	@ (80081e8 <vQueueUnregisterQueue+0x50>)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	00db      	lsls	r3, r3, #3
 80081ac:	4413      	add	r3, r2
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d10b      	bne.n	80081ce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80081b6:	4a0c      	ldr	r2, [pc, #48]	@ (80081e8 <vQueueUnregisterQueue+0x50>)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2100      	movs	r1, #0
 80081bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80081c0:	4a09      	ldr	r2, [pc, #36]	@ (80081e8 <vQueueUnregisterQueue+0x50>)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	4413      	add	r3, r2
 80081c8:	2200      	movs	r2, #0
 80081ca:	605a      	str	r2, [r3, #4]
				break;
 80081cc:	e006      	b.n	80081dc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	3301      	adds	r3, #1
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2b07      	cmp	r3, #7
 80081d8:	d9e5      	bls.n	80081a6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80081da:	bf00      	nop
 80081dc:	bf00      	nop
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr
 80081e8:	200009ec 	.word	0x200009ec

080081ec <vQueueWaitForMessageRestricted>:
=======
 8008308:	bf00      	nop
 800830a:	bf00      	nop
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	20000a44 	.word	0x20000a44

0800831c <vQueueWaitForMessageRestricted>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	617b      	str	r3, [r7, #20]
=======
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	617b      	str	r3, [r7, #20]
>>>>>>> remotes/origin/jayce_working
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
<<<<<<< HEAD
 80081fc:	f001 fbec 	bl	80099d8 <vPortEnterCritical>
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008206:	b25b      	sxtb	r3, r3
 8008208:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800820c:	d103      	bne.n	8008216 <vQueueWaitForMessageRestricted+0x2a>
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800821c:	b25b      	sxtb	r3, r3
 800821e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008222:	d103      	bne.n	800822c <vQueueWaitForMessageRestricted+0x40>
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800822c:	f001 fc06 	bl	8009a3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008234:	2b00      	cmp	r3, #0
 8008236:	d106      	bne.n	8008246 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	3324      	adds	r3, #36	@ 0x24
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	68b9      	ldr	r1, [r7, #8]
 8008240:	4618      	mov	r0, r3
 8008242:	f000 fc6d 	bl	8008b20 <vTaskPlaceOnEventListRestricted>
=======
 800832c:	f001 fbec 	bl	8009b08 <vPortEnterCritical>
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008336:	b25b      	sxtb	r3, r3
 8008338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800833c:	d103      	bne.n	8008346 <vQueueWaitForMessageRestricted+0x2a>
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800834c:	b25b      	sxtb	r3, r3
 800834e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008352:	d103      	bne.n	800835c <vQueueWaitForMessageRestricted+0x40>
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800835c:	f001 fc06 	bl	8009b6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008364:	2b00      	cmp	r3, #0
 8008366:	d106      	bne.n	8008376 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	3324      	adds	r3, #36	@ 0x24
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	68b9      	ldr	r1, [r7, #8]
 8008370:	4618      	mov	r0, r3
 8008372:	f000 fc6d 	bl	8008c50 <vTaskPlaceOnEventListRestricted>
>>>>>>> remotes/origin/jayce_working
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8008246:	6978      	ldr	r0, [r7, #20]
 8008248:	f7ff fefc 	bl	8008044 <prvUnlockQueue>
	}
 800824c:	bf00      	nop
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <xTaskCreateStatic>:
=======
 8008376:	6978      	ldr	r0, [r7, #20]
 8008378:	f7ff ff26 	bl	80081c8 <prvUnlockQueue>
	}
 800837c:	bf00      	nop
 800837e:	3718      	adds	r7, #24
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <xTaskCreateStatic>:
>>>>>>> remotes/origin/jayce_working
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< HEAD
 8008254:	b580      	push	{r7, lr}
 8008256:	b08e      	sub	sp, #56	@ 0x38
 8008258:	af04      	add	r7, sp, #16
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
 8008260:	603b      	str	r3, [r7, #0]
=======
 8008384:	b580      	push	{r7, lr}
 8008386:	b08e      	sub	sp, #56	@ 0x38
 8008388:	af04      	add	r7, sp, #16
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	603b      	str	r3, [r7, #0]
>>>>>>> remotes/origin/jayce_working
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< HEAD
 8008262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10b      	bne.n	8008280 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	623b      	str	r3, [r7, #32]
}
 800827a:	bf00      	nop
 800827c:	bf00      	nop
 800827e:	e7fd      	b.n	800827c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10b      	bne.n	800829e <xTaskCreateStatic+0x4a>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	61fb      	str	r3, [r7, #28]
}
 8008298:	bf00      	nop
 800829a:	bf00      	nop
 800829c:	e7fd      	b.n	800829a <xTaskCreateStatic+0x46>
=======
 8008392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10b      	bne.n	80083b0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	623b      	str	r3, [r7, #32]
}
 80083aa:	bf00      	nop
 80083ac:	bf00      	nop
 80083ae:	e7fd      	b.n	80083ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80083b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10b      	bne.n	80083ce <xTaskCreateStatic+0x4a>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	61fb      	str	r3, [r7, #28]
}
 80083c8:	bf00      	nop
 80083ca:	bf00      	nop
 80083cc:	e7fd      	b.n	80083ca <xTaskCreateStatic+0x46>
>>>>>>> remotes/origin/jayce_working
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< HEAD
 800829e:	23a8      	movs	r3, #168	@ 0xa8
 80082a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	2ba8      	cmp	r3, #168	@ 0xa8
 80082a6:	d00b      	beq.n	80082c0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80082a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	61bb      	str	r3, [r7, #24]
}
 80082ba:	bf00      	nop
 80082bc:	bf00      	nop
 80082be:	e7fd      	b.n	80082bc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80082c0:	693b      	ldr	r3, [r7, #16]
=======
 80083ce:	23a8      	movs	r3, #168	@ 0xa8
 80083d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	2ba8      	cmp	r3, #168	@ 0xa8
 80083d6:	d00b      	beq.n	80083f0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80083d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	61bb      	str	r3, [r7, #24]
}
 80083ea:	bf00      	nop
 80083ec:	bf00      	nop
 80083ee:	e7fd      	b.n	80083ec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80083f0:	693b      	ldr	r3, [r7, #16]
>>>>>>> remotes/origin/jayce_working
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< HEAD
 80082c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d01e      	beq.n	8008306 <xTaskCreateStatic+0xb2>
 80082c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d01b      	beq.n	8008306 <xTaskCreateStatic+0xb2>
=======
 80083f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d01e      	beq.n	8008436 <xTaskCreateStatic+0xb2>
 80083f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d01b      	beq.n	8008436 <xTaskCreateStatic+0xb2>
>>>>>>> remotes/origin/jayce_working
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 80082ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082d6:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 80083fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008400:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008404:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008406:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> remotes/origin/jayce_working

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 80082d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082da:	2202      	movs	r2, #2
 80082dc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
=======
 8008408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840a:	2202      	movs	r2, #2
 800840c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
>>>>>>> remotes/origin/jayce_working
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< HEAD
 80082e0:	2300      	movs	r3, #0
 80082e2:	9303      	str	r3, [sp, #12]
 80082e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e6:	9302      	str	r3, [sp, #8]
 80082e8:	f107 0314 	add.w	r3, r7, #20
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	68b9      	ldr	r1, [r7, #8]
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 f851 	bl	80083a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008300:	f000 f8f6 	bl	80084f0 <prvAddNewTaskToReadyList>
 8008304:	e001      	b.n	800830a <xTaskCreateStatic+0xb6>
=======
 8008410:	2300      	movs	r3, #0
 8008412:	9303      	str	r3, [sp, #12]
 8008414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008416:	9302      	str	r3, [sp, #8]
 8008418:	f107 0314 	add.w	r3, r7, #20
 800841c:	9301      	str	r3, [sp, #4]
 800841e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	68b9      	ldr	r1, [r7, #8]
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 f851 	bl	80084d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800842e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008430:	f000 f8f6 	bl	8008620 <prvAddNewTaskToReadyList>
 8008434:	e001      	b.n	800843a <xTaskCreateStatic+0xb6>
>>>>>>> remotes/origin/jayce_working
		}
		else
		{
			xReturn = NULL;
<<<<<<< HEAD
 8008306:	2300      	movs	r3, #0
 8008308:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800830a:	697b      	ldr	r3, [r7, #20]
	}
 800830c:	4618      	mov	r0, r3
 800830e:	3728      	adds	r7, #40	@ 0x28
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <xTaskCreate>:
=======
 8008436:	2300      	movs	r3, #0
 8008438:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800843a:	697b      	ldr	r3, [r7, #20]
	}
 800843c:	4618      	mov	r0, r3
 800843e:	3728      	adds	r7, #40	@ 0x28
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <xTaskCreate>:
>>>>>>> remotes/origin/jayce_working
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< HEAD
 8008314:	b580      	push	{r7, lr}
 8008316:	b08c      	sub	sp, #48	@ 0x30
 8008318:	af04      	add	r7, sp, #16
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	603b      	str	r3, [r7, #0]
 8008320:	4613      	mov	r3, r2
 8008322:	80fb      	strh	r3, [r7, #6]
=======
 8008444:	b580      	push	{r7, lr}
 8008446:	b08c      	sub	sp, #48	@ 0x30
 8008448:	af04      	add	r7, sp, #16
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	603b      	str	r3, [r7, #0]
 8008450:	4613      	mov	r3, r2
 8008452:	80fb      	strh	r3, [r7, #6]
>>>>>>> remotes/origin/jayce_working
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< HEAD
 8008324:	88fb      	ldrh	r3, [r7, #6]
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4618      	mov	r0, r3
 800832a:	f001 fc77 	bl	8009c1c <pvPortMalloc>
 800832e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00e      	beq.n	8008354 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008336:	20a8      	movs	r0, #168	@ 0xa8
 8008338:	f001 fc70 	bl	8009c1c <pvPortMalloc>
 800833c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	631a      	str	r2, [r3, #48]	@ 0x30
 800834a:	e005      	b.n	8008358 <xTaskCreate+0x44>
=======
 8008454:	88fb      	ldrh	r3, [r7, #6]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4618      	mov	r0, r3
 800845a:	f001 fc77 	bl	8009d4c <pvPortMalloc>
 800845e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00e      	beq.n	8008484 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008466:	20a8      	movs	r0, #168	@ 0xa8
 8008468:	f001 fc70 	bl	8009d4c <pvPortMalloc>
 800846c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	631a      	str	r2, [r3, #48]	@ 0x30
 800847a:	e005      	b.n	8008488 <xTaskCreate+0x44>
>>>>>>> remotes/origin/jayce_working
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< HEAD
 800834c:	6978      	ldr	r0, [r7, #20]
 800834e:	f001 fd33 	bl	8009db8 <vPortFree>
 8008352:	e001      	b.n	8008358 <xTaskCreate+0x44>
=======
 800847c:	6978      	ldr	r0, [r7, #20]
 800847e:	f001 fd33 	bl	8009ee8 <vPortFree>
 8008482:	e001      	b.n	8008488 <xTaskCreate+0x44>
>>>>>>> remotes/origin/jayce_working
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< HEAD
 8008354:	2300      	movs	r3, #0
 8008356:	61fb      	str	r3, [r7, #28]
=======
 8008484:	2300      	movs	r3, #0
 8008486:	61fb      	str	r3, [r7, #28]
>>>>>>> remotes/origin/jayce_working
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< HEAD
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d017      	beq.n	800838e <xTaskCreate+0x7a>
=======
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d017      	beq.n	80084be <xTaskCreate+0x7a>
>>>>>>> remotes/origin/jayce_working
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
=======
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
>>>>>>> remotes/origin/jayce_working
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< HEAD
 8008366:	88fa      	ldrh	r2, [r7, #6]
 8008368:	2300      	movs	r3, #0
 800836a:	9303      	str	r3, [sp, #12]
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	9302      	str	r3, [sp, #8]
 8008370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008372:	9301      	str	r3, [sp, #4]
 8008374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	68b9      	ldr	r1, [r7, #8]
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 f80f 	bl	80083a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008382:	69f8      	ldr	r0, [r7, #28]
 8008384:	f000 f8b4 	bl	80084f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008388:	2301      	movs	r3, #1
 800838a:	61bb      	str	r3, [r7, #24]
 800838c:	e002      	b.n	8008394 <xTaskCreate+0x80>
=======
 8008496:	88fa      	ldrh	r2, [r7, #6]
 8008498:	2300      	movs	r3, #0
 800849a:	9303      	str	r3, [sp, #12]
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	9302      	str	r3, [sp, #8]
 80084a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a2:	9301      	str	r3, [sp, #4]
 80084a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	68b9      	ldr	r1, [r7, #8]
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f000 f80f 	bl	80084d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084b2:	69f8      	ldr	r0, [r7, #28]
 80084b4:	f000 f8b4 	bl	8008620 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084b8:	2301      	movs	r3, #1
 80084ba:	61bb      	str	r3, [r7, #24]
 80084bc:	e002      	b.n	80084c4 <xTaskCreate+0x80>
>>>>>>> remotes/origin/jayce_working
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< HEAD
 800838e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008392:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008394:	69bb      	ldr	r3, [r7, #24]
	}
 8008396:	4618      	mov	r0, r3
 8008398:	3720      	adds	r7, #32
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
	...

080083a0 <prvInitialiseNewTask>:
=======
 80084be:	f04f 33ff 	mov.w	r3, #4294967295
 80084c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80084c4:	69bb      	ldr	r3, [r7, #24]
	}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3720      	adds	r7, #32
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
	...

080084d0 <prvInitialiseNewTask>:
>>>>>>> remotes/origin/jayce_working
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< HEAD
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	603b      	str	r3, [r7, #0]
=======
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b088      	sub	sp, #32
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
 80084dc:	603b      	str	r3, [r7, #0]
>>>>>>> remotes/origin/jayce_working

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
<<<<<<< HEAD
 80083ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	461a      	mov	r2, r3
 80083b8:	21a5      	movs	r1, #165	@ 0xa5
 80083ba:	f001 fe1d 	bl	8009ff8 <memset>
=======
 80084de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	461a      	mov	r2, r3
 80084e8:	21a5      	movs	r1, #165	@ 0xa5
 80084ea:	f001 fe1d 	bl	800a128 <memset>
>>>>>>> remotes/origin/jayce_working
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< HEAD
 80083be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80083c8:	3b01      	subs	r3, #1
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4413      	add	r3, r2
 80083ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	f023 0307 	bic.w	r3, r3, #7
 80083d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	f003 0307 	and.w	r3, r3, #7
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00b      	beq.n	80083fa <prvInitialiseNewTask+0x5a>
	__asm volatile
 80083e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e6:	f383 8811 	msr	BASEPRI, r3
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	617b      	str	r3, [r7, #20]
}
 80083f4:	bf00      	nop
 80083f6:	bf00      	nop
 80083f8:	e7fd      	b.n	80083f6 <prvInitialiseNewTask+0x56>
=======
 80084ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80084f8:	3b01      	subs	r3, #1
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	f023 0307 	bic.w	r3, r3, #7
 8008506:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	f003 0307 	and.w	r3, r3, #7
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00b      	beq.n	800852a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	617b      	str	r3, [r7, #20]
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop
 8008528:	e7fd      	b.n	8008526 <prvInitialiseNewTask+0x56>
>>>>>>> remotes/origin/jayce_working
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< HEAD
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d01f      	beq.n	8008440 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008400:	2300      	movs	r3, #0
 8008402:	61fb      	str	r3, [r7, #28]
 8008404:	e012      	b.n	800842c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	4413      	add	r3, r2
 800840c:	7819      	ldrb	r1, [r3, #0]
 800840e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	4413      	add	r3, r2
 8008414:	3334      	adds	r3, #52	@ 0x34
 8008416:	460a      	mov	r2, r1
 8008418:	701a      	strb	r2, [r3, #0]
=======
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d01f      	beq.n	8008570 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008530:	2300      	movs	r3, #0
 8008532:	61fb      	str	r3, [r7, #28]
 8008534:	e012      	b.n	800855c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	4413      	add	r3, r2
 800853c:	7819      	ldrb	r1, [r3, #0]
 800853e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	4413      	add	r3, r2
 8008544:	3334      	adds	r3, #52	@ 0x34
 8008546:	460a      	mov	r2, r1
 8008548:	701a      	strb	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< HEAD
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	4413      	add	r3, r2
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d006      	beq.n	8008434 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	3301      	adds	r3, #1
 800842a:	61fb      	str	r3, [r7, #28]
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	2b0f      	cmp	r3, #15
 8008430:	d9e9      	bls.n	8008406 <prvInitialiseNewTask+0x66>
 8008432:	e000      	b.n	8008436 <prvInitialiseNewTask+0x96>
			{
				break;
 8008434:	bf00      	nop
=======
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	4413      	add	r3, r2
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d006      	beq.n	8008564 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	3301      	adds	r3, #1
 800855a:	61fb      	str	r3, [r7, #28]
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	2b0f      	cmp	r3, #15
 8008560:	d9e9      	bls.n	8008536 <prvInitialiseNewTask+0x66>
 8008562:	e000      	b.n	8008566 <prvInitialiseNewTask+0x96>
			{
				break;
 8008564:	bf00      	nop
>>>>>>> remotes/origin/jayce_working
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< HEAD
 8008436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800843e:	e003      	b.n	8008448 <prvInitialiseNewTask+0xa8>
=======
 8008566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800856e:	e003      	b.n	8008578 <prvInitialiseNewTask+0xa8>
>>>>>>> remotes/origin/jayce_working
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< HEAD
 8008440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
=======
 8008570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
>>>>>>> remotes/origin/jayce_working
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< HEAD
 8008448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844a:	2b37      	cmp	r3, #55	@ 0x37
 800844c:	d901      	bls.n	8008452 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800844e:	2337      	movs	r3, #55	@ 0x37
 8008450:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 8008578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857a:	2b37      	cmp	r3, #55	@ 0x37
 800857c:	d901      	bls.n	8008582 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800857e:	2337      	movs	r3, #55	@ 0x37
 8008580:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> remotes/origin/jayce_working
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< HEAD
 8008452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008454:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008456:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800845c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800845e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008460:	2200      	movs	r2, #0
 8008462:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8008582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008586:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800858c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800858e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008590:	2200      	movs	r2, #0
 8008592:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> remotes/origin/jayce_working
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< HEAD
 8008464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008466:	3304      	adds	r3, #4
 8008468:	4618      	mov	r0, r3
 800846a:	f7ff f86d 	bl	8007548 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800846e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008470:	3318      	adds	r3, #24
 8008472:	4618      	mov	r0, r3
 8008474:	f7ff f868 	bl	8007548 <vListInitialiseItem>
=======
 8008594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008596:	3304      	adds	r3, #4
 8008598:	4618      	mov	r0, r3
 800859a:	f7ff f965 	bl	8007868 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800859e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a0:	3318      	adds	r3, #24
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7ff f960 	bl	8007868 <vListInitialiseItem>
>>>>>>> remotes/origin/jayce_working

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< HEAD
 8008478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800847c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800847e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008480:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008486:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800848c:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 80085a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80085b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085bc:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> remotes/origin/jayce_working
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< HEAD
 800848e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008490:	2200      	movs	r2, #0
 8008492:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008498:	2200      	movs	r2, #0
 800849a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
=======
 80085be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c0:	2200      	movs	r2, #0
 80085c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
>>>>>>> remotes/origin/jayce_working
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
<<<<<<< HEAD
 800849e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a0:	3354      	adds	r3, #84	@ 0x54
 80084a2:	224c      	movs	r2, #76	@ 0x4c
 80084a4:	2100      	movs	r1, #0
 80084a6:	4618      	mov	r0, r3
 80084a8:	f001 fda6 	bl	8009ff8 <memset>
 80084ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ae:	4a0d      	ldr	r2, [pc, #52]	@ (80084e4 <prvInitialiseNewTask+0x144>)
 80084b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80084b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b4:	4a0c      	ldr	r2, [pc, #48]	@ (80084e8 <prvInitialiseNewTask+0x148>)
 80084b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80084b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ba:	4a0c      	ldr	r2, [pc, #48]	@ (80084ec <prvInitialiseNewTask+0x14c>)
 80084bc:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 80085ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d0:	3354      	adds	r3, #84	@ 0x54
 80085d2:	224c      	movs	r2, #76	@ 0x4c
 80085d4:	2100      	movs	r1, #0
 80085d6:	4618      	mov	r0, r3
 80085d8:	f001 fda6 	bl	800a128 <memset>
 80085dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085de:	4a0d      	ldr	r2, [pc, #52]	@ (8008614 <prvInitialiseNewTask+0x144>)
 80085e0:	659a      	str	r2, [r3, #88]	@ 0x58
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	4a0c      	ldr	r2, [pc, #48]	@ (8008618 <prvInitialiseNewTask+0x148>)
 80085e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80085e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ea:	4a0c      	ldr	r2, [pc, #48]	@ (800861c <prvInitialiseNewTask+0x14c>)
 80085ec:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> remotes/origin/jayce_working
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< HEAD
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	68f9      	ldr	r1, [r7, #12]
 80084c2:	69b8      	ldr	r0, [r7, #24]
 80084c4:	f001 f95a 	bl	800977c <pxPortInitialiseStack>
 80084c8:	4602      	mov	r2, r0
 80084ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084cc:	601a      	str	r2, [r3, #0]
=======
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	68f9      	ldr	r1, [r7, #12]
 80085f2:	69b8      	ldr	r0, [r7, #24]
 80085f4:	f001 f95a 	bl	80098ac <pxPortInitialiseStack>
 80085f8:	4602      	mov	r2, r0
 80085fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fc:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< HEAD
 80084ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <prvInitialiseNewTask+0x13a>
=======
 80085fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <prvInitialiseNewTask+0x13a>
>>>>>>> remotes/origin/jayce_working
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< HEAD
 80084d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084d8:	601a      	str	r2, [r3, #0]
=======
 8008604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008608:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 80084da:	bf00      	nop
 80084dc:	3720      	adds	r7, #32
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	20001c38 	.word	0x20001c38
 80084e8:	20001ca0 	.word	0x20001ca0
 80084ec:	20001d08 	.word	0x20001d08

080084f0 <prvAddNewTaskToReadyList>:
=======
 800860a:	bf00      	nop
 800860c:	3720      	adds	r7, #32
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	20001c90 	.word	0x20001c90
 8008618:	20001cf8 	.word	0x20001cf8
 800861c:	20001d60 	.word	0x20001d60

08008620 <prvAddNewTaskToReadyList>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< HEAD
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084f8:	f001 fa6e 	bl	80099d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084fc:	4b2d      	ldr	r3, [pc, #180]	@ (80085b4 <prvAddNewTaskToReadyList+0xc4>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	3301      	adds	r3, #1
 8008502:	4a2c      	ldr	r2, [pc, #176]	@ (80085b4 <prvAddNewTaskToReadyList+0xc4>)
 8008504:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008506:	4b2c      	ldr	r3, [pc, #176]	@ (80085b8 <prvAddNewTaskToReadyList+0xc8>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <prvAddNewTaskToReadyList+0x32>
=======
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008628:	f001 fa6e 	bl	8009b08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800862c:	4b2d      	ldr	r3, [pc, #180]	@ (80086e4 <prvAddNewTaskToReadyList+0xc4>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3301      	adds	r3, #1
 8008632:	4a2c      	ldr	r2, [pc, #176]	@ (80086e4 <prvAddNewTaskToReadyList+0xc4>)
 8008634:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008636:	4b2c      	ldr	r3, [pc, #176]	@ (80086e8 <prvAddNewTaskToReadyList+0xc8>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d109      	bne.n	8008652 <prvAddNewTaskToReadyList+0x32>
>>>>>>> remotes/origin/jayce_working
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< HEAD
 800850e:	4a2a      	ldr	r2, [pc, #168]	@ (80085b8 <prvAddNewTaskToReadyList+0xc8>)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008514:	4b27      	ldr	r3, [pc, #156]	@ (80085b4 <prvAddNewTaskToReadyList+0xc4>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d110      	bne.n	800853e <prvAddNewTaskToReadyList+0x4e>
=======
 800863e:	4a2a      	ldr	r2, [pc, #168]	@ (80086e8 <prvAddNewTaskToReadyList+0xc8>)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008644:	4b27      	ldr	r3, [pc, #156]	@ (80086e4 <prvAddNewTaskToReadyList+0xc4>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d110      	bne.n	800866e <prvAddNewTaskToReadyList+0x4e>
>>>>>>> remotes/origin/jayce_working
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< HEAD
 800851c:	f000 fc2e 	bl	8008d7c <prvInitialiseTaskLists>
 8008520:	e00d      	b.n	800853e <prvAddNewTaskToReadyList+0x4e>
=======
 800864c:	f000 fc2e 	bl	8008eac <prvInitialiseTaskLists>
 8008650:	e00d      	b.n	800866e <prvAddNewTaskToReadyList+0x4e>
>>>>>>> remotes/origin/jayce_working
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
 8008522:	4b26      	ldr	r3, [pc, #152]	@ (80085bc <prvAddNewTaskToReadyList+0xcc>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d109      	bne.n	800853e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800852a:	4b23      	ldr	r3, [pc, #140]	@ (80085b8 <prvAddNewTaskToReadyList+0xc8>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008534:	429a      	cmp	r2, r3
 8008536:	d802      	bhi.n	800853e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008538:	4a1f      	ldr	r2, [pc, #124]	@ (80085b8 <prvAddNewTaskToReadyList+0xc8>)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6013      	str	r3, [r2, #0]
=======
 8008652:	4b26      	ldr	r3, [pc, #152]	@ (80086ec <prvAddNewTaskToReadyList+0xcc>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d109      	bne.n	800866e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800865a:	4b23      	ldr	r3, [pc, #140]	@ (80086e8 <prvAddNewTaskToReadyList+0xc8>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008664:	429a      	cmp	r2, r3
 8008666:	d802      	bhi.n	800866e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008668:	4a1f      	ldr	r2, [pc, #124]	@ (80086e8 <prvAddNewTaskToReadyList+0xc8>)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6013      	str	r3, [r2, #0]
>>>>>>> remotes/origin/jayce_working
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< HEAD
 800853e:	4b20      	ldr	r3, [pc, #128]	@ (80085c0 <prvAddNewTaskToReadyList+0xd0>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3301      	adds	r3, #1
 8008544:	4a1e      	ldr	r2, [pc, #120]	@ (80085c0 <prvAddNewTaskToReadyList+0xd0>)
 8008546:	6013      	str	r3, [r2, #0]
=======
 800866e:	4b20      	ldr	r3, [pc, #128]	@ (80086f0 <prvAddNewTaskToReadyList+0xd0>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3301      	adds	r3, #1
 8008674:	4a1e      	ldr	r2, [pc, #120]	@ (80086f0 <prvAddNewTaskToReadyList+0xd0>)
 8008676:	6013      	str	r3, [r2, #0]
>>>>>>> remotes/origin/jayce_working

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
<<<<<<< HEAD
 8008548:	4b1d      	ldr	r3, [pc, #116]	@ (80085c0 <prvAddNewTaskToReadyList+0xd0>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8008678:	4b1d      	ldr	r3, [pc, #116]	@ (80086f0 <prvAddNewTaskToReadyList+0xd0>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> remotes/origin/jayce_working
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008554:	4b1b      	ldr	r3, [pc, #108]	@ (80085c4 <prvAddNewTaskToReadyList+0xd4>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	429a      	cmp	r2, r3
 800855a:	d903      	bls.n	8008564 <prvAddNewTaskToReadyList+0x74>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008560:	4a18      	ldr	r2, [pc, #96]	@ (80085c4 <prvAddNewTaskToReadyList+0xd4>)
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008568:	4613      	mov	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4a15      	ldr	r2, [pc, #84]	@ (80085c8 <prvAddNewTaskToReadyList+0xd8>)
 8008572:	441a      	add	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	3304      	adds	r3, #4
 8008578:	4619      	mov	r1, r3
 800857a:	4610      	mov	r0, r2
 800857c:	f7fe fff1 	bl	8007562 <vListInsertEnd>
=======
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008684:	4b1b      	ldr	r3, [pc, #108]	@ (80086f4 <prvAddNewTaskToReadyList+0xd4>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	d903      	bls.n	8008694 <prvAddNewTaskToReadyList+0x74>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008690:	4a18      	ldr	r2, [pc, #96]	@ (80086f4 <prvAddNewTaskToReadyList+0xd4>)
 8008692:	6013      	str	r3, [r2, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008698:	4613      	mov	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4a15      	ldr	r2, [pc, #84]	@ (80086f8 <prvAddNewTaskToReadyList+0xd8>)
 80086a2:	441a      	add	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	3304      	adds	r3, #4
 80086a8:	4619      	mov	r1, r3
 80086aa:	4610      	mov	r0, r2
 80086ac:	f7ff f8e9 	bl	8007882 <vListInsertEnd>
>>>>>>> remotes/origin/jayce_working

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8008580:	f001 fa5c 	bl	8009a3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008584:	4b0d      	ldr	r3, [pc, #52]	@ (80085bc <prvAddNewTaskToReadyList+0xcc>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00e      	beq.n	80085aa <prvAddNewTaskToReadyList+0xba>
=======
 80086b0:	f001 fa5c 	bl	8009b6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80086b4:	4b0d      	ldr	r3, [pc, #52]	@ (80086ec <prvAddNewTaskToReadyList+0xcc>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00e      	beq.n	80086da <prvAddNewTaskToReadyList+0xba>
>>>>>>> remotes/origin/jayce_working
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< HEAD
 800858c:	4b0a      	ldr	r3, [pc, #40]	@ (80085b8 <prvAddNewTaskToReadyList+0xc8>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008596:	429a      	cmp	r2, r3
 8008598:	d207      	bcs.n	80085aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800859a:	4b0c      	ldr	r3, [pc, #48]	@ (80085cc <prvAddNewTaskToReadyList+0xdc>)
 800859c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	f3bf 8f6f 	isb	sy
=======
 80086bc:	4b0a      	ldr	r3, [pc, #40]	@ (80086e8 <prvAddNewTaskToReadyList+0xc8>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d207      	bcs.n	80086da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80086ca:	4b0c      	ldr	r3, [pc, #48]	@ (80086fc <prvAddNewTaskToReadyList+0xdc>)
 80086cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	f3bf 8f6f 	isb	sy
>>>>>>> remotes/origin/jayce_working
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 80085aa:	bf00      	nop
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	20000f00 	.word	0x20000f00
 80085b8:	20000a2c 	.word	0x20000a2c
 80085bc:	20000f0c 	.word	0x20000f0c
 80085c0:	20000f1c 	.word	0x20000f1c
 80085c4:	20000f08 	.word	0x20000f08
 80085c8:	20000a30 	.word	0x20000a30
 80085cc:	e000ed04 	.word	0xe000ed04

080085d0 <vTaskDelay>:
=======
 80086da:	bf00      	nop
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	20000f58 	.word	0x20000f58
 80086e8:	20000a84 	.word	0x20000a84
 80086ec:	20000f64 	.word	0x20000f64
 80086f0:	20000f74 	.word	0x20000f74
 80086f4:	20000f60 	.word	0x20000f60
 80086f8:	20000a88 	.word	0x20000a88
 80086fc:	e000ed04 	.word	0xe000ed04

08008700 <vTaskDelay>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< HEAD
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80085d8:	2300      	movs	r3, #0
 80085da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d018      	beq.n	8008614 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80085e2:	4b14      	ldr	r3, [pc, #80]	@ (8008634 <vTaskDelay+0x64>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00b      	beq.n	8008602 <vTaskDelay+0x32>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	60bb      	str	r3, [r7, #8]
}
 80085fc:	bf00      	nop
 80085fe:	bf00      	nop
 8008600:	e7fd      	b.n	80085fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008602:	f000 f88b 	bl	800871c <vTaskSuspendAll>
=======
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008708:	2300      	movs	r3, #0
 800870a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d018      	beq.n	8008744 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008712:	4b14      	ldr	r3, [pc, #80]	@ (8008764 <vTaskDelay+0x64>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00b      	beq.n	8008732 <vTaskDelay+0x32>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	60bb      	str	r3, [r7, #8]
}
 800872c:	bf00      	nop
 800872e:	bf00      	nop
 8008730:	e7fd      	b.n	800872e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008732:	f000 f88b 	bl	800884c <vTaskSuspendAll>
>>>>>>> remotes/origin/jayce_working
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< HEAD
 8008606:	2100      	movs	r1, #0
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fd09 	bl	8009020 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800860e:	f000 f893 	bl	8008738 <xTaskResumeAll>
 8008612:	60f8      	str	r0, [r7, #12]
=======
 8008736:	2100      	movs	r1, #0
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fd09 	bl	8009150 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800873e:	f000 f893 	bl	8008868 <xTaskResumeAll>
 8008742:	60f8      	str	r0, [r7, #12]
>>>>>>> remotes/origin/jayce_working
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< HEAD
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d107      	bne.n	800862a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800861a:	4b07      	ldr	r3, [pc, #28]	@ (8008638 <vTaskDelay+0x68>)
 800861c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	f3bf 8f6f 	isb	sy
=======
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d107      	bne.n	800875a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800874a:	4b07      	ldr	r3, [pc, #28]	@ (8008768 <vTaskDelay+0x68>)
 800874c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	f3bf 8f6f 	isb	sy
>>>>>>> remotes/origin/jayce_working
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 800862a:	bf00      	nop
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20000f28 	.word	0x20000f28
 8008638:	e000ed04 	.word	0xe000ed04

0800863c <vTaskStartScheduler>:
=======
 800875a:	bf00      	nop
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20000f80 	.word	0x20000f80
 8008768:	e000ed04 	.word	0xe000ed04

0800876c <vTaskStartScheduler>:
>>>>>>> remotes/origin/jayce_working

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< HEAD
 800863c:	b580      	push	{r7, lr}
 800863e:	b08a      	sub	sp, #40	@ 0x28
 8008640:	af04      	add	r7, sp, #16
=======
 800876c:	b580      	push	{r7, lr}
 800876e:	b08a      	sub	sp, #40	@ 0x28
 8008770:	af04      	add	r7, sp, #16
>>>>>>> remotes/origin/jayce_working
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< HEAD
 8008642:	2300      	movs	r3, #0
 8008644:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008646:	2300      	movs	r3, #0
 8008648:	607b      	str	r3, [r7, #4]
=======
 8008772:	2300      	movs	r3, #0
 8008774:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008776:	2300      	movs	r3, #0
 8008778:	607b      	str	r3, [r7, #4]
>>>>>>> remotes/origin/jayce_working
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< HEAD
 800864a:	463a      	mov	r2, r7
 800864c:	1d39      	adds	r1, r7, #4
 800864e:	f107 0308 	add.w	r3, r7, #8
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe ff24 	bl	80074a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	9202      	str	r2, [sp, #8]
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	2300      	movs	r3, #0
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	2300      	movs	r3, #0
 8008668:	460a      	mov	r2, r1
 800866a:	4924      	ldr	r1, [pc, #144]	@ (80086fc <vTaskStartScheduler+0xc0>)
 800866c:	4824      	ldr	r0, [pc, #144]	@ (8008700 <vTaskStartScheduler+0xc4>)
 800866e:	f7ff fdf1 	bl	8008254 <xTaskCreateStatic>
 8008672:	4603      	mov	r3, r0
 8008674:	4a23      	ldr	r2, [pc, #140]	@ (8008704 <vTaskStartScheduler+0xc8>)
 8008676:	6013      	str	r3, [r2, #0]
=======
 800877a:	463a      	mov	r2, r7
 800877c:	1d39      	adds	r1, r7, #4
 800877e:	f107 0308 	add.w	r3, r7, #8
 8008782:	4618      	mov	r0, r3
 8008784:	f7ff f81c 	bl	80077c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	9202      	str	r2, [sp, #8]
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	2300      	movs	r3, #0
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	2300      	movs	r3, #0
 8008798:	460a      	mov	r2, r1
 800879a:	4924      	ldr	r1, [pc, #144]	@ (800882c <vTaskStartScheduler+0xc0>)
 800879c:	4824      	ldr	r0, [pc, #144]	@ (8008830 <vTaskStartScheduler+0xc4>)
 800879e:	f7ff fdf1 	bl	8008384 <xTaskCreateStatic>
 80087a2:	4603      	mov	r3, r0
 80087a4:	4a23      	ldr	r2, [pc, #140]	@ (8008834 <vTaskStartScheduler+0xc8>)
 80087a6:	6013      	str	r3, [r2, #0]
>>>>>>> remotes/origin/jayce_working
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< HEAD
 8008678:	4b22      	ldr	r3, [pc, #136]	@ (8008704 <vTaskStartScheduler+0xc8>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008680:	2301      	movs	r3, #1
 8008682:	617b      	str	r3, [r7, #20]
 8008684:	e001      	b.n	800868a <vTaskStartScheduler+0x4e>
=======
 80087a8:	4b22      	ldr	r3, [pc, #136]	@ (8008834 <vTaskStartScheduler+0xc8>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087b0:	2301      	movs	r3, #1
 80087b2:	617b      	str	r3, [r7, #20]
 80087b4:	e001      	b.n	80087ba <vTaskStartScheduler+0x4e>
>>>>>>> remotes/origin/jayce_working
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< HEAD
 8008686:	2300      	movs	r3, #0
 8008688:	617b      	str	r3, [r7, #20]
=======
 80087b6:	2300      	movs	r3, #0
 80087b8:	617b      	str	r3, [r7, #20]
>>>>>>> remotes/origin/jayce_working
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
<<<<<<< HEAD
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d102      	bne.n	8008696 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008690:	f000 fd1a 	bl	80090c8 <xTimerCreateTimerTask>
 8008694:	6178      	str	r0, [r7, #20]
=======
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d102      	bne.n	80087c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80087c0:	f000 fd1a 	bl	80091f8 <xTimerCreateTimerTask>
 80087c4:	6178      	str	r0, [r7, #20]
>>>>>>> remotes/origin/jayce_working
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< HEAD
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d11b      	bne.n	80086d4 <vTaskStartScheduler+0x98>
	__asm volatile
 800869c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	613b      	str	r3, [r7, #16]
}
 80086ae:	bf00      	nop
=======
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d11b      	bne.n	8008804 <vTaskStartScheduler+0x98>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	613b      	str	r3, [r7, #16]
}
 80087de:	bf00      	nop
>>>>>>> remotes/origin/jayce_working
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
<<<<<<< HEAD
 80086b0:	4b15      	ldr	r3, [pc, #84]	@ (8008708 <vTaskStartScheduler+0xcc>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3354      	adds	r3, #84	@ 0x54
 80086b6:	4a15      	ldr	r2, [pc, #84]	@ (800870c <vTaskStartScheduler+0xd0>)
 80086b8:	6013      	str	r3, [r2, #0]
=======
 80087e0:	4b15      	ldr	r3, [pc, #84]	@ (8008838 <vTaskStartScheduler+0xcc>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3354      	adds	r3, #84	@ 0x54
 80087e6:	4a15      	ldr	r2, [pc, #84]	@ (800883c <vTaskStartScheduler+0xd0>)
 80087e8:	6013      	str	r3, [r2, #0]
>>>>>>> remotes/origin/jayce_working
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 80086ba:	4b15      	ldr	r3, [pc, #84]	@ (8008710 <vTaskStartScheduler+0xd4>)
 80086bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80086c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086c2:	4b14      	ldr	r3, [pc, #80]	@ (8008714 <vTaskStartScheduler+0xd8>)
 80086c4:	2201      	movs	r2, #1
 80086c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086c8:	4b13      	ldr	r3, [pc, #76]	@ (8008718 <vTaskStartScheduler+0xdc>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	601a      	str	r2, [r3, #0]
=======
 80087ea:	4b15      	ldr	r3, [pc, #84]	@ (8008840 <vTaskStartScheduler+0xd4>)
 80087ec:	f04f 32ff 	mov.w	r2, #4294967295
 80087f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087f2:	4b14      	ldr	r3, [pc, #80]	@ (8008844 <vTaskStartScheduler+0xd8>)
 80087f4:	2201      	movs	r2, #1
 80087f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80087f8:	4b13      	ldr	r3, [pc, #76]	@ (8008848 <vTaskStartScheduler+0xdc>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< HEAD
 80086ce:	f001 f8df 	bl	8009890 <xPortStartScheduler>
=======
 80087fe:	f001 f8df 	bl	80099c0 <xPortStartScheduler>
>>>>>>> remotes/origin/jayce_working
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< HEAD
 80086d2:	e00f      	b.n	80086f4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086da:	d10b      	bne.n	80086f4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	60fb      	str	r3, [r7, #12]
}
 80086ee:	bf00      	nop
 80086f0:	bf00      	nop
 80086f2:	e7fd      	b.n	80086f0 <vTaskStartScheduler+0xb4>
}
 80086f4:	bf00      	nop
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	0800a228 	.word	0x0800a228
 8008700:	08008d4d 	.word	0x08008d4d
 8008704:	20000f24 	.word	0x20000f24
 8008708:	20000a2c 	.word	0x20000a2c
 800870c:	20000010 	.word	0x20000010
 8008710:	20000f20 	.word	0x20000f20
 8008714:	20000f0c 	.word	0x20000f0c
 8008718:	20000f04 	.word	0x20000f04

0800871c <vTaskSuspendAll>:
=======
 8008802:	e00f      	b.n	8008824 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880a:	d10b      	bne.n	8008824 <vTaskStartScheduler+0xb8>
	__asm volatile
 800880c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008810:	f383 8811 	msr	BASEPRI, r3
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	60fb      	str	r3, [r7, #12]
}
 800881e:	bf00      	nop
 8008820:	bf00      	nop
 8008822:	e7fd      	b.n	8008820 <vTaskStartScheduler+0xb4>
}
 8008824:	bf00      	nop
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	0800a35c 	.word	0x0800a35c
 8008830:	08008e7d 	.word	0x08008e7d
 8008834:	20000f7c 	.word	0x20000f7c
 8008838:	20000a84 	.word	0x20000a84
 800883c:	20000010 	.word	0x20000010
 8008840:	20000f78 	.word	0x20000f78
 8008844:	20000f64 	.word	0x20000f64
 8008848:	20000f5c 	.word	0x20000f5c

0800884c <vTaskSuspendAll>:
>>>>>>> remotes/origin/jayce_working
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< HEAD
 800871c:	b480      	push	{r7}
 800871e:	af00      	add	r7, sp, #0
=======
 800884c:	b480      	push	{r7}
 800884e:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
<<<<<<< HEAD
 8008720:	4b04      	ldr	r3, [pc, #16]	@ (8008734 <vTaskSuspendAll+0x18>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3301      	adds	r3, #1
 8008726:	4a03      	ldr	r2, [pc, #12]	@ (8008734 <vTaskSuspendAll+0x18>)
 8008728:	6013      	str	r3, [r2, #0]
=======
 8008850:	4b04      	ldr	r3, [pc, #16]	@ (8008864 <vTaskSuspendAll+0x18>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	3301      	adds	r3, #1
 8008856:	4a03      	ldr	r2, [pc, #12]	@ (8008864 <vTaskSuspendAll+0x18>)
 8008858:	6013      	str	r3, [r2, #0]
>>>>>>> remotes/origin/jayce_working

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
<<<<<<< HEAD
 800872a:	bf00      	nop
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	20000f28 	.word	0x20000f28

08008738 <xTaskResumeAll>:
=======
 800885a:	bf00      	nop
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	20000f80 	.word	0x20000f80

08008868 <xTaskResumeAll>:
>>>>>>> remotes/origin/jayce_working

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< HEAD
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800873e:	2300      	movs	r3, #0
 8008740:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008742:	2300      	movs	r3, #0
 8008744:	60bb      	str	r3, [r7, #8]
=======
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800886e:	2300      	movs	r3, #0
 8008870:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008872:	2300      	movs	r3, #0
 8008874:	60bb      	str	r3, [r7, #8]
>>>>>>> remotes/origin/jayce_working

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< HEAD
 8008746:	4b42      	ldr	r3, [pc, #264]	@ (8008850 <xTaskResumeAll+0x118>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10b      	bne.n	8008766 <xTaskResumeAll+0x2e>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	603b      	str	r3, [r7, #0]
}
 8008760:	bf00      	nop
 8008762:	bf00      	nop
 8008764:	e7fd      	b.n	8008762 <xTaskResumeAll+0x2a>
=======
 8008876:	4b42      	ldr	r3, [pc, #264]	@ (8008980 <xTaskResumeAll+0x118>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10b      	bne.n	8008896 <xTaskResumeAll+0x2e>
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	603b      	str	r3, [r7, #0]
}
 8008890:	bf00      	nop
 8008892:	bf00      	nop
 8008894:	e7fd      	b.n	8008892 <xTaskResumeAll+0x2a>
>>>>>>> remotes/origin/jayce_working
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 8008766:	f001 f937 	bl	80099d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800876a:	4b39      	ldr	r3, [pc, #228]	@ (8008850 <xTaskResumeAll+0x118>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	3b01      	subs	r3, #1
 8008770:	4a37      	ldr	r2, [pc, #220]	@ (8008850 <xTaskResumeAll+0x118>)
 8008772:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008774:	4b36      	ldr	r3, [pc, #216]	@ (8008850 <xTaskResumeAll+0x118>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d162      	bne.n	8008842 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800877c:	4b35      	ldr	r3, [pc, #212]	@ (8008854 <xTaskResumeAll+0x11c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d05e      	beq.n	8008842 <xTaskResumeAll+0x10a>
=======
 8008896:	f001 f937 	bl	8009b08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800889a:	4b39      	ldr	r3, [pc, #228]	@ (8008980 <xTaskResumeAll+0x118>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3b01      	subs	r3, #1
 80088a0:	4a37      	ldr	r2, [pc, #220]	@ (8008980 <xTaskResumeAll+0x118>)
 80088a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088a4:	4b36      	ldr	r3, [pc, #216]	@ (8008980 <xTaskResumeAll+0x118>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d162      	bne.n	8008972 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088ac:	4b35      	ldr	r3, [pc, #212]	@ (8008984 <xTaskResumeAll+0x11c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d05e      	beq.n	8008972 <xTaskResumeAll+0x10a>
>>>>>>> remotes/origin/jayce_working
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
 8008784:	e02f      	b.n	80087e6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008786:	4b34      	ldr	r3, [pc, #208]	@ (8008858 <xTaskResumeAll+0x120>)
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	3318      	adds	r3, #24
 8008792:	4618      	mov	r0, r3
 8008794:	f7fe ff42 	bl	800761c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3304      	adds	r3, #4
 800879c:	4618      	mov	r0, r3
 800879e:	f7fe ff3d 	bl	800761c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087a6:	4b2d      	ldr	r3, [pc, #180]	@ (800885c <xTaskResumeAll+0x124>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d903      	bls.n	80087b6 <xTaskResumeAll+0x7e>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b2:	4a2a      	ldr	r2, [pc, #168]	@ (800885c <xTaskResumeAll+0x124>)
 80087b4:	6013      	str	r3, [r2, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ba:	4613      	mov	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4a27      	ldr	r2, [pc, #156]	@ (8008860 <xTaskResumeAll+0x128>)
 80087c4:	441a      	add	r2, r3
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	3304      	adds	r3, #4
 80087ca:	4619      	mov	r1, r3
 80087cc:	4610      	mov	r0, r2
 80087ce:	f7fe fec8 	bl	8007562 <vListInsertEnd>
=======
 80088b4:	e02f      	b.n	8008916 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088b6:	4b34      	ldr	r3, [pc, #208]	@ (8008988 <xTaskResumeAll+0x120>)
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	3318      	adds	r3, #24
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7ff f83a 	bl	800793c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3304      	adds	r3, #4
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7ff f835 	bl	800793c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088d6:	4b2d      	ldr	r3, [pc, #180]	@ (800898c <xTaskResumeAll+0x124>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d903      	bls.n	80088e6 <xTaskResumeAll+0x7e>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e2:	4a2a      	ldr	r2, [pc, #168]	@ (800898c <xTaskResumeAll+0x124>)
 80088e4:	6013      	str	r3, [r2, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ea:	4613      	mov	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4a27      	ldr	r2, [pc, #156]	@ (8008990 <xTaskResumeAll+0x128>)
 80088f4:	441a      	add	r2, r3
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	3304      	adds	r3, #4
 80088fa:	4619      	mov	r1, r3
 80088fc:	4610      	mov	r0, r2
 80088fe:	f7fe ffc0 	bl	8007882 <vListInsertEnd>
>>>>>>> remotes/origin/jayce_working

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087d6:	4b23      	ldr	r3, [pc, #140]	@ (8008864 <xTaskResumeAll+0x12c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087dc:	429a      	cmp	r2, r3
 80087de:	d302      	bcc.n	80087e6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80087e0:	4b21      	ldr	r3, [pc, #132]	@ (8008868 <xTaskResumeAll+0x130>)
 80087e2:	2201      	movs	r2, #1
 80087e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087e6:	4b1c      	ldr	r3, [pc, #112]	@ (8008858 <xTaskResumeAll+0x120>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1cb      	bne.n	8008786 <xTaskResumeAll+0x4e>
=======
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008906:	4b23      	ldr	r3, [pc, #140]	@ (8008994 <xTaskResumeAll+0x12c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890c:	429a      	cmp	r2, r3
 800890e:	d302      	bcc.n	8008916 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008910:	4b21      	ldr	r3, [pc, #132]	@ (8008998 <xTaskResumeAll+0x130>)
 8008912:	2201      	movs	r2, #1
 8008914:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008916:	4b1c      	ldr	r3, [pc, #112]	@ (8008988 <xTaskResumeAll+0x120>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1cb      	bne.n	80088b6 <xTaskResumeAll+0x4e>
>>>>>>> remotes/origin/jayce_working
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< HEAD
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <xTaskResumeAll+0xc0>
=======
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <xTaskResumeAll+0xc0>
>>>>>>> remotes/origin/jayce_working
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< HEAD
 80087f4:	f000 fb66 	bl	8008ec4 <prvResetNextTaskUnblockTime>
=======
 8008924:	f000 fb66 	bl	8008ff4 <prvResetNextTaskUnblockTime>
>>>>>>> remotes/origin/jayce_working
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
<<<<<<< HEAD
 80087f8:	4b1c      	ldr	r3, [pc, #112]	@ (800886c <xTaskResumeAll+0x134>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d010      	beq.n	8008826 <xTaskResumeAll+0xee>
=======
 8008928:	4b1c      	ldr	r3, [pc, #112]	@ (800899c <xTaskResumeAll+0x134>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d010      	beq.n	8008956 <xTaskResumeAll+0xee>
>>>>>>> remotes/origin/jayce_working
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 8008804:	f000 f846 	bl	8008894 <xTaskIncrementTick>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d002      	beq.n	8008814 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800880e:	4b16      	ldr	r3, [pc, #88]	@ (8008868 <xTaskResumeAll+0x130>)
 8008810:	2201      	movs	r2, #1
 8008812:	601a      	str	r2, [r3, #0]
=======
 8008934:	f000 f846 	bl	80089c4 <xTaskIncrementTick>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d002      	beq.n	8008944 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800893e:	4b16      	ldr	r3, [pc, #88]	@ (8008998 <xTaskResumeAll+0x130>)
 8008940:	2201      	movs	r2, #1
 8008942:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
<<<<<<< HEAD
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	3b01      	subs	r3, #1
 8008818:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1f1      	bne.n	8008804 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008820:	4b12      	ldr	r3, [pc, #72]	@ (800886c <xTaskResumeAll+0x134>)
 8008822:	2200      	movs	r2, #0
 8008824:	601a      	str	r2, [r3, #0]
=======
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	3b01      	subs	r3, #1
 8008948:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1f1      	bne.n	8008934 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008950:	4b12      	ldr	r3, [pc, #72]	@ (800899c <xTaskResumeAll+0x134>)
 8008952:	2200      	movs	r2, #0
 8008954:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 8008826:	4b10      	ldr	r3, [pc, #64]	@ (8008868 <xTaskResumeAll+0x130>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d009      	beq.n	8008842 <xTaskResumeAll+0x10a>
=======
 8008956:	4b10      	ldr	r3, [pc, #64]	@ (8008998 <xTaskResumeAll+0x130>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d009      	beq.n	8008972 <xTaskResumeAll+0x10a>
>>>>>>> remotes/origin/jayce_working
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< HEAD
 800882e:	2301      	movs	r3, #1
 8008830:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008832:	4b0f      	ldr	r3, [pc, #60]	@ (8008870 <xTaskResumeAll+0x138>)
 8008834:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	f3bf 8f6f 	isb	sy
=======
 800895e:	2301      	movs	r3, #1
 8008960:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008962:	4b0f      	ldr	r3, [pc, #60]	@ (80089a0 <xTaskResumeAll+0x138>)
 8008964:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	f3bf 8f6f 	isb	sy
>>>>>>> remotes/origin/jayce_working
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8008842:	f001 f8fb 	bl	8009a3c <vPortExitCritical>

	return xAlreadyYielded;
 8008846:	68bb      	ldr	r3, [r7, #8]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	20000f28 	.word	0x20000f28
 8008854:	20000f00 	.word	0x20000f00
 8008858:	20000ec0 	.word	0x20000ec0
 800885c:	20000f08 	.word	0x20000f08
 8008860:	20000a30 	.word	0x20000a30
 8008864:	20000a2c 	.word	0x20000a2c
 8008868:	20000f14 	.word	0x20000f14
 800886c:	20000f10 	.word	0x20000f10
 8008870:	e000ed04 	.word	0xe000ed04

08008874 <xTaskGetTickCount>:
=======
 8008972:	f001 f8fb 	bl	8009b6c <vPortExitCritical>

	return xAlreadyYielded;
 8008976:	68bb      	ldr	r3, [r7, #8]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	20000f80 	.word	0x20000f80
 8008984:	20000f58 	.word	0x20000f58
 8008988:	20000f18 	.word	0x20000f18
 800898c:	20000f60 	.word	0x20000f60
 8008990:	20000a88 	.word	0x20000a88
 8008994:	20000a84 	.word	0x20000a84
 8008998:	20000f6c 	.word	0x20000f6c
 800899c:	20000f68 	.word	0x20000f68
 80089a0:	e000ed04 	.word	0xe000ed04

080089a4 <xTaskGetTickCount>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
<<<<<<< HEAD
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
=======
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
<<<<<<< HEAD
 800887a:	4b05      	ldr	r3, [pc, #20]	@ (8008890 <xTaskGetTickCount+0x1c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	607b      	str	r3, [r7, #4]
=======
 80089aa:	4b05      	ldr	r3, [pc, #20]	@ (80089c0 <xTaskGetTickCount+0x1c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	607b      	str	r3, [r7, #4]
>>>>>>> remotes/origin/jayce_working
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
<<<<<<< HEAD
 8008880:	687b      	ldr	r3, [r7, #4]
}
 8008882:	4618      	mov	r0, r3
 8008884:	370c      	adds	r7, #12
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	20000f04 	.word	0x20000f04

08008894 <xTaskIncrementTick>:
=======
 80089b0:	687b      	ldr	r3, [r7, #4]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	370c      	adds	r7, #12
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	20000f5c 	.word	0x20000f5c

080089c4 <xTaskIncrementTick>:
>>>>>>> remotes/origin/jayce_working

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< HEAD
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800889a:	2300      	movs	r3, #0
 800889c:	617b      	str	r3, [r7, #20]
=======
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089ca:	2300      	movs	r3, #0
 80089cc:	617b      	str	r3, [r7, #20]
>>>>>>> remotes/origin/jayce_working

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 800889e:	4b4f      	ldr	r3, [pc, #316]	@ (80089dc <xTaskIncrementTick+0x148>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f040 8090 	bne.w	80089c8 <xTaskIncrementTick+0x134>
=======
 80089ce:	4b4f      	ldr	r3, [pc, #316]	@ (8008b0c <xTaskIncrementTick+0x148>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f040 8090 	bne.w	8008af8 <xTaskIncrementTick+0x134>
>>>>>>> remotes/origin/jayce_working
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< HEAD
 80088a8:	4b4d      	ldr	r3, [pc, #308]	@ (80089e0 <xTaskIncrementTick+0x14c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3301      	adds	r3, #1
 80088ae:	613b      	str	r3, [r7, #16]
=======
 80089d8:	4b4d      	ldr	r3, [pc, #308]	@ (8008b10 <xTaskIncrementTick+0x14c>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	3301      	adds	r3, #1
 80089de:	613b      	str	r3, [r7, #16]
>>>>>>> remotes/origin/jayce_working

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< HEAD
 80088b0:	4a4b      	ldr	r2, [pc, #300]	@ (80089e0 <xTaskIncrementTick+0x14c>)
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d121      	bne.n	8008900 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80088bc:	4b49      	ldr	r3, [pc, #292]	@ (80089e4 <xTaskIncrementTick+0x150>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00b      	beq.n	80088de <xTaskIncrementTick+0x4a>
	__asm volatile
 80088c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	603b      	str	r3, [r7, #0]
}
 80088d8:	bf00      	nop
 80088da:	bf00      	nop
 80088dc:	e7fd      	b.n	80088da <xTaskIncrementTick+0x46>
 80088de:	4b41      	ldr	r3, [pc, #260]	@ (80089e4 <xTaskIncrementTick+0x150>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	4b40      	ldr	r3, [pc, #256]	@ (80089e8 <xTaskIncrementTick+0x154>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a3e      	ldr	r2, [pc, #248]	@ (80089e4 <xTaskIncrementTick+0x150>)
 80088ea:	6013      	str	r3, [r2, #0]
 80088ec:	4a3e      	ldr	r2, [pc, #248]	@ (80089e8 <xTaskIncrementTick+0x154>)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6013      	str	r3, [r2, #0]
 80088f2:	4b3e      	ldr	r3, [pc, #248]	@ (80089ec <xTaskIncrementTick+0x158>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	3301      	adds	r3, #1
 80088f8:	4a3c      	ldr	r2, [pc, #240]	@ (80089ec <xTaskIncrementTick+0x158>)
 80088fa:	6013      	str	r3, [r2, #0]
 80088fc:	f000 fae2 	bl	8008ec4 <prvResetNextTaskUnblockTime>
=======
 80089e0:	4a4b      	ldr	r2, [pc, #300]	@ (8008b10 <xTaskIncrementTick+0x14c>)
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d121      	bne.n	8008a30 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80089ec:	4b49      	ldr	r3, [pc, #292]	@ (8008b14 <xTaskIncrementTick+0x150>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00b      	beq.n	8008a0e <xTaskIncrementTick+0x4a>
	__asm volatile
 80089f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	603b      	str	r3, [r7, #0]
}
 8008a08:	bf00      	nop
 8008a0a:	bf00      	nop
 8008a0c:	e7fd      	b.n	8008a0a <xTaskIncrementTick+0x46>
 8008a0e:	4b41      	ldr	r3, [pc, #260]	@ (8008b14 <xTaskIncrementTick+0x150>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	60fb      	str	r3, [r7, #12]
 8008a14:	4b40      	ldr	r3, [pc, #256]	@ (8008b18 <xTaskIncrementTick+0x154>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a3e      	ldr	r2, [pc, #248]	@ (8008b14 <xTaskIncrementTick+0x150>)
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	4a3e      	ldr	r2, [pc, #248]	@ (8008b18 <xTaskIncrementTick+0x154>)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6013      	str	r3, [r2, #0]
 8008a22:	4b3e      	ldr	r3, [pc, #248]	@ (8008b1c <xTaskIncrementTick+0x158>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3301      	adds	r3, #1
 8008a28:	4a3c      	ldr	r2, [pc, #240]	@ (8008b1c <xTaskIncrementTick+0x158>)
 8008a2a:	6013      	str	r3, [r2, #0]
 8008a2c:	f000 fae2 	bl	8008ff4 <prvResetNextTaskUnblockTime>
>>>>>>> remotes/origin/jayce_working

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< HEAD
 8008900:	4b3b      	ldr	r3, [pc, #236]	@ (80089f0 <xTaskIncrementTick+0x15c>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	429a      	cmp	r2, r3
 8008908:	d349      	bcc.n	800899e <xTaskIncrementTick+0x10a>
=======
 8008a30:	4b3b      	ldr	r3, [pc, #236]	@ (8008b20 <xTaskIncrementTick+0x15c>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d349      	bcc.n	8008ace <xTaskIncrementTick+0x10a>
>>>>>>> remotes/origin/jayce_working
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 800890a:	4b36      	ldr	r3, [pc, #216]	@ (80089e4 <xTaskIncrementTick+0x150>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d104      	bne.n	800891e <xTaskIncrementTick+0x8a>
=======
 8008a3a:	4b36      	ldr	r3, [pc, #216]	@ (8008b14 <xTaskIncrementTick+0x150>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d104      	bne.n	8008a4e <xTaskIncrementTick+0x8a>
>>>>>>> remotes/origin/jayce_working
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8008914:	4b36      	ldr	r3, [pc, #216]	@ (80089f0 <xTaskIncrementTick+0x15c>)
 8008916:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800891a:	601a      	str	r2, [r3, #0]
					break;
 800891c:	e03f      	b.n	800899e <xTaskIncrementTick+0x10a>
=======
 8008a44:	4b36      	ldr	r3, [pc, #216]	@ (8008b20 <xTaskIncrementTick+0x15c>)
 8008a46:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4a:	601a      	str	r2, [r3, #0]
					break;
 8008a4c:	e03f      	b.n	8008ace <xTaskIncrementTick+0x10a>
>>>>>>> remotes/origin/jayce_working
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 800891e:	4b31      	ldr	r3, [pc, #196]	@ (80089e4 <xTaskIncrementTick+0x150>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	429a      	cmp	r2, r3
 8008934:	d203      	bcs.n	800893e <xTaskIncrementTick+0xaa>
=======
 8008a4e:	4b31      	ldr	r3, [pc, #196]	@ (8008b14 <xTaskIncrementTick+0x150>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d203      	bcs.n	8008a6e <xTaskIncrementTick+0xaa>
>>>>>>> remotes/origin/jayce_working
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< HEAD
 8008936:	4a2e      	ldr	r2, [pc, #184]	@ (80089f0 <xTaskIncrementTick+0x15c>)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800893c:	e02f      	b.n	800899e <xTaskIncrementTick+0x10a>
=======
 8008a66:	4a2e      	ldr	r2, [pc, #184]	@ (8008b20 <xTaskIncrementTick+0x15c>)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a6c:	e02f      	b.n	8008ace <xTaskIncrementTick+0x10a>
>>>>>>> remotes/origin/jayce_working
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	3304      	adds	r3, #4
 8008942:	4618      	mov	r0, r3
 8008944:	f7fe fe6a 	bl	800761c <uxListRemove>
=======
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	3304      	adds	r3, #4
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7fe ff62 	bl	800793c <uxListRemove>
>>>>>>> remotes/origin/jayce_working

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< HEAD
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800894c:	2b00      	cmp	r3, #0
 800894e:	d004      	beq.n	800895a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	3318      	adds	r3, #24
 8008954:	4618      	mov	r0, r3
 8008956:	f7fe fe61 	bl	800761c <uxListRemove>
=======
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d004      	beq.n	8008a8a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	3318      	adds	r3, #24
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fe ff59 	bl	800793c <uxListRemove>
>>>>>>> remotes/origin/jayce_working
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800895e:	4b25      	ldr	r3, [pc, #148]	@ (80089f4 <xTaskIncrementTick+0x160>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	d903      	bls.n	800896e <xTaskIncrementTick+0xda>
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896a:	4a22      	ldr	r2, [pc, #136]	@ (80089f4 <xTaskIncrementTick+0x160>)
 800896c:	6013      	str	r3, [r2, #0]
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008972:	4613      	mov	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4a1f      	ldr	r2, [pc, #124]	@ (80089f8 <xTaskIncrementTick+0x164>)
 800897c:	441a      	add	r2, r3
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	3304      	adds	r3, #4
 8008982:	4619      	mov	r1, r3
 8008984:	4610      	mov	r0, r2
 8008986:	f7fe fdec 	bl	8007562 <vListInsertEnd>
=======
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a8e:	4b25      	ldr	r3, [pc, #148]	@ (8008b24 <xTaskIncrementTick+0x160>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d903      	bls.n	8008a9e <xTaskIncrementTick+0xda>
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9a:	4a22      	ldr	r2, [pc, #136]	@ (8008b24 <xTaskIncrementTick+0x160>)
 8008a9c:	6013      	str	r3, [r2, #0]
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8008b28 <xTaskIncrementTick+0x164>)
 8008aac:	441a      	add	r2, r3
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	f7fe fee4 	bl	8007882 <vListInsertEnd>
>>>>>>> remotes/origin/jayce_working
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800898e:	4b1b      	ldr	r3, [pc, #108]	@ (80089fc <xTaskIncrementTick+0x168>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008994:	429a      	cmp	r2, r3
 8008996:	d3b8      	bcc.n	800890a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008998:	2301      	movs	r3, #1
 800899a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800899c:	e7b5      	b.n	800890a <xTaskIncrementTick+0x76>
=======
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008abe:	4b1b      	ldr	r3, [pc, #108]	@ (8008b2c <xTaskIncrementTick+0x168>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d3b8      	bcc.n	8008a3a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008acc:	e7b5      	b.n	8008a3a <xTaskIncrementTick+0x76>
>>>>>>> remotes/origin/jayce_working
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 800899e:	4b17      	ldr	r3, [pc, #92]	@ (80089fc <xTaskIncrementTick+0x168>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089a4:	4914      	ldr	r1, [pc, #80]	@ (80089f8 <xTaskIncrementTick+0x164>)
 80089a6:	4613      	mov	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	440b      	add	r3, r1
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d901      	bls.n	80089ba <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80089b6:	2301      	movs	r3, #1
 80089b8:	617b      	str	r3, [r7, #20]
=======
 8008ace:	4b17      	ldr	r3, [pc, #92]	@ (8008b2c <xTaskIncrementTick+0x168>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ad4:	4914      	ldr	r1, [pc, #80]	@ (8008b28 <xTaskIncrementTick+0x164>)
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	440b      	add	r3, r1
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d901      	bls.n	8008aea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	617b      	str	r3, [r7, #20]
>>>>>>> remotes/origin/jayce_working
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 80089ba:	4b11      	ldr	r3, [pc, #68]	@ (8008a00 <xTaskIncrementTick+0x16c>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d007      	beq.n	80089d2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80089c2:	2301      	movs	r3, #1
 80089c4:	617b      	str	r3, [r7, #20]
 80089c6:	e004      	b.n	80089d2 <xTaskIncrementTick+0x13e>
=======
 8008aea:	4b11      	ldr	r3, [pc, #68]	@ (8008b30 <xTaskIncrementTick+0x16c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d007      	beq.n	8008b02 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008af2:	2301      	movs	r3, #1
 8008af4:	617b      	str	r3, [r7, #20]
 8008af6:	e004      	b.n	8008b02 <xTaskIncrementTick+0x13e>
>>>>>>> remotes/origin/jayce_working
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
<<<<<<< HEAD
 80089c8:	4b0e      	ldr	r3, [pc, #56]	@ (8008a04 <xTaskIncrementTick+0x170>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3301      	adds	r3, #1
 80089ce:	4a0d      	ldr	r2, [pc, #52]	@ (8008a04 <xTaskIncrementTick+0x170>)
 80089d0:	6013      	str	r3, [r2, #0]
=======
 8008af8:	4b0e      	ldr	r3, [pc, #56]	@ (8008b34 <xTaskIncrementTick+0x170>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3301      	adds	r3, #1
 8008afe:	4a0d      	ldr	r2, [pc, #52]	@ (8008b34 <xTaskIncrementTick+0x170>)
 8008b00:	6013      	str	r3, [r2, #0]
>>>>>>> remotes/origin/jayce_working
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
<<<<<<< HEAD
 80089d2:	697b      	ldr	r3, [r7, #20]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3718      	adds	r7, #24
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	20000f28 	.word	0x20000f28
 80089e0:	20000f04 	.word	0x20000f04
 80089e4:	20000eb8 	.word	0x20000eb8
 80089e8:	20000ebc 	.word	0x20000ebc
 80089ec:	20000f18 	.word	0x20000f18
 80089f0:	20000f20 	.word	0x20000f20
 80089f4:	20000f08 	.word	0x20000f08
 80089f8:	20000a30 	.word	0x20000a30
 80089fc:	20000a2c 	.word	0x20000a2c
 8008a00:	20000f14 	.word	0x20000f14
 8008a04:	20000f10 	.word	0x20000f10

08008a08 <vTaskSwitchContext>:
=======
 8008b02:	697b      	ldr	r3, [r7, #20]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3718      	adds	r7, #24
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	20000f80 	.word	0x20000f80
 8008b10:	20000f5c 	.word	0x20000f5c
 8008b14:	20000f10 	.word	0x20000f10
 8008b18:	20000f14 	.word	0x20000f14
 8008b1c:	20000f70 	.word	0x20000f70
 8008b20:	20000f78 	.word	0x20000f78
 8008b24:	20000f60 	.word	0x20000f60
 8008b28:	20000a88 	.word	0x20000a88
 8008b2c:	20000a84 	.word	0x20000a84
 8008b30:	20000f6c 	.word	0x20000f6c
 8008b34:	20000f68 	.word	0x20000f68

08008b38 <vTaskSwitchContext>:
>>>>>>> remotes/origin/jayce_working

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< HEAD
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8008abc <vTaskSwitchContext+0xb4>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d003      	beq.n	8008a1e <vTaskSwitchContext+0x16>
=======
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8008bec <vTaskSwitchContext+0xb4>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d003      	beq.n	8008b4e <vTaskSwitchContext+0x16>
>>>>>>> remotes/origin/jayce_working
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 8008a16:	4b2a      	ldr	r3, [pc, #168]	@ (8008ac0 <vTaskSwitchContext+0xb8>)
 8008a18:	2201      	movs	r2, #1
 8008a1a:	601a      	str	r2, [r3, #0]
=======
 8008b46:	4b2a      	ldr	r3, [pc, #168]	@ (8008bf0 <vTaskSwitchContext+0xb8>)
 8008b48:	2201      	movs	r2, #1
 8008b4a:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< HEAD
 8008a1c:	e047      	b.n	8008aae <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008a1e:	4b28      	ldr	r3, [pc, #160]	@ (8008ac0 <vTaskSwitchContext+0xb8>)
 8008a20:	2200      	movs	r2, #0
 8008a22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a24:	4b27      	ldr	r3, [pc, #156]	@ (8008ac4 <vTaskSwitchContext+0xbc>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	60fb      	str	r3, [r7, #12]
 8008a2a:	e011      	b.n	8008a50 <vTaskSwitchContext+0x48>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10b      	bne.n	8008a4a <vTaskSwitchContext+0x42>
	__asm volatile
 8008a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	607b      	str	r3, [r7, #4]
}
 8008a44:	bf00      	nop
 8008a46:	bf00      	nop
 8008a48:	e7fd      	b.n	8008a46 <vTaskSwitchContext+0x3e>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	491d      	ldr	r1, [pc, #116]	@ (8008ac8 <vTaskSwitchContext+0xc0>)
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	4613      	mov	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4413      	add	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	440b      	add	r3, r1
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d0e3      	beq.n	8008a2c <vTaskSwitchContext+0x24>
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4a16      	ldr	r2, [pc, #88]	@ (8008ac8 <vTaskSwitchContext+0xc0>)
 8008a70:	4413      	add	r3, r2
 8008a72:	60bb      	str	r3, [r7, #8]
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	685a      	ldr	r2, [r3, #4]
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	605a      	str	r2, [r3, #4]
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	3308      	adds	r3, #8
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d104      	bne.n	8008a94 <vTaskSwitchContext+0x8c>
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	685a      	ldr	r2, [r3, #4]
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	605a      	str	r2, [r3, #4]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8008acc <vTaskSwitchContext+0xc4>)
 8008a9c:	6013      	str	r3, [r2, #0]
 8008a9e:	4a09      	ldr	r2, [pc, #36]	@ (8008ac4 <vTaskSwitchContext+0xbc>)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008aa4:	4b09      	ldr	r3, [pc, #36]	@ (8008acc <vTaskSwitchContext+0xc4>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3354      	adds	r3, #84	@ 0x54
 8008aaa:	4a09      	ldr	r2, [pc, #36]	@ (8008ad0 <vTaskSwitchContext+0xc8>)
 8008aac:	6013      	str	r3, [r2, #0]
}
 8008aae:	bf00      	nop
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	20000f28 	.word	0x20000f28
 8008ac0:	20000f14 	.word	0x20000f14
 8008ac4:	20000f08 	.word	0x20000f08
 8008ac8:	20000a30 	.word	0x20000a30
 8008acc:	20000a2c 	.word	0x20000a2c
 8008ad0:	20000010 	.word	0x20000010

08008ad4 <vTaskPlaceOnEventList>:
=======
 8008b4c:	e047      	b.n	8008bde <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008b4e:	4b28      	ldr	r3, [pc, #160]	@ (8008bf0 <vTaskSwitchContext+0xb8>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b54:	4b27      	ldr	r3, [pc, #156]	@ (8008bf4 <vTaskSwitchContext+0xbc>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	60fb      	str	r3, [r7, #12]
 8008b5a:	e011      	b.n	8008b80 <vTaskSwitchContext+0x48>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10b      	bne.n	8008b7a <vTaskSwitchContext+0x42>
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	607b      	str	r3, [r7, #4]
}
 8008b74:	bf00      	nop
 8008b76:	bf00      	nop
 8008b78:	e7fd      	b.n	8008b76 <vTaskSwitchContext+0x3e>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	60fb      	str	r3, [r7, #12]
 8008b80:	491d      	ldr	r1, [pc, #116]	@ (8008bf8 <vTaskSwitchContext+0xc0>)
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	4613      	mov	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	440b      	add	r3, r1
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d0e3      	beq.n	8008b5c <vTaskSwitchContext+0x24>
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	4613      	mov	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4a16      	ldr	r2, [pc, #88]	@ (8008bf8 <vTaskSwitchContext+0xc0>)
 8008ba0:	4413      	add	r3, r2
 8008ba2:	60bb      	str	r3, [r7, #8]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	685a      	ldr	r2, [r3, #4]
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	605a      	str	r2, [r3, #4]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	685a      	ldr	r2, [r3, #4]
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	3308      	adds	r3, #8
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d104      	bne.n	8008bc4 <vTaskSwitchContext+0x8c>
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	685a      	ldr	r2, [r3, #4]
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	605a      	str	r2, [r3, #4]
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	4a0c      	ldr	r2, [pc, #48]	@ (8008bfc <vTaskSwitchContext+0xc4>)
 8008bcc:	6013      	str	r3, [r2, #0]
 8008bce:	4a09      	ldr	r2, [pc, #36]	@ (8008bf4 <vTaskSwitchContext+0xbc>)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008bd4:	4b09      	ldr	r3, [pc, #36]	@ (8008bfc <vTaskSwitchContext+0xc4>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3354      	adds	r3, #84	@ 0x54
 8008bda:	4a09      	ldr	r2, [pc, #36]	@ (8008c00 <vTaskSwitchContext+0xc8>)
 8008bdc:	6013      	str	r3, [r2, #0]
}
 8008bde:	bf00      	nop
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	20000f80 	.word	0x20000f80
 8008bf0:	20000f6c 	.word	0x20000f6c
 8008bf4:	20000f60 	.word	0x20000f60
 8008bf8:	20000a88 	.word	0x20000a88
 8008bfc:	20000a84 	.word	0x20000a84
 8008c00:	20000010 	.word	0x20000010

08008c04 <vTaskPlaceOnEventList>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10b      	bne.n	8008afc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	60fb      	str	r3, [r7, #12]
}
 8008af6:	bf00      	nop
 8008af8:	bf00      	nop
 8008afa:	e7fd      	b.n	8008af8 <vTaskPlaceOnEventList+0x24>
=======
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10b      	bne.n	8008c2c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	60fb      	str	r3, [r7, #12]
}
 8008c26:	bf00      	nop
 8008c28:	bf00      	nop
 8008c2a:	e7fd      	b.n	8008c28 <vTaskPlaceOnEventList+0x24>
>>>>>>> remotes/origin/jayce_working

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 8008afc:	4b07      	ldr	r3, [pc, #28]	@ (8008b1c <vTaskPlaceOnEventList+0x48>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3318      	adds	r3, #24
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7fe fd50 	bl	80075aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	6838      	ldr	r0, [r7, #0]
 8008b0e:	f000 fa87 	bl	8009020 <prvAddCurrentTaskToDelayedList>
}
 8008b12:	bf00      	nop
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20000a2c 	.word	0x20000a2c

08008b20 <vTaskPlaceOnEventListRestricted>:
=======
 8008c2c:	4b07      	ldr	r3, [pc, #28]	@ (8008c4c <vTaskPlaceOnEventList+0x48>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	3318      	adds	r3, #24
 8008c32:	4619      	mov	r1, r3
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7fe fe48 	bl	80078ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c3a:	2101      	movs	r1, #1
 8008c3c:	6838      	ldr	r0, [r7, #0]
 8008c3e:	f000 fa87 	bl	8009150 <prvAddCurrentTaskToDelayedList>
}
 8008c42:	bf00      	nop
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20000a84 	.word	0x20000a84

08008c50 <vTaskPlaceOnEventListRestricted>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10b      	bne.n	8008b4a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	617b      	str	r3, [r7, #20]
}
 8008b44:	bf00      	nop
 8008b46:	bf00      	nop
 8008b48:	e7fd      	b.n	8008b46 <vTaskPlaceOnEventListRestricted+0x26>
=======
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10b      	bne.n	8008c7a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	617b      	str	r3, [r7, #20]
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop
 8008c78:	e7fd      	b.n	8008c76 <vTaskPlaceOnEventListRestricted+0x26>
>>>>>>> remotes/origin/jayce_working

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 8008b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8008b74 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	3318      	adds	r3, #24
 8008b50:	4619      	mov	r1, r3
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f7fe fd05 	bl	8007562 <vListInsertEnd>
=======
 8008c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8008ca4 <vTaskPlaceOnEventListRestricted+0x54>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3318      	adds	r3, #24
 8008c80:	4619      	mov	r1, r3
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f7fe fdfd 	bl	8007882 <vListInsertEnd>
>>>>>>> remotes/origin/jayce_working

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
<<<<<<< HEAD
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008b5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b62:	60bb      	str	r3, [r7, #8]
=======
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d002      	beq.n	8008c94 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c92:	60bb      	str	r3, [r7, #8]
>>>>>>> remotes/origin/jayce_working
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
<<<<<<< HEAD
 8008b64:	6879      	ldr	r1, [r7, #4]
 8008b66:	68b8      	ldr	r0, [r7, #8]
 8008b68:	f000 fa5a 	bl	8009020 <prvAddCurrentTaskToDelayedList>
	}
 8008b6c:	bf00      	nop
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	20000a2c 	.word	0x20000a2c

08008b78 <xTaskRemoveFromEventList>:
=======
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	68b8      	ldr	r0, [r7, #8]
 8008c98:	f000 fa5a 	bl	8009150 <prvAddCurrentTaskToDelayedList>
	}
 8008c9c:	bf00      	nop
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	20000a84 	.word	0x20000a84

08008ca8 <xTaskRemoveFromEventList>:
>>>>>>> remotes/origin/jayce_working

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< HEAD
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
=======
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d10b      	bne.n	8008ba6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	60fb      	str	r3, [r7, #12]
}
 8008ba0:	bf00      	nop
 8008ba2:	bf00      	nop
 8008ba4:	e7fd      	b.n	8008ba2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	3318      	adds	r3, #24
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fe fd36 	bl	800761c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8008c28 <xTaskRemoveFromEventList+0xb0>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d11d      	bne.n	8008bf4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	3304      	adds	r3, #4
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fe fd2d 	bl	800761c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bc6:	4b19      	ldr	r3, [pc, #100]	@ (8008c2c <xTaskRemoveFromEventList+0xb4>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d903      	bls.n	8008bd6 <xTaskRemoveFromEventList+0x5e>
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd2:	4a16      	ldr	r2, [pc, #88]	@ (8008c2c <xTaskRemoveFromEventList+0xb4>)
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bda:	4613      	mov	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4413      	add	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4a13      	ldr	r2, [pc, #76]	@ (8008c30 <xTaskRemoveFromEventList+0xb8>)
 8008be4:	441a      	add	r2, r3
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	3304      	adds	r3, #4
 8008bea:	4619      	mov	r1, r3
 8008bec:	4610      	mov	r0, r2
 8008bee:	f7fe fcb8 	bl	8007562 <vListInsertEnd>
 8008bf2:	e005      	b.n	8008c00 <xTaskRemoveFromEventList+0x88>
=======
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10b      	bne.n	8008cd6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	60fb      	str	r3, [r7, #12]
}
 8008cd0:	bf00      	nop
 8008cd2:	bf00      	nop
 8008cd4:	e7fd      	b.n	8008cd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	3318      	adds	r3, #24
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7fe fe2e 	bl	800793c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8008d58 <xTaskRemoveFromEventList+0xb0>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d11d      	bne.n	8008d24 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	3304      	adds	r3, #4
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7fe fe25 	bl	800793c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cf6:	4b19      	ldr	r3, [pc, #100]	@ (8008d5c <xTaskRemoveFromEventList+0xb4>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d903      	bls.n	8008d06 <xTaskRemoveFromEventList+0x5e>
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d02:	4a16      	ldr	r2, [pc, #88]	@ (8008d5c <xTaskRemoveFromEventList+0xb4>)
 8008d04:	6013      	str	r3, [r2, #0]
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4a13      	ldr	r2, [pc, #76]	@ (8008d60 <xTaskRemoveFromEventList+0xb8>)
 8008d14:	441a      	add	r2, r3
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	3304      	adds	r3, #4
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	f7fe fdb0 	bl	8007882 <vListInsertEnd>
 8008d22:	e005      	b.n	8008d30 <xTaskRemoveFromEventList+0x88>
>>>>>>> remotes/origin/jayce_working
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< HEAD
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	3318      	adds	r3, #24
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	480e      	ldr	r0, [pc, #56]	@ (8008c34 <xTaskRemoveFromEventList+0xbc>)
 8008bfc:	f7fe fcb1 	bl	8007562 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c04:	4b0c      	ldr	r3, [pc, #48]	@ (8008c38 <xTaskRemoveFromEventList+0xc0>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d905      	bls.n	8008c1a <xTaskRemoveFromEventList+0xa2>
=======
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	3318      	adds	r3, #24
 8008d28:	4619      	mov	r1, r3
 8008d2a:	480e      	ldr	r0, [pc, #56]	@ (8008d64 <xTaskRemoveFromEventList+0xbc>)
 8008d2c:	f7fe fda9 	bl	8007882 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d34:	4b0c      	ldr	r3, [pc, #48]	@ (8008d68 <xTaskRemoveFromEventList+0xc0>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d905      	bls.n	8008d4a <xTaskRemoveFromEventList+0xa2>
>>>>>>> remotes/origin/jayce_working
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< HEAD
 8008c0e:	2301      	movs	r3, #1
 8008c10:	617b      	str	r3, [r7, #20]
=======
 8008d3e:	2301      	movs	r3, #1
 8008d40:	617b      	str	r3, [r7, #20]
>>>>>>> remotes/origin/jayce_working

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 8008c12:	4b0a      	ldr	r3, [pc, #40]	@ (8008c3c <xTaskRemoveFromEventList+0xc4>)
 8008c14:	2201      	movs	r2, #1
 8008c16:	601a      	str	r2, [r3, #0]
 8008c18:	e001      	b.n	8008c1e <xTaskRemoveFromEventList+0xa6>
=======
 8008d42:	4b0a      	ldr	r3, [pc, #40]	@ (8008d6c <xTaskRemoveFromEventList+0xc4>)
 8008d44:	2201      	movs	r2, #1
 8008d46:	601a      	str	r2, [r3, #0]
 8008d48:	e001      	b.n	8008d4e <xTaskRemoveFromEventList+0xa6>
>>>>>>> remotes/origin/jayce_working
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< HEAD
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c1e:	697b      	ldr	r3, [r7, #20]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	20000f28 	.word	0x20000f28
 8008c2c:	20000f08 	.word	0x20000f08
 8008c30:	20000a30 	.word	0x20000a30
 8008c34:	20000ec0 	.word	0x20000ec0
 8008c38:	20000a2c 	.word	0x20000a2c
 8008c3c:	20000f14 	.word	0x20000f14

08008c40 <vTaskInternalSetTimeOutState>:
=======
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d4e:	697b      	ldr	r3, [r7, #20]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	20000f80 	.word	0x20000f80
 8008d5c:	20000f60 	.word	0x20000f60
 8008d60:	20000a88 	.word	0x20000a88
 8008d64:	20000f18 	.word	0x20000f18
 8008d68:	20000a84 	.word	0x20000a84
 8008d6c:	20000f6c 	.word	0x20000f6c

08008d70 <vTaskInternalSetTimeOutState>:
>>>>>>> remotes/origin/jayce_working
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< HEAD
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c48:	4b06      	ldr	r3, [pc, #24]	@ (8008c64 <vTaskInternalSetTimeOutState+0x24>)
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c50:	4b05      	ldr	r3, [pc, #20]	@ (8008c68 <vTaskInternalSetTimeOutState+0x28>)
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	605a      	str	r2, [r3, #4]
}
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	20000f18 	.word	0x20000f18
 8008c68:	20000f04 	.word	0x20000f04

08008c6c <xTaskCheckForTimeOut>:
=======
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d78:	4b06      	ldr	r3, [pc, #24]	@ (8008d94 <vTaskInternalSetTimeOutState+0x24>)
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d80:	4b05      	ldr	r3, [pc, #20]	@ (8008d98 <vTaskInternalSetTimeOutState+0x28>)
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	605a      	str	r2, [r3, #4]
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	20000f70 	.word	0x20000f70
 8008d98:	20000f5c 	.word	0x20000f5c

08008d9c <xTaskCheckForTimeOut>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< HEAD
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b088      	sub	sp, #32
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10b      	bne.n	8008c94 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	613b      	str	r3, [r7, #16]
}
 8008c8e:	bf00      	nop
 8008c90:	bf00      	nop
 8008c92:	e7fd      	b.n	8008c90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10b      	bne.n	8008cb2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	60fb      	str	r3, [r7, #12]
}
 8008cac:	bf00      	nop
 8008cae:	bf00      	nop
 8008cb0:	e7fd      	b.n	8008cae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008cb2:	f000 fe91 	bl	80099d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8008d2c <xTaskCheckForTimeOut+0xc0>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	617b      	str	r3, [r7, #20]
=======
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b088      	sub	sp, #32
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10b      	bne.n	8008dc4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	613b      	str	r3, [r7, #16]
}
 8008dbe:	bf00      	nop
 8008dc0:	bf00      	nop
 8008dc2:	e7fd      	b.n	8008dc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d10b      	bne.n	8008de2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dce:	f383 8811 	msr	BASEPRI, r3
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	60fb      	str	r3, [r7, #12]
}
 8008ddc:	bf00      	nop
 8008dde:	bf00      	nop
 8008de0:	e7fd      	b.n	8008dde <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008de2:	f000 fe91 	bl	8009b08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008de6:	4b1d      	ldr	r3, [pc, #116]	@ (8008e5c <xTaskCheckForTimeOut+0xc0>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	69ba      	ldr	r2, [r7, #24]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	617b      	str	r3, [r7, #20]
>>>>>>> remotes/origin/jayce_working
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< HEAD
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cce:	d102      	bne.n	8008cd6 <xTaskCheckForTimeOut+0x6a>
=======
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfe:	d102      	bne.n	8008e06 <xTaskCheckForTimeOut+0x6a>
>>>>>>> remotes/origin/jayce_working
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< HEAD
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	61fb      	str	r3, [r7, #28]
 8008cd4:	e023      	b.n	8008d1e <xTaskCheckForTimeOut+0xb2>
=======
 8008e00:	2300      	movs	r3, #0
 8008e02:	61fb      	str	r3, [r7, #28]
 8008e04:	e023      	b.n	8008e4e <xTaskCheckForTimeOut+0xb2>
>>>>>>> remotes/origin/jayce_working
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< HEAD
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	4b15      	ldr	r3, [pc, #84]	@ (8008d30 <xTaskCheckForTimeOut+0xc4>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d007      	beq.n	8008cf2 <xTaskCheckForTimeOut+0x86>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d302      	bcc.n	8008cf2 <xTaskCheckForTimeOut+0x86>
=======
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	4b15      	ldr	r3, [pc, #84]	@ (8008e60 <xTaskCheckForTimeOut+0xc4>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d007      	beq.n	8008e22 <xTaskCheckForTimeOut+0x86>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	69ba      	ldr	r2, [r7, #24]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d302      	bcc.n	8008e22 <xTaskCheckForTimeOut+0x86>
>>>>>>> remotes/origin/jayce_working
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< HEAD
 8008cec:	2301      	movs	r3, #1
 8008cee:	61fb      	str	r3, [r7, #28]
 8008cf0:	e015      	b.n	8008d1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d20b      	bcs.n	8008d14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	1ad2      	subs	r2, r2, r3
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7ff ff99 	bl	8008c40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	61fb      	str	r3, [r7, #28]
 8008d12:	e004      	b.n	8008d1e <xTaskCheckForTimeOut+0xb2>
=======
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	61fb      	str	r3, [r7, #28]
 8008e20:	e015      	b.n	8008e4e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d20b      	bcs.n	8008e44 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	1ad2      	subs	r2, r2, r3
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7ff ff99 	bl	8008d70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61fb      	str	r3, [r7, #28]
 8008e42:	e004      	b.n	8008e4e <xTaskCheckForTimeOut+0xb2>
>>>>>>> remotes/origin/jayce_working
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< HEAD
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	2200      	movs	r2, #0
 8008d18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d1e:	f000 fe8d 	bl	8009a3c <vPortExitCritical>

	return xReturn;
 8008d22:	69fb      	ldr	r3, [r7, #28]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3720      	adds	r7, #32
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	20000f04 	.word	0x20000f04
 8008d30:	20000f18 	.word	0x20000f18

08008d34 <vTaskMissedYield>:
=======
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	2200      	movs	r2, #0
 8008e48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e4e:	f000 fe8d 	bl	8009b6c <vPortExitCritical>

	return xReturn;
 8008e52:	69fb      	ldr	r3, [r7, #28]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3720      	adds	r7, #32
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	20000f5c 	.word	0x20000f5c
 8008e60:	20000f70 	.word	0x20000f70

08008e64 <vTaskMissedYield>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< HEAD
 8008d34:	b480      	push	{r7}
 8008d36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d38:	4b03      	ldr	r3, [pc, #12]	@ (8008d48 <vTaskMissedYield+0x14>)
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	601a      	str	r2, [r3, #0]
}
 8008d3e:	bf00      	nop
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	20000f14 	.word	0x20000f14

08008d4c <prvIdleTask>:
=======
 8008e64:	b480      	push	{r7}
 8008e66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e68:	4b03      	ldr	r3, [pc, #12]	@ (8008e78 <vTaskMissedYield+0x14>)
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	601a      	str	r2, [r3, #0]
}
 8008e6e:	bf00      	nop
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	20000f6c 	.word	0x20000f6c

08008e7c <prvIdleTask>:
>>>>>>> remotes/origin/jayce_working
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< HEAD
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
=======
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< HEAD
 8008d54:	f000 f852 	bl	8008dfc <prvCheckTasksWaitingTermination>
=======
 8008e84:	f000 f852 	bl	8008f2c <prvCheckTasksWaitingTermination>
>>>>>>> remotes/origin/jayce_working

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 8008d58:	4b06      	ldr	r3, [pc, #24]	@ (8008d74 <prvIdleTask+0x28>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d9f9      	bls.n	8008d54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d60:	4b05      	ldr	r3, [pc, #20]	@ (8008d78 <prvIdleTask+0x2c>)
 8008d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d66:	601a      	str	r2, [r3, #0]
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d70:	e7f0      	b.n	8008d54 <prvIdleTask+0x8>
 8008d72:	bf00      	nop
 8008d74:	20000a30 	.word	0x20000a30
 8008d78:	e000ed04 	.word	0xe000ed04

08008d7c <prvInitialiseTaskLists>:
=======
 8008e88:	4b06      	ldr	r3, [pc, #24]	@ (8008ea4 <prvIdleTask+0x28>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d9f9      	bls.n	8008e84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e90:	4b05      	ldr	r3, [pc, #20]	@ (8008ea8 <prvIdleTask+0x2c>)
 8008e92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ea0:	e7f0      	b.n	8008e84 <prvIdleTask+0x8>
 8008ea2:	bf00      	nop
 8008ea4:	20000a88 	.word	0x20000a88
 8008ea8:	e000ed04 	.word	0xe000ed04

08008eac <prvInitialiseTaskLists>:
>>>>>>> remotes/origin/jayce_working

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< HEAD
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d82:	2300      	movs	r3, #0
 8008d84:	607b      	str	r3, [r7, #4]
 8008d86:	e00c      	b.n	8008da2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	4413      	add	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4a12      	ldr	r2, [pc, #72]	@ (8008ddc <prvInitialiseTaskLists+0x60>)
 8008d94:	4413      	add	r3, r2
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fe fbb6 	bl	8007508 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	607b      	str	r3, [r7, #4]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b37      	cmp	r3, #55	@ 0x37
 8008da6:	d9ef      	bls.n	8008d88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008da8:	480d      	ldr	r0, [pc, #52]	@ (8008de0 <prvInitialiseTaskLists+0x64>)
 8008daa:	f7fe fbad 	bl	8007508 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008dae:	480d      	ldr	r0, [pc, #52]	@ (8008de4 <prvInitialiseTaskLists+0x68>)
 8008db0:	f7fe fbaa 	bl	8007508 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008db4:	480c      	ldr	r0, [pc, #48]	@ (8008de8 <prvInitialiseTaskLists+0x6c>)
 8008db6:	f7fe fba7 	bl	8007508 <vListInitialise>
=======
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	607b      	str	r3, [r7, #4]
 8008eb6:	e00c      	b.n	8008ed2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4a12      	ldr	r2, [pc, #72]	@ (8008f0c <prvInitialiseTaskLists+0x60>)
 8008ec4:	4413      	add	r3, r2
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fe fcae 	bl	8007828 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	607b      	str	r3, [r7, #4]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b37      	cmp	r3, #55	@ 0x37
 8008ed6:	d9ef      	bls.n	8008eb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ed8:	480d      	ldr	r0, [pc, #52]	@ (8008f10 <prvInitialiseTaskLists+0x64>)
 8008eda:	f7fe fca5 	bl	8007828 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ede:	480d      	ldr	r0, [pc, #52]	@ (8008f14 <prvInitialiseTaskLists+0x68>)
 8008ee0:	f7fe fca2 	bl	8007828 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ee4:	480c      	ldr	r0, [pc, #48]	@ (8008f18 <prvInitialiseTaskLists+0x6c>)
 8008ee6:	f7fe fc9f 	bl	8007828 <vListInitialise>
>>>>>>> remotes/origin/jayce_working

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< HEAD
 8008dba:	480c      	ldr	r0, [pc, #48]	@ (8008dec <prvInitialiseTaskLists+0x70>)
 8008dbc:	f7fe fba4 	bl	8007508 <vListInitialise>
=======
 8008eea:	480c      	ldr	r0, [pc, #48]	@ (8008f1c <prvInitialiseTaskLists+0x70>)
 8008eec:	f7fe fc9c 	bl	8007828 <vListInitialise>
>>>>>>> remotes/origin/jayce_working
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< HEAD
 8008dc0:	480b      	ldr	r0, [pc, #44]	@ (8008df0 <prvInitialiseTaskLists+0x74>)
 8008dc2:	f7fe fba1 	bl	8007508 <vListInitialise>
=======
 8008ef0:	480b      	ldr	r0, [pc, #44]	@ (8008f20 <prvInitialiseTaskLists+0x74>)
 8008ef2:	f7fe fc99 	bl	8007828 <vListInitialise>
>>>>>>> remotes/origin/jayce_working
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< HEAD
 8008dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8008df4 <prvInitialiseTaskLists+0x78>)
 8008dc8:	4a05      	ldr	r2, [pc, #20]	@ (8008de0 <prvInitialiseTaskLists+0x64>)
 8008dca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8008df8 <prvInitialiseTaskLists+0x7c>)
 8008dce:	4a05      	ldr	r2, [pc, #20]	@ (8008de4 <prvInitialiseTaskLists+0x68>)
 8008dd0:	601a      	str	r2, [r3, #0]
}
 8008dd2:	bf00      	nop
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	20000a30 	.word	0x20000a30
 8008de0:	20000e90 	.word	0x20000e90
 8008de4:	20000ea4 	.word	0x20000ea4
 8008de8:	20000ec0 	.word	0x20000ec0
 8008dec:	20000ed4 	.word	0x20000ed4
 8008df0:	20000eec 	.word	0x20000eec
 8008df4:	20000eb8 	.word	0x20000eb8
 8008df8:	20000ebc 	.word	0x20000ebc

08008dfc <prvCheckTasksWaitingTermination>:
=======
 8008ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8008f24 <prvInitialiseTaskLists+0x78>)
 8008ef8:	4a05      	ldr	r2, [pc, #20]	@ (8008f10 <prvInitialiseTaskLists+0x64>)
 8008efa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008efc:	4b0a      	ldr	r3, [pc, #40]	@ (8008f28 <prvInitialiseTaskLists+0x7c>)
 8008efe:	4a05      	ldr	r2, [pc, #20]	@ (8008f14 <prvInitialiseTaskLists+0x68>)
 8008f00:	601a      	str	r2, [r3, #0]
}
 8008f02:	bf00      	nop
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20000a88 	.word	0x20000a88
 8008f10:	20000ee8 	.word	0x20000ee8
 8008f14:	20000efc 	.word	0x20000efc
 8008f18:	20000f18 	.word	0x20000f18
 8008f1c:	20000f2c 	.word	0x20000f2c
 8008f20:	20000f44 	.word	0x20000f44
 8008f24:	20000f10 	.word	0x20000f10
 8008f28:	20000f14 	.word	0x20000f14

08008f2c <prvCheckTasksWaitingTermination>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< HEAD
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
=======
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 8008e02:	e019      	b.n	8008e38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e04:	f000 fde8 	bl	80099d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e08:	4b10      	ldr	r3, [pc, #64]	@ (8008e4c <prvCheckTasksWaitingTermination+0x50>)
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	3304      	adds	r3, #4
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fe fc01 	bl	800761c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e50 <prvCheckTasksWaitingTermination+0x54>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	4a0b      	ldr	r2, [pc, #44]	@ (8008e50 <prvCheckTasksWaitingTermination+0x54>)
 8008e22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e24:	4b0b      	ldr	r3, [pc, #44]	@ (8008e54 <prvCheckTasksWaitingTermination+0x58>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8008e54 <prvCheckTasksWaitingTermination+0x58>)
 8008e2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e2e:	f000 fe05 	bl	8009a3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f810 	bl	8008e58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e38:	4b06      	ldr	r3, [pc, #24]	@ (8008e54 <prvCheckTasksWaitingTermination+0x58>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1e1      	bne.n	8008e04 <prvCheckTasksWaitingTermination+0x8>
=======
 8008f32:	e019      	b.n	8008f68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f34:	f000 fde8 	bl	8009b08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f38:	4b10      	ldr	r3, [pc, #64]	@ (8008f7c <prvCheckTasksWaitingTermination+0x50>)
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	3304      	adds	r3, #4
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fe fcf9 	bl	800793c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008f80 <prvCheckTasksWaitingTermination+0x54>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	4a0b      	ldr	r2, [pc, #44]	@ (8008f80 <prvCheckTasksWaitingTermination+0x54>)
 8008f52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f54:	4b0b      	ldr	r3, [pc, #44]	@ (8008f84 <prvCheckTasksWaitingTermination+0x58>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8008f84 <prvCheckTasksWaitingTermination+0x58>)
 8008f5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f5e:	f000 fe05 	bl	8009b6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f810 	bl	8008f88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f68:	4b06      	ldr	r3, [pc, #24]	@ (8008f84 <prvCheckTasksWaitingTermination+0x58>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e1      	bne.n	8008f34 <prvCheckTasksWaitingTermination+0x8>
>>>>>>> remotes/origin/jayce_working
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< HEAD
 8008e40:	bf00      	nop
 8008e42:	bf00      	nop
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20000ed4 	.word	0x20000ed4
 8008e50:	20000f00 	.word	0x20000f00
 8008e54:	20000ee8 	.word	0x20000ee8

08008e58 <prvDeleteTCB>:
=======
 8008f70:	bf00      	nop
 8008f72:	bf00      	nop
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000f2c 	.word	0x20000f2c
 8008f80:	20000f58 	.word	0x20000f58
 8008f84:	20000f40 	.word	0x20000f40

08008f88 <prvDeleteTCB>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< HEAD
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
=======
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
<<<<<<< HEAD
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3354      	adds	r3, #84	@ 0x54
 8008e64:	4618      	mov	r0, r3
 8008e66:	f001 f8cf 	bl	800a008 <_reclaim_reent>
=======
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	3354      	adds	r3, #84	@ 0x54
 8008f94:	4618      	mov	r0, r3
 8008f96:	f001 f8cf 	bl	800a138 <_reclaim_reent>
>>>>>>> remotes/origin/jayce_working
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< HEAD
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d108      	bne.n	8008e86 <prvDeleteTCB+0x2e>
=======
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d108      	bne.n	8008fb6 <prvDeleteTCB+0x2e>
>>>>>>> remotes/origin/jayce_working
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< HEAD
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f000 ff9d 	bl	8009db8 <vPortFree>
				vPortFree( pxTCB );
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 ff9a 	bl	8009db8 <vPortFree>
=======
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f000 ff9d 	bl	8009ee8 <vPortFree>
				vPortFree( pxTCB );
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 ff9a 	bl	8009ee8 <vPortFree>
>>>>>>> remotes/origin/jayce_working
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< HEAD
 8008e84:	e019      	b.n	8008eba <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d103      	bne.n	8008e98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 ff91 	bl	8009db8 <vPortFree>
	}
 8008e96:	e010      	b.n	8008eba <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d00b      	beq.n	8008eba <prvDeleteTCB+0x62>
	__asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	60fb      	str	r3, [r7, #12]
}
 8008eb4:	bf00      	nop
 8008eb6:	bf00      	nop
 8008eb8:	e7fd      	b.n	8008eb6 <prvDeleteTCB+0x5e>
	}
 8008eba:	bf00      	nop
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <prvResetNextTaskUnblockTime>:
=======
 8008fb4:	e019      	b.n	8008fea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d103      	bne.n	8008fc8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 ff91 	bl	8009ee8 <vPortFree>
	}
 8008fc6:	e010      	b.n	8008fea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d00b      	beq.n	8008fea <prvDeleteTCB+0x62>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	60fb      	str	r3, [r7, #12]
}
 8008fe4:	bf00      	nop
 8008fe6:	bf00      	nop
 8008fe8:	e7fd      	b.n	8008fe6 <prvDeleteTCB+0x5e>
	}
 8008fea:	bf00      	nop
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <prvResetNextTaskUnblockTime>:
>>>>>>> remotes/origin/jayce_working

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< HEAD
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eca:	4b0c      	ldr	r3, [pc, #48]	@ (8008efc <prvResetNextTaskUnblockTime+0x38>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d104      	bne.n	8008ede <prvResetNextTaskUnblockTime+0x1a>
=======
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800902c <prvResetNextTaskUnblockTime+0x38>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d104      	bne.n	800900e <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> remotes/origin/jayce_working
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 8008ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8008f00 <prvResetNextTaskUnblockTime+0x3c>)
 8008ed6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008eda:	601a      	str	r2, [r3, #0]
=======
 8009004:	4b0a      	ldr	r3, [pc, #40]	@ (8009030 <prvResetNextTaskUnblockTime+0x3c>)
 8009006:	f04f 32ff 	mov.w	r2, #4294967295
 800900a:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< HEAD
 8008edc:	e008      	b.n	8008ef0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ede:	4b07      	ldr	r3, [pc, #28]	@ (8008efc <prvResetNextTaskUnblockTime+0x38>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	4a04      	ldr	r2, [pc, #16]	@ (8008f00 <prvResetNextTaskUnblockTime+0x3c>)
 8008eee:	6013      	str	r3, [r2, #0]
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr
 8008efc:	20000eb8 	.word	0x20000eb8
 8008f00:	20000f20 	.word	0x20000f20

08008f04 <xTaskGetSchedulerState>:
=======
 800900c:	e008      	b.n	8009020 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800900e:	4b07      	ldr	r3, [pc, #28]	@ (800902c <prvResetNextTaskUnblockTime+0x38>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	4a04      	ldr	r2, [pc, #16]	@ (8009030 <prvResetNextTaskUnblockTime+0x3c>)
 800901e:	6013      	str	r3, [r2, #0]
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	20000f10 	.word	0x20000f10
 8009030:	20000f78 	.word	0x20000f78

08009034 <xTaskGetSchedulerState>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< HEAD
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f38 <xTaskGetSchedulerState+0x34>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d102      	bne.n	8008f18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f12:	2301      	movs	r3, #1
 8008f14:	607b      	str	r3, [r7, #4]
 8008f16:	e008      	b.n	8008f2a <xTaskGetSchedulerState+0x26>
=======
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800903a:	4b0b      	ldr	r3, [pc, #44]	@ (8009068 <xTaskGetSchedulerState+0x34>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d102      	bne.n	8009048 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009042:	2301      	movs	r3, #1
 8009044:	607b      	str	r3, [r7, #4]
 8009046:	e008      	b.n	800905a <xTaskGetSchedulerState+0x26>
>>>>>>> remotes/origin/jayce_working
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 8008f18:	4b08      	ldr	r3, [pc, #32]	@ (8008f3c <xTaskGetSchedulerState+0x38>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d102      	bne.n	8008f26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f20:	2302      	movs	r3, #2
 8008f22:	607b      	str	r3, [r7, #4]
 8008f24:	e001      	b.n	8008f2a <xTaskGetSchedulerState+0x26>
=======
 8009048:	4b08      	ldr	r3, [pc, #32]	@ (800906c <xTaskGetSchedulerState+0x38>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d102      	bne.n	8009056 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009050:	2302      	movs	r3, #2
 8009052:	607b      	str	r3, [r7, #4]
 8009054:	e001      	b.n	800905a <xTaskGetSchedulerState+0x26>
>>>>>>> remotes/origin/jayce_working
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< HEAD
 8008f26:	2300      	movs	r3, #0
 8008f28:	607b      	str	r3, [r7, #4]
=======
 8009056:	2300      	movs	r3, #0
 8009058:	607b      	str	r3, [r7, #4]
>>>>>>> remotes/origin/jayce_working
			}
		}

		return xReturn;
<<<<<<< HEAD
 8008f2a:	687b      	ldr	r3, [r7, #4]
	}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	20000f0c 	.word	0x20000f0c
 8008f3c:	20000f28 	.word	0x20000f28

08008f40 <xTaskPriorityDisinherit>:
=======
 800905a:	687b      	ldr	r3, [r7, #4]
	}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	20000f64 	.word	0x20000f64
 800906c:	20000f80 	.word	0x20000f80

08009070 <xTaskPriorityDisinherit>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d058      	beq.n	8009008 <xTaskPriorityDisinherit+0xc8>
=======
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800907c:	2300      	movs	r3, #0
 800907e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d058      	beq.n	8009138 <xTaskPriorityDisinherit+0xc8>
>>>>>>> remotes/origin/jayce_working
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< HEAD
 8008f56:	4b2f      	ldr	r3, [pc, #188]	@ (8009014 <xTaskPriorityDisinherit+0xd4>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d00b      	beq.n	8008f78 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	60fb      	str	r3, [r7, #12]
}
 8008f72:	bf00      	nop
 8008f74:	bf00      	nop
 8008f76:	e7fd      	b.n	8008f74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10b      	bne.n	8008f98 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	60bb      	str	r3, [r7, #8]
}
 8008f92:	bf00      	nop
 8008f94:	bf00      	nop
 8008f96:	e7fd      	b.n	8008f94 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f9c:	1e5a      	subs	r2, r3, #1
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8009086:	4b2f      	ldr	r3, [pc, #188]	@ (8009144 <xTaskPriorityDisinherit+0xd4>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	693a      	ldr	r2, [r7, #16]
 800908c:	429a      	cmp	r2, r3
 800908e:	d00b      	beq.n	80090a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	60fb      	str	r3, [r7, #12]
}
 80090a2:	bf00      	nop
 80090a4:	bf00      	nop
 80090a6:	e7fd      	b.n	80090a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10b      	bne.n	80090c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	60bb      	str	r3, [r7, #8]
}
 80090c2:	bf00      	nop
 80090c4:	bf00      	nop
 80090c6:	e7fd      	b.n	80090c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090cc:	1e5a      	subs	r2, r3, #1
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> remotes/origin/jayce_working

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< HEAD
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d02c      	beq.n	8009008 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d128      	bne.n	8009008 <xTaskPriorityDisinherit+0xc8>
=======
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090da:	429a      	cmp	r2, r3
 80090dc:	d02c      	beq.n	8009138 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d128      	bne.n	8009138 <xTaskPriorityDisinherit+0xc8>
>>>>>>> remotes/origin/jayce_working
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	3304      	adds	r3, #4
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe fb2e 	bl	800761c <uxListRemove>
=======
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	3304      	adds	r3, #4
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fe fc26 	bl	800793c <uxListRemove>
>>>>>>> remotes/origin/jayce_working
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< HEAD
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> remotes/origin/jayce_working

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fcc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8009018 <xTaskPriorityDisinherit+0xd8>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d903      	bls.n	8008fe8 <xTaskPriorityDisinherit+0xa8>
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8009018 <xTaskPriorityDisinherit+0xd8>)
 8008fe6:	6013      	str	r3, [r2, #0]
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fec:	4613      	mov	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4413      	add	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	4a09      	ldr	r2, [pc, #36]	@ (800901c <xTaskPriorityDisinherit+0xdc>)
 8008ff6:	441a      	add	r2, r3
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	4610      	mov	r0, r2
 8009000:	f7fe faaf 	bl	8007562 <vListInsertEnd>
=======
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009108:	4b0f      	ldr	r3, [pc, #60]	@ (8009148 <xTaskPriorityDisinherit+0xd8>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	429a      	cmp	r2, r3
 800910e:	d903      	bls.n	8009118 <xTaskPriorityDisinherit+0xa8>
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009114:	4a0c      	ldr	r2, [pc, #48]	@ (8009148 <xTaskPriorityDisinherit+0xd8>)
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800911c:	4613      	mov	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4a09      	ldr	r2, [pc, #36]	@ (800914c <xTaskPriorityDisinherit+0xdc>)
 8009126:	441a      	add	r2, r3
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	3304      	adds	r3, #4
 800912c:	4619      	mov	r1, r3
 800912e:	4610      	mov	r0, r2
 8009130:	f7fe fba7 	bl	8007882 <vListInsertEnd>
>>>>>>> remotes/origin/jayce_working
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< HEAD
 8009004:	2301      	movs	r3, #1
 8009006:	617b      	str	r3, [r7, #20]
=======
 8009134:	2301      	movs	r3, #1
 8009136:	617b      	str	r3, [r7, #20]
>>>>>>> remotes/origin/jayce_working
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 8009008:	697b      	ldr	r3, [r7, #20]
	}
 800900a:	4618      	mov	r0, r3
 800900c:	3718      	adds	r7, #24
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20000a2c 	.word	0x20000a2c
 8009018:	20000f08 	.word	0x20000f08
 800901c:	20000a30 	.word	0x20000a30

08009020 <prvAddCurrentTaskToDelayedList>:
=======
 8009138:	697b      	ldr	r3, [r7, #20]
	}
 800913a:	4618      	mov	r0, r3
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	20000a84 	.word	0x20000a84
 8009148:	20000f60 	.word	0x20000f60
 800914c:	20000a88 	.word	0x20000a88

08009150 <prvAddCurrentTaskToDelayedList>:
>>>>>>> remotes/origin/jayce_working

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< HEAD
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800902a:	4b21      	ldr	r3, [pc, #132]	@ (80090b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	60fb      	str	r3, [r7, #12]
=======
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800915a:	4b21      	ldr	r3, [pc, #132]	@ (80091e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	60fb      	str	r3, [r7, #12]
>>>>>>> remotes/origin/jayce_working
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8009030:	4b20      	ldr	r3, [pc, #128]	@ (80090b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	3304      	adds	r3, #4
 8009036:	4618      	mov	r0, r3
 8009038:	f7fe faf0 	bl	800761c <uxListRemove>
=======
 8009160:	4b20      	ldr	r3, [pc, #128]	@ (80091e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3304      	adds	r3, #4
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe fbe8 	bl	800793c <uxListRemove>
>>>>>>> remotes/origin/jayce_working
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< HEAD
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009042:	d10a      	bne.n	800905a <prvAddCurrentTaskToDelayedList+0x3a>
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d007      	beq.n	800905a <prvAddCurrentTaskToDelayedList+0x3a>
=======
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009172:	d10a      	bne.n	800918a <prvAddCurrentTaskToDelayedList+0x3a>
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d007      	beq.n	800918a <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> remotes/origin/jayce_working
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 800904a:	4b1a      	ldr	r3, [pc, #104]	@ (80090b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3304      	adds	r3, #4
 8009050:	4619      	mov	r1, r3
 8009052:	4819      	ldr	r0, [pc, #100]	@ (80090b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009054:	f7fe fa85 	bl	8007562 <vListInsertEnd>
=======
 800917a:	4b1a      	ldr	r3, [pc, #104]	@ (80091e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3304      	adds	r3, #4
 8009180:	4619      	mov	r1, r3
 8009182:	4819      	ldr	r0, [pc, #100]	@ (80091e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009184:	f7fe fb7d 	bl	8007882 <vListInsertEnd>
>>>>>>> remotes/origin/jayce_working

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< HEAD
 8009058:	e026      	b.n	80090a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4413      	add	r3, r2
 8009060:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009062:	4b14      	ldr	r3, [pc, #80]	@ (80090b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	429a      	cmp	r2, r3
 8009070:	d209      	bcs.n	8009086 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009072:	4b12      	ldr	r3, [pc, #72]	@ (80090bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	4b0f      	ldr	r3, [pc, #60]	@ (80090b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3304      	adds	r3, #4
 800907c:	4619      	mov	r1, r3
 800907e:	4610      	mov	r0, r2
 8009080:	f7fe fa93 	bl	80075aa <vListInsert>
}
 8009084:	e010      	b.n	80090a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009086:	4b0e      	ldr	r3, [pc, #56]	@ (80090c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	4b0a      	ldr	r3, [pc, #40]	@ (80090b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	3304      	adds	r3, #4
 8009090:	4619      	mov	r1, r3
 8009092:	4610      	mov	r0, r2
 8009094:	f7fe fa89 	bl	80075aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009098:	4b0a      	ldr	r3, [pc, #40]	@ (80090c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d202      	bcs.n	80090a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80090a2:	4a08      	ldr	r2, [pc, #32]	@ (80090c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	6013      	str	r3, [r2, #0]
}
 80090a8:	bf00      	nop
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	20000f04 	.word	0x20000f04
 80090b4:	20000a2c 	.word	0x20000a2c
 80090b8:	20000eec 	.word	0x20000eec
 80090bc:	20000ebc 	.word	0x20000ebc
 80090c0:	20000eb8 	.word	0x20000eb8
 80090c4:	20000f20 	.word	0x20000f20

080090c8 <xTimerCreateTimerTask>:
=======
 8009188:	e026      	b.n	80091d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4413      	add	r3, r2
 8009190:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009192:	4b14      	ldr	r3, [pc, #80]	@ (80091e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d209      	bcs.n	80091b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091a2:	4b12      	ldr	r3, [pc, #72]	@ (80091ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	4b0f      	ldr	r3, [pc, #60]	@ (80091e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	3304      	adds	r3, #4
 80091ac:	4619      	mov	r1, r3
 80091ae:	4610      	mov	r0, r2
 80091b0:	f7fe fb8b 	bl	80078ca <vListInsert>
}
 80091b4:	e010      	b.n	80091d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091b6:	4b0e      	ldr	r3, [pc, #56]	@ (80091f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	4b0a      	ldr	r3, [pc, #40]	@ (80091e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3304      	adds	r3, #4
 80091c0:	4619      	mov	r1, r3
 80091c2:	4610      	mov	r0, r2
 80091c4:	f7fe fb81 	bl	80078ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091c8:	4b0a      	ldr	r3, [pc, #40]	@ (80091f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d202      	bcs.n	80091d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80091d2:	4a08      	ldr	r2, [pc, #32]	@ (80091f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	6013      	str	r3, [r2, #0]
}
 80091d8:	bf00      	nop
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	20000f5c 	.word	0x20000f5c
 80091e4:	20000a84 	.word	0x20000a84
 80091e8:	20000f44 	.word	0x20000f44
 80091ec:	20000f14 	.word	0x20000f14
 80091f0:	20000f10 	.word	0x20000f10
 80091f4:	20000f78 	.word	0x20000f78

080091f8 <xTimerCreateTimerTask>:
>>>>>>> remotes/origin/jayce_working
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
<<<<<<< HEAD
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b08a      	sub	sp, #40	@ 0x28
 80090cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80090ce:	2300      	movs	r3, #0
 80090d0:	617b      	str	r3, [r7, #20]
=======
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b08a      	sub	sp, #40	@ 0x28
 80091fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80091fe:	2300      	movs	r3, #0
 8009200:	617b      	str	r3, [r7, #20]
>>>>>>> remotes/origin/jayce_working

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
<<<<<<< HEAD
 80090d2:	f000 fb13 	bl	80096fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80090d6:	4b1d      	ldr	r3, [pc, #116]	@ (800914c <xTimerCreateTimerTask+0x84>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d021      	beq.n	8009122 <xTimerCreateTimerTask+0x5a>
=======
 8009202:	f000 fb13 	bl	800982c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009206:	4b1d      	ldr	r3, [pc, #116]	@ (800927c <xTimerCreateTimerTask+0x84>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d021      	beq.n	8009252 <xTimerCreateTimerTask+0x5a>
>>>>>>> remotes/origin/jayce_working
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
<<<<<<< HEAD
 80090de:	2300      	movs	r3, #0
 80090e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80090e2:	2300      	movs	r3, #0
 80090e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80090e6:	1d3a      	adds	r2, r7, #4
 80090e8:	f107 0108 	add.w	r1, r7, #8
 80090ec:	f107 030c 	add.w	r3, r7, #12
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fe f9ef 	bl	80074d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	9202      	str	r2, [sp, #8]
 80090fe:	9301      	str	r3, [sp, #4]
 8009100:	2302      	movs	r3, #2
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	2300      	movs	r3, #0
 8009106:	460a      	mov	r2, r1
 8009108:	4911      	ldr	r1, [pc, #68]	@ (8009150 <xTimerCreateTimerTask+0x88>)
 800910a:	4812      	ldr	r0, [pc, #72]	@ (8009154 <xTimerCreateTimerTask+0x8c>)
 800910c:	f7ff f8a2 	bl	8008254 <xTaskCreateStatic>
 8009110:	4603      	mov	r3, r0
 8009112:	4a11      	ldr	r2, [pc, #68]	@ (8009158 <xTimerCreateTimerTask+0x90>)
 8009114:	6013      	str	r3, [r2, #0]
=======
 800920e:	2300      	movs	r3, #0
 8009210:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009212:	2300      	movs	r3, #0
 8009214:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009216:	1d3a      	adds	r2, r7, #4
 8009218:	f107 0108 	add.w	r1, r7, #8
 800921c:	f107 030c 	add.w	r3, r7, #12
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe fae7 	bl	80077f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009226:	6879      	ldr	r1, [r7, #4]
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	9202      	str	r2, [sp, #8]
 800922e:	9301      	str	r3, [sp, #4]
 8009230:	2302      	movs	r3, #2
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	2300      	movs	r3, #0
 8009236:	460a      	mov	r2, r1
 8009238:	4911      	ldr	r1, [pc, #68]	@ (8009280 <xTimerCreateTimerTask+0x88>)
 800923a:	4812      	ldr	r0, [pc, #72]	@ (8009284 <xTimerCreateTimerTask+0x8c>)
 800923c:	f7ff f8a2 	bl	8008384 <xTaskCreateStatic>
 8009240:	4603      	mov	r3, r0
 8009242:	4a11      	ldr	r2, [pc, #68]	@ (8009288 <xTimerCreateTimerTask+0x90>)
 8009244:	6013      	str	r3, [r2, #0]
>>>>>>> remotes/origin/jayce_working
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
<<<<<<< HEAD
 8009116:	4b10      	ldr	r3, [pc, #64]	@ (8009158 <xTimerCreateTimerTask+0x90>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800911e:	2301      	movs	r3, #1
 8009120:	617b      	str	r3, [r7, #20]
=======
 8009246:	4b10      	ldr	r3, [pc, #64]	@ (8009288 <xTimerCreateTimerTask+0x90>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800924e:	2301      	movs	r3, #1
 8009250:	617b      	str	r3, [r7, #20]
>>>>>>> remotes/origin/jayce_working
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
<<<<<<< HEAD
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10b      	bne.n	8009140 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	613b      	str	r3, [r7, #16]
}
 800913a:	bf00      	nop
 800913c:	bf00      	nop
 800913e:	e7fd      	b.n	800913c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009140:	697b      	ldr	r3, [r7, #20]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	20000f5c 	.word	0x20000f5c
 8009150:	0800a230 	.word	0x0800a230
 8009154:	08009295 	.word	0x08009295
 8009158:	20000f60 	.word	0x20000f60

0800915c <xTimerGenericCommand>:
=======
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10b      	bne.n	8009270 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	613b      	str	r3, [r7, #16]
}
 800926a:	bf00      	nop
 800926c:	bf00      	nop
 800926e:	e7fd      	b.n	800926c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009270:	697b      	ldr	r3, [r7, #20]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3718      	adds	r7, #24
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	20000fb4 	.word	0x20000fb4
 8009280:	0800a364 	.word	0x0800a364
 8009284:	080093c5 	.word	0x080093c5
 8009288:	20000fb8 	.word	0x20000fb8

0800928c <xTimerGenericCommand>:
>>>>>>> remotes/origin/jayce_working
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 800915c:	b580      	push	{r7, lr}
 800915e:	b08a      	sub	sp, #40	@ 0x28
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
 8009168:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800916a:	2300      	movs	r3, #0
 800916c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10b      	bne.n	800918c <xTimerGenericCommand+0x30>
	__asm volatile
 8009174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	623b      	str	r3, [r7, #32]
}
 8009186:	bf00      	nop
 8009188:	bf00      	nop
 800918a:	e7fd      	b.n	8009188 <xTimerGenericCommand+0x2c>
=======
 800928c:	b580      	push	{r7, lr}
 800928e:	b08a      	sub	sp, #40	@ 0x28
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
 8009298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800929a:	2300      	movs	r3, #0
 800929c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10b      	bne.n	80092bc <xTimerGenericCommand+0x30>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	623b      	str	r3, [r7, #32]
}
 80092b6:	bf00      	nop
 80092b8:	bf00      	nop
 80092ba:	e7fd      	b.n	80092b8 <xTimerGenericCommand+0x2c>
>>>>>>> remotes/origin/jayce_working

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
<<<<<<< HEAD
 800918c:	4b19      	ldr	r3, [pc, #100]	@ (80091f4 <xTimerGenericCommand+0x98>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d02a      	beq.n	80091ea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	2b05      	cmp	r3, #5
 80091a4:	dc18      	bgt.n	80091d8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80091a6:	f7ff fead 	bl	8008f04 <xTaskGetSchedulerState>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d109      	bne.n	80091c4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80091b0:	4b10      	ldr	r3, [pc, #64]	@ (80091f4 <xTimerGenericCommand+0x98>)
 80091b2:	6818      	ldr	r0, [r3, #0]
 80091b4:	f107 0110 	add.w	r1, r7, #16
 80091b8:	2300      	movs	r3, #0
 80091ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091bc:	f7fe fc0c 	bl	80079d8 <xQueueGenericSend>
 80091c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80091c2:	e012      	b.n	80091ea <xTimerGenericCommand+0x8e>
=======
 80092bc:	4b19      	ldr	r3, [pc, #100]	@ (8009324 <xTimerGenericCommand+0x98>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d02a      	beq.n	800931a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	2b05      	cmp	r3, #5
 80092d4:	dc18      	bgt.n	8009308 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092d6:	f7ff fead 	bl	8009034 <xTaskGetSchedulerState>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d109      	bne.n	80092f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092e0:	4b10      	ldr	r3, [pc, #64]	@ (8009324 <xTimerGenericCommand+0x98>)
 80092e2:	6818      	ldr	r0, [r3, #0]
 80092e4:	f107 0110 	add.w	r1, r7, #16
 80092e8:	2300      	movs	r3, #0
 80092ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092ec:	f7fe fc5a 	bl	8007ba4 <xQueueGenericSend>
 80092f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80092f2:	e012      	b.n	800931a <xTimerGenericCommand+0x8e>
>>>>>>> remotes/origin/jayce_working
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
<<<<<<< HEAD
 80091c4:	4b0b      	ldr	r3, [pc, #44]	@ (80091f4 <xTimerGenericCommand+0x98>)
 80091c6:	6818      	ldr	r0, [r3, #0]
 80091c8:	f107 0110 	add.w	r1, r7, #16
 80091cc:	2300      	movs	r3, #0
 80091ce:	2200      	movs	r2, #0
 80091d0:	f7fe fc02 	bl	80079d8 <xQueueGenericSend>
 80091d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80091d6:	e008      	b.n	80091ea <xTimerGenericCommand+0x8e>
=======
 80092f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009324 <xTimerGenericCommand+0x98>)
 80092f6:	6818      	ldr	r0, [r3, #0]
 80092f8:	f107 0110 	add.w	r1, r7, #16
 80092fc:	2300      	movs	r3, #0
 80092fe:	2200      	movs	r2, #0
 8009300:	f7fe fc50 	bl	8007ba4 <xQueueGenericSend>
 8009304:	6278      	str	r0, [r7, #36]	@ 0x24
 8009306:	e008      	b.n	800931a <xTimerGenericCommand+0x8e>
>>>>>>> remotes/origin/jayce_working
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
<<<<<<< HEAD
 80091d8:	4b06      	ldr	r3, [pc, #24]	@ (80091f4 <xTimerGenericCommand+0x98>)
 80091da:	6818      	ldr	r0, [r3, #0]
 80091dc:	f107 0110 	add.w	r1, r7, #16
 80091e0:	2300      	movs	r3, #0
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	f7fe fcfa 	bl	8007bdc <xQueueGenericSendFromISR>
 80091e8:	6278      	str	r0, [r7, #36]	@ 0x24
=======
 8009308:	4b06      	ldr	r3, [pc, #24]	@ (8009324 <xTimerGenericCommand+0x98>)
 800930a:	6818      	ldr	r0, [r3, #0]
 800930c:	f107 0110 	add.w	r1, r7, #16
 8009310:	2300      	movs	r3, #0
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	f7fe fd48 	bl	8007da8 <xQueueGenericSendFromISR>
 8009318:	6278      	str	r0, [r7, #36]	@ 0x24
>>>>>>> remotes/origin/jayce_working
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
<<<<<<< HEAD
 80091ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3728      	adds	r7, #40	@ 0x28
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20000f5c 	.word	0x20000f5c

080091f8 <prvProcessExpiredTimer>:
=======
 800931a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800931c:	4618      	mov	r0, r3
 800931e:	3728      	adds	r7, #40	@ 0x28
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	20000fb4 	.word	0x20000fb4

08009328 <prvProcessExpiredTimer>:
>>>>>>> remotes/origin/jayce_working
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
<<<<<<< HEAD
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af02      	add	r7, sp, #8
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009202:	4b23      	ldr	r3, [pc, #140]	@ (8009290 <prvProcessExpiredTimer+0x98>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	617b      	str	r3, [r7, #20]
=======
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af02      	add	r7, sp, #8
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009332:	4b23      	ldr	r3, [pc, #140]	@ (80093c0 <prvProcessExpiredTimer+0x98>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	617b      	str	r3, [r7, #20]
>>>>>>> remotes/origin/jayce_working

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	3304      	adds	r3, #4
 8009210:	4618      	mov	r0, r3
 8009212:	f7fe fa03 	bl	800761c <uxListRemove>
=======
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	3304      	adds	r3, #4
 8009340:	4618      	mov	r0, r3
 8009342:	f7fe fafb 	bl	800793c <uxListRemove>
>>>>>>> remotes/origin/jayce_working
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
<<<<<<< HEAD
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800921c:	f003 0304 	and.w	r3, r3, #4
 8009220:	2b00      	cmp	r3, #0
 8009222:	d023      	beq.n	800926c <prvProcessExpiredTimer+0x74>
=======
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b00      	cmp	r3, #0
 8009352:	d023      	beq.n	800939c <prvProcessExpiredTimer+0x74>
>>>>>>> remotes/origin/jayce_working
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
<<<<<<< HEAD
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	699a      	ldr	r2, [r3, #24]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	18d1      	adds	r1, r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	6978      	ldr	r0, [r7, #20]
 8009232:	f000 f8d5 	bl	80093e0 <prvInsertTimerInActiveList>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d020      	beq.n	800927e <prvProcessExpiredTimer+0x86>
=======
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	699a      	ldr	r2, [r3, #24]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	18d1      	adds	r1, r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	6978      	ldr	r0, [r7, #20]
 8009362:	f000 f8d5 	bl	8009510 <prvInsertTimerInActiveList>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d020      	beq.n	80093ae <prvProcessExpiredTimer+0x86>
>>>>>>> remotes/origin/jayce_working
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 800923c:	2300      	movs	r3, #0
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	2300      	movs	r3, #0
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	2100      	movs	r1, #0
 8009246:	6978      	ldr	r0, [r7, #20]
 8009248:	f7ff ff88 	bl	800915c <xTimerGenericCommand>
 800924c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d114      	bne.n	800927e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	60fb      	str	r3, [r7, #12]
}
 8009266:	bf00      	nop
 8009268:	bf00      	nop
 800926a:	e7fd      	b.n	8009268 <prvProcessExpiredTimer+0x70>
=======
 800936c:	2300      	movs	r3, #0
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	2300      	movs	r3, #0
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	2100      	movs	r1, #0
 8009376:	6978      	ldr	r0, [r7, #20]
 8009378:	f7ff ff88 	bl	800928c <xTimerGenericCommand>
 800937c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d114      	bne.n	80093ae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	60fb      	str	r3, [r7, #12]
}
 8009396:	bf00      	nop
 8009398:	bf00      	nop
 800939a:	e7fd      	b.n	8009398 <prvProcessExpiredTimer+0x70>
>>>>>>> remotes/origin/jayce_working
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009272:	f023 0301 	bic.w	r3, r3, #1
 8009276:	b2da      	uxtb	r2, r3
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
=======
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093a2:	f023 0301 	bic.w	r3, r3, #1
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
>>>>>>> remotes/origin/jayce_working
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	6978      	ldr	r0, [r7, #20]
 8009284:	4798      	blx	r3
}
 8009286:	bf00      	nop
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20000f54 	.word	0x20000f54

08009294 <prvTimerTask>:
=======
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	6a1b      	ldr	r3, [r3, #32]
 80093b2:	6978      	ldr	r0, [r7, #20]
 80093b4:	4798      	blx	r3
}
 80093b6:	bf00      	nop
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	20000fac 	.word	0x20000fac

080093c4 <prvTimerTask>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
<<<<<<< HEAD
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
=======
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
<<<<<<< HEAD
 800929c:	f107 0308 	add.w	r3, r7, #8
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 f859 	bl	8009358 <prvGetNextExpireTime>
 80092a6:	60f8      	str	r0, [r7, #12]
=======
 80093cc:	f107 0308 	add.w	r3, r7, #8
 80093d0:	4618      	mov	r0, r3
 80093d2:	f000 f859 	bl	8009488 <prvGetNextExpireTime>
 80093d6:	60f8      	str	r0, [r7, #12]
>>>>>>> remotes/origin/jayce_working

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
<<<<<<< HEAD
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	4619      	mov	r1, r3
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f000 f805 	bl	80092bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80092b2:	f000 f8d7 	bl	8009464 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092b6:	bf00      	nop
 80092b8:	e7f0      	b.n	800929c <prvTimerTask+0x8>
	...

080092bc <prvProcessTimerOrBlockTask>:
=======
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	4619      	mov	r1, r3
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f000 f805 	bl	80093ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093e2:	f000 f8d7 	bl	8009594 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093e6:	bf00      	nop
 80093e8:	e7f0      	b.n	80093cc <prvTimerTask+0x8>
	...

080093ec <prvProcessTimerOrBlockTask>:
>>>>>>> remotes/origin/jayce_working
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
<<<<<<< HEAD
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
=======
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
>>>>>>> remotes/origin/jayce_working
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
<<<<<<< HEAD
 80092c6:	f7ff fa29 	bl	800871c <vTaskSuspendAll>
=======
 80093f6:	f7ff fa29 	bl	800884c <vTaskSuspendAll>
>>>>>>> remotes/origin/jayce_working
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 80092ca:	f107 0308 	add.w	r3, r7, #8
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 f866 	bl	80093a0 <prvSampleTimeNow>
 80092d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d130      	bne.n	800933e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d10a      	bne.n	80092f8 <prvProcessTimerOrBlockTask+0x3c>
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d806      	bhi.n	80092f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80092ea:	f7ff fa25 	bl	8008738 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80092ee:	68f9      	ldr	r1, [r7, #12]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7ff ff81 	bl	80091f8 <prvProcessExpiredTimer>
=======
 80093fa:	f107 0308 	add.w	r3, r7, #8
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 f866 	bl	80094d0 <prvSampleTimeNow>
 8009404:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d130      	bne.n	800946e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10a      	bne.n	8009428 <prvProcessTimerOrBlockTask+0x3c>
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	429a      	cmp	r2, r3
 8009418:	d806      	bhi.n	8009428 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800941a:	f7ff fa25 	bl	8008868 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800941e:	68f9      	ldr	r1, [r7, #12]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f7ff ff81 	bl	8009328 <prvProcessExpiredTimer>
>>>>>>> remotes/origin/jayce_working
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
<<<<<<< HEAD
 80092f6:	e024      	b.n	8009342 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d008      	beq.n	8009310 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80092fe:	4b13      	ldr	r3, [pc, #76]	@ (800934c <prvProcessTimerOrBlockTask+0x90>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d101      	bne.n	800930c <prvProcessTimerOrBlockTask+0x50>
 8009308:	2301      	movs	r3, #1
 800930a:	e000      	b.n	800930e <prvProcessTimerOrBlockTask+0x52>
 800930c:	2300      	movs	r3, #0
 800930e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009310:	4b0f      	ldr	r3, [pc, #60]	@ (8009350 <prvProcessTimerOrBlockTask+0x94>)
 8009312:	6818      	ldr	r0, [r3, #0]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	4619      	mov	r1, r3
 800931e:	f7fe ff65 	bl	80081ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009322:	f7ff fa09 	bl	8008738 <xTaskResumeAll>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10a      	bne.n	8009342 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800932c:	4b09      	ldr	r3, [pc, #36]	@ (8009354 <prvProcessTimerOrBlockTask+0x98>)
 800932e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	f3bf 8f6f 	isb	sy
}
 800933c:	e001      	b.n	8009342 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800933e:	f7ff f9fb 	bl	8008738 <xTaskResumeAll>
}
 8009342:	bf00      	nop
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	20000f58 	.word	0x20000f58
 8009350:	20000f5c 	.word	0x20000f5c
 8009354:	e000ed04 	.word	0xe000ed04

08009358 <prvGetNextExpireTime>:
=======
 8009426:	e024      	b.n	8009472 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d008      	beq.n	8009440 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800942e:	4b13      	ldr	r3, [pc, #76]	@ (800947c <prvProcessTimerOrBlockTask+0x90>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d101      	bne.n	800943c <prvProcessTimerOrBlockTask+0x50>
 8009438:	2301      	movs	r3, #1
 800943a:	e000      	b.n	800943e <prvProcessTimerOrBlockTask+0x52>
 800943c:	2300      	movs	r3, #0
 800943e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009440:	4b0f      	ldr	r3, [pc, #60]	@ (8009480 <prvProcessTimerOrBlockTask+0x94>)
 8009442:	6818      	ldr	r0, [r3, #0]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	4619      	mov	r1, r3
 800944e:	f7fe ff65 	bl	800831c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009452:	f7ff fa09 	bl	8008868 <xTaskResumeAll>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d10a      	bne.n	8009472 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800945c:	4b09      	ldr	r3, [pc, #36]	@ (8009484 <prvProcessTimerOrBlockTask+0x98>)
 800945e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	f3bf 8f6f 	isb	sy
}
 800946c:	e001      	b.n	8009472 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800946e:	f7ff f9fb 	bl	8008868 <xTaskResumeAll>
}
 8009472:	bf00      	nop
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20000fb0 	.word	0x20000fb0
 8009480:	20000fb4 	.word	0x20000fb4
 8009484:	e000ed04 	.word	0xe000ed04

08009488 <prvGetNextExpireTime>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
<<<<<<< HEAD
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
=======
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
<<<<<<< HEAD
 8009360:	4b0e      	ldr	r3, [pc, #56]	@ (800939c <prvGetNextExpireTime+0x44>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d101      	bne.n	800936e <prvGetNextExpireTime+0x16>
 800936a:	2201      	movs	r2, #1
 800936c:	e000      	b.n	8009370 <prvGetNextExpireTime+0x18>
 800936e:	2200      	movs	r2, #0
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d105      	bne.n	8009388 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800937c:	4b07      	ldr	r3, [pc, #28]	@ (800939c <prvGetNextExpireTime+0x44>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	60fb      	str	r3, [r7, #12]
 8009386:	e001      	b.n	800938c <prvGetNextExpireTime+0x34>
=======
 8009490:	4b0e      	ldr	r3, [pc, #56]	@ (80094cc <prvGetNextExpireTime+0x44>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <prvGetNextExpireTime+0x16>
 800949a:	2201      	movs	r2, #1
 800949c:	e000      	b.n	80094a0 <prvGetNextExpireTime+0x18>
 800949e:	2200      	movs	r2, #0
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d105      	bne.n	80094b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094ac:	4b07      	ldr	r3, [pc, #28]	@ (80094cc <prvGetNextExpireTime+0x44>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	60fb      	str	r3, [r7, #12]
 80094b6:	e001      	b.n	80094bc <prvGetNextExpireTime+0x34>
>>>>>>> remotes/origin/jayce_working
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
<<<<<<< HEAD
 8009388:	2300      	movs	r3, #0
 800938a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800938c:	68fb      	ldr	r3, [r7, #12]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	20000f54 	.word	0x20000f54

080093a0 <prvSampleTimeNow>:
=======
 80094b8:	2300      	movs	r3, #0
 80094ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80094bc:	68fb      	ldr	r3, [r7, #12]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	20000fac 	.word	0x20000fac

080094d0 <prvSampleTimeNow>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
<<<<<<< HEAD
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
=======
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
<<<<<<< HEAD
 80093a8:	f7ff fa64 	bl	8008874 <xTaskGetTickCount>
 80093ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80093ae:	4b0b      	ldr	r3, [pc, #44]	@ (80093dc <prvSampleTimeNow+0x3c>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d205      	bcs.n	80093c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80093b8:	f000 f93a 	bl	8009630 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	601a      	str	r2, [r3, #0]
 80093c2:	e002      	b.n	80093ca <prvSampleTimeNow+0x2a>
=======
 80094d8:	f7ff fa64 	bl	80089a4 <xTaskGetTickCount>
 80094dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094de:	4b0b      	ldr	r3, [pc, #44]	@ (800950c <prvSampleTimeNow+0x3c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d205      	bcs.n	80094f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094e8:	f000 f93a 	bl	8009760 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	601a      	str	r2, [r3, #0]
 80094f2:	e002      	b.n	80094fa <prvSampleTimeNow+0x2a>
>>>>>>> remotes/origin/jayce_working
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
<<<<<<< HEAD
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80093ca:	4a04      	ldr	r2, [pc, #16]	@ (80093dc <prvSampleTimeNow+0x3c>)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80093d0:	68fb      	ldr	r3, [r7, #12]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20000f64 	.word	0x20000f64

080093e0 <prvInsertTimerInActiveList>:
=======
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80094fa:	4a04      	ldr	r2, [pc, #16]	@ (800950c <prvSampleTimeNow+0x3c>)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009500:	68fb      	ldr	r3, [r7, #12]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	20000fbc 	.word	0x20000fbc

08009510 <prvInsertTimerInActiveList>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
<<<<<<< HEAD
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80093ee:	2300      	movs	r3, #0
 80093f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	429a      	cmp	r2, r3
 8009404:	d812      	bhi.n	800942c <prvInsertTimerInActiveList+0x4c>
=======
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
 800951c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800951e:	2300      	movs	r3, #0
 8009520:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	429a      	cmp	r2, r3
 8009534:	d812      	bhi.n	800955c <prvInsertTimerInActiveList+0x4c>
>>>>>>> remotes/origin/jayce_working
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	1ad2      	subs	r2, r2, r3
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	429a      	cmp	r2, r3
 8009412:	d302      	bcc.n	800941a <prvInsertTimerInActiveList+0x3a>
=======
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	1ad2      	subs	r2, r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	429a      	cmp	r2, r3
 8009542:	d302      	bcc.n	800954a <prvInsertTimerInActiveList+0x3a>
>>>>>>> remotes/origin/jayce_working
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 8009414:	2301      	movs	r3, #1
 8009416:	617b      	str	r3, [r7, #20]
 8009418:	e01b      	b.n	8009452 <prvInsertTimerInActiveList+0x72>
=======
 8009544:	2301      	movs	r3, #1
 8009546:	617b      	str	r3, [r7, #20]
 8009548:	e01b      	b.n	8009582 <prvInsertTimerInActiveList+0x72>
>>>>>>> remotes/origin/jayce_working
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 800941a:	4b10      	ldr	r3, [pc, #64]	@ (800945c <prvInsertTimerInActiveList+0x7c>)
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3304      	adds	r3, #4
 8009422:	4619      	mov	r1, r3
 8009424:	4610      	mov	r0, r2
 8009426:	f7fe f8c0 	bl	80075aa <vListInsert>
 800942a:	e012      	b.n	8009452 <prvInsertTimerInActiveList+0x72>
=======
 800954a:	4b10      	ldr	r3, [pc, #64]	@ (800958c <prvInsertTimerInActiveList+0x7c>)
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3304      	adds	r3, #4
 8009552:	4619      	mov	r1, r3
 8009554:	4610      	mov	r0, r2
 8009556:	f7fe f9b8 	bl	80078ca <vListInsert>
 800955a:	e012      	b.n	8009582 <prvInsertTimerInActiveList+0x72>
>>>>>>> remotes/origin/jayce_working
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
<<<<<<< HEAD
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	429a      	cmp	r2, r3
 8009432:	d206      	bcs.n	8009442 <prvInsertTimerInActiveList+0x62>
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	429a      	cmp	r2, r3
 800943a:	d302      	bcc.n	8009442 <prvInsertTimerInActiveList+0x62>
=======
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	429a      	cmp	r2, r3
 8009562:	d206      	bcs.n	8009572 <prvInsertTimerInActiveList+0x62>
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	429a      	cmp	r2, r3
 800956a:	d302      	bcc.n	8009572 <prvInsertTimerInActiveList+0x62>
>>>>>>> remotes/origin/jayce_working
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 800943c:	2301      	movs	r3, #1
 800943e:	617b      	str	r3, [r7, #20]
 8009440:	e007      	b.n	8009452 <prvInsertTimerInActiveList+0x72>
=======
 800956c:	2301      	movs	r3, #1
 800956e:	617b      	str	r3, [r7, #20]
 8009570:	e007      	b.n	8009582 <prvInsertTimerInActiveList+0x72>
>>>>>>> remotes/origin/jayce_working
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 8009442:	4b07      	ldr	r3, [pc, #28]	@ (8009460 <prvInsertTimerInActiveList+0x80>)
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	3304      	adds	r3, #4
 800944a:	4619      	mov	r1, r3
 800944c:	4610      	mov	r0, r2
 800944e:	f7fe f8ac 	bl	80075aa <vListInsert>
=======
 8009572:	4b07      	ldr	r3, [pc, #28]	@ (8009590 <prvInsertTimerInActiveList+0x80>)
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	3304      	adds	r3, #4
 800957a:	4619      	mov	r1, r3
 800957c:	4610      	mov	r0, r2
 800957e:	f7fe f9a4 	bl	80078ca <vListInsert>
>>>>>>> remotes/origin/jayce_working
		}
	}

	return xProcessTimerNow;
<<<<<<< HEAD
 8009452:	697b      	ldr	r3, [r7, #20]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	20000f58 	.word	0x20000f58
 8009460:	20000f54 	.word	0x20000f54

08009464 <prvProcessReceivedCommands>:
=======
 8009582:	697b      	ldr	r3, [r7, #20]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3718      	adds	r7, #24
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	20000fb0 	.word	0x20000fb0
 8009590:	20000fac 	.word	0x20000fac

08009594 <prvProcessReceivedCommands>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
<<<<<<< HEAD
 8009464:	b580      	push	{r7, lr}
 8009466:	b08e      	sub	sp, #56	@ 0x38
 8009468:	af02      	add	r7, sp, #8
=======
 8009594:	b580      	push	{r7, lr}
 8009596:	b08e      	sub	sp, #56	@ 0x38
 8009598:	af02      	add	r7, sp, #8
>>>>>>> remotes/origin/jayce_working
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
<<<<<<< HEAD
 800946a:	e0ce      	b.n	800960a <prvProcessReceivedCommands+0x1a6>
=======
 800959a:	e0ce      	b.n	800973a <prvProcessReceivedCommands+0x1a6>
>>>>>>> remotes/origin/jayce_working
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
<<<<<<< HEAD
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	da19      	bge.n	80094a6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009472:	1d3b      	adds	r3, r7, #4
 8009474:	3304      	adds	r3, #4
 8009476:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	da19      	bge.n	80095d6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095a2:	1d3b      	adds	r3, r7, #4
 80095a4:	3304      	adds	r3, #4
 80095a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> remotes/origin/jayce_working

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
<<<<<<< HEAD
 8009478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10b      	bne.n	8009496 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	61fb      	str	r3, [r7, #28]
}
 8009490:	bf00      	nop
 8009492:	bf00      	nop
 8009494:	e7fd      	b.n	8009492 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800949c:	6850      	ldr	r0, [r2, #4]
 800949e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094a0:	6892      	ldr	r2, [r2, #8]
 80094a2:	4611      	mov	r1, r2
 80094a4:	4798      	blx	r3
=======
 80095a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10b      	bne.n	80095c6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	61fb      	str	r3, [r7, #28]
}
 80095c0:	bf00      	nop
 80095c2:	bf00      	nop
 80095c4:	e7fd      	b.n	80095c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095cc:	6850      	ldr	r0, [r2, #4]
 80095ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095d0:	6892      	ldr	r2, [r2, #8]
 80095d2:	4611      	mov	r1, r2
 80095d4:	4798      	blx	r3
>>>>>>> remotes/origin/jayce_working
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
<<<<<<< HEAD
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f2c0 80ae 	blt.w	800960a <prvProcessReceivedCommands+0x1a6>
=======
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f2c0 80ae 	blt.w	800973a <prvProcessReceivedCommands+0x1a6>
>>>>>>> remotes/origin/jayce_working
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
<<<<<<< HEAD
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80094b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d004      	beq.n	80094c4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094bc:	3304      	adds	r3, #4
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fe f8ac 	bl	800761c <uxListRemove>
=======
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d004      	beq.n	80095f4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ec:	3304      	adds	r3, #4
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fe f9a4 	bl	800793c <uxListRemove>
>>>>>>> remotes/origin/jayce_working
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 80094c4:	463b      	mov	r3, r7
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7ff ff6a 	bl	80093a0 <prvSampleTimeNow>
 80094cc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b09      	cmp	r3, #9
 80094d2:	f200 8097 	bhi.w	8009604 <prvProcessReceivedCommands+0x1a0>
 80094d6:	a201      	add	r2, pc, #4	@ (adr r2, 80094dc <prvProcessReceivedCommands+0x78>)
 80094d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094dc:	08009505 	.word	0x08009505
 80094e0:	08009505 	.word	0x08009505
 80094e4:	08009505 	.word	0x08009505
 80094e8:	0800957b 	.word	0x0800957b
 80094ec:	0800958f 	.word	0x0800958f
 80094f0:	080095db 	.word	0x080095db
 80094f4:	08009505 	.word	0x08009505
 80094f8:	08009505 	.word	0x08009505
 80094fc:	0800957b 	.word	0x0800957b
 8009500:	0800958f 	.word	0x0800958f
=======
 80095f4:	463b      	mov	r3, r7
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7ff ff6a 	bl	80094d0 <prvSampleTimeNow>
 80095fc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2b09      	cmp	r3, #9
 8009602:	f200 8097 	bhi.w	8009734 <prvProcessReceivedCommands+0x1a0>
 8009606:	a201      	add	r2, pc, #4	@ (adr r2, 800960c <prvProcessReceivedCommands+0x78>)
 8009608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960c:	08009635 	.word	0x08009635
 8009610:	08009635 	.word	0x08009635
 8009614:	08009635 	.word	0x08009635
 8009618:	080096ab 	.word	0x080096ab
 800961c:	080096bf 	.word	0x080096bf
 8009620:	0800970b 	.word	0x0800970b
 8009624:	08009635 	.word	0x08009635
 8009628:	08009635 	.word	0x08009635
 800962c:	080096ab 	.word	0x080096ab
 8009630:	080096bf 	.word	0x080096bf
>>>>>>> remotes/origin/jayce_working
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 8009504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009506:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800950a:	f043 0301 	orr.w	r3, r3, #1
 800950e:	b2da      	uxtb	r2, r3
 8009510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009512:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	18d1      	adds	r1, r2, r3
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009524:	f7ff ff5c 	bl	80093e0 <prvInsertTimerInActiveList>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d06c      	beq.n	8009608 <prvProcessReceivedCommands+0x1a4>
=======
 8009634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009636:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800963a:	f043 0301 	orr.w	r3, r3, #1
 800963e:	b2da      	uxtb	r2, r3
 8009640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009642:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	18d1      	adds	r1, r2, r3
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009652:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009654:	f7ff ff5c 	bl	8009510 <prvInsertTimerInActiveList>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d06c      	beq.n	8009738 <prvProcessReceivedCommands+0x1a4>
>>>>>>> remotes/origin/jayce_working
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800952e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009534:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009538:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800953c:	f003 0304 	and.w	r3, r3, #4
 8009540:	2b00      	cmp	r3, #0
 8009542:	d061      	beq.n	8009608 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	441a      	add	r2, r3
 800954c:	2300      	movs	r3, #0
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	2300      	movs	r3, #0
 8009552:	2100      	movs	r1, #0
 8009554:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009556:	f7ff fe01 	bl	800915c <xTimerGenericCommand>
 800955a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800955c:	6a3b      	ldr	r3, [r7, #32]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d152      	bne.n	8009608 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009566:	f383 8811 	msr	BASEPRI, r3
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	61bb      	str	r3, [r7, #24]
}
 8009574:	bf00      	nop
 8009576:	bf00      	nop
 8009578:	e7fd      	b.n	8009576 <prvProcessReceivedCommands+0x112>
=======
 800965e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009664:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009668:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800966c:	f003 0304 	and.w	r3, r3, #4
 8009670:	2b00      	cmp	r3, #0
 8009672:	d061      	beq.n	8009738 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	441a      	add	r2, r3
 800967c:	2300      	movs	r3, #0
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	2300      	movs	r3, #0
 8009682:	2100      	movs	r1, #0
 8009684:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009686:	f7ff fe01 	bl	800928c <xTimerGenericCommand>
 800968a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800968c:	6a3b      	ldr	r3, [r7, #32]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d152      	bne.n	8009738 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009696:	f383 8811 	msr	BASEPRI, r3
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	61bb      	str	r3, [r7, #24]
}
 80096a4:	bf00      	nop
 80096a6:	bf00      	nop
 80096a8:	e7fd      	b.n	80096a6 <prvProcessReceivedCommands+0x112>
>>>>>>> remotes/origin/jayce_working
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800957a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800957c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009580:	f023 0301 	bic.w	r3, r3, #1
 8009584:	b2da      	uxtb	r2, r3
 8009586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009588:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800958c:	e03d      	b.n	800960a <prvProcessReceivedCommands+0x1a6>
=======
 80096aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096b0:	f023 0301 	bic.w	r3, r3, #1
 80096b4:	b2da      	uxtb	r2, r3
 80096b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80096bc:	e03d      	b.n	800973a <prvProcessReceivedCommands+0x1a6>
>>>>>>> remotes/origin/jayce_working

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800958e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009590:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009594:	f043 0301 	orr.w	r3, r3, #1
 8009598:	b2da      	uxtb	r2, r3
 800959a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80095a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10b      	bne.n	80095c6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	617b      	str	r3, [r7, #20]
}
 80095c0:	bf00      	nop
 80095c2:	bf00      	nop
 80095c4:	e7fd      	b.n	80095c2 <prvProcessReceivedCommands+0x15e>
=======
 80096be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096c4:	f043 0301 	orr.w	r3, r3, #1
 80096c8:	b2da      	uxtb	r2, r3
 80096ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80096d0:	68ba      	ldr	r2, [r7, #8]
 80096d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80096d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10b      	bne.n	80096f6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	617b      	str	r3, [r7, #20]
}
 80096f0:	bf00      	nop
 80096f2:	bf00      	nop
 80096f4:	e7fd      	b.n	80096f2 <prvProcessReceivedCommands+0x15e>
>>>>>>> remotes/origin/jayce_working
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
<<<<<<< HEAD
 80095c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c8:	699a      	ldr	r2, [r3, #24]
 80095ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095cc:	18d1      	adds	r1, r2, r3
 80095ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095d4:	f7ff ff04 	bl	80093e0 <prvInsertTimerInActiveList>
					break;
 80095d8:	e017      	b.n	800960a <prvProcessReceivedCommands+0x1a6>
=======
 80096f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f8:	699a      	ldr	r2, [r3, #24]
 80096fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fc:	18d1      	adds	r1, r2, r3
 80096fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009704:	f7ff ff04 	bl	8009510 <prvInsertTimerInActiveList>
					break;
 8009708:	e017      	b.n	800973a <prvProcessReceivedCommands+0x1a6>
>>>>>>> remotes/origin/jayce_working
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
<<<<<<< HEAD
 80095da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095e0:	f003 0302 	and.w	r3, r3, #2
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d103      	bne.n	80095f0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80095e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095ea:	f000 fbe5 	bl	8009db8 <vPortFree>
=======
 800970a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009710:	f003 0302 	and.w	r3, r3, #2
 8009714:	2b00      	cmp	r3, #0
 8009716:	d103      	bne.n	8009720 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800971a:	f000 fbe5 	bl	8009ee8 <vPortFree>
>>>>>>> remotes/origin/jayce_working
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
<<<<<<< HEAD
 80095ee:	e00c      	b.n	800960a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095f6:	f023 0301 	bic.w	r3, r3, #1
 80095fa:	b2da      	uxtb	r2, r3
 80095fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009602:	e002      	b.n	800960a <prvProcessReceivedCommands+0x1a6>
=======
 800971e:	e00c      	b.n	800973a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009722:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009726:	f023 0301 	bic.w	r3, r3, #1
 800972a:	b2da      	uxtb	r2, r3
 800972c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800972e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009732:	e002      	b.n	800973a <prvProcessReceivedCommands+0x1a6>
>>>>>>> remotes/origin/jayce_working

				default	:
					/* Don't expect to get here. */
					break;
<<<<<<< HEAD
 8009604:	bf00      	nop
 8009606:	e000      	b.n	800960a <prvProcessReceivedCommands+0x1a6>
					break;
 8009608:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800960a:	4b08      	ldr	r3, [pc, #32]	@ (800962c <prvProcessReceivedCommands+0x1c8>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	1d39      	adds	r1, r7, #4
 8009610:	2200      	movs	r2, #0
 8009612:	4618      	mov	r0, r3
 8009614:	f7fe fb80 	bl	8007d18 <xQueueReceive>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	f47f af26 	bne.w	800946c <prvProcessReceivedCommands+0x8>
=======
 8009734:	bf00      	nop
 8009736:	e000      	b.n	800973a <prvProcessReceivedCommands+0x1a6>
					break;
 8009738:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800973a:	4b08      	ldr	r3, [pc, #32]	@ (800975c <prvProcessReceivedCommands+0x1c8>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	1d39      	adds	r1, r7, #4
 8009740:	2200      	movs	r2, #0
 8009742:	4618      	mov	r0, r3
 8009744:	f7fe fbce 	bl	8007ee4 <xQueueReceive>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	f47f af26 	bne.w	800959c <prvProcessReceivedCommands+0x8>
>>>>>>> remotes/origin/jayce_working
			}
		}
	}
}
<<<<<<< HEAD
 8009620:	bf00      	nop
 8009622:	bf00      	nop
 8009624:	3730      	adds	r7, #48	@ 0x30
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	20000f5c 	.word	0x20000f5c

08009630 <prvSwitchTimerLists>:
=======
 8009750:	bf00      	nop
 8009752:	bf00      	nop
 8009754:	3730      	adds	r7, #48	@ 0x30
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	20000fb4 	.word	0x20000fb4

08009760 <prvSwitchTimerLists>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
<<<<<<< HEAD
 8009630:	b580      	push	{r7, lr}
 8009632:	b088      	sub	sp, #32
 8009634:	af02      	add	r7, sp, #8
=======
 8009760:	b580      	push	{r7, lr}
 8009762:	b088      	sub	sp, #32
 8009764:	af02      	add	r7, sp, #8
>>>>>>> remotes/origin/jayce_working

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
<<<<<<< HEAD
 8009636:	e049      	b.n	80096cc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009638:	4b2e      	ldr	r3, [pc, #184]	@ (80096f4 <prvSwitchTimerLists+0xc4>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009642:	4b2c      	ldr	r3, [pc, #176]	@ (80096f4 <prvSwitchTimerLists+0xc4>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	3304      	adds	r3, #4
 8009650:	4618      	mov	r0, r3
 8009652:	f7fd ffe3 	bl	800761c <uxListRemove>
=======
 8009766:	e049      	b.n	80097fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009768:	4b2e      	ldr	r3, [pc, #184]	@ (8009824 <prvSwitchTimerLists+0xc4>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009772:	4b2c      	ldr	r3, [pc, #176]	@ (8009824 <prvSwitchTimerLists+0xc4>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	3304      	adds	r3, #4
 8009780:	4618      	mov	r0, r3
 8009782:	f7fe f8db 	bl	800793c <uxListRemove>
>>>>>>> remotes/origin/jayce_working
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009664:	f003 0304 	and.w	r3, r3, #4
 8009668:	2b00      	cmp	r3, #0
 800966a:	d02f      	beq.n	80096cc <prvSwitchTimerLists+0x9c>
=======
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6a1b      	ldr	r3, [r3, #32]
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009794:	f003 0304 	and.w	r3, r3, #4
 8009798:	2b00      	cmp	r3, #0
 800979a:	d02f      	beq.n	80097fc <prvSwitchTimerLists+0x9c>
>>>>>>> remotes/origin/jayce_working
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
<<<<<<< HEAD
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	4413      	add	r3, r2
 8009674:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	429a      	cmp	r2, r3
 800967c:	d90e      	bls.n	800969c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800968a:	4b1a      	ldr	r3, [pc, #104]	@ (80096f4 <prvSwitchTimerLists+0xc4>)
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3304      	adds	r3, #4
 8009692:	4619      	mov	r1, r3
 8009694:	4610      	mov	r0, r2
 8009696:	f7fd ff88 	bl	80075aa <vListInsert>
 800969a:	e017      	b.n	80096cc <prvSwitchTimerLists+0x9c>
=======
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	693a      	ldr	r2, [r7, #16]
 80097a2:	4413      	add	r3, r2
 80097a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d90e      	bls.n	80097cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097ba:	4b1a      	ldr	r3, [pc, #104]	@ (8009824 <prvSwitchTimerLists+0xc4>)
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	3304      	adds	r3, #4
 80097c2:	4619      	mov	r1, r3
 80097c4:	4610      	mov	r0, r2
 80097c6:	f7fe f880 	bl	80078ca <vListInsert>
 80097ca:	e017      	b.n	80097fc <prvSwitchTimerLists+0x9c>
>>>>>>> remotes/origin/jayce_working
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 800969c:	2300      	movs	r3, #0
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	2300      	movs	r3, #0
 80096a2:	693a      	ldr	r2, [r7, #16]
 80096a4:	2100      	movs	r1, #0
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f7ff fd58 	bl	800915c <xTimerGenericCommand>
 80096ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10b      	bne.n	80096cc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	603b      	str	r3, [r7, #0]
}
 80096c6:	bf00      	nop
 80096c8:	bf00      	nop
 80096ca:	e7fd      	b.n	80096c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096cc:	4b09      	ldr	r3, [pc, #36]	@ (80096f4 <prvSwitchTimerLists+0xc4>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1b0      	bne.n	8009638 <prvSwitchTimerLists+0x8>
=======
 80097cc:	2300      	movs	r3, #0
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	2300      	movs	r3, #0
 80097d2:	693a      	ldr	r2, [r7, #16]
 80097d4:	2100      	movs	r1, #0
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f7ff fd58 	bl	800928c <xTimerGenericCommand>
 80097dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10b      	bne.n	80097fc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	603b      	str	r3, [r7, #0]
}
 80097f6:	bf00      	nop
 80097f8:	bf00      	nop
 80097fa:	e7fd      	b.n	80097f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097fc:	4b09      	ldr	r3, [pc, #36]	@ (8009824 <prvSwitchTimerLists+0xc4>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1b0      	bne.n	8009768 <prvSwitchTimerLists+0x8>
>>>>>>> remotes/origin/jayce_working
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
<<<<<<< HEAD
 80096d6:	4b07      	ldr	r3, [pc, #28]	@ (80096f4 <prvSwitchTimerLists+0xc4>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80096dc:	4b06      	ldr	r3, [pc, #24]	@ (80096f8 <prvSwitchTimerLists+0xc8>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a04      	ldr	r2, [pc, #16]	@ (80096f4 <prvSwitchTimerLists+0xc4>)
 80096e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80096e4:	4a04      	ldr	r2, [pc, #16]	@ (80096f8 <prvSwitchTimerLists+0xc8>)
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	6013      	str	r3, [r2, #0]
}
 80096ea:	bf00      	nop
 80096ec:	3718      	adds	r7, #24
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	20000f54 	.word	0x20000f54
 80096f8:	20000f58 	.word	0x20000f58

080096fc <prvCheckForValidListAndQueue>:
=======
 8009806:	4b07      	ldr	r3, [pc, #28]	@ (8009824 <prvSwitchTimerLists+0xc4>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800980c:	4b06      	ldr	r3, [pc, #24]	@ (8009828 <prvSwitchTimerLists+0xc8>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a04      	ldr	r2, [pc, #16]	@ (8009824 <prvSwitchTimerLists+0xc4>)
 8009812:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009814:	4a04      	ldr	r2, [pc, #16]	@ (8009828 <prvSwitchTimerLists+0xc8>)
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	6013      	str	r3, [r2, #0]
}
 800981a:	bf00      	nop
 800981c:	3718      	adds	r7, #24
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	20000fac 	.word	0x20000fac
 8009828:	20000fb0 	.word	0x20000fb0

0800982c <prvCheckForValidListAndQueue>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
<<<<<<< HEAD
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af02      	add	r7, sp, #8
=======
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af02      	add	r7, sp, #8
>>>>>>> remotes/origin/jayce_working
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 8009702:	f000 f969 	bl	80099d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009706:	4b15      	ldr	r3, [pc, #84]	@ (800975c <prvCheckForValidListAndQueue+0x60>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d120      	bne.n	8009750 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800970e:	4814      	ldr	r0, [pc, #80]	@ (8009760 <prvCheckForValidListAndQueue+0x64>)
 8009710:	f7fd fefa 	bl	8007508 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009714:	4813      	ldr	r0, [pc, #76]	@ (8009764 <prvCheckForValidListAndQueue+0x68>)
 8009716:	f7fd fef7 	bl	8007508 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800971a:	4b13      	ldr	r3, [pc, #76]	@ (8009768 <prvCheckForValidListAndQueue+0x6c>)
 800971c:	4a10      	ldr	r2, [pc, #64]	@ (8009760 <prvCheckForValidListAndQueue+0x64>)
 800971e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009720:	4b12      	ldr	r3, [pc, #72]	@ (800976c <prvCheckForValidListAndQueue+0x70>)
 8009722:	4a10      	ldr	r2, [pc, #64]	@ (8009764 <prvCheckForValidListAndQueue+0x68>)
 8009724:	601a      	str	r2, [r3, #0]
=======
 8009832:	f000 f969 	bl	8009b08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009836:	4b15      	ldr	r3, [pc, #84]	@ (800988c <prvCheckForValidListAndQueue+0x60>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d120      	bne.n	8009880 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800983e:	4814      	ldr	r0, [pc, #80]	@ (8009890 <prvCheckForValidListAndQueue+0x64>)
 8009840:	f7fd fff2 	bl	8007828 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009844:	4813      	ldr	r0, [pc, #76]	@ (8009894 <prvCheckForValidListAndQueue+0x68>)
 8009846:	f7fd ffef 	bl	8007828 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800984a:	4b13      	ldr	r3, [pc, #76]	@ (8009898 <prvCheckForValidListAndQueue+0x6c>)
 800984c:	4a10      	ldr	r2, [pc, #64]	@ (8009890 <prvCheckForValidListAndQueue+0x64>)
 800984e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009850:	4b12      	ldr	r3, [pc, #72]	@ (800989c <prvCheckForValidListAndQueue+0x70>)
 8009852:	4a10      	ldr	r2, [pc, #64]	@ (8009894 <prvCheckForValidListAndQueue+0x68>)
 8009854:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
<<<<<<< HEAD
 8009726:	2300      	movs	r3, #0
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	4b11      	ldr	r3, [pc, #68]	@ (8009770 <prvCheckForValidListAndQueue+0x74>)
 800972c:	4a11      	ldr	r2, [pc, #68]	@ (8009774 <prvCheckForValidListAndQueue+0x78>)
 800972e:	2110      	movs	r1, #16
 8009730:	200a      	movs	r0, #10
 8009732:	f7fe f807 	bl	8007744 <xQueueGenericCreateStatic>
 8009736:	4603      	mov	r3, r0
 8009738:	4a08      	ldr	r2, [pc, #32]	@ (800975c <prvCheckForValidListAndQueue+0x60>)
 800973a:	6013      	str	r3, [r2, #0]
=======
 8009856:	2300      	movs	r3, #0
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	4b11      	ldr	r3, [pc, #68]	@ (80098a0 <prvCheckForValidListAndQueue+0x74>)
 800985c:	4a11      	ldr	r2, [pc, #68]	@ (80098a4 <prvCheckForValidListAndQueue+0x78>)
 800985e:	2110      	movs	r1, #16
 8009860:	200a      	movs	r0, #10
 8009862:	f7fe f8ff 	bl	8007a64 <xQueueGenericCreateStatic>
 8009866:	4603      	mov	r3, r0
 8009868:	4a08      	ldr	r2, [pc, #32]	@ (800988c <prvCheckForValidListAndQueue+0x60>)
 800986a:	6013      	str	r3, [r2, #0]
>>>>>>> remotes/origin/jayce_working
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
<<<<<<< HEAD
 800973c:	4b07      	ldr	r3, [pc, #28]	@ (800975c <prvCheckForValidListAndQueue+0x60>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d005      	beq.n	8009750 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009744:	4b05      	ldr	r3, [pc, #20]	@ (800975c <prvCheckForValidListAndQueue+0x60>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	490b      	ldr	r1, [pc, #44]	@ (8009778 <prvCheckForValidListAndQueue+0x7c>)
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe fcfa 	bl	8008144 <vQueueAddToRegistry>
=======
 800986c:	4b07      	ldr	r3, [pc, #28]	@ (800988c <prvCheckForValidListAndQueue+0x60>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d005      	beq.n	8009880 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009874:	4b05      	ldr	r3, [pc, #20]	@ (800988c <prvCheckForValidListAndQueue+0x60>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	490b      	ldr	r1, [pc, #44]	@ (80098a8 <prvCheckForValidListAndQueue+0x7c>)
 800987a:	4618      	mov	r0, r3
 800987c:	f7fe fd24 	bl	80082c8 <vQueueAddToRegistry>
>>>>>>> remotes/origin/jayce_working
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8009750:	f000 f974 	bl	8009a3c <vPortExitCritical>
}
 8009754:	bf00      	nop
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	20000f5c 	.word	0x20000f5c
 8009760:	20000f2c 	.word	0x20000f2c
 8009764:	20000f40 	.word	0x20000f40
 8009768:	20000f54 	.word	0x20000f54
 800976c:	20000f58 	.word	0x20000f58
 8009770:	20001008 	.word	0x20001008
 8009774:	20000f68 	.word	0x20000f68
 8009778:	0800a238 	.word	0x0800a238

0800977c <pxPortInitialiseStack>:
=======
 8009880:	f000 f974 	bl	8009b6c <vPortExitCritical>
}
 8009884:	bf00      	nop
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	20000fb4 	.word	0x20000fb4
 8009890:	20000f84 	.word	0x20000f84
 8009894:	20000f98 	.word	0x20000f98
 8009898:	20000fac 	.word	0x20000fac
 800989c:	20000fb0 	.word	0x20000fb0
 80098a0:	20001060 	.word	0x20001060
 80098a4:	20000fc0 	.word	0x20000fc0
 80098a8:	0800a36c 	.word	0x0800a36c

080098ac <pxPortInitialiseStack>:
>>>>>>> remotes/origin/jayce_working

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< HEAD
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
=======
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
>>>>>>> remotes/origin/jayce_working
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< HEAD
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	3b04      	subs	r3, #4
 800978c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	3b04      	subs	r3, #4
 800979a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	f023 0201 	bic.w	r2, r3, #1
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	3b04      	subs	r3, #4
 80097aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097ac:	4a0c      	ldr	r2, [pc, #48]	@ (80097e0 <pxPortInitialiseStack+0x64>)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3b14      	subs	r3, #20
 80097b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	601a      	str	r2, [r3, #0]
=======
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	3b04      	subs	r3, #4
 80098bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80098c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	3b04      	subs	r3, #4
 80098ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f023 0201 	bic.w	r2, r3, #1
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	3b04      	subs	r3, #4
 80098da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098dc:	4a0c      	ldr	r2, [pc, #48]	@ (8009910 <pxPortInitialiseStack+0x64>)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3b14      	subs	r3, #20
 80098e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< HEAD
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	3b04      	subs	r3, #4
 80097c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f06f 0202 	mvn.w	r2, #2
 80097ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	3b20      	subs	r3, #32
 80097d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097d2:	68fb      	ldr	r3, [r7, #12]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	080097e5 	.word	0x080097e5

080097e4 <prvTaskExitError>:
=======
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	3b04      	subs	r3, #4
 80098f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f06f 0202 	mvn.w	r2, #2
 80098fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3b20      	subs	r3, #32
 8009900:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009902:	68fb      	ldr	r3, [r7, #12]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr
 8009910:	08009915 	.word	0x08009915

08009914 <prvTaskExitError>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< HEAD
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	607b      	str	r3, [r7, #4]
=======
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800991a:	2300      	movs	r3, #0
 800991c:	607b      	str	r3, [r7, #4]
>>>>>>> remotes/origin/jayce_working
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< HEAD
 80097ee:	4b13      	ldr	r3, [pc, #76]	@ (800983c <prvTaskExitError+0x58>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097f6:	d00b      	beq.n	8009810 <prvTaskExitError+0x2c>
	__asm volatile
 80097f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097fc:	f383 8811 	msr	BASEPRI, r3
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	60fb      	str	r3, [r7, #12]
}
 800980a:	bf00      	nop
 800980c:	bf00      	nop
 800980e:	e7fd      	b.n	800980c <prvTaskExitError+0x28>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	60bb      	str	r3, [r7, #8]
}
 8009822:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009824:	bf00      	nop
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d0fc      	beq.n	8009826 <prvTaskExitError+0x42>
=======
 800991e:	4b13      	ldr	r3, [pc, #76]	@ (800996c <prvTaskExitError+0x58>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009926:	d00b      	beq.n	8009940 <prvTaskExitError+0x2c>
	__asm volatile
 8009928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	60fb      	str	r3, [r7, #12]
}
 800993a:	bf00      	nop
 800993c:	bf00      	nop
 800993e:	e7fd      	b.n	800993c <prvTaskExitError+0x28>
	__asm volatile
 8009940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	60bb      	str	r3, [r7, #8]
}
 8009952:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009954:	bf00      	nop
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d0fc      	beq.n	8009956 <prvTaskExitError+0x42>
>>>>>>> remotes/origin/jayce_working
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< HEAD
 800982c:	bf00      	nop
 800982e:	bf00      	nop
 8009830:	3714      	adds	r7, #20
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	2000000c 	.word	0x2000000c

08009840 <SVC_Handler>:
=======
 800995c:	bf00      	nop
 800995e:	bf00      	nop
 8009960:	3714      	adds	r7, #20
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	2000000c 	.word	0x2000000c

08009970 <SVC_Handler>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< HEAD
 8009840:	4b07      	ldr	r3, [pc, #28]	@ (8009860 <pxCurrentTCBConst2>)
 8009842:	6819      	ldr	r1, [r3, #0]
 8009844:	6808      	ldr	r0, [r1, #0]
 8009846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984a:	f380 8809 	msr	PSP, r0
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f04f 0000 	mov.w	r0, #0
 8009856:	f380 8811 	msr	BASEPRI, r0
 800985a:	4770      	bx	lr
 800985c:	f3af 8000 	nop.w

08009860 <pxCurrentTCBConst2>:
 8009860:	20000a2c 	.word	0x20000a2c
=======
 8009970:	4b07      	ldr	r3, [pc, #28]	@ (8009990 <pxCurrentTCBConst2>)
 8009972:	6819      	ldr	r1, [r3, #0]
 8009974:	6808      	ldr	r0, [r1, #0]
 8009976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800997a:	f380 8809 	msr	PSP, r0
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f04f 0000 	mov.w	r0, #0
 8009986:	f380 8811 	msr	BASEPRI, r0
 800998a:	4770      	bx	lr
 800998c:	f3af 8000 	nop.w

08009990 <pxCurrentTCBConst2>:
 8009990:	20000a84 	.word	0x20000a84
>>>>>>> remotes/origin/jayce_working
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< HEAD
 8009864:	bf00      	nop
 8009866:	bf00      	nop

08009868 <prvPortStartFirstTask>:
=======
 8009994:	bf00      	nop
 8009996:	bf00      	nop

08009998 <prvPortStartFirstTask>:
>>>>>>> remotes/origin/jayce_working
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< HEAD
 8009868:	4808      	ldr	r0, [pc, #32]	@ (800988c <prvPortStartFirstTask+0x24>)
 800986a:	6800      	ldr	r0, [r0, #0]
 800986c:	6800      	ldr	r0, [r0, #0]
 800986e:	f380 8808 	msr	MSP, r0
 8009872:	f04f 0000 	mov.w	r0, #0
 8009876:	f380 8814 	msr	CONTROL, r0
 800987a:	b662      	cpsie	i
 800987c:	b661      	cpsie	f
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	df00      	svc	0
 8009888:	bf00      	nop
=======
 8009998:	4808      	ldr	r0, [pc, #32]	@ (80099bc <prvPortStartFirstTask+0x24>)
 800999a:	6800      	ldr	r0, [r0, #0]
 800999c:	6800      	ldr	r0, [r0, #0]
 800999e:	f380 8808 	msr	MSP, r0
 80099a2:	f04f 0000 	mov.w	r0, #0
 80099a6:	f380 8814 	msr	CONTROL, r0
 80099aa:	b662      	cpsie	i
 80099ac:	b661      	cpsie	f
 80099ae:	f3bf 8f4f 	dsb	sy
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	df00      	svc	0
 80099b8:	bf00      	nop
>>>>>>> remotes/origin/jayce_working
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< HEAD
 800988a:	bf00      	nop
 800988c:	e000ed08 	.word	0xe000ed08

08009890 <xPortStartScheduler>:
=======
 80099ba:	bf00      	nop
 80099bc:	e000ed08 	.word	0xe000ed08

080099c0 <xPortStartScheduler>:
>>>>>>> remotes/origin/jayce_working

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< HEAD
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
=======
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< HEAD
 8009896:	4b47      	ldr	r3, [pc, #284]	@ (80099b4 <xPortStartScheduler+0x124>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a47      	ldr	r2, [pc, #284]	@ (80099b8 <xPortStartScheduler+0x128>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d10b      	bne.n	80098b8 <xPortStartScheduler+0x28>
	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	613b      	str	r3, [r7, #16]
}
 80098b2:	bf00      	nop
 80098b4:	bf00      	nop
 80098b6:	e7fd      	b.n	80098b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098b8:	4b3e      	ldr	r3, [pc, #248]	@ (80099b4 <xPortStartScheduler+0x124>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a3f      	ldr	r2, [pc, #252]	@ (80099bc <xPortStartScheduler+0x12c>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d10b      	bne.n	80098da <xPortStartScheduler+0x4a>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	60fb      	str	r3, [r7, #12]
}
 80098d4:	bf00      	nop
 80098d6:	bf00      	nop
 80098d8:	e7fd      	b.n	80098d6 <xPortStartScheduler+0x46>
=======
 80099c6:	4b47      	ldr	r3, [pc, #284]	@ (8009ae4 <xPortStartScheduler+0x124>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a47      	ldr	r2, [pc, #284]	@ (8009ae8 <xPortStartScheduler+0x128>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d10b      	bne.n	80099e8 <xPortStartScheduler+0x28>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	613b      	str	r3, [r7, #16]
}
 80099e2:	bf00      	nop
 80099e4:	bf00      	nop
 80099e6:	e7fd      	b.n	80099e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80099e8:	4b3e      	ldr	r3, [pc, #248]	@ (8009ae4 <xPortStartScheduler+0x124>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a3f      	ldr	r2, [pc, #252]	@ (8009aec <xPortStartScheduler+0x12c>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d10b      	bne.n	8009a0a <xPortStartScheduler+0x4a>
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	60fb      	str	r3, [r7, #12]
}
 8009a04:	bf00      	nop
 8009a06:	bf00      	nop
 8009a08:	e7fd      	b.n	8009a06 <xPortStartScheduler+0x46>
>>>>>>> remotes/origin/jayce_working

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< HEAD
 80098da:	4b39      	ldr	r3, [pc, #228]	@ (80099c0 <xPortStartScheduler+0x130>)
 80098dc:	617b      	str	r3, [r7, #20]
=======
 8009a0a:	4b39      	ldr	r3, [pc, #228]	@ (8009af0 <xPortStartScheduler+0x130>)
 8009a0c:	617b      	str	r3, [r7, #20]
>>>>>>> remotes/origin/jayce_working
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< HEAD
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	607b      	str	r3, [r7, #4]
=======
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	607b      	str	r3, [r7, #4]
>>>>>>> remotes/origin/jayce_working

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< HEAD
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	22ff      	movs	r2, #255	@ 0xff
 80098ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098f4:	78fb      	ldrb	r3, [r7, #3]
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	4b31      	ldr	r3, [pc, #196]	@ (80099c4 <xPortStartScheduler+0x134>)
 8009900:	701a      	strb	r2, [r3, #0]
=======
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	22ff      	movs	r2, #255	@ 0xff
 8009a1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a24:	78fb      	ldrb	r3, [r7, #3]
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	4b31      	ldr	r3, [pc, #196]	@ (8009af4 <xPortStartScheduler+0x134>)
 8009a30:	701a      	strb	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< HEAD
 8009902:	4b31      	ldr	r3, [pc, #196]	@ (80099c8 <xPortStartScheduler+0x138>)
 8009904:	2207      	movs	r2, #7
 8009906:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009908:	e009      	b.n	800991e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800990a:	4b2f      	ldr	r3, [pc, #188]	@ (80099c8 <xPortStartScheduler+0x138>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3b01      	subs	r3, #1
 8009910:	4a2d      	ldr	r2, [pc, #180]	@ (80099c8 <xPortStartScheduler+0x138>)
 8009912:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009914:	78fb      	ldrb	r3, [r7, #3]
 8009916:	b2db      	uxtb	r3, r3
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	b2db      	uxtb	r3, r3
 800991c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800991e:	78fb      	ldrb	r3, [r7, #3]
 8009920:	b2db      	uxtb	r3, r3
 8009922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009926:	2b80      	cmp	r3, #128	@ 0x80
 8009928:	d0ef      	beq.n	800990a <xPortStartScheduler+0x7a>
=======
 8009a32:	4b31      	ldr	r3, [pc, #196]	@ (8009af8 <xPortStartScheduler+0x138>)
 8009a34:	2207      	movs	r2, #7
 8009a36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a38:	e009      	b.n	8009a4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8009af8 <xPortStartScheduler+0x138>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	4a2d      	ldr	r2, [pc, #180]	@ (8009af8 <xPortStartScheduler+0x138>)
 8009a42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a44:	78fb      	ldrb	r3, [r7, #3]
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	005b      	lsls	r3, r3, #1
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a4e:	78fb      	ldrb	r3, [r7, #3]
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a56:	2b80      	cmp	r3, #128	@ 0x80
 8009a58:	d0ef      	beq.n	8009a3a <xPortStartScheduler+0x7a>
>>>>>>> remotes/origin/jayce_working
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< HEAD
 800992a:	4b27      	ldr	r3, [pc, #156]	@ (80099c8 <xPortStartScheduler+0x138>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f1c3 0307 	rsb	r3, r3, #7
 8009932:	2b04      	cmp	r3, #4
 8009934:	d00b      	beq.n	800994e <xPortStartScheduler+0xbe>
	__asm volatile
 8009936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800993a:	f383 8811 	msr	BASEPRI, r3
 800993e:	f3bf 8f6f 	isb	sy
 8009942:	f3bf 8f4f 	dsb	sy
 8009946:	60bb      	str	r3, [r7, #8]
}
 8009948:	bf00      	nop
 800994a:	bf00      	nop
 800994c:	e7fd      	b.n	800994a <xPortStartScheduler+0xba>
=======
 8009a5a:	4b27      	ldr	r3, [pc, #156]	@ (8009af8 <xPortStartScheduler+0x138>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f1c3 0307 	rsb	r3, r3, #7
 8009a62:	2b04      	cmp	r3, #4
 8009a64:	d00b      	beq.n	8009a7e <xPortStartScheduler+0xbe>
	__asm volatile
 8009a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	60bb      	str	r3, [r7, #8]
}
 8009a78:	bf00      	nop
 8009a7a:	bf00      	nop
 8009a7c:	e7fd      	b.n	8009a7a <xPortStartScheduler+0xba>
>>>>>>> remotes/origin/jayce_working
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< HEAD
 800994e:	4b1e      	ldr	r3, [pc, #120]	@ (80099c8 <xPortStartScheduler+0x138>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	021b      	lsls	r3, r3, #8
 8009954:	4a1c      	ldr	r2, [pc, #112]	@ (80099c8 <xPortStartScheduler+0x138>)
 8009956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009958:	4b1b      	ldr	r3, [pc, #108]	@ (80099c8 <xPortStartScheduler+0x138>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009960:	4a19      	ldr	r2, [pc, #100]	@ (80099c8 <xPortStartScheduler+0x138>)
 8009962:	6013      	str	r3, [r2, #0]
=======
 8009a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8009af8 <xPortStartScheduler+0x138>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	021b      	lsls	r3, r3, #8
 8009a84:	4a1c      	ldr	r2, [pc, #112]	@ (8009af8 <xPortStartScheduler+0x138>)
 8009a86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a88:	4b1b      	ldr	r3, [pc, #108]	@ (8009af8 <xPortStartScheduler+0x138>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a90:	4a19      	ldr	r2, [pc, #100]	@ (8009af8 <xPortStartScheduler+0x138>)
 8009a92:	6013      	str	r3, [r2, #0]
>>>>>>> remotes/origin/jayce_working

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< HEAD
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	b2da      	uxtb	r2, r3
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	701a      	strb	r2, [r3, #0]
=======
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	701a      	strb	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< HEAD
 800996c:	4b17      	ldr	r3, [pc, #92]	@ (80099cc <xPortStartScheduler+0x13c>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a16      	ldr	r2, [pc, #88]	@ (80099cc <xPortStartScheduler+0x13c>)
 8009972:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009978:	4b14      	ldr	r3, [pc, #80]	@ (80099cc <xPortStartScheduler+0x13c>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a13      	ldr	r2, [pc, #76]	@ (80099cc <xPortStartScheduler+0x13c>)
 800997e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009982:	6013      	str	r3, [r2, #0]
=======
 8009a9c:	4b17      	ldr	r3, [pc, #92]	@ (8009afc <xPortStartScheduler+0x13c>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a16      	ldr	r2, [pc, #88]	@ (8009afc <xPortStartScheduler+0x13c>)
 8009aa2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009aa6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009aa8:	4b14      	ldr	r3, [pc, #80]	@ (8009afc <xPortStartScheduler+0x13c>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a13      	ldr	r2, [pc, #76]	@ (8009afc <xPortStartScheduler+0x13c>)
 8009aae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009ab2:	6013      	str	r3, [r2, #0]
>>>>>>> remotes/origin/jayce_working

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< HEAD
 8009984:	f000 f8da 	bl	8009b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009988:	4b11      	ldr	r3, [pc, #68]	@ (80099d0 <xPortStartScheduler+0x140>)
 800998a:	2200      	movs	r2, #0
 800998c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800998e:	f000 f8f9 	bl	8009b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009992:	4b10      	ldr	r3, [pc, #64]	@ (80099d4 <xPortStartScheduler+0x144>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a0f      	ldr	r2, [pc, #60]	@ (80099d4 <xPortStartScheduler+0x144>)
 8009998:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800999c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800999e:	f7ff ff63 	bl	8009868 <prvPortStartFirstTask>
=======
 8009ab4:	f000 f8da 	bl	8009c6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ab8:	4b11      	ldr	r3, [pc, #68]	@ (8009b00 <xPortStartScheduler+0x140>)
 8009aba:	2200      	movs	r2, #0
 8009abc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009abe:	f000 f8f9 	bl	8009cb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ac2:	4b10      	ldr	r3, [pc, #64]	@ (8009b04 <xPortStartScheduler+0x144>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8009b04 <xPortStartScheduler+0x144>)
 8009ac8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009acc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ace:	f7ff ff63 	bl	8009998 <prvPortStartFirstTask>
>>>>>>> remotes/origin/jayce_working
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< HEAD
 80099a2:	f7ff f831 	bl	8008a08 <vTaskSwitchContext>
	prvTaskExitError();
 80099a6:	f7ff ff1d 	bl	80097e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3718      	adds	r7, #24
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	e000ed00 	.word	0xe000ed00
 80099b8:	410fc271 	.word	0x410fc271
 80099bc:	410fc270 	.word	0x410fc270
 80099c0:	e000e400 	.word	0xe000e400
 80099c4:	20001058 	.word	0x20001058
 80099c8:	2000105c 	.word	0x2000105c
 80099cc:	e000ed20 	.word	0xe000ed20
 80099d0:	2000000c 	.word	0x2000000c
 80099d4:	e000ef34 	.word	0xe000ef34

080099d8 <vPortEnterCritical>:
=======
 8009ad2:	f7ff f831 	bl	8008b38 <vTaskSwitchContext>
	prvTaskExitError();
 8009ad6:	f7ff ff1d 	bl	8009914 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3718      	adds	r7, #24
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	e000ed00 	.word	0xe000ed00
 8009ae8:	410fc271 	.word	0x410fc271
 8009aec:	410fc270 	.word	0x410fc270
 8009af0:	e000e400 	.word	0xe000e400
 8009af4:	200010b0 	.word	0x200010b0
 8009af8:	200010b4 	.word	0x200010b4
 8009afc:	e000ed20 	.word	0xe000ed20
 8009b00:	2000000c 	.word	0x2000000c
 8009b04:	e000ef34 	.word	0xe000ef34

08009b08 <vPortEnterCritical>:
>>>>>>> remotes/origin/jayce_working
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< HEAD
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	607b      	str	r3, [r7, #4]
}
 80099f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099f2:	4b10      	ldr	r3, [pc, #64]	@ (8009a34 <vPortEnterCritical+0x5c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	3301      	adds	r3, #1
 80099f8:	4a0e      	ldr	r2, [pc, #56]	@ (8009a34 <vPortEnterCritical+0x5c>)
 80099fa:	6013      	str	r3, [r2, #0]
=======
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	607b      	str	r3, [r7, #4]
}
 8009b20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b22:	4b10      	ldr	r3, [pc, #64]	@ (8009b64 <vPortEnterCritical+0x5c>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	3301      	adds	r3, #1
 8009b28:	4a0e      	ldr	r2, [pc, #56]	@ (8009b64 <vPortEnterCritical+0x5c>)
 8009b2a:	6013      	str	r3, [r2, #0]
>>>>>>> remotes/origin/jayce_working
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< HEAD
 80099fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009a34 <vPortEnterCritical+0x5c>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d110      	bne.n	8009a26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a04:	4b0c      	ldr	r3, [pc, #48]	@ (8009a38 <vPortEnterCritical+0x60>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00b      	beq.n	8009a26 <vPortEnterCritical+0x4e>
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	603b      	str	r3, [r7, #0]
}
 8009a20:	bf00      	nop
 8009a22:	bf00      	nop
 8009a24:	e7fd      	b.n	8009a22 <vPortEnterCritical+0x4a>
	}
}
 8009a26:	bf00      	nop
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	2000000c 	.word	0x2000000c
 8009a38:	e000ed04 	.word	0xe000ed04

08009a3c <vPortExitCritical>:
=======
 8009b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8009b64 <vPortEnterCritical+0x5c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d110      	bne.n	8009b56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b34:	4b0c      	ldr	r3, [pc, #48]	@ (8009b68 <vPortEnterCritical+0x60>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00b      	beq.n	8009b56 <vPortEnterCritical+0x4e>
	__asm volatile
 8009b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b42:	f383 8811 	msr	BASEPRI, r3
 8009b46:	f3bf 8f6f 	isb	sy
 8009b4a:	f3bf 8f4f 	dsb	sy
 8009b4e:	603b      	str	r3, [r7, #0]
}
 8009b50:	bf00      	nop
 8009b52:	bf00      	nop
 8009b54:	e7fd      	b.n	8009b52 <vPortEnterCritical+0x4a>
	}
}
 8009b56:	bf00      	nop
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	2000000c 	.word	0x2000000c
 8009b68:	e000ed04 	.word	0xe000ed04

08009b6c <vPortExitCritical>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< HEAD
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a42:	4b12      	ldr	r3, [pc, #72]	@ (8009a8c <vPortExitCritical+0x50>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d10b      	bne.n	8009a62 <vPortExitCritical+0x26>
	__asm volatile
 8009a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a4e:	f383 8811 	msr	BASEPRI, r3
 8009a52:	f3bf 8f6f 	isb	sy
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	607b      	str	r3, [r7, #4]
}
 8009a5c:	bf00      	nop
 8009a5e:	bf00      	nop
 8009a60:	e7fd      	b.n	8009a5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a62:	4b0a      	ldr	r3, [pc, #40]	@ (8009a8c <vPortExitCritical+0x50>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	3b01      	subs	r3, #1
 8009a68:	4a08      	ldr	r2, [pc, #32]	@ (8009a8c <vPortExitCritical+0x50>)
 8009a6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a6c:	4b07      	ldr	r3, [pc, #28]	@ (8009a8c <vPortExitCritical+0x50>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d105      	bne.n	8009a80 <vPortExitCritical+0x44>
 8009a74:	2300      	movs	r3, #0
 8009a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	f383 8811 	msr	BASEPRI, r3
}
 8009a7e:	bf00      	nop
=======
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b72:	4b12      	ldr	r3, [pc, #72]	@ (8009bbc <vPortExitCritical+0x50>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10b      	bne.n	8009b92 <vPortExitCritical+0x26>
	__asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	607b      	str	r3, [r7, #4]
}
 8009b8c:	bf00      	nop
 8009b8e:	bf00      	nop
 8009b90:	e7fd      	b.n	8009b8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b92:	4b0a      	ldr	r3, [pc, #40]	@ (8009bbc <vPortExitCritical+0x50>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	3b01      	subs	r3, #1
 8009b98:	4a08      	ldr	r2, [pc, #32]	@ (8009bbc <vPortExitCritical+0x50>)
 8009b9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b9c:	4b07      	ldr	r3, [pc, #28]	@ (8009bbc <vPortExitCritical+0x50>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d105      	bne.n	8009bb0 <vPortExitCritical+0x44>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	f383 8811 	msr	BASEPRI, r3
}
 8009bae:	bf00      	nop
>>>>>>> remotes/origin/jayce_working
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< HEAD
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	2000000c 	.word	0x2000000c

08009a90 <PendSV_Handler>:
=======
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	2000000c 	.word	0x2000000c

08009bc0 <PendSV_Handler>:
>>>>>>> remotes/origin/jayce_working

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< HEAD
 8009a90:	f3ef 8009 	mrs	r0, PSP
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	4b15      	ldr	r3, [pc, #84]	@ (8009af0 <pxCurrentTCBConst>)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	f01e 0f10 	tst.w	lr, #16
 8009aa0:	bf08      	it	eq
 8009aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aaa:	6010      	str	r0, [r2, #0]
 8009aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ab4:	f380 8811 	msr	BASEPRI, r0
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f7fe ffa2 	bl	8008a08 <vTaskSwitchContext>
 8009ac4:	f04f 0000 	mov.w	r0, #0
 8009ac8:	f380 8811 	msr	BASEPRI, r0
 8009acc:	bc09      	pop	{r0, r3}
 8009ace:	6819      	ldr	r1, [r3, #0]
 8009ad0:	6808      	ldr	r0, [r1, #0]
 8009ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad6:	f01e 0f10 	tst.w	lr, #16
 8009ada:	bf08      	it	eq
 8009adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ae0:	f380 8809 	msr	PSP, r0
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	f3af 8000 	nop.w

08009af0 <pxCurrentTCBConst>:
 8009af0:	20000a2c 	.word	0x20000a2c
=======
 8009bc0:	f3ef 8009 	mrs	r0, PSP
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	4b15      	ldr	r3, [pc, #84]	@ (8009c20 <pxCurrentTCBConst>)
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	f01e 0f10 	tst.w	lr, #16
 8009bd0:	bf08      	it	eq
 8009bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bda:	6010      	str	r0, [r2, #0]
 8009bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009be0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009be4:	f380 8811 	msr	BASEPRI, r0
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f7fe ffa2 	bl	8008b38 <vTaskSwitchContext>
 8009bf4:	f04f 0000 	mov.w	r0, #0
 8009bf8:	f380 8811 	msr	BASEPRI, r0
 8009bfc:	bc09      	pop	{r0, r3}
 8009bfe:	6819      	ldr	r1, [r3, #0]
 8009c00:	6808      	ldr	r0, [r1, #0]
 8009c02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c06:	f01e 0f10 	tst.w	lr, #16
 8009c0a:	bf08      	it	eq
 8009c0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c10:	f380 8809 	msr	PSP, r0
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	f3af 8000 	nop.w

08009c20 <pxCurrentTCBConst>:
 8009c20:	20000a84 	.word	0x20000a84
>>>>>>> remotes/origin/jayce_working
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< HEAD
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop

08009af8 <xPortSysTickHandler>:
=======
 8009c24:	bf00      	nop
 8009c26:	bf00      	nop

08009c28 <xPortSysTickHandler>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< HEAD
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	607b      	str	r3, [r7, #4]
}
 8009b10:	bf00      	nop
=======
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	607b      	str	r3, [r7, #4]
}
 8009c40:	bf00      	nop
>>>>>>> remotes/origin/jayce_working
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 8009b12:	f7fe febf 	bl	8008894 <xTaskIncrementTick>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d003      	beq.n	8009b24 <xPortSysTickHandler+0x2c>
=======
 8009c42:	f7fe febf 	bl	80089c4 <xTaskIncrementTick>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d003      	beq.n	8009c54 <xPortSysTickHandler+0x2c>
>>>>>>> remotes/origin/jayce_working
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< HEAD
 8009b1c:	4b06      	ldr	r3, [pc, #24]	@ (8009b38 <xPortSysTickHandler+0x40>)
 8009b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	2300      	movs	r3, #0
 8009b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	f383 8811 	msr	BASEPRI, r3
}
 8009b2e:	bf00      	nop
=======
 8009c4c:	4b06      	ldr	r3, [pc, #24]	@ (8009c68 <xPortSysTickHandler+0x40>)
 8009c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c52:	601a      	str	r2, [r3, #0]
 8009c54:	2300      	movs	r3, #0
 8009c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	f383 8811 	msr	BASEPRI, r3
}
 8009c5e:	bf00      	nop
>>>>>>> remotes/origin/jayce_working
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< HEAD
 8009b30:	bf00      	nop
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	e000ed04 	.word	0xe000ed04

08009b3c <vPortSetupTimerInterrupt>:
=======
 8009c60:	bf00      	nop
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	e000ed04 	.word	0xe000ed04

08009c6c <vPortSetupTimerInterrupt>:
>>>>>>> remotes/origin/jayce_working
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< HEAD
 8009b3c:	b480      	push	{r7}
 8009b3e:	af00      	add	r7, sp, #0
=======
 8009c6c:	b480      	push	{r7}
 8009c6e:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< HEAD
 8009b40:	4b0b      	ldr	r3, [pc, #44]	@ (8009b70 <vPortSetupTimerInterrupt+0x34>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b46:	4b0b      	ldr	r3, [pc, #44]	@ (8009b74 <vPortSetupTimerInterrupt+0x38>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b78 <vPortSetupTimerInterrupt+0x3c>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a0a      	ldr	r2, [pc, #40]	@ (8009b7c <vPortSetupTimerInterrupt+0x40>)
 8009b52:	fba2 2303 	umull	r2, r3, r2, r3
 8009b56:	099b      	lsrs	r3, r3, #6
 8009b58:	4a09      	ldr	r2, [pc, #36]	@ (8009b80 <vPortSetupTimerInterrupt+0x44>)
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b5e:	4b04      	ldr	r3, [pc, #16]	@ (8009b70 <vPortSetupTimerInterrupt+0x34>)
 8009b60:	2207      	movs	r2, #7
 8009b62:	601a      	str	r2, [r3, #0]
}
 8009b64:	bf00      	nop
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	e000e010 	.word	0xe000e010
 8009b74:	e000e018 	.word	0xe000e018
 8009b78:	20000000 	.word	0x20000000
 8009b7c:	10624dd3 	.word	0x10624dd3
 8009b80:	e000e014 	.word	0xe000e014

08009b84 <vPortEnableVFP>:
=======
 8009c70:	4b0b      	ldr	r3, [pc, #44]	@ (8009ca0 <vPortSetupTimerInterrupt+0x34>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c76:	4b0b      	ldr	r3, [pc, #44]	@ (8009ca4 <vPortSetupTimerInterrupt+0x38>)
 8009c78:	2200      	movs	r2, #0
 8009c7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8009ca8 <vPortSetupTimerInterrupt+0x3c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a0a      	ldr	r2, [pc, #40]	@ (8009cac <vPortSetupTimerInterrupt+0x40>)
 8009c82:	fba2 2303 	umull	r2, r3, r2, r3
 8009c86:	099b      	lsrs	r3, r3, #6
 8009c88:	4a09      	ldr	r2, [pc, #36]	@ (8009cb0 <vPortSetupTimerInterrupt+0x44>)
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c8e:	4b04      	ldr	r3, [pc, #16]	@ (8009ca0 <vPortSetupTimerInterrupt+0x34>)
 8009c90:	2207      	movs	r2, #7
 8009c92:	601a      	str	r2, [r3, #0]
}
 8009c94:	bf00      	nop
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	e000e010 	.word	0xe000e010
 8009ca4:	e000e018 	.word	0xe000e018
 8009ca8:	20000000 	.word	0x20000000
 8009cac:	10624dd3 	.word	0x10624dd3
 8009cb0:	e000e014 	.word	0xe000e014

08009cb4 <vPortEnableVFP>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< HEAD
 8009b84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009b94 <vPortEnableVFP+0x10>
 8009b88:	6801      	ldr	r1, [r0, #0]
 8009b8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009b8e:	6001      	str	r1, [r0, #0]
 8009b90:	4770      	bx	lr
=======
 8009cb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009cc4 <vPortEnableVFP+0x10>
 8009cb8:	6801      	ldr	r1, [r0, #0]
 8009cba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009cbe:	6001      	str	r1, [r0, #0]
 8009cc0:	4770      	bx	lr
>>>>>>> remotes/origin/jayce_working
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< HEAD
 8009b92:	bf00      	nop
 8009b94:	e000ed88 	.word	0xe000ed88

08009b98 <vPortValidateInterruptPriority>:
=======
 8009cc2:	bf00      	nop
 8009cc4:	e000ed88 	.word	0xe000ed88

08009cc8 <vPortValidateInterruptPriority>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< HEAD
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
=======
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< HEAD
 8009b9e:	f3ef 8305 	mrs	r3, IPSR
 8009ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b0f      	cmp	r3, #15
 8009ba8:	d915      	bls.n	8009bd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009baa:	4a18      	ldr	r2, [pc, #96]	@ (8009c0c <vPortValidateInterruptPriority+0x74>)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	4413      	add	r3, r2
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	72fb      	strb	r3, [r7, #11]
=======
 8009cce:	f3ef 8305 	mrs	r3, IPSR
 8009cd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2b0f      	cmp	r3, #15
 8009cd8:	d915      	bls.n	8009d06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cda:	4a18      	ldr	r2, [pc, #96]	@ (8009d3c <vPortValidateInterruptPriority+0x74>)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4413      	add	r3, r2
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	72fb      	strb	r3, [r7, #11]
>>>>>>> remotes/origin/jayce_working
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< HEAD
 8009bb4:	4b16      	ldr	r3, [pc, #88]	@ (8009c10 <vPortValidateInterruptPriority+0x78>)
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	7afa      	ldrb	r2, [r7, #11]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d20b      	bcs.n	8009bd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	607b      	str	r3, [r7, #4]
}
 8009bd0:	bf00      	nop
 8009bd2:	bf00      	nop
 8009bd4:	e7fd      	b.n	8009bd2 <vPortValidateInterruptPriority+0x3a>
=======
 8009ce4:	4b16      	ldr	r3, [pc, #88]	@ (8009d40 <vPortValidateInterruptPriority+0x78>)
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	7afa      	ldrb	r2, [r7, #11]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d20b      	bcs.n	8009d06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	607b      	str	r3, [r7, #4]
}
 8009d00:	bf00      	nop
 8009d02:	bf00      	nop
 8009d04:	e7fd      	b.n	8009d02 <vPortValidateInterruptPriority+0x3a>
>>>>>>> remotes/origin/jayce_working
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< HEAD
 8009bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8009c14 <vPortValidateInterruptPriority+0x7c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009bde:	4b0e      	ldr	r3, [pc, #56]	@ (8009c18 <vPortValidateInterruptPriority+0x80>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d90b      	bls.n	8009bfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	603b      	str	r3, [r7, #0]
}
 8009bf8:	bf00      	nop
 8009bfa:	bf00      	nop
 8009bfc:	e7fd      	b.n	8009bfa <vPortValidateInterruptPriority+0x62>
	}
 8009bfe:	bf00      	nop
 8009c00:	3714      	adds	r7, #20
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	e000e3f0 	.word	0xe000e3f0
 8009c10:	20001058 	.word	0x20001058
 8009c14:	e000ed0c 	.word	0xe000ed0c
 8009c18:	2000105c 	.word	0x2000105c

08009c1c <pvPortMalloc>:
=======
 8009d06:	4b0f      	ldr	r3, [pc, #60]	@ (8009d44 <vPortValidateInterruptPriority+0x7c>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8009d48 <vPortValidateInterruptPriority+0x80>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d90b      	bls.n	8009d2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1a:	f383 8811 	msr	BASEPRI, r3
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	f3bf 8f4f 	dsb	sy
 8009d26:	603b      	str	r3, [r7, #0]
}
 8009d28:	bf00      	nop
 8009d2a:	bf00      	nop
 8009d2c:	e7fd      	b.n	8009d2a <vPortValidateInterruptPriority+0x62>
	}
 8009d2e:	bf00      	nop
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	e000e3f0 	.word	0xe000e3f0
 8009d40:	200010b0 	.word	0x200010b0
 8009d44:	e000ed0c 	.word	0xe000ed0c
 8009d48:	200010b4 	.word	0x200010b4

08009d4c <pvPortMalloc>:
>>>>>>> remotes/origin/jayce_working
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< HEAD
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b08a      	sub	sp, #40	@ 0x28
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c24:	2300      	movs	r3, #0
 8009c26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c28:	f7fe fd78 	bl	800871c <vTaskSuspendAll>
=======
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b08a      	sub	sp, #40	@ 0x28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d54:	2300      	movs	r3, #0
 8009d56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d58:	f7fe fd78 	bl	800884c <vTaskSuspendAll>
>>>>>>> remotes/origin/jayce_working
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< HEAD
 8009c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8009da0 <pvPortMalloc+0x184>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c34:	f000 f924 	bl	8009e80 <prvHeapInit>
=======
 8009d5c:	4b5c      	ldr	r3, [pc, #368]	@ (8009ed0 <pvPortMalloc+0x184>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d101      	bne.n	8009d68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d64:	f000 f924 	bl	8009fb0 <prvHeapInit>
>>>>>>> remotes/origin/jayce_working

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< HEAD
 8009c38:	4b5a      	ldr	r3, [pc, #360]	@ (8009da4 <pvPortMalloc+0x188>)
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4013      	ands	r3, r2
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f040 8095 	bne.w	8009d70 <pvPortMalloc+0x154>
=======
 8009d68:	4b5a      	ldr	r3, [pc, #360]	@ (8009ed4 <pvPortMalloc+0x188>)
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4013      	ands	r3, r2
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f040 8095 	bne.w	8009ea0 <pvPortMalloc+0x154>
>>>>>>> remotes/origin/jayce_working
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< HEAD
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d01e      	beq.n	8009c8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009c4c:	2208      	movs	r2, #8
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4413      	add	r3, r2
 8009c52:	607b      	str	r3, [r7, #4]
=======
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d01e      	beq.n	8009dba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009d7c:	2208      	movs	r2, #8
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4413      	add	r3, r2
 8009d82:	607b      	str	r3, [r7, #4]
>>>>>>> remotes/origin/jayce_working

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< HEAD
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f003 0307 	and.w	r3, r3, #7
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d015      	beq.n	8009c8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f023 0307 	bic.w	r3, r3, #7
 8009c64:	3308      	adds	r3, #8
 8009c66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f003 0307 	and.w	r3, r3, #7
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00b      	beq.n	8009c8a <pvPortMalloc+0x6e>
	__asm volatile
 8009c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c76:	f383 8811 	msr	BASEPRI, r3
 8009c7a:	f3bf 8f6f 	isb	sy
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	617b      	str	r3, [r7, #20]
}
 8009c84:	bf00      	nop
 8009c86:	bf00      	nop
 8009c88:	e7fd      	b.n	8009c86 <pvPortMalloc+0x6a>
=======
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f003 0307 	and.w	r3, r3, #7
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d015      	beq.n	8009dba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f023 0307 	bic.w	r3, r3, #7
 8009d94:	3308      	adds	r3, #8
 8009d96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f003 0307 	and.w	r3, r3, #7
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00b      	beq.n	8009dba <pvPortMalloc+0x6e>
	__asm volatile
 8009da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da6:	f383 8811 	msr	BASEPRI, r3
 8009daa:	f3bf 8f6f 	isb	sy
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	617b      	str	r3, [r7, #20]
}
 8009db4:	bf00      	nop
 8009db6:	bf00      	nop
 8009db8:	e7fd      	b.n	8009db6 <pvPortMalloc+0x6a>
>>>>>>> remotes/origin/jayce_working
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< HEAD
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d06f      	beq.n	8009d70 <pvPortMalloc+0x154>
 8009c90:	4b45      	ldr	r3, [pc, #276]	@ (8009da8 <pvPortMalloc+0x18c>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d86a      	bhi.n	8009d70 <pvPortMalloc+0x154>
=======
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d06f      	beq.n	8009ea0 <pvPortMalloc+0x154>
 8009dc0:	4b45      	ldr	r3, [pc, #276]	@ (8009ed8 <pvPortMalloc+0x18c>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d86a      	bhi.n	8009ea0 <pvPortMalloc+0x154>
>>>>>>> remotes/origin/jayce_working
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< HEAD
 8009c9a:	4b44      	ldr	r3, [pc, #272]	@ (8009dac <pvPortMalloc+0x190>)
 8009c9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c9e:	4b43      	ldr	r3, [pc, #268]	@ (8009dac <pvPortMalloc+0x190>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ca4:	e004      	b.n	8009cb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d903      	bls.n	8009cc2 <pvPortMalloc+0xa6>
 8009cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1f1      	bne.n	8009ca6 <pvPortMalloc+0x8a>
=======
 8009dca:	4b44      	ldr	r3, [pc, #272]	@ (8009edc <pvPortMalloc+0x190>)
 8009dcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009dce:	4b43      	ldr	r3, [pc, #268]	@ (8009edc <pvPortMalloc+0x190>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dd4:	e004      	b.n	8009de0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d903      	bls.n	8009df2 <pvPortMalloc+0xa6>
 8009dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1f1      	bne.n	8009dd6 <pvPortMalloc+0x8a>
>>>>>>> remotes/origin/jayce_working
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< HEAD
 8009cc2:	4b37      	ldr	r3, [pc, #220]	@ (8009da0 <pvPortMalloc+0x184>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d051      	beq.n	8009d70 <pvPortMalloc+0x154>
=======
 8009df2:	4b37      	ldr	r3, [pc, #220]	@ (8009ed0 <pvPortMalloc+0x184>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d051      	beq.n	8009ea0 <pvPortMalloc+0x154>
>>>>>>> remotes/origin/jayce_working
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< HEAD
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2208      	movs	r2, #8
 8009cd2:	4413      	add	r3, r2
 8009cd4:	61fb      	str	r3, [r7, #28]
=======
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2208      	movs	r2, #8
 8009e02:	4413      	add	r3, r2
 8009e04:	61fb      	str	r3, [r7, #28]
>>>>>>> remotes/origin/jayce_working

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< HEAD
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	6a3b      	ldr	r3, [r7, #32]
 8009cdc:	601a      	str	r2, [r3, #0]
=======
 8009e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< HEAD
 8009cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	1ad2      	subs	r2, r2, r3
 8009ce6:	2308      	movs	r3, #8
 8009ce8:	005b      	lsls	r3, r3, #1
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d920      	bls.n	8009d30 <pvPortMalloc+0x114>
=======
 8009e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e10:	685a      	ldr	r2, [r3, #4]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	1ad2      	subs	r2, r2, r3
 8009e16:	2308      	movs	r3, #8
 8009e18:	005b      	lsls	r3, r3, #1
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d920      	bls.n	8009e60 <pvPortMalloc+0x114>
>>>>>>> remotes/origin/jayce_working
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< HEAD
 8009cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	f003 0307 	and.w	r3, r3, #7
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00b      	beq.n	8009d18 <pvPortMalloc+0xfc>
	__asm volatile
 8009d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	613b      	str	r3, [r7, #16]
}
 8009d12:	bf00      	nop
 8009d14:	bf00      	nop
 8009d16:	e7fd      	b.n	8009d14 <pvPortMalloc+0xf8>
=======
 8009e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4413      	add	r3, r2
 8009e24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	f003 0307 	and.w	r3, r3, #7
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00b      	beq.n	8009e48 <pvPortMalloc+0xfc>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	613b      	str	r3, [r7, #16]
}
 8009e42:	bf00      	nop
 8009e44:	bf00      	nop
 8009e46:	e7fd      	b.n	8009e44 <pvPortMalloc+0xf8>
>>>>>>> remotes/origin/jayce_working

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< HEAD
 8009d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d1a:	685a      	ldr	r2, [r3, #4]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	1ad2      	subs	r2, r2, r3
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d2a:	69b8      	ldr	r0, [r7, #24]
 8009d2c:	f000 f90a 	bl	8009f44 <prvInsertBlockIntoFreeList>
=======
 8009e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	1ad2      	subs	r2, r2, r3
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e5a:	69b8      	ldr	r0, [r7, #24]
 8009e5c:	f000 f90a 	bl	800a074 <prvInsertBlockIntoFreeList>
>>>>>>> remotes/origin/jayce_working
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< HEAD
 8009d30:	4b1d      	ldr	r3, [pc, #116]	@ (8009da8 <pvPortMalloc+0x18c>)
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8009da8 <pvPortMalloc+0x18c>)
 8009d3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8009da8 <pvPortMalloc+0x18c>)
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	4b1b      	ldr	r3, [pc, #108]	@ (8009db0 <pvPortMalloc+0x194>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d203      	bcs.n	8009d52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d4a:	4b17      	ldr	r3, [pc, #92]	@ (8009da8 <pvPortMalloc+0x18c>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a18      	ldr	r2, [pc, #96]	@ (8009db0 <pvPortMalloc+0x194>)
 8009d50:	6013      	str	r3, [r2, #0]
=======
 8009e60:	4b1d      	ldr	r3, [pc, #116]	@ (8009ed8 <pvPortMalloc+0x18c>)
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ed8 <pvPortMalloc+0x18c>)
 8009e6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ed8 <pvPortMalloc+0x18c>)
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	4b1b      	ldr	r3, [pc, #108]	@ (8009ee0 <pvPortMalloc+0x194>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d203      	bcs.n	8009e82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e7a:	4b17      	ldr	r3, [pc, #92]	@ (8009ed8 <pvPortMalloc+0x18c>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a18      	ldr	r2, [pc, #96]	@ (8009ee0 <pvPortMalloc+0x194>)
 8009e80:	6013      	str	r3, [r2, #0]
>>>>>>> remotes/origin/jayce_working
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< HEAD
 8009d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	4b13      	ldr	r3, [pc, #76]	@ (8009da4 <pvPortMalloc+0x188>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	431a      	orrs	r2, r3
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d62:	2200      	movs	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d66:	4b13      	ldr	r3, [pc, #76]	@ (8009db4 <pvPortMalloc+0x198>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	4a11      	ldr	r2, [pc, #68]	@ (8009db4 <pvPortMalloc+0x198>)
 8009d6e:	6013      	str	r3, [r2, #0]
=======
 8009e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e84:	685a      	ldr	r2, [r3, #4]
 8009e86:	4b13      	ldr	r3, [pc, #76]	@ (8009ed4 <pvPortMalloc+0x188>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	431a      	orrs	r2, r3
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e92:	2200      	movs	r2, #0
 8009e94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009e96:	4b13      	ldr	r3, [pc, #76]	@ (8009ee4 <pvPortMalloc+0x198>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	4a11      	ldr	r2, [pc, #68]	@ (8009ee4 <pvPortMalloc+0x198>)
 8009e9e:	6013      	str	r3, [r2, #0]
>>>>>>> remotes/origin/jayce_working
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< HEAD
 8009d70:	f7fe fce2 	bl	8008738 <xTaskResumeAll>
=======
 8009ea0:	f7fe fce2 	bl	8008868 <xTaskResumeAll>
>>>>>>> remotes/origin/jayce_working
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	f003 0307 	and.w	r3, r3, #7
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00b      	beq.n	8009d96 <pvPortMalloc+0x17a>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	60fb      	str	r3, [r7, #12]
}
 8009d90:	bf00      	nop
 8009d92:	bf00      	nop
 8009d94:	e7fd      	b.n	8009d92 <pvPortMalloc+0x176>
	return pvReturn;
 8009d96:	69fb      	ldr	r3, [r7, #28]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3728      	adds	r7, #40	@ 0x28
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	20001c20 	.word	0x20001c20
 8009da4:	20001c34 	.word	0x20001c34
 8009da8:	20001c24 	.word	0x20001c24
 8009dac:	20001c18 	.word	0x20001c18
 8009db0:	20001c28 	.word	0x20001c28
 8009db4:	20001c2c 	.word	0x20001c2c

08009db8 <vPortFree>:
=======
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	f003 0307 	and.w	r3, r3, #7
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00b      	beq.n	8009ec6 <pvPortMalloc+0x17a>
	__asm volatile
 8009eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb2:	f383 8811 	msr	BASEPRI, r3
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	60fb      	str	r3, [r7, #12]
}
 8009ec0:	bf00      	nop
 8009ec2:	bf00      	nop
 8009ec4:	e7fd      	b.n	8009ec2 <pvPortMalloc+0x176>
	return pvReturn;
 8009ec6:	69fb      	ldr	r3, [r7, #28]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3728      	adds	r7, #40	@ 0x28
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	20001c78 	.word	0x20001c78
 8009ed4:	20001c8c 	.word	0x20001c8c
 8009ed8:	20001c7c 	.word	0x20001c7c
 8009edc:	20001c70 	.word	0x20001c70
 8009ee0:	20001c80 	.word	0x20001c80
 8009ee4:	20001c84 	.word	0x20001c84

08009ee8 <vPortFree>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< HEAD
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d04f      	beq.n	8009e6a <vPortFree+0xb2>
=======
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d04f      	beq.n	8009f9a <vPortFree+0xb2>
>>>>>>> remotes/origin/jayce_working
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< HEAD
 8009dca:	2308      	movs	r3, #8
 8009dcc:	425b      	negs	r3, r3
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	4b25      	ldr	r3, [pc, #148]	@ (8009e74 <vPortFree+0xbc>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4013      	ands	r3, r2
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10b      	bne.n	8009dfe <vPortFree+0x46>
	__asm volatile
 8009de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dea:	f383 8811 	msr	BASEPRI, r3
 8009dee:	f3bf 8f6f 	isb	sy
 8009df2:	f3bf 8f4f 	dsb	sy
 8009df6:	60fb      	str	r3, [r7, #12]
}
 8009df8:	bf00      	nop
 8009dfa:	bf00      	nop
 8009dfc:	e7fd      	b.n	8009dfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00b      	beq.n	8009e1e <vPortFree+0x66>
	__asm volatile
 8009e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	60bb      	str	r3, [r7, #8]
}
 8009e18:	bf00      	nop
 8009e1a:	bf00      	nop
 8009e1c:	e7fd      	b.n	8009e1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	685a      	ldr	r2, [r3, #4]
 8009e22:	4b14      	ldr	r3, [pc, #80]	@ (8009e74 <vPortFree+0xbc>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4013      	ands	r3, r2
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d01e      	beq.n	8009e6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d11a      	bne.n	8009e6a <vPortFree+0xb2>
=======
 8009efa:	2308      	movs	r3, #8
 8009efc:	425b      	negs	r3, r3
 8009efe:	697a      	ldr	r2, [r7, #20]
 8009f00:	4413      	add	r3, r2
 8009f02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	4b25      	ldr	r3, [pc, #148]	@ (8009fa4 <vPortFree+0xbc>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4013      	ands	r3, r2
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d10b      	bne.n	8009f2e <vPortFree+0x46>
	__asm volatile
 8009f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	60fb      	str	r3, [r7, #12]
}
 8009f28:	bf00      	nop
 8009f2a:	bf00      	nop
 8009f2c:	e7fd      	b.n	8009f2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00b      	beq.n	8009f4e <vPortFree+0x66>
	__asm volatile
 8009f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f3a:	f383 8811 	msr	BASEPRI, r3
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	60bb      	str	r3, [r7, #8]
}
 8009f48:	bf00      	nop
 8009f4a:	bf00      	nop
 8009f4c:	e7fd      	b.n	8009f4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	685a      	ldr	r2, [r3, #4]
 8009f52:	4b14      	ldr	r3, [pc, #80]	@ (8009fa4 <vPortFree+0xbc>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4013      	ands	r3, r2
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d01e      	beq.n	8009f9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d11a      	bne.n	8009f9a <vPortFree+0xb2>
>>>>>>> remotes/origin/jayce_working
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< HEAD
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	685a      	ldr	r2, [r3, #4]
 8009e38:	4b0e      	ldr	r3, [pc, #56]	@ (8009e74 <vPortFree+0xbc>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	43db      	mvns	r3, r3
 8009e3e:	401a      	ands	r2, r3
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e44:	f7fe fc6a 	bl	800871c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e78 <vPortFree+0xc0>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4413      	add	r3, r2
 8009e52:	4a09      	ldr	r2, [pc, #36]	@ (8009e78 <vPortFree+0xc0>)
 8009e54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e56:	6938      	ldr	r0, [r7, #16]
 8009e58:	f000 f874 	bl	8009f44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e5c:	4b07      	ldr	r3, [pc, #28]	@ (8009e7c <vPortFree+0xc4>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	3301      	adds	r3, #1
 8009e62:	4a06      	ldr	r2, [pc, #24]	@ (8009e7c <vPortFree+0xc4>)
 8009e64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e66:	f7fe fc67 	bl	8008738 <xTaskResumeAll>
=======
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	4b0e      	ldr	r3, [pc, #56]	@ (8009fa4 <vPortFree+0xbc>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	43db      	mvns	r3, r3
 8009f6e:	401a      	ands	r2, r3
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f74:	f7fe fc6a 	bl	800884c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8009fa8 <vPortFree+0xc0>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4413      	add	r3, r2
 8009f82:	4a09      	ldr	r2, [pc, #36]	@ (8009fa8 <vPortFree+0xc0>)
 8009f84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f86:	6938      	ldr	r0, [r7, #16]
 8009f88:	f000 f874 	bl	800a074 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009f8c:	4b07      	ldr	r3, [pc, #28]	@ (8009fac <vPortFree+0xc4>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	3301      	adds	r3, #1
 8009f92:	4a06      	ldr	r2, [pc, #24]	@ (8009fac <vPortFree+0xc4>)
 8009f94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009f96:	f7fe fc67 	bl	8008868 <xTaskResumeAll>
>>>>>>> remotes/origin/jayce_working
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< HEAD
 8009e6a:	bf00      	nop
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	20001c34 	.word	0x20001c34
 8009e78:	20001c24 	.word	0x20001c24
 8009e7c:	20001c30 	.word	0x20001c30

08009e80 <prvHeapInit>:
=======
 8009f9a:	bf00      	nop
 8009f9c:	3718      	adds	r7, #24
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	20001c8c 	.word	0x20001c8c
 8009fa8:	20001c7c 	.word	0x20001c7c
 8009fac:	20001c88 	.word	0x20001c88

08009fb0 <prvHeapInit>:
>>>>>>> remotes/origin/jayce_working
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< HEAD
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
=======
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
>>>>>>> remotes/origin/jayce_working
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< HEAD
 8009e86:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009e8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e8c:	4b27      	ldr	r3, [pc, #156]	@ (8009f2c <prvHeapInit+0xac>)
 8009e8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f003 0307 	and.w	r3, r3, #7
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00c      	beq.n	8009eb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3307      	adds	r3, #7
 8009e9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f023 0307 	bic.w	r3, r3, #7
 8009ea6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	4a1f      	ldr	r2, [pc, #124]	@ (8009f2c <prvHeapInit+0xac>)
 8009eb0:	4413      	add	r3, r2
 8009eb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	607b      	str	r3, [r7, #4]
=======
 8009fb6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009fba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fbc:	4b27      	ldr	r3, [pc, #156]	@ (800a05c <prvHeapInit+0xac>)
 8009fbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f003 0307 	and.w	r3, r3, #7
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00c      	beq.n	8009fe4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	3307      	adds	r3, #7
 8009fce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f023 0307 	bic.w	r3, r3, #7
 8009fd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	4a1f      	ldr	r2, [pc, #124]	@ (800a05c <prvHeapInit+0xac>)
 8009fe0:	4413      	add	r3, r2
 8009fe2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	607b      	str	r3, [r7, #4]
>>>>>>> remotes/origin/jayce_working

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 8009eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8009f30 <prvHeapInit+0xb0>)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8009f30 <prvHeapInit+0xb0>)
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	605a      	str	r2, [r3, #4]
=======
 8009fe8:	4a1d      	ldr	r2, [pc, #116]	@ (800a060 <prvHeapInit+0xb0>)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009fee:	4b1c      	ldr	r3, [pc, #112]	@ (800a060 <prvHeapInit+0xb0>)
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	605a      	str	r2, [r3, #4]
>>>>>>> remotes/origin/jayce_working

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< HEAD
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	4413      	add	r3, r2
 8009eca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ecc:	2208      	movs	r2, #8
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	1a9b      	subs	r3, r3, r2
 8009ed2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f023 0307 	bic.w	r3, r3, #7
 8009eda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	4a15      	ldr	r2, [pc, #84]	@ (8009f34 <prvHeapInit+0xb4>)
 8009ee0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ee2:	4b14      	ldr	r3, [pc, #80]	@ (8009f34 <prvHeapInit+0xb4>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009eea:	4b12      	ldr	r3, [pc, #72]	@ (8009f34 <prvHeapInit+0xb4>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	601a      	str	r2, [r3, #0]
=======
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ffc:	2208      	movs	r2, #8
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	1a9b      	subs	r3, r3, r2
 800a002:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f023 0307 	bic.w	r3, r3, #7
 800a00a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4a15      	ldr	r2, [pc, #84]	@ (800a064 <prvHeapInit+0xb4>)
 800a010:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a012:	4b14      	ldr	r3, [pc, #80]	@ (800a064 <prvHeapInit+0xb4>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2200      	movs	r2, #0
 800a018:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a01a:	4b12      	ldr	r3, [pc, #72]	@ (800a064 <prvHeapInit+0xb4>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2200      	movs	r2, #0
 800a020:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	1ad2      	subs	r2, r2, r3
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f00:	4b0c      	ldr	r3, [pc, #48]	@ (8009f34 <prvHeapInit+0xb4>)
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8009f38 <prvHeapInit+0xb8>)
 8009f0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	4a09      	ldr	r2, [pc, #36]	@ (8009f3c <prvHeapInit+0xbc>)
 8009f16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f18:	4b09      	ldr	r3, [pc, #36]	@ (8009f40 <prvHeapInit+0xc0>)
 8009f1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009f1e:	601a      	str	r2, [r3, #0]
}
 8009f20:	bf00      	nop
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	20001060 	.word	0x20001060
 8009f30:	20001c18 	.word	0x20001c18
 8009f34:	20001c20 	.word	0x20001c20
 8009f38:	20001c28 	.word	0x20001c28
 8009f3c:	20001c24 	.word	0x20001c24
 8009f40:	20001c34 	.word	0x20001c34

08009f44 <prvInsertBlockIntoFreeList>:
=======
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	1ad2      	subs	r2, r2, r3
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a030:	4b0c      	ldr	r3, [pc, #48]	@ (800a064 <prvHeapInit+0xb4>)
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	4a0a      	ldr	r2, [pc, #40]	@ (800a068 <prvHeapInit+0xb8>)
 800a03e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	4a09      	ldr	r2, [pc, #36]	@ (800a06c <prvHeapInit+0xbc>)
 800a046:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a048:	4b09      	ldr	r3, [pc, #36]	@ (800a070 <prvHeapInit+0xc0>)
 800a04a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a04e:	601a      	str	r2, [r3, #0]
}
 800a050:	bf00      	nop
 800a052:	3714      	adds	r7, #20
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr
 800a05c:	200010b8 	.word	0x200010b8
 800a060:	20001c70 	.word	0x20001c70
 800a064:	20001c78 	.word	0x20001c78
 800a068:	20001c80 	.word	0x20001c80
 800a06c:	20001c7c 	.word	0x20001c7c
 800a070:	20001c8c 	.word	0x20001c8c

0800a074 <prvInsertBlockIntoFreeList>:
>>>>>>> remotes/origin/jayce_working
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< HEAD
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
=======
 800a074:	b480      	push	{r7}
 800a076:	b085      	sub	sp, #20
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
>>>>>>> remotes/origin/jayce_working
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 8009f4c:	4b28      	ldr	r3, [pc, #160]	@ (8009ff0 <prvInsertBlockIntoFreeList+0xac>)
 8009f4e:	60fb      	str	r3, [r7, #12]
 8009f50:	e002      	b.n	8009f58 <prvInsertBlockIntoFreeList+0x14>
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	60fb      	str	r3, [r7, #12]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d8f7      	bhi.n	8009f52 <prvInsertBlockIntoFreeList+0xe>
=======
 800a07c:	4b28      	ldr	r3, [pc, #160]	@ (800a120 <prvInsertBlockIntoFreeList+0xac>)
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	e002      	b.n	800a088 <prvInsertBlockIntoFreeList+0x14>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	60fb      	str	r3, [r7, #12]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d8f7      	bhi.n	800a082 <prvInsertBlockIntoFreeList+0xe>
>>>>>>> remotes/origin/jayce_working
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< HEAD
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d108      	bne.n	8009f86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	685a      	ldr	r2, [r3, #4]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	441a      	add	r2, r3
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	607b      	str	r3, [r7, #4]
=======
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	4413      	add	r3, r2
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d108      	bne.n	800a0b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	685a      	ldr	r2, [r3, #4]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	441a      	add	r2, r3
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	607b      	str	r3, [r7, #4]
>>>>>>> remotes/origin/jayce_working
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< HEAD
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	441a      	add	r2, r3
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d118      	bne.n	8009fcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	4b15      	ldr	r3, [pc, #84]	@ (8009ff4 <prvInsertBlockIntoFreeList+0xb0>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d00d      	beq.n	8009fc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	685a      	ldr	r2, [r3, #4]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	441a      	add	r2, r3
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	601a      	str	r2, [r3, #0]
 8009fc0:	e008      	b.n	8009fd4 <prvInsertBlockIntoFreeList+0x90>
=======
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	441a      	add	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d118      	bne.n	800a0fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	4b15      	ldr	r3, [pc, #84]	@ (800a124 <prvInsertBlockIntoFreeList+0xb0>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d00d      	beq.n	800a0f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	685a      	ldr	r2, [r3, #4]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	441a      	add	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	601a      	str	r2, [r3, #0]
 800a0f0:	e008      	b.n	800a104 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> remotes/origin/jayce_working
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< HEAD
 8009fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8009ff4 <prvInsertBlockIntoFreeList+0xb0>)
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	601a      	str	r2, [r3, #0]
 8009fca:	e003      	b.n	8009fd4 <prvInsertBlockIntoFreeList+0x90>
=======
 800a0f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a124 <prvInsertBlockIntoFreeList+0xb0>)
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	601a      	str	r2, [r3, #0]
 800a0fa:	e003      	b.n	800a104 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> remotes/origin/jayce_working
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< HEAD
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	601a      	str	r2, [r3, #0]
=======
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< HEAD
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d002      	beq.n	8009fe2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	601a      	str	r2, [r3, #0]
=======
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d002      	beq.n	800a112 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	601a      	str	r2, [r3, #0]
>>>>>>> remotes/origin/jayce_working
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 8009fe2:	bf00      	nop
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	20001c18 	.word	0x20001c18
 8009ff4:	20001c20 	.word	0x20001c20

08009ff8 <memset>:
 8009ff8:	4402      	add	r2, r0
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d100      	bne.n	800a002 <memset+0xa>
 800a000:	4770      	bx	lr
 800a002:	f803 1b01 	strb.w	r1, [r3], #1
 800a006:	e7f9      	b.n	8009ffc <memset+0x4>

0800a008 <_reclaim_reent>:
 800a008:	4b29      	ldr	r3, [pc, #164]	@ (800a0b0 <_reclaim_reent+0xa8>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4283      	cmp	r3, r0
 800a00e:	b570      	push	{r4, r5, r6, lr}
 800a010:	4604      	mov	r4, r0
 800a012:	d04b      	beq.n	800a0ac <_reclaim_reent+0xa4>
 800a014:	69c3      	ldr	r3, [r0, #28]
 800a016:	b1ab      	cbz	r3, 800a044 <_reclaim_reent+0x3c>
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	b16b      	cbz	r3, 800a038 <_reclaim_reent+0x30>
 800a01c:	2500      	movs	r5, #0
 800a01e:	69e3      	ldr	r3, [r4, #28]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	5959      	ldr	r1, [r3, r5]
 800a024:	2900      	cmp	r1, #0
 800a026:	d13b      	bne.n	800a0a0 <_reclaim_reent+0x98>
 800a028:	3504      	adds	r5, #4
 800a02a:	2d80      	cmp	r5, #128	@ 0x80
 800a02c:	d1f7      	bne.n	800a01e <_reclaim_reent+0x16>
 800a02e:	69e3      	ldr	r3, [r4, #28]
 800a030:	4620      	mov	r0, r4
 800a032:	68d9      	ldr	r1, [r3, #12]
 800a034:	f000 f872 	bl	800a11c <_free_r>
 800a038:	69e3      	ldr	r3, [r4, #28]
 800a03a:	6819      	ldr	r1, [r3, #0]
 800a03c:	b111      	cbz	r1, 800a044 <_reclaim_reent+0x3c>
 800a03e:	4620      	mov	r0, r4
 800a040:	f000 f86c 	bl	800a11c <_free_r>
 800a044:	6961      	ldr	r1, [r4, #20]
 800a046:	b111      	cbz	r1, 800a04e <_reclaim_reent+0x46>
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 f867 	bl	800a11c <_free_r>
 800a04e:	69e1      	ldr	r1, [r4, #28]
 800a050:	b111      	cbz	r1, 800a058 <_reclaim_reent+0x50>
 800a052:	4620      	mov	r0, r4
 800a054:	f000 f862 	bl	800a11c <_free_r>
 800a058:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a05a:	b111      	cbz	r1, 800a062 <_reclaim_reent+0x5a>
 800a05c:	4620      	mov	r0, r4
 800a05e:	f000 f85d 	bl	800a11c <_free_r>
 800a062:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a064:	b111      	cbz	r1, 800a06c <_reclaim_reent+0x64>
 800a066:	4620      	mov	r0, r4
 800a068:	f000 f858 	bl	800a11c <_free_r>
 800a06c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a06e:	b111      	cbz	r1, 800a076 <_reclaim_reent+0x6e>
 800a070:	4620      	mov	r0, r4
 800a072:	f000 f853 	bl	800a11c <_free_r>
 800a076:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a078:	b111      	cbz	r1, 800a080 <_reclaim_reent+0x78>
 800a07a:	4620      	mov	r0, r4
 800a07c:	f000 f84e 	bl	800a11c <_free_r>
 800a080:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a082:	b111      	cbz	r1, 800a08a <_reclaim_reent+0x82>
 800a084:	4620      	mov	r0, r4
 800a086:	f000 f849 	bl	800a11c <_free_r>
 800a08a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a08c:	b111      	cbz	r1, 800a094 <_reclaim_reent+0x8c>
 800a08e:	4620      	mov	r0, r4
 800a090:	f000 f844 	bl	800a11c <_free_r>
 800a094:	6a23      	ldr	r3, [r4, #32]
 800a096:	b14b      	cbz	r3, 800a0ac <_reclaim_reent+0xa4>
 800a098:	4620      	mov	r0, r4
 800a09a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a09e:	4718      	bx	r3
 800a0a0:	680e      	ldr	r6, [r1, #0]
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f000 f83a 	bl	800a11c <_free_r>
 800a0a8:	4631      	mov	r1, r6
 800a0aa:	e7bb      	b.n	800a024 <_reclaim_reent+0x1c>
 800a0ac:	bd70      	pop	{r4, r5, r6, pc}
 800a0ae:	bf00      	nop
 800a0b0:	20000010 	.word	0x20000010

0800a0b4 <__libc_init_array>:
 800a0b4:	b570      	push	{r4, r5, r6, lr}
 800a0b6:	4d0d      	ldr	r5, [pc, #52]	@ (800a0ec <__libc_init_array+0x38>)
 800a0b8:	4c0d      	ldr	r4, [pc, #52]	@ (800a0f0 <__libc_init_array+0x3c>)
 800a0ba:	1b64      	subs	r4, r4, r5
 800a0bc:	10a4      	asrs	r4, r4, #2
 800a0be:	2600      	movs	r6, #0
 800a0c0:	42a6      	cmp	r6, r4
 800a0c2:	d109      	bne.n	800a0d8 <__libc_init_array+0x24>
 800a0c4:	4d0b      	ldr	r5, [pc, #44]	@ (800a0f4 <__libc_init_array+0x40>)
 800a0c6:	4c0c      	ldr	r4, [pc, #48]	@ (800a0f8 <__libc_init_array+0x44>)
 800a0c8:	f000 f87e 	bl	800a1c8 <_init>
 800a0cc:	1b64      	subs	r4, r4, r5
 800a0ce:	10a4      	asrs	r4, r4, #2
 800a0d0:	2600      	movs	r6, #0
 800a0d2:	42a6      	cmp	r6, r4
 800a0d4:	d105      	bne.n	800a0e2 <__libc_init_array+0x2e>
 800a0d6:	bd70      	pop	{r4, r5, r6, pc}
 800a0d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0dc:	4798      	blx	r3
 800a0de:	3601      	adds	r6, #1
 800a0e0:	e7ee      	b.n	800a0c0 <__libc_init_array+0xc>
 800a0e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0e6:	4798      	blx	r3
 800a0e8:	3601      	adds	r6, #1
 800a0ea:	e7f2      	b.n	800a0d2 <__libc_init_array+0x1e>
 800a0ec:	0800a330 	.word	0x0800a330
 800a0f0:	0800a330 	.word	0x0800a330
 800a0f4:	0800a330 	.word	0x0800a330
 800a0f8:	0800a334 	.word	0x0800a334

0800a0fc <__retarget_lock_acquire_recursive>:
 800a0fc:	4770      	bx	lr

0800a0fe <__retarget_lock_release_recursive>:
 800a0fe:	4770      	bx	lr

0800a100 <memcpy>:
 800a100:	440a      	add	r2, r1
 800a102:	4291      	cmp	r1, r2
 800a104:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a108:	d100      	bne.n	800a10c <memcpy+0xc>
 800a10a:	4770      	bx	lr
 800a10c:	b510      	push	{r4, lr}
 800a10e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a112:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a116:	4291      	cmp	r1, r2
 800a118:	d1f9      	bne.n	800a10e <memcpy+0xe>
 800a11a:	bd10      	pop	{r4, pc}

0800a11c <_free_r>:
 800a11c:	b538      	push	{r3, r4, r5, lr}
 800a11e:	4605      	mov	r5, r0
 800a120:	2900      	cmp	r1, #0
 800a122:	d041      	beq.n	800a1a8 <_free_r+0x8c>
 800a124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a128:	1f0c      	subs	r4, r1, #4
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	bfb8      	it	lt
 800a12e:	18e4      	addlt	r4, r4, r3
 800a130:	f000 f83e 	bl	800a1b0 <__malloc_lock>
 800a134:	4a1d      	ldr	r2, [pc, #116]	@ (800a1ac <_free_r+0x90>)
 800a136:	6813      	ldr	r3, [r2, #0]
 800a138:	b933      	cbnz	r3, 800a148 <_free_r+0x2c>
 800a13a:	6063      	str	r3, [r4, #4]
 800a13c:	6014      	str	r4, [r2, #0]
 800a13e:	4628      	mov	r0, r5
 800a140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a144:	f000 b83a 	b.w	800a1bc <__malloc_unlock>
 800a148:	42a3      	cmp	r3, r4
 800a14a:	d908      	bls.n	800a15e <_free_r+0x42>
 800a14c:	6820      	ldr	r0, [r4, #0]
 800a14e:	1821      	adds	r1, r4, r0
 800a150:	428b      	cmp	r3, r1
 800a152:	bf01      	itttt	eq
 800a154:	6819      	ldreq	r1, [r3, #0]
 800a156:	685b      	ldreq	r3, [r3, #4]
 800a158:	1809      	addeq	r1, r1, r0
 800a15a:	6021      	streq	r1, [r4, #0]
 800a15c:	e7ed      	b.n	800a13a <_free_r+0x1e>
 800a15e:	461a      	mov	r2, r3
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	b10b      	cbz	r3, 800a168 <_free_r+0x4c>
 800a164:	42a3      	cmp	r3, r4
 800a166:	d9fa      	bls.n	800a15e <_free_r+0x42>
 800a168:	6811      	ldr	r1, [r2, #0]
 800a16a:	1850      	adds	r0, r2, r1
 800a16c:	42a0      	cmp	r0, r4
 800a16e:	d10b      	bne.n	800a188 <_free_r+0x6c>
 800a170:	6820      	ldr	r0, [r4, #0]
 800a172:	4401      	add	r1, r0
 800a174:	1850      	adds	r0, r2, r1
 800a176:	4283      	cmp	r3, r0
 800a178:	6011      	str	r1, [r2, #0]
 800a17a:	d1e0      	bne.n	800a13e <_free_r+0x22>
 800a17c:	6818      	ldr	r0, [r3, #0]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	6053      	str	r3, [r2, #4]
 800a182:	4408      	add	r0, r1
 800a184:	6010      	str	r0, [r2, #0]
 800a186:	e7da      	b.n	800a13e <_free_r+0x22>
 800a188:	d902      	bls.n	800a190 <_free_r+0x74>
 800a18a:	230c      	movs	r3, #12
 800a18c:	602b      	str	r3, [r5, #0]
 800a18e:	e7d6      	b.n	800a13e <_free_r+0x22>
 800a190:	6820      	ldr	r0, [r4, #0]
 800a192:	1821      	adds	r1, r4, r0
 800a194:	428b      	cmp	r3, r1
 800a196:	bf04      	itt	eq
 800a198:	6819      	ldreq	r1, [r3, #0]
 800a19a:	685b      	ldreq	r3, [r3, #4]
 800a19c:	6063      	str	r3, [r4, #4]
 800a19e:	bf04      	itt	eq
 800a1a0:	1809      	addeq	r1, r1, r0
 800a1a2:	6021      	streq	r1, [r4, #0]
 800a1a4:	6054      	str	r4, [r2, #4]
 800a1a6:	e7ca      	b.n	800a13e <_free_r+0x22>
 800a1a8:	bd38      	pop	{r3, r4, r5, pc}
 800a1aa:	bf00      	nop
 800a1ac:	20001d74 	.word	0x20001d74

0800a1b0 <__malloc_lock>:
 800a1b0:	4801      	ldr	r0, [pc, #4]	@ (800a1b8 <__malloc_lock+0x8>)
 800a1b2:	f7ff bfa3 	b.w	800a0fc <__retarget_lock_acquire_recursive>
 800a1b6:	bf00      	nop
 800a1b8:	20001d70 	.word	0x20001d70

0800a1bc <__malloc_unlock>:
 800a1bc:	4801      	ldr	r0, [pc, #4]	@ (800a1c4 <__malloc_unlock+0x8>)
 800a1be:	f7ff bf9e 	b.w	800a0fe <__retarget_lock_release_recursive>
 800a1c2:	bf00      	nop
 800a1c4:	20001d70 	.word	0x20001d70

0800a1c8 <_init>:
 800a1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ca:	bf00      	nop
 800a1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ce:	bc08      	pop	{r3}
 800a1d0:	469e      	mov	lr, r3
 800a1d2:	4770      	bx	lr

0800a1d4 <_fini>:
 800a1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d6:	bf00      	nop
 800a1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1da:	bc08      	pop	{r3}
 800a1dc:	469e      	mov	lr, r3
 800a1de:	4770      	bx	lr
=======
 800a112:	bf00      	nop
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	20001c70 	.word	0x20001c70
 800a124:	20001c78 	.word	0x20001c78

0800a128 <memset>:
 800a128:	4402      	add	r2, r0
 800a12a:	4603      	mov	r3, r0
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d100      	bne.n	800a132 <memset+0xa>
 800a130:	4770      	bx	lr
 800a132:	f803 1b01 	strb.w	r1, [r3], #1
 800a136:	e7f9      	b.n	800a12c <memset+0x4>

0800a138 <_reclaim_reent>:
 800a138:	4b29      	ldr	r3, [pc, #164]	@ (800a1e0 <_reclaim_reent+0xa8>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4283      	cmp	r3, r0
 800a13e:	b570      	push	{r4, r5, r6, lr}
 800a140:	4604      	mov	r4, r0
 800a142:	d04b      	beq.n	800a1dc <_reclaim_reent+0xa4>
 800a144:	69c3      	ldr	r3, [r0, #28]
 800a146:	b1ab      	cbz	r3, 800a174 <_reclaim_reent+0x3c>
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	b16b      	cbz	r3, 800a168 <_reclaim_reent+0x30>
 800a14c:	2500      	movs	r5, #0
 800a14e:	69e3      	ldr	r3, [r4, #28]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	5959      	ldr	r1, [r3, r5]
 800a154:	2900      	cmp	r1, #0
 800a156:	d13b      	bne.n	800a1d0 <_reclaim_reent+0x98>
 800a158:	3504      	adds	r5, #4
 800a15a:	2d80      	cmp	r5, #128	@ 0x80
 800a15c:	d1f7      	bne.n	800a14e <_reclaim_reent+0x16>
 800a15e:	69e3      	ldr	r3, [r4, #28]
 800a160:	4620      	mov	r0, r4
 800a162:	68d9      	ldr	r1, [r3, #12]
 800a164:	f000 f872 	bl	800a24c <_free_r>
 800a168:	69e3      	ldr	r3, [r4, #28]
 800a16a:	6819      	ldr	r1, [r3, #0]
 800a16c:	b111      	cbz	r1, 800a174 <_reclaim_reent+0x3c>
 800a16e:	4620      	mov	r0, r4
 800a170:	f000 f86c 	bl	800a24c <_free_r>
 800a174:	6961      	ldr	r1, [r4, #20]
 800a176:	b111      	cbz	r1, 800a17e <_reclaim_reent+0x46>
 800a178:	4620      	mov	r0, r4
 800a17a:	f000 f867 	bl	800a24c <_free_r>
 800a17e:	69e1      	ldr	r1, [r4, #28]
 800a180:	b111      	cbz	r1, 800a188 <_reclaim_reent+0x50>
 800a182:	4620      	mov	r0, r4
 800a184:	f000 f862 	bl	800a24c <_free_r>
 800a188:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a18a:	b111      	cbz	r1, 800a192 <_reclaim_reent+0x5a>
 800a18c:	4620      	mov	r0, r4
 800a18e:	f000 f85d 	bl	800a24c <_free_r>
 800a192:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a194:	b111      	cbz	r1, 800a19c <_reclaim_reent+0x64>
 800a196:	4620      	mov	r0, r4
 800a198:	f000 f858 	bl	800a24c <_free_r>
 800a19c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a19e:	b111      	cbz	r1, 800a1a6 <_reclaim_reent+0x6e>
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f000 f853 	bl	800a24c <_free_r>
 800a1a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a1a8:	b111      	cbz	r1, 800a1b0 <_reclaim_reent+0x78>
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f000 f84e 	bl	800a24c <_free_r>
 800a1b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a1b2:	b111      	cbz	r1, 800a1ba <_reclaim_reent+0x82>
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f000 f849 	bl	800a24c <_free_r>
 800a1ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a1bc:	b111      	cbz	r1, 800a1c4 <_reclaim_reent+0x8c>
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f000 f844 	bl	800a24c <_free_r>
 800a1c4:	6a23      	ldr	r3, [r4, #32]
 800a1c6:	b14b      	cbz	r3, 800a1dc <_reclaim_reent+0xa4>
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a1ce:	4718      	bx	r3
 800a1d0:	680e      	ldr	r6, [r1, #0]
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f000 f83a 	bl	800a24c <_free_r>
 800a1d8:	4631      	mov	r1, r6
 800a1da:	e7bb      	b.n	800a154 <_reclaim_reent+0x1c>
 800a1dc:	bd70      	pop	{r4, r5, r6, pc}
 800a1de:	bf00      	nop
 800a1e0:	20000010 	.word	0x20000010

0800a1e4 <__libc_init_array>:
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	4d0d      	ldr	r5, [pc, #52]	@ (800a21c <__libc_init_array+0x38>)
 800a1e8:	4c0d      	ldr	r4, [pc, #52]	@ (800a220 <__libc_init_array+0x3c>)
 800a1ea:	1b64      	subs	r4, r4, r5
 800a1ec:	10a4      	asrs	r4, r4, #2
 800a1ee:	2600      	movs	r6, #0
 800a1f0:	42a6      	cmp	r6, r4
 800a1f2:	d109      	bne.n	800a208 <__libc_init_array+0x24>
 800a1f4:	4d0b      	ldr	r5, [pc, #44]	@ (800a224 <__libc_init_array+0x40>)
 800a1f6:	4c0c      	ldr	r4, [pc, #48]	@ (800a228 <__libc_init_array+0x44>)
 800a1f8:	f000 f87e 	bl	800a2f8 <_init>
 800a1fc:	1b64      	subs	r4, r4, r5
 800a1fe:	10a4      	asrs	r4, r4, #2
 800a200:	2600      	movs	r6, #0
 800a202:	42a6      	cmp	r6, r4
 800a204:	d105      	bne.n	800a212 <__libc_init_array+0x2e>
 800a206:	bd70      	pop	{r4, r5, r6, pc}
 800a208:	f855 3b04 	ldr.w	r3, [r5], #4
 800a20c:	4798      	blx	r3
 800a20e:	3601      	adds	r6, #1
 800a210:	e7ee      	b.n	800a1f0 <__libc_init_array+0xc>
 800a212:	f855 3b04 	ldr.w	r3, [r5], #4
 800a216:	4798      	blx	r3
 800a218:	3601      	adds	r6, #1
 800a21a:	e7f2      	b.n	800a202 <__libc_init_array+0x1e>
 800a21c:	0800a430 	.word	0x0800a430
 800a220:	0800a430 	.word	0x0800a430
 800a224:	0800a430 	.word	0x0800a430
 800a228:	0800a434 	.word	0x0800a434

0800a22c <__retarget_lock_acquire_recursive>:
 800a22c:	4770      	bx	lr

0800a22e <__retarget_lock_release_recursive>:
 800a22e:	4770      	bx	lr

0800a230 <memcpy>:
 800a230:	440a      	add	r2, r1
 800a232:	4291      	cmp	r1, r2
 800a234:	f100 33ff 	add.w	r3, r0, #4294967295
 800a238:	d100      	bne.n	800a23c <memcpy+0xc>
 800a23a:	4770      	bx	lr
 800a23c:	b510      	push	{r4, lr}
 800a23e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a242:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a246:	4291      	cmp	r1, r2
 800a248:	d1f9      	bne.n	800a23e <memcpy+0xe>
 800a24a:	bd10      	pop	{r4, pc}

0800a24c <_free_r>:
 800a24c:	b538      	push	{r3, r4, r5, lr}
 800a24e:	4605      	mov	r5, r0
 800a250:	2900      	cmp	r1, #0
 800a252:	d041      	beq.n	800a2d8 <_free_r+0x8c>
 800a254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a258:	1f0c      	subs	r4, r1, #4
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	bfb8      	it	lt
 800a25e:	18e4      	addlt	r4, r4, r3
 800a260:	f000 f83e 	bl	800a2e0 <__malloc_lock>
 800a264:	4a1d      	ldr	r2, [pc, #116]	@ (800a2dc <_free_r+0x90>)
 800a266:	6813      	ldr	r3, [r2, #0]
 800a268:	b933      	cbnz	r3, 800a278 <_free_r+0x2c>
 800a26a:	6063      	str	r3, [r4, #4]
 800a26c:	6014      	str	r4, [r2, #0]
 800a26e:	4628      	mov	r0, r5
 800a270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a274:	f000 b83a 	b.w	800a2ec <__malloc_unlock>
 800a278:	42a3      	cmp	r3, r4
 800a27a:	d908      	bls.n	800a28e <_free_r+0x42>
 800a27c:	6820      	ldr	r0, [r4, #0]
 800a27e:	1821      	adds	r1, r4, r0
 800a280:	428b      	cmp	r3, r1
 800a282:	bf01      	itttt	eq
 800a284:	6819      	ldreq	r1, [r3, #0]
 800a286:	685b      	ldreq	r3, [r3, #4]
 800a288:	1809      	addeq	r1, r1, r0
 800a28a:	6021      	streq	r1, [r4, #0]
 800a28c:	e7ed      	b.n	800a26a <_free_r+0x1e>
 800a28e:	461a      	mov	r2, r3
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	b10b      	cbz	r3, 800a298 <_free_r+0x4c>
 800a294:	42a3      	cmp	r3, r4
 800a296:	d9fa      	bls.n	800a28e <_free_r+0x42>
 800a298:	6811      	ldr	r1, [r2, #0]
 800a29a:	1850      	adds	r0, r2, r1
 800a29c:	42a0      	cmp	r0, r4
 800a29e:	d10b      	bne.n	800a2b8 <_free_r+0x6c>
 800a2a0:	6820      	ldr	r0, [r4, #0]
 800a2a2:	4401      	add	r1, r0
 800a2a4:	1850      	adds	r0, r2, r1
 800a2a6:	4283      	cmp	r3, r0
 800a2a8:	6011      	str	r1, [r2, #0]
 800a2aa:	d1e0      	bne.n	800a26e <_free_r+0x22>
 800a2ac:	6818      	ldr	r0, [r3, #0]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	6053      	str	r3, [r2, #4]
 800a2b2:	4408      	add	r0, r1
 800a2b4:	6010      	str	r0, [r2, #0]
 800a2b6:	e7da      	b.n	800a26e <_free_r+0x22>
 800a2b8:	d902      	bls.n	800a2c0 <_free_r+0x74>
 800a2ba:	230c      	movs	r3, #12
 800a2bc:	602b      	str	r3, [r5, #0]
 800a2be:	e7d6      	b.n	800a26e <_free_r+0x22>
 800a2c0:	6820      	ldr	r0, [r4, #0]
 800a2c2:	1821      	adds	r1, r4, r0
 800a2c4:	428b      	cmp	r3, r1
 800a2c6:	bf04      	itt	eq
 800a2c8:	6819      	ldreq	r1, [r3, #0]
 800a2ca:	685b      	ldreq	r3, [r3, #4]
 800a2cc:	6063      	str	r3, [r4, #4]
 800a2ce:	bf04      	itt	eq
 800a2d0:	1809      	addeq	r1, r1, r0
 800a2d2:	6021      	streq	r1, [r4, #0]
 800a2d4:	6054      	str	r4, [r2, #4]
 800a2d6:	e7ca      	b.n	800a26e <_free_r+0x22>
 800a2d8:	bd38      	pop	{r3, r4, r5, pc}
 800a2da:	bf00      	nop
 800a2dc:	20001dcc 	.word	0x20001dcc

0800a2e0 <__malloc_lock>:
 800a2e0:	4801      	ldr	r0, [pc, #4]	@ (800a2e8 <__malloc_lock+0x8>)
 800a2e2:	f7ff bfa3 	b.w	800a22c <__retarget_lock_acquire_recursive>
 800a2e6:	bf00      	nop
 800a2e8:	20001dc8 	.word	0x20001dc8

0800a2ec <__malloc_unlock>:
 800a2ec:	4801      	ldr	r0, [pc, #4]	@ (800a2f4 <__malloc_unlock+0x8>)
 800a2ee:	f7ff bf9e 	b.w	800a22e <__retarget_lock_release_recursive>
 800a2f2:	bf00      	nop
 800a2f4:	20001dc8 	.word	0x20001dc8

0800a2f8 <_init>:
 800a2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2fa:	bf00      	nop
 800a2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2fe:	bc08      	pop	{r3}
 800a300:	469e      	mov	lr, r3
 800a302:	4770      	bx	lr

0800a304 <_fini>:
 800a304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a306:	bf00      	nop
 800a308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a30a:	bc08      	pop	{r3}
 800a30c:	469e      	mov	lr, r3
 800a30e:	4770      	bx	lr
>>>>>>> remotes/origin/jayce_working
